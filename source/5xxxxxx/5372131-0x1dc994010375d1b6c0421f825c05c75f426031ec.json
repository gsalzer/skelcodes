{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Math\r\n{\r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n}\r\n\r\ncontract Grass is Math\r\n{\r\n  uint256 public availableTokens;\r\n  uint256 currentTokenPriceInDollar;\r\n\r\n  uint256 public lastUpdateEtherPrice;\r\n  uint256 public etherPriceInDollarIn;\r\n  uint256 public etherPriceInDollarOut;\r\n\r\n  function getCurrentTokenPrice() public constant returns (uint256)\r\n  {\r\n      uint256 today = getToday();\r\n      return (tokenPriceHistory[today] == 0)?currentTokenPriceInDollar:tokenPriceHistory[today];\r\n  }\r\n\r\n  mapping(uint256 => uint256) public tokenPriceHistory;\r\n  struct ExtraTokensInfo\r\n  {\r\n    uint256 timestamp;\r\n    uint256 extraTokens;\r\n    string  proofLink;\r\n    uint256 videoFileHash;\r\n  }\r\n\r\n  ExtraTokensInfo[] public extraTokens;\r\n\r\n  struct TokenInfo\r\n  {\r\n    uint256 amount;\r\n    bool isReturnedInPool;\r\n  }\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // address => day => amount\r\n  mapping(address => mapping(uint256 => TokenInfo)) timeTable;\r\n  mapping(address => mapping(uint256 => uint256)) bonuses;\r\n  mapping (address => uint256) public balances;\r\n  uint256 public totalSupply;\r\n\r\n  string public name;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n\r\n  bool isCanBuy = true;\r\n\r\n  modifier canBuy()\r\n  {\r\n      assert(isCanBuy);\r\n      _;\r\n  }\r\n\r\n  function changeState(bool bNewState) public onlyAdmin\r\n  {\r\n      isCanBuy = bNewState;\r\n  }\r\n\r\n  address owner;\r\n  mapping(address => bool) admins;\r\n  modifier onlyAdmin()\r\n  {\r\n      assert(admins[msg.sender] == true || msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  modifier onlyOwner()\r\n  {\r\n      assert(msg.sender == owner);\r\n      _;\r\n  }\r\n  function addAdmin(address addr) public onlyOwner\r\n  {\r\n      admins[addr] = true;\r\n  }\r\n  function removeAdmin(address addr) public onlyOwner\r\n  {\r\n      admins[addr] = false;\r\n  }\r\n\r\n  function Grass() public\r\n  {\r\n    // startTime = block.timestamp;\r\n    owner = msg.sender;\r\n    admins[msg.sender] = true;\r\n    totalSupply = 0;\r\n    name = 'GRASS Token';\r\n    decimals = 18;\r\n    symbol = 'GRASS';\r\n    availableTokens = 800 * 10**18;\r\n    currentTokenPriceInDollar = 35 * 100; // 35.00$ (price may change)\r\n\r\n    etherPriceInDollarIn = 388 * 100;\r\n    etherPriceInDollarOut = 450 * 100;\r\n    lastUpdateEtherPrice = block.timestamp;\r\n  }\r\n\r\n  function increaseMaxAvailableTokens(uint256 amount, string link, uint256 videoFileHash) onlyAdmin public\r\n  {\r\n    extraTokens.push(ExtraTokensInfo(block.timestamp, amount, link, videoFileHash));\r\n    availableTokens = add(availableTokens, amount);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return balances[_owner];\r\n  }\r\n\r\n  function updateEtherPrice (uint256 newPriceIn, uint256 newPriceOut) onlyAdmin public\r\n  {\r\n    etherPriceInDollarIn = newPriceIn;\r\n    etherPriceInDollarOut = newPriceOut;\r\n    lastUpdateEtherPrice = block.timestamp;\r\n  }\r\n\r\n  modifier isEtherPriceUpdated()\r\n  {\r\n      require(now - lastUpdateEtherPrice < 24 hours);\r\n      _;\r\n  }\r\n\r\n  function updateTokenPrice (uint256 newPrice) onlyAdmin public\r\n  {\r\n    currentTokenPriceInDollar = newPrice;\r\n  }\r\n\r\n  function getToday() public constant returns (uint256)\r\n  {\r\n    return block.timestamp / 24 hours;\r\n  }\r\n\r\n  function() isEtherPriceUpdated canBuy isInitialized payable public\r\n  {\r\n    buyInternal(msg.sender);\r\n  }\r\n\r\n  function buyFor(address addr) isEtherPriceUpdated canBuy onlyAdmin isInitialized payable public\r\n  {\r\n    buyInternal(addr);\r\n  }\r\n\r\n  function buy() isEtherPriceUpdated canBuy payable isInitialized public\r\n  {\r\n    buyInternal(msg.sender);\r\n  }\r\n\r\n  function getPartnerBalance (address addr) public view returns(uint256)\r\n  {\r\n    return partners[addr];\r\n  }\r\n\r\n  function partnerWithdraw () isInitialized public\r\n  {\r\n    assert (partners[msg.sender] > 0);\r\n    uint256 ethToWidthdraw = partners[msg.sender];\r\n    partners[msg.sender] = 0;\r\n    msg.sender.transfer(ethToWidthdraw);\r\n  }\r\n\r\n  mapping(address => uint256) partners;\r\n  // refferal => partner\r\n  mapping(address => address) referrals;\r\n\r\n  function takeEther(address dest, uint256 amount) onlyAdmin public\r\n  {\r\n      dest.transfer(amount);\r\n  }\r\n\r\n  function addEther() payable onlyAdmin public\r\n  {\r\n  }\r\n\r\n  function buyWithPromo(address partner) isEtherPriceUpdated canBuy isInitialized payable public\r\n  {\r\n      if (referrals[msg.sender] == 0 && partner != msg.sender)\r\n      {\r\n        referrals[msg.sender] = partner;\r\n      }\r\n\r\n      buyInternal(msg.sender);\r\n  }\r\n\r\n  function buyInternal(address addr) internal\r\n  {\r\n    if (referrals[addr] != 0)\r\n    {\r\n        partners[referrals[addr]] += msg.value / 100; // 1% to partner\r\n    }\r\n\r\n    assert (isContract(addr) == false);\r\n\r\n    // проверка lastUpdateEtherPrice\r\n    uint256 today = getToday();\r\n    if (tokenPriceHistory[today] == 0) tokenPriceHistory[today] = currentTokenPriceInDollar;\r\n\r\n    // timeTable\r\n    uint256 amount = msg.value * etherPriceInDollarIn / tokenPriceHistory[today] ;\r\n    if (amount > availableTokens)\r\n    {\r\n       addr.transfer((amount - availableTokens) * tokenPriceHistory[today] / etherPriceInDollarIn);\r\n       amount = availableTokens;\r\n    }\r\n\r\n    assert(amount > 0);\r\n\r\n    availableTokens = sub(availableTokens, amount);\r\n\r\n    // is new day ?\r\n    if (timeTable[addr][today].amount == 0)\r\n    {\r\n      timeTable[addr][today] = TokenInfo(amount, false);\r\n    }\r\n    else\r\n    {\r\n      timeTable[addr][today].amount += amount;\r\n    }\r\n\r\n    //                  < 30.03.2018\r\n    if (block.timestamp < 1522357200 && bonuses[addr][today] == 0)\r\n    {\r\n      bonuses[addr][today] = 1;\r\n    }\r\n\r\n    balances[addr] = add(balances[addr], amount);\r\n    totalSupply = add(totalSupply, amount);\r\n    emit Transfer(0, addr, amount);\r\n  }\r\n\r\n  function calculateProfit (uint256 day) public constant returns(int256)\r\n  {\r\n    uint256 today = getToday();\r\n    assert(today >= day);\r\n    uint256 daysLeft = today - day;\r\n    int256 extraProfit = 0;\r\n\r\n    // is referral ?\r\n    if (referrals[msg.sender] != 0) extraProfit++;\r\n    // participant until March 30\r\n    if (bonuses[msg.sender][day] > 0) extraProfit++;\r\n\r\n    if (daysLeft <= 7) return -10;\r\n    if (daysLeft <= 14) return -5;\r\n    if (daysLeft <= 21) return 1 + extraProfit;\r\n    if (daysLeft <= 28) return 3 + extraProfit;\r\n    if (daysLeft <= 60) return 5 + extraProfit;\r\n    if (daysLeft <= 90) return 12 + extraProfit;\r\n    return 18 + extraProfit;\r\n  }\r\n\r\n  function getTokensPerDay(uint256 _day) public view returns (uint256)\r\n  {\r\n      return timeTable[msg.sender][_day].amount;\r\n  }\r\n\r\n  // returns amount, ether\r\n  function getProfitForDay(uint256 day, uint256 amount) isEtherPriceUpdated public constant returns(uint256, uint256)\r\n  {\r\n    assert (day <= getToday());\r\n\r\n    uint256 tokenPrice = tokenPriceHistory[day];\r\n    if (timeTable[msg.sender][day].amount < amount) amount = timeTable[msg.sender][day].amount;\r\n\r\n    assert (amount > 0);\r\n\r\n    return (amount, amount * tokenPrice * uint256(100 + calculateProfit(day)) / 100 / etherPriceInDollarOut);\r\n  }\r\n\r\n  function returnTokensInPool (address[] addr, uint256[] _days) public\r\n  {\r\n    assert (addr.length == _days.length);\r\n\r\n    TokenInfo storage info;\r\n    for(uint256 i = 0; i < addr.length;i++)\r\n    {\r\n      assert(_days[i] + 92 < getToday() && info.amount > 0);\r\n      info = timeTable[addr[i]][_days[i]];\r\n      info.isReturnedInPool = true;\r\n      availableTokens = add(availableTokens, info.amount);\r\n    }\r\n  }\r\n\r\n  function getInfo(address addr, uint256 start, uint256 end) public constant returns (uint256[30] _days, uint256[30] _amounts, int256[30] _profits, uint256[30] _etherAmounts)\r\n  {\r\n      if (addr == 0) addr = msg.sender;\r\n\r\n      uint256 j = 0;\r\n      for(uint256 iDay = start; iDay < end; iDay++)\r\n      {\r\n        if (timeTable[addr][iDay].amount > 0)\r\n        {\r\n          _days[j] = iDay;\r\n          _profits[j] = calculateProfit(iDay);\r\n          _amounts[j] = timeTable[addr][iDay].amount;\r\n          (_amounts[j], _etherAmounts[j]) = getProfitForDay(iDay, _amounts[j]);\r\n          j++;\r\n          if (j == 30) break;\r\n        }\r\n      }\r\n  }\r\n\r\n  function returnTokensForDay(uint256 day, uint256 userTokensAmount) isInitialized public\r\n  {\r\n    uint256 tokensAmount;\r\n    uint256 etherAmount;\r\n    (tokensAmount, etherAmount) = getProfitForDay(day, userTokensAmount);\r\n\r\n    require(day > 0);\r\n    require(balances[msg.sender] >= tokensAmount);\r\n\r\n    balances[msg.sender] = sub(balances[msg.sender], tokensAmount);\r\n    totalSupply = sub(totalSupply, tokensAmount);\r\n    timeTable[msg.sender][day].amount = sub(timeTable[msg.sender][day].amount, tokensAmount);\r\n\r\n    if (!timeTable[msg.sender][day].isReturnedInPool)\r\n    {\r\n      availableTokens = add(availableTokens, tokensAmount);\r\n    }\r\n\r\n    msg.sender.transfer(etherAmount);\r\n    emit Transfer(msg.sender, 0, tokensAmount);\r\n  }\r\n\r\n  function isContract(address addr) internal returns (bool)\r\n  {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n  bool public initialized = false;\r\n\r\n  modifier isInitialized()\r\n  {\r\n      assert(initialized);\r\n      _;\r\n  }\r\n\r\n  uint8 balancesTransferred = 0;\r\n  // restore tokens from previous contract \r\n  function restoreBalances(address[60] addr, uint256[60] _days, uint256[60] _amounts) external onlyAdmin\r\n  {\r\n    // call when contract is not initialized\r\n    assert(initialized == false);\r\n\r\n    if (totalSupply == 0)\r\n    {\r\n        balances[0x9d4f1d5c6da16f28405cb8b063500606e41b8279] = 151428571428571428571;\r\n        balances[0x35497d9c2beaa5debc48da2208d6b03222f5e753] = 75714285714285714285;\r\n        balances[0xb43f0c8ad004f7fdd50bc9b1c2ca06cad653f56d] = 60571428571428571428;\r\n        balances[0x006f2e159f3e3f2363a64b952122d27df1b307cd] = 49453400000000000000;\r\n        balances[0xb8c180dd09e611ac253ab321650b8b5393d6a00c] = 31972285714285714284;\r\n        balances[0xa209e963d089f03c26fff226a411028700fb6009] = 29281428571428571427;\r\n        balances[0xec185474a0c593f741cca00995aa22f078ec02e2] = 25000000000000000514;\r\n        balances[0x1c1a6b49bccb8b2c12ddf874fc69e14c4371343b] = 14655428571428571428;\r\n        balances[0x38aeeb7e8390632e45f44c01a7b982a9e03a1b10] = 11671422857142857142;\r\n        balances[0xfeff4cd1fc9273848c0cbabacc688c5e5707ddd5] = 9999999999999999428;\r\n        balances[0x1c0c4d7961c96576c21b63b0b892b88ec5b86742] = 8227208857142857142;\r\n        balances[0xdae0aca4b9b38199408ffab32562bf7b3b0495fe] = 5999999999999999957;\r\n        balances[0x2c46fb6e390d90f5742877728d81a5e354c2be0c] = 5990527428571428570;\r\n        balances[0x3c9e6d9a10956f29ec20d797c26ba720e4f0f327] = 5013159428571428571;\r\n        balances[0xb9621f1a9402fa3119fd6b011a23dd007e05b7af] = 5000108571428571427;\r\n        balances[0xae2856a1ea65093852b8828efcaabb16ac987d6b] = 4174942857142857142;\r\n        balances[0xb9507bfc17d6b70177d778ead1cd581c2572b6c1] = 3022857142857142857;\r\n        balances[0x2e983528f19633cf25eee2aa93c78542d660a20f] = 3000000000000000131;\r\n        balances[0xf4b733ff2f2eab631e2860bb60dc596074b9912d] = 3000000000000000131;\r\n        balances[0x431d78c14b570aafb4940c8df524b5a7f5373f46] = 2999999999999999851;\r\n        balances[0xda43b71d5ba11b61f315867ff8fc29db7d34ed31] = 3000000000000000131;\r\n        balances[0x7d9c012ea8e111cec46e89e01b7cd63687696862] = 2771866285714285714;\r\n        balances[0x1c1d8b576c7354dccd20d017b1cde68a942353b6] = 2490045714285714285;\r\n        balances[0x024c07e4e9631763d8db8294bfc8f4fd82113ef5] = 2109977142857142857;\r\n        balances[0x64f482e94e9781c42ada16742780709613ea7fe0] = 2031377142857142857;\r\n        balances[0x0c371ce4b7dcc1da7d68b004d5dea49667af7320] = 1999999999999999885;\r\n        balances[0x709b1599cfe4b06ff4fce1cc4fe8a72ac55c2f10] = 1999999999999999885;\r\n        balances[0xe217aee24b3181540d17f872d3d791b41224bc31] = 1999999999999999885;\r\n        balances[0x0d85570eef6baa41a8f918e48973ea54a9385ee7] = 2000000000000000120;\r\n        balances[0xcf1a033ae5b48def61c8ceb21d41c293a9e5d3c0] = 2000000000000000057;\r\n        balances[0xbc202f5082e403090d7dd483545f680a37efb7e5] = 1999999999999999885;\r\n        balances[0xdf18736dcafaa40b8880b481c5bfab5196089535] = 1999999999999999885;\r\n        balances[0x83da64ffdfe4f6c3a4cf9891d840096ee984b456] = 1271428571428571428;\r\n        balances[0x3babede4f2275762f1c6b4a8185a0056ceee4f5f] = 1051428571428571428;\r\n        balances[0x2f4f98d2489bec1c98515e0f75596e0b135a6023] = 1000480000000000000;\r\n        balances[0xe89156e5694f94b86fabfefab173cf6dd1f2ee00] = 1000000000000000125;\r\n        balances[0x890430d3dbc99846b72c77de7ec10e91ad956619] = 1000000000000000125;\r\n        balances[0x4ee63ad9a151d7c8360561bc00cbe9d7f81c4677] = 1000000000000000125;\r\n        balances[0xc5398714592750850693b56e74c8a5618ae14d38] = 1000000000000000125;\r\n        balances[0xab4a42f7a9ada127858c2e054778e000ea0b8325] = 1000000000000000125;\r\n        balances[0xfcc9b4658b296fe9d667c5a264f4da209dec13db] = 1000000000000000125;\r\n        balances[0x36a93d56e175947be686f0a65bb328d400c1a8b9] = 1000000000000000125;\r\n        balances[0x362a979afe6e5b6acb57d075be9e6f462acacc85] = 1000000000000000125;\r\n        balances[0xe50f079b8f9d67002c787cf9dbd456fc11bd5779] = 999999999999999942;\r\n        balances[0x68afff1424c27246647969dee18e7150124b2b28] = 999999999999999942;\r\n        balances[0x44aba76f01b6498a485dd8f8ee1615d422b8cbf8] = 999999999999999942;\r\n        balances[0x1d51752cd228c3d71714f16401ccdaecfe6d52c3] = 999999999999999942;\r\n        balances[0x5eb72c2bbd74d3e9cb61f5d43002104403a16b43] = 999999999999999942;\r\n        balances[0xa0a0d04bb08051780e5a6cba3080b623fc8404a6] = 999999999999999942;\r\n        balances[0xec49706126ae73db0ca54664d8b0feeb67c3c777] = 999999999999999942;\r\n        balances[0xa95413cd1bc9bdf336e9c2c074fb9ffa91bb89a6] = 999999999999999942;\r\n        balances[0x884a7cc58132ca80897d98bfae87ce72e0eaf461] = 999999999999999942;\r\n        balances[0xb6593630850c56aee328be42038fc6d347b37440] = 999999999999999942;\r\n        balances[0x324ddd8b98b23cb2b6ffaeb84b9bb99ec3de9db6] = 999999999999999942;\r\n        balances[0x1013809376254288325a7b49d60c395da80eeef5] = 1000000000000000028;\r\n        balances[0x3f6753388a491e958b2de57634060e28c7ff2c1e] = 1000000000000000062;\r\n        balances[0xe7800dc7166f11decd415c3a74ec9d0cfa3ceb06] = 431405714285714285;\r\n        totalSupply = 557335064857142857325;\r\n        availableTokens = availableTokens - totalSupply;\r\n        \r\n        uint256 today = getToday();\r\n        for(uint256 j=17614;j <= today;j++)\r\n        {\r\n            tokenPriceHistory[j] = currentTokenPriceInDollar;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        uint8 start = balancesTransferred;\r\n        for(uint8 i=start; i < start+30; i++)\r\n        {\r\n            assert(addr[i] != 0 && _days[i] !=0 && _amounts[i] !=0);\r\n            timeTable[addr[i]][_days[i]] = TokenInfo(_amounts[i], false);\r\n            emit Transfer(0, addr[i], _amounts[i]);\r\n            if (_days[i] < 17620 && bonuses[addr[i]][_days[i]] == 0)\r\n            {\r\n                bonuses[addr[i]][_days[i]] = 1;\r\n            }\r\n        }\r\n        balancesTransferred += 30;\r\n\r\n        if (balancesTransferred == 60) initialized = true;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPartnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceIn\",\"type\":\"uint256\"},{\"name\":\"newPriceOut\",\"type\":\"uint256\"}],\"name\":\"updateEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraTokens\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"extraTokens\",\"type\":\"uint256\"},{\"name\":\"proofLink\",\"type\":\"string\"},{\"name\":\"videoFileHash\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bNewState\",\"type\":\"bool\"}],\"name\":\"changeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"_days\",\"type\":\"uint256[30]\"},{\"name\":\"_amounts\",\"type\":\"uint256[30]\"},{\"name\":\"_profits\",\"type\":\"int256[30]\"},{\"name\":\"_etherAmounts\",\"type\":\"uint256[30]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"calculateProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateEtherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInDollarOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInDollarIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"partnerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"buyWithPromo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getTokensPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"_days\",\"type\":\"uint256[]\"}],\"name\":\"returnTokensInPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[60]\"},{\"name\":\"_days\",\"type\":\"uint256[60]\"},{\"name\":\"_amounts\",\"type\":\"uint256[60]\"}],\"name\":\"restoreBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"userTokensAmount\",\"type\":\"uint256\"}],\"name\":\"returnTokensForDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"videoFileHash\",\"type\":\"uint256\"}],\"name\":\"increaseMaxAvailableTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProfitForDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Grass","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eeb2bdcce3f57337b8084b6add759ed63f2d069cb45121bf73eca6623ef808d9"}]}