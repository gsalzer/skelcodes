{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/ConversionRatesInterface.sol\r\n\r\ninterface ConversionRatesInterface {\r\n\r\n    function recordImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public;\r\n\r\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\r\n    function setQtyStepFunction(ERC20 token, int[] xBuy, int[] yBuy, int[] xSell, int[] ySell) public;\r\n    function setImbalanceStepFunction(ERC20 token, int[] xBuy, int[] yBuy, int[] xSell, int[] ySell) public;\r\n    function claimAdmin() public;\r\n    function addOperator(address newOperator) public;\r\n    function transferAdmin(address newAdmin) public;\r\n    function addToken(ERC20 token) public;\r\n    function setTokenControlInfo(\r\n        ERC20 token,\r\n        uint minimalRecordResolution,\r\n        uint maxPerBlockImbalance,\r\n        uint maxTotalImbalance\r\n    ) public;\r\n    function enableTokenTrade(ERC20 token) public;\r\n    function getTokenControlInfo(ERC20 token) public view returns(uint, uint, uint);\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/wrapperContracts/WrapperBase.sol\r\n\r\ncontract WrapperBase is Withdrawable {\r\n\r\n    PermissionGroups wrappedContract;\r\n\r\n    struct DataTracker {\r\n        address [] approveSignatureArray;\r\n        uint lastSetNonce;\r\n    }\r\n\r\n    DataTracker[] internal dataInstances;\r\n\r\n    function WrapperBase(PermissionGroups _wrappedContract, address _admin) public {\r\n        require(_wrappedContract != address(0));\r\n        require(_admin != address(0));\r\n        wrappedContract = _wrappedContract;\r\n        admin = _admin;\r\n    }\r\n\r\n    function claimWrappedContractAdmin() public onlyAdmin {\r\n        wrappedContract.claimAdmin();\r\n    }\r\n\r\n    function transferWrappedContractAdmin (address newAdmin) public onlyAdmin {\r\n        wrappedContract.transferAdmin(newAdmin);\r\n    }\r\n\r\n    function addDataInstance() internal returns (uint) {\r\n        address[] memory add = new address[](0);\r\n        dataInstances.push(DataTracker(add, 0));\r\n        return(dataInstances.length - 1);\r\n    }\r\n\r\n    function setNewData(uint dataIndex) internal {\r\n        require(dataIndex < dataInstances.length);\r\n        dataInstances[dataIndex].lastSetNonce++;\r\n        dataInstances[dataIndex].approveSignatureArray.length = 0;\r\n    }\r\n\r\n    function addSignature(uint dataIndex, uint signedNonce, address signer) internal returns(bool allSigned) {\r\n        require(dataIndex < dataInstances.length);\r\n        require(dataInstances[dataIndex].lastSetNonce == signedNonce);\r\n\r\n        for(uint i = 0; i < dataInstances[dataIndex].approveSignatureArray.length; i++) {\r\n            if (signer == dataInstances[dataIndex].approveSignatureArray[i]) revert();\r\n        }\r\n        dataInstances[dataIndex].approveSignatureArray.push(signer);\r\n\r\n        if (dataInstances[dataIndex].approveSignatureArray.length == operatorsGroup.length) {\r\n            allSigned = true;\r\n        } else {\r\n            allSigned = false;\r\n        }\r\n    }\r\n\r\n    function getDataTrackingParameters(uint index) internal view returns (address[], uint) {\r\n        require(index < dataInstances.length);\r\n        return(dataInstances[index].approveSignatureArray, dataInstances[index].lastSetNonce);\r\n    }\r\n}\r\n\r\n// File: contracts/wrapperContracts/WrapConversionRate.sol\r\n\r\ncontract WrapConversionRate is WrapperBase {\r\n\r\n    ConversionRatesInterface conversionRates;\r\n\r\n    //add token parameters\r\n    ERC20     addTokenToken;\r\n    uint      addTokenMinimalResolution; // can be roughly 1 cent\r\n    uint      addTokenMaxPerBlockImbalance; // in twei resolution\r\n    uint      addTokenMaxTotalImbalance;\r\n    uint      addTokenDataIndex;\r\n\r\n    //set token control info parameters.\r\n    ERC20[]     tokenInfoTokenList;\r\n    uint[]      tokenInfoPerBlockImbalance; // in twei resolution\r\n    uint[]      tokenInfoMaxTotalImbalance;\r\n    uint        tokenInfoDataIndex;\r\n\r\n    //general functions\r\n    function WrapConversionRate(ConversionRatesInterface _conversionRates, address _admin) public\r\n        WrapperBase(PermissionGroups(address(_conversionRates)), _admin)\r\n    {\r\n        require (_conversionRates != address(0));\r\n        conversionRates = _conversionRates;\r\n        addTokenDataIndex = addDataInstance();\r\n        tokenInfoDataIndex = addDataInstance();\r\n    }\r\n\r\n    function getWrappedContract() public view returns (ConversionRatesInterface _conversionRates) {\r\n        _conversionRates = conversionRates;\r\n    }\r\n\r\n    // add token functions\r\n    //////////////////////\r\n    function setAddTokenData(ERC20 token, uint minimalRecordResolution, uint maxPerBlockImbalance, uint maxTotalImbalance) public onlyOperator {\r\n        require(minimalRecordResolution != 0);\r\n        require(maxPerBlockImbalance != 0);\r\n        require(maxTotalImbalance != 0);\r\n\r\n        //update data tracking\r\n        setNewData(addTokenDataIndex);\r\n\r\n        addTokenToken = token;\r\n        addTokenMinimalResolution = minimalRecordResolution; // can be roughly 1 cent\r\n        addTokenMaxPerBlockImbalance = maxPerBlockImbalance; // in twei resolution\r\n        addTokenMaxTotalImbalance = maxTotalImbalance;\r\n    }\r\n\r\n    function signToApproveAddTokenData(uint nonce) public onlyOperator {\r\n        if(addSignature(addTokenDataIndex, nonce, msg.sender)) {\r\n            // can perform operation.\r\n            performAddToken();\r\n        }\r\n    }\r\n\r\n    function performAddToken() internal {\r\n        conversionRates.addToken(addTokenToken);\r\n\r\n        //token control info\r\n        conversionRates.setTokenControlInfo(\r\n            addTokenToken,\r\n            addTokenMinimalResolution,\r\n            addTokenMaxPerBlockImbalance,\r\n            addTokenMaxTotalImbalance\r\n        );\r\n\r\n        //step functions\r\n        int[] memory zeroArr = new int[](1);\r\n        zeroArr[0] = 0;\r\n\r\n        conversionRates.setQtyStepFunction(addTokenToken, zeroArr, zeroArr, zeroArr, zeroArr);\r\n        conversionRates.setImbalanceStepFunction(addTokenToken, zeroArr, zeroArr, zeroArr, zeroArr);\r\n\r\n        conversionRates.enableTokenTrade(addTokenToken);\r\n    }\r\n\r\n    function getAddTokenParameters() public view\r\n        returns(ERC20 token, uint minimalRecordResolution, uint maxPerBlockImbalance, uint maxTotalImbalance)\r\n    {\r\n        token = addTokenToken;\r\n        minimalRecordResolution = addTokenMinimalResolution;\r\n        maxPerBlockImbalance = addTokenMaxPerBlockImbalance; // in twei resolution\r\n        maxTotalImbalance = addTokenMaxTotalImbalance;\r\n    }\r\n\r\n    function getAddTokenDataTracking() public view returns (address[] signatures, uint nonce) {\r\n        (signatures, nonce) = getDataTrackingParameters(addTokenDataIndex);\r\n        return(signatures, nonce);\r\n    }\r\n\r\n    //set token control info\r\n    ////////////////////////\r\n    function setTokenInfoData(ERC20 [] tokens, uint[] maxPerBlockImbalanceValues, uint[] maxTotalImbalanceValues)\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(maxPerBlockImbalanceValues.length == tokens.length);\r\n        require(maxTotalImbalanceValues.length == tokens.length);\r\n\r\n        //update data tracking\r\n        setNewData(tokenInfoDataIndex);\r\n\r\n        tokenInfoTokenList = tokens;\r\n        tokenInfoPerBlockImbalance = maxPerBlockImbalanceValues;\r\n        tokenInfoMaxTotalImbalance = maxTotalImbalanceValues;\r\n    }\r\n\r\n    function signToApproveTokenControlInfo(uint nonce) public onlyOperator {\r\n        if(addSignature(tokenInfoDataIndex, nonce, msg.sender)) {\r\n            // can perform operation.\r\n            performSetTokenControlInfo();\r\n        }\r\n    }\r\n\r\n    function performSetTokenControlInfo() internal {\r\n        require(tokenInfoTokenList.length == tokenInfoPerBlockImbalance.length);\r\n        require(tokenInfoTokenList.length == tokenInfoMaxTotalImbalance.length);\r\n\r\n        uint minimalRecordResolution;\r\n        uint rxMaxPerBlockImbalance;\r\n        uint rxMaxTotalImbalance;\r\n\r\n        for (uint i = 0; i < tokenInfoTokenList.length; i++) {\r\n            (minimalRecordResolution, rxMaxPerBlockImbalance, rxMaxTotalImbalance) =\r\n                conversionRates.getTokenControlInfo(tokenInfoTokenList[i]);\r\n            require(minimalRecordResolution != 0);\r\n\r\n            conversionRates.setTokenControlInfo(tokenInfoTokenList[i],\r\n                                                minimalRecordResolution,\r\n                                                tokenInfoPerBlockImbalance[i],\r\n                                                tokenInfoMaxTotalImbalance[i]);\r\n        }\r\n    }\r\n\r\n    function getControlInfoPerToken (uint index) public view returns(ERC20 token, uint _maxPerBlockImbalance, uint _maxTotalImbalance) {\r\n        require (tokenInfoTokenList.length > index);\r\n        require (tokenInfoPerBlockImbalance.length > index);\r\n        require (tokenInfoMaxTotalImbalance.length > index);\r\n\r\n        return(tokenInfoTokenList[index], tokenInfoPerBlockImbalance[index], tokenInfoMaxTotalImbalance[index]);\r\n    }\r\n\r\n    function getTokenInfoData() public view returns(ERC20[], uint[], uint[]) {\r\n        return(tokenInfoTokenList, tokenInfoPerBlockImbalance, tokenInfoMaxTotalImbalance);\r\n    }\r\n\r\n    function getTokenInfoTokenList() public view returns(ERC20[] tokens) {\r\n        return(tokenInfoTokenList);\r\n    }\r\n\r\n    function getTokenInfoMaxPerBlockImbalanceList() public view returns(uint[] maxPerBlockImbalanceValues) {\r\n        return (tokenInfoPerBlockImbalance);\r\n    }\r\n\r\n    function getTokenInfoMaxTotalImbalanceList() public view returns(uint[] maxTotalImbalanceValues) {\r\n        return(tokenInfoMaxTotalImbalance);\r\n    }\r\n\r\n    function getTokenInfoDataTracking() public view returns (address[] signatures, uint nonce) {\r\n        (signatures, nonce) = getDataTrackingParameters(tokenInfoDataIndex);\r\n        return(signatures, nonce);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimWrappedContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInfoMaxTotalImbalanceList\",\"outputs\":[{\"name\":\"maxTotalImbalanceValues\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInfoTokenList\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInfoData\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWrappedContract\",\"outputs\":[{\"name\":\"_conversionRates\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInfoMaxPerBlockImbalanceList\",\"outputs\":[{\"name\":\"maxPerBlockImbalanceValues\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddTokenParameters\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"minimalRecordResolution\",\"type\":\"uint256\"},{\"name\":\"maxPerBlockImbalance\",\"type\":\"uint256\"},{\"name\":\"maxTotalImbalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferWrappedContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signToApproveTokenControlInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"minimalRecordResolution\",\"type\":\"uint256\"},{\"name\":\"maxPerBlockImbalance\",\"type\":\"uint256\"},{\"name\":\"maxTotalImbalance\",\"type\":\"uint256\"}],\"name\":\"setAddTokenData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signToApproveAddTokenData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"maxPerBlockImbalanceValues\",\"type\":\"uint256[]\"},{\"name\":\"maxTotalImbalanceValues\",\"type\":\"uint256[]\"}],\"name\":\"setTokenInfoData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInfoDataTracking\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getControlInfoPerToken\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_maxPerBlockImbalance\",\"type\":\"uint256\"},{\"name\":\"_maxTotalImbalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddTokenDataTracking\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_conversionRates\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"WrapConversionRate","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000798abda6cc246d0edba912092a2a3dbd3d11191b00000000000000000000000005ded3642aa55cd65fd49968e0c72dceeac9eb81","Library":"","SwarmSource":"bzzr://b952ac15510d46cc20743a14bef9464f8af16487f0a09a38128ad7e1a2fd4dab"}]}