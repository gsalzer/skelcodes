{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function withdrawAll() public onlyOwner{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawPart(address _to,uint256 _percent) public onlyOwner{\r\n        require(_percent>0&&_percent<=100);\r\n        require(_to != address(0));\r\n        uint256 _amount = address(this).balance - address(this).balance*(100 - _percent)/100;\r\n        if (_amount>0){\r\n            _to.transfer(_amount);\r\n        }\r\n    }\r\n}\r\ncontract Pausable is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused returns(bool) {\r\n        paused = true;\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused returns(bool) {\r\n        paused = false;\r\n        return true;\r\n    }\r\n\r\n}\r\ncontract WWC is Pausable {\r\n    string[33] public teams = [\r\n        \"\",\r\n        \"Egypt\",              // 1\r\n        \"Morocco\",            // 2\r\n        \"Nigeria\",            // 3\r\n        \"Senegal\",            // 4\r\n        \"Tunisia\",            // 5\r\n        \"Australia\",          // 6\r\n        \"IR Iran\",            // 7\r\n        \"Japan\",              // 8\r\n        \"Korea Republic\",     // 9\r\n        \"Saudi Arabia\",       // 10\r\n        \"Belgium\",            // 11\r\n        \"Croatia\",            // 12\r\n        \"Denmark\",            // 13\r\n        \"England\",            // 14\r\n        \"France\",             // 15\r\n        \"Germany\",            // 16\r\n        \"Iceland\",            // 17\r\n        \"Poland\",             // 18\r\n        \"Portugal\",           // 19\r\n        \"Russia\",             // 20\r\n        \"Serbia\",             // 21\r\n        \"Spain\",              // 22\r\n        \"Sweden\",             // 23\r\n        \"Switzerland\",        // 24\r\n        \"Costa Rica\",         // 25\r\n        \"Mexico\",             // 26\r\n        \"Panama\",             // 27\r\n        \"Argentina\",          // 28\r\n        \"Brazil\",             // 29\r\n        \"Colombia\",           // 30\r\n        \"Peru\",               // 31\r\n        \"Uruguay\"             // 32\r\n    ];\r\n}\r\n\r\ncontract Champion is WWC {\r\n    event VoteSuccessful(address user,uint256 team, uint256 amount);\r\n    \r\n    using SafeMath for uint256;\r\n    struct Vote {\r\n        mapping(address => uint256) amounts;\r\n        uint256 totalAmount;\r\n        address[] users;\r\n        mapping(address => uint256) weightedAmounts;\r\n        uint256 weightedTotalAmount;\r\n    }\r\n    uint256 public pool;\r\n    Vote[33] votes;\r\n    uint256 public voteCut = 5;\r\n    uint256 public poolCut = 30;\r\n    \r\n    uint256 public teamWon;\r\n    uint256 public voteStopped;\r\n    \r\n    uint256 public minVote = 0.05 ether;\r\n    uint256 public voteWeight = 4;\r\n    \r\n    mapping(address=>uint256) public alreadyWithdraw;\r\n\r\n    modifier validTeam(uint256 _teamno) {\r\n        require(_teamno > 0 && _teamno <= 32);\r\n        _;\r\n    }\r\n\r\n    function setVoteWeight(uint256 _w) public onlyOwner{\r\n        require(_w>0&& _w<voteWeight);\r\n        voteWeight = _w;\r\n    }\r\n    \r\n    function setMinVote(uint256 _min) public onlyOwner{\r\n        require(_min>=0.01 ether);\r\n        minVote = _min;\r\n    }\r\n    function setVoteCut(uint256 _cut) public onlyOwner{\r\n        require(_cut>=0&&_cut<=100);\r\n        voteCut = _cut;\r\n    }\r\n    \r\n    function setPoolCut(uint256 _cut) public onlyOwner{\r\n        require(_cut>=0&&_cut<=100);\r\n        poolCut = _cut;\r\n    }\r\n    function getVoteOf(uint256 _team) validTeam(_team) public view returns(\r\n        uint256 totalUsers,\r\n        uint256 totalAmount,\r\n        uint256 meAmount,\r\n        uint256 meWeightedAmount\r\n    ) {\r\n        Vote storage _v = votes[_team];\r\n        totalAmount = _v.totalAmount;\r\n        totalUsers = _v.users.length;\r\n        meAmount = _v.amounts[msg.sender];\r\n        meWeightedAmount = _v.weightedAmounts[msg.sender];\r\n    }\r\n\r\n    function voteFor(uint256 _team) validTeam(_team) public payable whenNotPaused {\r\n        require(msg.value >= minVote);\r\n        require(voteStopped == 0);\r\n        userVoteFor(msg.sender, _team, msg.value);\r\n    }\r\n\r\n    function userVoteFor(address _user, uint256 _team, uint256 _amount) internal{\r\n        Vote storage _v = votes[_team];\r\n        uint256 voteVal = _amount.sub(_amount.mul(voteCut).div(100));\r\n        if (voteVal<_amount){\r\n            owner.transfer(_amount.sub(voteVal));\r\n        }\r\n        if (_v.amounts[_user] == 0) {\r\n            _v.users.push(_user);\r\n        }\r\n        pool = pool.add(voteVal);\r\n        _v.totalAmount = _v.totalAmount.add(voteVal);\r\n        _v.amounts[_user] = _v.amounts[_user].add(voteVal);\r\n        _v.weightedTotalAmount = _v.weightedTotalAmount.add(voteVal.mul(voteWeight));\r\n        _v.weightedAmounts[_user] = _v.weightedAmounts[_user].add(voteVal.mul(voteWeight)); \r\n        emit VoteSuccessful(_user,_team,_amount);\r\n    }\r\n\r\n    function stopVote()  public onlyOwner {\r\n        require(voteStopped == 0);\r\n        voteStopped = 1;\r\n    }\r\n    \r\n    function setWonTeam(uint256 _team) validTeam(_team) public onlyOwner{\r\n        require(voteStopped == 1);\r\n        teamWon = _team;\r\n    }\r\n    \r\n    function myBonus() public view returns(uint256 _bonus,bool _isTaken){\r\n        if (teamWon==0){\r\n            return (0,false);\r\n        }\r\n        _bonus = bonusAmount(teamWon,msg.sender);\r\n        _isTaken = alreadyWithdraw[msg.sender] == 1;\r\n    }\r\n\r\n    function bonusAmount(uint256 _team, address _who) internal view returns(uint256) {\r\n        Vote storage _v = votes[_team];\r\n        if (_v.weightedTotalAmount == 0){\r\n            return 0;\r\n        }\r\n        uint256 _poolAmount = pool.mul(100-poolCut).div(100);\r\n        uint256 _amount = _v.weightedAmounts[_who].mul(_poolAmount).div(_v.weightedTotalAmount);\r\n        return _amount;\r\n    }\r\n    \r\n    function withdrawBonus() public whenNotPaused{\r\n        require(teamWon>0);\r\n        require(alreadyWithdraw[msg.sender]==0);\r\n        alreadyWithdraw[msg.sender] = 1;\r\n        uint256 _amount = bonusAmount(teamWon,msg.sender);\r\n        require(_amount<=address(this).balance);\r\n        if(_amount>0){\r\n            msg.sender.transfer(_amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract TeamVersus is WWC {\r\n    event VoteSuccessful(address user,uint256 combatId,uint256 team, uint256 amount);\r\n    using SafeMath for uint256;\r\n    struct Combat{\r\n        uint256 poolOfTeamA;\r\n        uint256 poolOfTeamB;\r\n        uint128 teamAID;         // team id: 1-32\r\n        uint128 teamBID;         // team id: 1-32\r\n        uint128 state;  // 0 not started 1 started 2 ended\r\n        uint128 wonTeamID; // 0 not set\r\n        uint256 errCombat;  // 0 validate 1 errCombat\r\n    }\r\n    mapping (uint256 => bytes32) public comments;\r\n    \r\n    uint256 public voteCut = 5;\r\n    uint256 public poolCut = 20;\r\n    uint256 public minVote = 0.05 ether;\r\n    Combat[] combats;\r\n    mapping(uint256=>mapping(address=>uint256)) forTeamAInCombat;\r\n    mapping(uint256=>mapping(address=>uint256)) forTeamBInCombat;\r\n    mapping(uint256=>address[]) usersForTeamAInCombat;\r\n    mapping(uint256=>address[]) usersForTeamBInCombat;\r\n    \r\n    mapping(uint256=>mapping(address=>uint256)) public alreadyWithdraw;\r\n    \r\n    function init() public onlyOwner{\r\n        addCombat(1,32,\"Friday 15 June\");\r\n        addCombat(2,7,\"Friday 15 June\");\r\n        addCombat(19,22,\"Friday 15 June\");\r\n        addCombat(15,6,\"Saturday 16 June\");\r\n        addCombat(28,17,\"Saturday 16 June\");\r\n        addCombat(31,13,\"Saturday 16 June\");\r\n        addCombat(12,3,\"Saturday 16 June\");\r\n        addCombat(25,21,\"Sunday 17 June\");\r\n        addCombat(16,26,\"Sunday 17 June\");\r\n        addCombat(29,24,\"Sunday 17 June\");\r\n        addCombat(23,9,\"Monday 18 June\");\r\n        addCombat(11,27,\"Monday 18 June\");\r\n        addCombat(5,14,\"Monday 18 June\");\r\n        addCombat(30,8,\"Tuesday 19 June\");\r\n        addCombat(18,4,\"Tuesday 19 June\");\r\n        addCombat(20,1,\"Tuesday 19 June\");\r\n        addCombat(19,2,\"Wednesday 20 June\");\r\n        addCombat(32,10,\"Wednesday 20 June\");\r\n        addCombat(7,22,\"Wednesday 20 June\");\r\n        addCombat(13,6,\"Thursday 21 June\");\r\n        addCombat(15,31,\"Thursday 21 June\");\r\n        addCombat(28,12,\"Thursday 21 June\");\r\n        addCombat(29,25,\"Friday 22 June\");\r\n        addCombat(3,17,\"Friday 22 June\");\r\n        addCombat(21,24,\"Friday 22 June\");\r\n        addCombat(11,5,\"Saturday 23 June\");\r\n        addCombat(9,26,\"Saturday 23 June\");\r\n        addCombat(16,23,\"Saturday 23 June\");\r\n        addCombat(14,27,\"Sunday 24 June\");\r\n        addCombat(8,4,\"Sunday 24 June\");\r\n        addCombat(18,30,\"Sunday 24 June\");\r\n        addCombat(32,20,\"Monday 25 June\");\r\n        addCombat(10,1,\"Monday 25 June\");\r\n        addCombat(22,2,\"Monday 25 June\");\r\n        addCombat(7,19,\"Monday 25 June\");\r\n        addCombat(6,31,\"Tuesday 26 June\");\r\n        addCombat(13,15,\"Tuesday 26 June\");\r\n        addCombat(3,28,\"Tuesday 26 June\");\r\n        addCombat(17,12,\"Tuesday 26 June\");\r\n        addCombat(9,16,\"Wednesday 27 June\");\r\n        addCombat(26,23,\"Wednesday 27 June\");\r\n        addCombat(21,29,\"Wednesday 27 June\");\r\n        addCombat(24,25,\"Wednesday 27 June\");\r\n        addCombat(8,18,\"Thursday 28 June\");\r\n        addCombat(4,30,\"Thursday 28 June\");\r\n        addCombat(27,5,\"Thursday 28 June\");\r\n        addCombat(14,11,\"Thursday 28 June\");\r\n    }\r\n    function setMinVote(uint256 _min) public onlyOwner{\r\n        require(_min>=0.01 ether);\r\n        minVote = _min;\r\n    }\r\n    \r\n    function markCombatStarted(uint256 _index) public onlyOwner{\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat==0 && c.state==0);\r\n        c.state = 1;\r\n    }\r\n    \r\n    function markCombatEnded(uint256 _index) public onlyOwner{\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat==0 && c.state==1);\r\n        c.state = 2;\r\n    }  \r\n    \r\n    function setCombatWonTeam(uint256 _index,uint128 _won) public onlyOwner{\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat==0 && c.state==2);\r\n        require(c.teamAID == _won || c.teamBID == _won);\r\n        c.wonTeamID = _won;\r\n    }      \r\n\r\n    function withdrawBonus(uint256 _index) public whenNotPaused{\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat==0 && c.state ==2 && c.wonTeamID>0);\r\n        require(alreadyWithdraw[_index][msg.sender]==0);\r\n        alreadyWithdraw[_index][msg.sender] = 1;\r\n        uint256 _amount = bonusAmount(_index,msg.sender);\r\n        require(_amount<=address(this).balance);\r\n        if(_amount>0){\r\n            msg.sender.transfer(_amount);\r\n        }\r\n    }    \r\n    function myBonus(uint256 _index) public view returns(uint256 _bonus,bool _isTaken){\r\n        Combat storage c = combats[_index];\r\n        if (c.wonTeamID==0){\r\n            return (0,false);\r\n        }\r\n        _bonus = bonusAmount(_index,msg.sender);\r\n        _isTaken = alreadyWithdraw[_index][msg.sender] == 1;\r\n    }    \r\n    \r\n    function bonusAmount(uint256 _index,address _who) internal view returns(uint256){\r\n        Combat storage c = combats[_index];\r\n        uint256 _poolAmount = c.poolOfTeamA.add(c.poolOfTeamB).mul(100-poolCut).div(100);\r\n        uint256 _amount = 0;\r\n        if (c.teamAID ==c.wonTeamID){\r\n            if (c.poolOfTeamA == 0){\r\n                return 0;\r\n            }\r\n            _amount = forTeamAInCombat[_index][_who].mul(_poolAmount).div(c.poolOfTeamA);\r\n        }else if (c.teamBID == c.wonTeamID) {\r\n            if (c.poolOfTeamB == 0){\r\n                return 0;\r\n            }            \r\n            _amount = forTeamBInCombat[_index][_who].mul(_poolAmount).div(c.poolOfTeamB);\r\n        }\r\n        return _amount;        \r\n    }\r\n    \r\n    function addCombat(uint128 _teamA,uint128 _teamB,bytes32 _cmt) public onlyOwner{\r\n        Combat memory c = Combat({\r\n            poolOfTeamA: 0,\r\n            poolOfTeamB: 0,\r\n            teamAID: _teamA,\r\n            teamBID: _teamB,\r\n            state: 0,\r\n            wonTeamID: 0,\r\n            errCombat: 0\r\n        });\r\n        uint256 id = combats.push(c) - 1;\r\n        comments[id] = _cmt;\r\n    }\r\n    \r\n    \r\n    function setVoteCut(uint256 _cut) public onlyOwner{\r\n        require(_cut>=0&&_cut<=100);\r\n        voteCut = _cut;\r\n    }\r\n    \r\n    function setPoolCut(uint256 _cut) public onlyOwner{\r\n        require(_cut>=0&&_cut<=100);\r\n        poolCut = _cut;\r\n    }    \r\n    \r\n    function getCombat(uint256 _index) public view returns(\r\n        uint128 teamAID,\r\n        string teamAName,\r\n        uint128 teamBID,\r\n        string teamBName,\r\n        uint128 wonTeamID,\r\n        uint256 poolOfTeamA,\r\n        uint256 poolOfTeamB,\r\n        uint256 meAmountForTeamA,\r\n        uint256 meAmountForTeamB,\r\n        uint256 state,\r\n        bool isError,\r\n        bytes32 comment\r\n    ){\r\n        Combat storage c = combats[_index];\r\n        teamAID = c.teamAID;\r\n        teamAName = teams[c.teamAID];\r\n        teamBID = c.teamBID;\r\n        teamBName = teams[c.teamBID];\r\n        wonTeamID = c.wonTeamID;\r\n        state = c.state;\r\n        poolOfTeamA = c.poolOfTeamA;\r\n        poolOfTeamB = c.poolOfTeamB;\r\n        meAmountForTeamA = forTeamAInCombat[_index][msg.sender];\r\n        meAmountForTeamB = forTeamBInCombat[_index][msg.sender];\r\n        isError = c.errCombat == 1;\r\n        comment = comments[_index];\r\n    }\r\n    \r\n    function getCombatsCount() public view returns(uint256){\r\n        return combats.length;\r\n    }\r\n    \r\n    function invalidateCombat(uint256 _index) public onlyOwner{\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat==0);\r\n        c.errCombat = 1;\r\n    }\r\n    \r\n    function voteFor(uint256 _index,uint256 _whichTeam) public payable whenNotPaused{\r\n        require(msg.value>=minVote);\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat==0 && c.state == 0 && c.wonTeamID==0);\r\n        userVoteFor(msg.sender, _index,_whichTeam, msg.value);\r\n    }\r\n\r\n    function userVoteFor(address _standFor, uint256 _index,uint256 _whichTeam, uint256 _amount) internal{\r\n        Combat storage c = combats[_index];\r\n        uint256 voteVal = _amount.sub(_amount.mul(voteCut).div(100));\r\n        if (voteVal<_amount){\r\n            owner.transfer(_amount.sub(voteVal));\r\n        }\r\n        if (_whichTeam == c.teamAID){\r\n            c.poolOfTeamA = c.poolOfTeamA.add(voteVal);\r\n            if (forTeamAInCombat[_index][_standFor]==0){\r\n                usersForTeamAInCombat[_index].push(_standFor);\r\n            }\r\n            forTeamAInCombat[_index][_standFor] = forTeamAInCombat[_index][_standFor].add(voteVal);\r\n        }else {\r\n            c.poolOfTeamB = c.poolOfTeamB.add(voteVal);\r\n            if (forTeamBInCombat[_index][_standFor]==0){\r\n                usersForTeamBInCombat[_index].push(_standFor);\r\n            }\r\n            forTeamBInCombat[_index][_standFor] = forTeamAInCombat[_index][_standFor].add(voteVal);            \r\n        }\r\n        emit VoteSuccessful(_standFor,_index,_whichTeam,_amount);\r\n    }    \r\n    \r\n    function refundErrCombat(uint256 _index) public whenNotPaused{\r\n        Combat storage c = combats[_index];\r\n        require(c.errCombat == 1);\r\n        uint256 _amount = forTeamAInCombat[_index][msg.sender].add(forTeamBInCombat[_index][msg.sender]);\r\n        require(_amount>0);\r\n\r\n        forTeamAInCombat[_index][msg.sender] = 0;\r\n        forTeamBInCombat[_index][msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_whichTeam\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"invalidateCombat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"refundErrCombat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCombat\",\"outputs\":[{\"name\":\"teamAID\",\"type\":\"uint128\"},{\"name\":\"teamAName\",\"type\":\"string\"},{\"name\":\"teamBID\",\"type\":\"uint128\"},{\"name\":\"teamBName\",\"type\":\"string\"},{\"name\":\"wonTeamID\",\"type\":\"uint128\"},{\"name\":\"poolOfTeamA\",\"type\":\"uint256\"},{\"name\":\"poolOfTeamB\",\"type\":\"uint256\"},{\"name\":\"meAmountForTeamA\",\"type\":\"uint256\"},{\"name\":\"meAmountForTeamB\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"isError\",\"type\":\"bool\"},{\"name\":\"comment\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"markCombatStarted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"withdrawPart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCombatsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMinVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_won\",\"type\":\"uint128\"}],\"name\":\"setCombatWonTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"comments\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"markCombatEnded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"myBonus\",\"outputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_isTaken\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamA\",\"type\":\"uint128\"},{\"name\":\"_teamB\",\"type\":\"uint128\"},{\"name\":\"_cmt\",\"type\":\"bytes32\"}],\"name\":\"addCombat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"name\":\"setVoteCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"name\":\"setPoolCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"combatId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"team\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VoteSuccessful\",\"type\":\"event\"}]","ContractName":"TeamVersus","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://deebf66418e08e198a7f7de725039451beadf4cdc38d1eb825139f5900f495e1"}]}