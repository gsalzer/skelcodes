{"status":"1","message":"OK","result":[{"SourceCode":"contract BitSTDLogic {\r\n    function name()constant  public returns(string) {}\r\n\tfunction symbol()constant  public returns(string) {}\r\n\tfunction decimals()constant  public returns(uint8) {}\r\n\tfunction totalSupply()constant  public returns(uint256) {}\r\n\tfunction allowance(address add,address _add)constant  public returns(uint256) {}\r\n\tfunction sellPrice()constant  public returns(uint256) {}\r\n\tfunction buyPrice()constant  public returns(uint256) {}\r\n\tfunction frozenAccount(address add)constant  public returns(bool) {}\r\n\tfunction migration(address sender,address add) public{}\r\n\tfunction balanceOf(address add)constant  public returns(uint256) {}\r\n\tfunction transfer(address sender,address _to, uint256 _value) public {}\r\n\tfunction transferFrom(address _from,address sender, address _to, uint256 _value) public returns (bool success) {}\r\n\tfunction approve(address _spender,address sender, uint256 _value) public returns (bool success) {}\r\n\tfunction approveAndCall(address _spender,address sender,address _contract, uint256 _value, bytes _extraData)public returns (bool success) {}\r\n\tfunction burn(address sender,uint256 _value) public returns (bool success) {}\r\n\tfunction burnFrom(address _from,address sender, uint256 _value) public returns (bool success) {}\r\n\tfunction mintToken(address target,address _contract, uint256 mintedAmount)  public {}\r\n\tfunction freezeAccount(address target, bool freeze)  public {}\r\n\tfunction buy(address _contract,address sender,uint256 value) payable public {}\r\n\tfunction sell(address _contract,address sender,uint256 amount) public {}\r\n\tfunction Transfer_of_authority(address newOwner) public{}\r\n\tfunction Transfer_of_authority_data(address newOwner) public {}\r\n\tfunction setData(address dataAddress) public {}\r\n\t// Old contract data\r\n    function getOld_BalanceOfr(address add)constant  public returns(uint256){}\r\n}\r\ncontract BitSTDView{\r\n\r\n\tBitSTDLogic private logic;\r\n\taddress public owner;\r\n\r\n    // This creates a public event on the blockchain that notifies the customer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // This tells the customer how much money is being burned\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\t//start Query data interface\r\n    function balanceOf(address add)constant  public returns(uint256) {\r\n\t    return logic.balanceOf(add);\r\n\t}\r\n\r\n\tfunction name() constant  public returns(string) {\r\n\t    return logic.name();\r\n\t}\r\n\r\n\tfunction symbol() constant  public returns(string) {\r\n\t    return logic.symbol();\r\n\t}\r\n\r\n\tfunction decimals() constant  public returns(uint8) {\r\n\t    return logic.decimals();\r\n\t}\r\n\r\n\tfunction totalSupply() constant  public returns(uint256) {\r\n\t    return logic.totalSupply();\r\n\t}\r\n\r\n\tfunction allowance(address add,address _add) constant  public returns(uint256) {\r\n\t    return logic.allowance(add,_add);\r\n\t}\r\n\r\n\tfunction sellPrice() constant  public returns(uint256) {\r\n\t    return logic.sellPrice();\r\n\t}\r\n\r\n\tfunction buyPrice() constant  public returns(uint256) {\r\n\t    return logic.buyPrice();\r\n\t}\r\n\r\n\tfunction frozenAccount(address add) constant  public returns(bool) {\r\n\t    return logic.frozenAccount(add);\r\n\t}\r\n\r\n\t//End Query data interface\r\n\r\n\t//initialize\r\n    function BitSTDView(address logicAddressr) public {\r\n        logic=BitSTDLogic(logicAddressr);\r\n        owner=msg.sender;\r\n    }\r\n\r\n    //start Authority and control\r\n    modifier onlyOwner(){\r\n\t\trequire(msg.sender == owner);\r\n        _;\r\n\t}\r\n\r\n\t//Update the address of the data and logic layer\r\n    function setBitSTD(address dataAddress,address logicAddressr) onlyOwner public{\r\n        logic=BitSTDLogic(logicAddressr);\r\n        logic.setData(dataAddress);\r\n    }\r\n\r\n    //Hand over the logical layer authority\r\n    function Transfer_of_authority_logic(address newOwner) onlyOwner public{\r\n        logic.Transfer_of_authority(newOwner);\r\n    }\r\n\r\n    //Hand over the data layer authority\r\n    function Transfer_of_authority_data(address newOwner) onlyOwner public{\r\n        logic.Transfer_of_authority_data(newOwner);\r\n    }\r\n\r\n    //Hand over the view layer authority\r\n    function Transfer_of_authority(address newOwner) onlyOwner public{\r\n        owner=newOwner;\r\n    }\r\n    //End Authority and control\r\n\r\n    //data migration\r\n    function migration(address add) public{\r\n        logic.migration(msg.sender,add);\r\n        emit Transfer(msg.sender, add,logic.getOld_BalanceOfr(add));\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t    logic.transfer(msg.sender,_to,_value);\r\n\t    emit Transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\t/**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t    return logic.transferFrom( _from, msg.sender,  _to,  _value);\r\n\t     emit Transfer(_from, _to, _value);\r\n\t}\r\n\r\n\t/**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t    return logic.approve( _spender, msg.sender,  _value);\r\n\t}\r\n\r\n\t/**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n\t    return logic.approveAndCall( _spender, msg.sender,this,  _value,  _extraData);\r\n\t}\r\n\r\n\t/**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t    return logic.burn( msg.sender, _value);\r\n\t    emit Burn(msg.sender, _value);\r\n\t}\r\n\r\n\t/**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t    return logic.burnFrom( _from, msg.sender,  _value);\r\n\t    emit Burn(_from, _value);\r\n\t}\r\n\r\n\t/// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\t    logic.mintToken( target,this,  mintedAmount);\r\n\t    emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n\t}\r\n\r\n\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t    logic.freezeAccount( target,  freeze);\r\n\t    emit FrozenFunds(target, freeze);\r\n\t}\r\n\r\n\t//The next two are buying and selling tokens\r\n\tfunction buy() payable public {\r\n\t    logic.buy( this,msg.sender,msg.value);\r\n\t}\r\n\r\n\tfunction sell(uint256 amount) public {\r\n\t    logic.sell( this,msg.sender, amount);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataAddress\",\"type\":\"address\"},{\"name\":\"logicAddressr\",\"type\":\"address\"}],\"name\":\"setBitSTD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Transfer_of_authority_logic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Transfer_of_authority_data\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Transfer_of_authority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"},{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"logicAddressr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BitSTDView","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000036195c8126441bf117bef7b0671673f63b902d36","Library":"","SwarmSource":"bzzr://c3f0232f79e4e8dfa603ed7632d0e5b944788b3427aec5fcd064045b5a6ea6f3"}]}