{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract PlayerToken {\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function tokensOfOwner(address _owner) public view returns (uint256[] ownerTokens);\r\n    function createPlayer(uint32[7] _skills, uint256 _position, address _owner) public returns (uint256);\r\n    function getPlayer(uint256 playerId) public view returns(uint32 talent, uint32 tactics, uint32 dribbling, uint32 kick,\r\n       uint32 speed, uint32 pass, uint32 selection);\r\n    function getPosition(uint256 _playerId) public view returns(uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract CatalogPlayers {\r\n    function getBoxPrice(uint256 _league, uint256 _position) public view returns (uint256);\r\n    function getLengthClassPlayers(uint256 _league, uint256 _position) public view returns (uint256);\r\n    function getClassPlayers(uint256 _league, uint256 _position, uint256 _index) public view returns(uint32[7] skills);\r\n    function incrementCountSales(uint256 _league, uint256 _position) public;\r\n    function getCountSales(uint256 _league, uint256 _position) public view returns(uint256);\r\n}\r\n\r\ncontract Team {\r\n    uint256 public countPlayersInPosition;\r\n    uint256[] public teamsIds;\r\n\r\n    function createTeam(string _name, string _logo, uint256 _minSkills, uint256 _minTalent, address _owner, uint256 _playerId) public returns(uint256 _teamId);\r\n    function getPlayerTeam(uint256 _playerId) public view returns(uint256);\r\n    function getOwnerTeam(address _owner) public view returns(uint256);\r\n    function getCountPlayersOfOwner(uint256 _teamId, address _owner) public view returns(uint256 count);\r\n    function getCountPosition(uint256 _teamId, uint256 _position) public view returns(uint256);\r\n    function joinTeam(uint256 _teamId, address _owner, uint256 _playerId, uint256 _position) public;\r\n    function isTeam(uint256 _teamId) public view returns(bool);\r\n    function leaveTeam(uint256 _teamId, address _owner, uint256 _playerId, uint256 _position) public;\r\n    function getTeamPlayers(uint256 _teamId) public view returns(uint256[]);\r\n    function getCountPlayersOfTeam(uint256 _teamId) public view returns(uint256);\r\n    function getPlayerIdOfIndex(uint256 _teamId, uint256 index) public view returns (uint256);\r\n    function getCountTeams() public view returns(uint256);\r\n    function getTeamSumSkills(uint256 _teamId) public view returns(uint256 sumSkills);\r\n    function getMinSkills(uint256 _teamId) public view returns(uint256);\r\n    function getMinTalent(uint256 _teamId)  public view returns(uint256);\r\n\r\n\r\n}\r\n\r\ncontract FMWorldAccessControl {\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n\r\n    bool public pause = false;\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyC() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notPause() {\r\n        require(!pause);\r\n        _;\r\n    }\r\n\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n\r\n    function setPause(bool _pause) external onlyC {\r\n        pause = _pause;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract FMWorld is FMWorldAccessControl {\r\n\r\n    address public playerTokenAddress;\r\n    address public catalogPlayersAddress;\r\n    address public teamAddress;\r\n\r\n    address private lastPlayerOwner = address(0x0);\r\n\r\n    uint256 public balanceForReward;\r\n    uint256 public deposits;\r\n    \r\n    uint256 public countPartnerPlayers;\r\n\r\n    mapping (uint256 => uint256) public balancesTeams;\r\n    mapping (address => uint256) public balancesInternal;\r\n\r\n    bool public calculatedReward = true;\r\n    uint256 public lastCalculationRewardTime;\r\n\r\n    modifier isCalculatedReward() {\r\n        require(calculatedReward);\r\n        _;\r\n    }\r\n\r\n    function setPlayerTokenAddress(address _playerTokenAddress) public onlyCEO {\r\n        playerTokenAddress = _playerTokenAddress;\r\n    }\r\n\r\n    function setCatalogPlayersAddress(address _catalogPlayersAddress) public onlyCEO {\r\n        catalogPlayersAddress = _catalogPlayersAddress;\r\n    }\r\n\r\n    function setTeamAddress(address _teamAddress) public onlyCEO {\r\n        teamAddress = _teamAddress;\r\n    }\r\n\r\n    function FMWorld(address _catalogPlayersAddress, address _playerTokenAddress, address _teamAddress) public {\r\n        catalogPlayersAddress = _catalogPlayersAddress;\r\n        playerTokenAddress = _playerTokenAddress;\r\n        teamAddress = _teamAddress;\r\n\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n\r\n        lastCalculationRewardTime = now;\r\n    }\r\n\r\n    function openBoxPlayer(uint256 _league, uint256 _position) external notPause isCalculatedReward payable returns (uint256 _price) {\r\n        if (now > 1525024800) revert();\r\n        \r\n        PlayerToken playerToken = PlayerToken(playerTokenAddress);\r\n        CatalogPlayers catalogPlayers = CatalogPlayers(catalogPlayersAddress);\r\n\r\n        _price = catalogPlayers.getBoxPrice(_league, _position);\r\n        \r\n        balancesInternal[msg.sender] += msg.value;\r\n        if (balancesInternal[msg.sender] < _price) {\r\n            revert();\r\n        }\r\n        balancesInternal[msg.sender] = balancesInternal[msg.sender] - _price;\r\n\r\n        uint256 _classPlayerId = _getRandom(catalogPlayers.getLengthClassPlayers(_league, _position), lastPlayerOwner);\r\n        uint32[7] memory skills = catalogPlayers.getClassPlayers(_league, _position, _classPlayerId);\r\n\r\n        playerToken.createPlayer(skills, _position, msg.sender);\r\n        lastPlayerOwner = msg.sender;\r\n        balanceForReward += msg.value / 2;\r\n        deposits += msg.value / 2;\r\n        catalogPlayers.incrementCountSales(_league, _position);\r\n\r\n        if (now - lastCalculationRewardTime > 24 * 60 * 60 && balanceForReward > 10 ether) {\r\n            calculatedReward = false;\r\n        }\r\n    }\r\n\r\n    function _getRandom(uint256 max, address addAddress) view internal returns(uint256) {\r\n        return (uint256(block.blockhash(block.number-1)) + uint256(addAddress)) % max;\r\n    }\r\n    \r\n    function _requireTalentSkills(uint256 _playerId, PlayerToken playerToken, uint256 _minTalent, uint256 _minSkills) internal view returns(bool) {\r\n        var (_talent, _tactics, _dribbling, _kick, _speed, _pass, _selection) = playerToken.getPlayer(_playerId);\r\n        if ((_talent < _minTalent) || (_tactics + _dribbling + _kick + _speed + _pass + _selection < _minSkills)) return false; \r\n        return true;\r\n    }\r\n\r\n    function createTeam(string _name, string _logo, uint32 _minTalent, uint32 _minSkills, uint256 _playerId) external notPause isCalculatedReward\r\n    {\r\n        PlayerToken playerToken = PlayerToken(playerTokenAddress);\r\n        Team team = Team(teamAddress);\r\n        require(playerToken.ownerOf(_playerId) == msg.sender);\r\n        require(team.getPlayerTeam(_playerId) == 0);\r\n        require(team.getOwnerTeam(msg.sender) == 0);\r\n        require(_requireTalentSkills(_playerId, playerToken, _minTalent, _minSkills));\r\n        team.createTeam(_name, _logo, _minTalent, _minSkills, msg.sender, _playerId);\r\n    }\r\n\r\n    function joinTeam(uint256 _playerId, uint256 _teamId) external notPause isCalculatedReward\r\n    {\r\n        PlayerToken playerToken = PlayerToken(playerTokenAddress);\r\n        Team team = Team(teamAddress);\r\n        require(playerToken.ownerOf(_playerId) == msg.sender);\r\n        require(team.isTeam(_teamId));\r\n        require(team.getPlayerTeam(_playerId) == 0);\r\n        require(team.getOwnerTeam(msg.sender) == 0 || team.getOwnerTeam(msg.sender) == _teamId);\r\n        uint256 _position = playerToken.getPosition(_playerId);\r\n        require(team.getCountPosition(_teamId, _position) < team.countPlayersInPosition());\r\n        require(_requireTalentSkills(_playerId, playerToken, team.getMinTalent(_teamId), team.getMinSkills(_teamId)));\r\n\r\n        _calcTeamBalance(_teamId, team, playerToken);\r\n        team.joinTeam(_teamId, msg.sender, _playerId, _position);\r\n    }\r\n\r\n    function leaveTeam(uint256 _playerId, uint256 _teamId) external notPause isCalculatedReward\r\n    {\r\n        PlayerToken playerToken = PlayerToken(playerTokenAddress);\r\n        Team team = Team(teamAddress);\r\n        require(playerToken.ownerOf(_playerId) == msg.sender);\r\n        require(team.getPlayerTeam(_playerId) == _teamId);\r\n        _calcTeamBalance(_teamId, team, playerToken);\r\n        uint256 _position = playerToken.getPosition(_playerId);\r\n        team.leaveTeam(_teamId, msg.sender, _playerId, _position);\r\n    }\r\n\r\n    function withdraw(address _sendTo, uint _amount) external onlyCEO returns(bool) {\r\n        if (_amount > deposits) {\r\n            return false;\r\n        }\r\n        deposits -= _amount;\r\n        _sendTo.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function _calcTeamBalance(uint256 _teamId, Team team, PlayerToken playerToken) internal returns(bool){\r\n        if (balancesTeams[_teamId] == 0) {\r\n            return false;\r\n        }\r\n        uint256 _countPlayers = team.getCountPlayersOfTeam(_teamId);\r\n        for(uint256 i = 0; i < _countPlayers; i++) {\r\n            uint256 _playerId = team.getPlayerIdOfIndex(_teamId, i);\r\n            address _owner = playerToken.ownerOf(_playerId);\r\n            balancesInternal[_owner] += balancesTeams[_teamId] / _countPlayers;\r\n        }\r\n        balancesTeams[_teamId] = 0;\r\n        return true;\r\n    }\r\n\r\n    function withdrawEther() external returns(bool) {\r\n        Team team = Team(teamAddress);\r\n        uint256 _teamId = team.getOwnerTeam(msg.sender);\r\n        if (balancesTeams[_teamId] > 0) {\r\n            PlayerToken playerToken = PlayerToken(playerTokenAddress);\r\n            _calcTeamBalance(_teamId, team, playerToken);\r\n        }\r\n        if (balancesInternal[msg.sender] == 0) {\r\n            return false;\r\n        }\r\n        msg.sender.transfer(balancesInternal[msg.sender]);\r\n        balancesInternal[msg.sender] = 0;\r\n\r\n    }\r\n    \r\n    function createPartnerPlayer(uint256 _league, uint256 _position, uint256 _classPlayerId, address _toAddress) external notPause isCalculatedReward onlyC {\r\n        if (countPartnerPlayers >= 300) revert();\r\n        \r\n        PlayerToken playerToken = PlayerToken(playerTokenAddress);\r\n        CatalogPlayers catalogPlayers = CatalogPlayers(catalogPlayersAddress);\r\n\r\n        uint32[7] memory skills = catalogPlayers.getClassPlayers(_league, _position, _classPlayerId);\r\n\r\n        playerToken.createPlayer(skills, _position, _toAddress);\r\n        countPartnerPlayers++;\r\n    }\r\n\r\n    function calculationTeamsRewards(uint256[] orderTeamsIds) public onlyC {\r\n        Team team = Team(teamAddress);\r\n        if (team.getCountTeams() < 50) {\r\n            lastCalculationRewardTime = now;\r\n            calculatedReward = true;\r\n            return;\r\n        }\r\n        \r\n        if (orderTeamsIds.length != team.getCountTeams()) { \r\n            revert();\r\n        }\r\n        \r\n        for(uint256 teamIndex = 0; teamIndex < orderTeamsIds.length - 1; teamIndex++) {\r\n            if (team.getTeamSumSkills(orderTeamsIds[teamIndex]) < team.getTeamSumSkills(orderTeamsIds[teamIndex + 1])) {\r\n                revert();\r\n            }\r\n        }\r\n        uint256 k;\r\n        for(uint256 i = 1; i < 51; i++) {\r\n            if (i == 1) { k = 2000; } \r\n            else if (i == 2) { k = 1400; }\r\n            else if (i == 3) { k = 1000; }\r\n            else if (i == 4) { k = 600; }\r\n            else if (i == 5) { k = 500; }\r\n            else if (i == 6) { k = 400; }\r\n            else if (i == 7) { k = 300; }\r\n            else if (i >= 8 && i <= 12) { k = 200; }\r\n            else if (i >= 13 && i <= 30) { k = 100; }\r\n            else if (i >= 31) { k = 50; }\r\n            balancesTeams[orderTeamsIds[i - 1]] = balanceForReward * k / 10000;\r\n        }\r\n        balanceForReward = 0;\r\n        lastCalculationRewardTime = now;\r\n        calculatedReward = true;\r\n    }\r\n\r\n    function getSumWithdrawals() public view returns(uint256 sum) {\r\n        for(uint256 i = 0; i < 51; i++) {\r\n             sum += balancesTeams[i + 1];\r\n        }\r\n    }\r\n\r\n    function getBalance() public view returns (uint256 balance) {\r\n        uint256 balanceTeam = getBalanceTeam(msg.sender);\r\n        return balanceTeam + balancesInternal[msg.sender];\r\n    }\r\n    \r\n    function getBalanceTeam(address _owner) public view returns(uint256 balanceTeam) {\r\n        Team team = Team(teamAddress);\r\n        uint256 _teamId = team.getOwnerTeam(_owner);\r\n        if (_teamId == 0) {\r\n            return 0;\r\n        }\r\n        uint256 _countPlayersOwner = team.getCountPlayersOfOwner(_teamId, _owner);\r\n        uint256 _countPlayers = team.getCountPlayersOfTeam(_teamId);\r\n        balanceTeam = balancesTeams[_teamId] / _countPlayers * _countPlayersOwner;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_playerTokenAddress\",\"type\":\"address\"}],\"name\":\"setPlayerTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catalogPlayersAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countPartnerPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceForReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_league\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"openBoxPlayer\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_logo\",\"type\":\"string\"},{\"name\":\"_minTalent\",\"type\":\"uint32\"},{\"name\":\"_minSkills\",\"type\":\"uint32\"},{\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"createTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCalculationRewardTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_league\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_classPlayerId\",\"type\":\"uint256\"},{\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"createPartnerPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSumWithdrawals\",\"outputs\":[{\"name\":\"sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balancesTeams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalanceTeam\",\"outputs\":[{\"name\":\"balanceTeam\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderTeamsIds\",\"type\":\"uint256[]\"}],\"name\":\"calculationTeamsRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_catalogPlayersAddress\",\"type\":\"address\"}],\"name\":\"setCatalogPlayersAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"},{\"name\":\"_teamId\",\"type\":\"uint256\"}],\"name\":\"joinTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"},{\"name\":\"_teamId\",\"type\":\"uint256\"}],\"name\":\"leaveTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_catalogPlayersAddress\",\"type\":\"address\"},{\"name\":\"_playerTokenAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FMWorld","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000506ed55d9c36a749066a3bd021ceb1af75d2e5a10000000000000000000000004409016e65eb770152316bcdd3f95c8329b4f7c7000000000000000000000000d6e1ad11dbcb329bfa1584a7958d1e65aa8ded41","Library":"","SwarmSource":"bzzr://abbbaa91191babbc2064373d46c9fa7a1b5cec2f69d2293afe496cb84336e47c"}]}