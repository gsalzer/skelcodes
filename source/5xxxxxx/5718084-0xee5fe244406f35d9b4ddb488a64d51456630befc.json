{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n}\r\n\r\ncontract ERC20Token is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Total amount of tokens issued\r\n    uint256 internal totalTokenIssued;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalTokenIssued;\r\n    }\r\n\r\n    /* Get the account balance for an address */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Check whether an address is a contract address */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return (size > 0);\r\n    }\r\n\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n\r\n        require(_to != address(0x0));\r\n\r\n        // Do not allow to transfer token to contract address to avoid tokens getting stuck\r\n        require(isContract(_to) == false);\r\n\r\n        // amount sent cannot exceed balance\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        \r\n        // update balances\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to]        = balances[_to].add(_amount);\r\n\r\n        // log event\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    /* Allow _spender to withdraw from your account up to _amount */\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        \r\n        require(_spender != address(0x0));\r\n\r\n        // update allowed amount\r\n        allowed[msg.sender][_spender] = _amount;\r\n\r\n        // log event\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Spender of tokens transfers tokens from the owner's balance */\r\n    /* Must be pre-approved by owner */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        \r\n        require(_to != address(0x0));\r\n        \r\n        // Do not allow to transfer token to contract address to avoid tokens getting stuck\r\n        require(isContract(_to) == false);\r\n\r\n        // balance checks\r\n        require(balances[_from] >= _amount);\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n\r\n        // update balances and allowed amount\r\n        balances[_from]            = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to]              = balances[_to].add(_amount);\r\n\r\n        // log event\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Returns the amount of tokens approved by the owner */\r\n    /* that can be transferred by spender */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        return (a / b);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return (a - b);\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract WhiteListManager is Ownable {\r\n\r\n    // The list here will be updated by multiple separate WhiteList contracts\r\n    mapping (address => bool) public list;\r\n\r\n    function unset(address addr) public onlyOwner {\r\n\r\n        list[addr] = false;\r\n    }\r\n\r\n    function unsetMany(address[] addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n            \r\n            unset(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function set(address addr) public onlyOwner {\r\n\r\n        list[addr] = true;\r\n    }\r\n\r\n    function setMany(address[] addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n            \r\n            set(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function isWhitelisted(address addr) public view returns (bool) {\r\n\r\n        return list[addr];\r\n    }\r\n}\r\n\r\ncontract ShareToken is ERC20Token, WhiteListManager {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"ShareToken\";\r\n    string public constant symbol = \"SHR\";\r\n    uint8  public constant decimals = 2;\r\n\r\n    address public icoContract;\r\n\r\n    // Any token amount must be multiplied by this const to reflect decimals\r\n    uint256 constant E2 = 10**2;\r\n\r\n    mapping(address => bool) public rewardTokenLocked;\r\n    bool public mainSaleTokenLocked = true;\r\n\r\n    uint256 public constant TOKEN_SUPPLY_MAINSALE_LIMIT = 1000000000 * E2; // 1,000,000,000 tokens (1 billion)\r\n    uint256 public constant TOKEN_SUPPLY_AIRDROP_LIMIT  = 6666666667; // 66,666,666.67 tokens (0.066 billion)\r\n    uint256 public constant TOKEN_SUPPLY_BOUNTY_LIMIT   = 33333333333; // 333,333,333.33 tokens (0.333 billion)\r\n\r\n    uint256 public airDropTokenIssuedTotal;\r\n    uint256 public bountyTokenIssuedTotal;\r\n\r\n    uint256 public constant TOKEN_SUPPLY_SEED_LIMIT      = 500000000 * E2; // 500,000,000 tokens (0.5 billion)\r\n    uint256 public constant TOKEN_SUPPLY_PRESALE_LIMIT   = 2500000000 * E2; // 2,500,000,000.00 tokens (2.5 billion)\r\n    uint256 public constant TOKEN_SUPPLY_SEED_PRESALE_LIMIT = TOKEN_SUPPLY_SEED_LIMIT + TOKEN_SUPPLY_PRESALE_LIMIT;\r\n\r\n    uint256 public seedAndPresaleTokenIssuedTotal;\r\n\r\n    uint8 private constant PRESALE_EVENT    = 0;\r\n    uint8 private constant MAINSALE_EVENT   = 1;\r\n    uint8 private constant BOUNTY_EVENT     = 2;\r\n    uint8 private constant AIRDROP_EVENT    = 3;\r\n\r\n    function ShareToken() public {\r\n\r\n        totalTokenIssued = 0;\r\n        airDropTokenIssuedTotal = 0;\r\n        bountyTokenIssuedTotal = 0;\r\n        seedAndPresaleTokenIssuedTotal = 0;\r\n        mainSaleTokenLocked = true;\r\n    }\r\n\r\n    function unlockMainSaleToken() public onlyOwner {\r\n\r\n        mainSaleTokenLocked = false;\r\n    }\r\n\r\n    function lockMainSaleToken() public onlyOwner {\r\n\r\n        mainSaleTokenLocked = true;\r\n    }\r\n\r\n    function unlockRewardToken(address addr) public onlyOwner {\r\n\r\n        rewardTokenLocked[addr] = false;\r\n    }\r\n\r\n    function unlockRewardTokenMany(address[] addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            unlockRewardToken(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function lockRewardToken(address addr) public onlyOwner {\r\n\r\n        rewardTokenLocked[addr] = true;\r\n    }\r\n\r\n    function lockRewardTokenMany(address[] addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            lockRewardToken(addrList[i]);\r\n        }\r\n    }\r\n\r\n    // Check if a given address is locked. The address can be in the whitelist or in the reward\r\n    function isLocked(address addr) public view returns (bool) {\r\n\r\n        // Main sale is running, any addr is locked\r\n        if (mainSaleTokenLocked) {\r\n            return true;\r\n        } else {\r\n\r\n            // Main sale is ended and thus any whitelist addr is unlocked\r\n            if (isWhitelisted(addr)) {\r\n                return false;\r\n            } else {\r\n                // If the addr is in the reward, it must be checked if locked\r\n                // If the addr is not in the reward, it is considered unlocked\r\n                return rewardTokenLocked[addr];\r\n            }\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        return totalTokenIssued.add(seedAndPresaleTokenIssuedTotal).add(airDropTokenIssuedTotal).add(bountyTokenIssuedTotal);\r\n    }\r\n\r\n    function totalMainSaleTokenIssued() public view returns (uint256) {\r\n\r\n        return totalTokenIssued;\r\n    }\r\n\r\n    function totalMainSaleTokenLimit() public view returns (uint256) {\r\n\r\n        return TOKEN_SUPPLY_MAINSALE_LIMIT;\r\n    }\r\n\r\n    function totalPreSaleTokenIssued() public view returns (uint256) {\r\n\r\n        return seedAndPresaleTokenIssuedTotal;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        require(isLocked(msg.sender) == false);    \r\n        require(isLocked(_to) == false);\r\n        \r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        \r\n        require(isLocked(_from) == false);\r\n        require(isLocked(_to) == false);\r\n        \r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function setIcoContract(address _icoContract) public onlyOwner {\r\n        \r\n        // Allow to set the ICO contract only once\r\n        require(icoContract == address(0));\r\n        require(_icoContract != address(0));\r\n\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    function sell(address buyer, uint256 tokens) public returns (bool success) {\r\n      \r\n        require (icoContract != address(0));\r\n        // The sell() method can only be called by the fixedly-set ICO contract\r\n        require (msg.sender == icoContract);\r\n        require (tokens > 0);\r\n        require (buyer != address(0));\r\n\r\n        // Only whitelisted address can buy tokens. Otherwise, refund\r\n        require (isWhitelisted(buyer));\r\n\r\n        require (totalTokenIssued.add(tokens) <= TOKEN_SUPPLY_MAINSALE_LIMIT);\r\n\r\n        // Register tokens issued to the buyer\r\n        balances[buyer] = balances[buyer].add(tokens);\r\n\r\n        // Update total amount of tokens issued\r\n        totalTokenIssued = totalTokenIssued.add(tokens);\r\n\r\n        emit Transfer(address(MAINSALE_EVENT), buyer, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function rewardAirdrop(address _to, uint256 _amount) public onlyOwner {\r\n\r\n        // this check also ascertains _amount is positive\r\n        require(_amount <= TOKEN_SUPPLY_AIRDROP_LIMIT);\r\n\r\n        require(airDropTokenIssuedTotal < TOKEN_SUPPLY_AIRDROP_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_AIRDROP_LIMIT.sub(airDropTokenIssuedTotal);\r\n        if (_amount > remainingTokens) {\r\n            _amount = remainingTokens;\r\n        }\r\n\r\n        // Register tokens to the receiver\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // Update total amount of tokens issued\r\n        airDropTokenIssuedTotal = airDropTokenIssuedTotal.add(_amount);\r\n\r\n        // Lock the receiver\r\n        rewardTokenLocked[_to] = true;\r\n\r\n        emit Transfer(address(AIRDROP_EVENT), _to, _amount);\r\n    }\r\n\r\n    function rewardBounty(address _to, uint256 _amount) public onlyOwner {\r\n\r\n        // this check also ascertains _amount is positive\r\n        require(_amount <= TOKEN_SUPPLY_BOUNTY_LIMIT);\r\n\r\n        require(bountyTokenIssuedTotal < TOKEN_SUPPLY_BOUNTY_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_BOUNTY_LIMIT.sub(bountyTokenIssuedTotal);\r\n        if (_amount > remainingTokens) {\r\n            _amount = remainingTokens;\r\n        }\r\n\r\n        // Register tokens to the receiver\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // Update total amount of tokens issued\r\n        bountyTokenIssuedTotal = bountyTokenIssuedTotal.add(_amount);\r\n\r\n        // Lock the receiver\r\n        rewardTokenLocked[_to] = true;\r\n\r\n        emit Transfer(address(BOUNTY_EVENT), _to, _amount);\r\n    }\r\n\r\n    function rewardBountyMany(address[] addrList, uint256[] amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            rewardBounty(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n\r\n    function rewardAirdropMany(address[] addrList, uint256[] amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            rewardAirdrop(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n\r\n    function handlePresaleToken(address _to, uint256 _amount) public onlyOwner {\r\n\r\n        require(_amount <= TOKEN_SUPPLY_SEED_PRESALE_LIMIT);\r\n\r\n        require(seedAndPresaleTokenIssuedTotal < TOKEN_SUPPLY_SEED_PRESALE_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_SEED_PRESALE_LIMIT.sub(seedAndPresaleTokenIssuedTotal);\r\n        require (_amount <= remainingTokens);\r\n\r\n        // Register tokens to the receiver\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // Update total amount of tokens issued\r\n        seedAndPresaleTokenIssuedTotal = seedAndPresaleTokenIssuedTotal.add(_amount);\r\n\r\n        emit Transfer(address(PRESALE_EVENT), _to, _amount);\r\n\r\n        // Also add to whitelist\r\n        set(_to);\r\n    }\r\n\r\n    function handlePresaleTokenMany(address[] addrList, uint256[] amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            handlePresaleToken(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMainSaleTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokenIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"},{\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"rewardAirdropMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"unsetMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_SEED_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_BOUNTY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTokenIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedAndPresaleTokenIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_AIRDROP_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockMainSaleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"},{\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"rewardBountyMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_PRESALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockMainSaleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unlockRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreSaleTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"list\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_SEED_PRESALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handlePresaleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"unlockRewardTokenMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_MAINSALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"setMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"lockRewardTokenMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"},{\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"handlePresaleTokenMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleTokenLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMainSaleTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ShareToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7da67b6fb6f79228fcc91dbee8b7165c3091128285cb372a980c5b0d26ef899"}]}