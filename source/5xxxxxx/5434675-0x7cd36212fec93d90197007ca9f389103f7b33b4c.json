{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract token { function transfer(address receiver, uint amount){  } }\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // uint256 durationInMinutes;\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // token address\r\n  address addressOfTokenUsedAsReward;\r\n\r\n  token tokenReward;\r\n\r\n\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public price = 4000;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale() {\r\n    //You will change this to your wallet where you need the ETH \r\n    wallet = 0x423A3438cF5b954689a85D45B302A5D1F3C763D4;\r\n    // durationInMinutes = _durationInMinutes;\r\n    //Here will come the checksum address we got\r\n    addressOfTokenUsedAsReward = 0xdd007278B667F6bef52fD0a4c23604aA1f96039a;\r\n\r\n\r\n    tokenReward = token(addressOfTokenUsedAsReward);\r\n  }\r\n\r\n  bool started = false;\r\n\r\n  function startSale(uint256 delay){\r\n    if (msg.sender != wallet || started) throw;\r\n    startTime = now + delay * 1 minutes;\r\n    endTime = startTime + 45 * 24 * 60 * 1 minutes;\r\n    started = true;\r\n  }\r\n\r\n  function setPrice(uint256 _price){\r\n    if(msg.sender != wallet) throw;\r\n    price = _price;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be sent\r\n    uint256 tokens = (weiAmount/10**10) * price;//weiamount * price \r\n\r\n    //bonus schedule\r\n    // if(now < startTime + 1*7*24*60* 1 minutes){//First week\r\n    //   tokens += (tokens * 60) / 100;//60%\r\n    // }else if(now < startTime + 2*7*24*60* 1 minutes){//Second week\r\n    //   tokens += (tokens * 40) / 100;//40%\r\n    // }else if(now < startTime + 3*7*24*60* 1 minutes){//3rd week\r\n    //   tokens += (tokens * 30) / 100;//30% and so on\r\n    // }else if(now < startTime + 4*7*24*60* 1 minutes){\r\n    //   tokens += (tokens * 20) / 100;\r\n    // }else if(now < startTime + 5*7*24*60* 1 minutes){\r\n    //   tokens += (tokens * 10) / 100;\r\n    // }\r\n\r\n    if(now<startTime+27*24*60* 1 minutes){\r\n      if(weiAmount>=10**18)\r\n        tokens+=(tokens*60)/100;\r\n      else if(weiAmount>=5*10**17)\r\n        tokens+=(tokens*25)/100;\r\n      else if(weiAmount>=4*10**17)\r\n        tokens+=(tokens*20)/100;\r\n      else if(weiAmount>=3*10**17)\r\n        tokens+=(tokens*15)/100;\r\n      else if(weiAmount>=2*10**17)\r\n        tokens+=(tokens*10)/100;\r\n      else if(weiAmount>=10**17)\r\n        tokens+=(tokens*5)/100;\r\n    }\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    tokenReward.transfer(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    // wallet.transfer(msg.value);\r\n    if (!wallet.send(msg.value)) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  function withdrawTokens(uint256 _amount) {\r\n    if(msg.sender!=wallet) throw;\r\n    tokenReward.transfer(wallet,_amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://20608980593da2ecc95731da66f83f1eecda0da3d6f95550b27da81b25624f41"}]}