{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 FSN Token Generation and Voluntary Participants Program\r\n * @dev see https://github.com/FusionFoundation/TokenSale\r\n */\r\ncontract ShareTokenSale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token;\r\n    address public receiverAddr;\r\n    uint256 public totalSaleAmount;\r\n    uint256 public totalWannaBuyAmount; \r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public userWithdrawalStartTime;\r\n    uint256 public clearStartTime;\r\n    uint256 public withdrawn;\r\n    uint256 public proportion = 1 ether;\r\n    mapping(uint256 => uint256) public globalAmounts;    \r\n\r\n\r\n    struct Stage {\r\n        uint256 rate;\r\n        uint256 duration;\r\n        uint256 startTime;       \r\n    }\r\n    Stage[] public stages;    \r\n\r\n\r\n    struct PurchaserInfo {\r\n        bool withdrew;\r\n        bool recorded;\r\n        mapping(uint256 => uint256) amounts;\r\n    }\r\n    mapping(address => PurchaserInfo) public purchaserMapping;\r\n    address[] public purchaserList;\r\n\r\n    modifier onlyOpenTime {\r\n        require(isStarted());\r\n        require(!isEnded());\r\n        _;\r\n    }\r\n\r\n    modifier onlyAutoWithdrawalTime {\r\n         require(isEnded());\r\n        _;\r\n    }\r\n\r\n    modifier onlyUserWithdrawalTime {\r\n        require(isUserWithdrawalTime());\r\n        _;\r\n    }\r\n\r\n    modifier purchasersAllWithdrawn {\r\n        require(withdrawn==purchaserList.length);\r\n        _;\r\n    }\r\n\r\n    modifier onlyClearTime {\r\n        require(isClearTime());\r\n        _;\r\n    }\r\n\r\n    function ShareTokenSale(address _receiverAddr, address _tokenAddr, uint256 _totalSaleAmount, uint256 _startTime) public {\r\n        require(_receiverAddr != address(0));\r\n        require(_tokenAddr != address(0));\r\n        require(_totalSaleAmount > 0);\r\n        require(_startTime > 0);\r\n        receiverAddr = _receiverAddr;\r\n        token = ERC20(_tokenAddr);\r\n        totalSaleAmount = _totalSaleAmount;       \r\n        startTime = _startTime;        \r\n    }\r\n\r\n    function isStarted() public view returns(bool) {\r\n        return 0 < startTime && startTime <= now && endTime != 0;\r\n    }   \r\n\r\n    function isEnded() public view returns(bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    function isUserWithdrawalTime() public view returns(bool) {\r\n        return now > userWithdrawalStartTime;\r\n    }\r\n\r\n    function isClearTime() public view returns(bool) {\r\n        return now > clearStartTime;\r\n    }\r\n    \r\n    function startSale(uint256[] rates, uint256[] durations, uint256 userWithdrawalDelaySec, uint256 clearDelaySec) public onlyOwner {\r\n        require(endTime == 0);\r\n        require(durations.length == rates.length);\r\n        delete stages;\r\n        endTime = startTime;\r\n        for (uint256 i = 0; i < durations.length; i++) {\r\n            uint256 rate = rates[i];\r\n            uint256 duration = durations[i];            \r\n            stages.push(Stage({rate: rate, duration: duration, startTime:endTime}));\r\n            endTime = endTime.add(duration);\r\n        }\r\n        userWithdrawalStartTime = endTime.add(userWithdrawalDelaySec);\r\n        clearStartTime = endTime.add(clearDelaySec);\r\n    }\r\n    \r\n    function getCurrentStage() public onlyOpenTime view returns(uint256) {\r\n        for (uint256 i = stages.length - 1; i >= 0; i--) {\r\n            if (now >= stages[i].startTime) {\r\n                return i;\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n    function getPurchaserCount() public view returns(uint256) {\r\n        return purchaserList.length;\r\n    }\r\n\r\n\r\n    function _calcProportion() internal {\r\n        if (totalWannaBuyAmount == 0 || totalSaleAmount >= totalWannaBuyAmount) {\r\n            proportion = 1 ether;\r\n            return;\r\n        }\r\n        proportion = totalSaleAmount.mul(1 ether).div(totalWannaBuyAmount);        \r\n    }\r\n\r\n    function getSaleInfo(address purchaser) public view returns (uint256, uint256, uint256) {\r\n        PurchaserInfo storage pi = purchaserMapping[purchaser];\r\n        uint256 sendEther = 0;\r\n        uint256 usedEther = 0;\r\n        uint256 getToken = 0;        \r\n        for (uint256 i = 0; i < stages.length; i++) {\r\n            sendEther = sendEther.add(pi.amounts[i]);\r\n            uint256 stageUsedEther = pi.amounts[i].mul(proportion).div(1 ether);\r\n            uint256 stageGetToken = stageUsedEther.mul(stages[i].rate);\r\n            if (stageGetToken > 0) {         \r\n                getToken = getToken.add(stageGetToken);\r\n                usedEther = usedEther.add(stageUsedEther);\r\n            }\r\n        }        \r\n        return (sendEther, usedEther, getToken);\r\n    }\r\n    \r\n    function () payable public {        \r\n        buy();\r\n    }\r\n    \r\n    function buy() payable public onlyOpenTime {\r\n        require(msg.value >= 0.1 ether);\r\n        uint256 stageIndex = getCurrentStage();\r\n        uint256 amount = msg.value;\r\n        PurchaserInfo storage pi = purchaserMapping[msg.sender];\r\n        if (!pi.recorded) {\r\n            pi.recorded = true;\r\n            purchaserList.push(msg.sender);\r\n        }\r\n        pi.amounts[stageIndex] = pi.amounts[stageIndex].add(amount);\r\n        globalAmounts[stageIndex] = globalAmounts[stageIndex].add(amount);\r\n        totalWannaBuyAmount = totalWannaBuyAmount.add(amount.mul(stages[stageIndex].rate));\r\n        _calcProportion();\r\n    }\r\n    \r\n    function _withdrawal(address purchaser) internal {\r\n        require(purchaser != 0x0);\r\n        PurchaserInfo storage pi = purchaserMapping[purchaser];        \r\n        if (pi.withdrew) {\r\n            return;\r\n        }\r\n        pi.withdrew = true;\r\n        withdrawn = withdrawn.add(1);\r\n        var (sendEther, usedEther, getToken) = getSaleInfo(purchaser);\r\n        if (usedEther > 0 && getToken > 0) {\r\n            receiverAddr.transfer(usedEther);\r\n            token.transfer(purchaser, getToken);\r\n            if (sendEther.sub(usedEther) > 0) {                \r\n                purchaser.transfer(sendEther.sub(usedEther));   \r\n            }           \r\n        } else {\r\n            purchaser.transfer(sendEther);\r\n        }\r\n        return;\r\n    }\r\n    \r\n    function withdrawal() payable public onlyUserWithdrawalTime {\r\n        _withdrawal(msg.sender);\r\n    }\r\n    \r\n    function withdrawalFor(uint256 index, uint256 stop) payable public onlyAutoWithdrawalTime onlyOwner {\r\n        for (; index < stop; index++) {\r\n            _withdrawal(purchaserList[index]);\r\n        }\r\n    }\r\n    \r\n    function clear(uint256 tokenAmount, uint256 etherAmount) payable public purchasersAllWithdrawn onlyClearTime onlyOwner {\r\n        if (tokenAmount > 0) {\r\n            token.transfer(receiverAddr, tokenAmount);\r\n        }\r\n        if (etherAmount > 0) {\r\n            receiverAddr.transfer(etherAmount);\r\n        }        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rates\",\"type\":\"uint256[]\"},{\"name\":\"durations\",\"type\":\"uint256[]\"},{\"name\":\"userWithdrawalDelaySec\",\"type\":\"uint256\"},{\"name\":\"clearDelaySec\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"clear\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUserWithdrawalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"withdrawalFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchaserList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaserMapping\",\"outputs\":[{\"name\":\"withdrew\",\"type\":\"bool\"},{\"name\":\"recorded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"getSaleInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWannaBuyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clearStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userWithdrawalStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_receiverAddr\",\"type\":\"address\"},{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_totalSaleAmount\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShareTokenSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c98f8c6b319ecceccaa9361ed5372274674f96cf000000000000000000000000a576b808167c9e7a4208988258fd8a8efea2fc4f00000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000000000000005a730140","Library":"","SwarmSource":"bzzr://37a0288bd942631b5b0208b1f950fb4a8b18d68d863ad21bf9ca17a78e10ce1e"}]}