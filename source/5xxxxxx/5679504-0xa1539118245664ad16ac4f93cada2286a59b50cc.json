{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DogCoreInterface {\r\n    \r\n    function getDog(uint256 _id) external view returns (\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes,\r\n        uint8 variation,\r\n        uint256 gen0\r\n        ); \r\n\r\n    function sendMoney(address _to, uint256 _money) external;    \r\n\r\n    function cfoAddress() public returns(address);\r\n\r\n    function cooAddress() public returns(address);\r\n}\r\n\r\ncontract LotteryInterface {\r\n    \r\n    function isLottery() public pure returns (bool);\r\n    \r\n    function getCLottery() \r\n        public \r\n        view \r\n        returns (\r\n            uint8[7]        luckyGenes1,\r\n            uint256         totalAmount1,\r\n            uint256         openBlock1,\r\n            bool            isReward1,\r\n            uint256         term1,\r\n            uint8           currentGenes1,\r\n            uint256         tSupply,\r\n            uint256         sPoolAmount1,\r\n            uint256[]       reward1\r\n        );\r\n}\r\n\r\ncontract Variation is Ownable{\r\n\r\n    bool public isVariation = true;\r\n\r\n    uint256 randomSeed = 1;\r\n\r\n    LotteryInterface public lottery;\r\n\r\n    DogCoreInterface public dogCore;\r\n\r\n    function random() internal returns(uint256) {\r\n        uint256 randomValue = uint256(keccak256(block.timestamp, uint256(randomSeed * block.difficulty)));\r\n        randomSeed = uint256(randomValue * block.number);\r\n        return randomValue;\r\n    }\r\n\r\n\r\n    struct CVariation {\r\n\r\n        uint256         totalAmount;\r\n\r\n        address[]       luckyAccounts;\r\n\r\n        uint256[]       luckyDogs;\r\n\r\n        uint256         withdrawBlock;\r\n    }\r\n\r\n    CVariation[] public cVariations;\r\n\r\n\r\n    event CallBackVariations(uint256[] dogs, address[] owners, uint256 totalAmount, uint256 blockNumber);\r\n    \r\n\r\n    uint256 public variationProbably = 1;\r\n\r\n    uint256 public variationCycle = 10;\r\n\r\n\r\n    function setVariationProbably(uint256 _value) public onlyOwner{\r\n        require(_value > 0);\r\n        require(_value <= 100);\r\n        variationProbably = _value;\r\n    }\r\n    \r\n    function setVariationCycle(uint256 _value) public onlyOwner{\r\n        require(_value > 0);\r\n        require(_value <= 172800);\r\n        variationCycle = _value;\r\n    }\r\n\r\n    function Variation(address _dogCore, address _lottery) public {    \r\n        require(_dogCore != address(0));\r\n        dogCore = DogCoreInterface(_dogCore);\r\n\r\n        setLotteryAddress(_lottery);\r\n\r\n\r\n        CVariation memory newCVariation;\r\n        newCVariation.totalAmount = uint256(0);\r\n        newCVariation.withdrawBlock = uint256(block.number + variationCycle);\r\n        cVariations.push(newCVariation);\r\n    }\r\n\r\n    function setLotteryAddress(address _lottery) public onlyOwner{\r\n        LotteryInterface candidateContract = LotteryInterface(_lottery);\r\n        require(candidateContract.isLottery());\r\n        lottery = candidateContract;\r\n    }\r\n\r\n    function createVariation(uint256 _gene, uint256 _totalSupply) public returns (uint8){\r\n        require(msg.sender == address(dogCore) || msg.sender == owner);\r\n        \r\n        randomSeed = uint256(randomSeed * _gene);\r\n\r\n        uint256 variationRandom = random();\r\n        uint256 totalRandom = _totalSupply >= 20000 ? _totalSupply : 20000;\r\n        return uint256(variationRandom % uint256(totalRandom * variationProbably)) == 1 ? 1 : 0;\r\n    }\r\n\r\n    function registerVariation(uint256 _dogId, address _owner) public {\r\n        require(msg.sender == address(dogCore) || msg.sender == owner);\r\n\r\n        require(_owner != address(0));\r\n        cVariations[cVariations.length - 1].luckyDogs.push(_dogId);\r\n        cVariations[cVariations.length - 1].luckyAccounts.push(_owner);\r\n    }\r\n        \r\n    function callBackVariations() public {\r\n        uint256 index = 0;\r\n\r\n        if (block.number < cVariations[cVariations.length - 1].withdrawBlock) {\r\n            require(cVariations.length > 1);\r\n            CallBackVariations(\r\n                cVariations[cVariations.length - 2].luckyDogs, \r\n                cVariations[cVariations.length - 2].luckyAccounts, \r\n                cVariations[cVariations.length - 2].totalAmount, \r\n                cVariations[cVariations.length - 2].withdrawBlock\r\n            );\r\n            return;\r\n        }\r\n        require(msg.sender == dogCore.cooAddress() || msg.sender == owner);\r\n\r\n        CVariation storage currentCVariation = cVariations[cVariations.length - 1];    \r\n\r\n        currentCVariation.withdrawBlock = block.number;\r\n\r\n        var(,,,,,,,spoolAmount,) = lottery.getCLottery();\r\n        uint256 luckyAmount = (address(dogCore).balance - spoolAmount) * 3 / 100;\r\n        require(luckyAmount > 0);\r\n        currentCVariation.totalAmount = luckyAmount;\r\n        \r\n        CVariation memory newCVariation;\r\n        newCVariation.totalAmount = uint256(0);\r\n        newCVariation.withdrawBlock = uint256(block.number + variationCycle);    \r\n        cVariations.push(newCVariation);\r\n\r\n        uint256 luckySize = currentCVariation.luckyDogs.length;\r\n        if (luckySize == 0) {\r\n            CallBackVariations(\r\n                currentCVariation.luckyDogs, \r\n                currentCVariation.luckyAccounts, \r\n                currentCVariation.totalAmount, \r\n                currentCVariation.withdrawBlock\r\n            );\r\n            return;\r\n        }\r\n\r\n        for (index = 1; index <= luckySize; index++) {\r\n            uint256 dogId = currentCVariation.luckyDogs[luckySize - index];\r\n            var(,,,birthTime,,,,,,) = dogCore.getDog(dogId);\r\n            if(birthTime < block.number){\r\n                break;\r\n            }\r\n            cVariations[cVariations.length - 1].luckyDogs.push(dogId);\r\n            cVariations[cVariations.length - 1].luckyAccounts.push(currentCVariation.luckyAccounts[luckySize - index]);\r\n        }\r\n        for (index = 1; index <= cVariations[cVariations.length - 1].luckyDogs.length; index++) {\r\n            delete currentCVariation.luckyDogs[luckySize - index];\r\n            delete currentCVariation.luckyAccounts[luckySize - index];\r\n        }\r\n\r\n        luckySize -= cVariations[cVariations.length - 1].luckyDogs.length;\r\n        if (luckySize == 0) {\r\n            CallBackVariations(\r\n                currentCVariation.luckyDogs, \r\n                currentCVariation.luckyAccounts, \r\n                currentCVariation.totalAmount, \r\n                currentCVariation.withdrawBlock\r\n            );\r\n            return;\r\n        }\r\n\r\n        uint256 reward = currentCVariation.totalAmount * 9 / (10 * luckySize);\r\n        \r\n        for (index = 0; index < luckySize; index++) {\r\n\r\n            address owner = currentCVariation.luckyAccounts[index];\r\n            dogCore.sendMoney(owner, reward);\r\n        }\r\n\r\n        dogCore.sendMoney(dogCore.cfoAddress(),  currentCVariation.totalAmount / 10);\r\n\r\n\r\n        CallBackVariations(\r\n            currentCVariation.luckyDogs, \r\n            currentCVariation.luckyAccounts, \r\n            currentCVariation.totalAmount, \r\n            currentCVariation.withdrawBlock\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isVariation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lottery\",\"type\":\"address\"}],\"name\":\"setLotteryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setVariationCycle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dogId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"registerVariation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setVariationProbably\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callBackVariations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gene\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"createVariation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"variationProbably\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"variationCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dogCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cVariations\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"withdrawBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dogCore\",\"type\":\"address\"},{\"name\":\"_lottery\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dogs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"CallBackVariations\",\"type\":\"event\"}]","ContractName":"Variation","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074cd98fbd837fe9200cf867f4b1ba9573c6d865e00000000000000000000000009f765f23896c81d7982d0f26f92d9d78b0c0142","Library":"","SwarmSource":"bzzr://567e1f176852853fb88d69dba98673ce69c35b982dc54e0338c599402f8556c2"}]}