{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract LuckchemyCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    //  Token for selling\r\n    LuckchemyToken public token;\r\n\r\n    /*\r\n    *  Start and End date of investment process\r\n    */\r\n\r\n    // 2018-04-30 00:00:00 GMT - start time for public sale\r\n    uint256 public constant START_TIME_SALE = 1525046400;\r\n\r\n    // 2018-07-20 23:59:59 GMT - end time for public sale\r\n    uint256 public constant END_TIME_SALE = 1532131199;\r\n\r\n    // 2018-04-02 00:00:00 GMT - start time for private sale\r\n    uint256 public constant START_TIME_PRESALE = 1522627200;\r\n\r\n    // 2018-04-24 23:59:59 GMT - end time for private sale\r\n    uint256 public constant END_TIME_PRESALE = 1524614399;\r\n\r\n\r\n    // amount of already sold tokens\r\n    uint256 public tokensSold = 0;\r\n\r\n    //supply for crowdSale\r\n    uint256 public totalSupply = 0;\r\n    // hard cap\r\n    uint256 public constant hardCap = 45360 ether;\r\n    // soft cap\r\n    uint256 public constant softCap = 2000 ether;\r\n\r\n    // wei representation of collected fiat\r\n    uint256 public fiatBalance = 0;\r\n    // ether collected in wei\r\n    uint256 public ethBalance = 0;\r\n\r\n    //address of serviceAgent (it can calls  payFiat function)\r\n    address public serviceAgent;\r\n\r\n    // owner of the contract\r\n    address public owner;\r\n\r\n    //default token rate\r\n    uint256 public constant RATE = 12500; // Token price in ETH - 0.00008 ETH  1 ETHER = 12500 tokens\r\n\r\n    // 2018/04/30 - 2018/07/22  \r\n    uint256 public constant DISCOUNT_PRIVATE_PRESALE = 80; // 80 % discount\r\n\r\n    // 2018/04/30 - 2018/07/20\r\n    uint256 public constant DISCOUNT_STAGE_ONE = 40;  // 40% discount\r\n\r\n    // 2018/04/02 - 2018/04/24   \r\n    uint256 public constant DISCOUNT_STAGE_TWO = 20; // 20% discount\r\n\r\n    // 2018/04/30 - 2018/07/22  \r\n    uint256 public constant DISCOUNT_STAGE_THREE = 0;\r\n\r\n\r\n\r\n\r\n    //White list of addresses that are allowed to by a token\r\n    mapping(address => bool) public whitelist;\r\n\r\n\r\n    /**\r\n     * List of addresses for ICO fund with shares in %\r\n     * \r\n     */\r\n    uint256 public constant LOTTERY_FUND_SHARE = 40;\r\n    uint256 public constant OPERATIONS_SHARE = 50;\r\n    uint256 public constant PARTNERS_SHARE = 10;\r\n\r\n    address public constant LOTTERY_FUND_ADDRESS = 0x84137CB59076a61F3f94B2C39Da8fbCb63B6f096;\r\n    address public constant OPERATIONS_ADDRESS = 0xEBBeAA0699837De527B29A03ECC914159D939Eea;\r\n    address public constant PARTNERS_ADDRESS = 0x820502e8c80352f6e11Ce036DF03ceeEBE002642;\r\n\r\n    /**\r\n     * event for token ETH purchase  logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenETHPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n    /**\r\n     * event for token FIAT purchase  logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenFiatPurchase(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n\r\n    /*\r\n     * modifier which gives specific rights to owner\r\n     */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /*\r\n     * modifier which gives possibility to call payFiat function\r\n     */\r\n    modifier onlyServiceAgent(){\r\n        require(msg.sender == serviceAgent);\r\n        _;\r\n    }\r\n\r\n    /*\r\n    *\r\n    *modifier which gives possibility to purchase\r\n    *\r\n    */\r\n    modifier onlyWhiteList(address _address){\r\n        require(whitelist[_address] == true);\r\n        _;\r\n    }\r\n    /*\r\n     * Enum which defines stages of ICO\r\n    */\r\n\r\n    enum Stage {\r\n        Private,\r\n        Discount40,\r\n        Discount20,\r\n        NoDiscount\r\n    }\r\n\r\n    //current stage\r\n    Stage public  currentStage;\r\n\r\n    //pools of token for each stage\r\n    mapping(uint256 => uint256) public tokenPools;\r\n\r\n    //number of tokens per 1 ether for each stage\r\n    mapping(uint256 => uint256) public stageRates;\r\n\r\n    /*\r\n    * deposit is amount in wei , which was sent to the contract\r\n    * @ address - address of depositor\r\n    * @ uint256 - amount\r\n    */\r\n    mapping(address => uint256) public deposits;\r\n\r\n    /* \r\n    * constructor of contract \r\n    *  @ _service- address which has rights to call payFiat\r\n    */\r\n    function LuckchemyCrowdsale(address _service) public {\r\n        require(START_TIME_SALE >= now);\r\n        require(START_TIME_SALE > END_TIME_PRESALE);\r\n        require(END_TIME_SALE > START_TIME_SALE);\r\n\r\n        require(_service != 0x0);\r\n\r\n        owner = msg.sender;\r\n        serviceAgent = _service;\r\n        token = new LuckchemyToken();\r\n        totalSupply = token.CROWDSALE_SUPPLY();\r\n\r\n        currentStage = Stage.Private;\r\n\r\n        uint256 decimals = uint256(token.decimals());\r\n\r\n        tokenPools[uint256(Stage.Private)] = 70000000 * (10 ** decimals);\r\n        tokenPools[uint256(Stage.Discount40)] = 105000000 * (10 ** decimals);\r\n        tokenPools[uint256(Stage.Discount20)] = 175000000 * (10 ** decimals);\r\n        tokenPools[uint256(Stage.NoDiscount)] = 350000000 * (10 ** decimals);\r\n\r\n        stageRates[uint256(Stage.Private)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_PRIVATE_PRESALE);\r\n        stageRates[uint256(Stage.Discount40)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_ONE);\r\n        stageRates[uint256(Stage.Discount20)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_TWO);\r\n        stageRates[uint256(Stage.NoDiscount)] = RATE.mul(10 ** decimals).mul(100).div(100 - DISCOUNT_STAGE_THREE);\r\n\r\n    }\r\n\r\n    /*\r\n     * function to get amount ,which invested by depositor\r\n     * @depositor - address ,which bought tokens\r\n    */\r\n    function depositOf(address depositor) public constant returns (uint256) {\r\n        return deposits[depositor];\r\n    }\r\n    /*\r\n     * fallback function can be used to buy  tokens\r\n     */\r\n    function() public payable {\r\n        payETH(msg.sender);\r\n    }\r\n\r\n\r\n    /*\r\n    * function for tracking ethereum purchases\r\n    * @beneficiary - address ,which received tokens\r\n    */\r\n    function payETH(address beneficiary) public onlyWhiteList(beneficiary) payable {\r\n\r\n        require(msg.value >= 0.1 ether);\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n        if (isPrivateSale()) {\r\n            processPrivatePurchase(msg.value, beneficiary);\r\n        } else {\r\n            processPublicPurchase(msg.value, beneficiary);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /*\r\n     * function for processing purchase in private sale\r\n     * @weiAmount - amount of wei , which send to the contract\r\n     * @beneficiary - address for receiving tokens\r\n     */\r\n    function processPrivatePurchase(uint256 weiAmount, address beneficiary) private {\r\n\r\n        uint256 stage = uint256(Stage.Private);\r\n\r\n        require(currentStage == Stage.Private);\r\n        require(tokenPools[stage] > 0);\r\n\r\n        //calculate number tokens\r\n        uint256 tokensToBuy = (weiAmount.mul(stageRates[stage])).div(1 ether);\r\n        if (tokensToBuy <= tokenPools[stage]) {\r\n            //pool has enough tokens\r\n            payoutTokens(beneficiary, tokensToBuy, weiAmount);\r\n\r\n        } else {\r\n            //pool doesn't have enough tokens\r\n            tokensToBuy = tokenPools[stage];\r\n            //left wei\r\n            uint256 usedWei = (tokensToBuy.mul(1 ether)).div(stageRates[stage]);\r\n            uint256 leftWei = weiAmount.sub(usedWei);\r\n\r\n            payoutTokens(beneficiary, tokensToBuy, usedWei);\r\n\r\n            //change stage to Public Sale\r\n            currentStage = Stage.Discount40;\r\n\r\n            //return left wei to beneficiary and change stage\r\n            beneficiary.transfer(leftWei);\r\n        }\r\n    }\r\n    /*\r\n    * function for processing purchase in public sale\r\n    * @weiAmount - amount of wei , which send to the contract\r\n    * @beneficiary - address for receiving tokens\r\n    */\r\n    function processPublicPurchase(uint256 weiAmount, address beneficiary) private {\r\n\r\n        if (currentStage == Stage.Private) {\r\n            currentStage = Stage.Discount40;\r\n            tokenPools[uint256(Stage.Discount40)] = tokenPools[uint256(Stage.Discount40)].add(tokenPools[uint256(Stage.Private)]);\r\n            tokenPools[uint256(Stage.Private)] = 0;\r\n        }\r\n\r\n        for (uint256 stage = uint256(currentStage); stage <= 3; stage++) {\r\n\r\n            //calculate number tokens\r\n            uint256 tokensToBuy = (weiAmount.mul(stageRates[stage])).div(1 ether);\r\n\r\n            if (tokensToBuy <= tokenPools[stage]) {\r\n                //pool has enough tokens\r\n                payoutTokens(beneficiary, tokensToBuy, weiAmount);\r\n\r\n                break;\r\n            } else {\r\n                //pool doesn't have enough tokens\r\n                tokensToBuy = tokenPools[stage];\r\n                //left wei\r\n                uint256 usedWei = (tokensToBuy.mul(1 ether)).div(stageRates[stage]);\r\n                uint256 leftWei = weiAmount.sub(usedWei);\r\n\r\n                payoutTokens(beneficiary, tokensToBuy, usedWei);\r\n\r\n                if (stage == 3) {\r\n                    //return unused wei when all tokens sold\r\n                    beneficiary.transfer(leftWei);\r\n                    break;\r\n                } else {\r\n                    weiAmount = leftWei;\r\n                    //change current stage\r\n                    currentStage = Stage(stage + 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n     * function for actual payout in public sale\r\n     * @beneficiary - address for receiving tokens\r\n     * @tokenAmount - amount of tokens to payout\r\n     * @weiAmount - amount of wei used\r\n     */\r\n    function payoutTokens(address beneficiary, uint256 tokenAmount, uint256 weiAmount) private {\r\n        uint256 stage = uint256(currentStage);\r\n        tokensSold = tokensSold.add(tokenAmount);\r\n        tokenPools[stage] = tokenPools[stage].sub(tokenAmount);\r\n        deposits[beneficiary] = deposits[beneficiary].add(weiAmount);\r\n        ethBalance = ethBalance.add(weiAmount);\r\n\r\n        token.transfer(beneficiary, tokenAmount);\r\n        TokenETHPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n    }\r\n    /*\r\n     * function for change btc agent\r\n     * can be called only by owner of the contract\r\n     * @_newServiceAgent - new serviceAgent address\r\n     */\r\n    function setServiceAgent(address _newServiceAgent) public onlyOwner {\r\n        serviceAgent = _newServiceAgent;\r\n    }\r\n    /*\r\n     * function for tracking bitcoin purchases received by bitcoin wallet\r\n     * each transaction and amount of tokens according to rate can be validated on public bitcoin wallet\r\n     * public key - #\r\n     * @beneficiary - address, which received tokens\r\n     * @amount - amount tokens\r\n     * @stage - number of the stage (80% 40% 20% 0% discount)\r\n     * can be called only by serviceAgent address\r\n     */\r\n    function payFiat(address beneficiary, uint256 amount, uint256 stage) public onlyServiceAgent onlyWhiteList(beneficiary) {\r\n\r\n        require(beneficiary != 0x0);\r\n        require(tokenPools[stage] >= amount);\r\n        require(stage == uint256(currentStage));\r\n\r\n        //calculate fiat amount in wei\r\n        uint256 fiatWei = amount.mul(1 ether).div(stageRates[stage]);\r\n        fiatBalance = fiatBalance.add(fiatWei);\r\n        require(validPurchase());\r\n\r\n        tokenPools[stage] = tokenPools[stage].sub(amount);\r\n        tokensSold = tokensSold.add(amount);\r\n\r\n        token.transfer(beneficiary, amount);\r\n        TokenFiatPurchase(msg.sender, beneficiary, amount);\r\n    }\r\n\r\n\r\n    /*\r\n     * function for  checking if crowdsale is finished\r\n     */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > END_TIME_SALE || tokensSold >= totalSupply;\r\n    }\r\n\r\n    /*\r\n     * function for  checking if hardCapReached\r\n     */\r\n    function hardCapReached() public constant returns (bool) {\r\n        return tokensSold >= totalSupply || fiatBalance.add(ethBalance) >= hardCap;\r\n    }\r\n    /*\r\n     * function for  checking if crowdsale goal is reached\r\n     */\r\n    function softCapReached() public constant returns (bool) {\r\n        return fiatBalance.add(ethBalance) >= softCap;\r\n    }\r\n\r\n    function isPrivateSale() public constant returns (bool) {\r\n        return now >= START_TIME_PRESALE && now <= END_TIME_PRESALE;\r\n    }\r\n\r\n    /*\r\n     * function that call after crowdsale is ended\r\n     *          releaseTokenTransfer - enable token transfer between users.\r\n     *          burn tokens which are left on crowsale contract balance\r\n     *          transfer balance of contract to wallets according to shares.\r\n     */\r\n    function forwardFunds() public onlyOwner {\r\n        require(hasEnded());\r\n        require(softCapReached());\r\n\r\n        token.releaseTokenTransfer();\r\n        token.burn(token.balanceOf(this));\r\n\r\n        //transfer token ownership to this owner of crowdsale\r\n        token.transferOwnership(msg.sender);\r\n\r\n        //transfer funds here\r\n        uint256 totalBalance = this.balance;\r\n        LOTTERY_FUND_ADDRESS.transfer((totalBalance.mul(LOTTERY_FUND_SHARE)).div(100));\r\n        OPERATIONS_ADDRESS.transfer((totalBalance.mul(OPERATIONS_SHARE)).div(100));\r\n        PARTNERS_ADDRESS.transfer(this.balance); // send the rest to partners (PARTNERS_SHARE)\r\n    }\r\n    /*\r\n     * function that call after crowdsale is ended\r\n     *          conditions : ico ended and goal isn't reached. amount of depositor > 0.\r\n     *\r\n     *          refund eth deposit (fiat refunds will be done manually)\r\n     */\r\n    function refund() public {\r\n        require(hasEnded());\r\n        require(!softCapReached() || ((now > END_TIME_SALE + 30 days) && !token.released()));\r\n        uint256 amount = deposits[msg.sender];\r\n        require(amount > 0);\r\n        deposits[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n\r\n    }\r\n\r\n    /*\r\n        internal functions\r\n    */\r\n\r\n    /*\r\n     *  function for checking period of investment and investment amount restriction for ETH purchases\r\n     */\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = (now >= START_TIME_PRESALE && now <= END_TIME_PRESALE) || (now >= START_TIME_SALE && now <= END_TIME_SALE);\r\n        return withinPeriod && !hardCapReached();\r\n    }\r\n    /*\r\n     * function for adding address to whitelist\r\n     * @_whitelistAddress - address to add\r\n     */\r\n    function addToWhiteList(address _whitelistAddress) public onlyServiceAgent {\r\n        whitelist[_whitelistAddress] = true;\r\n    }\r\n\r\n    /*\r\n     * function for removing address from whitelist\r\n     * @_whitelistAddress - address to remove\r\n     */\r\n    function removeWhiteList(address _whitelistAddress) public onlyServiceAgent {\r\n        delete whitelist[_whitelistAddress];\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract LuckchemyToken is BurnableToken, StandardToken, Claimable {\r\n\r\n    bool public released = false;\r\n\r\n    string public constant name = \"Luckchemy\";\r\n\r\n    string public constant symbol = \"LUK\";\r\n\r\n    uint8 public constant decimals = 8;\r\n\r\n    uint256 public CROWDSALE_SUPPLY;\r\n\r\n    uint256 public OWNERS_AND_PARTNERS_SUPPLY;\r\n\r\n    address public constant OWNERS_AND_PARTNERS_ADDRESS = 0x603a535a1D7C5050021F9f5a4ACB773C35a67602;\r\n\r\n    // Index of unique addresses\r\n    uint256 public addressCount = 0;\r\n\r\n    // Map of unique addresses\r\n    mapping(uint256 => address) public addressMap;\r\n    mapping(address => bool) public addressAvailabilityMap;\r\n\r\n    //blacklist of addresses (product/developers addresses) that are not included in the final Holder lottery\r\n    mapping(address => bool) public blacklist;\r\n\r\n    // service agent for managing blacklist\r\n    address public serviceAgent;\r\n\r\n    event Release();\r\n    event BlacklistAdd(address indexed addr);\r\n    event BlacklistRemove(address indexed addr);\r\n\r\n    /**\r\n     * Do not transfer tokens until the crowdsale is over.\r\n     *\r\n     */\r\n    modifier canTransfer() {\r\n        require(released || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * modifier which gives specific rights to serviceAgent\r\n     */\r\n    modifier onlyServiceAgent(){\r\n        require(msg.sender == serviceAgent);\r\n        _;\r\n    }\r\n\r\n\r\n    function LuckchemyToken() public {\r\n\r\n        totalSupply_ = 1000000000 * (10 ** uint256(decimals));\r\n        CROWDSALE_SUPPLY = 700000000 * (10 ** uint256(decimals));\r\n        OWNERS_AND_PARTNERS_SUPPLY = 300000000 * (10 ** uint256(decimals));\r\n\r\n        addAddressToUniqueMap(msg.sender);\r\n        addAddressToUniqueMap(OWNERS_AND_PARTNERS_ADDRESS);\r\n\r\n        balances[msg.sender] = CROWDSALE_SUPPLY;\r\n\r\n        balances[OWNERS_AND_PARTNERS_ADDRESS] = OWNERS_AND_PARTNERS_SUPPLY;\r\n\r\n        owner = msg.sender;\r\n\r\n        Transfer(0x0, msg.sender, CROWDSALE_SUPPLY);\r\n\r\n        Transfer(0x0, OWNERS_AND_PARTNERS_ADDRESS, OWNERS_AND_PARTNERS_SUPPLY);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public canTransfer returns (bool success) {\r\n        //Add address to map of unique token owners\r\n        addAddressToUniqueMap(_to);\r\n\r\n        // Call StandardToken.transfer()\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool success) {\r\n        //Add address to map of unique token owners\r\n        addAddressToUniqueMap(_to);\r\n\r\n        // Call StandardToken.transferForm()\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    *\r\n    * Release the tokens to the public.\r\n    * Can be called only by owner which should be the Crowdsale contract\r\n    * Should be called if the crowdale is successfully finished\r\n    *\r\n    */\r\n    function releaseTokenTransfer() public onlyOwner {\r\n        released = true;\r\n        Release();\r\n    }\r\n\r\n    /**\r\n     * Add address to the black list.\r\n     * Only service agent can do this\r\n     */\r\n    function addBlacklistItem(address _blackAddr) public onlyServiceAgent {\r\n        blacklist[_blackAddr] = true;\r\n\r\n        BlacklistAdd(_blackAddr);\r\n    }\r\n\r\n    /**\r\n    * Remove address from the black list.\r\n    * Only service agent can do this\r\n    */\r\n    function removeBlacklistItem(address _blackAddr) public onlyServiceAgent {\r\n        delete blacklist[_blackAddr];\r\n    }\r\n\r\n    /**\r\n    * Add address to unique map if it is not added\r\n    */\r\n    function addAddressToUniqueMap(address _addr) private returns (bool) {\r\n        if (addressAvailabilityMap[_addr] == true) {\r\n            return true;\r\n        }\r\n\r\n        addressAvailabilityMap[_addr] = true;\r\n        addressMap[addressCount++] = _addr;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Get address by index from map of unique addresses\r\n    */\r\n    function getUniqueAddressByIndex(uint256 _addressIndex) public view returns (address) {\r\n        return addressMap[_addressIndex];\r\n    }\r\n\r\n    /**\r\n    * Change service agent\r\n    */\r\n    function changeServiceAgent(address _addr) public onlyOwner {\r\n        serviceAgent = _addr;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPools\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newServiceAgent\",\"type\":\"address\"}],\"name\":\"setServiceAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"payFiat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNERS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNERS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTERY_FUND_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATIONS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_STAGE_THREE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_STAGE_TWO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTERY_FUND_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_STAGE_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATIONS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_PRIVATE_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"payETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_service\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenETHPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenFiatPurchase\",\"type\":\"event\"}]","ContractName":"LuckchemyCrowdsale","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003bf319e9fdab14a3178e252749c56df8acf109ed","Library":"","SwarmSource":"bzzr://5e6e3f27ed86edac2c9308e66f4cc8c5647e3226243fc2c7bb6668daabf98241"}]}