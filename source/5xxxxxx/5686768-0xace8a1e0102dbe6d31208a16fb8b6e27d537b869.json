{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public ownerCandidate;\r\n\r\n    constructor() public {\r\n        owner = address(0x6b9E41bE828027Bf199b9bC4167A31566daB6B62); \r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        ownerCandidate = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == ownerCandidate);  \r\n        owner = ownerCandidate;\r\n    }\r\n    \r\n}\r\n\r\ncontract AddressTree is Owned{\r\n    \r\n    // Max number of items in tree \r\n    uint256 public constant TreeLim = 2;\r\n    \r\n    struct Tree{\r\n        mapping(uint256 => Tree) Items;\r\n        address Item;\r\n    }\r\n    \r\n    mapping(address => Tree) public TreeList; \r\n    \r\n    function CheckTree(address root)\r\n        internal\r\n    {\r\n        Tree storage CurrentTree = TreeList[root];\r\n        if (CurrentTree.Item == address(0x0)){\r\n            // empty tree \r\n            CurrentTree.Item = root;\r\n        }\r\n\r\n    }\r\n    \r\n    constructor()\r\n        public\r\n    {\r\n    }\r\n    \r\n    \r\n    function AddItem(address root, address target)\r\n        public\r\n        onlyOwner\r\n    {\r\n        CheckTree(root);\r\n        CheckTree(target);\r\n        Tree storage CurrentTree = TreeList[root];\r\n        for (uint256 i=0; i<TreeLim; i++){\r\n            if (CurrentTree.Items[i].Item == address(0x0)){\r\n                \r\n                Tree storage TargetTree = TreeList[target];\r\n                CurrentTree.Items[i] = TargetTree;\r\n                return;\r\n            }\r\n        }\r\n        // no empty item found \r\n        revert();\r\n    }\r\n    \r\n    function SetItem(address root, uint256 index, address target)\r\n        public    \r\n        onlyOwner\r\n    {\r\n        require(index < TreeLim);\r\n        CheckTree(root);\r\n        CheckTree(target);\r\n        Tree storage CurrentTree = TreeList[root];\r\n        Tree storage TargetTree = TreeList[target];\r\n        CurrentTree.Items[index] = TargetTree;\r\n        \r\n    }\r\n    \r\n    //web view item\r\n    function GetItems(address target)\r\n        view\r\n        public\r\n        returns (address[TreeLim])\r\n    {\r\n        address[TreeLim] memory toReturn;\r\n        Tree storage CurrentTree = TreeList[target];\r\n        for (uint256 i=0; i<TreeLim; i++){\r\n            toReturn[i] = CurrentTree.Items[i].Item;\r\n        }\r\n        return toReturn;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TreeList\",\"outputs\":[{\"name\":\"Item\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"root\",\"type\":\"address\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TreeLim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"root\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"SetItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"GetItems\",\"outputs\":[{\"name\":\"\",\"type\":\"address[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AddressTree","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2578d0f1d942b88b5cecfd8753199e28339570c3a51c363fe24b4b086a1f953"}]}