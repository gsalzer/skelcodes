{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Derived from: Sample fixed supply token contract\r\n// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\r\n// (c) Ethex LLC 2017.\r\n// ----------------------------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Etx is ERC20Interface {\r\n    string public constant symbol = \"ETX\";\r\n\r\n    string public constant name = \"Ethex supporter token.\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public blocksToVest;\r\n\r\n    uint256 constant _totalSupply = 10000 * (1 ether);\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    // Balances for each account\r\n    mapping (address => uint256) balances;\r\n\r\n    // activate start for each account.\r\n    mapping (address => uint256) activateStartBlock;\r\n\r\n    //block at which this Etx token expires\r\n    uint256 public expirationBlock;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function Etx(uint256 _blocksToVest,uint256 _expirationBlock) public {\r\n        blocksToVest = _blocksToVest;\r\n        expirationBlock = _expirationBlock;\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n        activateStartBlock[owner] = block.number;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256 ts) {\r\n        ts = _totalSupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //in case the client wants to display how long until they are vested.\r\n    function activateStartBlockOf(address _owner) public constant returns (uint256 blockNumber) {\r\n        if (balances[_owner] >= (1 ether)) {\r\n          return activateStartBlock[_owner];\r\n        }\r\n        return block.number;\r\n    }\r\n\r\n    function isActive(address _owner) public constant returns (bool vested) {\r\n        if (block.number > expirationBlock) {\r\n            return false;\r\n        }\r\n        if (balances[_owner] >= (1 ether) &&\r\n        activateStartBlock[_owner] + blocksToVest <= block.number) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        if (balances[msg.sender] >= _amount &&\r\n        _amount > 0 &&\r\n        balances[_to] + _amount > balances[_to]) {\r\n\r\n            // Record current _to balance.\r\n            uint256 previousBalance = balances[_to];\r\n\r\n            // Transfer.\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n\r\n            // If \"_to\" crossed the 1 ETX level in this transaction, this is the activate start block.\r\n            if (previousBalance < (1 ether) && balances[_to] >= (1 ether)) {\r\n                activateStartBlock[_to] = block.number;\r\n            }\r\n\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        if (balances[_from] >= _amount &&\r\n        allowed[_from][msg.sender] >= _amount &&\r\n        _amount > 0 &&\r\n        balances[_to] + _amount > balances[_to]) {\r\n\r\n            // Record current _to balance.\r\n            uint256 previousBalance = balances[_to];\r\n\r\n            // Transfer.\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n\r\n            // If \"_to\" crossed the 1 ETX level in this transaction, this is the activate start block.\r\n            if (previousBalance < (1 ether) && balances[_to] >= (1 ether)) {\r\n                activateStartBlock[_to] = block.number;\r\n            }\r\n\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n      // To change the approve amount you first have to reduce the addresses`\r\n      //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n      //  already 0 to mitigate the race condition described here:\r\n      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n      require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n      allowed[msg.sender][_spender] = _amount;\r\n      Approval(msg.sender, _spender, _amount);\r\n      return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"ts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"activateStartBlockOf\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"vested\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksToVest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_blocksToVest\",\"type\":\"uint256\"},{\"name\":\"_expirationBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Etx","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ba37a2f7f7ab68a4f0f5d8b4b7b7409b60e18beb83acf6420615175996611f07"}]}