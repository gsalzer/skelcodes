{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract Ownable {\r\naddress public owner;\r\n\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n/**\r\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n* account.\r\n*/\r\nfunction Ownable() public {\r\nowner = msg.sender;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n* @param newOwner The address to transfer ownership to.\r\n*/\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\nrequire(newOwner != address(0));\r\nOwnershipTransferred(owner, newOwner);\r\nowner = newOwner;\r\n}\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\nusing SafeMath for uint256;\r\n\r\nmapping(address => uint256) balances;\r\n\r\nuint256 totalSupply_;\r\n\r\n/**\r\n* @dev total number of tokens in existence\r\n*/\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n}\r\n\r\n\r\n/**\r\n* @dev transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[msg.sender]);\r\n\r\n// SafeMath.sub will throw if there is not enough balance.\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nTransfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\nreturn balances[_owner];\r\n}\r\n\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\nevent Burn(address indexed burner, uint256 value);\r\n\r\n/**\r\n* @dev Burns a specific amount of tokens.\r\n* @param _value The amount of token to be burned.\r\n*/\r\nfunction burn(uint256 _value) public {\r\nrequire(_value <= balances[msg.sender]);\r\n// no need to require value <= totalSupply, since that would imply the\r\n// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\naddress burner = msg.sender;\r\nbalances[burner] = balances[burner].sub(_value);\r\ntotalSupply_ = totalSupply_.sub(_value);\r\nBurn(burner, _value);\r\n}\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender) public view returns (uint256);\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\nfunction safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\nassert(token.transfer(to, value));\r\n}\r\n\r\nfunction safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\nassert(token.transferFrom(from, to, value));\r\n}\r\n\r\nfunction safeApprove(ERC20 token, address spender, uint256 value) internal {\r\nassert(token.approve(spender, value));\r\n}\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\nmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nTransfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n*\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n* @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nallowed[msg.sender][_spender] = _value;\r\nApproval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender.\r\n*/\r\nfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n/**\r\n* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n*\r\n* approve should be called when allowed[_spender] == 0. To increment\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _addedValue The amount of tokens to increase the allowance by.\r\n*/\r\nfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\nallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\nApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n*\r\n* approve should be called when allowed[_spender] == 0. To decrement\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n*/\r\nfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\nuint oldValue = allowed[msg.sender][_spender];\r\nif (_subtractedValue > oldValue) {\r\nallowed[msg.sender][_spender] = 0;\r\n} else {\r\nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n}\r\nApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n}\r\n\r\ncontract BlueHillMining is StandardToken, BurnableToken, Ownable {\r\nusing SafeMath for uint;\r\n\r\nstring constant public symbol = \"BHM\";\r\nstring constant public name = \"BlueHillMining\";\r\n\r\nuint8 constant public decimals = 18;\r\nuint256 INITIAL_SUPPLY = 500000000e18;\r\n\r\nuint constant ITSStartTime = 1528396200; \r\nuint constant ITSEndTime = 1530297000; \r\n\r\n\r\naddress company = 0x1A4a8255773074d172742915AA9745E6e529530D;\r\naddress team = 0x88fb748D13228dDFA38b68193B9332C4386D3927;\r\n\r\naddress crowdsale = 0x71d764B4A64781fcbB6d258B39C88EF7C04977bE;\r\naddress bounty = 0x610c6CA66FF6380391a725ea2CE5cE436D5c7708;\r\n\r\naddress reserve = 0x8AAAe9Ee2CCFCc15A6B889085c172d48adc168a5;\r\n\r\nuint constant companyTokens = 50000000e18;\r\nuint constant teamTokens =  3000000e18;\r\nuint constant crowdsaleTokens = 350000000e18;\r\nuint constant bountyTokens = 13344244e18;\r\nuint constant reserveTokens = 50000000e18;\r\n\r\nfunction BlueHillMining() public {\r\n\r\ntotalSupply_ = INITIAL_SUPPLY;\r\n\r\n// InitialDistribution\r\npreSale(company, companyTokens);\r\npreSale(team, teamTokens);\r\npreSale(crowdsale, crowdsaleTokens);\r\npreSale(bounty, bountyTokens);\r\npreSale(reserve, reserveTokens);\r\n\r\n}\r\n\r\nfunction preSale(address _address, uint _amount) internal returns (bool) {\r\nbalances[_address] = _amount;\r\nTransfer(address(0x0), _address, _amount);\r\n}\r\n\r\n\r\n\r\nfunction transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\nbalances[0x71d764B4A64781fcbB6d258B39C88EF7C04977bE] = balances[0x71d764B4A64781fcbB6d258B39C88EF7C04977bE].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nTransfer(address(crowdsale), _to, _value);\r\n\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nTransfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BlueHillMining","CompilerVersion":"v0.4.25-nightly.2018.6.3+commit.ef8fb63b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c4a9a9e786d61224c1a4ea40bfb6d0607dda8ad8a5e4fa9c648ed81a7c6320bc"}]}