{"status":"1","message":"OK","result":[{"SourceCode":"//Gladiate\r\n\r\npragma solidity ^0.4.21;\r\n\r\nlibrary gladiate {\r\n    enum Weapon {None, Knife, Sword, Spear}\r\n    enum GladiatorState {Null, Incoming, Active, Outgoing}\r\n    \r\n    struct Gladiator {\r\n        GladiatorState state;\r\n        uint stateTransitionBlock;\r\n        uint8 x;\r\n        uint8 y;\r\n        Weapon weapon;\r\n        uint8 coins;\r\n    }\r\n}\r\n\r\ncontract Arena {\r\n    uint8 pseudoRandomNonce;\r\n    function pseudoRandomUint8(uint8 limit)\r\n    internal\r\n    returns (uint8) {\r\n        return uint8(keccak256(block.blockhash(block.number-1), pseudoRandomNonce)) % limit;\r\n        pseudoRandomNonce++;\r\n    }\r\n    \r\n    uint constant public coinValue = 50000000000000000; // 0.05 ETH\r\n    \r\n    uint constant spawnTime = 3;\r\n    uint constant despawnTime = 2;\r\n    \r\n    address public emperor;\r\n    mapping (address => gladiate.Gladiator) public gladiators;\r\n    \r\n    struct Tile {\r\n        uint coins;\r\n        gladiate.Weapon weapon;\r\n        address gladiator;\r\n    }\r\n    \r\n    Tile[10][10] tiles;\r\n    \r\n    function Arena()\r\n    public {\r\n        emperor = msg.sender;\r\n    }\r\n    \r\n    modifier onlyEmporer() \r\n        {require(msg.sender == emperor); _;}\r\n    modifier gladiatorExists(address owner) \r\n        {require(gladiators[owner].state != gladiate.GladiatorState.Null); _;}\r\n    modifier gladiatorInState(address owner, gladiate.GladiatorState s) \r\n        {require(gladiators[owner].state == s); _;}\r\n    \r\n    function startGladiatorWithCoin(uint8 x, uint8 y, address owner)\r\n    internal {\r\n        gladiators[owner].state = gladiate.GladiatorState.Incoming;\r\n        gladiators[owner].stateTransitionBlock = block.number + spawnTime;\r\n        gladiators[owner].x = x;\r\n        gladiators[owner].y = y;\r\n        gladiators[owner].coins = 1;\r\n        \r\n        tiles[x][y].gladiator = owner;\r\n    }\r\n    \r\n    function despawnGladiatorAndAwardCoins(address owner)\r\n    internal {\r\n        owner.transfer(gladiators[owner].coins * coinValue);\r\n        \r\n        gladiators[owner].state = gladiate.GladiatorState.Null;\r\n    }\r\n    \r\n    function addCoins(uint8 x, uint8 y, uint amount)\r\n    internal {\r\n        tiles[x][y].coins += amount;\r\n    }\r\n    \r\n    function throwIn()\r\n    external\r\n    payable \r\n    returns (bool) {\r\n        require(gladiators[msg.sender].state == gladiate.GladiatorState.Null);\r\n        require(msg.value == coinValue);\r\n        \r\n        uint8 lastX;\r\n        uint8 lastY;\r\n        for (uint8 i=0; i<3; i++) {\r\n            uint8 x = pseudoRandomUint8(10);\r\n            uint8 y = pseudoRandomUint8(10);\r\n            lastX = x;\r\n            lastY = y;\r\n            \r\n            if (tiles[x][y].gladiator == 0x0) {\r\n                startGladiatorWithCoin(x, y, msg.sender);\r\n                return true;\r\n            }\r\n        }\r\n        //Couldn't find a place for the gladiator. Let's take the money anyway and put it in the Arena.\r\n        //Ether is already in the contract unless we revert, so just have to put a coin somewhere\r\n        addCoins(lastX, lastY, 1);\r\n        return false;\r\n    }\r\n    \r\n    function activateGladiator(address who)\r\n    external\r\n    gladiatorExists(who)\r\n    gladiatorInState(who, gladiate.GladiatorState.Incoming) {\r\n        require(gladiators[who].stateTransitionBlock <= block.number);\r\n        \r\n        gladiators[who].state = gladiate.GladiatorState.Active;\r\n        gladiators[who].stateTransitionBlock = (uint(0) - 1);//max int\r\n    }\r\n    \r\n    function imOut()\r\n    external\r\n    gladiatorInState(msg.sender, gladiate.GladiatorState.Active) {\r\n        gladiators[msg.sender].state = gladiate.GladiatorState.Outgoing;\r\n        gladiators[msg.sender].stateTransitionBlock = block.number + despawnTime;\r\n    }\r\n    \r\n    function getOut()\r\n    external\r\n    gladiatorInState(msg.sender, gladiate.GladiatorState.Outgoing) {\r\n        require(gladiators[msg.sender].stateTransitionBlock <= block.number);\r\n        \r\n        despawnGladiatorAndAwardCoins(msg.sender);\r\n    }\r\n    \r\n    function nextBlock() \r\n    public {\r\n        gladiators[0x0].coins ++;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"coinValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gladiators\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"stateTransitionBlock\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"},{\"name\":\"weapon\",\"type\":\"uint8\"},{\"name\":\"coins\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"throwIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"imOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"activateGladiator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emperor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Arena","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f07dd876038d50f412be620afe79099232944b1e0090b93b4c410e7db7655944"}]}