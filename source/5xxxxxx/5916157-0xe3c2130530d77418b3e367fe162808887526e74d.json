{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/StakeInterface.sol\r\n\r\ncontract StakeInterface {\r\n  function hasStake(address _address) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/MainframeStake.sol\r\n\r\ncontract MainframeStake is Ownable, StakeInterface {\r\n  using SafeMath for uint256;\r\n\r\n  ERC20 token;\r\n  uint256 public arrayLimit = 200;\r\n  uint256 public totalDepositBalance;\r\n  uint256 public requiredStake;\r\n  mapping (address => uint256) public balances;\r\n\r\n  struct Staker {\r\n    uint256 stakedAmount;\r\n    address stakerAddress;\r\n  }\r\n\r\n  mapping (address => Staker) public whitelist; // map of whitelisted addresses for efficient hasStaked check\r\n\r\n  constructor(address tokenAddress) public {\r\n    token = ERC20(tokenAddress);\r\n    requiredStake = 1 ether; // ether = 10^18\r\n  }\r\n\r\n  /**\r\n  * @dev Staking MFT for a node address\r\n  * @param whitelistAddress representing the address of the node you want to stake for\r\n  */\r\n\r\n  function stake(address whitelistAddress) external returns (bool success) {\r\n    require(whitelist[whitelistAddress].stakerAddress == 0x0);\r\n\r\n    whitelist[whitelistAddress].stakerAddress = msg.sender;\r\n    whitelist[whitelistAddress].stakedAmount = requiredStake;\r\n\r\n    deposit(msg.sender, requiredStake);\r\n    emit Staked(msg.sender, whitelistAddress);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Unstake a staked node address, will remove from whitelist and refund stake\r\n  * @param whitelistAddress representing the staked node address\r\n  */\r\n\r\n  function unstake(address whitelistAddress) external {\r\n    require(whitelist[whitelistAddress].stakerAddress == msg.sender);\r\n\r\n    uint256 stakedAmount = whitelist[whitelistAddress].stakedAmount;\r\n    delete whitelist[whitelistAddress];\r\n\r\n    withdraw(msg.sender, stakedAmount);\r\n    emit Unstaked(msg.sender, whitelistAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev Deposit stake amount\r\n  * @param fromAddress representing the address to deposit from\r\n  * @param depositAmount representing amount being deposited\r\n  */\r\n\r\n  function deposit(address fromAddress, uint256 depositAmount) private returns (bool success) {\r\n    token.transferFrom(fromAddress, this, depositAmount);\r\n    balances[fromAddress] = balances[fromAddress].add(depositAmount);\r\n    totalDepositBalance = totalDepositBalance.add(depositAmount);\r\n    emit Deposit(fromAddress, depositAmount, balances[fromAddress]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw funds after unstaking\r\n  * @param toAddress representing the stakers address to withdraw to\r\n  * @param withdrawAmount representing stake amount being withdrawn\r\n  */\r\n\r\n  function withdraw(address toAddress, uint256 withdrawAmount) private returns (bool success) {\r\n    require(balances[toAddress] >= withdrawAmount);\r\n    token.transfer(toAddress, withdrawAmount);\r\n    balances[toAddress] = balances[toAddress].sub(withdrawAmount);\r\n    totalDepositBalance = totalDepositBalance.sub(withdrawAmount);\r\n    emit Withdrawal(toAddress, withdrawAmount, balances[toAddress]);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _address) external view returns (uint256 balance) {\r\n    return balances[_address];\r\n  }\r\n\r\n  function totalStaked() external view returns (uint256) {\r\n    return totalDepositBalance;\r\n  }\r\n\r\n  function hasStake(address _address) external view returns (bool) {\r\n    return whitelist[_address].stakedAmount > 0;\r\n  }\r\n\r\n  function requiredStake() external view returns (uint256) {\r\n    return requiredStake;\r\n  }\r\n\r\n  function setRequiredStake(uint256 value) external onlyOwner {\r\n    requiredStake = value;\r\n  }\r\n\r\n  function setArrayLimit(uint256 newLimit) external onlyOwner {\r\n    arrayLimit = newLimit;\r\n  }\r\n\r\n  function refundBalances(address[] addresses) external onlyOwner {\r\n    require(addresses.length <= arrayLimit);\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      address _address = addresses[i];\r\n      require(balances[_address] > 0);\r\n      token.transfer(_address, balances[_address]);\r\n      totalDepositBalance = totalDepositBalance.sub(balances[_address]);\r\n      emit RefundedBalance(_address, balances[_address]);\r\n      balances[_address] = 0;\r\n    }\r\n  }\r\n\r\n  function emergencyERC20Drain(ERC20 _token) external onlyOwner {\r\n    // owner can drain tokens that are sent here by mistake\r\n    uint256 drainAmount;\r\n    if (address(_token) == address(token)) {\r\n      drainAmount = _token.balanceOf(this).sub(totalDepositBalance);\r\n    } else {\r\n      drainAmount = _token.balanceOf(this);\r\n    }\r\n    _token.transfer(owner, drainAmount);\r\n  }\r\n\r\n  function destroy() external onlyOwner {\r\n    require(token.balanceOf(this) == 0);\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  event Staked(address indexed owner, address whitelistAddress);\r\n  event Unstaked(address indexed owner, address whitelistAddress);\r\n  event Deposit(address indexed _address, uint256 depositAmount, uint256 balance);\r\n  event Withdrawal(address indexed _address, uint256 withdrawAmount, uint256 balance);\r\n  event RefundedBalance(address indexed _address, uint256 refundAmount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"requiredStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"name\":\"stakerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRequiredStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arrayLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"refundBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDepositBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setArrayLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MainframeStake","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000df2c7238198ad8b389666574f2d8bc411a4b7428","Library":"","SwarmSource":"bzzr://449254353d9b51d6a761303dc1ebceb4972056d43beb9244fdb44c367f6c1d49"}]}