{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19; //\r\n\r\n// EtherVillains.co\r\n\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract EtherVillains is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new villain comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"EtherVillains\"; //\r\n  string public constant SYMBOL = \"EVIL\"; //\r\n\r\n  uint256 public precision = 1000000000000; //0.000001 Eth\r\n\r\n  uint256 private zapPrice =  0.001 ether;\r\n  uint256 private pinchPrice =  0.002 ether;\r\n  uint256 private guardPrice =  0.002 ether;\r\n\r\n  uint256 private pinchPercentageReturn = 20; // how much a flip is worth when a villain is flipped.\r\n\r\n  uint256 private defaultStartingPrice = 0.001 ether;\r\n  uint256 private firstStepLimit =  0.05 ether;\r\n  uint256 private secondStepLimit = 0.5 ether;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from villain IDs to the address that owns them. All villians have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public villainIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from Villains to an address that has been approved to call\r\n  ///  transferFrom(). Each Villain can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public villainIndexToApproved;\r\n\r\n  // @dev A mapping from Villains to the price of the token.\r\n  mapping (uint256 => uint256) private villainIndexToPrice;\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n\r\n  /*** DATATYPES ***/\r\n  struct Villain {\r\n    uint256 id; // needed for gnarly front end\r\n    string name;\r\n    uint256 class; // 0 = Zapper , 1 = Pincher , 2 = Guard\r\n    uint256 level; // 0 for Zapper, 1 - 5 for Pincher, Guard - representing the max active pinches or guards\r\n    uint256 numSkillActive; // the current number of active skill implementations (pinches or guards)\r\n    uint256 state; // 0 = normal , 1 = zapped , 2 = pinched , 3 = guarded\r\n    uint256 zappedExipryTime; // if this villain was disarmed, when does it expire\r\n    uint256 affectedByToken; // token that has affected this token (zapped, pinched, guarded)\r\n    uint256 buyPrice; // the price at which this villain was purchased\r\n  }\r\n\r\n  Villain[] private villains;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function EtherVillains() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    villainIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new Villain with the given name.\r\n  function createVillain(string _name, uint256 _startPrice, uint256 _class, uint256 _level) public onlyCLevel {\r\n    _createVillain(_name, address(this), _startPrice,_class,_level);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific villain.\r\n  /// @param _tokenId The tokenId of the villain of interest.\r\n  function getVillain(uint256 _tokenId) public view returns (\r\n    uint256 id,\r\n    string villainName,\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    uint256 class,\r\n    uint256 level,\r\n    uint256 numSkillActive,\r\n    uint256 state,\r\n    uint256 zappedExipryTime,\r\n    uint256 buyPrice,\r\n    uint256 nextPrice,\r\n    uint256 affectedByToken\r\n  ) {\r\n    id = _tokenId;\r\n    Villain storage villain = villains[_tokenId];\r\n    villainName = villain.name;\r\n    sellingPrice =villainIndexToPrice[_tokenId];\r\n    owner = villainIndexToOwner[_tokenId];\r\n    class = villain.class;\r\n    level = villain.level;\r\n    numSkillActive = villain.numSkillActive;\r\n    state = villain.state;\r\n    if (villain.state==1 && now>villain.zappedExipryTime){\r\n        state=0; // time expired so say they are armed\r\n    }\r\n    zappedExipryTime=villain.zappedExipryTime;\r\n    buyPrice=villain.buyPrice;\r\n    nextPrice=calculateNewPrice(_tokenId);\r\n    affectedByToken=villain.affectedByToken;\r\n  }\r\n\r\n  /// zap a villain in preparation for a pinch\r\n  function zapVillain(uint256 _victim  , uint256 _zapper) public payable returns (bool){\r\n    address villanOwner = villainIndexToOwner[_victim];\r\n    require(msg.sender != villanOwner); // it doesn't make sense, but hey\r\n    require(villains[_zapper].class==0); // they must be a zapper class\r\n    require(msg.sender==villainIndexToOwner[_zapper]); // they must be a zapper owner\r\n\r\n    uint256 operationPrice = zapPrice;\r\n    // if the target sale price <0.01 then operation is free\r\n    if (villainIndexToPrice[_victim]<0.01 ether){\r\n      operationPrice=0;\r\n    }\r\n\r\n    // can be used to extend a zapped period\r\n    if (msg.value>=operationPrice && villains[_victim].state<2){\r\n        // zap villain\r\n        villains[_victim].state=1;\r\n        villains[_victim].zappedExipryTime = now + (villains[_zapper].level * 1 minutes);\r\n    }\r\n\r\n  }\r\n\r\n    /// pinch a villain\r\n  function pinchVillain(uint256 _victim, uint256 _pincher) public payable returns (bool){\r\n    address victimOwner = villainIndexToOwner[_victim];\r\n    require(msg.sender != victimOwner); // it doesn't make sense, but hey\r\n    require(msg.sender==villainIndexToOwner[_pincher]);\r\n    require(villains[_pincher].class==1); // they must be a pincher\r\n    require(villains[_pincher].numSkillActive<villains[_pincher].level);\r\n\r\n    uint256 operationPrice = pinchPrice;\r\n    // if the target sale price <0.01 then operation is free\r\n    if (villainIndexToPrice[_victim]<0.01 ether){\r\n      operationPrice=0;\r\n    }\r\n\r\n    // 0 = normal , 1 = zapped , 2 = pinched\r\n    // must be inside the zapped window\r\n    if (msg.value>=operationPrice && villains[_victim].state==1 && now< villains[_victim].zappedExipryTime){\r\n        // squeeze\r\n        villains[_victim].state=2; // squeezed\r\n        villains[_victim].affectedByToken=_pincher;\r\n        villains[_pincher].numSkillActive++;\r\n    }\r\n  }\r\n\r\n  /// guard a villain\r\n  function guardVillain(uint256 _target, uint256 _guard) public payable returns (bool){\r\n    require(msg.sender==villainIndexToOwner[_guard]); // sender must own this token\r\n    require(villains[_guard].numSkillActive<villains[_guard].level);\r\n\r\n    uint256 operationPrice = guardPrice;\r\n    // if the target sale price <0.01 then operation is free\r\n    if (villainIndexToPrice[_target]<0.01 ether){\r\n      operationPrice=0;\r\n    }\r\n\r\n    // 0 = normal , 1 = zapped , 2 = pinched, 3 = guarded\r\n    if (msg.value>=operationPrice && villains[_target].state<2){\r\n        // guard this villain\r\n        villains[_target].state=3;\r\n        villains[_target].affectedByToken=_guard;\r\n        villains[_guard].numSkillActive++;\r\n    }\r\n  }\r\n\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = villainIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n\r\n\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = villainIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = villainIndexToPrice[_tokenId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = roundIt(uint256(SafeMath.div(SafeMath.mul(sellingPrice, 93), 100))); // taking 7% for the house before any pinches?\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n\r\n    // HERE'S THE FLIPPING STRATEGY\r\n\r\n    villainIndexToPrice[_tokenId]  = calculateNewPrice(_tokenId);\r\n\r\n\r\n     // we check to see if there is a pinch on this villain\r\n     // if there is, then transfer the pinch percentage to the owner of the pinch token\r\n     if (villains[_tokenId].state==2 && villains[_tokenId].affectedByToken!=0){\r\n         uint256 profit = sellingPrice - villains[_tokenId].buyPrice;\r\n         uint256 pinchPayment = roundIt(SafeMath.mul(SafeMath.div(profit,100),pinchPercentageReturn));\r\n\r\n         // release on of this villans pinch capabilitiesl\r\n         address pincherTokenOwner = villainIndexToOwner[villains[_tokenId].affectedByToken];\r\n         pincherTokenOwner.transfer(pinchPayment);\r\n         payment = SafeMath.sub(payment,pinchPayment); // subtract the pinch fees\r\n     }\r\n\r\n     // free the villan of any pinches or guards as part of this purpose\r\n     if (villains[villains[_tokenId].affectedByToken].numSkillActive>0){\r\n        villains[villains[_tokenId].affectedByToken].numSkillActive--; // reset the pincher or guard affected count\r\n     }\r\n\r\n     villains[_tokenId].state=0;\r\n     villains[_tokenId].affectedByToken=0;\r\n     villains[_tokenId].buyPrice=sellingPrice;\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.08)\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, villainIndexToPrice[_tokenId], oldOwner, newOwner, villains[_tokenId].name);\r\n\r\n    msg.sender.transfer(purchaseExcess); // return any additional amount\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return villainIndexToPrice[_tokenId];\r\n  }\r\n\r\n  function nextPrice(uint256 _tokenId) public view returns (uint256 nPrice) {\r\n    return calculateNewPrice(_tokenId);\r\n  }\r\n\r\n\r\n//(note: hard coded value appreciation is 2X from a contract price of 0 ETH to 0.05 ETH, 1.2X from 0.05 to 0.5 and 1.15X from 0.5 ETH and up).\r\n\r\n\r\n function calculateNewPrice(uint256 _tokenId) internal view returns (uint256 price){\r\n   uint256 sellingPrice = villainIndexToPrice[_tokenId];\r\n   uint256 newPrice;\r\n   // Update prices\r\n   if (sellingPrice < firstStepLimit) {\r\n     // first stage\r\n    newPrice = roundIt(SafeMath.mul(sellingPrice, 2));\r\n   } else if (sellingPrice < secondStepLimit) {\r\n     // second stage\r\n     newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 120), 100));\r\n   } else {\r\n     // third stage\r\n     newPrice= roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 115), 100));\r\n   }\r\n   return newPrice;\r\n\r\n }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = villainIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose tokens we are interested in.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalVillains = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 villainId;\r\n      for (villainId = 0; villainId <= totalVillains; villainId++) {\r\n        if (villainIndexToOwner[villainId] == _owner) {\r\n          result[resultIndex] = villainId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return villains.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return villainIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n\r\n\r\n  /// For creating Villains\r\n  function _createVillain(string _name, address _owner, uint256 _price, uint256 _class, uint256 _level) private {\r\n\r\n    Villain memory _villain = Villain({\r\n      name: _name,\r\n      class: _class,\r\n      level: _level,\r\n      numSkillActive: 0,\r\n      state: 0,\r\n      zappedExipryTime: 0,\r\n      affectedByToken: 0,\r\n      buyPrice: 0,\r\n      id: villains.length-1\r\n    });\r\n    uint256 newVillainId = villains.push(_villain) - 1;\r\n    villains[newVillainId].id=newVillainId;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newVillainId == uint256(uint32(newVillainId)));\r\n\r\n    Birth(newVillainId, _name, _owner);\r\n\r\n    villainIndexToPrice[newVillainId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newVillainId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == villainIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Villain to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of villains is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    villainIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new villains _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete villainIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n    // utility to round to the game precision\r\n    function roundIt(uint256 amount) internal constant returns (uint256)\r\n    {\r\n        // round down to correct preicision\r\n        uint256 result = (amount/precision)*precision;\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"nPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_victim\",\"type\":\"uint256\"},{\"name\":\"_zapper\",\"type\":\"uint256\"}],\"name\":\"zapVillain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"createVillain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"villainIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getVillain\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"villainName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"class\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"numSkillActive\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"zappedExipryTime\",\"type\":\"uint256\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"affectedByToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_victim\",\"type\":\"uint256\"},{\"name\":\"_pincher\",\"type\":\"uint256\"}],\"name\":\"pinchVillain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"uint256\"},{\"name\":\"_guard\",\"type\":\"uint256\"}],\"name\":\"guardVillain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"villainIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherVillains","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7893e54c2860304fc7336be31b3ea7cb08b8d5d320f09666d65b354a93b40fa5"}]}