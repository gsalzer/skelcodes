{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n\r\ncontract TeaVoucher {\r\n\r\n  mapping(address => uint256) balances;\r\n \r\n  mapping(address => mapping (address => uint256)) allowed;\r\n  \r\n  \r\n  using SafeMath for uint256;\r\n  \r\n  \r\n  address public owner;\r\n  \r\n  uint256 public _totalSupply = 36936;\r\n    uint256 public totalSupply = 36936;\r\n    string public constant symbol = \"TEAVO\";\r\n    string public constant name = \"Tea Voucher\";\r\n    uint8 public constant decimals = 0;\r\n    \r\n\r\n    uint256 public constant RATE = 200;\r\n   \r\n  function TeaVoucher(\r\n        uint256 _initialAmount,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol\r\n        ) {\r\n        balances[msg.sender] = 36936;               // Give the creator all initial tokens\r\n        totalSupply = _initialAmount;                 // Update total supply\r\n       }\r\n        \r\n         function () payable {\r\n        createTokens();\r\n        throw;\r\n    }\r\n        function createTokens() payable {\r\n        require(msg.value > 0);\r\n        \r\n        uint256 tokens = msg.value.add(RATE);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        _totalSupply = _totalSupply.add(tokens);\r\n        \r\n        owner.transfer(msg.value);\r\n    }\r\n  \r\n  function totalSupply() constant returns (uint256 theTotalSupply) {\r\n    // Because our function signature\r\n    // states that the returning variable\r\n    // is \"theTotalSupply\", we'll just set that variable\r\n    // to the value of the instance variable \"_totalSupply\"\r\n    // and return it\r\n    theTotalSupply = _totalSupply;\r\n    return theTotalSupply;\r\n  }\r\n  \r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  function approve(address _spender, uint256 _amount) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    // Fire the event \"Approval\" to execute any logic\r\n    // that was listening to it\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n  \r\n  // Note: This function returns a boolean value\r\n  //       indicating whether the transfer was successful\r\n  function transfer(address _to, uint256 _amount) returns (bool success) {\r\n    // If the sender has sufficient funds to send\r\n    // and the amount is not zero, then send to\r\n    // the given address\r\n    if (balances[msg.sender] >= _amount \r\n      && _amount > 0\r\n      && balances[_to] + _amount > balances[_to]) {\r\n      balances[msg.sender] -= _amount;\r\n      balances[_to] += _amount;\r\n      // Fire a transfer event for any\r\n      // logic that's listening\r\n      Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n   }\r\n   \r\n   function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n    if (balances[_from] >= _amount\r\n      && allowed[_from][msg.sender] >= _amount\r\n      && _amount > 0\r\n      && balances[_to] + _amount > balances[_to]) {\r\n    balances[_from] -= _amount;\r\n    balances[_to] += _amount;\r\n    Transfer(_from, _to, _amount);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"theTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TeaVoucher","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000090480000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ba19a51c619e715281c85e5a73936bae281948556206c862d72f24876a6f88f7"}]}