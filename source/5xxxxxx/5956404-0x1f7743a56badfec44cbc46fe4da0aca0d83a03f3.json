{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract Exhibition {\r\n    address private organizer;\r\n    address private winnerAddress;\r\n    bool private isWinnerSelected = false;\r\n    struct Participant {\r\n        string name;\r\n        string phone;\r\n        string email;\r\n    }\r\n    function Exhibition() public {\r\n        organizer = msg.sender;\r\n    }\r\n    mapping(address => Participant) private participants;\r\n    address[] private participantList;\r\n    function registration(string _name, string _phone, string _email) public payable {\r\n        require(msg.value > .00001 ether);\r\n        require(!isWinnerSelected);\r\n        Participant storage participant = participants[msg.sender];\r\n        participant.name = _name;\r\n        participant.phone = _phone;\r\n        participant.email = _email;\r\n        participantList.push(msg.sender);\r\n        sendAmount(msg.value, organizer);\r\n    }\r\n    function pickWinner() public {\r\n        // Check the sender address should be equal to organizer since the organizer can only pick the winner\r\n        require(msg.sender == organizer);\r\n\r\n        // Randamloy select one participant among all the participants.\r\n        uint index = random() % participantList.length;\r\n\r\n        // Assign winner participant address\r\n        winnerAddress = participantList[index];\r\n\r\n        // Change isWinnerSelected to 'true'\r\n        isWinnerSelected = true;\r\n    }\r\n\r\n    // This function is used to send ether to winner address\r\n    function transferAmount() public payable {\r\n        // check ether value should be greater than '.0001'\r\n        require(msg.value > .0001 ether);\r\n        // Check the sender address should be equal to organizer address\r\n        // since the organizer can only send ether to winner\r\n        require(msg.sender == organizer);\r\n        // check isWinnerSelected should be 'true'\r\n        require(isWinnerSelected);\r\n        // send ether to winner\r\n        sendAmount(msg.value, winnerAddress);\r\n    }\r\n\r\n    // This function is used to return isWinnerSelected\r\n    function getIsWinnerSelected() public view returns (bool) {\r\n        return isWinnerSelected;\r\n    }\r\n\r\n    // This function is used to return participantList\r\n    function getParticipants() public view returns (address[]) {\r\n        return participantList;\r\n    }\r\n\r\n    // This function is used to return winner name\r\n    function getWinner() public view returns (string) {\r\n        // check isWinnerSelected should be 'true'\r\n        require(isWinnerSelected);\r\n        return participants[winnerAddress].name;\r\n    }\r\n\r\n    // This function is used to return organizer\r\n    function getOrganizer() public view returns (address) {\r\n        return organizer;\r\n    }\r\n\r\n    // This function is used to transfer ether to particular address\r\n    function sendAmount(uint _amount, address _account) private {\r\n        _account.transfer(_amount);\r\n    }\r\n\r\n    // This function is used to return one number randomly from participantList\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(block.difficulty, now, participantList));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"},{\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsWinnerSelected\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrganizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Exhibition","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://99d10a694b2e7fbeba442e231fda284406d045efc9bc8d17f7b1c199f2b235bf"}]}