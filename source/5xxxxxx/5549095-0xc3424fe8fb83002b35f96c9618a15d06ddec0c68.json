{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------------------------\r\ncontract ETHButton {\r\n    using SafeMath for uint256;\r\n    \r\n    address private owner;\r\n    \r\n    // game data\r\n    uint256 private constant CLICKERS_SIZE = 30;\r\n    uint256 private constant EXPIRE_DELAY = 3600;\r\n    address[CLICKERS_SIZE] private clickers;\r\n    uint256 private clickPrice;\r\n    uint256 private clikerIndex;\r\n    uint256 private expireTime;\r\n    uint256 private totalPot;\r\n    uint256 private devFund;\r\n    \r\n    // statistics\r\n    mapping(address=>uint256) private playerClickCount;\r\n    mapping(address=>uint256) private playerSecToTimeout;\r\n    uint256 private totalClicks;\r\n    \r\n    // index to address mapping\r\n    mapping(uint256=>address) private playerIndexes;\r\n    uint256 private totalPlayers;\r\n    \r\n    // referal system\r\n    mapping(address=>uint256) private playerReferedByCount;\r\n    mapping(address=>uint256) private playerReferedMoneyGain;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function ETHButton() public {\r\n        owner = msg.sender;\r\n   \r\n        clickPrice = 0.01 ether;\r\n        \r\n        expireTime = block.timestamp + 360000;\r\n        \r\n        totalPot = 0;\r\n        devFund = 0;\r\n        clikerIndex = 0;\r\n        totalPlayers = 0;\r\n    }\r\n    \r\n    //--------------------------------------------------------------------------\r\n    // GET functions \r\n    //--------------------------------------------------------------------------\r\n    function GetTotalPlayers() external view returns(uint256)\r\n    {\r\n        return totalPlayers;\r\n    }\r\n    \r\n    function GetTotalClicks() external view returns(uint256)\r\n    {\r\n        return totalClicks;\r\n    }\r\n    \r\n    function GetTotalPot() external view returns(uint256)\r\n    {\r\n        return totalPot;\r\n    }\r\n    \r\n    function GetExpireTime() external view returns(uint256)\r\n    {\r\n        return expireTime;\r\n    }\r\n    \r\n    function GetClickPrice() external view returns(uint256)\r\n    {\r\n        return clickPrice;\r\n    }\r\n    \r\n    function GetPlayerAt(uint256 idx) external view returns (address)\r\n    {\r\n        require(idx < totalPlayers);\r\n        \r\n        return playerIndexes[idx];\r\n    }\r\n    \r\n    function GetPlayerDataAt(address player) external view returns(uint256 _playerClickCount, uint256 _playerSecToTimeout, \r\n    uint256 _referCount, uint256 _referalRevenue)\r\n    {\r\n        _playerClickCount = playerClickCount[player];\r\n        _playerSecToTimeout = playerSecToTimeout[player];\r\n        _referCount = playerReferedByCount[player];\r\n        _referalRevenue = playerReferedMoneyGain[player];\r\n    }\r\n    \r\n    function GetWinnerAt(uint256 idx) external view returns (address _addr)\r\n    {\r\n        require(idx < CLICKERS_SIZE);\r\n        \r\n        if(idx < clikerIndex)\r\n            _addr = clickers[clikerIndex-(idx+1)];\r\n        else\r\n            _addr = clickers[(clikerIndex + CLICKERS_SIZE) - (idx+1)];\r\n    }\r\n    \r\n    function GetWinners() external view returns (address[CLICKERS_SIZE] _addr)\r\n    {\r\n        for(uint256 idx = 0; idx < CLICKERS_SIZE; ++idx)\r\n        {\r\n            if(idx < clikerIndex)\r\n                _addr[idx] = clickers[clikerIndex-(idx+1)];\r\n            else\r\n                _addr[idx] = clickers[(clikerIndex + CLICKERS_SIZE) - (idx+1)];\r\n        }\r\n    }\r\n    \r\n    //--------------------------------------------------------------------------\r\n    // Game Mechanics\r\n    //--------------------------------------------------------------------------\r\n    function ButtonClicked(address referee) external payable\r\n    {\r\n        require(msg.value >= clickPrice);\r\n        require(expireTime >= block.timestamp);\r\n        require(referee != msg.sender);\r\n        \r\n        if(playerClickCount[msg.sender] == 0)\r\n        {\r\n            playerIndexes[totalPlayers] = msg.sender;\r\n            totalPlayers += 1;\r\n        }\r\n        \r\n        totalClicks += 1;\r\n        playerClickCount[msg.sender] += 1;\r\n        if(playerSecToTimeout[msg.sender] == 0 || playerSecToTimeout[msg.sender] > (expireTime - block.timestamp))\r\n            playerSecToTimeout[msg.sender] = expireTime - block.timestamp;\r\n        \r\n        expireTime = block.timestamp + EXPIRE_DELAY;\r\n        \r\n        address refAddr = referee;\r\n        \r\n        // a player who never played cannot be referenced\r\n        if(refAddr == 0 || playerClickCount[referee] == 0)\r\n            refAddr = owner;\r\n            \r\n        if(totalClicks > CLICKERS_SIZE)\r\n        {\r\n            totalPot = totalPot.add(((msg.value.mul(8)) / 10));\r\n            \r\n            uint256 fee = msg.value / 10;\r\n            devFund += fee;\r\n            \r\n            // don't try to hack the system with invalid addresses...\r\n            if(!refAddr.send(fee))\r\n            {\r\n                // if I write \"totalPot\" here everybody will exploit \r\n                // the referal system with invalid address\r\n                devFund += fee;\r\n            } else\r\n            {\r\n                playerReferedByCount[refAddr] += 1;\r\n                playerReferedMoneyGain[refAddr] += fee;\r\n            }\r\n        } else\r\n        {\r\n            // until CLICKERS_SIZE total clicks don't take dev funds, so the first clikcers\r\n            // don't risk 20% negative interest\r\n            totalPot += msg.value;\r\n        }\r\n        \r\n        clickers[clikerIndex] = msg.sender;\r\n        clikerIndex += 1;\r\n       \r\n        if(clikerIndex >= CLICKERS_SIZE)\r\n        {\r\n            clickPrice += 0.01 ether;\r\n            clikerIndex = 0;\r\n        }\r\n    }\r\n    \r\n    function DistributeButtonIncome() external\r\n    {\r\n        require(expireTime < block.timestamp);\r\n        require(totalPot > 0);\r\n        \r\n        uint256 reward = totalPot / CLICKERS_SIZE;\r\n        \r\n        for(uint256 i = 0; i < CLICKERS_SIZE; ++i)\r\n        {\r\n            if(!clickers[i].send(reward))\r\n            {\r\n                // oops\r\n            }\r\n        }\r\n        \r\n        totalPot = 0;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // Funds menagement\r\n    //--------------------------------------------------------------------------\r\n    function WithdrawDevFunds() external\r\n    {\r\n        require(msg.sender == owner);\r\n\r\n        if(owner.send(devFund))\r\n        {\r\n            devFund = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetClickPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DistributeButtonIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTotalPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetWinnerAt\",\"outputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetExpireTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTotalPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawDevFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"ButtonClicked\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetWinners\",\"outputs\":[{\"name\":\"_addr\",\"type\":\"address[30]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"GetPlayerDataAt\",\"outputs\":[{\"name\":\"_playerClickCount\",\"type\":\"uint256\"},{\"name\":\"_playerSecToTimeout\",\"type\":\"uint256\"},{\"name\":\"_referCount\",\"type\":\"uint256\"},{\"name\":\"_referalRevenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetPlayerAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTotalClicks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ETHButton","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a5250042ee3b10be62836787335905cbf63633044ba8a2a7279283982426f353"}]}