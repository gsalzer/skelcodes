{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Interface {\r\n    function name() public constant returns (string);\r\n    function symbol() public constant returns (string);\r\n    function decimals() public constant returns (uint8);\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address _owner) public constant returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\r\n    function approve(address _spender, uint _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public constant returns (uint);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract WeduToken is ERC20Interface {\r\n    /**\r\n     * @dev Constant parameters\r\n     */\r\n    string private TOKEN_NAME;\r\n    string private TOKEN_SYMBOL;\r\n    uint8 private DECIMAL;\r\n    uint private WEDU_UNIT;\r\n\r\n    /**\r\n     * @dev Management parameters\r\n     */\r\n    address owner;\r\n    mapping(address => bool) internal blackList;\r\n\r\n    /**\r\n     * @dev Balance parameters\r\n     */\r\n    uint private totalSupplyValue;\r\n    struct BalanceType {\r\n        uint locked;\r\n        uint unlocked;\r\n    }\r\n\r\n    mapping(address => mapping (address => uint)) internal allowed;\r\n    mapping(address => BalanceType) internal balanceValue;\r\n\r\n\r\n    /**\r\n     * @dev Modifier, Only owner can execute the function\r\n     */\r\n    modifier onlyOwner() { require(owner == msg.sender, \"Not a owner\"); _;}\r\n\r\n    /**\r\n     * @dev Event, called when the number of token changed\r\n     */\r\n    event ChangeNumberofToken(uint oldValue, uint newValue);\r\n\r\n    /**\r\n     * @dev Constructor, Initialize the name, symbol, etc.\r\n     */\r\n    constructor() public {\r\n        TOKEN_NAME = \"Educo-op\";\r\n        TOKEN_SYMBOL = \"WEDU\";\r\n\r\n        DECIMAL = 18;\r\n        WEDU_UNIT = 1000000000000000000;\r\n        totalSupplyValue = 10000000000 * WEDU_UNIT;\r\n\r\n        owner = msg.sender;\r\n        balanceValue[owner].unlocked = totalSupplyValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Main info for WEDU token\r\n     */\r\n    function name() public constant returns (string){ return TOKEN_NAME; }\r\n    function symbol() public constant returns (string){ return TOKEN_SYMBOL; }\r\n    function decimals() public constant returns (uint8){ return DECIMAL; }\r\n    function totalSupply() public constant returns (uint){ return totalSupplyValue; }\r\n\r\n    /**\r\n     * @dev Balance info of WEDU token for each user\r\n     */\r\n    function balanceOf(address _user) public constant returns (uint){ return balanceValue[_user].unlocked+balanceValue[_user].locked; }\r\n    function balanceOfLocked(address _user) public constant returns (uint){ return balanceValue[_user].locked; }\r\n    function balanceOfUnlocked(address _user) public constant returns (uint){ return balanceValue[_user].unlocked; }\r\n\r\n    /**\r\n     * @dev Lock the WEDU token in users\r\n     * @param _who The user for locking WEDU token\r\n     * @param _value The amount of locking WEDU token\r\n     */\r\n    function lockBalance(address _who, uint _value) public onlyOwner {\r\n        // Check the unlocked balance of a user\r\n        require(_value <= balanceValue[_who].unlocked, \"Unsufficient balance\");\r\n\r\n        uint totalBalanceValue = balanceValue[_who].locked + balanceValue[_who].unlocked;\r\n\r\n        balanceValue[_who].unlocked -= _value;\r\n        balanceValue[_who].locked += _value;\r\n\r\n        assert(totalBalanceValue == balanceValue[_who].locked + balanceValue[_who].unlocked);\r\n    }\r\n\r\n    /**\r\n     * @dev Unlock the WEDU token in users\r\n     * @param _who The user for unlocking WEDU token\r\n     * @param _value The amount of unlocking WEDU token\r\n     */\r\n    function unlockBalance(address _who, uint _value) public onlyOwner {\r\n        // Check the locked balance of a user\r\n        require(_value <= balanceValue[_who].locked, \"Unsufficient balance\");\r\n\r\n        uint totalBalanceValue = balanceValue[_who].locked + balanceValue[_who].unlocked;\r\n\r\n        balanceValue[_who].locked -= _value;\r\n        balanceValue[_who].unlocked += _value;\r\n\r\n        assert(totalBalanceValue == balanceValue[_who].locked + balanceValue[_who].unlocked);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the WEDU token\r\n     * @param _from The user who will transmit WEDU token\r\n     * @param _to The user who will receive WEDU token\r\n     * @param _value The amount of WEDU token transmits to user\r\n     * @return True when the WEDU token transfer success\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool){\r\n        // Check the address\r\n        require(_from != address(0), \"Address is wrong\");\r\n        require(_from != owner, \"Owner uses the privateTransfer\");\r\n        require(_to != address(0), \"Address is wrong\");\r\n\r\n        // Check a user included in blacklist\r\n        require(!blackList[_from], \"Sender in blacklist\");\r\n        require(!blackList[_to], \"Receiver in blacklist\");\r\n\r\n        // Check the unlocked balance of a user\r\n        require(_value <= balanceValue[_from].unlocked, \"Unsufficient balance\");\r\n        require(balanceValue[_to].unlocked <= balanceValue[_to].unlocked + _value, \"Overflow\");\r\n\r\n        uint previousBalances = balanceValue[_from].unlocked + balanceValue[_to].unlocked;\r\n\r\n        balanceValue[_from].unlocked -= _value;\r\n        balanceValue[_to].unlocked += _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        assert(balanceValue[_from].unlocked + balanceValue[_to].unlocked == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool){\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Educo-op transfers the WEDU token to a user\r\n     * @param _to The user who will receive WEDU token\r\n     * @param _value The amount of WEDU token transmits to a user\r\n     * @return True when the WEDU token transfer success\r\n     */\r\n    function privateTransfer(address _to, uint _value) public onlyOwner returns (bool) {\r\n        // Check the address\r\n        require(_to != address(0), \"Address is wrong\");\r\n\r\n        // Account balance validation\r\n        require(_value <= balanceValue[owner].unlocked, \"Unsufficient balance\");\r\n        require(balanceValue[_to].unlocked <= balanceValue[_to].unlocked + _value, \"Overflow\");\r\n\r\n        uint previousBalances = balanceValue[owner].unlocked + balanceValue[_to].locked;\r\n\r\n        balanceValue[owner].unlocked -= _value;\r\n        balanceValue[_to].locked += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        assert(balanceValue[owner].unlocked + balanceValue[_to].locked == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Educo-op transfers the WEDU token to multiple users simultaneously\r\n     * @param _tos The users who will receive WEDU token\r\n     * @param _nums The number of users that will receive WEDU token\r\n     * @param _submitBalance The amount of WEDU token transmits to users\r\n     * @return True when the WEDU token transfer success to all users\r\n     */\r\n    function multipleTransfer(address[] _tos, uint _nums, uint _submitBalance) public onlyOwner returns (bool){\r\n        // Check the input parameters\r\n        require(_tos.length == _nums, \"Number of users who receives the token is not match\");\r\n        require(_submitBalance < 100000000 * WEDU_UNIT, \"Too high submit balance\");\r\n        require(_nums < 256, \"Two high number of users\");\r\n        require(_nums*_submitBalance <= balanceValue[owner].unlocked, \"Unsufficient balance\");\r\n\r\n        balanceValue[owner].unlocked -= (_nums*_submitBalance);\r\n        uint8 numIndex;\r\n        for(numIndex=0; numIndex < _nums; numIndex++){\r\n            require(balanceValue[_tos[numIndex]].unlocked == 0, \"Already user has token\");\r\n            require(_tos[numIndex] != address(0));\r\n            balanceValue[_tos[numIndex]].unlocked = _submitBalance;\r\n\r\n            emit Transfer(owner, _tos[numIndex], _submitBalance);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Receive the WEDU token from other user\r\n     * @param _from The users who will transmit WEDU token\r\n     * @param _to The users who will receive WEDU token\r\n     * @param _value The amount of WEDU token transmits to user\r\n     * @return True when the WEDU token transfer success\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool){\r\n        // Check the unlocked balance and allowed balance of a user\r\n        require(allowed[_from][msg.sender] <= balanceValue[_from].unlocked, \"Unsufficient allowed balance\");\r\n        require(_value <= allowed[_from][msg.sender], \"Unsufficient balance\");\r\n\r\n        allowed[_from][msg.sender] -= _value;\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the WEDU token transfer to other user\r\n     * @param _spender A user allowed to receive WEDU token\r\n     * @param _value The amount of WEDU token allowed to receive at a user\r\n     * @return True when the WEDU token successfully allowed\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool){\r\n        // Check the address\r\n        require(msg.sender != owner, \"Owner uses the privateTransfer\");\r\n        require(_spender != address(0), \"Address is wrong\");\r\n        require(_value <= balanceValue[msg.sender].unlocked, \"Unsufficient balance\");\r\n\r\n        // Check a user included in blacklist\r\n        require(!blackList[msg.sender], \"Sender in blacklist\");\r\n        require(!blackList[_spender], \"Receiver in blacklist\");\r\n\r\n        // Is really first Approve??\r\n        require(allowed[msg.sender][_spender] == 0, \"Already allowed token exists\");\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount of WEDU token that allowed to the user\r\n     * @param _owner A user who allowed WEDU token transmission\r\n     * @param _spender A user who allowed WEDU token reception\r\n     * @return The amount of WEDU token that allowed to the user\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint){\r\n        // Only the user who related with the token allowance can see the allowance value\r\n        require(msg.sender == _owner || msg.sender == _spender);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of WEDU token that allowed to the user\r\n     * @param _spender A user who allowed WEDU token reception\r\n     * @param _addedValue The amount of WEDU token for increasing\r\n     * @return True when the amount of allowed WEDU token successfully increases\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool){\r\n        // Check the address\r\n        require(_spender != address(0), \"Address is wrong\");\r\n        require(allowed[msg.sender][_spender] > 0, \"Not approved until yet\");\r\n\r\n        // Check a user included in blacklist\r\n        require(!blackList[msg.sender], \"Sender in blacklist\");\r\n        require(!blackList[_spender], \"Receiver in blacklist\");\r\n\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        require(_addedValue + oldValue <= balanceValue[msg.sender].unlocked, \"Unsufficient balance\");\r\n\r\n        allowed[msg.sender][_spender] = _addedValue + oldValue;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of WEDU token that allowed to the user\r\n     * @param _spender A user who allowed WEDU token reception\r\n     * @param _substractedValue The amount of WEDU token for decreasing\r\n     * @return True when the amount of allowed WEDU token successfully decreases\r\n     */\r\n    function decreaseApproval(address _spender, uint _substractedValue) public returns (bool){\r\n        // Check the address\r\n        require(_spender != address(0), \"Address is wrong\");\r\n        require(allowed[msg.sender][_spender] > 0, \"Not approved until yet\");\r\n\r\n        // Check a user included in blacklist\r\n        require(!blackList[msg.sender], \"Sender in blacklist\");\r\n        require(!blackList[_spender], \"Receiver in blacklist\");\r\n\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_substractedValue > oldValue){\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue - _substractedValue;\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add the blacklist member\r\n     * @param _who A user who will be blocked\r\n     */\r\n    function addBlackList(address _who) public onlyOwner {\r\n        require(!blackList[_who], \"Already, sender in blacklist\");\r\n        blackList[_who] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the blacklist member\r\n     * @param _who A user who will be unblocked\r\n     */\r\n    function removalBlackList(address _who) public onlyOwner {\r\n        require(blackList[_who], \"Sender does not included in blacklist\");\r\n        blackList[_who] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the total amount of WEDU token\r\n     * @param _value The amount of WEDU token for increasing\r\n     * @return True when the amount of total WEDU token successfully increases\r\n     */\r\n    function tokenIssue(uint _value) public onlyOwner returns (bool) {\r\n        require(totalSupplyValue <= totalSupplyValue + _value, \"Overflow\");\r\n        uint oldTokenNum = totalSupplyValue;\r\n\r\n        totalSupplyValue += _value;\r\n        balanceValue[owner].unlocked += _value;\r\n\r\n        emit ChangeNumberofToken(oldTokenNum, totalSupplyValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the total amount of WEDU token\r\n     * @param _value The amount of WEDU token for decreasing\r\n     * @return True when the amount of total WEDU token successfully decreases\r\n     */\r\n    function tokenBurn(uint _value) public onlyOwner returns (bool) {\r\n        require(_value <= balanceValue[owner].unlocked, \"Unsufficient balance\");\r\n        uint oldTokenNum = totalSupplyValue;\r\n\r\n        totalSupplyValue -= _value;\r\n        balanceValue[owner].unlocked -= _value;\r\n\r\n        emit ChangeNumberofToken(oldTokenNum, totalSupplyValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Migrate the owner of this contract\r\n     * @param _owner The user who will receive the manager authority\r\n     * @return The user who receivee the manager authority\r\n     */\r\n    function ownerMigration (address _owner) public onlyOwner returns (address) {\r\n        owner = _owner;\r\n        return owner;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Kill contract\r\n     */\r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unlockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownerMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"privateTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_substractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_nums\",\"type\":\"uint256\"},{\"name\":\"_submitBalance\",\"type\":\"uint256\"}],\"name\":\"multipleTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenIssue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removalBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ChangeNumberofToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WeduToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e5ee72c4162abb817a598ec28496f703967ade8c8cd6226fa8302c09b92fcf3"}]}