{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary Search {\r\n  function indexOf(uint32[] storage self, uint32 value) public view returns (uint32) {\r\n    for (uint32 i = 0; i < self.length; i++) {\r\n      if (self[i] == value) return i;\r\n    }\r\n    return uint32(- 1);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract PresidentElections {\r\n  address owner;\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Candidate {\r\n    uint32 id;\r\n    address owner;\r\n    uint256 votes;\r\n  }\r\n  uint end = 1521406800;\r\n  mapping(address => uint) votes;\r\n  mapping(uint32 => Candidate) candidates;\r\n  using Search for uint32[];\r\n  uint32[] candidate_ids;\r\n  uint constant price = 0.01 ether;\r\n  uint public create_price = 0.1 ether;\r\n  uint constant percent = 10;\r\n\r\n  enum Candidates {\r\n    NULL,\r\n    Baburin,\r\n    Grudinin,\r\n    Zhirinovsky,\r\n    Putin,\r\n    Sobchak,\r\n    Suraykin,\r\n    Titov,\r\n    Yavlinsky\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier isCandidate(uint32 candidate) {\r\n    require(candidates[candidate].id > 0);\r\n    _;\r\n  }\r\n\r\n  modifier isNotVoted() {\r\n    require(votes[msg.sender] == 0);\r\n    _;\r\n  }\r\n\r\n  modifier voteIsOn() {\r\n    require(now < end);\r\n    _;\r\n  }\r\n\r\n  function PresidentElections() public {\r\n    owner = msg.sender;\r\n    _add(uint32(Candidates.Baburin), owner);\r\n    _add(uint32(Candidates.Grudinin), owner);\r\n    _add(uint32(Candidates.Zhirinovsky), owner);\r\n    _add(uint32(Candidates.Putin), owner);\r\n    _add(uint32(Candidates.Sobchak), owner);\r\n    _add(uint32(Candidates.Suraykin), owner);\r\n    _add(uint32(Candidates.Titov), owner);\r\n    _add(uint32(Candidates.Yavlinsky), owner);\r\n  }\r\n\r\n  function _add(uint32 candidate, address sender) private {\r\n    require(candidates[candidate].id == 0);\r\n\r\n    candidates[candidate] = Candidate(candidate, sender, 0);\r\n    candidate_ids.push(candidate);\r\n  }\r\n\r\n  function isFinished() constant public returns (bool) {\r\n    return now > end;\r\n  }\r\n\r\n  function isVoted() constant public returns (bool) {\r\n    return votes[msg.sender] > 0;\r\n  }\r\n\r\n  function vote(uint32 candidate) public payable isCandidate(candidate) voteIsOn isNotVoted returns (bool) {\r\n    require(msg.value == price);\r\n\r\n    votes[msg.sender] = candidate;\r\n    candidates[candidate].votes += 1;\r\n\r\n    if( candidates[candidate].owner != owner ) {\r\n      owner.transfer(msg.value.mul(100 - percent).div(100));\r\n      candidates[candidate].owner.transfer(msg.value.mul(percent).div(100));\r\n    } else {\r\n      owner.transfer(msg.value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function add(uint32 candidate) public payable voteIsOn returns (bool) {\r\n    require(msg.value == create_price);\r\n\r\n    _add(candidate, msg.sender);\r\n\r\n    owner.transfer(msg.value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function getCandidates() public view returns (uint32[]) {\r\n    return candidate_ids;\r\n  }\r\n\r\n  function getVotes() public view returns (uint256[]) {\r\n    uint256[] memory v = new uint256[](candidate_ids.length);\r\n    for(uint i = 0; i < candidate_ids.length; i++ ) {\r\n      v[i] = candidates[candidate_ids[i]].votes;\r\n    }\r\n    return v;\r\n  }\r\n\r\n  function setCreatePrice(uint _price) public onlyOwner {\r\n    create_price = _price;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"create_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint32\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCreatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint32\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PresidentElections","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6bb4addd9563baaf81c812d4125f0d5889e2f629467aef947f4af21b1cf4128"}]}