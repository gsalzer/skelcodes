{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract SafeMath{\r\n\tfunction safeMul(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeDiv(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b > 0);\r\n\t\tuint c = a / b;\r\n\t\tassert(a == b * c + a % b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeSub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction safeAdd(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction assert(bool assertion) internal {\r\n\t\tif (!assertion) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Contract that defines administrative actions\r\ncontract admined {\r\n\r\n\t// Define adminitrator address\r\n\taddress public admin;\r\n\r\n\t// Entry function sets the admin as the sender\r\n\tfunction admined(){\r\n\t\tadmin = msg.sender;\r\n\t}\r\n\r\n\t// Check if the sender is the admin\r\n\tmodifier onlyAdmin(){\r\n\t\trequire(msg.sender == admin);\r\n\t\t_;\r\n\t}\r\n\r\n\t// Transfer the admin role to a new address\r\n\tfunction transferAdminship(address newAdmin) onlyAdmin {\r\n\t\tadmin = newAdmin;\r\n\t}\r\n}\r\n\r\n// Contract that creates the Token\r\ncontract Token is SafeMath {\r\n\r\n\t// Contract balance\r\n\tmapping (address => uint256) public balanceOf;\r\n\t// Token name\r\n\tstring public name = \"MoralityAI\";\r\n\t// Token symbol\r\n\tstring public symbol = \"Mo\";\r\n\t// Decimals to use\r\n\tuint8 public decimal = 18; \r\n\t// Total initial suppy\r\n\tuint256 public totalSupply = 1000000000000000000000000;\r\n\t// Transfer function interface\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// Token creation function\r\n\tfunction Token(){\r\n\t\t// set the balance of the creator to the initial supply\r\n\t\tbalanceOf[msg.sender] = totalSupply;\r\n\t}\r\n\r\n\t// Transfer function used to send tokens to an address\r\n\tfunction transfer(address _to, uint256 _value){\r\n\t\t// Check if the creator actually has the required balance\r\n\t\trequire(balanceOf[msg.sender] >= _value);\r\n\t\t// Check if the amount sent will not overflow\r\n\t\trequire(safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);\r\n\t\t// Substract tokens from the creator\r\n\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n\t\t// Add tokens to the transfer address\r\n\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n\t\t// Execute the transfer\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n}\r\n\r\n// Contract that creates a token which inherits\r\n// the administrator contract properties and token contract properties\r\ncontract MoralityAI is admined, Token{\r\n\r\n\t// Create the token\r\n\tfunction MoralityAI() Token(){\r\n\t\tadmin = msg.sender;\r\n\t\tbalanceOf[admin] = totalSupply;\r\n\t}\r\n\r\n\t// Minting function that can only be called by the admin\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyAdmin{\r\n\t\t// Increase the balance of the target address with the amount of minted tokens\r\n\t\tbalanceOf[target] = safeAdd(balanceOf[target], mintedAmount);\r\n\t\t// Increase the total supply of tokens\r\n\t\ttotalSupply = safeAdd(totalSupply, mintedAmount);\r\n\t\t// Transfer the amount to this contract\r\n\t\tTransfer(0, this, mintedAmount);\r\n\t\t// Then transfer the amount to the target address\r\n\t\tTransfer(this, target, mintedAmount);\r\n\t}\r\n\r\n\t// Toekn transfer function\r\n\tfunction transfer(address _to, uint256 _value) public{\r\n\t\t// Check if balance of the sender is not negative\r\n\t\trequire(balanceOf[msg.sender] > 0);\r\n\t\t// Check if balance of the sender is greater than or equal than the amount transfered\r\n\t\trequire(balanceOf[msg.sender] >= _value);\r\n\t\t// Check for overflow\r\n\t\trequire(safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);\r\n\r\n\t\t// Substract the amount of tokens from the creator\r\n\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n\t\t// And add the amount of tokens to the target address\r\n\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n\t\t// Execute the transfer\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MoralityAI","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d69dd2b27efdd4068ba2c4ecaf069c96e13e798275b4f8dff9843ddf560c2e8"}]}