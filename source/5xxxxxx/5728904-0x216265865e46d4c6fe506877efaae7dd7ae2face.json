{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// (c) copyright SecureVote 2018\r\n// github.com/secure-vote/sv-light-smart-contracts\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address newOwner);\r\n\r\n    modifier only_owner() {\r\n        require(msg.sender == owner, \"only_owner: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address newOwner) only_owner() external {\r\n        owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n}\r\n\r\ncontract hasAdmins is owned {\r\n    mapping (uint => mapping (address => bool)) admins;\r\n    uint public currAdminEpoch = 0;\r\n    bool public adminsDisabledForever = false;\r\n    address[] adminLog;\r\n\r\n    event AdminAdded(address indexed newAdmin);\r\n    event AdminRemoved(address indexed oldAdmin);\r\n    event AdminEpochInc();\r\n    event AdminDisabledForever();\r\n\r\n    modifier only_admin() {\r\n        require(adminsDisabledForever == false, \"admins must not be disabled\");\r\n        require(isAdmin(msg.sender), \"only_admin: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _setAdmin(msg.sender, true);\r\n    }\r\n\r\n    function isAdmin(address a) view public returns (bool) {\r\n        return admins[currAdminEpoch][a];\r\n    }\r\n\r\n    function getAdminLogN() view external returns (uint) {\r\n        return adminLog.length;\r\n    }\r\n\r\n    function getAdminLog(uint n) view external returns (address) {\r\n        return adminLog[n];\r\n    }\r\n\r\n    function upgradeMeAdmin(address newAdmin) only_admin() external {\r\n        // note: already checked msg.sender has admin with `only_admin` modifier\r\n        require(msg.sender != owner, \"owner cannot upgrade self\");\r\n        _setAdmin(msg.sender, false);\r\n        _setAdmin(newAdmin, true);\r\n    }\r\n\r\n    function setAdmin(address a, bool _givePerms) only_admin() external {\r\n        require(a != msg.sender && a != owner, \"cannot change your own (or owner's) permissions\");\r\n        _setAdmin(a, _givePerms);\r\n    }\r\n\r\n    function _setAdmin(address a, bool _givePerms) internal {\r\n        admins[currAdminEpoch][a] = _givePerms;\r\n        if (_givePerms) {\r\n            emit AdminAdded(a);\r\n            adminLog.push(a);\r\n        } else {\r\n            emit AdminRemoved(a);\r\n        }\r\n    }\r\n\r\n    // safety feature if admins go bad or something\r\n    function incAdminEpoch() only_owner() external {\r\n        currAdminEpoch++;\r\n        admins[currAdminEpoch][msg.sender] = true;\r\n        emit AdminEpochInc();\r\n    }\r\n\r\n    // this is internal so contracts can all it, but not exposed anywhere in this\r\n    // contract.\r\n    function disableAdminForever() internal {\r\n        currAdminEpoch++;\r\n        adminsDisabledForever = true;\r\n        emit AdminDisabledForever();\r\n    }\r\n}\r\n\r\ncontract TokenAbbreviationLookup is hasAdmins {\r\n\r\n    event RecordAdded(bytes32 abbreviation, bytes32 democHash, bool hidden);\r\n\r\n    struct Record {\r\n        bytes32 democHash;\r\n        bool hidden;\r\n    }\r\n\r\n    struct EditRec {\r\n        bytes32 abbreviation;\r\n        uint timestamp;\r\n    }\r\n\r\n    mapping (bytes32 => Record) public lookup;\r\n\r\n    EditRec[] public edits;\r\n\r\n    function nEdits() external view returns (uint) {\r\n        return edits.length;\r\n    }\r\n\r\n    function lookupAllSince(uint pastTs) external view returns (bytes32[] memory abrvs, bytes32[] memory democHashes, bool[] memory hiddens) {\r\n        bytes32 abrv;\r\n        for (uint i = 0; i < edits.length; i++) {\r\n            if (edits[i].timestamp >= pastTs) {\r\n                abrv = edits[i].abbreviation;\r\n                Record storage r = lookup[abrv];\r\n                abrvs = MemArrApp.appendBytes32(abrvs, abrv);\r\n                democHashes = MemArrApp.appendBytes32(democHashes, r.democHash);\r\n                hiddens = MemArrApp.appendBool(hiddens, r.hidden);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addRecord(bytes32 abrv, bytes32 democHash, bool hidden) only_admin() external {\r\n        lookup[abrv] = Record(democHash, hidden);\r\n        edits.push(EditRec(abrv, now));\r\n        emit RecordAdded(abrv, democHash, hidden);\r\n    }\r\n\r\n}\r\n\r\nlibrary MemArrApp {\r\n\r\n    // A simple library to allow appending to memory arrays.\r\n\r\n    function appendUint256(uint256[] memory arr, uint256 val) internal pure returns (uint256[] memory toRet) {\r\n        toRet = new uint256[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendUint128(uint128[] memory arr, uint128 val) internal pure returns (uint128[] memory toRet) {\r\n        toRet = new uint128[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendUint64(uint64[] memory arr, uint64 val) internal pure returns (uint64[] memory toRet) {\r\n        toRet = new uint64[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendUint32(uint32[] memory arr, uint32 val) internal pure returns (uint32[] memory toRet) {\r\n        toRet = new uint32[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendUint16(uint16[] memory arr, uint16 val) internal pure returns (uint16[] memory toRet) {\r\n        toRet = new uint16[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendBool(bool[] memory arr, bool val) internal pure returns (bool[] memory toRet) {\r\n        toRet = new bool[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendBytes32(bytes32[] memory arr, bytes32 val) internal pure returns (bytes32[] memory toRet) {\r\n        toRet = new bytes32[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendBytes32Pair(bytes32[2][] memory arr, bytes32[2] val) internal pure returns (bytes32[2][] memory toRet) {\r\n        toRet = new bytes32[2][](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendBytes(bytes[] memory arr, bytes val) internal pure returns (bytes[] memory toRet) {\r\n        toRet = new bytes[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n    function appendAddress(address[] memory arr, address val) internal pure returns (address[] memory toRet) {\r\n        toRet = new address[](arr.length + 1);\r\n\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            toRet[i] = arr[i];\r\n        }\r\n\r\n        toRet[arr.length] = val;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"edits\",\"outputs\":[{\"name\":\"abbreviation\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getAdminLog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currAdminEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminLogN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incAdminEpoch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"_givePerms\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsDisabledForever\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"upgradeMeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pastTs\",\"type\":\"uint256\"}],\"name\":\"lookupAllSince\",\"outputs\":[{\"name\":\"abrvs\",\"type\":\"bytes32[]\"},{\"name\":\"democHashes\",\"type\":\"bytes32[]\"},{\"name\":\"hiddens\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"abrv\",\"type\":\"bytes32\"},{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"hidden\",\"type\":\"bool\"}],\"name\":\"addRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nEdits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lookup\",\"outputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"hidden\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"abbreviation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hidden\",\"type\":\"bool\"}],\"name\":\"RecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminEpochInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminDisabledForever\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"TokenAbbreviationLookup","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a2e4a9e2969a483450b3fc23e5ff95c0de2f79a2ac99d29b77b8b312da15f62"}]}