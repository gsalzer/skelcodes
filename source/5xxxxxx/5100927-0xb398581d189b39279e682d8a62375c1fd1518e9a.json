{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Bestowal\r\n{\r\n    struct Data \r\n    {\r\n        bytes8 token;\r\n        uint8[] access;\r\n        uint256 balance;\r\n        uint256 limit;\r\n    }\r\n    \r\n    mapping(address=>Data) private data;\r\n    mapping(bytes8=>address) private donor;\r\n\r\n    modifier isRegistered {\r\n        require(donor[data[msg.sender].token] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isNotRegistered {\r\n        require(donor[data[msg.sender].token] == 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier validBlockNumber(uint256 _blockNumber) {\r\n        require(_blockNumber >= block.number);\r\n        _;\r\n    }\r\n\r\n    modifier validDonor(address _address, bytes8 _token) {\r\n        require(donor[_token] == _address);\r\n        _;\r\n    }\r\n\r\n    modifier validBalance(bytes8 _token) {\r\n        require(data[donor[_token]].balance > 0);\r\n        _;\r\n    }\r\n    \r\n    modifier validLimit(bytes8 _token) {\r\n        require(block.number >= data[donor[_token]].limit);\r\n        _;\r\n    }\r\n    \r\n    function getData() public constant returns(bytes8, uint8[], uint256, uint256) {\r\n        return (data[msg.sender].token, data[msg.sender].access, data[msg.sender].balance, data[msg.sender].limit);\r\n    }\r\n    \r\n    function register(uint256 _rand) public isNotRegistered {\r\n        bytes32 _seed = keccak256(block.blockhash(block.number), msg.sender, block.difficulty, _rand);\r\n        uint8[] memory _access = new uint8[](11);\r\n            \r\n        for(uint8 i=0; i<_access.length; i++)\r\n            _access[i] = uint8(uint(_seed) * (i + 1) % 16);\r\n            \r\n        data[msg.sender].token = bytes8(_seed);\r\n        data[msg.sender].access = _access;\r\n        data[msg.sender].balance = 0;\r\n            \r\n        donor[bytes8(_seed)] = msg.sender;\r\n    }\r\n    \r\n    function holding(uint256 _blockNumber) public payable isRegistered validBlockNumber(_blockNumber) {\r\n        data[msg.sender].balance += msg.value;\r\n        data[msg.sender].limit = _blockNumber;\r\n    }\r\n    \r\n    function finding(address _address, bytes8 _token, uint8[] _access) public payable validDonor(_address, _token) validBalance(_token) validLimit(_token) {\r\n        address _donor = donor[_token];\r\n        uint256 _balance = data[_donor].balance;\r\n        \r\n        for(uint8 i=0; i<data[_donor].access.length; i++)\r\n            if(data[_donor].access[i] != _access[i]) { revert(); }\r\n        \r\n        data[_donor].balance = 0;\r\n        msg.sender.transfer(_balance + msg.value);\r\n    }\r\n\r\n    function termination() public payable isRegistered {\r\n        uint256 _balance = data[msg.sender].balance;\r\n        \r\n        delete donor[data[msg.sender].token];\r\n        delete data[msg.sender];\r\n        \r\n        msg.sender.transfer(_balance + msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"bytes8\"},{\"name\":\"_access\",\"type\":\"uint8[]\"}],\"name\":\"finding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"termination\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"holding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rand\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bestowal","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a6939ecd773bd8357faa5d9a202782aca89f84e95a81a7abb7843b1ecb13db51"}]}