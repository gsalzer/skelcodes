{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title owned\r\n * @dev The owned contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken.\r\n */\r\ncontract BasicToken {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256       _supply;\r\n    mapping (address => uint256)    _balances;\r\n    \r\n    event Transfer( address indexed from, address indexed to, uint256 value);\r\n\r\n    function BasicToken() public {    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_balances[msg.sender] >= _value);\r\n        \r\n        _balances[msg.sender] =_balances[msg.sender].sub(_value);\r\n        _balances[_to] =_balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n  \r\n}\r\n\r\ncontract DBToken is BasicToken,owned {\r\n    string  constant public symbol = \"DB\";\r\n    string  constant public name = \"Digital Block\";\r\n    uint256 constant public decimals =6; \r\n    uint256 public lockedCounts = 8*(10**8)*(10**6);\r\n    uint256 public eachUnlockCounts = 2*(10**8)*(10**6);\r\n    //crowdSale end time, May/10/2018\r\n    uint256 public startTime = 1525881600;\r\n\r\n    struct LockStruct {\r\n        uint256 unlockTime;\r\n        bool locked;\r\n    }\r\n\r\n    LockStruct[] public unlockTimeMap;\r\n\r\n    function DBToken() public {\r\n        _supply =50*(10**8)*(10**6);\r\n        _balances[0x01] = lockedCounts;\r\n         _balances[msg.sender] =_supply.sub(lockedCounts);\r\n\r\n        // November/10/2018\r\n        unlockTimeMap.push(LockStruct({unlockTime:1541779200, locked: true})); \r\n        // May/10/2019\r\n        unlockTimeMap.push(LockStruct({unlockTime:1557417600, locked: true})); \r\n        // November/10/2019\r\n        unlockTimeMap.push(LockStruct({unlockTime:1573315200, locked: true})); \r\n        // May/10/2020\r\n        unlockTimeMap.push(LockStruct({unlockTime:1589040000, locked: true})); \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require (now >= startTime);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function distribute(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev unlock , only can be called by owner.\r\n     */\r\n    function unlock(uint256 _index) onlyOwner public {\r\n        require(_index>=0 && _index<unlockTimeMap.length);\r\n        require(now >= unlockTimeMap[_index].unlockTime && unlockTimeMap[_index].locked);\r\n        require(_balances[0x01] >= eachUnlockCounts);\r\n\r\n        _balances[0x01] =_balances[0x01].sub(eachUnlockCounts);\r\n        _balances[owner] =_balances[owner].add(eachUnlockCounts);\r\n\r\n        lockedCounts =lockedCounts.sub(eachUnlockCounts);\r\n        unlockTimeMap[_index].locked = false;\r\n\r\n        emit Transfer(0x01, owner, eachUnlockCounts);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eachUnlockCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockTimeMap\",\"outputs\":[{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DBToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://909a97edd1ef99ca9282c0bbb33c36e77951f36ab2002c278b172ae16f61a187"}]}