{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/**\r\n * @title Vesting Contract\r\n */\r\ncontract Vesting is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @notice The address of the ERC20 token\r\n     */\r\n    ERC20 public erc20;\r\n\r\n    /**\r\n     * @notice Grants\r\n     */\r\n    mapping (address => Grant) public grants;\r\n\r\n    /**\r\n     * @notice Total tokens currently vesting\r\n     */\r\n    uint public totalVesting;\r\n\r\n    struct Grant {\r\n        uint value;\r\n        uint end;\r\n        bool transferred;\r\n    }\r\n\r\n    event CreateGrant(address indexed to, uint value, uint end);\r\n    event UnlockGrant(address indexed to, uint value);\r\n    event RevokeGrant(address indexed to, uint value);\r\n\r\n    /**\r\n     * @notice Construct and initialize the Vesting contract\r\n     * @param _erc20 The address of the ERC20 contract\r\n     */\r\n    constructor(ERC20 _erc20) public {\r\n        require(_erc20 != address(0));\r\n        erc20 = _erc20;\r\n    }\r\n\r\n    /**\r\n     * @notice Grant tokens\r\n     * @param _to The address to grant tokens to\r\n     * @param _value The amount of tokens\r\n     * @param _end The end of the vesting period (unix timestamp)\r\n     */\r\n    function createGrant(address _to, uint _value, uint _end) external onlyOwner {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n\r\n        // Check enough tokens available for this new grant\r\n        require(totalVesting.add(_value) <= erc20.balanceOf(address(this)));\r\n\r\n        // Only one grant per address\r\n        require(grants[_to].value == 0);\r\n\r\n        grants[_to] = Grant({\r\n            value: _value,\r\n            end: _end,\r\n            transferred: false\r\n        });\r\n\r\n        totalVesting = totalVesting.add(_value);\r\n\r\n        emit CreateGrant(_to, _value, _end);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke the grant for the specified address, transfer the tokens to the owner\r\n     * @param _holder The address for which the grand must be revoked\r\n     */\r\n    function revokeGrant(address _holder) external onlyOwner {\r\n        Grant memory grant = grants[_holder];\r\n        require(grant.value != 0);\r\n\r\n        delete grants[_holder];\r\n        totalVesting = totalVesting.sub(grant.value);\r\n        erc20.transfer(owner, grant.value);\r\n\r\n        emit RevokeGrant(_holder, grant.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Unlock the vested tokens, transferring them to their holder\r\n     */\r\n    function unlockGrant() external {\r\n        Grant storage grant = grants[msg.sender];\r\n        require(grant.value != 0);\r\n        require(!grant.transferred);\r\n        require(now >= grant.end); // solium-disable-line security/no-block-members\r\n\r\n        grant.transferred = true;\r\n        totalVesting = totalVesting.sub(grant.value);\r\n        erc20.transfer(msg.sender, grant.value);\r\n\r\n        emit UnlockGrant(msg.sender, grant.value);\r\n    }\r\n    \r\n    // Refuse ETH\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"revokeGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"createGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"CreateGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnlockGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RevokeGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ba9d4199fab4f26efe3551d490e3821486f135ba","Library":"","SwarmSource":"bzzr://c7abaf9d4ef4c3612abd2a52016ca8248581724c20d0b1a1b71420465b021f3b"}]}