{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/// @title Voting with delegation.\r\ncontract Ballot {\r\n    // This declares a new complex type which will\r\n    // be used for variables later.\r\n    // It will represent a vote for one batch votes in blockchain.\r\n    struct Voter {\r\n        uint weight; // vote number of specified voter and voted proposal\r\n        bytes32 voterName; // voter's name\r\n        uint proposalId; // index of the voted proposal\r\n    }\r\n\r\n    // This is a type for a single proposal.\r\n    struct Proposal {\r\n        uint proposalId;// proposal's id, equals to proposals' index\r\n        bytes32 proposalName;   // proposal's description\r\n        uint voteCount; // number of accumulated votes\r\n    }\r\n\r\n    address public chairperson;\r\n\r\n    // A dynamically-sized array of `Proposal` structs.\r\n    Proposal[] public proposals;\r\n\r\n    event BatchVote(address indexed _from);\r\n\r\n    modifier onlyChairperson {\r\n      require(msg.sender == chairperson);\r\n      _;\r\n    }\r\n\r\n    function transferChairperson(address newChairperson) onlyChairperson  public {\r\n        chairperson = newChairperson;\r\n    }\r\n\r\n    /// Create a new ballot to choose one of `proposalNames`.\r\n    function Ballot(bytes32[] proposalNames) public {\r\n        chairperson = msg.sender;\r\n\r\n        // For each of the provided proposal names,\r\n        // create a new proposal object and add it\r\n        // to the end of the array.\r\n        for (uint i = 0; i < proposalNames.length; i++) {\r\n            // `Proposal({...})` creates a temporary\r\n            // Proposal object and `proposals.push(...)`\r\n            // appends it to the end of `proposals`.\r\n            proposals.push(Proposal({\r\n                proposalId: proposals.length,\r\n                proposalName: proposalNames[i],\r\n                voteCount: 0\r\n            }));\r\n        }\r\n    }\r\n\r\n    function addProposals(bytes32[] proposalNames) onlyChairperson public {\r\n        // For each of the provided proposal names,\r\n        // create a new proposal object and add it\r\n        // to the end of the array.\r\n        for (uint i = 0; i < proposalNames.length; i++) {\r\n            // `Proposal({...})` creates a temporary\r\n            // Proposal object and `proposals.push(...)`\r\n            // appends it to the end of `proposals`.\r\n            proposals.push(Proposal({\r\n                proposalId: proposals.length,\r\n                proposalName: proposalNames[i],\r\n                voteCount: 0\r\n            }));\r\n        }\r\n    }\r\n\r\n\r\n    /// batch vote (delegated to chairperson)\r\n    function vote(uint[] weights, bytes32[] voterNames, uint[] proposalIds) onlyChairperson public {\r\n\r\n        require(weights.length == voterNames.length);\r\n        require(weights.length == proposalIds.length);\r\n        require(voterNames.length == proposalIds.length);\r\n\r\n        for (uint i = 0; i < weights.length; i++) {\r\n            Voter memory voter = Voter({\r\n              weight: weights[i],\r\n              voterName: voterNames[i],\r\n              proposalId: proposalIds[i]\r\n            });\r\n            proposals[voter.proposalId-1].voteCount += voter.weight;\r\n        }\r\n\r\n        BatchVote(msg.sender);\r\n    }\r\n\r\n    /// @dev Computes the winning proposal taking all\r\n    /// previous votes into account.\r\n    function winningProposal() internal\r\n            returns (uint winningProposal)\r\n    {\r\n        uint winningVoteCount = 0;\r\n        for (uint p = 0; p < proposals.length; p++) {\r\n            if (proposals[p].voteCount > winningVoteCount) {\r\n                winningVoteCount = proposals[p].voteCount;\r\n                winningProposal = p;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calls winningProposal() function to get the index\r\n    // of the winner contained in the proposals array and then\r\n    // returns the name of the winner\r\n    function winnerName() public view\r\n            returns (bytes32 winnerName)\r\n    {\r\n        winnerName = proposals[winningProposal()].proposalName;\r\n    }\r\n\r\n    function resetBallot(bytes32[] proposalNames) onlyChairperson public {\r\n\r\n        delete proposals;\r\n\r\n        // For each of the provided proposal names,\r\n        // create a new proposal object and add it\r\n        // to the end of the array.\r\n        for (uint i = 0; i < proposalNames.length; i++) {\r\n            // `Proposal({...})` creates a temporary\r\n            // Proposal object and `proposals.push(...)`\r\n            // appends it to the end of `proposals`.\r\n            proposals.push(Proposal({\r\n                proposalId: proposals.length,\r\n                proposalName: proposalNames[i],\r\n                voteCount: 0\r\n            }));\r\n        }\r\n    }\r\n\r\n    function batchSearchProposalsId(bytes32[] proposalsName) public view\r\n          returns (uint[] proposalsId) {\r\n      proposalsId = new uint[](proposalsName.length);\r\n      for (uint i = 0; i < proposalsName.length; i++) {\r\n        uint proposalId = searchProposalId(proposalsName[i]);\r\n        proposalsId[i]=proposalId;\r\n      }\r\n    }\r\n\r\n    function searchProposalId(bytes32 proposalName) public view\r\n          returns (uint proposalId) {\r\n      for (uint i = 0; i < proposals.length; i++) {\r\n          if(proposals[i].proposalName == proposalName){\r\n            proposalId = proposals[i].proposalId;\r\n          }\r\n      }\r\n    }\r\n\r\n    // proposal rank by voteCount\r\n    function proposalsRank() public view\r\n          returns (uint[] rankByProposalId,\r\n          bytes32[] rankByName,\r\n          uint[] rankByvoteCount) {\r\n\r\n    uint n = proposals.length;\r\n    Proposal[] memory arr = new Proposal[](n);\r\n\r\n    uint i;\r\n    for(i=0; i<n; i++) {\r\n      arr[i] = proposals[i];\r\n    }\r\n\r\n    uint[] memory stack = new uint[](n+ 2);\r\n\r\n    //Push initial lower and higher bound\r\n    uint top = 1;\r\n    stack[top] = 0;\r\n    top = top + 1;\r\n    stack[top] = n-1;\r\n\r\n    //Keep popping from stack while is not empty\r\n    while (top > 0) {\r\n\r\n      uint h = stack[top];\r\n      top = top - 1;\r\n      uint l = stack[top];\r\n      top = top - 1;\r\n\r\n      i = l;\r\n      uint x = arr[h].voteCount;\r\n\r\n      for(uint j=l; j<h; j++){\r\n        if  (arr[j].voteCount <= x) {\r\n          //Move smaller element\r\n          (arr[i], arr[j]) = (arr[j],arr[i]);\r\n          i = i + 1;\r\n        }\r\n      }\r\n      (arr[i], arr[h]) = (arr[h],arr[i]);\r\n      uint p = i;\r\n\r\n      //Push left side to stack\r\n      if (p > l + 1) {\r\n        top = top + 1;\r\n        stack[top] = l;\r\n        top = top + 1;\r\n        stack[top] = p - 1;\r\n      }\r\n\r\n      //Push right side to stack\r\n      if (p+1 < h) {\r\n        top = top + 1;\r\n        stack[top] = p + 1;\r\n        top = top + 1;\r\n        stack[top] = h;\r\n      }\r\n    }\r\n\r\n    rankByProposalId = new uint[](n);\r\n    rankByName = new bytes32[](n);\r\n    rankByvoteCount = new uint[](n);\r\n    for(i=0; i<n; i++) {\r\n      rankByProposalId[i]= arr[n-1-i].proposalId;\r\n      rankByName[i]=arr[n-1-i].proposalName;\r\n      rankByvoteCount[i]=arr[n-1-i].voteCount;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"},{\"name\":\"proposalName\",\"type\":\"bytes32\"},{\"name\":\"voteCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalsName\",\"type\":\"bytes32[]\"}],\"name\":\"batchSearchProposalsId\",\"outputs\":[{\"name\":\"proposalsId\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"name\":\"addProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalName\",\"type\":\"bytes32\"}],\"name\":\"searchProposalId\",\"outputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weights\",\"type\":\"uint256[]\"},{\"name\":\"voterNames\",\"type\":\"bytes32[]\"},{\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"name\":\"resetBallot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newChairperson\",\"type\":\"address\"}],\"name\":\"transferChairperson\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsRank\",\"outputs\":[{\"name\":\"rankByProposalId\",\"type\":\"uint256[]\"},{\"name\":\"rankByName\",\"type\":\"bytes32[]\"},{\"name\":\"rankByvoteCount\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"name\":\"winnerName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"BatchVote\",\"type\":\"event\"}]","ContractName":"Ballot","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003616161616161616161616161616161616161616161616161616161616161616162626262626262626262626262626262626262626262626262626262626262626363636363636363636363636363636363636363636363636363636363636363","Library":"","SwarmSource":"bzzr://e15ac0eff95def17fb1f56e5befab13091cbe6c477fc80bfe158652ea5f7d95d"}]}