{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract BeggarBetting {\r\n\r\n    struct MatchBettingInfo {    \r\n        address better;\r\n        uint256 matchId;\r\n        uint homeTeamScore;\r\n        uint awayTeamScore;     \r\n        uint bettingPrice;  \r\n    }\r\n\r\n    struct BetterBettingInfo {    \r\n        uint256 matchId;\r\n        uint homeTeamScore;\r\n        uint awayTeamScore;     \r\n        uint bettingPrice;\r\n        bool isWinner; \r\n        bool hasReceivedPrize;\r\n        uint256 winningPrize;\r\n        uint numOfWinners;   \r\n        uint numOfBetters;   \r\n    }\r\n\r\n    address public owner;\r\n    mapping(uint256 => MatchBettingInfo[]) public matchBettingInfo;  \r\n    mapping(address => BetterBettingInfo[]) public betterBettingInfo;\r\n    mapping(address => uint256) public betterBalance;\r\n    mapping(address => uint) public betterNumWinning;\r\n    uint numOfPanhandler;\r\n    uint numOfVagabond;\r\n    uint numOfTramp;\r\n    uint numOfMiddleClass;\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Create the owner of the contract on first initialization\r\n     */\r\n    function BeggarBetting() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     */\r\n    function () payable {}\r\n\r\n    /**\r\n     * Store betting data submitted by the user\r\n     *\r\n     * Send `msg.value` to this contract\r\n     *\r\n     * @param _matchId The matchId to store\r\n     * @param _homeTeamScore The home team score to store\r\n     * @param _awayTeamScore The away team score to store\r\n     * @param _bettingPrice The betting price to store\r\n     */  \r\n    function placeBet(uint256 _matchId, uint _homeTeamScore, uint _awayTeamScore, uint _bettingPrice) public payable returns (bool) {  \r\n        require(_bettingPrice == msg.value); // Check ether send by sender is equal to bet amount\r\n        bool result = checkDuplicateMatchId(msg.sender, _matchId, _bettingPrice);    \r\n        // Revert if the sender has already placed this bet\r\n        if (result) {\r\n            revert();\r\n        }                                                                                                  \r\n        matchBettingInfo[_matchId].push(MatchBettingInfo(msg.sender, _matchId, _homeTeamScore, _awayTeamScore, _bettingPrice)); // Store this match's betting info        \r\n        betterBettingInfo[msg.sender].push(BetterBettingInfo(_matchId, _homeTeamScore, _awayTeamScore, _bettingPrice, false, false, 0, 0, 0)); // Store this better's betting info                                                                                                         \r\n        address(this).transfer(msg.value); // Send the user's betting price to this contract\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * Claim winning prize by the user\r\n     *\r\n     * Send `winningPrize` to 'msg.sender' from this contract\r\n     *\r\n     * @param _matchId The matchId to find winners\r\n     * @param _homeTeamScore The home team score to find matching score\r\n     * @param _awayTeamScore The away team score to find matching score\r\n     * @param _bettingPrice The betting price to find matching price\r\n     */  \r\n    function claimPrizes(uint256 _matchId, uint _homeTeamScore, uint _awayTeamScore, uint _bettingPrice) public returns (bool) {\r\n        uint totalNumBetters = matchBettingInfo[_matchId].length;  \r\n        uint numOfBetters = 0;\r\n        uint numOfWinners = 0;\r\n        uint256 winningPrize = 0;\r\n        uint commissionToOwner = 0;  \r\n        bool result = checkPrizeAlreadyReceived(msg.sender, _matchId, _bettingPrice);        \r\n        // Revert if the sender has already received the prize\r\n        if (result) {\r\n            revert();\r\n        }          \r\n        // Find matching scores among betters who betted for this match & price\r\n        for (uint j = 0; j < totalNumBetters; j++) {  \r\n            if (matchBettingInfo[_matchId][j].bettingPrice == _bettingPrice) {\r\n                numOfBetters++;\r\n                if (matchBettingInfo[_matchId][j].homeTeamScore == _homeTeamScore && matchBettingInfo[_matchId][j].awayTeamScore == _awayTeamScore) {          \r\n                    numOfWinners++;\r\n                }    \r\n            }\r\n        }   \r\n        // msg.sender is the only winner, gets all the prize and gives a 7% commission to the owner\r\n        if (numOfWinners == 1) {      \r\n            commissionToOwner = _bettingPrice * numOfBetters * 7 / 100;  \r\n            betterBalance[msg.sender] = (_bettingPrice * numOfBetters) - commissionToOwner;\r\n            winningPrize = (_bettingPrice * numOfBetters) - commissionToOwner;\r\n        // One more winner, divide it equally and gives a 7% commission to the owner\r\n        } else if (numOfWinners > 1) {\r\n            commissionToOwner = ((_bettingPrice * numOfBetters) / numOfWinners) * 7 / 100;  \r\n            betterBalance[msg.sender] = ((_bettingPrice * numOfBetters) / numOfWinners) - commissionToOwner;\r\n            winningPrize = ((_bettingPrice * numOfBetters) / numOfWinners) - commissionToOwner;   \r\n        }\r\n    \r\n        sendCommissionToOwner(commissionToOwner);\r\n        withdraw();\r\n        afterClaim(_matchId, _bettingPrice, winningPrize, numOfWinners, numOfBetters);\r\n    \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Send 7% commission to the contract owner\r\n     *\r\n     * Send `_commission` to `owner` from the winner's prize\r\n     *\r\n     * @param _commission The commission to be sent to the contract owner\r\n     */\r\n    function sendCommissionToOwner(uint _commission) private {    \r\n        require(address(this).balance >= _commission); \r\n        owner.transfer(_commission);\r\n    }\r\n\r\n    /**\r\n     * Send winning prize to the winner\r\n     *\r\n     * Send `balance` to `msg.sender` from the contract\r\n     */\r\n    function withdraw() private {\r\n        uint256 balance = betterBalance[msg.sender];    \r\n        require(address(this).balance >= balance); \r\n        betterBalance[msg.sender] -= balance;\r\n        msg.sender.transfer(balance);\r\n    }\r\n\r\n    /**\r\n     * Modify winner's betting information after receiving the prize\r\n     *\r\n     * Change hasReceivedPrize to true to process info panel\r\n     *\r\n     * @param _matchId The matchId to find msg.sender's info to modify\r\n     * @param _bettingPrice The betting price to find msg.sender's info to modify\r\n     * @param _winningPrize The winning prize to assign value to msg.sender's final betting info\r\n     * @param _numOfWinners The number of winners to assign value to msg.sender's final betting info\r\n     * @param _numOfBetters The number of betters to assign value to msg.sender's final betting info\r\n     */ \r\n    function afterClaim(uint256 _matchId, uint _bettingPrice, uint256 _winningPrize, uint _numOfWinners, uint _numOfBetters) private {\r\n        uint numOfBettingInfo = betterBettingInfo[msg.sender].length;\r\n\r\n        for (uint i = 0; i < numOfBettingInfo; i++) {\r\n            if (betterBettingInfo[msg.sender][i].matchId == _matchId && betterBettingInfo[msg.sender][i].bettingPrice == _bettingPrice) {\r\n                betterBettingInfo[msg.sender][i].hasReceivedPrize = true;\r\n                betterBettingInfo[msg.sender][i].winningPrize = _winningPrize;\r\n                betterBettingInfo[msg.sender][i].numOfWinners = _numOfWinners;\r\n                betterBettingInfo[msg.sender][i].numOfBetters = _numOfBetters;\r\n            }\r\n        }    \r\n\r\n        betterNumWinning[msg.sender] += 1;\r\n        CheckPrivilegeAccomplishment(betterNumWinning[msg.sender]);        \r\n    }\r\n\r\n    /**\r\n     * Find the msg.sender's number of winnings and increment the privilege if it matches\r\n     *\r\n     * Increment one of the privileges if numWinning matches\r\n     */\r\n    function CheckPrivilegeAccomplishment(uint numWinning) public {\r\n        if (numWinning == 3) {\r\n            numOfPanhandler++;\r\n        }\r\n        if (numWinning == 8) {\r\n            numOfVagabond++;\r\n        }\r\n        if (numWinning == 15) {\r\n            numOfTramp++;\r\n        }\r\n        if (numWinning == 21) {\r\n            numOfMiddleClass++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prevent the user from submitting the same bet again\r\n     *\r\n     * Send `_commission` to `owner` from the winner's prize\r\n     *\r\n     * @param _better The address of the sender\r\n     * @param _matchId The matchId to find the msg.sender's betting info\r\n     * @param _bettingPrice The betting price to find the msg.sender's betting info\r\n     */\r\n    function checkDuplicateMatchId(address _better, uint256 _matchId, uint _bettingPrice) public view returns (bool) {\r\n        uint numOfBetterBettingInfo = betterBettingInfo[_better].length;\r\n      \r\n        for (uint i = 0; i < numOfBetterBettingInfo; i++) {\r\n            if (betterBettingInfo[_better][i].matchId == _matchId && betterBettingInfo[_better][i].bettingPrice == _bettingPrice) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Add extra security to prevent the user from trying to receive the winning prize again\r\n     *\r\n     * @param _better The address of the sender\r\n     * @param _matchId The matchId to find the msg.sender's betting info\r\n     * @param _bettingPrice The betting price to find the msg.sender's betting info\r\n     */\r\n    function checkPrizeAlreadyReceived(address _better, uint256 _matchId, uint _bettingPrice) public view returns (bool) {\r\n        uint numOfBetterBettingInfo = betterBettingInfo[_better].length;\r\n        // Find if the sender address has already received the prize\r\n        for (uint i = 0; i < numOfBetterBettingInfo; i++) {\r\n            if (betterBettingInfo[_better][i].matchId == _matchId && betterBettingInfo[_better][i].bettingPrice == _bettingPrice) {\r\n                if (betterBettingInfo[_better][i].hasReceivedPrize) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }    \r\n\r\n    /**\r\n     * Constant function to return the user's previous records\r\n     *\r\n     * @param _better The better's address to search betting info\r\n     */\r\n    function getBetterBettingInfo(address _better) public view returns (uint256[], uint[], uint[], uint[]) {\r\n        uint length = betterBettingInfo[_better].length;\r\n        uint256[] memory matchId = new uint256[](length);\r\n        uint[] memory homeTeamScore = new uint[](length);\r\n        uint[] memory awayTeamScore = new uint[](length);\r\n        uint[] memory bettingPrice = new uint[](length);   \r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            matchId[i] = betterBettingInfo[_better][i].matchId;\r\n            homeTeamScore[i] = betterBettingInfo[_better][i].homeTeamScore;\r\n            awayTeamScore[i] = betterBettingInfo[_better][i].awayTeamScore;\r\n            bettingPrice[i] = betterBettingInfo[_better][i].bettingPrice;   \r\n        }\r\n\r\n        return (matchId, homeTeamScore, awayTeamScore, bettingPrice);\r\n    }\r\n\r\n    /**\r\n     * Constant function to return the user's previous records\r\n     *\r\n     * @param _better The better's address to search betting info\r\n     */\r\n    function getBetterBettingInfo2(address _better) public view returns (bool[], bool[], uint256[], uint[], uint[]) {\r\n        uint length = betterBettingInfo[_better].length;  \r\n        bool[] memory isWinner = new bool[](length);\r\n        bool[] memory hasReceivedPrize = new bool[](length);\r\n        uint256[] memory winningPrize = new uint256[](length);\r\n        uint[] memory numOfWinners = new uint[](length);\r\n        uint[] memory numOfBetters = new uint[](length);\r\n\r\n        for (uint i = 0; i < length; i++) {     \r\n            isWinner[i] = betterBettingInfo[_better][i].isWinner;\r\n            hasReceivedPrize[i] = betterBettingInfo[_better][i].hasReceivedPrize;\r\n            winningPrize[i] = betterBettingInfo[_better][i].winningPrize;\r\n            numOfWinners[i] = betterBettingInfo[_better][i].numOfWinners;\r\n            numOfBetters[i] = betterBettingInfo[_better][i].numOfBetters;\r\n        }\r\n\r\n        return (isWinner, hasReceivedPrize, winningPrize, numOfWinners, numOfBetters);\r\n    }\r\n\r\n    /**\r\n     * Load the number of participants for the same match and betting price\r\n     *\r\n     * @param _matchId The matchId to find number of participants\r\n     * @param _bettingPrice The betting price to find number of participants\r\n     */\r\n    function getNumOfBettersForMatchAndPrice(uint _matchId, uint _bettingPrice) public view returns(uint) {\r\n        uint numOfBetters = matchBettingInfo[_matchId].length;    \r\n        uint count = 0;\r\n\r\n        for (uint i = 0; i < numOfBetters; i++) {   \r\n            if (matchBettingInfo[_matchId][i].bettingPrice == _bettingPrice) {\r\n                count++;\r\n            }\r\n        }\r\n    \r\n        return count;    \r\n    }\r\n\r\n    /**\r\n     * Get the number of winnings of the user\r\n     *\r\n     * @param _better The address of the user\r\n     */\r\n    function getBetterNumOfWinnings(address _better) public view returns(uint) {\r\n        return betterNumWinning[_better];    \r\n    }\r\n\r\n    /**\r\n     * Return the current number of accounts who have reached each privileges\r\n     */\r\n    function getInfoPanel() public view returns(uint, uint, uint, uint) {      \r\n        return (numOfPanhandler, numOfVagabond, numOfTramp, numOfMiddleClass);    \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"betterNumWinning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_better\",\"type\":\"address\"},{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_bettingPrice\",\"type\":\"uint256\"}],\"name\":\"checkPrizeAlreadyReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_better\",\"type\":\"address\"}],\"name\":\"getBetterBettingInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"betterBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_homeTeamScore\",\"type\":\"uint256\"},{\"name\":\"_awayTeamScore\",\"type\":\"uint256\"},{\"name\":\"_bettingPrice\",\"type\":\"uint256\"}],\"name\":\"claimPrizes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_bettingPrice\",\"type\":\"uint256\"}],\"name\":\"getNumOfBettersForMatchAndPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betterBettingInfo\",\"outputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"homeTeamScore\",\"type\":\"uint256\"},{\"name\":\"awayTeamScore\",\"type\":\"uint256\"},{\"name\":\"bettingPrice\",\"type\":\"uint256\"},{\"name\":\"isWinner\",\"type\":\"bool\"},{\"name\":\"hasReceivedPrize\",\"type\":\"bool\"},{\"name\":\"winningPrize\",\"type\":\"uint256\"},{\"name\":\"numOfWinners\",\"type\":\"uint256\"},{\"name\":\"numOfBetters\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfoPanel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_better\",\"type\":\"address\"}],\"name\":\"getBetterBettingInfo2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[]\"},{\"name\":\"\",\"type\":\"bool[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numWinning\",\"type\":\"uint256\"}],\"name\":\"CheckPrivilegeAccomplishment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_better\",\"type\":\"address\"}],\"name\":\"getBetterNumOfWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchBettingInfo\",\"outputs\":[{\"name\":\"better\",\"type\":\"address\"},{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"homeTeamScore\",\"type\":\"uint256\"},{\"name\":\"awayTeamScore\",\"type\":\"uint256\"},{\"name\":\"bettingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_better\",\"type\":\"address\"},{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_bettingPrice\",\"type\":\"uint256\"}],\"name\":\"checkDuplicateMatchId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_homeTeamScore\",\"type\":\"uint256\"},{\"name\":\"_awayTeamScore\",\"type\":\"uint256\"},{\"name\":\"_bettingPrice\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BeggarBetting","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b503f63cfdfae1c037b214da34a9f03cac1df309b7a1ff69756c452da1d70df"}]}