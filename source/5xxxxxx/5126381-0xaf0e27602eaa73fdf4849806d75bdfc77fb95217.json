{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * CoinCrowd Exchange Rates. More info www.coincrowd.it \r\n */\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"multiple user permissions\".\r\n */\r\ncontract Authorizable is Ownable {\r\n  mapping(address => bool) public authorized;\r\n  \r\n  event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\r\n\r\n  /**\r\n   * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\r\n   * account.\r\n   */ \r\n  function Authorizable() public {\r\n\tauthorized[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the authorized.\r\n   */\r\n  modifier onlyAuthorized() {\r\n    require(authorized[msg.sender]);\r\n    _;\r\n  }\r\n\r\n /**\r\n   * @dev Allows the current owner to set an authorization.\r\n   * @param addressAuthorized The address to change authorization.\r\n   */\r\n  function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {\r\n    AuthorizationSet(addressAuthorized, authorization);\r\n    authorized[addressAuthorized] = authorization;\r\n  }\r\n  \r\n}\r\n\r\ncontract CoinCrowdExchangeRates is Ownable, Authorizable {\r\n    uint256 public constant decimals = 18;\r\n    mapping (string  => uint256) rate;\r\n    \r\n    function readRate(string _currency) public view returns (uint256 oneEtherValue) {\r\n        return rate[_currency];\r\n    }\r\n    \r\n    function writeRate(string _currency, uint256 oneEtherValue) onlyAuthorized public returns (bool result) {\r\n        rate[_currency] = oneEtherValue;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"oneEtherValue\",\"type\":\"uint256\"}],\"name\":\"writeRate\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"readRate\",\"outputs\":[{\"name\":\"oneEtherValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"AuthorizationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinCrowdExchangeRates","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4daf46bbcf273c0decaa00b7df65cb44ffd4a2c1a667a7476fe9eb4b8b467133"}]}