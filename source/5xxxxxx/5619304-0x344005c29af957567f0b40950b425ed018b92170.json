{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity  ^0.4.21;\r\n\r\n\r\ncontract DSMath {\r\n    uint constant DENOMINATOR = 10000;\r\n    uint constant DECIMALS = 18;\r\n    uint constant WAD = 10**DECIMALS;\r\n\r\n    modifier condition(bool _condition) {\r\n        require(_condition);\r\n        _;\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\t\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\t\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n}\r\n\r\n\r\ncontract Token is DSMath {\r\n    string  public symbol;\r\n    uint256 public decimals;\r\n    string  public name;\r\n    address public owner;\r\n\r\n    uint256 internal _supply;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _approvals;\r\n\r\n    event LogSetOwner(address indexed owner_);\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner_, address indexed spender, uint value);\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function Token() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _supply;\r\n    }\r\n\r\n    function balanceOf(address src) public constant returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n\r\n    function allowance(address src, address guy) public constant returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        require(_balances[msg.sender] >= wad);\r\n\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        emit Transfer(msg.sender, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n        require(_balances[src] >= wad);\r\n        require(_approvals[src][msg.sender] >= wad);\r\n\r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint wad)\r\n    public\r\n    auth\r\n    {\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function isAuthorized(address src) internal constant returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Universal Token\r\ncontract UniversalToken is Token {\r\n    uint public xactionFeeNumerator;\r\n    uint public xactionFeeShare;\r\n\r\n    function UniversalToken( \r\n        uint initialSupply,\r\n        uint feeMult,\r\n        uint feeShare ) public\r\n        condition(initialSupply > 1000)\r\n        condition(feeMult > 0)\r\n    {\r\n        symbol = \"PMT\";\r\n        name = \"Universal Evangelist Token - by Pure Money Tech\";\r\n        decimals = DECIMALS;\r\n\t\t_supply = mul(initialSupply, WAD);\r\n\t\towner = msg.sender;\r\n        xactionFeeNumerator = feeMult;\r\n        xactionFeeShare = feeShare;\r\n\t\t_balances[owner] = _supply;\r\n    }\r\n\r\n    function modifyTransFee(uint _xactionFeeMult) public\r\n        auth\r\n        condition(_xactionFeeMult >= 0)\r\n        condition(DENOMINATOR > 4 * _xactionFeeMult)\r\n    {\r\n        xactionFeeNumerator = _xactionFeeMult;\r\n    }\r\n\r\n    function modifyFeeShare(uint _share) public\r\n        auth\r\n        condition(_share >= 0)\r\n        condition(DENOMINATOR > 3 * _share)\r\n    {\r\n        xactionFeeShare = _share;\r\n    }\r\n}\r\n\r\n\r\n// Local Token\r\ncontract LocalToken is Token {\r\n\r\n    string  public localityCode;\r\n    uint    public taxRateNumerator = 0;\r\n    address public govtAccount = 0;\r\n    address public pmtAccount = 0;\r\n    UniversalToken public universalToken;\r\n\r\n    function LocalToken(\r\n            uint _maxTokens,\r\n            uint _taxRateMult,\r\n\t\t\tstring _tokenSymbol,\r\n\t\t\tstring _tokenName,\r\n            string _localityCode,\r\n            address _govt,\r\n            address _pmt,\r\n            address _universalToken\r\n            ) public\r\n            condition(_maxTokens > 10)\r\n            condition(DENOMINATOR > mul(_taxRateMult, 2))\r\n            condition((_taxRateMult > 0 && _govt != 0) || _taxRateMult == 0)\r\n            condition(_universalToken != 0)\r\n    {\r\n        universalToken = UniversalToken(_universalToken);\r\n        require(msg.sender == universalToken.owner());\r\n\t\tdecimals = DECIMALS;\r\n\t\tsymbol = _tokenSymbol;\r\n\t\tname = _tokenName;\r\n        localityCode = _localityCode;\r\n        _supply = mul(_maxTokens, WAD);\r\n        govtAccount = _govt;\r\n        pmtAccount = _pmt;\r\n\t\towner = msg.sender;\r\n        if (_taxRateMult > 0) {\r\n            taxRateNumerator = _taxRateMult;\r\n        }\r\n\t\t_balances[owner] = _supply;\r\n    }\r\n\r\n    function modifyLocality(string newLocality) public\r\n        auth\r\n    {\r\n        localityCode = newLocality;\r\n    }\r\n\r\n\tfunction modifyTaxRate(uint _taxMult) public\r\n        auth\r\n\t\tcondition(DENOMINATOR > 2 * _taxMult)\r\n    {\r\n\t\ttaxRateNumerator = _taxMult;\r\n\t}\r\n\r\n    // To reset gvtAccount when taxRateNumerator is not zero, \r\n    // must reset taxRateNumerator first.\r\n    // To set govtAccount when taxRateNumerator is zero,\r\n    // must set taxRateNumerator first to non-zero value.\r\n    function modifyGovtAccount(address govt) public\r\n        auth\r\n        condition((taxRateNumerator > 0 && govt != 0) ||\r\n                (taxRateNumerator == 0 && govt == 0))\r\n    {\r\n        govtAccount = govt;\r\n    }\r\n\r\n    function modifyPMTAccount(address _pmt) public\r\n        auth\r\n    {\r\n        pmtAccount = _pmt;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localityCode\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxRateNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pmt\",\"type\":\"address\"}],\"name\":\"modifyPMTAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"govtAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taxMult\",\"type\":\"uint256\"}],\"name\":\"modifyTaxRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pmtAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLocality\",\"type\":\"string\"}],\"name\":\"modifyLocality\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"govt\",\"type\":\"address\"}],\"name\":\"modifyGovtAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"name\":\"_taxRateMult\",\"type\":\"uint256\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_localityCode\",\"type\":\"string\"},{\"name\":\"_govt\",\"type\":\"address\"},{\"name\":\"_pmt\",\"type\":\"address\"},{\"name\":\"_universalToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LocalToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000002216f052bfdc538baeb5431614d6bd547a303c810000000000000000000000000e1999d99042f395f495c2353cb6b3a432250496000000000000000000000000347cfbdb73e1db39e32fec5c0304ae30e43709fc000000000000000000000000000000000000000000000000000000000000000a504d544c30303030303100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b50757265204d6f6e65792054656368204c6f63616c20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000002542656c6c65767565205741204b696e6720436f756e747920556e6974656420537461746573000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://59f2886c26e4f77539b069d0d07d4d86f3c565a310a7cf673a8328689d0b7845"}]}