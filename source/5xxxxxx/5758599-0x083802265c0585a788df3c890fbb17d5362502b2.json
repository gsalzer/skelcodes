{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  mapping(address => bool) public lockedAddressesAfterITO;\r\n\r\n  mapping(address => bool) public unlockedAddressesDuringITO;\r\n\r\n  address[] public tokenHolders;\r\n\r\n  modifier onlyOwnerOrSaleAgent() {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function unlockAddressDuringITO(address addressToUnlock) public onlyOwnerOrSaleAgent {\r\n    unlockedAddressesDuringITO[addressToUnlock] = true;\r\n  }\r\n\r\n  function lockAddressAfterITO(address addressToLock) public onlyOwnerOrSaleAgent {\r\n    lockedAddressesAfterITO[addressToLock] = true;\r\n  }\r\n\r\n  function unlockAddressAfterITO(address addressToUnlock) public onlyOwnerOrSaleAgent {\r\n    lockedAddressesAfterITO[addressToUnlock] = false;\r\n  }\r\n\r\n  function unlockBatchOfAddressesAfterITO(address[] addressesToUnlock) public onlyOwnerOrSaleAgent {\r\n    for(uint i = 0; i < addressesToUnlock.length; i++) lockedAddressesAfterITO[addressesToUnlock[i]] = false;\r\n  }\r\n\r\n\r\n  modifier notLocked(address sender) {\r\n    require((mintingFinished && !lockedAddressesAfterITO[sender]) ||\r\n            sender == saleAgent || \r\n            sender == owner ||\r\n            (!mintingFinished && unlockedAddressesDuringITO[sender]));\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public onlyOwnerOrSaleAgent {\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    if(balances[_to] == 0) tokenHolders.push(_to);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked(msg.sender) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked(from) returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReceivingContractCallback.sol\r\n\r\ncontract ReceivingContractCallback {\r\n\r\n  function tokenFallback(address _from, uint _value) public;\r\n\r\n}\r\n\r\n// File: contracts/GeseToken.sol\r\n\r\ncontract GeseToken is MintableToken {\r\n\r\n  string public constant name = \"Gese\";\r\n\r\n  string public constant symbol = \"GSE\";\r\n\r\n  uint32 public constant decimals = 2;\r\n\r\n  mapping(address => bool)  public registeredCallbacks;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    return processCallback(super.transfer(_to, _value), msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    return processCallback(super.transferFrom(_from, _to, _value), _from, _to, _value);\r\n  }\r\n\r\n  function registerCallback(address callback) public onlyOwner {\r\n    registeredCallbacks[callback] = true;\r\n  }\r\n\r\n  function deregisterCallback(address callback) public onlyOwner {\r\n    registeredCallbacks[callback] = false;\r\n  }\r\n\r\n  function processCallback(bool result, address from, address to, uint value) internal returns(bool) {\r\n    if (result && registeredCallbacks[to]) {\r\n      ReceivingContractCallback targetCallback = ReceivingContractCallback(to);\r\n      targetCallback.tokenFallback(from, value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/InvestedProvider.sol\r\n\r\ncontract InvestedProvider is Ownable {\r\n\r\n  uint public invested;\r\n\r\n}\r\n\r\n// File: contracts/PercentRateProvider.sol\r\n\r\ncontract PercentRateProvider is Ownable {\r\n\r\n  uint public percentRate = 100;\r\n\r\n  function setPercentRate(uint newPercentRate) public onlyOwner {\r\n    percentRate = newPercentRate;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/RetrieveTokensFeature.sol\r\n\r\ncontract RetrieveTokensFeature is Ownable {\r\n\r\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/WalletProvider.sol\r\n\r\ncontract WalletProvider is Ownable {\r\n\r\n  address public wallet;\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CommonSale.sol\r\n\r\ncontract CommonSale is InvestedProvider, WalletProvider, PercentRateProvider, RetrieveTokensFeature {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public directMintAgent;\r\n\r\n  uint public price;\r\n\r\n  uint public start;\r\n\r\n  uint public minInvestedLimit;\r\n\r\n  MintableToken public token;\r\n\r\n  uint public hardcap;\r\n\r\n  bool public lockAfterManuallyMint = true;\r\n\r\n  modifier isUnderHardcap() {\r\n    require(invested < hardcap);\r\n    _;\r\n  }\r\n\r\n  function setLockAfterManuallyMint(bool newLockAfterManuallyMint) public onlyOwner {\r\n    lockAfterManuallyMint = newLockAfterManuallyMint;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner {\r\n    hardcap = newHardcap;\r\n  }\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier minInvestLimited(uint value) {\r\n    require(value >= minInvestedLimit);\r\n    _;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = MintableToken(newToken);\r\n  }\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint);\r\n\r\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\r\n    mintTokens(to, tokens);\r\n    if(lockAfterManuallyMint) token.lockAddressAfterITO(to);\r\n  }\r\n\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(to, tokens);\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint);\r\n\r\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner {\r\n    mintTokensByETH(to, _invested);\r\n    if(lockAfterManuallyMint) token.lockAddressAfterITO(to);\r\n  }\r\n\r\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\r\n    invested = invested.add(_invested);\r\n    uint tokens = calculateTokens(_invested);\r\n    mintTokens(to, tokens);\r\n    return tokens;\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    wallet.transfer(msg.value);\r\n    token.lockAddressAfterITO(msg.sender);\r\n    return mintTokensByETH(msg.sender, msg.value);\r\n  }\r\n\r\n  function () public payable {\r\n    fallback();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/InputAddressFeature.sol\r\n\r\ncontract InputAddressFeature {\r\n\r\n  function bytesToAddress(bytes source) internal pure returns(address) {\r\n    uint result;\r\n    uint mul = 1;\r\n    for(uint i = 20; i > 0; i--) {\r\n      result += uint8(source[i-1])*mul;\r\n      mul = mul*256;\r\n    }\r\n    return address(result);\r\n  }\r\n\r\n  function getInputAddress() internal pure returns(address) {\r\n    if(msg.data.length == 20) {\r\n      return bytesToAddress(bytes(msg.data));\r\n    }\r\n    return address(0);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReferersRewardFeature.sol\r\n\r\ncontract ReferersRewardFeature is InputAddressFeature, CommonSale {\r\n\r\n  uint public refererPercent;\r\n\r\n  uint public referalsMinInvestLimit;\r\n\r\n  function setReferalsMinInvestLimit(uint newRefereralsMinInvestLimit) public onlyOwner {\r\n    referalsMinInvestLimit = newRefereralsMinInvestLimit;\r\n  }\r\n\r\n  function setRefererPercent(uint newRefererPercent) public onlyOwner {\r\n    refererPercent = newRefererPercent;\r\n  }\r\n\r\n  function fallback() internal returns(uint) {\r\n    uint tokens = super.fallback();\r\n    if(msg.value >= referalsMinInvestLimit) {\r\n      address referer = getInputAddress();\r\n      if(referer != address(0)) {\r\n        require(referer != address(token) && referer != msg.sender && referer != address(this));\r\n        mintTokens(referer, tokens.mul(refererPercent).div(percentRate));\r\n      }\r\n    }\r\n    return tokens;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/StagedCrowdsale.sol\r\n\r\ncontract StagedCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Milestone {\r\n    uint period;\r\n    uint bonus;\r\n  }\r\n\r\n  uint public totalPeriod;\r\n\r\n  Milestone[] public milestones;\r\n\r\n  function milestonesCount() public view returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function addMilestone(uint period, uint bonus) public onlyOwner {\r\n    require(period > 0);\r\n    milestones.push(Milestone(period, bonus));\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function removeMilestone(uint8 number) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    delete milestones[number];\r\n\r\n    for (uint i = number; i < milestones.length - 1; i++) {\r\n      milestones[i] = milestones[i+1];\r\n    }\r\n\r\n    milestones.length--;\r\n  }\r\n\r\n  function changeMilestone(uint8 number, uint period, uint bonus) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    milestone.period = period;\r\n    milestone.bonus = bonus;\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) public onlyOwner {\r\n    require(numberAfter < milestones.length);\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n\r\n    milestones.length++;\r\n\r\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\r\n      milestones[i + 1] = milestones[i];\r\n    }\r\n\r\n    milestones[numberAfter + 1] = Milestone(period, bonus);\r\n  }\r\n\r\n  function clearMilestones() public onlyOwner {\r\n    require(milestones.length > 0);\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      delete milestones[i];\r\n    }\r\n    milestones.length -= milestones.length;\r\n    totalPeriod = 0;\r\n  }\r\n\r\n  function lastSaleDate(uint start) public view returns(uint) {\r\n    return start + totalPeriod * 1 days;\r\n  }\r\n\r\n  function currentMilestone(uint start) public view returns(uint) {\r\n    uint previousDate = start;\r\n    for(uint i=0; i < milestones.length; i++) {\r\n      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\r\n        return i;\r\n      }\r\n      previousDate = previousDate.add(milestones[i].period * 1 days);\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReferersCommonSale.sol\r\n\r\ncontract ReferersCommonSale is RetrieveTokensFeature, ReferersRewardFeature {\r\n\r\n\r\n}\r\n\r\n// File: contracts/AssembledCommonSale.sol\r\n\r\ncontract AssembledCommonSale is StagedCrowdsale, ReferersCommonSale {\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint milestoneIndex = currentMilestone(start);\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    uint tokens = _invested.mul(price).div(1 ether);\r\n    if(milestone.bonus > 0) {\r\n      tokens = tokens.add(tokens.mul(milestone.bonus).div(percentRate));\r\n    }\r\n    return tokens;\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return lastSaleDate(start);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ITO.sol\r\n\r\ncontract ITO is AssembledCommonSale {\r\n\r\n  address public bountyTokensWallet;\r\n\r\n  address public advisorsTokensWallet;\r\n  \r\n  address public teamTokensWallet;\r\n\r\n  address public reservedTokensWallet;\r\n\r\n  uint public bountyTokensPercent;\r\n  \r\n  uint public advisorsTokensPercent;\r\n\r\n  uint public teamTokensPercent;\r\n\r\n  uint public reservedTokensPercent;\r\n\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n  \r\n  function setAdvisorsTokensPercent(uint newAdvisorsTokensPercent) public onlyOwner {\r\n    advisorsTokensPercent = newAdvisorsTokensPercent;\r\n  }\r\n\r\n  function setTeamTokensPercent(uint newTeamTokensPercent) public onlyOwner {\r\n    teamTokensPercent = newTeamTokensPercent;\r\n  }\r\n\r\n  function setReservedTokensPercent(uint newReservedTokensPercent) public onlyOwner {\r\n    reservedTokensPercent = newReservedTokensPercent;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function setAdvisorsTokensWallet(address newAdvisorsTokensWallet) public onlyOwner {\r\n    advisorsTokensWallet = newAdvisorsTokensWallet;\r\n  }\r\n\r\n  function setTeamTokensWallet(address newTeamTokensWallet) public onlyOwner {\r\n    teamTokensWallet = newTeamTokensWallet;\r\n  }\r\n\r\n  function setReservedTokensWallet(address newReservedTokensWallet) public onlyOwner {\r\n    reservedTokensWallet = newReservedTokensWallet;\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    uint summaryTokensPercent = bountyTokensPercent.add(advisorsTokensPercent).add(teamTokensPercent).add(reservedTokensPercent);\r\n    uint mintedTokens = token.totalSupply();\r\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\r\n    uint advisorsTokens = allTokens.mul(advisorsTokensPercent).div(percentRate);\r\n    uint bountyTokens = allTokens.mul(bountyTokensPercent).div(percentRate);\r\n    uint teamTokens = allTokens.mul(teamTokensPercent).div(percentRate);\r\n    uint reservedTokens = allTokens.mul(reservedTokensPercent).div(percentRate);\r\n    mintTokens(advisorsTokensWallet, advisorsTokens);\r\n    mintTokens(bountyTokensWallet, bountyTokens);\r\n    mintTokens(teamTokensWallet, teamTokens);\r\n    mintTokens(reservedTokensWallet, reservedTokens);\r\n    token.finishMinting();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/NextSaleAgentFeature.sol\r\n\r\ncontract NextSaleAgentFeature is Ownable {\r\n\r\n  address public nextSaleAgent;\r\n\r\n  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\r\n    nextSaleAgent = newNextSaleAgent;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SoftcapFeature.sol\r\n\r\ncontract SoftcapFeature is InvestedProvider, WalletProvider {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) public balances;\r\n\r\n  bool public softcapAchieved;\r\n\r\n  bool public refundOn;\r\n\r\n  uint public softcap;\r\n\r\n  uint public constant devLimit = 4500000000000000000;\r\n\r\n  address public constant devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\r\n\r\n  function setSoftcap(uint newSoftcap) public onlyOwner {\r\n    softcap = newSoftcap;\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(msg.sender == owner || msg.sender == devWallet);\r\n    require(softcapAchieved);\r\n    devWallet.transfer(devLimit);\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function updateBalance(address to, uint amount) internal {\r\n    balances[to] = balances[to].add(amount);\r\n    if (!softcapAchieved && invested >= softcap) {\r\n      softcapAchieved = true;\r\n    }\r\n  }\r\n\r\n  function refund() public {\r\n    require(refundOn && balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n\r\n  function updateRefundState() internal returns(bool) {\r\n    if (!softcapAchieved) {\r\n      refundOn = true;\r\n    }\r\n    return refundOn;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PreITO.sol\r\n\r\ncontract PreITO is NextSaleAgentFeature, SoftcapFeature, ReferersCommonSale {\r\n\r\n  uint public period;\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    return _invested.mul(price).div(1 ether);\r\n  }\r\n\r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    period = newPeriod;\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return start.add(period * 1 days);\r\n  }\r\n  \r\n  function mintTokensByETH(address to, uint _invested) internal returns(uint) {\r\n    uint _tokens = super.mintTokensByETH(to, _invested);\r\n    updateBalance(to, _invested);\r\n    return _tokens;\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    if (updateRefundState()) {\r\n      token.finishMinting();\r\n    } else {\r\n      withdraw();\r\n      token.setSaleAgent(nextSaleAgent);\r\n    }\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    token.lockAddressAfterITO(msg.sender);\r\n    uint tokens = mintTokensByETH(msg.sender, msg.value);\r\n    if(msg.value >= referalsMinInvestLimit) {\r\n      address referer = getInputAddress();\r\n      if(referer != address(0)) {\r\n        require(referer != address(token) && referer != msg.sender && referer != address(this));\r\n        mintTokens(referer, tokens.mul(refererPercent).div(percentRate));\r\n      }\r\n    }\r\n    return tokens;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Configurator.sol\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  MintableToken public token;\r\n\r\n  PreITO public preITO;\r\n\r\n  ITO public ito;\r\n\r\n  function deploy() public onlyOwner {\r\n\r\n    token = new GeseToken();\r\n\r\n    preITO = new PreITO();\r\n\r\n    preITO.setWallet(0xa86780383E35De330918D8e4195D671140A60A74);\r\n    preITO.setStart(1529971200);\r\n    preITO.setPeriod(14);\r\n    preITO.setPrice(786700);\r\n    preITO.setMinInvestedLimit(100000000000000000);\r\n    preITO.setHardcap(3818000000000000000000);\r\n    preITO.setSoftcap(3640000000000000000000);\r\n    preITO.setReferalsMinInvestLimit(100000000000000000);\r\n    preITO.setRefererPercent(5);\r\n    preITO.setToken(token);\r\n\r\n    token.setSaleAgent(preITO);\r\n\r\n    ito = new ITO();\r\n\r\n    ito.setWallet(0x98882D176234AEb736bbBDB173a8D24794A3b085);\r\n    ito.setStart(1536105600);\r\n    ito.addMilestone(5, 33);\r\n    ito.addMilestone(5, 18);\r\n    ito.addMilestone(5, 11);\r\n    ito.addMilestone(5, 5);\r\n    ito.addMilestone(10, 0);\r\n    ito.setPrice(550000);\r\n    ito.setMinInvestedLimit(100000000000000000);\r\n    ito.setHardcap(49090000000000000000000);\r\n    ito.setBountyTokensWallet(0x28732f6dc12606D529a020b9ac04C9d6f881D3c5);\r\n    ito.setAdvisorsTokensWallet(0x28732f6dc12606D529a020b9ac04C9d6f881D3c5);\r\n    ito.setTeamTokensWallet(0x28732f6dc12606D529a020b9ac04C9d6f881D3c5);\r\n    ito.setReservedTokensWallet(0x28732f6dc12606D529a020b9ac04C9d6f881D3c5);\r\n    ito.setBountyTokensPercent(5);\r\n    ito.setAdvisorsTokensPercent(10);\r\n    ito.setTeamTokensPercent(10);\r\n    ito.setReservedTokensPercent(10);\r\n    ito.setReferalsMinInvestLimit(100000000000000000);\r\n    ito.setRefererPercent(5);\r\n    ito.setToken(token);\r\n\r\n    preITO.setNextSaleAgent(ito);\r\n\r\n    address manager = 0x6c29554bD66D788Aa15D9B80A1Fff0717614341c;\r\n\r\n    token.transferOwnership(manager);\r\n    preITO.transferOwnership(manager);\r\n    ito.transferOwnership(manager);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAddressesAfterITO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSaleAgnet\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToUnlock\",\"type\":\"address\"}],\"name\":\"unlockAddressDuringITO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callback\",\"type\":\"address\"}],\"name\":\"deregisterCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToUnlock\",\"type\":\"address\"}],\"name\":\"unlockAddressAfterITO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToLock\",\"type\":\"address\"}],\"name\":\"lockAddressAfterITO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressesToUnlock\",\"type\":\"address[]\"}],\"name\":\"unlockBatchOfAddressesAfterITO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callback\",\"type\":\"address\"}],\"name\":\"registerCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedAddressesDuringITO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredCallbacks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GeseToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://03ce798bdd8745c24a135bca02928152ce1988838f42adf005bc354f07116211"}]}