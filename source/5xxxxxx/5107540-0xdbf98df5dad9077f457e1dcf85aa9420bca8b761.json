{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n//Interfaces\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n}\r\n\r\ncontract UnilotToken is ERC20 {\r\n    struct TokenStage {\r\n        string name;\r\n        uint numCoinsStart;\r\n        uint coinsAvailable;\r\n        uint bonus;\r\n        uint startsAt;\r\n        uint endsAt;\r\n        uint balance; //Amount of ether sent during this stage\r\n    }\r\n\r\n    //Token symbol\r\n    string public constant symbol = \"UNIT\";\r\n    //Token name\r\n    string public constant name = \"Unilot token\";\r\n    //It can be reeeealy small\r\n    uint8 public constant decimals = 18;\r\n\r\n    //This one duplicates the above but will have to use it because of\r\n    //solidity bug with power operation\r\n    uint public constant accuracy = 1000000000000000000;\r\n\r\n    //500 mln tokens\r\n    uint256 internal _totalSupply = 500 * (10**6) * accuracy;\r\n\r\n    //Public investor can buy tokens for 30 ether at maximum\r\n    uint256 public constant singleInvestorCap = 30 ether; //30 ether\r\n\r\n    //Distribution units\r\n    uint public constant DST_ICO     = 62; //62%\r\n    uint public constant DST_RESERVE = 10; //10%\r\n    uint public constant DST_BOUNTY  = 3;  //3%\r\n    //Referral and Bonus Program\r\n    uint public constant DST_R_N_B_PROGRAM = 10; //10%\r\n    uint public constant DST_ADVISERS      = 5;  //5%\r\n    uint public constant DST_TEAM          = 10; //10%\r\n\r\n    //Referral Bonuses\r\n    uint public constant REFERRAL_BONUS_LEVEL1 = 5; //5%\r\n    uint public constant REFERRAL_BONUS_LEVEL2 = 4; //4%\r\n    uint public constant REFERRAL_BONUS_LEVEL3 = 3; //3%\r\n    uint public constant REFERRAL_BONUS_LEVEL4 = 2; //2%\r\n    uint public constant REFERRAL_BONUS_LEVEL5 = 1; //1%\r\n\r\n    //Token amount\r\n    //25 mln tokens\r\n    uint public constant TOKEN_AMOUNT_PRE_ICO = 25 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1 = 5 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2 = 5 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3 = 5 * (10**6) * accuracy;\r\n    //5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4 = 5 * (10**6) * accuracy;\r\n    //122.5 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5 = 1225 * (10**5) * accuracy;\r\n    //265 mln tokens\r\n    uint public constant TOKEN_AMOUNT_ICO_STAGE2 = 1425 * (10**5) * accuracy;\r\n\r\n    uint public constant BONUS_PRE_ICO = 40; //40%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE1 = 35; //35%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE2 = 30; //30%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE3 = 25; //25%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE4 = 20; //20%\r\n    uint public constant BONUS_ICO_STAGE1_PRE_SALE5 = 0; //0%\r\n    uint public constant BONUS_ICO_STAGE2 = 0; //No bonus\r\n\r\n    //Token Price on Coin Offer\r\n    uint256 public constant price = 79 szabo; //0.000079 ETH\r\n\r\n    address public constant ADVISORS_WALLET = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\r\n    address public constant RESERVE_WALLET = 0x731B47847352fA2cFf83D5251FD6a5266f90878d;\r\n    address public constant BOUNTY_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\r\n    address public constant R_N_D_WALLET = 0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb;\r\n    address public constant STORAGE_WALLET = 0xE2A8F147fc808738Cab152b01C7245F386fD8d89;\r\n\r\n    // Owner of this contract\r\n    address public administrator;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    //Mostly needed for internal use\r\n    uint256 internal totalCoinsAvailable;\r\n\r\n    //All token stages. Total 6 stages\r\n    TokenStage[7] stages;\r\n\r\n    //Index of current stage in stage array\r\n    uint currentStage;\r\n\r\n    //Enables or disables debug mode. Debug mode is set only in constructor.\r\n    bool isDebug = false;\r\n\r\n    event StageUpdated(string from, string to);\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyAdministrator() {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    modifier notAdministrator() {\r\n        require(msg.sender != administrator);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringICO() {\r\n        require(currentStage < stages.length);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterICO(){\r\n        require(currentStage >= stages.length);\r\n        _;\r\n    }\r\n\r\n    modifier meetTheCap() {\r\n        require(msg.value >= price); // At least one token\r\n        _;\r\n    }\r\n\r\n    modifier isFreezedReserve(address _address) {\r\n        require( ( _address == RESERVE_WALLET ) && now > (stages[ (stages.length - 1) ].endsAt + 182 days));\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function UnilotToken()\r\n        public\r\n    {\r\n        administrator = msg.sender;\r\n        totalCoinsAvailable = _totalSupply;\r\n        //Was as fn parameter for debugging\r\n        isDebug = false;\r\n\r\n        _setupStages();\r\n        _proceedStage();\r\n    }\r\n\r\n    function prealocateCoins()\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        totalCoinsAvailable -= balances[ADVISORS_WALLET] += ( ( _totalSupply * DST_ADVISERS ) / 100 );\r\n        totalCoinsAvailable -= balances[RESERVE_WALLET] += ( ( _totalSupply * DST_RESERVE ) / 100 );\r\n\r\n        address[7] memory teamWallets = getTeamWallets();\r\n        uint teamSupply = ( ( _totalSupply * DST_TEAM ) / 100 );\r\n        uint memberAmount = teamSupply / teamWallets.length;\r\n\r\n        for(uint i = 0; i < teamWallets.length; i++) {\r\n            if ( i == ( teamWallets.length - 1 ) ) {\r\n                memberAmount = teamSupply;\r\n            }\r\n\r\n            balances[teamWallets[i]] += memberAmount;\r\n            teamSupply -= memberAmount;\r\n            totalCoinsAvailable -= memberAmount;\r\n        }\r\n    }\r\n\r\n    function getTeamWallets()\r\n        public\r\n        pure\r\n        returns (address[7] memory result)\r\n    {\r\n        result[0] = 0x40e3D8fFc46d73Ab5DF878C751D813a4cB7B388D;\r\n        result[1] = 0x5E065a80f6635B6a46323e3383057cE6051aAcA0;\r\n        result[2] = 0x0cF3585FbAB2a1299F8347a9B87CF7B4fcdCE599;\r\n        result[3] = 0x5fDd3BA5B6Ff349d31eB0a72A953E454C99494aC;\r\n        result[4] = 0xC9be9818eE1B2cCf2E4f669d24eB0798390Ffb54;\r\n        result[5] = 0x77660795BD361Cd43c3627eAdad44dDc2026aD17;\r\n        result[6] = 0xd13289203889bD898d49e31a1500388441C03663;\r\n    }\r\n\r\n    function _setupStages()\r\n        internal\r\n    {\r\n        //Presale stage\r\n        stages[0].name = 'Presale stage';\r\n        stages[0].numCoinsStart = totalCoinsAvailable;\r\n        stages[0].coinsAvailable = TOKEN_AMOUNT_PRE_ICO;\r\n        stages[0].bonus = BONUS_PRE_ICO;\r\n\r\n        if (isDebug) {\r\n            stages[0].startsAt = now;\r\n            stages[0].endsAt = stages[0].startsAt + 30 seconds;\r\n        } else {\r\n            stages[0].startsAt = 1515610800; //10th of January 2018 at 19:00UTC\r\n            stages[0].endsAt = 1518894000; //17th of February 2018 at 19:00UTC\r\n        }\r\n\r\n        //ICO Stage 1 pre-sale 1\r\n        stages[1].name = 'ICO Stage 1 pre-sale 1';\r\n        stages[1].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1;\r\n        stages[1].bonus = BONUS_ICO_STAGE1_PRE_SALE1;\r\n\r\n        if (isDebug) {\r\n            stages[1].startsAt = stages[0].endsAt;\r\n            stages[1].endsAt = stages[1].startsAt + 30 seconds;\r\n        } else {\r\n            stages[1].startsAt = 1519326000; //22th of February 2018 at 19:00UTC\r\n            stages[1].endsAt = 1521745200; //22th of March 2018 at 19:00UTC\r\n        }\r\n\r\n        //ICO Stage 1 pre-sale 2\r\n        stages[2].name = 'ICO Stage 1 pre-sale 2';\r\n        stages[2].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2;\r\n        stages[2].bonus = BONUS_ICO_STAGE1_PRE_SALE2;\r\n\r\n        stages[2].startsAt = stages[1].startsAt;\r\n        stages[2].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 1 pre-sale 3\r\n        stages[3].name = 'ICO Stage 1 pre-sale 3';\r\n        stages[3].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3;\r\n        stages[3].bonus = BONUS_ICO_STAGE1_PRE_SALE3;\r\n\r\n        stages[3].startsAt = stages[1].startsAt;\r\n        stages[3].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 1 pre-sale 4\r\n        stages[4].name = 'ICO Stage 1 pre-sale 4';\r\n        stages[4].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4;\r\n        stages[4].bonus = BONUS_ICO_STAGE1_PRE_SALE4;\r\n\r\n        stages[4].startsAt = stages[1].startsAt;\r\n        stages[4].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 1 pre-sale 5\r\n        stages[5].name = 'ICO Stage 1 pre-sale 5';\r\n        stages[5].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE5;\r\n        stages[5].bonus = BONUS_ICO_STAGE1_PRE_SALE5;\r\n\r\n        stages[5].startsAt = stages[1].startsAt;\r\n        stages[5].endsAt = stages[1].endsAt;\r\n\r\n        //ICO Stage 2\r\n        stages[6].name = 'ICO Stage 2';\r\n        stages[6].coinsAvailable = TOKEN_AMOUNT_ICO_STAGE2;\r\n        stages[6].bonus = BONUS_ICO_STAGE2;\r\n\r\n        if (isDebug) {\r\n            stages[6].startsAt = stages[5].endsAt;\r\n            stages[6].endsAt = stages[6].startsAt + 30 seconds;\r\n        } else {\r\n            stages[6].startsAt = 1524250800; //20th of April 2018 at 19:00UTC\r\n            stages[6].endsAt = 1526842800; //20th of May 2018 at 19:00UTC\r\n        }\r\n    }\r\n\r\n    function _proceedStage()\r\n        internal\r\n    {\r\n        while (true) {\r\n            if ( currentStage < stages.length\r\n            && (now >= stages[currentStage].endsAt || getAvailableCoinsForCurrentStage() == 0) ) {\r\n                currentStage++;\r\n                uint totalTokensForSale = TOKEN_AMOUNT_PRE_ICO\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE1\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE2\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE3\r\n                                    + TOKEN_AMOUNT_ICO_STAGE1_PRE_SALE4\r\n                                    + TOKEN_AMOUNT_ICO_STAGE2;\r\n\r\n                if (currentStage >= stages.length) {\r\n                    //Burning all unsold tokens and proportionally other for deligation\r\n                    _totalSupply -= ( ( ( stages[(stages.length - 1)].coinsAvailable * DST_BOUNTY ) / 100 )\r\n                                    + ( ( stages[(stages.length - 1)].coinsAvailable * DST_R_N_B_PROGRAM ) / 100 ) );\r\n\r\n                    balances[BOUNTY_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_BOUNTY)/100);\r\n                    balances[R_N_D_WALLET] = (((totalTokensForSale - stages[(stages.length - 1)].coinsAvailable) * DST_R_N_B_PROGRAM)/100);\r\n\r\n                    totalCoinsAvailable = 0;\r\n                    break; //ICO ended\r\n                }\r\n\r\n                stages[currentStage].numCoinsStart = totalCoinsAvailable;\r\n\r\n                if ( currentStage > 0 ) {\r\n                    //Move all left tokens to last stage\r\n                    stages[(stages.length - 1)].coinsAvailable += stages[ (currentStage - 1 ) ].coinsAvailable;\r\n                    StageUpdated(stages[currentStage - 1].name, stages[currentStage].name);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTotalCoinsAvailable()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return totalCoinsAvailable;\r\n    }\r\n\r\n    function getAvailableCoinsForCurrentStage()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        TokenStage memory stage = stages[currentStage];\r\n\r\n        return stage.coinsAvailable;\r\n    }\r\n\r\n    //------------- ERC20 methods -------------//\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        onlyAfterICO\r\n        isFreezedReserve(_to)\r\n        returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        onlyAfterICO\r\n        isFreezedReserve(_from)\r\n        isFreezedReserve(_to)\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        onlyAfterICO\r\n        isFreezedReserve(_spender)\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    //------------- ERC20 Methods END -------------//\r\n\r\n    //Returns bonus for certain level of reference\r\n    function calculateReferralBonus(uint amount, uint level)\r\n        public\r\n        pure\r\n        returns (uint bonus)\r\n    {\r\n        bonus = 0;\r\n\r\n        if ( level == 1 ) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL1 ) / 100 );\r\n        } else if (level == 2) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL2 ) / 100 );\r\n        } else if (level == 3) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL3 ) / 100 );\r\n        } else if (level == 4) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL4 ) / 100 );\r\n        } else if (level == 5) {\r\n            bonus = ( ( amount * REFERRAL_BONUS_LEVEL5 ) / 100 );\r\n        }\r\n    }\r\n\r\n    function calculateBonus(uint amountOfTokens)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return ( ( stages[currentStage].bonus * amountOfTokens ) / 100 );\r\n    }\r\n\r\n    event TokenPurchased(string stage, uint valueSubmitted, uint valueRefunded, uint tokensPurchased);\r\n\r\n    function ()\r\n        public\r\n        payable\r\n        notAdministrator\r\n        onlyDuringICO\r\n        meetTheCap\r\n    {\r\n        _proceedStage();\r\n        require(currentStage < stages.length);\r\n        require(stages[currentStage].startsAt <= now && now < stages[currentStage].endsAt);\r\n        require(getAvailableCoinsForCurrentStage() > 0);\r\n\r\n        uint requestedAmountOfTokens = ( ( msg.value * accuracy ) / price );\r\n        uint amountToBuy = requestedAmountOfTokens;\r\n        uint refund = 0;\r\n\r\n        if ( amountToBuy > getAvailableCoinsForCurrentStage() ) {\r\n            amountToBuy = getAvailableCoinsForCurrentStage();\r\n            refund = ( ( (requestedAmountOfTokens - amountToBuy) / accuracy ) * price );\r\n\r\n            // Returning ETH\r\n            msg.sender.transfer( refund );\r\n        }\r\n\r\n        TokenPurchased(stages[currentStage].name, msg.value, refund, amountToBuy);\r\n        stages[currentStage].coinsAvailable -= amountToBuy;\r\n        stages[currentStage].balance += (msg.value - refund);\r\n\r\n        uint amountDelivered = amountToBuy + calculateBonus(amountToBuy);\r\n\r\n        balances[msg.sender] += amountDelivered;\r\n        totalCoinsAvailable -= amountDelivered;\r\n\r\n        if ( getAvailableCoinsForCurrentStage() == 0 ) {\r\n            _proceedStage();\r\n        }\r\n\r\n        STORAGE_WALLET.transfer(this.balance);\r\n    }\r\n\r\n    //It doesn't really close the stage\r\n    //It just needed to push transaction to update stage and update block.now\r\n    function closeStage()\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        _proceedStage();\r\n    }\r\n}\r\n\r\ncontract ERC20Contract is ERC20 {\r\n    //Token symbol\r\n    string public constant symbol = \"UNIT\";\r\n\r\n    //Token name\r\n    string public constant name = \"Unilot token\";\r\n\r\n    //It can be reeeealy small\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint96) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint96)) allowed;\r\n\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint);\r\n\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= uint96(_amount);\r\n            balances[_to] += uint96(_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= uint96(_amount);\r\n            allowed[_from][msg.sender] -= uint96(_amount);\r\n            balances[_to] += uint96(_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = uint96(_amount);\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract ExternalCurrencyPrice {\r\n    struct CurrencyValue {\r\n        uint64 value;\r\n        uint8 decimals;\r\n    }\r\n\r\n    struct Transaction {\r\n        string currency;\r\n        uint64 value;\r\n        string transactionId;\r\n        uint64 price;\r\n        uint8  decimals;\r\n    }\r\n\r\n    struct RefundTransaction {\r\n        uint sourceTransaction;\r\n        uint88 refundAmount;\r\n    }\r\n\r\n    mapping(string => CurrencyValue) prices;\r\n\r\n    Transaction[] public transactions;\r\n    RefundTransaction[] public refundTransactions;\r\n\r\n    address owner;\r\n\r\n    event NewTransaction(string currency, uint64 value, string transactionId,\r\n                                                            uint64 price, uint8 decimals);\r\n    event NewRefundTransaction(uint sourceTransaction, uint88 refundAmount);\r\n    event PriceSet(string currency, uint64 value, uint8 decimals);\r\n\r\n    modifier onlyAdministrator() {\r\n        require(tx.origin == owner);\r\n        _;\r\n    }\r\n\r\n    function ExternalCurrencyPrice()\r\n        public\r\n    {\r\n        owner = tx.origin;\r\n    }\r\n\r\n    //Example: 0.00007115 BTC will be setPrice(\"BTC\", 7115, 8)\r\n    function setPrice(string currency, uint64 value, uint8 decimals)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        prices[currency].value = value;\r\n        prices[currency].decimals = decimals;\r\n        PriceSet(currency, value, decimals);\r\n    }\r\n\r\n    function getPrice(string currency)\r\n        public\r\n        view\r\n        returns(uint64 value, uint8 decimals)\r\n    {\r\n        value = prices[currency].value;\r\n        decimals = prices[currency].decimals;\r\n    }\r\n\r\n    //Value is returned with accuracy of 18 decimals (same as token)\r\n    //Example: to calculate value of 1 BTC call\r\n    // should look like calculateAmount(\"BTC\", 100000000)\r\n    // See setPrice example (8 decimals)\r\n    function calculateAmount(string currency, uint64 value)\r\n        public\r\n        view\r\n        returns (uint88 amount)\r\n    {\r\n        require(prices[currency].value > 0);\r\n        require(value >= prices[currency].value);\r\n\r\n        amount = uint88( ( uint(value) * ( 10**18 ) ) / prices[currency].value );\r\n    }\r\n\r\n    function calculatePrice(string currency, uint88 amount)\r\n        public\r\n        view\r\n        returns (uint64 price)\r\n    {\r\n        require(prices[currency].value > 0);\r\n\r\n        price = uint64( amount * prices[currency].value );\r\n    }\r\n\r\n    function addTransaction(string currency, uint64 value, string transactionId)\r\n        public\r\n        onlyAdministrator\r\n        returns (uint newTransactionId)\r\n    {\r\n        require(prices[currency].value > 0);\r\n\r\n        newTransactionId = transactions.length;\r\n\r\n        Transaction memory transaction;\r\n\r\n        transaction.currency = currency;\r\n        transaction.value = value;\r\n        transaction.decimals = prices[currency].decimals;\r\n        transaction.price = prices[currency].value;\r\n        transaction.transactionId = transactionId;\r\n\r\n        transactions.push(transaction);\r\n\r\n        NewTransaction(transaction.currency, transaction.value, transaction.transactionId,\r\n            transaction.price, transaction.decimals);\r\n    }\r\n\r\n    function getNumTransactions()\r\n        public\r\n        constant\r\n        returns(uint length)\r\n    {\r\n        length = transactions.length;\r\n    }\r\n\r\n    function addRefundTransaction(uint sourceTransaction, uint88 refundAmount)\r\n        public\r\n        onlyAdministrator\r\n        returns (uint newTransactionId)\r\n    {\r\n        require(sourceTransaction < transactions.length);\r\n\r\n        newTransactionId = refundTransactions.length;\r\n\r\n        RefundTransaction memory transaction;\r\n\r\n        transaction.sourceTransaction = sourceTransaction;\r\n        transaction.refundAmount = refundAmount;\r\n\r\n        refundTransactions.push(transaction);\r\n\r\n        NewRefundTransaction(transaction.sourceTransaction, transaction.refundAmount);\r\n    }\r\n\r\n    function getNumRefundTransactions()\r\n        public\r\n        constant\r\n        returns(uint length)\r\n    {\r\n        length = refundTransactions.length;\r\n    }\r\n}\r\n\r\ncontract PreSaleUNIT is ERC20Contract {\r\n    ERC20[3] internal tokens;\r\n\r\n    ExternalCurrencyPrice externalCurrencyProcessor;\r\n\r\n    uint88 pool = 24000000000000000000000000; //24 mln tokens\r\n\r\n    uint32 internal endDate = 1519326000;  //22 February 2018 19:00 UTC\r\n\r\n    uint8 internal discount = 40;          //40%\r\n\r\n    address internal owner;\r\n\r\n    event AddToken(address NewToken, uint8 index);\r\n    event BuyTokensDirect(address buyer, uint72 eth_amount, uint88 paid_amount, uint88 bonus_amount);\r\n    event BuyTokensExternal(address buyer, string currency, uint72 amount, uint88 paid_amount, uint88 bonus_amount);\r\n    event ChangeDate(uint32 new_date);\r\n    event ChangeDiscount(uint8 new_discount);\r\n    event ChangePool(uint88 new_pool);\r\n\r\n    modifier onlyAdministrator() {\r\n        require(tx.origin == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notAdministrator() {\r\n        require(tx.origin != owner);\r\n        _;\r\n    }\r\n\r\n    modifier poolIsNotEmpty() {\r\n        require(pool > 0);\r\n        _;\r\n    }\r\n\r\n    modifier didntRanOutOfTime() {\r\n        require(uint32(now) <= endDate);\r\n        _;\r\n    }\r\n\r\n    function PreSaleUNIT(ERC20 _token)\r\n        public\r\n    {\r\n        tokens[0] = _token;\r\n        owner = tx.origin;\r\n    }\r\n\r\n    function getOwner()\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return owner;\r\n    }\r\n\r\n    function getTokens()\r\n        public\r\n        constant\r\n        returns(ERC20[3])\r\n    {\r\n        return tokens;\r\n    }\r\n\r\n    function getPool()\r\n        public\r\n        constant\r\n        returns(uint88)\r\n    {\r\n        return pool;\r\n    }\r\n\r\n    function getBaseToken()\r\n        public\r\n        constant\r\n        returns(UnilotToken _token)\r\n    {\r\n        _token = UnilotToken(tokens[0]);\r\n    }\r\n\r\n    function getExternalCurrencyProcessor()\r\n        public\r\n        onlyAdministrator\r\n        returns(ExternalCurrencyPrice)\r\n    {\r\n        return externalCurrencyProcessor;\r\n    }\r\n\r\n    //Admin fns\r\n    function addToken(ERC20 _token)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        require(_token != address(0));\r\n\r\n        for(uint8 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i] == _token) {\r\n                break;\r\n            } else if (tokens[i] == address(0)) {\r\n                tokens[i] = _token;\r\n                AddToken(_token, i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeEndDate(uint32 _endDate)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        endDate = _endDate;\r\n        ChangeDate(endDate);\r\n    }\r\n\r\n    function changeDiscount(uint8 _discount)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        discount = _discount;\r\n        ChangeDiscount(discount);\r\n    }\r\n\r\n    function changePool(uint88 _pool)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        pool = _pool;\r\n        ChangePool(pool);\r\n    }\r\n\r\n    function setExternalCurrencyProcessor(ExternalCurrencyPrice processor)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        externalCurrencyProcessor = processor;\r\n    }\r\n\r\n    function paymentWithCurrency(address buyer, string currency, uint64 value, string transactionId)\r\n        public\r\n        onlyAdministrator\r\n        poolIsNotEmpty\r\n        didntRanOutOfTime\r\n    {\r\n        require(buyer != owner);\r\n\r\n        ExternalCurrencyPrice processor = getExternalCurrencyProcessor();\r\n        uint88 paid_tokens = processor.calculateAmount(currency, value);\r\n        uint88 bonus_tokens = uint88((paid_tokens * discount) / 100);\r\n        uint88 refund_amount = 0;\r\n\r\n        if((paid_tokens + bonus_tokens) > pool) {\r\n            paid_tokens = uint88( pool / ( ( 100 + discount ) / 100 ) );\r\n            bonus_tokens = uint88( pool - paid_tokens );\r\n            refund_amount = ( value - processor.calculatePrice(currency, paid_tokens) );\r\n        }\r\n\r\n        balances[buyer] += uint96(paid_tokens + bonus_tokens);\r\n\r\n        BuyTokensExternal(buyer, currency, value, paid_tokens, bonus_tokens);\r\n\r\n        uint processorTransactionId = processor.addTransaction(currency, value, transactionId);\r\n\r\n        if ( refund_amount > 0 ) {\r\n            processor.addRefundTransaction(processorTransactionId, refund_amount);\r\n        }\r\n    }\r\n    //END Admin fns\r\n\r\n    //ERC20\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return uint(tokens[0].totalSupply());\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint balance)\r\n    {\r\n        balance = super.balanceOf(_owner);\r\n\r\n        for ( uint8 i = 0; i < tokens.length; i++ ) {\r\n            if (tokens[i] == address(0)) {\r\n                break;\r\n            }\r\n\r\n            balance += uint96(tokens[i].balanceOf(_owner));\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        success = false;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        success = false;\r\n    }\r\n\r\n    function approve(address _spender, uint _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        success = false;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint remaining)\r\n    {\r\n        remaining = 0;\r\n    }\r\n    //END ERC20\r\n\r\n    function()\r\n        public\r\n        payable\r\n        notAdministrator\r\n        poolIsNotEmpty\r\n        didntRanOutOfTime\r\n    {\r\n        UnilotToken baseToken = getBaseToken();\r\n\r\n        address storageWallet = baseToken.STORAGE_WALLET();\r\n        uint48 price = uint48(baseToken.price());\r\n        uint72 eth_amount = uint72(msg.value);\r\n        uint64 accuracy = uint64( baseToken.accuracy() );\r\n        uint88 paid_tokens = uint88( ( uint(eth_amount) * accuracy / price ) );\r\n        uint88 bonus_tokens = uint88((paid_tokens * discount) / 100);\r\n\r\n        if((paid_tokens + bonus_tokens) > pool) {\r\n            paid_tokens = uint88( pool / ( ( 100 + discount ) / 100 ) );\r\n            bonus_tokens = uint88( pool - paid_tokens );\r\n            eth_amount = uint72( (paid_tokens / accuracy) * price );\r\n            msg.sender.transfer( msg.value - eth_amount );\r\n        }\r\n\r\n        BuyTokensDirect(msg.sender, eth_amount, paid_tokens, bonus_tokens);\r\n\r\n        balances[msg.sender] += uint96(paid_tokens + bonus_tokens);\r\n\r\n        storageWallet.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint88\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getExternalCurrencyProcessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseToken\",\"outputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint64\"},{\"name\":\"transactionId\",\"type\":\"string\"}],\"name\":\"paymentWithCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"setExternalCurrencyProcessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"uint88\"}],\"name\":\"changePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discount\",\"type\":\"uint8\"}],\"name\":\"changeDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endDate\",\"type\":\"uint32\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth_amount\",\"type\":\"uint72\"},{\"indexed\":false,\"name\":\"paid_amount\",\"type\":\"uint88\"},{\"indexed\":false,\"name\":\"bonus_amount\",\"type\":\"uint88\"}],\"name\":\"BuyTokensDirect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint72\"},{\"indexed\":false,\"name\":\"paid_amount\",\"type\":\"uint88\"},{\"indexed\":false,\"name\":\"bonus_amount\",\"type\":\"uint88\"}],\"name\":\"BuyTokensExternal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_date\",\"type\":\"uint32\"}],\"name\":\"ChangeDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_discount\",\"type\":\"uint8\"}],\"name\":\"ChangeDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_pool\",\"type\":\"uint88\"}],\"name\":\"ChangePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PreSaleUNIT","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000378356e2391cbaccb1cb11d9f7b1fe6b244819f1","Library":"","SwarmSource":"bzzr://604ac11c842c0817c1c56762da766bcf8d9034c3a5a7887a135885575e093593"}]}