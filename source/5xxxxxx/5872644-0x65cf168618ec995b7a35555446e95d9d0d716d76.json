{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/NameRegistry.sol\r\n\r\ncontract NameRegistry is Ownable {\r\n  mapping(address => bool) registrar;\r\n\r\n  // Index event by address, for reverse look up\r\n  event NameSet(address indexed addr, string name);\r\n  event NameFinalized(address indexed addr, bytes32 namehash);\r\n\r\n  // External services should honour the NameRemoved event, and remove name-address pair from index.\r\n  event NameRemoved(address indexed addr, bytes32 namehash, bool forced);\r\n\r\n  // lookup of address by name hash\r\n  mapping(bytes32 => address) public namehashAddresses;\r\n\r\n  mapping(bytes32 => bool) public namehashFinalized;\r\n\r\n  function registerName(address addr, string name) public onlyRegistrar {\r\n    require(bytes(name).length != 0);\r\n    require(addr != address(0));\r\n\r\n    bytes32 namehash = keccak256(bytes(name));\r\n    require(namehashAddresses[namehash] == address(0));\r\n\r\n    namehashAddresses[namehash] = addr;\r\n    emit NameSet(addr, name);\r\n  }\r\n\r\n  function finalizeName(address addr, string name) public onlyRegistrar {\r\n    require(bytes(name).length != 0);\r\n    require(addr != address(0));\r\n\r\n    bytes32 namehash = keccak256(bytes(name));\r\n    require(!namehashFinalized[namehash]);\r\n\r\n    address nameOwner = namehashAddresses[namehash];\r\n\r\n    if (nameOwner != addr) {\r\n      namehashAddresses[namehash] = addr;\r\n\r\n      if (nameOwner != address(0)) {\r\n        emit NameRemoved(nameOwner, namehash, true);\r\n      }\r\n      emit NameSet(addr, name);\r\n    }\r\n\r\n    namehashFinalized[namehash] = true;\r\n    emit NameFinalized(addr, namehash);\r\n  }\r\n\r\n  function transferName(address addr, string name) public {\r\n    require(bytes(name).length != 0);\r\n    require(addr != address(0));\r\n\r\n    bytes32 namehash = keccak256(bytes(name));\r\n    require(namehashAddresses[namehash] == msg.sender);\r\n\r\n    namehashAddresses[namehash] = addr;\r\n\r\n    emit NameRemoved(msg.sender, namehash, false);\r\n    emit NameSet(addr, name);\r\n  }\r\n\r\n  function removeName(bytes32 namehash) public {\r\n    require(namehashAddresses[namehash] == msg.sender);\r\n    namehashAddresses[namehash] = address(0);\r\n    emit NameRemoved(msg.sender, namehash, false);\r\n  }\r\n\r\n  function addRegistrar(address addr) public onlyOwner {\r\n    registrar[addr] = true;\r\n  }\r\n\r\n  function isRegistrar(address addr) public view returns(bool) {\r\n    return registrar[addr];\r\n  }\r\n\r\n  function removeRegistrar(address addr) public onlyOwner {\r\n    registrar[addr] = false;\r\n  }\r\n\r\n  modifier onlyRegistrar {\r\n    require(registrar[msg.sender]);\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"finalizeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"removeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"namehashFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"namehashAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addRegistrar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeRegistrar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistrar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"transferName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"NameFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"namehash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"forced\",\"type\":\"bool\"}],\"name\":\"NameRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NameRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://086f01624410cd6a2d1b0db6d02eadb19486de9a5fbd15e0d513d86372f9c860"}]}