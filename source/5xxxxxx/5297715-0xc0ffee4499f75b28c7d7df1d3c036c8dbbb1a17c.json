{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  Coffee\r\n *\r\n *  Just a very simple example of deploying a contract at a vanity address\r\n *  across several chains.\r\n *\r\n *  See: https://blog.ricmoo.com/contract-addresses-549074919ec8\r\n *\r\n */\r\n\r\npragma solidity ^0.4.20;\r\n\r\ncontract Coffee {\r\n\r\n    address _owner;\r\n\r\n    uint48 _mgCaffeine;\r\n    uint48 _count;\r\n\r\n    function Coffee() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     *   Allow the owner to change the account that controls this contract.\r\n     *\r\n     *   We may wish to use powerful computers that may be public or\r\n     *   semi-public to compute the private key we use to deploy the contract,\r\n     *   to a vanity adddress. So once deployed, we want to move it to a\r\n     *   cold-storage key.\r\n     */\r\n    function setOwner(address owner) {\r\n        require(msg.sender == _owner);\r\n        _owner = owner;\r\n    }\r\n\r\n    /**\r\n     *   status()\r\n     *\r\n     *   Returns the number of drinks and amount of caffeine this contract\r\n     *   has been responsible for installing into the developer.\r\n     */\r\n    function status() public constant returns (uint48 count, uint48 mgCaffeine) {\r\n        count = _count;\r\n        mgCaffeine = _mgCaffeine;\r\n    }\r\n\r\n    /**\r\n     *  withdraw(amount, count, mgCaffeine)\r\n     *\r\n     *  Withdraws funds from this contract to the owner, indicating how many drinks\r\n     *  and how much caffeine these funds will be used to install into the develoepr.\r\n     */\r\n    function withdraw(uint256 amount, uint8 count, uint16 mgCaffeine) public {\r\n        require(msg.sender == _owner);\r\n        _owner.transfer(amount);\r\n        _count += count;\r\n        _mgCaffeine += mgCaffeine;\r\n    }\r\n\r\n    // Let this contract accept payments\r\n    function () public payable { }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint48\"},{\"name\":\"mgCaffeine\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint8\"},{\"name\":\"mgCaffeine\",\"type\":\"uint16\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Coffee","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://91c9642676bc460cc1a29f4ce4b0a5285fa5995cb7c21da58c6f26e1634b1ac3"}]}