{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\nfile:       Docsigner.sol\r\nversion:    0.1\r\nauthor:     Block8 Technologies\r\n\r\n            Samuel Brooks\r\n\r\ndate:       2018-02-01\r\n\r\nchecked:    Anton Jurisevic\r\napproved:   Samuel Brooks\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\n\r\n\r\n-----------------------------------------------------------------\r\nLICENCE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nCopyright (c) 2018 Redenbach Lee Lawyers\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n-----------------------------------------------------------------\r\nRELEASE NOTES\r\n-----------------------------------------------------------------\r\n\r\n-----------------------------------------------------------------\r\nBlock8 Technologies is accelerating blockchain technology\r\nby incubating meaningful next-generation businesses.\r\nFind out more at https://www.block8.io/\r\n-----------------------------------------------------------------\r\n*/\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract DocSigner {\r\n\r\n// -------------------------------------------------------------\r\n// STATE DECLARATION\r\n// -------------------------------------------------------------\r\n\r\n    address public owner;// Redenbach-Lee address\r\n    uint constant maxSigs = 10; // maximum number of counterparties\r\n    uint numSigs = 0; // number of signatures for the next signing\r\n    string public docHash; // current document hash\r\n    address[10] signatories; // signatory addresses\r\n    mapping(address => string) public messages;\r\n\r\n// -------------------------------------------------------------\r\n// CONSTRUCTOR\r\n// -------------------------------------------------------------\r\n\r\n    function DocSigner()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n// -------------------------------------------------------------\r\n// EVENTS\r\n// -------------------------------------------------------------\r\n\r\n    event Signature(address signer, string docHash, string message);\r\n\r\n// -------------------------------------------------------------\r\n// FUNCTIONS\r\n// -------------------------------------------------------------\r\n\r\n    /*\r\n      This is the initialisation function for a new legal contract.\r\n      The contract owner sets the new agreement hash and the\r\n      number of signatories.\r\n    */\r\n\r\n    function setup( string   newDocHash,\r\n                    address[] newSigs )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require( newSigs.length <= maxSigs ); // bound array\r\n\r\n        docHash = newDocHash;\r\n        numSigs = newSigs.length;\r\n\r\n        for( uint i = 0; i < numSigs; i++ ){\r\n            signatories[i] = newSigs[i];\r\n        }\r\n    }\r\n\r\n    /*\r\n      This is the function used by signatories to confirm\r\n      their agreement over the document hash.\r\n    */\r\n\r\n    function sign( string signingHash,\r\n                   string message )\r\n        external\r\n        onlySigner\r\n    {\r\n        require(keccak256(signingHash) == keccak256(docHash));\r\n\r\n        // save the message to state so that it can be easily queried\r\n        messages[msg.sender] = message;\r\n\r\n        Signature(msg.sender, docHash, message);\r\n    }\r\n\r\n    /*\r\n      Check if the address is within the approved signatories list.\r\n    */\r\n\r\n    function checkSig(address addr)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        for( uint i = 0; i < numSigs; i++ ){\r\n            if( signatories[i] == addr )\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n// -------------------------------------------------------------\r\n// MODIFIERS\r\n// -------------------------------------------------------------\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner\r\n    {\r\n        require(checkSig(msg.sender));\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"docHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDocHash\",\"type\":\"string\"},{\"name\":\"newSigs\",\"type\":\"address[]\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"messages\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signingHash\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"docHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Signature\",\"type\":\"event\"}]","ContractName":"DocSigner","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://09e5b8704be3dd3e3c872c1d3ed3947b0dca7b9d6febe5f97ead0b095cf99ead"}]}