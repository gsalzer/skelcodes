{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n// File: contracts/TweedentityStore.sol\r\n\r\n/**\r\n * @title TweedentityStore\r\n * @author Francesco Sullo <francesco@sullo.co>\r\n * @dev It store the tweedentities related to the app\r\n */\r\n\r\n\r\n\r\ncontract TweedentityStore\r\nis HasNoEther\r\n{\r\n\r\n  string public version = \"1.3.0\";\r\n\r\n  uint public appId;\r\n  string public appNickname;\r\n\r\n  uint public identities;\r\n\r\n  address public manager;\r\n  address public newManager;\r\n\r\n  struct Uid {\r\n    string lastUid;\r\n    uint lastUpdate;\r\n  }\r\n\r\n  struct Address {\r\n    address lastAddress;\r\n    uint lastUpdate;\r\n  }\r\n\r\n  mapping(string => Address) internal __addressByUid;\r\n  mapping(address => Uid) internal __uidByAddress;\r\n\r\n  bool public appSet;\r\n\r\n\r\n\r\n  // events\r\n\r\n\r\n  event IdentitySet(\r\n    address indexed addr,\r\n    string uid\r\n  );\r\n\r\n\r\n  event IdentityUnset(\r\n    address indexed addr,\r\n    string uid\r\n  );\r\n\r\n\r\n\r\n  // modifiers\r\n\r\n\r\n  modifier onlyManager() {\r\n    require(msg.sender == manager || (newManager != address(0) && msg.sender == newManager));\r\n    _;\r\n  }\r\n\r\n\r\n  modifier whenAppSet() {\r\n    require(appSet);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  // config\r\n\r\n\r\n  /**\r\n  * @dev Sets the manager\r\n  * @param _address Manager's address\r\n  */\r\n  function setManager(\r\n    address _address\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(_address != address(0));\r\n    manager = _address;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets new manager\r\n  * @param _address New manager's address\r\n  */\r\n  function setNewManager(\r\n    address _address\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(_address != address(0) && manager != address(0));\r\n    newManager = _address;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets new manager\r\n  */\r\n  function switchManagerAndRemoveOldOne()\r\n  external\r\n  onlyOwner\r\n  {\r\n    manager = newManager;\r\n    newManager = address(0);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets the app\r\n  * @param _appNickname Nickname (e.g. twitter)\r\n  * @param _appId ID (e.g. 1)\r\n  */\r\n  function setApp(\r\n    string _appNickname,\r\n    uint _appId\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(!appSet);\r\n    require(_appId > 0);\r\n    require(bytes(_appNickname).length > 0);\r\n    appId = _appId;\r\n    appNickname = _appNickname;\r\n    appSet = true;\r\n  }\r\n\r\n\r\n\r\n  // helpers\r\n\r\n\r\n  /**\r\n   * @dev Checks if a tweedentity is upgradable\r\n   * @param _address The address\r\n   * @param _uid The user-id\r\n   */\r\n  function isUpgradable(\r\n    address _address,\r\n    string _uid\r\n  )\r\n  public\r\n  constant returns (bool)\r\n  {\r\n    if (__addressByUid[_uid].lastAddress != address(0)) {\r\n      return keccak256(getUid(_address)) == keccak256(_uid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  // primary methods\r\n\r\n\r\n  /**\r\n   * @dev Sets a tweedentity\r\n   * @param _address The address of the wallet\r\n   * @param _uid The user-id of the owner user account\r\n   */\r\n  function setIdentity(\r\n    address _address,\r\n    string _uid\r\n  )\r\n  external\r\n  onlyManager\r\n  whenAppSet\r\n  {\r\n    require(_address != address(0));\r\n    require(isUid(_uid));\r\n    require(isUpgradable(_address, _uid));\r\n\r\n    if (bytes(__uidByAddress[_address].lastUid).length > 0) {\r\n      // if _address is associated with an oldUid,\r\n      // this removes the association between _address and oldUid\r\n      __addressByUid[__uidByAddress[_address].lastUid] = Address(address(0), __addressByUid[__uidByAddress[_address].lastUid].lastUpdate);\r\n      identities--;\r\n    }\r\n\r\n    __uidByAddress[_address] = Uid(_uid, now);\r\n    __addressByUid[_uid] = Address(_address, now);\r\n    identities++;\r\n    IdentitySet(_address, _uid);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Unset a tweedentity\r\n   * @param _address The address of the wallet\r\n   */\r\n  function unsetIdentity(\r\n    address _address\r\n  )\r\n  external\r\n  onlyManager\r\n  whenAppSet\r\n  {\r\n    require(_address != address(0));\r\n    require(bytes(__uidByAddress[_address].lastUid).length > 0);\r\n\r\n    string memory uid = __uidByAddress[_address].lastUid;\r\n    __uidByAddress[_address] = Uid('', __uidByAddress[_address].lastUpdate);\r\n    __addressByUid[uid] = Address(address(0), __addressByUid[uid].lastUpdate);\r\n    identities--;\r\n    IdentityUnset(_address, uid);\r\n  }\r\n\r\n\r\n\r\n  // getters\r\n\r\n\r\n  /**\r\n   * @dev Returns the keccak256 of the app nickname\r\n   */\r\n  function getAppNickname()\r\n  external\r\n  whenAppSet\r\n  constant returns (bytes32) {\r\n    return keccak256(appNickname);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns the appId\r\n   */\r\n  function getAppId()\r\n  external\r\n  whenAppSet\r\n  constant returns (uint) {\r\n    return appId;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns the user-id associated to a wallet\r\n   * @param _address The address of the wallet\r\n   */\r\n  function getUid(\r\n    address _address\r\n  )\r\n  public\r\n  constant returns (string)\r\n  {\r\n    return __uidByAddress[_address].lastUid;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns the user-id associated to a wallet as a unsigned integer\r\n   * @param _address The address of the wallet\r\n   */\r\n  function getUidAsInteger(\r\n    address _address\r\n  )\r\n  external\r\n  constant returns (uint)\r\n  {\r\n    return __stringToUint(__uidByAddress[_address].lastUid);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns the address associated to a user-id\r\n   * @param _uid The user-id\r\n   */\r\n  function getAddress(\r\n    string _uid\r\n  )\r\n  external\r\n  constant returns (address)\r\n  {\r\n    return __addressByUid[_uid].lastAddress;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns the timestamp of last update by address\r\n   * @param _address The address of the wallet\r\n   */\r\n  function getAddressLastUpdate(\r\n    address _address\r\n  )\r\n  external\r\n  constant returns (uint)\r\n  {\r\n    return __uidByAddress[_address].lastUpdate;\r\n  }\r\n\r\n\r\n  /**\r\n * @dev Returns the timestamp of last update by user-id\r\n * @param _uid The user-id\r\n */\r\n  function getUidLastUpdate(\r\n    string _uid\r\n  )\r\n  external\r\n  constant returns (uint)\r\n  {\r\n    return __addressByUid[_uid].lastUpdate;\r\n  }\r\n\r\n\r\n\r\n  // utils\r\n\r\n\r\n  function isUid(\r\n    string _uid\r\n  )\r\n  public\r\n  pure\r\n  returns (bool)\r\n  {\r\n    bytes memory uid = bytes(_uid);\r\n    if (uid.length == 0) {\r\n      return false;\r\n    } else {\r\n      for (uint i = 0; i < uid.length; i++) {\r\n        if (uid[i] < 48 || uid[i] > 57) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  // private methods\r\n\r\n\r\n  function __stringToUint(\r\n    string s\r\n  )\r\n  internal\r\n  pure\r\n  returns (uint result)\r\n  {\r\n    bytes memory b = bytes(s);\r\n    uint i;\r\n    result = 0;\r\n    for (i = 0; i < b.length; i++) {\r\n      uint c = uint(b[i]);\r\n      if (c >= 48 && c <= 57) {\r\n        result = result * 10 + (c - 48);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function __uintToBytes(uint x)\r\n  internal\r\n  pure\r\n  returns (bytes b)\r\n  {\r\n    b = new bytes(32);\r\n    for (uint i = 0; i < 32; i++) {\r\n      b[i] = byte(uint8(x / (2 ** (8 * (31 - i)))));\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_appNickname\",\"type\":\"string\"},{\"name\":\"_appId\",\"type\":\"uint256\"}],\"name\":\"setApp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unsetIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAppNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchManagerAndRemoveOldOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"string\"}],\"name\":\"getUidLastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_uid\",\"type\":\"string\"}],\"name\":\"isUpgradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAppId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUidAsInteger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_uid\",\"type\":\"string\"}],\"name\":\"setIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"string\"}],\"name\":\"isUid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNewManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressLastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"IdentitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"IdentityUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TweedentityStore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d36023d6f95ef541e1b9f95c4a6a06587eaeb52d33ecb5a26e430b296bf942f4"}]}