{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n \r\ncontract Officials {\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cgoAddress;\r\n    \r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCGO() {\r\n        require(msg.sender == cgoAddress);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOfficers() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cgoAddress \r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n        cfoAddress = msg.sender;\r\n        cgoAddress = msg.sender;\r\n    }\r\n    \r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n    \r\n    function setCGO(address _newCGO) public onlyCEO {\r\n        require(_newCGO != address(0));\r\n        cgoAddress = _newCGO;\r\n    }\r\n     \r\n    function setCFO(address _newCFO) public onlyCEO {\r\n        require(_newCFO != address(0));\r\n        cfoAddress = _newCFO;\r\n    }\r\n    \r\n}\r\n \r\ncontract Games is Officials{ \r\n    \r\n    event Pause(bool paused);\r\n    event Create(uint256 gameId, address creator, address challenger, uint256 bet, uint256 count);\r\n    event Cancel(uint256 gameId);\r\n    event Won(uint256 gameId, address winner);\r\n    event Join(uint256 gameId, address challenger);\r\n    \r\n    bool public paused = true;\r\n    uint256 public gameCount = 0;\r\n    uint256 public minimumBet = 0.01 ether;\r\n    uint8 devFee = 6; //6% dev fee;\r\n    \r\n    struct Game {\r\n        address creator;\r\n        address challenger;\r\n        uint bet;\r\n        uint count;\r\n    }\r\n    \r\n    struct GameIndex {\r\n        uint index;\r\n        bool isPlaying;\r\n    }\r\n    \r\n    mapping (address => GameIndex) public players;\r\n    \r\n    Game[] private games;\r\n    \r\n    function togglePaused() public onlyCEO {\r\n        paused = !paused;\r\n        emit Pause(paused);\r\n    }\r\n    \r\n    modifier isUnpaused() {\r\n        require(paused == false);\r\n        _;\r\n    }\r\n    \r\n    modifier isPlaying(address _gameCreator) {\r\n        require(players[_gameCreator].isPlaying);\r\n        _;\r\n    }\r\n    \r\n    function setMinimumBet(uint _newMinBet) public onlyCEO {\r\n        minimumBet = _newMinBet;\r\n    }\r\n    \r\n    function createGame() public payable isUnpaused {\r\n        /* Function Rules */\r\n        // Only 1 Game Per initiator\r\n        // Only 1 Game Per challenger\r\n        require(msg.value >= minimumBet);\r\n        require(!players[msg.sender].isPlaying);\r\n        Game memory m = Game(msg.sender, 0, msg.value, gameCount);\r\n        uint256 newGameId = games.push(m) - 1;\r\n        gameCount++;\r\n        \r\n        players[msg.sender] = GameIndex(newGameId, true);\r\n        \r\n        emit Create(newGameId, m.creator, m.challenger, m.bet, m.count);\r\n    }\r\n    \r\n    function cancelGame(address _gameCreator) public isPlaying(_gameCreator) {\r\n        uint _gameId = players[_gameCreator].index;\r\n        \r\n        Game memory m = games[_gameId];\r\n        require(msg.sender == m.creator || msg.sender == ceoAddress);\r\n        require(m.challenger == 0);\r\n        \r\n        m.creator.transfer(m.bet);\r\n        \r\n        deleteGame(_gameId, m);\r\n        \r\n        emit Cancel(_gameId);\r\n    }\r\n    \r\n    function revertGame(address _gameCreator) public onlyCEO isPlaying(_gameCreator) {\r\n        uint _gameId = players[_gameCreator].index;\r\n\r\n        Game memory m = games[_gameId];\r\n        require(m.challenger != 0); //This is only for active games\r\n        \r\n        m.creator.transfer(m.bet);\r\n        m.challenger.transfer(m.bet);\r\n        \r\n        deleteGame(_gameId, m);\r\n        \r\n        emit Cancel(_gameId);\r\n    }\r\n    \r\n    function joinGame(address _gameCreator) public payable isUnpaused isPlaying(_gameCreator){\r\n        uint _gameId = players[_gameCreator].index;\r\n        require(!players[msg.sender].isPlaying);\r\n        \r\n        Game storage m = games[_gameId]; \r\n        require(msg.sender != m.creator);\r\n        require(m.challenger == 0);\r\n        require(msg.value == m.bet);\r\n        \r\n        m.challenger = msg.sender;\r\n        players[msg.sender] = GameIndex(_gameId, true);\r\n        \r\n        emit Join(_gameId, m.challenger);\r\n    }\r\n    \r\n    function declareWinner(address _gameCreator, bool _creatorWon) public onlyCGO isPlaying(_gameCreator){\r\n        uint _gameId = players[_gameCreator].index;\r\n        \r\n        Game storage m = games[_gameId];\r\n        uint256 devPayout = uint256(SafeMath.div(SafeMath.mul(m.bet, devFee), 100));\r\n        uint256 payout = uint256(SafeMath.add(m.bet, SafeMath.sub(m.bet, devPayout)));\r\n                \r\n        address winner = m.creator;        \r\n         \r\n        if(!_creatorWon){\r\n            winner = m.challenger;\r\n        } \r\n        \r\n        winner.transfer(payout);\r\n\r\n        cfoAddress.transfer(devPayout);\r\n        \r\n        deleteGame(_gameId, m);\r\n        \r\n        emit Won(_gameId, winner);\r\n    }\r\n    \r\n    function deleteGame(uint _gameId, Game _game) internal {\r\n        if (games.length > 1) {\r\n            games[_gameId] = games[games.length - 1];\r\n            \r\n            players[games[_gameId].creator].index = _gameId;\r\n           \r\n            if (games[_gameId].challenger != 0) {\r\n                players[games[_gameId].challenger].index = _gameId;\r\n            }\r\n        }\r\n        \r\n        \r\n        players[_game.creator].isPlaying = false;\r\n        \r\n        if (_game.challenger != 0) {\r\n            players[_game.challenger].isPlaying = false;\r\n        } \r\n        \r\n        games.length--;\r\n    }\r\n    \r\n    function totalGames() public view returns (uint256 total) {\r\n        return games.length;\r\n    }\r\n    \r\n    function getGameById(uint256 _gameId) public view returns (\r\n        uint gameId,\r\n        address creator,\r\n        address challenger,\r\n        uint bet,\r\n        uint count\r\n     ) {\r\n        Game memory m = games[_gameId];\r\n        gameId = _gameId;\r\n        creator = m.creator;\r\n        challenger = m.challenger;\r\n        bet = m.bet;\r\n        count = m.count;\r\n     }\r\n     \r\n    function getGameByPlayer(address _player) public view isPlaying(_player) returns  (\r\n        uint gameId,\r\n        address creator,\r\n        address challenger,\r\n        uint bet,\r\n        uint count\r\n    ) {\r\n        Game memory m = games[players[_player].index];\r\n        gameId = players[_player].index;\r\n        creator = m.creator;\r\n        challenger = m.challenger;\r\n        bet = m.bet;\r\n        count = m.count;\r\n    }\r\n     \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGameById\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getGameByPlayer\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameCreator\",\"type\":\"address\"}],\"name\":\"joinGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameCreator\",\"type\":\"address\"},{\"name\":\"_creatorWon\",\"type\":\"bool\"}],\"name\":\"declareWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGames\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameCreator\",\"type\":\"address\"}],\"name\":\"revertGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameCreator\",\"type\":\"address\"}],\"name\":\"cancelGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCGO\",\"type\":\"address\"}],\"name\":\"setCGO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinBet\",\"type\":\"uint256\"}],\"name\":\"setMinimumBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cgoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"isPlaying\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Won\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"Join\",\"type\":\"event\"}]","ContractName":"Games","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e373f0604df2cbd240c9f2d8030367d1632e786ffe175600b4346e97fe70f7c"}]}