{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SplitPayment\r\n * @dev Base contract that supports multiple payees claiming funds sent to this contract\r\n * according to the proportion they own.\r\n */\r\ncontract SplitPayment {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalShares = 0;\r\n  uint256 public totalReleased = 0;\r\n\r\n  mapping(address => uint256) public shares;\r\n  mapping(address => uint256) public released;\r\n  address[] public payees;\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  constructor(address[] _payees, uint256[] _shares) public payable {\r\n    require(_payees.length == _shares.length);\r\n\r\n    for (uint256 i = 0; i < _payees.length; i++) {\r\n      addPayee(_payees[i], _shares[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev payable fallback\r\n   */\r\n  function () public payable {}\r\n\r\n  /**\r\n   * @dev Claim your share of the balance.\r\n   */\r\n  function claim() public {\r\n    address payee = msg.sender;\r\n\r\n    require(shares[payee] > 0);\r\n\r\n    uint256 totalReceived = address(this).balance.add(totalReleased);\r\n    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);\r\n\r\n    require(payment != 0);\r\n    require(address(this).balance >= payment);\r\n\r\n    released[payee] = released[payee].add(payment);\r\n    totalReleased = totalReleased.add(payment);\r\n\r\n    payee.transfer(payment);\r\n  }\r\n\r\n  /**\r\n   * @dev Check your share of the balance.\r\n   */\r\n  function checkMyBalance() public view returns(uint256) {\r\n    uint256 totalReceived = address(this).balance.add(totalReleased);\r\n    uint256 payment = totalReceived.mul(shares[msg.sender]).div(totalShares).sub(released[msg.sender]);\r\n\r\n    return payment;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares owned by the payee.\r\n   */\r\n  function addPayee(address _payee, uint256 _shares) internal {\r\n    require(_payee != address(0));\r\n    require(_shares > 0);\r\n    require(shares[_payee] == 0);\r\n\r\n    payees.push(_payee);\r\n    shares[_payee] = _shares;\r\n    totalShares = totalShares.add(_shares);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_payees\",\"type\":\"address[]\"},{\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SplitPayment","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000170000000000000000000000001f1058b709bcfcbf76be8f9d15c1df2b925f22f10000000000000000000000004e0e62e63e45aa2cfd549d9008da018014ea7812000000000000000000000000e3711cd5d1a3ba5fafcc3197467b20e818c94096000000000000000000000000367ae407d41014eb019d0ef34563d3e238bcfdaf000000000000000000000000f5512b1d6403c9e758637899c8e20f9b7e8dde0f00000000000000000000000065b74ea194a94a1738a177438b0b682ca5b0b7da0000000000000000000000009965fe88c3055846cb4e3c4750bf10b800773dc7000000000000000000000000393d01142bd52105da0a9b1c0665d0733d536830000000000000000000000000862b2ffddef2f571f027f05bc857b6ccf06963f0000000000000000000000000349b5654270cd7ec1ac54176b180cc9fc3bb20a900000000000000000000000091ac9e4aab185cb204f1c44c1113969214df7d68000000000000000000000000d39df33ea68266b7e2e22e2be7d76109c05d2aa6000000000000000000000000d06abacad10a23efd7c372d3951227264b8da228000000000000000000000000447320d5f6da8cf23dd0ffa0f1e8b23b59c5f8fb00000000000000000000000009e9319eb56e25b3c218c0af7a9bf7646acd7166000000000000000000000000ff9aabe0fb7bc6b7cccac3fa48a407ed739ef7360000000000000000000000005baa8cf9c87ea0f0c8d1a1d4d4f9d6cfa1eac083000000000000000000000000b774689fd601645b3c44102791ab70894d47e2c90000000000000000000000004b5394d69c0badb9326514447ef1b2f25d38224200000000000000000000000047b8c01c43d8049d108cc3979b48965bba6517b5000000000000000000000000a82e08f41e958514c74959c5876dfea5f539b6ca0000000000000000000000008ba96c4840a970c477bff146bb501c183b798e9d00000000000000000000000024d1119fa769c86e19a54f4332f0927f633600a00000000000000000000000000000000000000000000000000000000000000017000000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000bb000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000017a00000000000000000000000000000000000000000000000000000000000000fc00000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000039300000000000000000000000000000000000000000000000000000000000001f300000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000013800000000000000000000000000000000000000000000000000000000000001cc000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000258000000000000000000000000000000000000000000000000000000000000035200000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000708","Library":"","SwarmSource":"bzzr://b017630a49a565ca61a6ad519256559c2e45b96fde1478f83fcc013865bb43f5"}]}