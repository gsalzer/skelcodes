{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  uint public totalSupply = 0;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require (msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev Allows to authorize access to certain function calls\r\n *\r\n * ABI\r\n *\r\n */\r\ncontract Authorizable {\r\n \r\n  address[] authorizers;\r\n  mapping(address => uint256) authorizerIndex;\r\n \r\n  /**\r\n   * @dev Throws if called by any account that is not authorized.\r\n   */\r\n  modifier onlyAuthorized {\r\n    require(isAuthorized(msg.sender));\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Contructor that authorizes the msg.sender.\r\n   */\r\n  function Authorizable() public {\r\n    authorizers.length = 2;\r\n    authorizers[1] = msg.sender;\r\n    authorizerIndex[msg.sender] = 1;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to get a specific authorizer\r\n   * @param authIndex index of the authorizer to be retrieved.\r\n   * @return The address of the authorizer.\r\n   */\r\n  function getAuthorizer(uint256 authIndex) external constant returns(address) {\r\n    return address(authorizers[authIndex + 1]);\r\n  }\r\n \r\n  /**\r\n   * @dev Function to check if an address is authorized\r\n   * @param _addr the address to check if it is authorized.\r\n   * @return boolean flag if address is authorized.\r\n   */\r\n  function isAuthorized(address _addr) public constant returns(bool) {\r\n    return authorizerIndex[_addr] > 0;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to add a new authorizer\r\n   * @param _addr the address to add as a new authorizer.\r\n   */\r\n  function addAuthorized(address _addr) external onlyAuthorized {\r\n    authorizerIndex[_addr] = authorizers.length;\r\n    authorizers.length++;\r\n    authorizers[authorizers.length - 1] = _addr;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  //function assert(bool _assertion) internal pure {\r\n  //  require (_assertion);\r\n  //}\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n  mapping(address => uint) public balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     require(msg.data.length >= size + 4);\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    // allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    // already 0 to mitigate the race condition described here:\r\n    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    // if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint value);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RecToken\r\n * @dev The main REC token contract\r\n *\r\n * ABI\r\n *\r\n */\r\ncontract RecToken is MintableToken {\r\n  string public standard = \"Renta.City\";\r\n  string public name = \"Renta.City\";\r\n  string public symbol = \"REC\";\r\n  uint public decimals = 18;\r\n  address public saleAgent;\r\n\r\n  bool public tradingStarted = false;\r\n\r\n  /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to enable the trading. This can not be undone\r\n   */\r\n  function startTrading() public onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the REC tokens once trading has started\r\n   * @param _to the recipient address of the tokens.\r\n   * @param _value number of tokens to be transfered.\r\n   */\r\n  function transfer(address _to, uint _value) public hasStartedTrading {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n   /**\r\n   * @dev Allows anyone to transfer the REC tokens once trading has started\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public hasStartedTrading {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function set_saleAgent(address _value) public onlyOwner {\r\n    saleAgent = _value;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MainSale\r\n * @dev The main REC token sale contract\r\n *\r\n * ABI\r\n *\r\n */\r\ncontract MainSale is Ownable, Authorizable {\r\n  using SafeMath for uint;\r\n  event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\r\n  event AuthorizedCreate(address recipient, uint pay_amount);\r\n  event MainSaleClosed();\r\n\r\n  RecToken public token = new RecToken();\r\n\r\n  address public multisigVault;\r\n  mapping(address => uint) public balances;\r\n\r\n  uint public hardcap = 100000 ether;\r\n  uint public altDeposits = 0;\r\n  uint public start = 1519862400; \r\n  uint public rate = 1000000000000000000000;\r\n  bool public isRefund = false;\r\n\r\n  uint public stage_Days = 30 days;\r\n  uint public stage_Discount = 0;\r\n\r\n  uint public commandPercent = 10;\r\n  uint public refererPercent = 2;\r\n  uint public bountyPercent = 2;\r\n\r\n  uint public maxBountyTokens = 0;\r\n  uint public maxTokensForCommand = 0;\r\n  uint public issuedBounty = 0;\t\t\t// <= 2% from total emission\r\n  uint public issuedTokensForCommand = 0;       // <= 10% from total emission\r\n\r\n  /**\r\n   * @dev modifier to allow token creation only when the sale IS ON\r\n   */\r\n  modifier saleIsOn() {\r\n    require(now > start && now < start + stage_Days);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow token creation only when the hardcap has not been reached\r\n   */\r\n  modifier isUnderHardCap() {\r\n    require(multisigVault.balance + altDeposits <= hardcap);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Convert bytes to address\r\n   */\r\n  function bytesToAddress(bytes source) internal pure returns(address) {\r\n     uint result;\r\n     uint mul = 1;\r\n     for(uint i = 20; i > 0; i--) {\r\n        result += uint8(source[i-1])*mul;\r\n        mul = mul*256;\r\n     }\r\n     return address(result);\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the periods of ICO in days(!).\r\n   */\r\n  function set_stage_Days(uint _value) public onlyOwner {\r\n    stage_Days = _value * 1 days;\r\n  }\r\n\r\n  function set_stage_Discount(uint _value) public onlyOwner {\r\n    stage_Discount = _value;\r\n  }\r\n\r\n  function set_commandPercent(uint _value) public onlyOwner {\r\n    commandPercent = _value;\r\n  }\r\n\r\n  function set_refererPercent(uint _value) public onlyOwner {\r\n    refererPercent = _value;\r\n  }\r\n\r\n  function set_bountyPercent(uint _value) public onlyOwner {\r\n    bountyPercent = _value;\r\n  }\r\n\r\n  function set_Rate(uint _value) public onlyOwner {\r\n    rate = _value * 1 ether;\r\n  }\r\n  \r\n  /**\r\n   * @dev Allows anyone to create tokens by depositing ether.\r\n   * @param recipient the recipient to receive tokens.\r\n   */\r\n  function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\r\n    require(msg.value >= 0.01 ether);\r\n    \r\n    // Calculate discounts\r\n    uint CurrentDiscount = 0;\r\n    if (now > start && now < (start + stage_Days)) {CurrentDiscount = stage_Discount;}\r\n    \r\n    // Calculate tokens\r\n    uint tokens = rate.mul(msg.value).div(1 ether);\r\n    tokens = tokens + tokens.mul(CurrentDiscount).div(100);\r\n    token.mint(recipient, tokens);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    maxBountyTokens = token.totalSupply().mul(bountyPercent).div(100-bountyPercent).div(1 ether);\r\n    maxTokensForCommand = token.totalSupply().mul(commandPercent).div(100-commandPercent).div(1 ether);\r\n    \r\n    require(multisigVault.send(msg.value));\r\n    TokenSold(recipient, msg.value, tokens, rate);\r\n\r\n    // Transfer 2% => to Referer\r\n    address referer = 0x0;\r\n    if(msg.data.length == 20) {\r\n        referer = bytesToAddress(bytes(msg.data));\r\n        require(referer != msg.sender);\r\n        uint refererTokens = tokens.mul(refererPercent).div(100);\r\n        if (referer != 0x0 && refererTokens > 0) {\r\n    \t    token.mint(referer, refererTokens);\r\n    \t    maxBountyTokens = token.totalSupply().mul(bountyPercent).div(100-bountyPercent).div(1 ether);\r\n    \t    maxTokensForCommand = token.totalSupply().mul(commandPercent).div(100-commandPercent).div(1 ether);\r\n    \t    TokenSold(referer, 0, refererTokens, rate);\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to mint tokens for Command (<= 10%)\r\n   */\r\n  function mintTokensForCommand(address recipient, uint tokens) public onlyOwner returns (bool){\r\n    maxTokensForCommand = token.totalSupply().mul(commandPercent).div(100-commandPercent).div(1 ether);\r\n    if (tokens <= (maxTokensForCommand - issuedTokensForCommand)) {\r\n        token.mint(recipient, tokens * 1 ether);\r\n\tissuedTokensForCommand = issuedTokensForCommand + tokens;\r\n        maxTokensForCommand = token.totalSupply().mul(commandPercent).div(100-commandPercent).div(1 ether);\r\n        TokenSold(recipient, 0, tokens * 1 ether, rate);\r\n        return(true);\r\n    }\r\n    else {return(false);}\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to mint tokens for Bounty (<= 2%)\r\n   */\r\n  function mintBounty(address recipient, uint tokens) public onlyOwner returns (bool){\r\n    maxBountyTokens = token.totalSupply().mul(bountyPercent).div(100-bountyPercent).div(1 ether);\r\n    if (tokens <= (maxBountyTokens - issuedBounty)) {\r\n        token.mint(recipient, tokens * 1 ether);\r\n\tissuedBounty = issuedBounty + tokens;\r\n        maxBountyTokens = token.totalSupply().mul(bountyPercent).div(100-bountyPercent).div(1 ether);\r\n        TokenSold(recipient, 0, tokens * 1 ether, rate);\r\n        return(true);\r\n    }\r\n    else {return(false);}\r\n  }\r\n\r\n  function refund() public {\r\n      require(isRefund);\r\n      uint value = balances[msg.sender]; \r\n      balances[msg.sender] = 0; \r\n      msg.sender.transfer(value); \r\n    }\r\n\r\n  function startRefund() public onlyOwner {\r\n      isRefund = true;\r\n    }\r\n\r\n  function stopRefund() public onlyOwner {\r\n      isRefund = false;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows to set the total alt deposit measured in ETH to make sure the hardcap includes other deposits\r\n   * @param totalAltDeposits total amount ETH equivalent\r\n   */\r\n  function setAltDeposit(uint totalAltDeposits) public onlyOwner {\r\n    altDeposits = totalAltDeposits;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the hardcap.\r\n   * @param _hardcap the new hardcap\r\n   */\r\n  function setHardCap(uint _hardcap) public onlyOwner {\r\n    hardcap = _hardcap;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the starting time.\r\n   * @param _start the new _start\r\n   */\r\n  function setStart(uint _start) public onlyOwner {\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the multisig contract.\r\n   * @param _multisigVault the multisig contract address\r\n   */\r\n  function setMultisigVault(address _multisigVault) public onlyOwner {\r\n    if (_multisigVault != address(0)) {\r\n      multisigVault = _multisigVault;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to finish the minting. This will create the\r\n   * restricted tokens and then close the minting.\r\n   * Then the ownership of the REC token contract is transfered\r\n   * to this owner.\r\n   */\r\n  function finishMinting() public onlyOwner {\r\n    uint issuedTokenSupply = token.totalSupply();\r\n    uint restrictedTokens = issuedTokenSupply.mul(commandPercent).div(100-commandPercent);\r\n    token.mint(multisigVault, restrictedTokens);\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n    MainSaleClosed();\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\r\n   * @param _token the contract address of the ERC20 contract\r\n   */\r\n  function retrieveTokens(address _token) public payable {\r\n    require(msg.sender == owner);\r\n    ERC20 erctoken = ERC20(_token);\r\n    erctoken.transfer(multisigVault, erctoken.balanceOf(this));\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function which receives ether and created the appropriate number of tokens for the\r\n   * msg.sender.\r\n   */\r\n  function() external payable {\r\n    createTokens(msg.sender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"set_stage_Discount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokensForCommand\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage_Days\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage_Discount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"set_refererPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokensForCommand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"set_Rate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refererPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"set_stage_Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"set_commandPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"set_bountyPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commandPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensForCommand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]","ContractName":"MainSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d57f808871e9058b52ce14624c024c28fde38c56ecbb5dff4a51f7cf1dd9aeb4"}]}