{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author MinakoKojima (https://github.com/lychees)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    // Optional\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    // function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract LuckyPackage is ERC721{\r\n\r\n  event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event RollDice(address indexed playerAddr, address indexed prizeIssuer, uint prizeId);\r\n\r\n  address private owner;\r\n  mapping (address => bool) private admins;\r\n\r\n  uint256 private tokenSize;\r\n  mapping (uint256 => address) private ownerOfToken;\r\n  mapping (uint256 => address) private approvedOfToken;\r\n  \r\n  struct Package {\r\n      uint256 tokenId;\r\n      uint256 ratio;\r\n      address issuer;\r\n  }\r\n  Package[] private package;\r\n  uint256 private packageSize;\r\n  uint256 private sigmaRatio;\r\n  \r\n  function LuckyPackage() public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;    \r\n    sigmaRatio = 0;\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /* Owner */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n\r\n  /* Withdraw */\r\n  /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract by `buy`. User funds are immediately sent to the old\r\n    owner in `buy`, no user funds are left in the contract.\r\n  */\r\n  function withdrawAll () onlyAdmins() public {\r\n     msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyAdmins() public {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  /* ERC721 */\r\n\r\n  function name() public view returns (string _name) {\r\n    return \"luckyDraw\";\r\n  }\r\n\r\n  function symbol() public view returns (string _symbol) {\r\n    return \"LCY\";\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return tokenSize;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < tokenSize; i++) {\r\n      if (ownerOf(i) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf (uint256 _tokenId) public view returns (address _owner) {\r\n    return ownerOfToken[_tokenId];\r\n  }\r\n\r\n  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\r\n    uint256[] memory Tokens = new uint256[](balanceOf(_owner));\r\n\r\n    uint256 TokenCounter = 0;\r\n    for (uint256 i = 0; i < tokenSize; i++) {\r\n      if (ownerOf(i) == _owner) {\r\n        Tokens[TokenCounter] = i;\r\n        TokenCounter += 1;\r\n      }\r\n    }\r\n\r\n    return Tokens;\r\n  }\r\n\r\n  function approvedFor(uint256 _tokenId) public view returns (address _approved) {\r\n    return approvedOfToken[_tokenId];\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    require(msg.sender != _to);\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n\r\n    if (_to == 0) {\r\n      if (approvedOfToken[_tokenId] != 0) {\r\n        delete approvedOfToken[_tokenId];\r\n        emit Approval(msg.sender, 0, _tokenId);\r\n      }\r\n    } else {\r\n      approvedOfToken[_tokenId] = _to;\r\n      emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /* Transferring a country to another owner will entitle the new owner the profits from `buy` */\r\n  function transfer(address _to, uint256 _tokenId) public {\r\n    require(msg.sender == ownerOf(_tokenId));\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(approvedFor(_tokenId) == msg.sender);\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    ownerOfToken[_tokenId] = _to;\r\n    approvedOfToken[_tokenId] = 0;\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /* Read */\r\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n    return admins[_admin];\r\n  }\r\n\r\n  function allOf (uint256 _tokenId) external view returns (address _owner) {\r\n    return (ownerOf(_tokenId));\r\n  }\r\n\r\n  /* Read */\r\n  \r\n  function getAllPackage() public view returns (uint256[] _id, uint256[] _ratio, address[] _issuer) {\r\n    uint256[] memory ID = new uint[](packageSize);\r\n    uint256[] memory RATIO = new uint[](packageSize);\r\n    address[] memory ISSUER = new address[](packageSize);\r\n    for (uint i = 0; i < packageSize; i++) {\r\n      ID[i] = package[i].tokenId;\r\n      RATIO[i] = package[i].ratio;\r\n      ISSUER[i] = package[i].issuer;\r\n    }\r\n    return (ID, RATIO, ISSUER);\r\n  }\r\n\r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n  \r\n  function putIntoPackage(uint256 _tokenId, uint256 _ratio, address _issuer) onlyAdmins() public {      \r\n      Issuer issuer = Issuer(_issuer);\r\n      require(issuer.ownerOf(_tokenId) == msg.sender);\r\n      issuer.transferFrom(msg.sender, address(this), _tokenId);      \r\n      \r\n      if (packageSize >= package.length) {\r\n          package.push(Package(_tokenId, _ratio, _issuer));\r\n      } else {\r\n        package[packageSize].tokenId = _tokenId;\r\n        package[packageSize].ratio = _ratio;\r\n        package[packageSize].issuer = _issuer;\r\n      }\r\n\r\n      packageSize += 1;\r\n      sigmaRatio += _ratio;\r\n  }\r\n  \r\n  function rollDice(uint256 _tokenId) public {\r\n      require(msg.sender == ownerOfToken[_tokenId]);\r\n      require(packageSize > 0);\r\n      \r\n      /* recycle the token. */\r\n      _transfer(msg.sender, owner, _tokenId);\r\n      \r\n      /* get a random number. */\r\n      uint256 result = uint(keccak256(block.timestamp + block.difficulty)); // assume result is the random number\r\n      result %= sigmaRatio;\r\n      uint256 rt;\r\n      for (uint256 i = 0; i < packageSize; i++) {\r\n          if (result >= package[i].ratio) {\r\n              result -= package[i].ratio;\r\n          } else {\r\n              rt = i;\r\n              break;\r\n          }\r\n      }\r\n      \r\n      /* transfer  */\r\n      Issuer issuer = Issuer(package[rt].issuer);\r\n      issuer.transfer(msg.sender, package[rt].tokenId);\r\n      \r\n      /* remove */\r\n      sigmaRatio -= package[rt].ratio;\r\n      package[rt] = package[packageSize-1];\r\n      packageSize -= 1;\r\n      \r\n      emit RollDice(msg.sender, package[rt].issuer, package[rt].tokenId);\r\n  }\r\n  \r\n  /* Issue */\r\n  function issueToken(uint256 _count) onlyAdmins() public {\r\n    uint256 l = tokenSize;\r\n    uint256 r = tokenSize + _count;\r\n    for (uint256 i = l; i < r; i++) {\r\n      ownerOfToken[i] = msg.sender;\r\n    } \r\n    tokenSize += _count;    \r\n  }\r\n  function issueTokenAndTransfer(uint256 _count, address to) onlyAdmins() public {\r\n    uint256 l = tokenSize;\r\n    uint256 r = tokenSize + _count;\r\n    for (uint256 i = l; i < r; i++) {\r\n      ownerOfToken[i] = to;\r\n    }      \r\n    tokenSize += _count;    \r\n  }    \r\n  function issueTokenAndApprove(uint256 _count, address to) onlyAdmins() public {\r\n    uint256 l = tokenSize;\r\n    uint256 r = tokenSize + _count;\r\n    for (uint256 i = l; i < r; i++) {\r\n      ownerOfToken[i] = msg.sender;\r\n      approve(to, i);\r\n    }          \r\n    tokenSize += _count;\r\n  }    \r\n}\r\n\r\ninterface Issuer {\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;  \r\n  function transfer(address _to, uint256 _tokenId) external;\r\n  function ownerOf (uint256 _tokenId) external view returns (address _owner);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"issueTokenAndApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPackage\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256[]\"},{\"name\":\"_ratio\",\"type\":\"uint256[]\"},{\"name\":\"_issuer\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"issueTokenAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rollDice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"issueToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ratio\",\"type\":\"uint256\"},{\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"putIntoPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"prizeIssuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prizeId\",\"type\":\"uint256\"}],\"name\":\"RollDice\",\"type\":\"event\"}]","ContractName":"LuckyPackage","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1950d4aae8654a1126d75e6898caf8b4c12e9b0909f7cdc06227c9c3692e79de"}]}