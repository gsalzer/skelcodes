{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n// File: contracts/Marketplace.sol\r\n\r\ncontract Marketplace is Ownable {\r\n    ERC721 public nft;\r\n\r\n    mapping (uint256 => Listing) public listings;\r\n\r\n    uint256 public minListingSeconds;\r\n    uint256 public maxListingSeconds;\r\n\r\n    struct Listing {\r\n        address seller;\r\n        uint256 startingPrice;\r\n        uint256 minimumPrice;\r\n        uint256 createdAt;\r\n        uint256 durationSeconds;\r\n    }\r\n\r\n    event TokenListed(uint256 indexed _tokenId, uint256 _startingPrice, uint256 _minimumPrice, uint256 _durationSeconds, address _seller);\r\n    event TokenUnlisted(uint256 indexed _tokenId, address _unlister);\r\n    event TokenSold(uint256 indexed _tokenId, uint256 _price, uint256 _paidAmount, address indexed _seller, address _buyer);\r\n\r\n    modifier nftOnly() {\r\n        require(msg.sender == address(nft));\r\n        _;\r\n    }\r\n\r\n    function Marketplace(ERC721 _nft, uint256 _minListingSeconds, uint256 _maxListingSeconds) public {\r\n        nft = _nft;\r\n        minListingSeconds = _minListingSeconds;\r\n        maxListingSeconds = _maxListingSeconds;\r\n    }\r\n\r\n    function list(address _tokenSeller, uint256 _tokenId, uint256 _startingPrice, uint256 _minimumPrice, uint256 _durationSeconds) public nftOnly {\r\n        require(_durationSeconds >= minListingSeconds && _durationSeconds <= maxListingSeconds);\r\n        require(_startingPrice >= _minimumPrice);\r\n        require(! listingActive(_tokenId));\r\n        listings[_tokenId] = Listing(_tokenSeller, _startingPrice, _minimumPrice, now, _durationSeconds);\r\n        nft.takeOwnership(_tokenId);\r\n        TokenListed(_tokenId, _startingPrice, _minimumPrice, _durationSeconds, _tokenSeller);\r\n    }\r\n\r\n    function unlist(address _caller, uint256 _tokenId) public nftOnly {\r\n        address _seller = listings[_tokenId].seller;\r\n        // Allow owner to unlist (via nft) for when it's time to shut this down\r\n        require(_seller == _caller || address(owner) == _caller);\r\n        nft.transfer(_seller, _tokenId);\r\n        delete listings[_tokenId];\r\n        TokenUnlisted(_tokenId, _caller);\r\n    }\r\n\r\n    function purchase(address _caller, uint256 _tokenId, uint256 _totalPaid) public payable nftOnly {\r\n        Listing memory _listing = listings[_tokenId];\r\n        address _seller = _listing.seller;\r\n\r\n        require(_caller != _seller); // Doesn't make sense for someone to buy/sell their own token.\r\n        require(listingActive(_tokenId));\r\n\r\n        uint256 _price = currentPrice(_tokenId);\r\n        require(_totalPaid >= _price);\r\n\r\n        delete listings[_tokenId];\r\n\r\n        nft.transfer(_caller, _tokenId);\r\n        _seller.transfer(msg.value);\r\n        TokenSold(_tokenId, _price, _totalPaid, _seller, _caller);\r\n    }\r\n\r\n    function currentPrice(uint256 _tokenId) public view returns (uint256) {\r\n        Listing memory listing = listings[_tokenId];\r\n        require(now >= listing.createdAt);\r\n\r\n        uint256 _deadline = listing.createdAt + listing.durationSeconds;\r\n        require(now <= _deadline);\r\n\r\n        uint256 _elapsedTime = now - listing.createdAt;\r\n        uint256 _progress = (_elapsedTime * 100) / listing.durationSeconds;\r\n        uint256 _delta = listing.startingPrice - listing.minimumPrice;\r\n        return listing.startingPrice - ((_delta * _progress) / 100);\r\n    }\r\n\r\n    function listingActive(uint256 _tokenId) internal view returns (bool) {\r\n        Listing memory listing = listings[_tokenId];\r\n        return listing.createdAt + listing.durationSeconds >= now && now >= listing.createdAt;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minListingSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_totalPaid\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSeller\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"name\":\"_durationSeconds\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxListingSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"durationSeconds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_minListingSeconds\",\"type\":\"uint256\"},{\"name\":\"_maxListingSeconds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_durationSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_unlister\",\"type\":\"address\"}],\"name\":\"TokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Marketplace","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f7ddc72b2b2cc275c1b40e289fa158b24a282d900000000000000000000000000000000000000000000000000000000000000e100000000000000000000000000000000000000000000000000000000000093a80","Library":"","SwarmSource":"bzzr://9c11da65a9e1acc85831b8cb1db633ba18cca04ec61cb1a2fc293eb036e92ef4"}]}