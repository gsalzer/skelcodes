{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address owner) public constant returns (uint256 balance);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping (address => uint256) public balances;\r\n \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0 && _to != address(this) && _to != address(0)); \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0 && _to != address(this) && _to != address(0));\r\n    uint _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n      require (((_value == 0) || (allowed[msg.sender][_spender] == 0)) && _spender != address(this) && _spender != address(0));\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n \r\n}\r\n\r\ncontract UNICToken is owned, StandardToken {\r\n    \r\n  string public constant name = 'UNIC Token';\r\n  string public constant symbol = 'UNIC';\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant initialSupply = 250000000 * 10 ** uint256(decimals);\r\n\r\n  function UNICToken() public onlyOwner {\r\n    totalSupply = initialSupply;\r\n    balances[msg.sender] = initialSupply;\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsale is owned, UNICToken {\r\n    \r\n  using SafeMath for uint;\r\n  \r\n  UNICToken public token = new UNICToken();\r\n\r\n  address constant multisig = 0x867570869f8a46c685A51EE87b5D979A6ef657A9;\r\n  uint constant rate = 3400;\r\n\r\n  uint256 public constant forSale = 55000000 * 10 ** uint256(decimals);\r\n\r\n  uint public constant presaleWhitelistDiscount = 40;\r\n  uint public presaleWhitelistTokensLimit = 750000 * 10 ** uint256(decimals);\r\n\r\n  uint public constant presaleStart = 1520503200;           /** 08.03 */\r\n  uint public constant presaleEnd = 1521453600;             /** 19.03 */\r\n  uint public constant presaleDiscount = 30;\r\n  uint public presaleTokensLimit = 5000000 * 10 ** uint256(decimals);\r\n\r\n  uint public constant firstRoundICOStart = 1522317600;      /** 29.03 */\r\n  uint public constant firstRoundICOEnd = 1523527200;        /** 12.04 */\r\n  uint public constant firstRoundICODiscount = 20;\r\n  uint public firstRoundICOTokensLimit = 6250000 * 10 ** uint256(decimals);\r\n\r\n  uint public constant secondRoundICOStart = 1524736800;     /** 26.04 */\r\n  uint public constant secondRoundICOEnd = 1526551200;       /** 17.05 */\r\n  uint public constant secondRoundICODiscount = 10;\r\n  uint public secondRoundICOTokensLimit = 43750000 * 10 ** uint256(decimals);\r\n\r\n  uint public constant presaleFemaleStart = 1520467200;       /** 08.03 */\r\n  uint public constant presaleFemaleEnd = 1520553600;         /** 09.03 */\r\n  uint public constant presaleFemaleDiscount = 88;\r\n  uint public presaleFemaleTokensLimit = 88888 * 10 ** uint256(decimals);  \r\n\r\n  uint public constant presalePiStart = 1520985600;           /** 14.03 The day of number PI */\r\n  uint public constant presalePiEnd = 1521072000;             /** 15.03 */\r\n  uint public constant presalePiDiscount = 34;\r\n  uint public presalePiTokensLimit = 31415926535897932384626;\r\n\r\n  uint public constant firstRoundWMStart = 1522800000;           /** 04.04 The Day of webmaster 404 */\r\n  uint public constant firstRoundWMEnd = 1522886400;             /** 05.04 */\r\n  uint public constant firstRoundWMDiscount = 25;\r\n  uint public firstRoundWMTokensLimit = 404404 * 10 ** uint256(decimals);\r\n\r\n  uint public constant firstRoundCosmosStart = 1523491200;       /** 12.04 The day of cosmonautics */\r\n  uint public constant firstRoundCosmosEnd = 1523577600;         /** 13.04 */\r\n  uint public constant firstRoundCosmosDiscount = 25;\r\n  uint public firstRoundCosmosTokensLimit = 121961 * 10 ** uint256(decimals);\r\n\r\n  uint public constant secondRoundMayStart = 1525132800;          /** 01.05 International Solidarity Day for Workers */\r\n  uint public constant secondRoundMayEnd = 1525219200;            /** 02.05 */\r\n  uint public constant secondRoundMayDiscount = 15;\r\n  uint public secondRoundMayTokensLimit = 1111111 * 10 ** uint256(decimals);\r\n\r\n  uint public etherRaised = 0;\r\n  uint public tokensSold = 0;\r\n\r\n  address public icoManager;\r\n    \r\n  mapping (address => bool) public WhiteList;\r\n  mapping (address => bool) public Females;\r\n\r\n  mapping (address => bool) public KYC1;\r\n  mapping (address => bool) public KYC2;\r\n  mapping (address => uint256) public KYCLimit;\r\n  uint256 public constant KYCLimitValue = 1.5 ether;\r\n\r\n  modifier onlyManager() {\r\n    require(msg.sender == icoManager);\r\n    _;\r\n  }\r\n\r\n  function setICOManager(address _newIcoManager) public onlyOwner returns (bool) {\r\n    require(_newIcoManager != address(0));\r\n    icoManager = _newIcoManager;\r\n    return true;\r\n  }\r\n\r\n  function massPay(address[] dests, uint256 value) public onlyOwner returns (bool) {\r\n    uint256 i = 0;\r\n    uint256 toSend = value * 10 ** uint256(decimals);\r\n    while (i < dests.length) {\r\n      if(dests[i] != address(0)){\r\n        transfer(dests[i], toSend);\r\n      }\r\n      i++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function Crowdsale() public onlyOwner {\r\n    token = UNICToken(this);\r\n    balances[msg.sender] = balances[msg.sender].sub(forSale);\r\n    balances[token] = balances[token].add(forSale);\r\n  }\r\n\r\n  function setParams(address[] dests, uint _type) internal {\r\n    uint256 i = 0;\r\n    while (i < dests.length) {\r\n      if(dests[i] != address(0)){\r\n        if(_type==1){\r\n          WhiteList[dests[i]] = true;\r\n        }else if(_type==2){\r\n          Females[dests[i]] = true;\r\n        }else if(_type==3){\r\n          KYC1[dests[i]] = true;\r\n          KYCLimit[dests[i]] = KYCLimitValue;\r\n        }else if(_type==4){\r\n          KYC2[dests[i]] = true;\r\n        }\r\n      }\r\n      i++;\r\n    }\r\n  } \r\n\r\n  function setWhiteList(address[] dests) onlyManager external {\r\n    setParams(dests, 1);\r\n  }\r\n\r\n  function setFemaleBonus(address[] dests) onlyManager external {\r\n    setParams(dests, 2);\r\n  }\r\n\r\n  function setKYCLimited(address[] dests) onlyManager external {\r\n    setParams(dests, 3);\r\n  }\r\n\r\n  function setKYCFull(address[] dests) onlyManager external {\r\n    setParams(dests, 4);\r\n  }\r\n\r\n  function isPresale() internal view returns (bool) {\r\n    return now >= presaleStart && now <= presaleEnd;\r\n  }\r\n\r\n  function isFirstRound() internal view returns (bool) {\r\n    return now >= firstRoundICOStart && now <= firstRoundICOEnd;\r\n  }\r\n\r\n  function isSecondRound() internal view returns (bool) {\r\n    return now >= secondRoundICOStart && now <= secondRoundICOEnd;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(isPresale() || isFirstRound() || isSecondRound());\r\n    _;\r\n  }\r\n\r\n  function isFemaleSale() internal view returns (bool) {\r\n    return now >= presaleFemaleStart && now <= presaleFemaleEnd;\r\n  }\r\n\r\n  function isPiSale() internal view returns (bool) {\r\n    return now >= presalePiStart && now <= presalePiEnd;\r\n  }\r\n\r\n  function isWMSale() internal view returns (bool) {\r\n    return now >= firstRoundWMStart && now <= firstRoundWMEnd;\r\n  }\r\n\r\n  function isCosmosSale() internal view returns (bool) {\r\n    return now >= firstRoundCosmosStart && now <= firstRoundCosmosEnd;\r\n  }\r\n\r\n  function isMaySale() internal view returns (bool) {\r\n    return now >= secondRoundMayStart && now <= secondRoundMayEnd;\r\n  }\r\n\r\n  function discount(uint _discount, uint _limit, uint _saleLimit, uint _value, uint _defultDiscount) internal pure returns(uint){\r\n    uint tmpDiscount = _value.mul(_discount).div(100);\r\n    uint newValue = _value.add(tmpDiscount);\r\n    if(_limit >= newValue && _saleLimit >= newValue) {\r\n      return tmpDiscount;\r\n    }else{\r\n      return _defultDiscount;\r\n    }\r\n  }\r\n\r\n  function() external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address _buyer) saleIsOn public payable {\r\n    assert((_buyer != address(0) && msg.value > 0 && ((KYC1[_buyer] && msg.value < KYCLimitValue) || KYC2[_buyer])));\r\n    assert((KYC2[_buyer] || (KYC1[_buyer] && msg.value < KYCLimit[_buyer])));\r\n\r\n    uint tokens = rate.mul(msg.value);\r\n    uint discountTokens = 0;\r\n    \r\n    if (isPresale()) {\r\n\r\n      discountTokens = discount(presaleDiscount, presaleTokensLimit, presaleTokensLimit, tokens, discountTokens);\r\n\r\n      if(isFemaleSale() && Females[_buyer]) {\r\n        discountTokens = discount(presaleFemaleDiscount, presaleFemaleTokensLimit, presaleTokensLimit, tokens, discountTokens);\r\n      }\r\n      if(WhiteList[_buyer]) {\r\n        discountTokens = discount(presaleWhitelistDiscount, presaleWhitelistTokensLimit, presaleTokensLimit, tokens, discountTokens);\r\n      }\r\n      if(isPiSale()) {\r\n        discountTokens = discount(presalePiDiscount, presalePiTokensLimit, presaleTokensLimit, tokens, discountTokens);\r\n      }\r\n\r\n    } else if (isFirstRound()) {\r\n\r\n      discountTokens = discount(firstRoundICODiscount, firstRoundICOTokensLimit, firstRoundICOTokensLimit, tokens, discountTokens);\r\n\r\n      if(isCosmosSale()) {\r\n        discountTokens = discount(firstRoundCosmosDiscount, firstRoundCosmosTokensLimit, firstRoundICOTokensLimit, tokens, discountTokens);\r\n      }\r\n      if(isWMSale()) {\r\n        discountTokens = discount(firstRoundWMDiscount, firstRoundWMTokensLimit, firstRoundICOTokensLimit, tokens, discountTokens);\r\n      } \r\n\r\n    } else if (isSecondRound()) {\r\n\r\n      discountTokens = discount(secondRoundICODiscount, secondRoundICOTokensLimit, secondRoundICOTokensLimit, tokens, discountTokens);\r\n\r\n      if(isMaySale()) {\r\n        discountTokens = discount(secondRoundMayDiscount, secondRoundMayTokensLimit, secondRoundICOTokensLimit, tokens, discountTokens);\r\n      }\r\n\r\n    }\r\n        \r\n    uint tokensWithBonus = tokens.add(discountTokens);\r\n      \r\n    if((isPresale() && presaleTokensLimit >= tokensWithBonus) ||\r\n      (isFirstRound() && firstRoundICOTokensLimit >=  tokensWithBonus) ||\r\n      (isSecondRound() && secondRoundICOTokensLimit >= tokensWithBonus)){\r\n      \r\n      multisig.transfer(msg.value);\r\n      etherRaised = etherRaised.add(msg.value);\r\n      token.transfer(msg.sender, tokensWithBonus);\r\n      tokensSold = tokensSold.add(tokensWithBonus);\r\n\r\n      if(KYC1[_buyer]){\r\n        KYCLimit[_buyer] = KYCLimit[_buyer].sub(msg.value);\r\n      }\r\n\r\n      if (isPresale()) {\r\n        \r\n        presaleTokensLimit = presaleTokensLimit.sub(tokensWithBonus);\r\n        \r\n        if(WhiteList[_buyer]) {\r\n          presaleWhitelistTokensLimit = presaleWhitelistTokensLimit.sub(tokensWithBonus);\r\n        }\r\n      \r\n        if(isFemaleSale() && Females[_buyer]) {\r\n          presaleFemaleTokensLimit = presaleFemaleTokensLimit.sub(tokensWithBonus);\r\n        }\r\n\r\n        if(isPiSale()) {\r\n          presalePiTokensLimit = presalePiTokensLimit.sub(tokensWithBonus);\r\n        }\r\n\r\n      } else if (isFirstRound()) {\r\n\r\n        firstRoundICOTokensLimit = firstRoundICOTokensLimit.sub(tokensWithBonus);\r\n        \r\n        if(isWMSale()) {\r\n          firstRoundWMTokensLimit = firstRoundWMTokensLimit.sub(tokensWithBonus);\r\n        }\r\n      \r\n        if(isCosmosSale()) {\r\n          firstRoundCosmosTokensLimit = firstRoundCosmosTokensLimit.sub(tokensWithBonus);\r\n        }\r\n\r\n      } else if (isSecondRound()) {\r\n\r\n        secondRoundICOTokensLimit = secondRoundICOTokensLimit.sub(tokensWithBonus);\r\n\r\n        if(isMaySale()) {\r\n          secondRoundMayTokensLimit = secondRoundMayTokensLimit.sub(tokensWithBonus);\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundICOEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYCLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundICOStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundICOStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYC2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundMayDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"setFemaleBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"setKYCLimited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundICODiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundCosmosEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundICOEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFemaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYCLimitValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundCosmosTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Females\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWhitelistTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundCosmosStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundWMStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFemaleDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFemaleTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundICODiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePiTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundICOTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIcoManager\",\"type\":\"address\"}],\"name\":\"setICOManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundWMTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"setKYCFull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePiStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundMayTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundCosmosDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFemaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundWMDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundMayStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundICOTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWhitelistDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePiEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYC1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePiDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundMayEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundWMEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"massPay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f6fda6df990164f7812a9a51f3e535b26036370e9c517b2afaada0487b2455fd"}]}