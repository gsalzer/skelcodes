{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/// @title BlockchainCuties bidding auction\r\n/// @author https://BlockChainArchitect.io\r\ncontract Bidding is Pausable\r\n{\r\n    uint40 public timeEnd;\r\n    uint40 public lastBidTime;\r\n    uint256 public highestBid;\r\n    address public highestBidder;\r\n\r\n    address public operatorAddress;\r\n\r\n    struct Purchase\r\n    {\r\n        address winner;\r\n        uint256 bid;\r\n    }\r\n    Purchase[] public purchases;\r\n\r\n    // Allowed withdrawals of previous bids\r\n    mapping(address => uint) public pendingReturns;\r\n    uint public totalReturns;\r\n\r\n    function getBiddingInfo(address bidder) public view returns (\r\n        uint40 _timeEnd,\r\n        uint40 _lastBidTime,\r\n        uint256 _highestBid,\r\n        address _highestBidder,\r\n        bool _isEnded,\r\n        uint256 _pendingReturn)\r\n    {\r\n        _timeEnd = timeEnd;\r\n        _lastBidTime = lastBidTime;\r\n        _highestBid = highestBid;\r\n        _highestBidder = highestBidder;\r\n        _isEnded = isEnded();\r\n        _pendingReturn = pendingReturns[bidder];\r\n    }\r\n\r\n    /// Withdraw a bid that was overbid.\r\n    function withdraw() public {\r\n        uint amount = pendingReturns[msg.sender];\r\n        require (amount > 0);\r\n\r\n        // It is important to set this to zero because the recipient\r\n        // can call this function again as part of the receiving call\r\n        // before `send` returns.\r\n\r\n        totalReturns -= amount;\r\n        pendingReturns[msg.sender] -= amount;\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function finish() public onlyOperator\r\n    {\r\n        if (highestBidder != address(0))\r\n        {\r\n            purchases.push(Purchase(highestBidder, highestBid)); // archive last winner\r\n            highestBidder = address(0);\r\n        }\r\n        timeEnd = 0;\r\n    }\r\n\r\n    function setBidding(uint40 _duration, uint256 _startPrice) public onlyOperator\r\n    {\r\n        finish();\r\n\r\n        timeEnd = _duration + uint40(now);\r\n        highestBid = _startPrice;\r\n    }\r\n\r\n    function isEnded() public view returns (bool)\r\n    {\r\n        return timeEnd < now;\r\n    }\r\n\r\n    function bid() public payable whenNotPaused\r\n    {\r\n        if (highestBidder != address(0))\r\n        {\r\n            pendingReturns[highestBidder] += highestBid;\r\n            totalReturns += highestBid;\r\n        }\r\n\r\n        uint256 bank = pendingReturns[msg.sender];\r\n        pendingReturns[msg.sender] = 0;\r\n        totalReturns -= bank;\r\n\r\n        uint256 currentBid = bank + msg.value;\r\n\r\n        require(currentBid > highestBid || currentBid == highestBid && highestBidder == address(0));\r\n        require(!isEnded());\r\n\r\n\r\n        highestBid = currentBid;\r\n        highestBidder = msg.sender;\r\n        lastBidTime = uint40(now);\r\n    }\r\n\r\n    function purchasesCount() public view returns (uint256)\r\n    {\r\n        return purchases.length;\r\n    }\r\n\r\n    function destroyContract() public onlyOwner {\r\n        require(isEnded());\r\n        require(address(this).balance == 0);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function() external payable {\r\n        bid();\r\n    }\r\n\r\n    function withdrawEthFromBalance() external onlyOwner\r\n    {\r\n        require(isEnded());\r\n        owner.transfer(address(this).balance - totalReturns);\r\n    }\r\n\r\n    function setOperator(address _operator) public onlyOwner\r\n    {\r\n        operatorAddress = _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress || msg.sender == owner);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalReturns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBidTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint40\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"}],\"name\":\"setBidding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"bid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getBiddingInfo\",\"outputs\":[{\"name\":\"_timeEnd\",\"type\":\"uint40\"},{\"name\":\"_lastBidTime\",\"type\":\"uint40\"},{\"name\":\"_highestBid\",\"type\":\"uint256\"},{\"name\":\"_highestBidder\",\"type\":\"address\"},{\"name\":\"_isEnded\",\"type\":\"bool\"},{\"name\":\"_pendingReturn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bidding","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b2758b5a4d3f1c6966050ec675c70ed108dff525225d23a040f33964a121e0d7"}]}