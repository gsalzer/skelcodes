{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**************************************************************\r\n*\r\n* Alteum Token\r\n* AUMX ERC223 Token Standard\r\n* Author: Lex Garza \r\n* by ALTEUM / Copanga\r\n*\r\n**************************************************************/\r\n\r\n/**\r\n * ERC223 token by Dexaran\r\n * retreived from\r\n * https://github.com/Dexaran/ERC223-token-standard\r\n */\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public pure;\r\n}\r\n\r\n/*\r\n* Safe Math Library from Zeppelin Solidity\r\n* https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n*/\r\ncontract SafeMath\r\n{\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    \r\n\tfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract AUMXToken is ERC223, SafeMath{\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\tmapping(address => uint) balances;\r\n\tstring public name = \"Alteum\";\r\n\tstring public symbol = \"AUM\";\r\n\tuint8 public decimals = 8; // Using a Satoshi as base for our decimals: 0.00000001;\r\n\tuint256 public totalSupply = 50000000; // 50,000,000 AUM's, not mineable, not mintable;\r\n\t\r\n\tbool locked;\r\n\taddress Owner;\r\n\taddress swapperAddress;\r\n\t\r\n\tfunction MetaCoin() public {\r\n\t\tlocked = true;\r\n\t\tOwner = msg.sender;\r\n\t\tswapperAddress = msg.sender;\r\n\t\tbalances[msg.sender] = totalSupply * 100000000;\r\n\t\tallowed[msg.sender][swapperAddress] = totalSupply * 100000000;\r\n\t}\r\n\t\r\n\tmodifier isUnlocked()\r\n\t{\r\n\t\tif(locked && msg.sender != Owner) revert();\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner()\r\n\t{\r\n\t\tif(msg.sender != Owner) revert();\r\n\t\t_;\r\n\t}\r\n\t  \r\n\t// Function to access name of token .\r\n\tfunction name() public view returns (string _name) {\r\n\t\treturn name;\r\n\t}\r\n\t// Function to access symbol of token .\r\n\tfunction symbol() public view returns (string _symbol) {\r\n\t\treturn symbol;\r\n\t}\r\n\t// Function to access decimals of token .\r\n\tfunction decimals() public view returns (uint8 _decimals) {\r\n\t\treturn decimals;\r\n\t}\r\n\t// Function to access total supply of tokens .\r\n\tfunction totalSupply() public view returns (uint256 _totalSupply) {\r\n\t\treturn totalSupply;\r\n\t}\r\n\t  \r\n\tfunction ChangeSwapperAddress(address newSwapperAddress) public onlyOwner\r\n\t{\r\n\t\taddress oldSwapperAddress = swapperAddress;\r\n\t\tswapperAddress = newSwapperAddress;\r\n\t\tuint setAllowance = allowed[msg.sender][oldSwapperAddress];\r\n\t\tallowed[msg.sender][oldSwapperAddress] = 0;\r\n\t\tallowed[msg.sender][newSwapperAddress] = setAllowance;\r\n\t}\r\n\t\r\n\tfunction UnlockToken() public onlyOwner\r\n\t{\r\n\t\tlocked = false;\r\n\t}\r\n\t  \r\n\t  \r\n\t  \r\n\t// Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint _value, bytes _data, string _custom_fallback) public isUnlocked returns (bool success) {\r\n\t\tif(isContract(_to)) {\r\n\t\t\tif (balanceOf(msg.sender) < _value) revert();\r\n\t\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n\t\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\t\tassert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n\t\t\tTransfer(msg.sender, _to, _value, _data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, _data);\r\n\t\t}\r\n\t}\r\n\t  \r\n\r\n\t// Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint _value, bytes _data) public isUnlocked returns (bool success) {\r\n\t\tif(isContract(_to)) {\r\n\t\t\treturn transferToContract(_to, _value, _data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, _data);\r\n\t\t}\r\n\t}\r\n\t  \r\n\t// Standard function transfer similar to ERC20 transfer with no _data .\r\n\t// Added due to backwards compatibility reasons .\r\n\tfunction transfer(address _to, uint _value) public isUnlocked returns (bool success) {\r\n\t\t//standard function transfer similar to ERC20 transfer with no _data\r\n\t\t//added due to backwards compatibility reasons\r\n\t\tbytes memory empty;\r\n\t\tif(isContract(_to)) {\r\n\t\t\treturn transferToContract(_to, _value, empty);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, empty);\r\n\t\t}\r\n\t}\r\n\r\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\r\n\t\tuint length;\r\n\t\tassembly {\r\n\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\tlength := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (length>0);\r\n\t}\r\n\r\n\t//function that is called when transaction target is an address\r\n\tfunction transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t\tif (balanceOf(msg.sender) < _value) revert();\r\n\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\tTransfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\t  \r\n\t//function that is called when transaction target is a contract\r\n\tfunction transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t\tif (balanceOf(msg.sender) < _value) revert();\r\n\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\tContractReceiver receiver = ContractReceiver(_to);\r\n\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\tTransfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns(bool)\r\n\t{\r\n\t\tif(locked && msg.sender != swapperAddress) revert();\r\n\t\tif (balanceOf(_from) < _value) revert();\r\n\t\tif(_value > allowed[_from][msg.sender]) revert();\r\n\t\t\r\n\t\tbalances[_from] = safeSub(balanceOf(_from), _value);\r\n\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\tbytes memory empty;\r\n\t\tTransfer(_from, _to, _value, empty);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UnlockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSwapperAddress\",\"type\":\"address\"}],\"name\":\"ChangeSwapperAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MetaCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AUMXToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f923557a0c235ac4d5d8a943ae2cf3d371939879df7d3df00613b2b13da7b209"}]}