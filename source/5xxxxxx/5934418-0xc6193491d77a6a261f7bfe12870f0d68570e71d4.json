{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn''t hold\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract ERC20 {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\naddress public owner;\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\nrequire(newOwner != address(0));\r\nowner = newOwner;\r\n}\r\n}\r\n\r\ncontract Dominant is ERC20, Ownable {\r\nusing SafeMath for uint256;\r\n\r\nstring public constant name = \"Dominant\";\r\nstring public constant symbol = \"DMNT\";\r\nuint8 public constant decimals = 18;\r\nuint256 public constant initial_supply = 21000000000 * (10 ** uint256(decimals));\r\n\r\nmapping (address => uint256) balances;\r\n\r\nuint256 totalSupply_;\r\nuint256 wei_price;\r\nenum States {\r\nSale,\r\nStop\r\n}\r\nStates public state;\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\ntotalSupply_ = initial_supply;\r\nbalances[owner] = initial_supply;\r\nwei_price = 2100000000000000; // equal to 0.0021eth per token\r\nstate = States.Sale;\r\nemit Transfer(0x0, owner, initial_supply);\r\n}\r\n\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n}\r\n\r\nfunction price() public view returns (uint256) {\r\nreturn wei_price;\r\n}\r\n\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\n\r\nuint256 _balance = balances[msg.sender];\r\nrequire(_value <= _balance);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\n\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\nreturn balances[_owner];\r\n}\r\n\r\nfunction changePrice(uint256 _new_price) public onlyOwner {\r\nwei_price = _new_price;\r\n}\r\n\r\nmodifier requireState(States _requiredState) {\r\nrequire(state == _requiredState);\r\n_;\r\n}\r\n\r\nfunction changeState(States _newState)\r\nonlyOwner\r\npublic\r\n{\r\nstate = _newState;\r\n}\r\n\r\nfunction transferMany(address[] recipients, uint256[] values) public {\r\nfor (uint256 i = 0; i < recipients.length; i++) {\r\nrequire(balances[msg.sender] >= values[i]);\r\nrequire(recipients[i] != address(0));\r\nbalances[msg.sender] = balances[msg.sender].sub(values[i]);\r\nbalances[recipients[i]] = balances[recipients[i]].add(values[i]);\r\nemit Transfer(msg.sender, recipients[i], values[i]);\r\n}\r\n}\r\n\r\nfunction requestPayout(uint256 _amount)\r\nonlyOwner\r\npublic\r\n{\r\nmsg.sender.transfer(_amount);\r\n}\r\n\r\nfunction() payable\r\nrequireState(States.Sale)\r\npublic\r\n{\r\nuint256 _coinIncrease = msg.value.div(wei_price);\r\nrequire(balances[owner] >= _coinIncrease);\r\nbalances[owner] = balances[owner].sub(_coinIncrease);\r\nbalances[msg.sender] = balances[msg.sender].add(_coinIncrease);\r\nemit Transfer(owner, msg.sender, _coinIncrease);\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initial_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"changeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Dominant","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64424dd85707e520f68d91b2dd462defb2db95066c51c4b529a7f2ba2ce72abb"}]}