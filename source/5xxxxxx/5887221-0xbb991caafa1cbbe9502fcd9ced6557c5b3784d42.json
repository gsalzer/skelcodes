{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n}\r\n\r\ninterface EtheremonTradeInterface {\r\n    function isOnTrading(uint64 _objId) constant external returns(bool);\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum {\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    \r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name)  public returns(uint64);\r\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) public returns(uint);\r\n}\r\n\r\ninterface EtheremonRankData {\r\n    function setPlayer(address _trainer, uint64 _a0, uint64 _a1, uint64 _a2, uint64 _s0, uint64 _s1, uint64 _s2) external returns(uint32 playerId);\r\n}\r\n\r\ncontract EtheremonRankBattle is BasicAccessControl, EtheremonEnum {\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    // linked smart contract\r\n    address public dataContract;\r\n    address public tradeContract;\r\n    address public rankDataContract;\r\n    \r\n    uint32[3] public starterClasses;\r\n    uint public maxDexSize = 200;\r\n    \r\n    // modifier\r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireTradeContract {\r\n        require(tradeContract != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier requireRankDataContract {\r\n        require(rankDataContract != address(0));\r\n        _;\r\n    }\r\n\r\n    // event\r\n    event EventUpdateCastle(address indexed trainer, uint32 playerId);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    \r\n    function EtheremonRankBattle(address _dataContract, address _tradeContract, address _rankDataContract) public {\r\n        dataContract = _dataContract;\r\n        tradeContract = _tradeContract;\r\n        rankDataContract = _rankDataContract;\r\n    }\r\n    \r\n    function setContract(address _dataContract, address _tradeContract, address _rankDataContract) onlyModerators external {\r\n        dataContract = _dataContract;\r\n        tradeContract = _tradeContract;\r\n        rankDataContract = _rankDataContract;\r\n    }\r\n\r\n    function setStarterClass(uint _index, uint32 _classId) onlyModerators external {\r\n        starterClasses[_index] = _classId;\r\n    }\r\n    \r\n    function quickSetStarterClasses() onlyModerators external {\r\n        starterClasses[0] = 25;\r\n        starterClasses[1] = 26;\r\n        starterClasses[2] = 27;\r\n    }\r\n    \r\n    function setMaxDexSize(uint _value) onlyModerators external {\r\n        maxDexSize = _value;\r\n    }\r\n\r\n    // public\r\n    \r\n    // public functions\r\n    function getRandom(uint _seed) constant public returns(uint) {\r\n        return uint(keccak256(block.timestamp, block.difficulty)) ^ _seed;\r\n    }\r\n    \r\n    function getValidClassId(uint64 _objId, address _owner) constant public returns(uint32) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        if (obj.trainer != _owner || obj.classId == 21) return 0;\r\n        return obj.classId;\r\n    }\r\n    \r\n    function hasValidParam(address _trainer, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) constant public returns(bool) {\r\n        if (_a1 == 0 || _a2 == 0 || _a3 == 0)\r\n            return false;\r\n        if (_a1 == _a2 || _a1 == _a3 || _a1 == _s1 || _a1 == _s2 || _a1 == _s3)\r\n            return false;\r\n        if (_a2 == _a3 || _a2 == _s1 || _a2 == _s2 || _a2 == _s3)\r\n            return false;\r\n        if (_a3 == _s1 || _a3 == _s2 || _a3 == _s3)\r\n            return false;\r\n        if (_s1 > 0 && (_s1 == _s2 || _s1 == _s3))\r\n            return false;\r\n        if (_s2 > 0 && (_s2 == _s3))\r\n            return false;\r\n        \r\n        uint32 classA1 = getValidClassId(_a1, _trainer);\r\n        uint32 classA2 = getValidClassId(_a2, _trainer);\r\n        uint32 classA3 = getValidClassId(_a3, _trainer);\r\n        \r\n        if (classA1 == 0 || classA2 == 0 || classA3 == 0)\r\n            return false;\r\n        if (classA1 == classA2 || classA1 == classA3 || classA2 == classA3)\r\n            return false;\r\n        if (_s1 > 0 && getValidClassId(_s1, _trainer) == 0)\r\n            return false;\r\n        if (_s2 > 0 && getValidClassId(_s2, _trainer) == 0)\r\n            return false;\r\n        if (_s3 > 0 && getValidClassId(_s3, _trainer) == 0)\r\n            return false;\r\n        return true;\r\n    }\r\n    \r\n    function setCastle(uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requireDataContract \r\n        requireTradeContract requireRankDataContract external {\r\n        \r\n        if (!hasValidParam(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3))\r\n            revert();\r\n        \r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if (trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || \r\n            trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3))\r\n            revert();\r\n\r\n        EtheremonRankData rank = EtheremonRankData(rankDataContract);\r\n        uint32 playerId = rank.setPlayer(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3);\r\n        EventUpdateCastle(msg.sender, playerId);\r\n    }\r\n    \r\n    function catchStarters() isActive requireDataContract external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n\r\n        // can not keep too many etheremon \r\n        if (data.getMonsterDexSize(msg.sender) > maxDexSize)\r\n            revert();\r\n        \r\n        uint i = 0;\r\n        uint j = 0;\r\n        uint seed = 0;\r\n        uint64 objId = 0;\r\n        uint32 classId = 0;\r\n        uint8 value = 0;\r\n        for (i = 0; i < starterClasses.length; i+=1) {\r\n            classId = starterClasses[i];\r\n            seed = getRandom(uint(block.blockhash(block.number - i)));\r\n            objId = data.addMonsterObj(classId, msg.sender, \"..name me...\");\r\n            for (j = 0; j < 6; j += 1) {\r\n                seed = seed ^ (i + j);\r\n                value = uint8(seed % 32) + data.getElementInArrayType(ArrayType.STAT_START, uint64(classId), j);\r\n                data.addElementToArrayType(ArrayType.STAT_BASE, objId, value);\r\n            }\r\n            \r\n            Transfer(address(0), msg.sender, objId);\r\n        } \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxDexSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDexSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"},{\"name\":\"_a1\",\"type\":\"uint64\"},{\"name\":\"_a2\",\"type\":\"uint64\"},{\"name\":\"_a3\",\"type\":\"uint64\"},{\"name\":\"_s1\",\"type\":\"uint64\"},{\"name\":\"_s2\",\"type\":\"uint64\"},{\"name\":\"_s3\",\"type\":\"uint64\"}],\"name\":\"hasValidParam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starterClasses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"},{\"name\":\"_rankDataContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a1\",\"type\":\"uint64\"},{\"name\":\"_a2\",\"type\":\"uint64\"},{\"name\":\"_a3\",\"type\":\"uint64\"},{\"name\":\"_s1\",\"type\":\"uint64\"},{\"name\":\"_s2\",\"type\":\"uint64\"},{\"name\":\"_s3\",\"type\":\"uint64\"}],\"name\":\"setCastle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"setStarterClass\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rankDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"catchStarters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quickSetStarterClasses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getValidClassId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"},{\"name\":\"_rankDataContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerId\",\"type\":\"uint32\"}],\"name\":\"EventUpdateCastle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EtheremonRankBattle","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e0000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe47030000000000000000000000000838cda4a4cc873fff10f4d6373ada6636517fa31","Library":"","SwarmSource":"bzzr://a4aa64514d16e4c7e27d59dd411ee5dbc329a371388e3d764552a98fcedf741b"}]}