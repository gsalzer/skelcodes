{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*\r\n\r\nP3D Charity Mining Pool\r\n\r\n- Splits deposit according to feeDivisor (default is 4 = 25% donation)\r\n    - Sends user donation plus current dividends to charity address (Giveth)\r\n    - Uses the rest to buy P3D tokens under the sender's masternode\r\n    - feeDivisor can be from 2 to 10 (50% to 10% donation range)\r\n- Dividends accumulated by miner can be sent as donation at anytime\r\n- Donors can sell their share of tokens at anytime and withdraw the ETH value!\r\n\r\nhttps://discord.gg/N4UShc3\r\n\r\n*/\r\n\r\ncontract ERC20Interface {\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract POWH {\r\n    function buy(address) public payable returns(uint256);\r\n    function sell(uint256) public;\r\n    function withdraw() public;\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n}\r\n\r\ncontract CharityMiner {\r\n    using SafeMath for uint256;\r\n    \r\n    // Modifiers\r\n    modifier notP3d(address aContract) {\r\n        require(aContract != address(p3d));\r\n        _;\r\n    }\r\n    \r\n    // Events\r\n    event Deposit(uint256 amount, address depositer, uint256 donation);\r\n    event Withdraw(uint256 tokens, address depositer, uint256 tokenValue, uint256 donation);\r\n    event Dividends(uint256 amount, address sender);\r\n    event Paused(bool paused);\r\n    \r\n    // Public Variables\r\n    bool public paused = false;\r\n    address public charityAddress = 0x8f951903C9360345B4e1b536c7F5ae8f88A64e79; // Giveth\r\n    address public owner;\r\n    address public P3DAddress;\r\n    address public largestDonor;\r\n    address public lastDonor;\r\n    uint public totalDonors;\r\n    uint public totalDonated;\r\n    uint public totalDonations;\r\n    uint public largestDonation;\r\n    uint public currentHolders;\r\n    uint public totalDividends;\r\n    \r\n    // Public Mappings\r\n    mapping( address => bool ) public donor;\r\n    mapping( address => uint256 ) public userTokens;\r\n    mapping( address => uint256 ) public userDonations;\r\n    \r\n    // PoWH Contract\r\n    POWH p3d;\r\n\t\r\n\t// Constructor\r\n\tconstructor(address powh) public {\r\n\t    p3d = POWH(powh);\r\n\t    P3DAddress = powh;\r\n\t    owner = msg.sender;\r\n\t}\r\n\t\r\n\t// Pause\r\n\t// - In case charity address is no longer active or deposits have to be paused for unexpected reason\r\n\t// - Cannot be paused while anyone owns tokens\r\n\tfunction pause() public {\r\n\t    require(msg.sender == owner && myTokens() == 0);\r\n\t    paused = !paused;\r\n\t    \r\n\t    emit Paused(paused);\r\n\t}\r\n\t\r\n\t// Fallback\r\n\t// - Easy deposit, sets default feeDivisor\r\n\tfunction() payable public {\r\n\t    if(msg.sender != address(p3d)) { // Need to receive divs from P3D contract\r\n    \t    uint8 feeDivisor = 4; // Default 25% donation\r\n    \t    deposit(feeDivisor);\r\n\t    }\r\n\t}\r\n\r\n\t// Deposit\r\n    // - Divide deposit by feeDivisor then add divs and send as donation\r\n\t// - Use the rest to buy P3D tokens under sender's masternode\r\n\tfunction deposit(uint8 feeDivisor) payable public {\r\n\t    require(msg.value > 100000 && !paused);\r\n\t    require(feeDivisor >= 2 && feeDivisor <= 10); // 50% to 10% donation range\r\n\t    \r\n\t    // If we have divs, withdraw them\r\n\t    uint divs = myDividends();\r\n\t    if(divs > 0){\r\n\t        p3d.withdraw();\r\n\t    }\r\n\t    \r\n\t    // Split deposit\r\n\t    uint fee = msg.value.div(feeDivisor);\r\n\t    uint purchase = msg.value.sub(fee);\r\n\t    uint donation = divs.add(fee);\r\n\t    \r\n\t    // Send donation\r\n\t    charityAddress.transfer(donation);\r\n\t    \r\n\t    // Buy tokens\r\n\t    uint tokens = myTokens();\r\n\t    p3d.buy.value(purchase)(msg.sender);\r\n\t    uint newTokens = myTokens().sub(tokens);\r\n\t    \r\n\t    // If new donor, add them to stats\r\n\t    if(!donor[msg.sender]){\r\n\t        donor[msg.sender] = true;\r\n\t        totalDonors += 1;\r\n\t        currentHolders += 1;\r\n\t    }\r\n\t    \r\n\t    // If largest donor, update stats\r\n\t    // Don't include dividends or token value in user donations\r\n\t    if(fee > largestDonation){ \r\n\t        largestDonation = fee;\r\n\t        largestDonor = msg.sender;\r\n\t    }\r\n\t    \r\n\t    // Update stats and storage\r\n\t    totalDonations += 1;\r\n\t    totalDonated += donation;\r\n\t    totalDividends += divs;\r\n\t    lastDonor = msg.sender;\r\n\t    userDonations[msg.sender] = userDonations[msg.sender].add(fee); \r\n\t    userTokens[msg.sender] = userTokens[msg.sender].add(newTokens);\r\n\t    \r\n\t    // Deposit event\r\n\t    emit Deposit(purchase, msg.sender, donation);\r\n\t}\r\n\t\r\n\t// Withdraw\r\n\t// - Sell user's tokens and withdraw the eth value, sends divs as donation\r\n\t// - User doesn't get any of the excess divs\r\n\tfunction withdraw() public {\r\n\t    uint tokens = userTokens[msg.sender];\r\n\t    require(tokens > 0);\r\n\t    \r\n\t    // Save divs and balance\r\n\t    uint divs = myDividends();\r\n\t    uint balance = address(this).balance;\r\n\t    \r\n\t    // Update before we sell\r\n\t    userTokens[msg.sender] = 0;\r\n\t    \r\n\t    // Sell tokens and withdraw\r\n\t    p3d.sell(tokens);\r\n\t    p3d.withdraw();\r\n\t    \r\n\t    // Get value of sold tokens\r\n\t    uint tokenValue = address(this).balance.sub(divs).sub(balance);\r\n\t    \r\n\t    // Send donation and payout\r\n\t    charityAddress.transfer(divs);\r\n\t    msg.sender.transfer(tokenValue);\r\n\t    \r\n\t    // Update stats\r\n\t    totalDonated += divs;\r\n\t    totalDividends += divs;\r\n\t    totalDonations += 1;\r\n\t    currentHolders -= 1;\r\n\t    \r\n\t    // Withdraw event\r\n\t    emit Withdraw(tokens, msg.sender, tokenValue, divs);\r\n\t}\r\n\t\r\n\t// SendDividends\r\n\t// - Withdraw dividends and send as donation (can be called by anyone)\r\n\tfunction sendDividends() public {\r\n\t    uint divs = myDividends();\r\n\t    // Don't want to spam them with tiny donations\r\n\t    require(divs > 100000);\r\n\t    p3d.withdraw();\r\n\t    \r\n\t    // Send donation\r\n\t    charityAddress.transfer(divs);\r\n\t    \r\n\t    // Update stats\r\n\t    totalDonated += divs;\r\n\t    totalDividends += divs;\r\n\t    totalDonations += 1;\r\n\t    \r\n\t    // Dividends event\r\n\t    emit Dividends(divs, msg.sender);\r\n\t}\r\n\t\r\n    // MyTokens\r\n    // - Retun tokens owned by this contract\r\n    function myTokens() public view returns(uint256) {\r\n        return p3d.myTokens();\r\n    }\r\n    \r\n\t// MyDividends\r\n\t// - Return contract's current dividends including referral bonus\r\n\tfunction myDividends() public view returns(uint256) {\r\n        return p3d.myDividends(true);\r\n    }\r\n\t\r\n\t// Rescue function to transfer tokens. Cannot be used on P3D.\r\n\tfunction transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) public notP3d(tokenAddress) returns (bool success) {\r\n\t\trequire(msg.sender == owner);\r\n\t\treturn ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n\t}\r\n    \r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalDonated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDonations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"largestDonor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDonor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"P3DAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeDivisor\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"powh\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"}]","ContractName":"CharityMiner","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe","Library":"","SwarmSource":"bzzr://0193a17f9e6d32d916fbf4c22bb1ceef9bf12c895b51d2b05cb21bef521f5217"}]}