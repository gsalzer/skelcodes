{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Currency contract\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address from, address to, uint tokens);\r\n    event Approval(address tokenOwner, address spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// CNT Currency contract extended API\r\n// ----------------------------------------------------------------------------\r\ncontract PRE_SALE_Token is ERC20Interface {\r\n    function ico_distribution(address to, uint tokens) public;\r\n    function init(address _sale) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// NRB_Contract User Contract API\r\n// ----------------------------------------------------------------------------\r\ncontract NRB_Contract {\r\n    function registerUserOnToken(address _token, address _user, uint _value, uint _flc, string _json) public returns (uint);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// contract WhiteListAccess\r\n// ----------------------------------------------------------------------------\r\ncontract WhiteListAccess { \r\n    \r\n    function WhiteListAccess() public {\r\n        owner = msg.sender;\r\n        whitelist[owner] = true;\r\n        whitelist[address(this)] = true;\r\n    }\r\n    \r\n    address public owner;\r\n    mapping (address => bool) whitelist;\r\n\r\n    modifier onlyOwner {require(msg.sender == owner); _;}\r\n    modifier onlyWhitelisted {require(whitelist[msg.sender]); _;}\r\n\r\n    function addToWhiteList(address trusted) public onlyOwner() {\r\n        whitelist[trusted] = true;\r\n    }\r\n\r\n    function removeFromWhiteList(address untrusted) public onlyOwner() {\r\n        whitelist[untrusted] = false;\r\n    }\r\n\r\n}\r\n// ----------------------------------------------------------------------------\r\n// CNT_Common contract\r\n// ----------------------------------------------------------------------------\r\ncontract CNT_Common is WhiteListAccess {\r\n    string  public name;\r\n    function CNT_Common() public { ETH_address = 0x1; }\r\n\r\n    // Deployment\r\n    bool public _init;\r\n    address public ETH_address;    // representation of Ether as Token (0x1)\r\n    address public EOS_address;    // EOS Tokens\r\n    address public NRB_address;    // New Rich on The Block Contract\r\n    \r\n    address public CNT_address;    // Chip\r\n    address public BGB_address;    // BG Coin\r\n    address public VPE_address;    // Vapaee Token\r\n    address public GVPE_address;   // Golden Vapaee Token\r\n    \r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// CNT_Crowdsale\r\n// ----------------------------------------------------------------------------\r\ncontract CNT_Crowdsale is CNT_Common {\r\n\r\n    uint public raised;\r\n    uint public remaining;\r\n    uint public cnt_per_eos;\r\n    uint public bgb_per_eos;\r\n    uint public vpe_per_eos;\r\n    uint public gvpe_per_eos;\r\n    mapping(address => uint) public paid;\r\n\r\n    event Sale(address from, uint eos_tokens, address to, uint cnt_tokens, uint mana_tokens, uint vpe_tokens, uint gvpe_tokens);\r\n    // --------------------------------------------------------------------------------\r\n\r\n    function CNT_Crowdsale() public {\r\n        cnt_per_eos = 300;\r\n        bgb_per_eos = 300;\r\n        vpe_per_eos = 100;\r\n        gvpe_per_eos = 1;\r\n        name = \"CNT_Crowdsale\";\r\n        remaining = 1000000 * 10**18; // 1 million\r\n    }\r\n\r\n    function init(address _eos, address _cnt, address _bgb, address _vpe, address _gvpe, address _nrb) public {\r\n        require(!_init);\r\n        EOS_address = _eos;\r\n        CNT_address = _cnt;\r\n        BGB_address = _bgb;\r\n        VPE_address = _vpe;\r\n        GVPE_address = _gvpe;\r\n        NRB_address = _nrb;\r\n        PRE_SALE_Token(CNT_address).init(address(this));\r\n        PRE_SALE_Token(BGB_address).init(address(this));\r\n        PRE_SALE_Token(VPE_address).init(address(this));\r\n        PRE_SALE_Token(GVPE_address).init(address(this));\r\n        _init = true;\r\n    }\r\n\r\n    function isInit() constant public returns (bool) {\r\n        return _init;\r\n    }\r\n\r\n    function calculateTokens(uint _eos_amount) constant public returns (uint, uint, uint, uint) {\r\n        return (\r\n            _eos_amount * cnt_per_eos,\r\n            _eos_amount * bgb_per_eos,\r\n            _eos_amount * vpe_per_eos,\r\n            _eos_amount * gvpe_per_eos\r\n        );\r\n    }\r\n\r\n    function buy(uint _eos_amount) public {\r\n        // calculate how much of each token must be sent\r\n        require(remaining >= _eos_amount);\r\n\r\n        uint cnt_amount  = 0;\r\n        uint bgb_amount = 0;\r\n        uint vpe_amount  = 0;\r\n        uint gvpe_amount = 0;\r\n\r\n        (cnt_amount, bgb_amount, vpe_amount, gvpe_amount) = calculateTokens(_eos_amount);\r\n\r\n        // send the tokens\r\n        PRE_SALE_Token(CNT_address) .ico_distribution(msg.sender, cnt_amount);\r\n        PRE_SALE_Token(BGB_address) .ico_distribution(msg.sender, bgb_amount);\r\n        PRE_SALE_Token(VPE_address) .ico_distribution(msg.sender, vpe_amount);\r\n        PRE_SALE_Token(GVPE_address).ico_distribution(msg.sender, gvpe_amount);\r\n\r\n        // registro la compra\r\n        Sale(address(this), _eos_amount, msg.sender, cnt_amount, bgb_amount, vpe_amount, gvpe_amount);\r\n        paid[msg.sender] = paid[msg.sender] + _eos_amount;\r\n\r\n        // env√≠o los eos al owner\r\n        ERC20Interface(EOS_address).transferFrom(msg.sender, owner, _eos_amount);\r\n\r\n        raised = raised + _eos_amount;\r\n        remaining = remaining - _eos_amount;\r\n    }\r\n\r\n    function registerUserOnToken(string _json) public {\r\n        NRB_Contract(CNT_address).registerUserOnToken(EOS_address, msg.sender, paid[msg.sender], 0, _json);\r\n    }\r\n\r\n    function finishPresale() public onlyOwner() {\r\n        uint cnt_amount  = 0;\r\n        uint bgb_amount = 0;\r\n        uint vpe_amount  = 0;\r\n        uint gvpe_amount = 0;\r\n\r\n        (cnt_amount, bgb_amount, vpe_amount, gvpe_amount) = calculateTokens(remaining);\r\n\r\n        // send the tokens\r\n        PRE_SALE_Token(CNT_address) .ico_distribution(owner, cnt_amount);\r\n        PRE_SALE_Token(BGB_address) .ico_distribution(owner, bgb_amount);\r\n        PRE_SALE_Token(VPE_address) .ico_distribution(owner, vpe_amount);\r\n        PRE_SALE_Token(GVPE_address).ico_distribution(owner, gvpe_amount);\r\n\r\n        // registro la compra\r\n        Sale(address(this), remaining, owner, cnt_amount, bgb_amount, vpe_amount, gvpe_amount);\r\n        paid[owner] = paid[owner] + remaining;\r\n\r\n        raised = raised + remaining;\r\n        remaining = 0;        \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"untrusted\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CNT_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cnt_per_eos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BGB_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trusted\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NRB_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gvpe_per_eos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eos_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"registerUserOnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eos\",\"type\":\"address\"},{\"name\":\"_cnt\",\"type\":\"address\"},{\"name\":\"_bgb\",\"type\":\"address\"},{\"name\":\"_vpe\",\"type\":\"address\"},{\"name\":\"_gvpe\",\"type\":\"address\"},{\"name\":\"_nrb\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VPE_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bgb_per_eos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vpe_per_eos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GVPE_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eos_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EOS_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eos_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cnt_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mana_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vpe_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gvpe_tokens\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"}]","ContractName":"CNT_Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96eae89f8ef04d4c895bcdfbb7cd1a8a2fbaf3f4161e77fef177e1b5c06ada25"}]}