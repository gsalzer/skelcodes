{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// ERC Token Standard #20 Interface (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface ICustomers {\r\n\r\n  /**\r\n   * @dev Allow new provider applications\r\n   * @param _providerAddress The provider's public key address\r\n   * @param _name The provider's name\r\n   * @param _details A SHA256 hash of the new providers details\r\n   * @param _fee The fee charged for customer verification\r\n   */\r\n  function newProvider(address _providerAddress, string _name, bytes32 _details, uint256 _fee) public returns (bool success);\r\n\r\n  /**\r\n   * @dev Change a providers fee\r\n   * @param _newFee The new fee of the provider\r\n   */\r\n  function changeFee(uint256 _newFee) public returns (bool success);\r\n\r\n  /**\r\n   * @dev Verify an investor\r\n   * @param _customer The customer's public key address\r\n   * @param _countryJurisdiction The country urisdiction code of the customer\r\n   * @param _divisionJurisdiction The subdivision jurisdiction code of the customer\r\n   * @param _role The type of customer - investor:1, delegate:2, issuer:3, marketmaker:4, etc.\r\n   * @param _accredited Whether the customer is accredited or not (only applied to investors)\r\n   * @param _expires The time the verification expires\r\n   */\r\n  function verifyCustomer(\r\n    address _customer,\r\n    bytes32 _countryJurisdiction,\r\n    bytes32 _divisionJurisdiction,\r\n    uint8 _role,\r\n    bool _accredited,\r\n    uint256 _expires\r\n  ) public returns (bool success);\r\n\r\n   ///////////////////\r\n    /// GET Functions\r\n    //////////////////\r\n\r\n  /**\r\n    * @dev Get customer attestation data by KYC provider and customer ethereum address\r\n    * @param _provider Address of the KYC provider.\r\n    * @param _customer Address of the customer ethereum address\r\n    */\r\n  function getCustomer(address _provider, address _customer) public constant returns (\r\n    bytes32,\r\n    bytes32,\r\n    bool,\r\n    uint8,\r\n    bool,\r\n    uint256\r\n  );\r\n\r\n  /**\r\n   * Get provider details and fee by ethereum address\r\n   * @param _providerAddress Address of the KYC provider\r\n   */\r\n  function getProvider(address _providerAddress) public constant returns (\r\n    string name,\r\n    uint256 joined,\r\n    bytes32 details,\r\n    uint256 fee\r\n  );\r\n}\r\n\r\n/*\r\n  Polymath customer registry is used to ensure regulatory compliance\r\n  of the investors, provider, and issuers. The customers registry is a central\r\n  place where ethereum addresses can be whitelisted to purchase certain security\r\n  tokens based on their verifications by providers.\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Customers\r\n * @dev Contract use to register the user on the Platform platform\r\n */\r\n\r\ncontract Customers is ICustomers {\r\n\r\n    string public VERSION = \"1\";\r\n\r\n    IERC20 POLY;                                                        // Instance of the POLY token\r\n\r\n    struct Customer {                                                   // Structure use to store the details of the customers\r\n        bytes32 countryJurisdiction;                                    // Customers country jurisdiction as ex - ISO3166\r\n        bytes32 divisionJurisdiction;                                   // Customers sub-division jurisdiction as ex - ISO3166\r\n        uint256 joined;                                                 // Timestamp when customer register\r\n        uint8 role;                                                     // role of the customer\r\n        bool verified;                                                  // Boolean variable to check the status of the customer whether it is verified or not\r\n        bool accredited;                                                // Accrediation status of the customer\r\n        bytes32 proof;                                                  // Proof for customer\r\n        uint256 expires;                                                // Timestamp when customer verification expires\r\n    }\r\n\r\n    mapping(address => mapping(address => Customer)) public customers;  // Customers (kyc provider address => customer address)\r\n\r\n    struct Provider {                                                   // KYC/Accreditation Provider\r\n        string name;                                                    // Name of the provider\r\n        uint256 joined;                                                 // Timestamp when provider register\r\n        bytes32 details;                                                // Details of provider\r\n        uint256 fee;                                                    // Fee charged by the KYC providers\r\n    }\r\n\r\n    mapping(address => Provider) public providers;                      // KYC/Accreditation Providers\r\n\r\n    // Notifications\r\n    event LogNewProvider(address providerAddress, string name, bytes32 details);\r\n    event LogCustomerVerified(address customer, address provider, uint8 role);\r\n\r\n    // Modifier\r\n    modifier onlyProvider() {\r\n        require(providers[msg.sender].details != 0x0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    function Customers(address _polyTokenAddress) public {\r\n        POLY = IERC20(_polyTokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow new provider applications\r\n     * @param _providerAddress The provider's public key address\r\n     * @param _name The provider's name\r\n     * @param _details A SHA256 hash of the new providers details\r\n     * @param _fee The fee charged for customer verification\r\n     */\r\n    function newProvider(address _providerAddress, string _name, bytes32 _details, uint256 _fee) public returns (bool success) {\r\n        require(_providerAddress != address(0));\r\n        require(_details != 0x0);\r\n        require(providers[_providerAddress].details == 0x0);\r\n        providers[_providerAddress] = Provider(_name, now, _details, _fee);\r\n        LogNewProvider(_providerAddress, _name, _details);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Change a providers fee\r\n     * @param _newFee The new fee of the provider\r\n     */\r\n    function changeFee(uint256 _newFee) public returns (bool success) {\r\n        require(providers[msg.sender].details != 0x0);\r\n        providers[msg.sender].fee = _newFee;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Verify an investor\r\n     * @param _customer The customer's public key address\r\n     * @param _countryJurisdiction The jurisdiction country code of the customer\r\n     * @param _divisionJurisdiction The jurisdiction subdivision code of the customer\r\n     * @param _role The type of customer - investor:1, delegate:2, issuer:3, marketmaker:4, etc.\r\n     * @param _accredited Whether the customer is accredited or not (only applied to investors)\r\n     * @param _expires The time the verification expires\r\n     */\r\n    function verifyCustomer(\r\n        address _customer,\r\n        bytes32 _countryJurisdiction,\r\n        bytes32 _divisionJurisdiction,\r\n        uint8 _role,\r\n        bool _accredited,\r\n        uint256 _expires\r\n    ) public onlyProvider returns (bool success)\r\n    {\r\n        require(_expires > now);\r\n        require(POLY.transferFrom(_customer, msg.sender, providers[msg.sender].fee));\r\n        customers[msg.sender][_customer].countryJurisdiction = _countryJurisdiction;\r\n        customers[msg.sender][_customer].divisionJurisdiction = _divisionJurisdiction;\r\n        customers[msg.sender][_customer].role = _role;\r\n        customers[msg.sender][_customer].accredited = _accredited;\r\n        customers[msg.sender][_customer].expires = _expires;\r\n        customers[msg.sender][_customer].verified = true;\r\n        LogCustomerVerified(_customer, msg.sender, _role);\r\n        return true;\r\n    }\r\n\r\n    ///////////////////\r\n    /// GET Functions\r\n    //////////////////\r\n\r\n    /**\r\n     * @dev Get customer attestation data by KYC provider and customer ethereum address\r\n     * @param _provider Address of the KYC provider.\r\n     * @param _customer Address of the customer ethereum address\r\n     */\r\n    function getCustomer(address _provider, address _customer) public constant returns (\r\n        bytes32,\r\n        bytes32,\r\n        bool,\r\n        uint8,\r\n        bool,\r\n        uint256\r\n    ) {\r\n      return (\r\n        customers[_provider][_customer].countryJurisdiction,\r\n        customers[_provider][_customer].divisionJurisdiction,\r\n        customers[_provider][_customer].accredited,\r\n        customers[_provider][_customer].role,\r\n        customers[_provider][_customer].verified,\r\n        customers[_provider][_customer].expires\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Get provider details and fee by ethereum address\r\n     * @param _providerAddress Address of the KYC provider\r\n     */\r\n    function getProvider(address _providerAddress) public constant returns (\r\n        string name,\r\n        uint256 joined,\r\n        bytes32 details,\r\n        uint256 fee\r\n    ) {\r\n      return (\r\n        providers[_providerAddress].name,\r\n        providers[_providerAddress].joined,\r\n        providers[_providerAddress].details,\r\n        providers[_providerAddress].fee\r\n      );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"providers\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"joined\",\"type\":\"uint256\"},{\"name\":\"details\",\"type\":\"bytes32\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customers\",\"outputs\":[{\"name\":\"countryJurisdiction\",\"type\":\"bytes32\"},{\"name\":\"divisionJurisdiction\",\"type\":\"bytes32\"},{\"name\":\"joined\",\"type\":\"uint256\"},{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"verified\",\"type\":\"bool\"},{\"name\":\"accredited\",\"type\":\"bool\"},{\"name\":\"proof\",\"type\":\"bytes32\"},{\"name\":\"expires\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"},{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"getCustomer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_countryJurisdiction\",\"type\":\"bytes32\"},{\"name\":\"_divisionJurisdiction\",\"type\":\"bytes32\"},{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_accredited\",\"type\":\"bool\"},{\"name\":\"_expires\",\"type\":\"uint256\"}],\"name\":\"verifyCustomer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"getProvider\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"joined\",\"type\":\"uint256\"},{\"name\":\"details\",\"type\":\"bytes32\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_providerAddress\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_details\",\"type\":\"bytes32\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"newProvider\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polyTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"providerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"LogNewProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"LogCustomerVerified\",\"type\":\"event\"}]","ContractName":"Customers","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec","Library":"","SwarmSource":"bzzr://a693200e20d62af1ac59a8d7e610cb1795051d5f59c8d7034dd9a95112ed7ad3"}]}