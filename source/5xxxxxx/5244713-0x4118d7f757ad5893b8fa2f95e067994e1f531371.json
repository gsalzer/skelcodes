{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract BitGuildToken {\r\n    // Public variables of the token\r\n    string public name = \"BitGuild PLAT\";\r\n    string public symbol = \"PLAT\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function BitGuildToken() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title BitGuildWhitelist\r\n * A small smart contract to provide whitelist functionality and storage\r\n */\r\ncontract BitGuildWhitelist {\r\n\r\n  address admin;\r\n\r\n  mapping (address => bool) public whitelist;\r\n  uint256 public totalWhitelisted = 0;\r\n\r\n  event AddressWhitelisted(address indexed user, bool whitelisted);\r\n\r\n  function BitGuildWhitelist() public {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  // Doesn't accept eth\r\n  function () external payable {\r\n    revert();\r\n  }\r\n\r\n  // Allows an admin to update whitelist\r\n  function whitelistAddress(address[] _users, bool _whitelisted) public {\r\n    require(msg.sender == admin);\r\n    for (uint i = 0; i < _users.length; i++) {\r\n      if (whitelist[_users[i]] == _whitelisted) continue;\r\n      if (_whitelisted) {\r\n        totalWhitelisted++;\r\n      } else {\r\n        if (totalWhitelisted > 0) {\r\n          totalWhitelisted--;\r\n        }\r\n      }\r\n      AddressWhitelisted(_users[i], _whitelisted);\r\n      whitelist[_users[i]] = _whitelisted;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title BitGuildCrowdsale\r\n * Capped crowdsale with a stard/end date\r\n */\r\ncontract BitGuildCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // Token being sold\r\n  BitGuildToken public token;\r\n\r\n  // Whitelist being used\r\n  BitGuildWhitelist public whitelist;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // Crowdsale cap (how much can be raised total)\r\n  uint256 public cap = 14062.5 ether;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Predefined rate of PLAT to Ethereum (1/rate = crowdsale price)\r\n  uint256 public rate = 80000;\r\n\r\n  // Min/max purchase\r\n  uint256 public minContribution = 0.5 ether;\r\n  uint256 public maxContribution = 1500 ether;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  mapping (address => uint256) public contributions;\r\n\r\n  // Finalization flag for when we want to withdraw the remaining tokens after the end\r\n  bool public crowdsaleFinalized = false;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function BitGuildCrowdsale(uint256 _startTime, uint256 _endTime, address _token, address _wallet, address _whitelist) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_token != address(0));\r\n    require(_wallet != address(0));\r\n    require(_whitelist != address(0));\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    token = BitGuildToken(_token);\r\n    wallet = _wallet;\r\n    whitelist = BitGuildWhitelist(_whitelist);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(whitelist.whitelist(beneficiary));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update total and individual contributions\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\r\n\r\n    // Send tokens\r\n    token.transfer(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    // Send funds\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // Returns true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    bool endTimeReached = now > endTime;\r\n    return capReached || endTimeReached || crowdsaleFinalized;\r\n  }\r\n\r\n  // Bonuses for larger purchases (in hundredths of percent)\r\n  function bonusPercentForWeiAmount(uint256 weiAmount) public pure returns(uint256) {\r\n    if (weiAmount >= 500 ether) return 1000; // 10%\r\n    if (weiAmount >= 250 ether) return 750;  // 7.5%\r\n    if (weiAmount >= 100 ether) return 500;  // 5%\r\n    if (weiAmount >= 50 ether) return 375;   // 3.75%\r\n    if (weiAmount >= 15 ether) return 250;   // 2.5%\r\n    if (weiAmount >= 5 ether) return 125;    // 1.25%\r\n    return 0; // 0% bonus if lower than 5 eth\r\n  }\r\n\r\n  // Returns you how much tokens do you get for the wei passed\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    uint256 bonus = bonusPercentForWeiAmount(weiAmount);\r\n    tokens = tokens.mul(10000 + bonus).div(10000);\r\n    return tokens;\r\n  }\r\n\r\n  // Returns true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool moreThanMinPurchase = msg.value >= minContribution;\r\n    bool lessThanMaxPurchase = contributions[msg.sender] + msg.value <= maxContribution;\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n\r\n    return withinPeriod && moreThanMinPurchase && lessThanMaxPurchase && withinCap && !crowdsaleFinalized;\r\n  }\r\n\r\n  // Escape hatch in case the sale needs to be urgently stopped\r\n  function finalizeCrowdsale() public {\r\n    require(msg.sender == wallet);\r\n    crowdsaleFinalized = true;\r\n    // send remaining tokens back to the admin\r\n    uint256 tokensLeft = token.balanceOf(this);\r\n    token.transfer(wallet, tokensLeft);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"bonusPercentForWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"BitGuildCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005aab10dd000000000000000000000000000000000000000000000000000000005ac71aef0000000000000000000000007e43581b19ab509bcf9397a2efd1ab10233f27de0000000000000000000000004ca7c22ca04a8722e40f93a66c502d64c0ed6aa2000000000000000000000000aa984789e7c784037c4e8c66f865b95aa1f820e2","Library":"","SwarmSource":"bzzr://d7265241cda79dcf3dac9f83243b1ed859090295313a4ab5d6a53d1e966730e7"}]}