{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract KanadeCoin is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct VoteStruct {\r\n        uint128 number;\r\n        uint256 amount;\r\n        address from;\r\n        uint128 time;\r\n    }\r\n\r\n    struct QuestionStruct {\r\n        uint8   isStarted;\r\n        address recipient;\r\n        uint128 finish;\r\n        uint    under;\r\n        VoteStruct[] votes;\r\n    }\r\n\r\n    struct RandomBoxStruct {\r\n        uint8   isStarted;\r\n        address recipient;\r\n        uint64  volume;\r\n        uint256 amount;\r\n        uint128 finish;\r\n    }\r\n\r\n    struct RandomItemStruct {\r\n        mapping(bytes32 => uint256[]) values;\r\n    }\r\n\r\n\r\n    address public constant addrDevTeam      = 0x4d85FCF252c02FA849258f16c5464aF529ebFA5F; // 1%\r\n    address public constant addrLockUp       = 0x0101010101010101010101010101010101010101; // 9%\r\n    address public constant addrBounty       = 0x3CCDb82F43EEF681A39AE854Be37ad1C40446F0d; // 25%\r\n    address public constant addrDistribution = 0x9D6FB734a716306a9575E3ce971AB8839eDcEdF3; // 10%\r\n    address public constant addrAirDrop      = 0xD6A4ce07f18619Ec73f91CcDbefcCE53f048AE05; // 55%\r\n\r\n    uint public constant atto = 100000000;\r\n    uint public constant decimals = 8;\r\n\r\n    string public constant name   = \"KanadeCoin\";\r\n    string public constant symbol = \"KNDC\";\r\n\r\n    uint public contractStartTime;\r\n\r\n    uint64 public constant lockupSeconds = 60 * 60 * 24 * 365 * 3;\r\n\r\n    mapping(bytes32 => QuestionStruct) questions;\r\n    mapping(address => string) saveData;\r\n    mapping(bytes32 => RandomBoxStruct) randomBoxes;\r\n    mapping(address => RandomItemStruct) randomItems;\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function initializeContract() onlyOwner public {\r\n        if (totalSupply_ != 0) return;\r\n\r\n        contractStartTime = now;\r\n\r\n        balances[addrDevTeam]      = 10000000000 * 0.01 * atto;\r\n        balances[addrLockUp]       = 10000000000 * 0.09 * atto;\r\n        balances[addrBounty]       = 10000000000 * 0.25 * atto;\r\n        balances[addrDistribution] = 10000000000 * 0.10 * atto;\r\n        balances[addrAirDrop]      = 10000000000 * 0.55 * atto;\r\n\r\n        Transfer(0x0, addrDevTeam, balances[addrDevTeam]);\r\n        Transfer(0x0, addrLockUp, balances[addrLockUp]);\r\n        Transfer(0x0, addrBounty, balances[addrBounty]);\r\n        Transfer(0x0, addrDistribution, balances[addrDistribution]);\r\n        Transfer(0x0, addrAirDrop, balances[addrAirDrop]);\r\n\r\n        totalSupply_ = 10000000000 * atto;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////\r\n\r\n    function unLockup() onlyOwner public {\r\n        require(uint256(now).sub(lockupSeconds) > contractStartTime);\r\n        uint _amount = balances[addrLockUp];\r\n        balances[addrLockUp] = balances[addrLockUp].sub(_amount);\r\n        balances[addrDevTeam] = balances[addrDevTeam].add(_amount);\r\n        Transfer(addrLockUp, addrDevTeam, _amount);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////\r\n\r\n    function createQuestion(string _id_max32, address _recipient, uint128 _finish, uint _under) public {\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        require(questions[_idByte].isStarted == 0);\r\n\r\n        transfer(addrBounty, 5000 * atto);\r\n\r\n        questions[_idByte].isStarted = 1;\r\n        questions[_idByte].recipient = _recipient;\r\n        questions[_idByte].finish = _finish;\r\n        questions[_idByte].under = _under;\r\n    }\r\n\r\n    function getQuestion(string _id_max32) constant public returns (uint[4]) {\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        uint[4] values;\r\n        values[0] = questions[_idByte].isStarted;\r\n        values[1] = uint(questions[_idByte].recipient);\r\n        values[2] = questions[_idByte].finish;\r\n        values[3] = questions[_idByte].under;\r\n        return values;\r\n    }\r\n\r\n    function vote(string _id_max32, uint128 _number, uint _amount) public {\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        require(\r\n            questions[_idByte].isStarted == 1 &&\r\n            questions[_idByte].under <= _amount &&\r\n            questions[_idByte].finish >= uint128(now));\r\n\r\n        if (_amount > 0) {\r\n            transfer(questions[_idByte].recipient, _amount);\r\n        }\r\n\r\n        questions[_idByte].votes.push(VoteStruct(_number, _amount, msg.sender, uint128(now)));\r\n    }\r\n\r\n    function getQuestionVotesAllCount(string _id_max32) constant public returns (uint) {\r\n        return questions[keccak256(_id_max32)].votes.length;\r\n    }\r\n\r\n    function getQuestionVote(string _id_max32, uint _position) constant public returns (uint[4]) {\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        uint[4] values;\r\n        values[0] = questions[_idByte].votes[_position].number;\r\n        values[1] = questions[_idByte].votes[_position].amount;\r\n        values[2] = uint(questions[_idByte].votes[_position].from);\r\n        values[3] = questions[_idByte].votes[_position].time;\r\n        return values;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////\r\n\r\n    function putSaveData(string _text) public {\r\n        saveData[msg.sender] = _text;\r\n    }\r\n\r\n    function getSaveData(address _address) constant public returns (string) {\r\n        return saveData[_address];\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////\r\n\r\n    function createRandomBox(string _id_max32, address _recipient, uint64 _volume, uint256 _amount, uint128 _finish) public {\r\n        require(_volume > 0);\r\n\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        require(randomBoxes[_idByte].isStarted == 0);\r\n\r\n        transfer(addrBounty, 5000 * atto);\r\n\r\n        randomBoxes[_idByte].isStarted = 1;\r\n        randomBoxes[_idByte].recipient = _recipient;\r\n        randomBoxes[_idByte].volume = _volume;\r\n        randomBoxes[_idByte].amount = _amount;\r\n        randomBoxes[_idByte].finish = _finish;\r\n    }\r\n\r\n    function getRandomBox(string _id_max32) constant public returns (uint[5]) {\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        uint[5] values;\r\n        values[0] = randomBoxes[_idByte].isStarted;\r\n        values[1] = uint(randomBoxes[_idByte].recipient);\r\n        values[2] = randomBoxes[_idByte].volume;\r\n        values[3] = randomBoxes[_idByte].amount;\r\n        values[4] = randomBoxes[_idByte].finish;\r\n        return values;\r\n    }\r\n\r\n    function drawRandomItem(string _id_max32, uint _count) public {\r\n        require(_count > 0 && _count <= 1000);\r\n\r\n        bytes32 _idByte = keccak256(_id_max32);\r\n        uint _totalAmount = randomBoxes[_idByte].amount.mul(_count);\r\n        require(\r\n            randomBoxes[_idByte].isStarted == 1 &&\r\n            randomBoxes[_idByte].finish >= uint128(now));\r\n\r\n        transfer(randomBoxes[_idByte].recipient, _totalAmount);\r\n\r\n        for (uint i = 0; i < _count; i++) {\r\n            uint randomVal = uint(\r\n                keccak256(blockhash(block.number-1), randomItems[msg.sender].values[_idByte].length))\r\n                % randomBoxes[_idByte].volume;\r\n            randomItems[msg.sender].values[_idByte].push(randomVal);\r\n        }\r\n    }\r\n\r\n    function getRandomItems(address _addrss, string _id_max32) constant public returns (uint[]) {\r\n        return randomItems[_addrss].values[keccak256(_id_max32)];\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////\r\n\r\n    function airDrop(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\r\n        return distribute(addrAirDrop, _recipients, _values);\r\n    }\r\n\r\n    function rain(address[] _recipients, uint[] _values) public returns (bool) {\r\n        return distribute(msg.sender, _recipients, _values);\r\n    }\r\n\r\n    function distribute(address _from, address[] _recipients, uint[] _values) internal returns (bool) {\r\n        require(_recipients.length > 0 && _recipients.length == _values.length);\r\n\r\n        uint total = 0;\r\n        for(uint i = 0; i < _values.length; i++) {\r\n            total = total.add(_values[i]);\r\n        }\r\n        require(total <= balances[_from]);\r\n\r\n        for(uint j = 0; j < _recipients.length; j++) {\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n            Transfer(_from, _recipients[j], _values[j]);\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(total);\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"putSaveData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_volume\",\"type\":\"uint64\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_finish\",\"type\":\"uint128\"}],\"name\":\"createRandomBox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrLockUp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atto\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAirDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getRandomBox\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_finish\",\"type\":\"uint128\"},{\"name\":\"_under\",\"type\":\"uint256\"}],\"name\":\"createQuestion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrDevTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getQuestionVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"drawRandomItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"airDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getQuestionVotesAllCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"rain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addrss\",\"type\":\"address\"},{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getRandomItems\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getQuestion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_number\",\"type\":\"uint128\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSaveData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KanadeCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff6a30ca35f57674d0675c63bbb7bd049fa0734b4bd88e39159952c48ef4d8ee"}]}