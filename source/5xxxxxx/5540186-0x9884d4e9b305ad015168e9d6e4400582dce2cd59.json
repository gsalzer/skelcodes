{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract token {\r\n    function totalSupply() public view returns (uint total);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function ownerOf(uint _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint _tokenId) external;\r\n    function transfer(address _to, uint _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint _tokenId) external;\r\n\r\n    event Transfer(address from, address to, uint tokenId);\r\n    event Approval(address owner, address approved, uint tokenId);\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\ncontract AccessControl {\r\n    \r\n    event ContractUpgrade(address newContract);\r\n\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n\r\n    bool public paused = false;\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyCEO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract Base is AccessControl {\r\n\r\n    event Birth(address owner, uint clownId, uint matronId, uint sireId, uint genes);\r\n\r\n    event Transfer(address from, address to, uint tokenId);\r\n\r\n    event Match(uint clownId, uint price, address seller, address buyer);\r\n\r\n    struct Clown {\r\n        uint genes;\r\n        uint64 birthTime;\r\n        uint32 matronId;\r\n        uint32 sireId;\r\n        uint16 sex; // 1 0\r\n        uint16 cooldownIndex;\r\n        uint16 generation;\r\n        uint16 growthAddition;\r\n        uint16 attrPower;\r\n        uint16 attrAgile;\r\n        uint16 attrWisdom;\r\n    }\r\n    \r\n    uint16[] digList = [300, 500, 800, 900, 950, 1000];\r\n\r\n    uint16[] rankList;\r\n\r\n    uint rankNum;\r\n    uint16[] spRank1 = [5, 25, 75, 95, 99, 100]; \r\n    uint16[] spRank2 = [15, 50, 90, 100, 0, 0];  \r\n    uint16[] norRank1 = [10, 50, 85, 99, 100, 0];\r\n    uint16[] norRank2 = [25, 70, 100, 0, 0, 0];\r\n\r\n\r\n    Clown[] clowns;\r\n\r\n    mapping (uint => address) public clownIndexToOwner;\r\n\r\n    mapping (address => uint) ownershipTokenCount;\r\n\r\n    mapping (uint => address) public clownIndexToApproved;\r\n\r\n    uint _seed = now;\r\n\r\n\r\n    function _random(uint size) internal returns (uint) {\r\n        _seed = uint(keccak256(keccak256(block.number, _seed), now));\r\n        return _seed % size;\r\n    }\r\n\r\n    function _subGene(uint _gene, uint _start, uint _len) internal pure returns (uint) {\r\n      uint result = _gene % (10**(_start+_len));\r\n      result = result / (10**_start);\r\n      return result;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        clownIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete clownIndexToApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createClown(\r\n        uint _matronId,\r\n        uint _sireId,\r\n        uint _generation,\r\n        uint _genes,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        require(_matronId == uint(uint32(_matronId)));\r\n        require(_sireId == uint(uint32(_sireId)));\r\n        require(_generation == uint(uint16(_generation)));\r\n\r\n        uint16 cooldownIndex = uint16(_generation / 2);\r\n        if (cooldownIndex > 8) {\r\n            cooldownIndex = 8;\r\n        }\r\n        uint16[] memory randomValue = new uint16[](3);\r\n        \r\n        uint spAttr = _random(3);\r\n        for (uint j = 0; j < 3; j++) {\r\n            if (spAttr == j) {\r\n                if (_generation == 0 || _subGene(_genes, 0, 2) >= 30) {\r\n                    rankList = spRank1;\r\n                } else {\r\n                    rankList = spRank2;\r\n                }\r\n            } else {\r\n                if (_generation == 0 || _subGene(_genes, 0, 2) >= 30) {\r\n                    rankList = norRank1;\r\n                } else {\r\n                    rankList = norRank2;\r\n                }\r\n            }\r\n\r\n            uint digNum = _random(100);\r\n            rankNum = 10;\r\n            for (uint k = 0; k < 6; k++) {\r\n                if (rankList[k] >= digNum && rankNum == 10) {\r\n                    rankNum = k;\r\n                }\r\n            }\r\n            \r\n            if (rankNum == 0 || rankNum == 10) {\r\n                randomValue[j] = 100 + uint16(_random(_genes) % 200);\r\n            } else {\r\n                randomValue[j] = digList[rankNum - 1] + uint16(_random(_genes) % (digList[rankNum] - digList[rankNum - 1]));\r\n            }\r\n        }\r\n\r\n        Clown memory _clown = Clown({\r\n            genes: _genes,\r\n            birthTime: uint64(now),\r\n            matronId: uint32(_matronId),\r\n            sireId: uint32(_sireId),\r\n            sex: uint16(_genes % 2),\r\n            cooldownIndex: cooldownIndex,\r\n            generation: uint16(_generation),\r\n            growthAddition: 0,\r\n            attrPower: randomValue[0],\r\n            attrAgile: randomValue[1],\r\n            attrWisdom: randomValue[2]\r\n        });\r\n        uint newClownId = clowns.push(_clown) - 1;\r\n\r\n        require(newClownId == uint(uint32(newClownId)));\r\n\r\n        Birth(\r\n            _owner,\r\n            newClownId,\r\n            uint(_clown.matronId),\r\n            uint(_clown.sireId),\r\n            _clown.genes\r\n        );\r\n\r\n        _transfer(0, _owner, newClownId);\r\n\r\n        return newClownId;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownership is Base, token, owned {\r\n\r\n    string public constant name = \"CryptoClown\";\r\n    string public constant symbol = \"CC\";\r\n\r\n    uint public promoTypeNum;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint)')) ^\r\n        bytes4(keccak256('approve(address,uint)')) ^\r\n        bytes4(keccak256('transfer(address,uint)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint,string)'));\r\n\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    function _owns(address _claimant, uint _tokenId) internal view returns (bool) {\r\n        return clownIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approvedFor(address _claimant, uint _tokenId) internal view returns (bool) {\r\n        return clownIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approve(uint _tokenId, address _approved) internal {\r\n        clownIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(\r\n        address _to,\r\n        uint _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _approve(_tokenId, _to);\r\n\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return clowns.length - 2;\r\n    }\r\n\r\n    function ownerOf(uint _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = clownIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) external view returns(uint[] ownerTokens) {\r\n        uint tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint[](0);\r\n        } else {\r\n            uint[] memory result = new uint[](tokenCount);\r\n            uint totalCats = totalSupply();\r\n            uint resultIndex = 0;\r\n\r\n            uint catId;\r\n\r\n            for (catId = 1; catId <= totalCats; catId++) {\r\n                if (clownIndexToOwner[catId] == _owner) {\r\n                    result[resultIndex] = catId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Minting is Ownership {\r\n\r\n    uint public constant PROMO_CREATION_LIMIT = 5000;\r\n    uint public constant GEN0_CREATION_LIMIT = 45000;\r\n\r\n    uint public promoCreatedCount;\r\n    uint public gen0CreatedCount;\r\n\r\n    function createPromoClown(uint _genes, address _owner, bool _isNew) external onlyCOO {\r\n        address clownOwner = _owner;\r\n        if (clownOwner == address(0)) {\r\n             clownOwner = cooAddress;\r\n        }\r\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n        if (_isNew) {\r\n            promoTypeNum++;\r\n        }\r\n\r\n        promoCreatedCount++;\r\n        _createClown(0, 0, 0, _genes, clownOwner);\r\n    }\r\n\r\n    function createGen0(uint _genes) external onlyCOO {\r\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\r\n\r\n        _createClown(0, 0, 0, _genes, msg.sender);\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n    function useProps(uint[] _clownIds, uint16[] _values, uint16[] _types) public onlyCOO {\r\n        for (uint16 j = 0; j < _clownIds.length; j++) {\r\n            uint _clownId = _clownIds[j];\r\n            uint16 _value = _values[j];\r\n            uint16 _type = _types[j];\r\n            Clown storage clown = clowns[_clownId];\r\n\r\n            if (_type == 0) {\r\n                clown.growthAddition += _value;\r\n            } else if (_type == 1) {\r\n                clown.attrPower += _value;\r\n            } else if (_type == 2) {\r\n                clown.attrAgile += _value;\r\n            } else if (_type == 3) {\r\n                clown.attrWisdom += _value;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract GeneScienceInterface {\r\n    function isGeneScience() public pure returns (bool);\r\n    function mixGenes(uint genes1, uint genes2, uint promoTypeNum) public returns (uint);\r\n}\r\n\r\n\r\ncontract Breeding is Ownership {\r\n\r\n    GeneScienceInterface public geneScience;\r\n\r\n    function setGeneScienceAddress(address _address) external onlyCEO {\r\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\r\n\r\n        require(candidateContract.isGeneScience());\r\n\r\n        geneScience = candidateContract;\r\n    }\r\n\r\n\r\n    function _updateCooldown(Clown storage _clown) internal {\r\n        if (_clown.cooldownIndex < 7) {\r\n            _clown.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n\r\n    function giveBirth(uint _matronId, uint _sireId) external onlyCOO returns(uint) {\r\n        Clown storage matron = clowns[_matronId];\r\n\r\n        Clown storage sire = clowns[_sireId];\r\n\r\n        // 限制公母\r\n        require(sire.sex == 1);\r\n        require(matron.sex == 0);\r\n        require(_matronId != _sireId);\r\n\r\n        _updateCooldown(sire);\r\n        _updateCooldown(matron);\r\n\r\n        require(matron.birthTime != 0);\r\n\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        uint mGenes = matron.genes;\r\n        uint sGenes = sire.genes;\r\n        uint childGenes = geneScience.mixGenes(mGenes, sGenes, promoTypeNum);\r\n        \r\n        address owner = clownIndexToOwner[_matronId];\r\n        uint clownId = _createClown(_matronId, _sireId, parentGen + 1, childGenes, owner);\r\n\r\n        return clownId;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ClownCore is Minting, Breeding {\r\n\r\n    address public newContractAddress;\r\n\r\n    function ClownCore() public {\r\n        paused = true;\r\n\r\n        ceoAddress = msg.sender;\r\n\r\n        cooAddress = msg.sender;\r\n\r\n        _createClown(0, 0, 0, uint(-1), 0x0);\r\n        _createClown(0, 0, 0, uint(-2), 0x0);\r\n    }\r\n\r\n    function setNewAddress(address _newAddress) external onlyCEO whenPaused {\r\n        newContractAddress = _newAddress;\r\n        ContractUpgrade(_newAddress);\r\n    }\r\n\r\n    function getClown(uint _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint cooldownIndex,\r\n        uint birthTime,\r\n        uint matronId,\r\n        uint sireId,\r\n        uint sex,\r\n        uint generation,\r\n        uint genes,\r\n        uint growthAddition,\r\n        uint attrPower,\r\n        uint attrAgile,\r\n        uint attrWisdom\r\n    ) {\r\n        Clown storage clo = clowns[_id];\r\n\r\n        cooldownIndex = uint(clo.cooldownIndex);\r\n        birthTime = uint(clo.birthTime);\r\n        matronId = uint(clo.matronId);\r\n        sireId = uint(clo.sireId);\r\n        sex = uint(clo.sex);\r\n        generation = uint(clo.generation);\r\n        genes = uint(clo.genes);\r\n        growthAddition = uint(clo.growthAddition);\r\n        attrPower = uint(clo.attrPower);\r\n        attrAgile = uint(clo.attrAgile);\r\n        attrWisdom = uint(clo.attrWisdom);\r\n    }\r\n\r\n    function unpause() public onlyCEO whenPaused {\r\n        \r\n        require(geneScience != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        super.unpause();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_isNew\",\"type\":\"bool\"}],\"name\":\"createPromoClown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clownIds\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint16[]\"},{\"name\":\"_types\",\"type\":\"uint16[]\"}],\"name\":\"useProps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoTypeNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clownIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clownIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getClown\",\"outputs\":[{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"sex\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"growthAddition\",\"type\":\"uint256\"},{\"name\":\"attrPower\",\"type\":\"uint256\"},{\"name\":\"attrAgile\",\"type\":\"uint256\"},{\"name\":\"attrWisdom\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"clownId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clownId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"ClownCore","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://904b3581841cc9afb2697362ee986253776fcbf445e33bc429f009fb1976b996"}]}