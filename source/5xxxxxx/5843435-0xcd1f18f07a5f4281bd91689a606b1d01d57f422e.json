{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    address constant public TOKEN_OWNER = 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8; //Token Owner\r\n    address constant public WALLET = 0x1513F644590d866e25490687AB1b3Ad262d5b6dF; //Investment storage;\r\n    uint256 constant public MINSALESCAP = 200 ether;\r\n    uint256 constant public MAXSALESCAP = 126000 ether;\r\n    uint256 constant public STARTDATE = 1533686401; //Friday, Wednesday, August 8, 2018 2:00:01 AM\r\n    uint256 constant public ENDDATE = 1543536060; // November 30, 2018 12:01:00 AM\r\n    uint256 constant public FXRATE = 50000;\r\n    uint256 constant public MINCONTRIBUTION = 5000000000000 wei; //0,005 eth\r\n\r\n    //set on deployment\r\n    address public TOKEN;\r\n    address public owner;\r\n    uint256 public weiRaised;\r\n\r\n    enum State { Running, Expired, Funded }\r\n    State public state;\r\n\r\n    struct ContributorStruct {\r\n        bool whitelisted;\r\n        uint256 contributions;\r\n    }\r\n    mapping(address => ContributorStruct) public whitelist;\r\n\r\n    modifier isContributor() {require(whitelist[msg.sender].contributions > 0x00); _;}\r\n    modifier isOwner() {require(msg.sender == owner); _;}\r\n    modifier inState(State _state) {require(state == _state); _;}\r\n    modifier inPaymentLimits(uint256 _payment) {require(_payment >= MINCONTRIBUTION); _;}\r\n    modifier inWhitelist(address _contributor) {require(whitelist[_contributor].whitelisted == true); _;}\r\n\r\n    event WhitelistingLog(address indexed _contributor);\r\n    event RefundLog(address indexed _contributor, uint256 _amount);\r\n    event PurchaseLog(address indexed _contributor, address indexed _beneficiary, uint256 _amount);\r\n\r\n    constructor (address _token) public {\r\n        require(_token != address(0x00));\r\n\r\n        owner = msg.sender;\r\n        TOKEN = _token;\r\n    }\r\n\r\n    function () public payable {\r\n        _updateStateIfExpired();\r\n    }\r\n\r\n    //available only to whitelisted addresses after startBlock\r\n    function buyTokens(address _beneficiary)\r\n        public\r\n        inState(State.Running)\r\n        inPaymentLimits(msg.value)\r\n        inWhitelist(_beneficiary)\r\n        payable\r\n        returns (bool success)\r\n    {\r\n        require(_beneficiary != address(0x00));\r\n\r\n        assert(block.timestamp >= STARTDATE); //check if sale has started\r\n\r\n        uint256 tokenAmount = _calculateTokenAmount(msg.value);\r\n        YOUToken token = YOUToken(TOKEN);\r\n\r\n        weiRaised = weiRaised.add(msg.value);\r\n        whitelist[_beneficiary].contributions = whitelist[_beneficiary].contributions.add(msg.value);\r\n        if (!token.mint.gas(700000)(_beneficiary, tokenAmount)) {\r\n            return false;\r\n        }\r\n\r\n        if (weiRaised >= MAXSALESCAP\r\n            || weiRaised >= MINSALESCAP && block.timestamp >= ENDDATE) {\r\n            state = State.Funded;\r\n        } else {\r\n            _updateStateIfExpired();\r\n        }\r\n\r\n        emit PurchaseLog(msg.sender, _beneficiary, msg.value);\r\n        return true;\r\n    }\r\n\r\n    //available to contributers after deadline and only if unfunded\r\n    //if contributer used a different address as _beneficiary, only this address can claim refund\r\n    function refund(address _contributor)\r\n        public\r\n        isContributor\r\n        inState(State.Expired)\r\n        returns (bool success)\r\n    {\r\n        require(_contributor != address(0x00));\r\n\r\n        uint256 amount = whitelist[_contributor].contributions;\r\n        whitelist[_contributor].contributions = 0x00;\r\n\r\n        _contributor.transfer(amount);\r\n\r\n        emit RefundLog(_contributor, amount);\r\n        return true;\r\n    }\r\n\r\n    //as owner, whitelist individual address\r\n    function whitelistAddr(address _contributor)\r\n        public\r\n        isOwner\r\n        returns(bool)\r\n    {\r\n        require(_contributor != address(0x00));\r\n\r\n        // whitelist[_contributor] = true;\r\n        whitelist[_contributor].whitelisted = true;\r\n\r\n        emit WhitelistingLog(_contributor);\r\n        return true;\r\n    }\r\n\r\n    //in cases where funds are not payed in ETH to this contract,\r\n    //as owner, whitelist and give tokens to address.\r\n    function whitelistAddrAndBuyTokens(address _contributor, uint256 _weiAmount)\r\n        public\r\n        isOwner\r\n        returns(bool)\r\n    {\r\n        require(_contributor != address(0x00));\r\n\r\n        uint256 tokenAmount = _calculateTokenAmount(_weiAmount);\r\n        YOUToken token = YOUToken(TOKEN);\r\n\r\n        whitelist[_contributor].whitelisted = true;\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        if (!token.mint.gas(700000)(_contributor, tokenAmount)) {\r\n            return false;\r\n        }\r\n\r\n        emit WhitelistingLog(_contributor);\r\n        return true;\r\n    }\r\n\r\n    //withdraw Funds only if funded, as owner\r\n    function withdraw() public isOwner inState(State.Funded) {\r\n        WALLET.transfer(address(this).balance);\r\n    }\r\n\r\n    function delistAddress(address _contributor)\r\n        public\r\n        isOwner\r\n        inState(State.Running)\r\n        returns (bool)\r\n    {\r\n        require(_contributor != address(0x00));\r\n        require(whitelist[_contributor].whitelisted);\r\n\r\n        whitelist[_contributor].whitelisted = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    function emergencyStop()\r\n        public\r\n        isOwner\r\n        inState(State.Running)\r\n    {\r\n        //prevent more contributions and allow refunds\r\n        state = State.Expired;\r\n    }\r\n\r\n    function transferOwnership()\r\n        public\r\n        isOwner\r\n        inState(State.Running)\r\n    {\r\n        //after deployment is complete run once\r\n        owner = TOKEN_OWNER;\r\n    }\r\n\r\n    function _updateStateIfExpired() internal {\r\n        if ((block.timestamp >= ENDDATE && state == State.Running)\r\n            || (block.timestamp >= ENDDATE && weiRaised < MINSALESCAP)) {\r\n            state = State.Expired;\r\n        }\r\n    }\r\n\r\n    function _calculateTokenAmount(uint256 _weiAmount)\r\n        internal\r\n        view\r\n        returns (uint256 tokenAmount)\r\n    {\r\n        uint256 discount;\r\n        if (block.timestamp <= 1535241660) {\r\n            if (_weiAmount >= 1700 ether) {\r\n                discount = 30;\r\n            } else if (_weiAmount > 0.2 ether) {\r\n                discount = 25;\r\n            }\r\n        } else if (block.timestamp <= 1537747260) {\r\n            discount = 15;\r\n        } else if (block.timestamp <= 1540339260) {\r\n            discount = 10;\r\n        } else if (block.timestamp <= 1543536060) {\r\n            discount = 5;\r\n        }\r\n\r\n        _weiAmount = _weiAmount.mul(discount).div(100).add(_weiAmount);\r\n\r\n        return _weiAmount.mul(FXRATE);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract YOUToken {\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function transferOwnership(address _newOwner) public;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"whitelistAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINCONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENDDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FXRATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"delistAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXSALESCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"whitelisted\",\"type\":\"bool\"},{\"name\":\"contributions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"whitelistAddrAndBuyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINSALESCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"WhitelistingLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RefundLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseLog\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001aa893271f6d8503193f4ead58302da0e18bbdbd","Library":"","SwarmSource":"bzzr://b897648d156745d1724638e84f9cc05e048ee12a204054dcd9be40a1dc65c80f"}]}