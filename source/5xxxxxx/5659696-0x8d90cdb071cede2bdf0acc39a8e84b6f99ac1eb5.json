{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract GFDGSHBoard {\r\n    \r\n    // x => y => color\r\n    mapping(uint256=>mapping(uint256=>uint256)) public canvas;\r\n    uint256 ownerBalance;\r\n    \r\n    uint256 pixelRate;\r\n    address owner;\r\n    constructor() public {\r\n        pixelRate = 100;\r\n        owner = msg.sender;\r\n        ownerBalance = 0;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function setPixelRate(uint256 _pixelRate) onlyOwner public {\r\n        pixelRate = _pixelRate;\r\n    }\r\n    function pixelPrice(uint256 x, uint256 y) public view returns (uint256) {\r\n        // 500k x 500k canvas\r\n        require(x < 500000);\r\n        require(y < 500000);\r\n        uint256 pp = 0.0001 ether;\r\n        if(x>100 && y>100) {\r\n            pp = 0.00005 ether;\r\n        }\r\n        if(x>200 && y>200) {\r\n            pp = 0.000025 ether;\r\n        }\r\n        if(x>400 && y>400) {\r\n            pp = 0.0000125 ether;\r\n        }\r\n        if(x>800 && y>800) {\r\n            pp = 0.00000625 ether;\r\n        }\r\n        if(x>1600 && y>1600) {\r\n            pp = 0.000003125 ether;\r\n        }\r\n        if(x>3200 && y>3200) {\r\n            pp = 0.00000155 ether;\r\n        }\r\n        if(x>6400 && y>6400) {\r\n            pp = 0.0000007 ether;\r\n        }\r\n        if(x>12800 && y>12800) {\r\n            pp = 0.00000035 ether;\r\n        }\r\n        if(x>25600 && y>25600) {\r\n            pp = 0.000000125 ether;\r\n        }\r\n        if(x>51200 && y>51200) {\r\n            pp = 0.0000000625 ether;\r\n        }\r\n        if(x>100000 && y>100000) {\r\n            pp = 0.00000003125 ether;\r\n        }\r\n        if(x>200000 && y>200000) {\r\n            pp = 0.00000001 ether;\r\n        }\r\n        if(x>400000 && y>400000) {\r\n            pp = 0.000000001 ether;\r\n        }\r\n        return pp * pixelRate;\r\n    }\r\n    function priceForRect(uint256 left, uint256 right, uint256 top, uint256 bottom) public view returns (uint256) {\r\n        require(top < bottom);\r\n        require(right > left);\r\n        uint256 price = 0;\r\n        price += pixelPrice(left, top);\r\n        price += pixelPrice(right, top);\r\n        price += pixelPrice(left, bottom);\r\n        price += pixelPrice(right, bottom);\r\n        price /= 4;\r\n        uint256 pixelCount = (right - left) * (bottom - top);\r\n        return price * pixelCount;\r\n    }\r\n    function purchasePixel(uint256 x, uint256 y, uint256 color) public payable {\r\n        require(color < 16777216);\r\n        uint256 pp = pixelPrice(x, y);\r\n        require(msg.value >= pp);\r\n        canvas[x][y] = color;\r\n        ownerBalance += msg.value;\r\n    }\r\n    function applyPixelChange(uint256 left, uint256 right, uint256 top, uint256 bottom, uint256[] colors) internal {\r\n        uint256 colorIndex = 0;\r\n        for(uint256 x = left; x < right; x++) {\r\n            for (uint256 y = top; y < bottom; y++) {\r\n                uint256 color = colors[colorIndex];\r\n                require(color < 16777216);\r\n                canvas[x][y] = color;\r\n                colorIndex++;\r\n            }\r\n        }\r\n    }\r\n    function purchaseRect(uint256 left, uint256 right, uint256 top, uint256 bottom, uint256[] colors) payable public {\r\n        uint256 pp = priceForRect(left, right, top, bottom);\r\n        uint256 senderBal = balances[msg.sender];\r\n        require((msg.value == pp) || senderBal >= pp || senderBal + msg.value >= pp);\r\n        require(top < bottom);\r\n        require(right > left);\r\n        if(msg.value == pp) {\r\n            // Paid for in message\r\n            applyPixelChange(left, right, top, bottom, colors);\r\n        }\r\n        else if(msg.value != 0) {\r\n            // Paid partially in message\r\n            uint256 deductFromBal = pp - msg.value;\r\n            require(balances[msg.sender] >= deductFromBal);\r\n            balances[msg.sender] -= deductFromBal;\r\n            applyPixelChange(left, right, top, bottom, colors);\r\n        }\r\n        else if(msg.value == 0) {\r\n            // Paid fully from balance\r\n            require(balances[msg.sender] >= pp);\r\n            applyPixelChange(left, right, top, bottom, colors);\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n    mapping(address=>uint256) balances;\r\n    function deposit() payable public {\r\n        balances[msg.sender] += msg.value;\r\n    }\r\n    function() payable public {\r\n        balances[msg.sender] += msg.value;\r\n    }\r\n    function withdraw() public {\r\n        uint256 balance = balances[msg.sender];\r\n        require(balance >= 0);\r\n        msg.sender.transfer(balance);\r\n    }\r\n    function adminWithdraw() public onlyOwner {\r\n        msg.sender.transfer(ownerBalance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"left\",\"type\":\"uint256\"},{\"name\":\"right\",\"type\":\"uint256\"},{\"name\":\"top\",\"type\":\"uint256\"},{\"name\":\"bottom\",\"type\":\"uint256\"},{\"name\":\"colors\",\"type\":\"uint256[]\"}],\"name\":\"purchaseRect\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelRate\",\"type\":\"uint256\"}],\"name\":\"setPixelRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"pixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canvas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"color\",\"type\":\"uint256\"}],\"name\":\"purchasePixel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"left\",\"type\":\"uint256\"},{\"name\":\"right\",\"type\":\"uint256\"},{\"name\":\"top\",\"type\":\"uint256\"},{\"name\":\"bottom\",\"type\":\"uint256\"}],\"name\":\"priceForRect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"GFDGSHBoard","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://30436d9880edec395ff7b4a926cd2a822fe8840b22a531ce5a9f6bf2b83e36b3"}]}