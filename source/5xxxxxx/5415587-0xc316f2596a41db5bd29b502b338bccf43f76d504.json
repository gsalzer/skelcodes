{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @notice Website: Ze.cash\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n* @title SafeMath by OpenZeppelin\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract FiatContract {\r\n \r\n  function USD(uint _id) public constant returns (uint256);\r\n\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n/**\r\n* @title Admin parameters\r\n* @dev Define administration parameters for this contract\r\n*/\r\ncontract admined { //This token contract is administered\r\n    address public admin; //Admin address is public\r\n\r\n    /**\r\n    * @dev Contract constructor\r\n    * define initial administrator\r\n    */\r\n    function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        emit Admined(admin);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set new admin address\r\n    * @param _newAdmin The address to transfer administration to\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        require(_newAdmin != address(0));\r\n        admin = _newAdmin;\r\n        emit TransferAdminship(admin);\r\n    }\r\n\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n\r\n}\r\n\r\ncontract ICO is admined{\r\n    using SafeMath for uint256;\r\n    //This ico have 2 stages\r\n    enum State {\r\n        Sale,\r\n        Successful\r\n    }\r\n    //public variables\r\n    State public state = State.Sale; //Set initial stage\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public completedAt; //Time stamp when the ico finish\r\n    token public tokenReward; //Address of the valit token used as reward\r\n    address public creator; //Address of the contract deployer\r\n    string public campaignUrl; //Web site of the campaing\r\n    string public version = '2';\r\n\r\n    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\r\n    //FiatContract price = FiatContract(0x2CDe56E5c8235D6360CCbb0c57Ce248Ca9C80909); // TESTNET ADDRESS (ROPSTEN)\r\n\r\n    uint256 remanent;\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        string _url);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _campaignUrl is the ICO _url\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    */\r\n    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\r\n        creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n\r\n        emit LogFunderInitialized(\r\n            creator,\r\n            campaignUrl\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        uint256 tokenBought; //Variable to store amount of tokens bought\r\n        uint256 tokenPrice = price.USD(0); //1 cent value in wei\r\n\r\n        tokenPrice = tokenPrice.div(10 ** 7);\r\n        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\r\n\r\n        tokenBought = msg.value.div(tokenPrice);\r\n        tokenBought = tokenBought.mul(10 **10); //0.10$ per token\r\n        \r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        \r\n        tokenReward.transfer(msg.sender,tokenBought);\r\n        \r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender,tokenBought);\r\n    }\r\n\r\n    function finishFunding() onlyAdmin public {\r\n\r\n        state = State.Successful; //ico becomes Successful\r\n        completedAt = now; //ICO is complete\r\n        emit LogFundingSuccessful(totalRaised); //we log the finish\r\n        claimTokens();\r\n        claimEth();\r\n            \r\n    }\r\n\r\n    function claimTokens() onlyAdmin public{\r\n\r\n        remanent = tokenReward.balanceOf(this);\r\n        tokenReward.transfer(msg.sender,remanent);\r\n        \r\n        emit LogContributorsPayout(msg.sender,remanent);\r\n    }\r\n\r\n    function claimEth() onlyAdmin public { //When finished eth are transfered to creator\r\n        \r\n        require(msg.sender.send(address(this).balance));\r\n\r\n        emit LogBeneficiaryPaid(msg.sender);\r\n        \r\n    }\r\n\r\n    /**\r\n    * @dev This is an especial function to make massive tokens assignments\r\n    * @param _data array of addresses to transfer to\r\n    * @param _amount array of amounts to tranfer to each address\r\n    */\r\n    function batch(address[] _data,uint256[] _amount) onlyAdmin public { //It takes array of addresses and array of amount\r\n        require(_data.length == _amount.length);//same array sizes\r\n        for (uint i=0; i<_data.length; i++) { //It moves over the array\r\n            tokenReward.transfer(_data[i],_amount[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Function to handle eth transfers\r\n    * @dev BEWARE: if a call to this functions doesn't have\r\n    * enought gas, transaction could not be finished\r\n    */\r\n\r\n    function () public payable {\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000925e368c442145f49a4b5fafe3b60a9bb07f337b00000000000000000000000000000000000000000000000000000000000000075a652e6361736800000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9c9b5b820c6d210fb587a89f5c444b78ed50fb900c92ca40d0ee30f74c0e6e43"}]}