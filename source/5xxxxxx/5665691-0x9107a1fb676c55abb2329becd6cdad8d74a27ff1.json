{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Smart contract Osliki Classifieds\r\n *\r\n * @dev This is part of the Decentralized Osliki Platform (DOP).\r\n */\r\ncontract OslikiClassifieds {\r\n  using SafeMath for uint;\r\n  using SafeERC20 for ERC20;\r\n\r\n  ERC20 public oslikToken; // OSLIK Token (OT) address (ERC20 compatible token)\r\n  address public oslikiFoundation; // Osliki Foundation (OF) address\r\n\r\n  uint public upPrice = 1 ether; // same decimals for OSLIK tokens\r\n  uint public reward = 20 ether; // same decimals for OSLIK tokens\r\n\r\n  string[] public catsRegister;\r\n  Ad[] public ads;\r\n  Comment[] public comments;\r\n\r\n  mapping (address => uint[]) internal adsByUser;\r\n  mapping (string => uint[]) internal adsByCat;\r\n\r\n  event EventNewCategory(uint catId, string catName);\r\n  event EventNewAd(address indexed from, uint indexed catId, uint adId);\r\n  event EventEditAd(address indexed from, uint indexed catId, uint indexed adId);\r\n  event EventNewComment(address indexed from, uint indexed catId, uint indexed adId, uint cmntId);\r\n  event EventUpAd(address indexed from, uint indexed catId, uint indexed adId);\r\n  event EventReward(address indexed to, uint reward);\r\n\r\n  struct Ad {\r\n    address user;\r\n    uint catId;\r\n    string text;\r\n    uint[] comments;\r\n    uint createdAt;\r\n    uint updatedAt;\r\n  }\r\n\r\n  struct Comment {\r\n    address user;\r\n    uint adId;\r\n    string text;\r\n    uint createdAt;\r\n  }\r\n\r\n  constructor(\r\n    ERC20 _oslikToken,\r\n    address _oslikiFoundation\r\n  ) public {\r\n    require(address(_oslikToken) != address(0), \"_oslikToken is not assigned.\");\r\n    require(_oslikiFoundation != address(0), \"_oslikiFoundation is not assigned.\");\r\n\r\n    oslikToken = _oslikToken;\r\n    oslikiFoundation = _oslikiFoundation;\r\n  }\r\n\r\n  function _newAd(\r\n    uint catId,\r\n    string text // format 'ipfs hash,ipfs hash...'\r\n  ) private returns (bool) {\r\n    require(bytes(text).length != 0, \"Text is empty\");\r\n\r\n    ads.push(Ad({\r\n      user: msg.sender,\r\n      catId: catId,\r\n      text: text,\r\n      comments: new uint[](0),\r\n      createdAt: now,\r\n      updatedAt: now\r\n    }));\r\n\r\n    uint adId = ads.length - 1;\r\n\r\n    adsByCat[catsRegister[catId]].push(adId);\r\n    adsByUser[msg.sender].push(adId);\r\n\r\n    if (adsByUser[msg.sender].length == 1 && reward > 0 && oslikToken.allowance(oslikiFoundation, address(this)) >= reward) {\r\n      uint balanceOfBefore = oslikToken.balanceOf(oslikiFoundation);\r\n\r\n      if (balanceOfBefore >= reward) {\r\n        oslikToken.safeTransferFrom(oslikiFoundation, msg.sender, reward);\r\n\r\n        uint balanceOfAfter = oslikToken.balanceOf(oslikiFoundation);\r\n        assert(balanceOfAfter == balanceOfBefore.sub(reward));\r\n\r\n        emit EventReward(msg.sender, reward);\r\n      }\r\n    }\r\n\r\n    emit EventNewAd(msg.sender, catId, adId);\r\n\r\n    return true;\r\n  }\r\n\r\n  function newAd(\r\n    uint catId,\r\n    string text // format 'ipfs hash,ipfs hash...'\r\n  ) public {\r\n    require(catId < catsRegister.length, \"Category not found\");\r\n\r\n    assert(_newAd(catId, text));\r\n  }\r\n\r\n  function newCatWithAd(\r\n    string catName,\r\n    string text // format 'ipfs hash,ipfs hash...'\r\n  ) public {\r\n    require(bytes(catName).length != 0, \"Category is empty\");\r\n    require(adsByCat[catName].length == 0, \"Category already exists\");\r\n\r\n    catsRegister.push(catName);\r\n    uint catId = catsRegister.length - 1;\r\n\r\n    emit EventNewCategory(catId, catName);\r\n\r\n    assert(_newAd(catId, text));\r\n  }\r\n\r\n  function editAd(\r\n    uint adId,\r\n    string text // format 'ipfs hash,ipfs hash...'\r\n  ) public {\r\n    require(adId < ads.length, \"Ad id not found\");\r\n    require(bytes(text).length != 0, \"Text is empty\");\r\n\r\n    Ad storage ad = ads[adId];\r\n\r\n    require(msg.sender == ad.user, \"Sender not authorized.\");\r\n    //require(!_stringsEqual(ad.text, text), \"New text is the same\");\r\n\r\n    ad.text = text;\r\n    ad.updatedAt = now;\r\n\r\n    emit EventEditAd(msg.sender, ad.catId, adId);\r\n  }\r\n\r\n  function newComment(\r\n    uint adId,\r\n    string text\r\n  ) public {\r\n    require(adId < ads.length, \"Ad id not found\");\r\n    require(bytes(text).length != 0, \"Text is empty\");\r\n\r\n    Ad storage ad = ads[adId];\r\n\r\n    comments.push(Comment({\r\n      user: msg.sender,\r\n      adId: adId,\r\n      text: text,\r\n      createdAt: now\r\n    }));\r\n\r\n    uint cmntId = comments.length - 1;\r\n\r\n    ad.comments.push(cmntId);\r\n\r\n    emit EventNewComment(msg.sender, ad.catId, adId, cmntId);\r\n  }\r\n\r\n  function upAd(\r\n    uint adId\r\n  ) public {\r\n    require(adId < ads.length, \"Ad id not found\");\r\n\r\n    Ad memory ad = ads[adId];\r\n\r\n    require(msg.sender == ad.user, \"Sender not authorized.\");\r\n\r\n    adsByCat[catsRegister[ad.catId]].push(adId);\r\n\r\n    uint balanceOfBefore = oslikToken.balanceOf(oslikiFoundation);\r\n\r\n    oslikToken.safeTransferFrom(msg.sender, oslikiFoundation, upPrice);\r\n\r\n    uint balanceOfAfter = oslikToken.balanceOf(oslikiFoundation);\r\n    assert(balanceOfAfter == balanceOfBefore.add(upPrice));\r\n\r\n    emit EventUpAd(msg.sender, ad.catId, adId);\r\n  }\r\n\r\n  /*function _stringsEqual(string a, string b) private pure returns (bool) {\r\n   return keccak256(a) == keccak256(b);\r\n  }*/\r\n\r\n  modifier onlyFoundation {\r\n    require(msg.sender == oslikiFoundation, \"Sender not authorized.\");\r\n    _;\r\n  }\r\n\r\n  function _changeUpPrice(uint newUpPrice) public onlyFoundation {\r\n    upPrice = newUpPrice;\r\n  }\r\n\r\n  function _changeReward(uint newReward) public onlyFoundation {\r\n    reward = newReward;\r\n  }\r\n\r\n  function _changeOslikiFoundation(address newAddress) public onlyFoundation {\r\n    require(newAddress != address(0));\r\n    oslikiFoundation = newAddress;\r\n  }\r\n\r\n\r\n  function getCatsCount() public view returns (uint) {\r\n    return catsRegister.length;\r\n  }\r\n\r\n  function getCommentsCount() public view returns (uint) {\r\n    return comments.length;\r\n  }\r\n\r\n  function getCommentsCountByAd(uint adId) public view returns (uint) {\r\n    return ads[adId].comments.length;\r\n  }\r\n\r\n  function getAllCommentIdsByAd(uint adId) public view returns (uint[]) {\r\n    return ads[adId].comments;\r\n  }\r\n\r\n  function getCommentIdByAd(uint adId, uint index) public view returns (uint) {\r\n    return ads[adId].comments[index];\r\n  }\r\n\r\n\r\n  function getAdsCount() public view returns (uint) {\r\n    return ads.length;\r\n  }\r\n\r\n\r\n  function getAdsCountByUser(address user) public view returns (uint) {\r\n    return adsByUser[user].length;\r\n  }\r\n\r\n  function getAdIdByUser(address user, uint index) public view returns (uint) {\r\n    return adsByUser[user][index];\r\n  }\r\n\r\n  function getAllAdIdsByUser(address user) public view returns (uint[]) {\r\n    return adsByUser[user];\r\n  }\r\n\r\n\r\n  function getAdsCountByCat(uint catId) public view returns (uint) {\r\n    return adsByCat[catsRegister[catId]].length;\r\n  }\r\n\r\n  function getAdIdByCat(uint catId, uint index) public view returns (uint) {\r\n    return adsByCat[catsRegister[catId]][index];\r\n  }\r\n\r\n  function getAllAdIdsByCat(uint catId) public view returns (uint[]) {\r\n    return adsByCat[catsRegister[catId]];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCatsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adId\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"newComment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"getAllCommentIdsByAd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ads\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"catId\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adId\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"editAd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"_changeOslikiFoundation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"catId\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdIdByCat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"getCommentsCountByAd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"_changeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllAdIdsByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oslikToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catName\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"newCatWithAd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"comments\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"adId\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"createdAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUpPrice\",\"type\":\"uint256\"}],\"name\":\"_changeUpPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"getAdsCountByCat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"upAd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catId\",\"type\":\"uint256\"},{\"name\":\"text\",\"type\":\"string\"}],\"name\":\"newAd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oslikiFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdIdByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catsRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adId\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCommentIdByAd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"getAllAdIdsByCat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAdsCountByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oslikToken\",\"type\":\"address\"},{\"name\":\"_oslikiFoundation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"catId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"catName\",\"type\":\"string\"}],\"name\":\"EventNewCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"catId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"EventNewAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"catId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"EventEditAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"catId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cmntId\",\"type\":\"uint256\"}],\"name\":\"EventNewComment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"catId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"EventUpAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"EventReward\",\"type\":\"event\"}]","ContractName":"OslikiClassifieds","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000022390f429134870a01c7635827aef91c4af1a93f000000000000000000000000eb4e2226986f91e2f26539750c410347e044d3d4","Library":"","SwarmSource":"bzzr://c256341f14b5a8631c3d17e4720a9cd9c8474bf43f50c7d33bc19061aa719991"}]}