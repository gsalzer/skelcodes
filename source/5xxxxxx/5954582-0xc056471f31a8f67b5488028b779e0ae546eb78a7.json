{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/LikeCoinInterface.sol\r\n\r\n//    Copyright (C) 2017 LikeCoin Foundation Limited\r\n//\r\n//    This file is part of LikeCoin Smart Contract.\r\n//\r\n//    LikeCoin Smart Contract is free software: you can redistribute it and/or modify\r\n//    it under the terms of the GNU General Public License as published by\r\n//    the Free Software Foundation, either version 3 of the License, or\r\n//    (at your option) any later version.\r\n//\r\n//    LikeCoin Smart Contract is distributed in the hope that it will be useful,\r\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n//    GNU General Public License for more details.\r\n//\r\n//    You should have received a copy of the GNU General Public License\r\n//    along with LikeCoin Smart Contract.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.4.18;\r\n\r\ncontract LikeCoinInterface {\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\ncontract Ownable {\r\n\r\n\taddress public owner;\r\n\taddress public pendingOwner;\r\n\taddress public operator;\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier throws if called by any account other than the pendingOwner.\r\n\t */\r\n\tmodifier onlyPendingOwner() {\r\n\t\trequire(msg.sender == pendingOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier ownerOrOperator {\r\n\t\trequire(msg.sender == owner || msg.sender == operator);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to set the pendingOwner address.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\tpendingOwner = newOwner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the pendingOwner address to finalize the transfer.\r\n\t */\r\n\tfunction claimOwnership() onlyPendingOwner public {\r\n\t\temit OwnershipTransferred(owner, pendingOwner);\r\n\t\towner = pendingOwner;\r\n\t\tpendingOwner = address(0);\r\n\t}\r\n\r\n\tfunction setOperator(address _operator) onlyOwner public {\r\n\t\toperator = _operator;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/ArtMuseumBase.sol\r\n\r\ncontract ArtMuseumBase is Ownable {\r\n\r\n\tstruct Artwork {\r\n\t\tuint8 artworkType;\r\n\t\tuint32 sequenceNumber;\r\n\t\tuint128 value;\r\n\t\taddress player;\r\n\t}\r\n\tLikeCoinInterface public like;\r\n\r\n\t/** array holding ids mapping of the curret artworks*/\r\n\tuint32[] public ids;\r\n\t/** the last sequence id to be given to the link artwork **/\r\n\tuint32 public lastId;\r\n\t/** the id of the oldest artwork */\r\n\tuint32 public oldest;\r\n\t/** the artwork belonging to a given id */\r\n\tmapping(uint32 => Artwork) artworks;\r\n\t/** the user purchase sequence number per each artwork type */\r\n\tmapping(address=>mapping(uint8 => uint32)) userArtworkSequenceNumber;\r\n\t/** the cost of each artwork type */\r\n\tuint128[] public costs;\r\n\t/** the value of each artwork type (cost - fee), so it's not necessary to compute it each time*/\r\n\tuint128[] public values;\r\n\t/** the fee to be paid each time an artwork is bought in percent*/\r\n\tuint8 public fee;\r\n\r\n\t/** total number of artworks in the game (uint32 because of multiplication issues) */\r\n\tuint32 public numArtworks;\r\n\t/** The maximum of artworks allowed in the game */\r\n\tuint16 public maxArtworks;\r\n\t/** number of artworks per type */\r\n\tuint32[] numArtworksXType;\r\n\r\n\t/** initializes the contract parameters */\r\n\tfunction init(address _likeAddr) public onlyOwner {\r\n\t\trequire(like==address(0));\r\n\t\tlike = LikeCoinInterface(_likeAddr);\r\n\t\tcosts = [800 ether, 2000 ether, 5000 ether, 12000 ether, 25000 ether];\r\n\t\tsetFee(5);\r\n\t\tmaxArtworks = 1000;\r\n\t\tlastId = 1;\r\n\t\toldest = 0;\r\n\t}\r\n\r\n\tfunction deposit() payable public {\r\n\r\n\t}\r\n\r\n\tfunction withdrawBalance() public onlyOwner returns(bool res) {\r\n\t\towner.transfer(address(this).balance);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * allows the owner to collect the accumulated fees\r\n\t * sends the given amount to the owner's address if the amount does not exceed the\r\n\t * fees (cannot touch the players' balances)\r\n\t * */\r\n\tfunction collectFees(uint128 amount) public onlyOwner {\r\n\t\tuint collectedFees = getFees();\r\n\t\tif (amount <= collectedFees) {\r\n\t\t\tlike.transfer(owner,amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getArtwork(uint32 artworkId) public constant returns(uint8 artworkType, uint32 sequenceNumber, uint128 value, address player) {\r\n\t\treturn (artworks[artworkId].artworkType, artworks[artworkId].sequenceNumber, artworks[artworkId].value, artworks[artworkId].player);\r\n\t}\r\n\r\n\tfunction getAllArtworks() public constant returns(uint32[] artworkIds,uint8[] types,uint32[] sequenceNumbers, uint128[] artworkValues) {\r\n\t\tuint32 id;\r\n\t\tartworkIds = new uint32[](numArtworks);\r\n\t\ttypes = new uint8[](numArtworks);\r\n\t\tsequenceNumbers = new uint32[](numArtworks);\r\n\t\tartworkValues = new uint128[](numArtworks);\r\n\t\tfor (uint16 i = 0; i < numArtworks; i++) {\r\n\t\t\tid = ids[i];\r\n\t\t\tartworkIds[i] = id;\r\n\t\t\ttypes[i] = artworks[id].artworkType;\r\n\t\t\tsequenceNumbers[i] = artworks[id].sequenceNumber;\r\n\t\t\tartworkValues[i] = artworks[id].value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getAllArtworksByOwner() public constant returns(uint32[] artworkIds,uint8[] types,uint32[] sequenceNumbers, uint128[] artworkValues) {\r\n\t\tuint32 id;\r\n\t\tuint16 j = 0;\r\n\t\tuint16 howmany = 0;\r\n\t\taddress player = address(msg.sender);\r\n\t\tfor (uint16 k = 0; k < numArtworks; k++) {\r\n\t\t\tif (artworks[ids[k]].player == player)\r\n\t\t\t\thowmany++;\r\n\t\t}\r\n\t\tartworkIds = new uint32[](howmany);\r\n\t\ttypes = new uint8[](howmany);\r\n\t\tsequenceNumbers = new uint32[](howmany);\r\n\t\tartworkValues = new uint128[](howmany);\r\n\t\tfor (uint16 i = 0; i < numArtworks; i++) {\r\n\t\t\tif (artworks[ids[i]].player == player) {\r\n\t\t\t\tid = ids[i];\r\n\t\t\t\tartworkIds[j] = id;\r\n\t\t\t\ttypes[j] = artworks[id].artworkType;\r\n\t\t\t\tsequenceNumbers[j] = artworks[id].sequenceNumber;\r\n\t\t\t\tartworkValues[j] = artworks[id].value;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setCosts(uint128[] _costs) public onlyOwner {\r\n\t\trequire(_costs.length >= costs.length);\r\n\t\tcosts = _costs;\r\n\t\tsetFee(fee);\r\n\t}\r\n\t\r\n\tfunction setFee(uint8 _fee) public onlyOwner {\r\n\t\tfee = _fee;\r\n\t\tfor (uint8 i = 0; i < costs.length; i++) {\r\n\t\t\tif (i < values.length)\r\n\t\t\t\tvalues[i] = costs[i] - costs[i] / 100 * fee;\r\n\t\t\telse {\r\n\t\t\t\tvalues.push(costs[i] - costs[i] / 100 * fee);\r\n\t\t\t\tnumArtworksXType.push(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getFees() public constant returns(uint) {\r\n\t\tuint reserved = 0;\r\n\t\tfor (uint16 j = 0; j < numArtworks; j++)\r\n\t\t\treserved += artworks[ids[j]].value;\r\n\t\treturn like.balanceOf(this) - reserved;\r\n\t}\r\n\r\n\r\n}\r\n\r\n// File: contracts/ArtMuseum.sol\r\n\r\ncontract ArtMuseum is ArtMuseumBase {\r\n\r\n\taddress private _currentImplementation;\r\n\r\n\r\n\tfunction updateImplementation(address _newImplementation) onlyOwner public {\r\n\t\trequire(_newImplementation != address(0));\r\n\t\t_currentImplementation = _newImplementation;\r\n\t}\r\n\r\n\tfunction implementation() public view returns (address) {\r\n\t\treturn _currentImplementation;\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\taddress _impl = implementation();\r\n\t\trequire(_impl != address(0));\r\n\t/*\r\n\tassembly {\r\n\t\t// Copy msg.data. We take full control of memory in this inline assembly\r\n\t\t// block because it will not return to Solidity code. We overwrite the\r\n\t\t// Solidity scratch pad at memory position 0.\r\n\t\tcalldatacopy(0, 0, calldatasize)\r\n\t\t// Call the implementation.\r\n\t\t// out and outsize are 0 because we don't know the size yet.\r\n\t\tlet result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\t\t// Copy the returned data.\r\n\t\treturndatacopy(0, 0, returndatasize)\r\n\t\tswitch result\r\n\t\t// delegatecall returns 0 on error.\r\n\t\tcase 0 { revert(0, returndatasize) }\r\n\t\tdefault { return(0, returndatasize) }\r\n\t}\r\n\t*/\r\n\t\tassembly {\r\n\t\t\tlet ptr := mload(0x40)\r\n\t\t\tcalldatacopy(ptr, 0, calldatasize)\r\n\t\t\tlet result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n\t\t\tlet size := returndatasize\r\n\t\t\treturndatacopy(ptr, 0, size)\r\n\t\t\tswitch result\r\n\t\t\tcase 0 { revert(ptr, size) }\r\n\t\t\tdefault { return(ptr, size) }\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_likeAddr\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"artworkId\",\"type\":\"uint32\"}],\"name\":\"getArtwork\",\"outputs\":[{\"name\":\"artworkType\",\"type\":\"uint8\"},{\"name\":\"sequenceNumber\",\"type\":\"uint32\"},{\"name\":\"value\",\"type\":\"uint128\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numArtworks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_costs\",\"type\":\"uint128[]\"}],\"name\":\"setCosts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllArtworksByOwner\",\"outputs\":[{\"name\":\"artworkIds\",\"type\":\"uint32[]\"},{\"name\":\"types\",\"type\":\"uint8[]\"},{\"name\":\"sequenceNumbers\",\"type\":\"uint32[]\"},{\"name\":\"artworkValues\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllArtworks\",\"outputs\":[{\"name\":\"artworkIds\",\"type\":\"uint32[]\"},{\"name\":\"types\",\"type\":\"uint8[]\"},{\"name\":\"sequenceNumbers\",\"type\":\"uint32[]\"},{\"name\":\"artworkValues\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxArtworks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"like\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArtMuseum","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d24b7db34db69a91258067d4d9a29d4ae95cb36f7e505a960a23e1b196ffd6f"}]}