{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract OtcInterface {\r\n    struct OfferInfo {\r\n        uint              pay_amt;\r\n        address           pay_gem;\r\n        uint              buy_amt;\r\n        address           buy_gem;\r\n        address           owner;\r\n        uint64            timestamp;\r\n    }\r\n    mapping (uint => OfferInfo) public offers;\r\n    function getBestOffer(address, address) public view returns (uint);\r\n    function getWorseOffer(uint) public view returns (uint);\r\n}\r\n\r\ncontract MakerOtcSupportMethods is DSMath {\r\n    function getOffers(OtcInterface otc, address payToken, address buyToken) public view\r\n        returns (uint[100] ids, uint[100] payAmts, uint[100] buyAmts, address[100] owners, uint[100] timestamps)\r\n    {\r\n        (ids, payAmts, buyAmts, owners, timestamps) = getOffers(otc, otc.getBestOffer(payToken, buyToken));\r\n    }\r\n\r\n    function getOffers(OtcInterface otc, uint offerId) public view\r\n        returns (uint[100] ids, uint[100] payAmts, uint[100] buyAmts, address[100] owners, uint[100] timestamps)\r\n    {\r\n        uint i = 0;\r\n        do {\r\n            (payAmts[i],, buyAmts[i],, owners[i], timestamps[i]) = otc.offers(offerId);\r\n            if(owners[i] == 0) break;\r\n            ids[i] = offerId;\r\n            offerId = otc.getWorseOffer(offerId);\r\n        } while (++i < 100);\r\n    }\r\n\r\n    function getOffersAmountToSellAll(OtcInterface otc, address payToken, uint payAmt, address buyToken) public view returns (uint ordersToTake, bool takesPartialOrder) {\r\n        uint offerId = otc.getBestOffer(buyToken, payToken);                        // Get best offer for the token pair\r\n        ordersToTake = 0;\r\n        uint payAmt2 = payAmt;\r\n        uint orderBuyAmt = 0;\r\n        (,,orderBuyAmt,,,) = otc.offers(offerId);\r\n        while (payAmt2 > orderBuyAmt) {\r\n            ordersToTake ++;                                                        // New order taken\r\n            payAmt2 = sub(payAmt2, orderBuyAmt);                                    // Decrease amount to pay\r\n            if (payAmt2 > 0) {                                                      // If we still need more offers\r\n                offerId = otc.getWorseOffer(offerId);                               // We look for the next best offer\r\n                require(offerId != 0);                                              // Fails if there are not enough offers to complete\r\n                (,,orderBuyAmt,,,) = otc.offers(offerId);\r\n            }\r\n            \r\n        }\r\n        ordersToTake = payAmt2 == orderBuyAmt ? ordersToTake + 1 : ordersToTake;    // If the remaining amount is equal than the latest order, then it will also be taken completely\r\n        takesPartialOrder = payAmt2 < orderBuyAmt;                                  // If the remaining amount is lower than the latest order, then it will take a partial order\r\n    }\r\n\r\n    function getOffersAmountToBuyAll(OtcInterface otc, address buyToken, uint buyAmt, address payToken) public view returns (uint ordersToTake, bool takesPartialOrder) {\r\n        uint offerId = otc.getBestOffer(buyToken, payToken);                        // Get best offer for the token pair\r\n        ordersToTake = 0;\r\n        uint buyAmt2 = buyAmt;\r\n        uint orderPayAmt = 0;\r\n        (orderPayAmt,,,,,) = otc.offers(offerId);\r\n        while (buyAmt2 > orderPayAmt) {\r\n            ordersToTake ++;                                                        // New order taken\r\n            buyAmt2 = sub(buyAmt2, orderPayAmt);                                    // Decrease amount to buy\r\n            if (buyAmt2 > 0) {                                                      // If we still need more offers\r\n                offerId = otc.getWorseOffer(offerId);                               // We look for the next best offer\r\n                require(offerId != 0);                                              // Fails if there are not enough offers to complete\r\n                (orderPayAmt,,,,,) = otc.offers(offerId);\r\n            }\r\n        }\r\n        ordersToTake = buyAmt2 == orderPayAmt ? ordersToTake + 1 : ordersToTake;    // If the remaining amount is equal than the latest order, then it will also be taken completely\r\n        takesPartialOrder = buyAmt2 < orderPayAmt;                                  // If the remaining amount is lower than the latest order, then it will take a partial order\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"payToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"getOffers\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[100]\"},{\"name\":\"payAmts\",\"type\":\"uint256[100]\"},{\"name\":\"buyAmts\",\"type\":\"uint256[100]\"},{\"name\":\"owners\",\"type\":\"address[100]\"},{\"name\":\"timestamps\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"getOffersAmountToBuyAll\",\"outputs\":[{\"name\":\"ordersToTake\",\"type\":\"uint256\"},{\"name\":\"takesPartialOrder\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getOffers\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[100]\"},{\"name\":\"payAmts\",\"type\":\"uint256[100]\"},{\"name\":\"buyAmts\",\"type\":\"uint256[100]\"},{\"name\":\"owners\",\"type\":\"address[100]\"},{\"name\":\"timestamps\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"payToken\",\"type\":\"address\"},{\"name\":\"payAmt\",\"type\":\"uint256\"},{\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"getOffersAmountToSellAll\",\"outputs\":[{\"name\":\"ordersToTake\",\"type\":\"uint256\"},{\"name\":\"takesPartialOrder\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MakerOtcSupportMethods","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fe403a9d5e6cd7d273e77c6b895585475ea1df4df43813ce2313c30e935968b9"}]}