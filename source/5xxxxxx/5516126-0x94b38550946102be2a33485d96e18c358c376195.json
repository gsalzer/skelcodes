{"status":"1","message":"OK","result":[{"SourceCode":"// Human token smart contract.\r\n// Developed by Phenom.Team <info@phenom.team>\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n *   @title SafeMath\r\n *   @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal constant returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal constant returns(uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal constant returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal constant returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n *   @title ERC20\r\n *   @dev Standart ERC20 token interface\r\n */\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n}\r\n\r\n\r\n/**\r\n *   @title HumanToken\r\n *   @dev Human token smart-contract\r\n */\r\ncontract HumanToken is ERC20 {\r\n    using SafeMath for uint;\r\n    string public name = \"Human\";\r\n    string public symbol = \"Human\";\r\n    uint public decimals = 18;\r\n    uint public voteCost = 10**18;\r\n\r\n    // Owner address\r\n    address public owner;\r\n    address public eventManager;\r\n\r\n    mapping (address => bool) isActiveEvent;\r\n            \r\n    //events        \r\n    event EventAdded(address _event);\r\n    event Contribute(address _event, address _contributor, uint _amount);\r\n    event Vote(address _event, address _contributor, bool _proposal);\r\n    \r\n    // Allows execution by the contract owner only\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Allows execution by the event manager only\r\n    modifier onlyEventManager {\r\n        require(msg.sender == eventManager);\r\n        _;\r\n    }\r\n\r\n   // Allows contributing and voting only to human events \r\n    modifier onlyActive(address _event) {\r\n        require(isActiveEvent[_event]);\r\n        _;\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Contract constructor function sets owner address\r\n    *   @param _owner        owner address\r\n    */\r\n    function HumanToken(address _owner, address _eventManager) public {\r\n       owner = _owner;\r\n       eventManager = _eventManager;\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Function to add a new event from TheHuman team\r\n    *   @param _event       a new event address\r\n    */   \r\n    function  addEvent(address _event) external onlyEventManager {\r\n        require (!isActiveEvent[_event]);\r\n        isActiveEvent[_event] = true;\r\n        EventAdded(_event);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to change vote cost, by default vote cost equals 1 Human token\r\n    *   @param _voteCost     a new vote cost\r\n    */\r\n    function setVoteCost(uint _voteCost) external onlyEventManager {\r\n        voteCost = _voteCost;\r\n    }\r\n    \r\n   /**\r\n    *   @dev Function to donate for event\r\n    *   @param _event     address of event\r\n    *   @param _amount    donation amount    \r\n    */\r\n    function donate(address _event, uint _amount) public onlyActive(_event) {\r\n        require (transfer(_event, _amount));\r\n        require (HumanEvent(_event).contribute(msg.sender, _amount));\r\n        Contribute(_event, msg.sender, _amount);\r\n        \r\n    }\r\n\r\n   /**\r\n    *   @dev Function voting for the success of the event\r\n    *   @param _event     address of event\r\n    *   @param _proposal  true - event completed successfully, false - otherwise\r\n    */\r\n    function vote(address _event, bool _proposal) public onlyActive(_event) {\r\n        require(transfer(_event, voteCost));\r\n        require(HumanEvent(_event).vote(msg.sender, _proposal));\r\n        Vote(_event, msg.sender, _proposal);\r\n    }\r\n    \r\n    \r\n\r\n\r\n   /**\r\n    *   @dev Function to mint tokens\r\n    *   @param _holder       beneficiary address the tokens will be issued to\r\n    *   @param _value        number of tokens to issue\r\n    */\r\n    function mintTokens(address _holder, uint _value) external onlyOwner {\r\n       require(_value > 0);\r\n       balances[_holder] = balances[_holder].add(_value);\r\n       totalSupply = totalSupply.add(_value);\r\n       Transfer(0x0, _holder, _value);\r\n    }\r\n\r\n  \r\n   /**\r\n    *   @dev Get balance of tokens holder\r\n    *   @param _holder        holder's address\r\n    *   @return               balance of investor\r\n    */\r\n    function balanceOf(address _holder) constant returns (uint) {\r\n         return balances[_holder];\r\n    }\r\n\r\n   /**\r\n    *   @dev Send coins\r\n    *   throws on any error rather then return a false flag to minimize\r\n    *   user errors\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transfer(address _to, uint _amount) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev An account/contract attempts to get the coins\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   @param _from         source address\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Allows another account/contract to spend some tokens on its behalf\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   also, to minimize the risk of the approve/transferFrom attack vector\r\n    *   approve has to be called twice in 2 separate transactions - once to\r\n    *   change the allowance to 0 and secondly to change it to the new allowance\r\n    *   value\r\n    *\r\n    *   @param _spender      approved address\r\n    *   @param _amount       allowance amount\r\n    *\r\n    *   @return true if the approval was successful\r\n    */\r\n    function approve(address _spender, uint _amount) public returns (bool) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    *   @param _owner        the address which owns the funds\r\n    *   @param _spender      the address which will spend the funds\r\n    *\r\n    *   @return              the amount of tokens still avaible for the spender\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /** \r\n    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens\r\n    *   @param tokenAddress  token address\r\n    *   @param tokens        transfer amount\r\n    */\r\n    function transferAnyTokens(address tokenAddress, uint tokens) \r\n        public\r\n        onlyOwner \r\n        returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n\r\n contract HumanEvent {\r\n    using SafeMath for uint;    \r\n    uint public totalRaised;\r\n    uint public softCap;\r\n    uint public positiveVotes;\r\n    uint public negativeVotes;\r\n\r\n    address public alternative;\r\n    address public owner;\r\n    HumanToken public human;\r\n\r\n    mapping (address => uint) public contributions;\r\n    mapping (address => bool) public voted;\r\n    mapping (address => bool) public claimed;\r\n    \r\n\r\n\r\n    // Allows execution by the contract owner only\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Allows execution by the contract owner only\r\n    modifier onlyHuman {\r\n        require(msg.sender == address(human));\r\n        _;\r\n    }\r\n\r\n\r\n    // Possible Event statuses\r\n    enum StatusEvent {\r\n        Created,\r\n        Fundraising,\r\n        Failed,\r\n        Evaluating,\r\n        Voting,\r\n        Finished\r\n    }\r\n    StatusEvent public statusEvent = StatusEvent.Created;\r\n\r\n    \r\n    function HumanEvent(\r\n        address _owner, \r\n        uint _softCap,\r\n        address _alternative,\r\n        address _human\r\n    ) public {\r\n        owner = _owner;\r\n        softCap = _softCap;\r\n        alternative = _alternative;\r\n        human = HumanToken(_human);\r\n    }\r\n\r\n    function startFundraising() public onlyOwner {\r\n        require(statusEvent == StatusEvent.Created);\r\n        statusEvent = StatusEvent.Fundraising;\r\n        \r\n    }\r\n    \r\n\r\n    function startEvaluating() public onlyOwner {\r\n        require(statusEvent == StatusEvent.Fundraising);\r\n        \r\n        if (totalRaised >= softCap) {\r\n            statusEvent = StatusEvent.Evaluating;\r\n        } else {\r\n            statusEvent = StatusEvent.Failed;\r\n        }\r\n    }\r\n\r\n    function startVoting() public onlyOwner {\r\n        require(statusEvent == StatusEvent.Evaluating);\r\n        statusEvent = StatusEvent.Voting;\r\n    }\r\n\r\n    function finish() public onlyOwner {\r\n        require(statusEvent == StatusEvent.Voting);\r\n        if (positiveVotes >= negativeVotes) {\r\n            statusEvent = StatusEvent.Finished;\r\n        } else {\r\n            statusEvent = StatusEvent.Failed;\r\n        }\r\n    }\r\n    \r\n    \r\n    function claim() public {\r\n        require(!claimed[msg.sender]);        \r\n        claimed[msg.sender] = true;\r\n        uint contribution;\r\n\r\n        if (statusEvent == StatusEvent.Failed) {\r\n            contribution = contribution.add(contributions[msg.sender]);\r\n            contributions[msg.sender] = 0;\r\n        }\r\n\r\n        if(voted[msg.sender] && statusEvent != StatusEvent.Voting) {\r\n            uint _voteCost = human.voteCost();\r\n            contribution = contribution.add(_voteCost);\r\n        }\r\n        require(contribution > 0);\r\n        require(human.transfer(msg.sender, contribution));\r\n    }\r\n\r\n    \r\n    function vote(address _voter, bool _proposal) external onlyHuman returns (bool) {\r\n        require(!voted[_voter] && statusEvent == StatusEvent.Voting);\r\n        voted[_voter] = true;\r\n        \r\n        if (_proposal) {\r\n            positiveVotes++;\r\n        } else {\r\n            negativeVotes++;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function contribute(address _contributor, uint _amount) external onlyHuman returns(bool) {\r\n        require (statusEvent == StatusEvent.Fundraising);\r\n        contributions[_contributor] =  contributions[_contributor].add(_amount);\r\n        totalRaised = totalRaised.add(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function  withdraw() external onlyOwner {\r\n        require (statusEvent == StatusEvent.Finished);\r\n        require (human.transfer(alternative, totalRaised));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteCost\",\"type\":\"uint256\"}],\"name\":\"setVoteCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_event\",\"type\":\"address\"},{\"name\":\"_proposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_event\",\"type\":\"address\"}],\"name\":\"addEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_event\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_eventManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"address\"}],\"name\":\"EventAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposal\",\"type\":\"bool\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HumanToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000182b43df8209dc4f7bdcd7942f59052646a827ad00000000000000000000000009380517b9c0168ffbada7993cbe70cb341ee687","Library":"","SwarmSource":"bzzr://b5088467cb492a65ec95d21f435c3875c9f2b038eb028fa6195b25b1eb57bf14"}]}