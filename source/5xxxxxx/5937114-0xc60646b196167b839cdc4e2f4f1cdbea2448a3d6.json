{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Ownable {\r\n\r\n   address public owner;\r\n\r\n   constructor() public {\r\n       owner = msg.sender;\r\n   }\r\n\r\n   function setOwner(address _owner) public onlyOwner {\r\n       owner = _owner;\r\n   }\r\n\r\n   modifier onlyOwner {\r\n       require(msg.sender == owner);\r\n       _;\r\n   }\r\n\r\n}\r\n\r\ncontract Vault is Ownable {\r\n\r\n   function () public payable {\r\n\r\n   }\r\n\r\n   function getBalance() public view returns (uint) {\r\n       return address(this).balance;\r\n   }\r\n\r\n   function withdraw(uint amount) public onlyOwner {\r\n       require(address(this).balance >= amount);\r\n       owner.transfer(amount);\r\n   }\r\n\r\n   function withdrawAll() public onlyOwner {\r\n       withdraw(address(this).balance);\r\n   }\r\n}\r\n\r\ncontract CappedVault is Vault { \r\n\r\n    uint public limit;\r\n    uint withdrawn = 0;\r\n\r\n    constructor() public {\r\n        limit = 33333 ether;\r\n    }\r\n\r\n    function () public payable {\r\n        require(total() + msg.value <= limit);\r\n    }\r\n\r\n    function total() public view returns(uint) {\r\n        return getBalance() + withdrawn;\r\n    }\r\n\r\n    function withdraw(uint amount) public onlyOwner {\r\n        require(address(this).balance >= amount);\r\n        owner.transfer(amount);\r\n        withdrawn += amount;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CappedVault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02b900a4b62617d2a27d1f109b721731f1b74830bb6e672cd41b19c1a84450be"}]}