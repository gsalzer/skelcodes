{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Whitelisted.sol\r\n\r\ncontract Whitelisted is Ownable {\r\n\r\n    /// @dev True if whitelist enabled\r\n    bool public whitelistEnabled = true;\r\n\r\n    /// @dev ICO whitelist\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event ICOWhitelisted(address indexed addr);\r\n    event ICOBlacklisted(address indexed addr);\r\n\r\n    modifier onlyWhitelisted {\r\n        require(!whitelistEnabled || whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Add address to ICO whitelist\r\n     * @param address_ Investor address\r\n     */\r\n    function whitelist(address address_) external onlyOwner {\r\n        whitelist[address_] = true;\r\n        emit ICOWhitelisted(address_);\r\n    }\r\n\r\n    /**\r\n     * Remove address from ICO whitelist\r\n     * @param address_ Investor address\r\n     */\r\n    function blacklist(address address_) external onlyOwner {\r\n        delete whitelist[address_];\r\n        emit ICOBlacklisted(address_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if given address in ICO whitelist\r\n     */\r\n    function whitelisted(address address_) public view returns (bool) {\r\n        if (whitelistEnabled) {\r\n            return whitelist[address_];\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Enable whitelisting\r\n     */\r\n    function enableWhitelist() public onlyOwner {\r\n        whitelistEnabled = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Disable whitelisting\r\n     */\r\n    function disableWhitelist() public onlyOwner {\r\n        whitelistEnabled = false;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ERC20Token.sol\r\n\r\ninterface ERC20Token {\r\n    function balanceOf(address owner_) external returns (uint);\r\n    function allowance(address owner_, address spender_) external returns (uint);\r\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\r\n}\r\n\r\n// File: contracts/base/BaseICO.sol\r\n\r\n/**\r\n * @dev Base abstract smart contract for any ICO\r\n */\r\ncontract BaseICO is Ownable, Whitelisted {\r\n\r\n    /// @dev ICO state\r\n    enum State {\r\n\r\n        // ICO is not active and not started\r\n        Inactive,\r\n\r\n        // ICO is active, tokens can be distributed among investors.\r\n        // ICO parameters (end date, hard/low caps) cannot be changed.\r\n        Active,\r\n\r\n        // ICO is suspended, tokens cannot be distributed among investors.\r\n        // ICO can be resumed to `Active state`.\r\n        // ICO parameters (end date, hard/low caps) may changed.\r\n        Suspended,\r\n\r\n        // ICO is terminated by owner, ICO cannot be resumed.\r\n        Terminated,\r\n\r\n        // ICO goals are not reached,\r\n        // ICO terminated and cannot be resumed.\r\n        NotCompleted,\r\n\r\n        // ICO completed, ICO goals reached successfully,\r\n        // ICO terminated and cannot be resumed.\r\n        Completed\r\n    }\r\n\r\n    /// @dev Token which controlled by this ICO\r\n    ERC20Token public token;\r\n\r\n    /// @dev Current ICO state.\r\n    State public state;\r\n\r\n    /// @dev ICO start date seconds since epoch.\r\n    uint public startAt;\r\n\r\n    /// @dev ICO end date seconds since epoch.\r\n    uint public endAt;\r\n\r\n    /// @dev Minimal amount of investments in wei needed for successful ICO\r\n    uint public lowCapWei;\r\n\r\n    /// @dev Maximal amount of investments in wei for this ICO.\r\n    /// If reached ICO will be in `Completed` state.\r\n    uint public hardCapWei;\r\n\r\n    /// @dev Minimal amount of investments in wei per investor.\r\n    uint public lowCapTxWei;\r\n\r\n    /// @dev Maximal amount of investments in wei per investor.\r\n    uint public hardCapTxWei;\r\n\r\n    /// @dev Number of investments collected by this ICO\r\n    uint public collectedWei;\r\n\r\n    /// @dev Number of sold tokens by this ICO\r\n    uint public tokensSold;\r\n\r\n    /// @dev Team wallet used to collect funds\r\n    address public teamWallet;\r\n\r\n    // ICO state transition events\r\n    event ICOStarted(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\r\n    event ICOResumed(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\r\n    event ICOSuspended();\r\n    event ICOTerminated();\r\n    event ICONotCompleted();\r\n    event ICOCompleted(uint collectedWei);\r\n    event ICOInvestment(address indexed from, uint investedWei, uint tokens, uint8 bonusPct);\r\n\r\n    modifier isSuspended() {\r\n        require(state == State.Suspended);\r\n        _;\r\n    }\r\n\r\n    modifier isActive() {\r\n        require(state == State.Active);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Trigger start of ICO.\r\n     * @param endAt_ ICO end date, seconds since epoch.\r\n     */\r\n    function start(uint endAt_) public onlyOwner {\r\n        require(endAt_ > block.timestamp && state == State.Inactive);\r\n        endAt = endAt_;\r\n        startAt = block.timestamp;\r\n        state = State.Active;\r\n        emit ICOStarted(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Suspend this ICO.\r\n     * ICO can be activated later by calling `resume()` function.\r\n     * In suspend state, ICO owner can change basic ICO parameter using `tune()` function,\r\n     * tokens cannot be distributed among investors.\r\n     */\r\n    function suspend() public onlyOwner isActive {\r\n        state = State.Suspended;\r\n        emit ICOSuspended();\r\n    }\r\n\r\n    /**\r\n     * @dev Terminate the ICO.\r\n     * ICO goals are not reached, ICO terminated and cannot be resumed.\r\n     */\r\n    function terminate() public onlyOwner {\r\n        require(state != State.Terminated &&\r\n        state != State.NotCompleted &&\r\n        state != State.Completed);\r\n        state = State.Terminated;\r\n        emit ICOTerminated();\r\n    }\r\n\r\n    /**\r\n     * @dev Change basic ICO parameters. Can be done only during `Suspended` state.\r\n     * Any provided parameter is used only if it is not zero.\r\n     * @param endAt_ ICO end date seconds since epoch. Used if it is not zero.\r\n     * @param lowCapWei_ ICO low capacity. Used if it is not zero.\r\n     * @param hardCapWei_ ICO hard capacity. Used if it is not zero.\r\n     * @param lowCapTxWei_ Min limit for ICO per transaction\r\n     * @param hardCapTxWei_ Hard limit for ICO per transaction\r\n     */\r\n    function tune(uint endAt_,\r\n        uint lowCapWei_,\r\n        uint hardCapWei_,\r\n        uint lowCapTxWei_,\r\n        uint hardCapTxWei_) public onlyOwner isSuspended {\r\n        if (endAt_ > block.timestamp) {\r\n            endAt = endAt_;\r\n        }\r\n        if (lowCapWei_ > 0) {\r\n            lowCapWei = lowCapWei_;\r\n        }\r\n        if (hardCapWei_ > 0) {\r\n            hardCapWei = hardCapWei_;\r\n        }\r\n        if (lowCapTxWei_ > 0) {\r\n            lowCapTxWei = lowCapTxWei_;\r\n        }\r\n        if (hardCapTxWei_ > 0) {\r\n            hardCapTxWei = hardCapTxWei_;\r\n        }\r\n        require(lowCapWei <= hardCapWei && lowCapTxWei <= hardCapTxWei);\r\n        touch();\r\n    }\r\n\r\n    /**\r\n     * @dev Resume a previously suspended ICO.\r\n     */\r\n    function resume() public onlyOwner isSuspended {\r\n        state = State.Active;\r\n        emit ICOResumed(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\r\n        touch();\r\n    }\r\n\r\n    /**\r\n     * @dev Recalculate ICO state based on current block time.\r\n     * Should be called periodically by ICO owner.\r\n     */\r\n    function touch() public;\r\n\r\n    /**\r\n     * @dev Buy tokens\r\n     */\r\n    function buyTokens() public payable;\r\n\r\n    /**\r\n     * @dev Send ether to the fund collection wallet\r\n     */\r\n    function forwardFunds() internal {\r\n        teamWallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/IonChainICO.sol\r\n\r\n/**\r\n * @title IONC tokens ICO contract.\r\n */\r\ncontract IonChainICO is BaseICO {\r\n    using SafeMath for uint;\r\n\r\n    /// @dev 6 decimals for token\r\n    uint internal constant ONE_TOKEN = 1e6;\r\n\r\n    /// @dev 1e18 WEI == 1ETH == 125000 tokens\r\n    uint public constant ETH_TOKEN_EXCHANGE_RATIO = 125000;\r\n\r\n    /// @dev Token holder\r\n    address public tokenHolder;\r\n\r\n    // @dev personal cap for first 48 hours\r\n    uint public constant PERSONAL_CAP = 1.6 ether;\r\n\r\n    // @dev timestamp for end of personal cap\r\n    uint public personalCapEndAt;\r\n\r\n    // @dev purchases till personal cap limit end\r\n    mapping(address => uint) internal personalPurchases;\r\n\r\n    constructor(address icoToken_,\r\n            address teamWallet_,\r\n            address tokenHolder_,\r\n            uint lowCapWei_,\r\n            uint hardCapWei_,\r\n            uint lowCapTxWei_,\r\n            uint hardCapTxWei_) public {\r\n        require(icoToken_ != address(0) && teamWallet_ != address(0));\r\n        token = ERC20Token(icoToken_);\r\n        teamWallet = teamWallet_;\r\n        tokenHolder = tokenHolder_;\r\n        state = State.Inactive;\r\n        lowCapWei = lowCapWei_;\r\n        hardCapWei = hardCapWei_;\r\n        lowCapTxWei = lowCapTxWei_;\r\n        hardCapTxWei = hardCapTxWei_;\r\n    }\r\n\r\n    /**\r\n     * Accept direct payments\r\n     */\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n\r\n    function start(uint endAt_) onlyOwner public {\r\n        uint requireTokens = hardCapWei.mul(ETH_TOKEN_EXCHANGE_RATIO).mul(ONE_TOKEN).div(1 ether);\r\n        require(token.balanceOf(tokenHolder) >= requireTokens\r\n            && token.allowance(tokenHolder, address(this)) >= requireTokens);\r\n        personalCapEndAt = block.timestamp + 48 hours;\r\n        super.start(endAt_);\r\n    }\r\n\r\n    /**\r\n     * @dev Recalculate ICO state based on current block time.\r\n     * Should be called periodically by ICO owner.\r\n     */\r\n    function touch() public {\r\n        if (state != State.Active && state != State.Suspended) {\r\n            return;\r\n        }\r\n        if (collectedWei >= hardCapWei) {\r\n            state = State.Completed;\r\n            endAt = block.timestamp;\r\n            emit ICOCompleted(collectedWei);\r\n        } else if (block.timestamp >= endAt) {\r\n            if (collectedWei < lowCapWei) {\r\n                state = State.NotCompleted;\r\n                emit ICONotCompleted();\r\n            } else {\r\n                state = State.Completed;\r\n                emit ICOCompleted(collectedWei);\r\n            }\r\n        }\r\n    }\r\n\r\n    function buyTokens() public onlyWhitelisted payable {\r\n        require(state == State.Active &&\r\n            block.timestamp <= endAt &&\r\n            msg.value >= lowCapTxWei &&\r\n            msg.value <= hardCapTxWei &&\r\n            collectedWei + msg.value <= hardCapWei);\r\n        uint amountWei = msg.value;\r\n\r\n        // check personal cap\r\n        if (block.timestamp <= personalCapEndAt) {\r\n            personalPurchases[msg.sender] = personalPurchases[msg.sender].add(amountWei);\r\n            require(personalPurchases[msg.sender] <= PERSONAL_CAP);\r\n        }\r\n\r\n        uint itokens = amountWei.mul(ETH_TOKEN_EXCHANGE_RATIO).mul(ONE_TOKEN).div(1 ether);\r\n        collectedWei = collectedWei.add(amountWei);\r\n\r\n        emit ICOInvestment(msg.sender, amountWei, itokens, 0);\r\n        // Transfer tokens to investor\r\n        token.transferFrom(tokenHolder, msg.sender, itokens);\r\n        forwardFunds();\r\n        touch();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_EXCHANGE_RATIO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapTxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowCapTxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endAt_\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"touch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"personalCapEndAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERSONAL_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endAt_\",\"type\":\"uint256\"},{\"name\":\"lowCapWei_\",\"type\":\"uint256\"},{\"name\":\"hardCapWei_\",\"type\":\"uint256\"},{\"name\":\"lowCapTxWei_\",\"type\":\"uint256\"},{\"name\":\"hardCapTxWei_\",\"type\":\"uint256\"}],\"name\":\"tune\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowCapWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"icoToken_\",\"type\":\"address\"},{\"name\":\"teamWallet_\",\"type\":\"address\"},{\"name\":\"tokenHolder_\",\"type\":\"address\"},{\"name\":\"lowCapWei_\",\"type\":\"uint256\"},{\"name\":\"hardCapWei_\",\"type\":\"uint256\"},{\"name\":\"lowCapTxWei_\",\"type\":\"uint256\"},{\"name\":\"hardCapTxWei_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lowCapWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hardCapWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lowCapTxWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hardCapTxWei\",\"type\":\"uint256\"}],\"name\":\"ICOStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lowCapWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hardCapWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lowCapTxWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hardCapTxWei\",\"type\":\"uint256\"}],\"name\":\"ICOResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICONotCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"collectedWei\",\"type\":\"uint256\"}],\"name\":\"ICOCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investedWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusPct\",\"type\":\"uint8\"}],\"name\":\"ICOInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ICOWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ICOBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IonChainICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"000000000000000000000000dc62191cdb013502155373815f6b81e8d19b4fbd000000000000000000000000291244c926273a153b30fb83b1af9c140ac25c17000000000000000000000000b047adbff916efdb4f935bde42b69195c0b57e660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000056bc75e2d631000000","Library":"","SwarmSource":"bzzr://827de739ef2688dfb470bc9393e2ec36252c3db84a020946d838942489d2557f"}]}