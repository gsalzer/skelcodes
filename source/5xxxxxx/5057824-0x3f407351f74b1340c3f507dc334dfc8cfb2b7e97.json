{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns ( uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) internal pure returns ( uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns ( uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant public returns ( uint supply);\r\n\r\n    function balanceOf( address who ) constant public returns ( uint value);\r\n    function allowance( address owner, address spender ) constant public returns (uint _allowance);\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n//implement \r\ncontract StandardToken is SafeMath,ERC20 {\r\n    uint256     _totalSupply;\r\n    \r\n    function totalSupply() constant public returns ( uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        assert(balances[msg.sender] >= wad);\r\n        \r\n        balances[msg.sender] = safeSub(balances[msg.sender], wad);\r\n        balances[dst] = safeAdd(balances[dst], wad);\r\n        \r\n        Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n        assert(wad > 0 );\r\n        assert(balances[src] >= wad);\r\n        \r\n        balances[src] = safeSub(balances[src], wad);\r\n        balances[dst] = safeAdd(balances[dst], wad);\r\n        \r\n        Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns ( uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns ( bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns ( uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function freezeOf(address _owner) constant public returns ( uint256 balance) {\r\n        return freezes[_owner];\r\n    }\r\n    \r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) freezes;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract DSAuth {\r\n    address public authority;\r\n    address public owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        authority = msg.sender;\r\n    }\r\n\r\n    function setOwner(address owner_) Owner public\r\n    {\r\n        owner = owner_;\r\n    }\r\n\r\n    modifier Auth {\r\n        assert(isAuthorized(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    modifier Owner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src) internal view returns ( bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == authority) {\r\n            return true;\r\n        }\r\n        else if (src == owner) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\ncontract DRCToken is StandardToken,DSAuth {\r\n\r\n    string public name = \"Digit RedWine Coin\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"DRC\";\r\n    \r\n    /* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function DRCToken() public {\r\n        \r\n    }\r\n\r\n    function mint(uint256 wad) Owner public {\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], wad);\r\n        _totalSupply = safeAdd(_totalSupply, wad);\r\n    }\r\n\r\n    function burn(uint256 wad) Owner public {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], wad);\r\n        _totalSupply = safeSub(_totalSupply, wad);\r\n        Burn(msg.sender, wad);\r\n    }\r\n\r\n    function push(address dst, uint256 wad) public returns ( bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n\r\n    function pull(address src, uint256 wad) public returns ( bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    \r\n    function freeze(address dst,uint256 _value) Auth public returns (bool success) {\r\n        assert(balances[dst] >= _value); // Check if the sender has enough\r\n        assert(_value > 0) ; \r\n        balances[dst] = SafeMath.safeSub(balances[dst], _value);                      // Subtract from the sender\r\n        freezes[dst] = SafeMath.safeAdd(freezes[dst], _value);                                // Updates totalSupply\r\n        Freeze(dst, _value);\r\n        return true;\r\n    }\r\n    \r\n    function unfreeze(address dst,uint256 _value) Auth public returns (bool success) {\r\n        assert(freezes[dst] >= _value);            // Check if the sender has enough\r\n        assert(_value > 0) ; \r\n        freezes[dst] = SafeMath.safeSub(freezes[dst], _value);                      // Subtract from the sender\r\n        balances[dst] = SafeMath.safeAdd(balances[dst], _value);\r\n        Unfreeze(dst, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DRCCrowSale is SafeMath,DSAuth {\r\n    DRCToken public DRC;\r\n\r\n    // Constants\r\n    uint256 public constant tokensPerEth = 10000;// DRC per ETH \r\n    uint256 public presalePerEth;// DRC per ETH \r\n    \r\n    uint256 public constant totalSupply = 1 * 1e9 * 1e18; // Total DRC amount created\r\n\r\n    uint256 public tokensForTeam     = totalSupply * 15 / 100;\r\n    uint256 public tokensForParnter  = totalSupply * 15 / 100;\r\n    uint256 public tokensForPlatform = totalSupply * 45 / 100;\r\n\r\n    uint256 public tokensForPresale1 = totalSupply * 5 / 100;\r\n    uint256 public tokensForPresale2 = totalSupply * 10 / 100;\r\n    uint256 public tokensForSale     = totalSupply * 10 / 100;\r\n    \r\n    address public team;\r\n    address public parnter;\r\n    address public platform;\r\n    address public presale1;\r\n    \r\n    uint256 public Presale1Sold = 0;\r\n    uint256 public Presale2Sold = 0;\r\n    uint256 public PublicSold = 0;\r\n\r\n    enum IcoState {Init,Presale1, Presale2, Running, Paused, Finished}\r\n    IcoState public icoState = IcoState.Init;\r\n    IcoState public preIcoState = IcoState.Init;\r\n    \r\n    function setPresalePerEth(uint256 discount) external Auth{\r\n        presalePerEth = discount;\r\n    }\r\n\r\n    function startPreSale1() external Auth {\r\n        require(icoState == IcoState.Init);\r\n        icoState = IcoState.Presale1;\r\n    }\r\n\r\n    function startPreSale2() external Auth {\r\n        require(icoState == IcoState.Presale1);\r\n        icoState = IcoState.Presale2;\r\n    }\r\n\r\n    function startIco() external Auth {\r\n        require(icoState == IcoState.Presale2);\r\n        icoState = IcoState.Running;\r\n    }\r\n\r\n    function pauseIco() external Auth {\r\n        require(icoState != IcoState.Paused);\r\n        preIcoState = icoState ;\r\n        icoState = IcoState.Paused;\r\n    }\r\n\r\n    function continueIco() external Auth {\r\n        require(icoState == IcoState.Paused);\r\n        icoState = preIcoState;\r\n    }\r\n    \r\n    uint public finishTime = 0;\r\n    function finishIco() external Auth {\r\n        require(icoState == IcoState.Running);\r\n        icoState = IcoState.Finished;\r\n        finishTime = block.timestamp;\r\n    }\r\n    \r\n    uint public unfreezeStartTime = 0;\r\n    function setUnfreezeStartTime(uint timestamp) external Auth{\r\n        unfreezeStartTime = timestamp;\r\n    }\r\n    \r\n    mapping (uint => mapping (address => bool))  public  unfroze;\r\n    mapping (address => uint256)                 public  userBuys;\r\n    mapping (uint => bool)  public  burned;\r\n    \r\n    // anyone can burn\r\n    function burn(IcoState state) external Auth{\r\n        uint256 burnAmount = 0;\r\n        //only burn once\r\n        assert(burned[uint(state)] == false);\r\n        if(state == IcoState.Presale1 && (icoState == IcoState.Presale2 || icoState == IcoState.Finished)){\r\n            assert(Presale1Sold < tokensForPresale1);\r\n            burnAmount = safeSub(tokensForPresale1,Presale1Sold);\r\n        } \r\n        else if(state == IcoState.Presale2 && icoState == IcoState.Finished){ \r\n            assert(Presale2Sold < tokensForPresale2);\r\n            burnAmount = safeSub(tokensForPresale2,Presale2Sold);\r\n        } \r\n        else if(state == IcoState.Finished && icoState == IcoState.Finished){\r\n            assert(PublicSold < tokensForSale);\r\n            burnAmount = safeSub(tokensForSale,PublicSold);\r\n        } \r\n        else {\r\n            throw;\r\n        }\r\n\r\n        DRC.burn(burnAmount);\r\n        burned[uint(state)] = true;\r\n    }\r\n        \r\n    function presaleUnfreeze(uint step) external{\r\n        \r\n        assert(unfroze[step][msg.sender] == false);\r\n        assert(DRC.freezeOf(msg.sender) > 0 );\r\n        assert(unfreezeStartTime > 0);\r\n        assert(msg.sender != platform);\r\n        \r\n        uint256 freeze  = DRC.freezeOf(msg.sender);\r\n        uint256 unfreezeAmount = 0;\r\n\r\n        if(step == 1){\r\n            require( block.timestamp > (unfreezeStartTime + 30 days));\r\n            unfreezeAmount = freeze / 3;\r\n        }\r\n        else if(step == 2){\r\n            require( block.timestamp > (unfreezeStartTime + 60 days));\r\n            unfreezeAmount = freeze / 2;\r\n        }\r\n        else if(step == 3){\r\n            require( block.timestamp > (unfreezeStartTime + 90 days));\r\n            unfreezeAmount = freeze;\r\n        }\r\n        else{\r\n            throw ;\r\n        }\r\n        \r\n        require(unfreezeAmount > 0 );\r\n        \r\n        DRC.unfreeze(msg.sender,unfreezeAmount);\r\n        unfroze[step][msg.sender] = true;\r\n    }\r\n    \r\n    //team unfreeze\r\n    function teamUnfreeze() external{\r\n        uint month = 6;\r\n        \r\n        assert(DRC.freezeOf(msg.sender) > 0 );\r\n        assert(finishTime > 0);\r\n        assert(msg.sender == team);\r\n        uint step = safeSub(block.timestamp, finishTime) / (3600*24*30);\r\n        \r\n        uint256 freeze  = DRC.freezeOf(msg.sender);\r\n        uint256 unfreezeAmount = 0;\r\n        \r\n        uint256 per = tokensForTeam / month;\r\n        \r\n        for(uint i = 0 ;i <= step && i < month;i++){\r\n            if(unfroze[i][msg.sender] == false){\r\n                unfreezeAmount += per;\r\n            }\r\n        }\r\n        \r\n        require(unfreezeAmount > 0 );\r\n        require(unfreezeAmount <= freeze);\r\n\r\n        DRC.unfreeze(msg.sender,unfreezeAmount);\r\n        for(uint j = 0; j <= step && i < month; j++){\r\n            unfroze[j][msg.sender] = true;\r\n        }\r\n    }\r\n    \r\n    //platform unfreeze\r\n     function platformUnfreeze() external{\r\n        uint month = 12;\r\n        \r\n        assert(DRC.freezeOf(msg.sender) > 0 );\r\n        assert(finishTime > 0);\r\n        assert(msg.sender == platform);\r\n        uint step = safeSub(block.timestamp, finishTime) / (3600*24*30);\r\n        \r\n        uint256 freeze  = DRC.freezeOf(msg.sender);\r\n        uint256 unfreezeAmount = 0;\r\n        \r\n        uint256 per = tokensForPlatform / month;\r\n        \r\n        for(uint i = 0 ;i <= step && i < month;i++){\r\n            if(unfroze[i][msg.sender] == false){\r\n                unfreezeAmount += per;\r\n            }\r\n        }\r\n        \r\n        require(unfreezeAmount > 0 );\r\n        require(unfreezeAmount <= freeze);\r\n\r\n        DRC.unfreeze(msg.sender,unfreezeAmount);\r\n        for(uint j = 0; j <= step && i < month; j++){\r\n            unfroze[j][msg.sender] = true;\r\n        }\r\n    }\r\n    \r\n    // Constructor\r\n    function DRCCrowSale() public {\r\n\r\n    }\r\n\r\n    function initialize(DRCToken drc,address _team,address _parnter,address _platform,address _presale1) Auth public {\r\n        assert(address(DRC) == address(0));\r\n        assert(drc.owner() == address(this));\r\n        assert(drc.totalSupply() == 0);\r\n        assert(_team != _parnter && _parnter != _platform && _team != _platform);\r\n        \r\n        team =_team;\r\n        parnter=_parnter;\r\n        platform=_platform;\r\n        presale1 = _presale1;\r\n\r\n        DRC = drc;\r\n        DRC.mint(totalSupply);\r\n        \r\n        // transfer to team partner platform \r\n        DRC.push(team, tokensForTeam);\r\n        DRC.freeze(team,tokensForTeam);\r\n        \r\n        DRC.push(parnter, tokensForParnter);\r\n        \r\n        // freeze\r\n        DRC.push(platform, tokensForPlatform);\r\n        DRC.freeze(platform,tokensForPlatform);\r\n        \r\n        DRC.push(presale1, tokensForPresale1);\r\n        \r\n    }\r\n\r\n    function() payable public {\r\n        buy();\r\n    }\r\n\r\n    function buy()  payable public{\r\n        require( (icoState == IcoState.Running)  ||\r\n                 (icoState == IcoState.Presale1) || \r\n                 (icoState == IcoState.Presale2) );\r\n        // require          \r\n        if((icoState == IcoState.Presale1) || (icoState == IcoState.Presale2)){\r\n            require(msg.value >= 10 ether);\r\n        } \r\n        else {\r\n            require(msg.value >= 0.01 ether);\r\n            //limit peer user less than 10 eth\r\n            require(userBuys[msg.sender] + msg.value <= 10 ether);\r\n        }\r\n \r\n\r\n        uint256 amount = getDRCTotal(msg.value);\r\n        uint256 sold = 0;\r\n        uint256 canbuy = 0;\r\n        (sold,canbuy) = getSold();\r\n\r\n        // refund eth for last buy\r\n        if (sold + amount > canbuy){\r\n            uint256 delta = sold + amount - canbuy;\r\n            uint256 refundMoney = msg.value * delta / amount;\r\n            amount = canbuy-sold;\r\n            require(refundMoney > 0);\r\n            msg.sender.transfer(refundMoney);\r\n        }\r\n        \r\n        require(amount > 0);\r\n    \r\n        DRC.push(msg.sender, amount);\r\n        \r\n        //presale auto freeze\r\n        if((icoState == IcoState.Presale1)  || (icoState == IcoState.Presale2)){\r\n            DRC.freeze(msg.sender,amount);\r\n        }\r\n        else{\r\n            //for limit amount peer user \r\n            userBuys[msg.sender] += amount;\r\n        }\r\n        \r\n       addSold(amount);\r\n    }\r\n    \r\n    function getSold() private view returns ( uint256,uint256){\r\n        if(icoState == IcoState.Presale1){\r\n            return(Presale1Sold,tokensForPresale1);\r\n        } \r\n        else if(icoState == IcoState.Presale2){\r\n            return(Presale2Sold,tokensForPresale2);\r\n        } \r\n        else if(icoState == IcoState.Running){\r\n            return(PublicSold,tokensForSale);\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function addSold(uint256 amount) private{\r\n        if(icoState == IcoState.Presale1){\r\n            Presale1Sold += amount;\r\n        } \r\n        else if(icoState == IcoState.Presale2){\r\n            Presale2Sold += amount;\r\n        } \r\n        else if(icoState == IcoState.Running){\r\n            PublicSold += amount;\r\n        }\r\n        else{\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    //discount\r\n    function getDRCTotal(uint256 _eth) public view returns ( uint256)\r\n    {\r\n        if(icoState == IcoState.Presale1)\r\n        {\r\n            return safeMult(_eth , presalePerEth);\r\n        }\r\n        else if(icoState == IcoState.Presale2)\r\n        {\r\n           return safeMult(_eth , presalePerEth);\r\n        }\r\n\r\n        return safeMult(_eth , tokensPerEth);\r\n    }\r\n\r\n    function finalize() external Owner payable {\r\n        require(this.balance > 0 );\r\n\r\n        require(owner.send(this.balance));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unfroze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"getDRCTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForParnter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"drc\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_parnter\",\"type\":\"address\"},{\"name\":\"_platform\",\"type\":\"address\"},{\"name\":\"_presale1\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PublicSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForPresale1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setUnfreezeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parnter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unfreezeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForPresale2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Presale1Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"setPresalePerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Presale2Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"teamUnfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"platformUnfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"presaleUnfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DRCCrowSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://743e124dd521dce0e55fb1e75a5bd795e2f401c51af9c2af47f34dc4987a48bf"}]}