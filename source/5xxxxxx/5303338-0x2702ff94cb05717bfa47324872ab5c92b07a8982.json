{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\ncontract Token {\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions.\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balanceOf(address owner) public constant returns (uint256 balance);\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/// @title Standard token contract - Standard token interface implementation.\r\ncontract StandardToken is Token {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public maxSupply;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            revert();\r\n        }\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            revert();\r\n        }\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    /// @return Returns success of function call.\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    /// @return Returns remaining allowance for spender.\r\n    function allowance(address _owner, address _spender)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @return Returns balance of owner.\r\n    function balanceOf(address _owner)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n// author: SuXeN\r\ncontract SolarNA is StandardToken {\r\n\r\n    /*\r\n     *  Token meta data\r\n     */\r\n    string constant public name = \"SolarNA Token\";\r\n    string constant public symbol = \"SOLA\";\r\n    uint8 constant public decimals = 3;\r\n    address public owner;\r\n    uint remaining;\r\n    uint divPrice = 10 ** 12;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function gives tokens to presale_addresses and leave 100k tokens for sale.\r\n    /// @param presale_addresses Array of addresses receiving preassigned tokens.\r\n    /// @param tokens Array of preassigned token amounts.\r\n    /// NB: Max 4 presale_addresses\r\n    function SolarNA(address[] presale_addresses, uint[] tokens)\r\n        public\r\n    {\r\n        uint assignedTokens;\r\n        owner = msg.sender;\r\n        maxSupply = 500000 * 10**3;\r\n        for (uint i=0; i<presale_addresses.length; i++) {\r\n            if (presale_addresses[i] == 0) {\r\n                // Address should not be null.\r\n                revert();\r\n            }\r\n            balances[presale_addresses[i]] += tokens[i];\r\n            assignedTokens += tokens[i];\r\n            emit Transfer(0, presale_addresses[i], tokens[i]); // emit an event\r\n        }\r\n        /// If presale_addresses > 4 => The maxSupply will increase\r\n        remaining = maxSupply - assignedTokens;\r\n        assignedTokens += remaining;\r\n        if (assignedTokens != maxSupply) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// Change price from 1000 SOLA = 1 ether to 500 SOLA = 1 ether \r\n    function changePrice(bool _conditon) public returns (uint) {\r\n        require(msg.sender == owner);\r\n        if (_conditon) {\r\n            divPrice *= 2;\r\n        }\r\n        return divPrice;\r\n    }\r\n\r\n    function () public payable {\r\n        /// Required msg.value > 0 and still remaining tokens\r\n        uint value = msg.value / uint(divPrice);\r\n        require(remaining >= value && value != 0);\r\n        balances[msg.sender] += value;\r\n        remaining -= value;\r\n        emit Transfer(address(0), msg.sender, value);\r\n    }\r\n    \r\n    /// Transfer all the funds in ETH to the owner\r\n    function transferAll() public returns (bool) {\r\n        require(msg.sender == owner);\r\n        owner.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    /// Return MaxSupply    \r\n    function totalSupply()  public constant returns (uint256 supply) {\r\n        return maxSupply;\r\n    }\r\n    \r\n    /// Return remaining tokens\r\n    function remainingTokens() public view returns (uint256) {\r\n        return remaining;\r\n    } \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"transferAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conditon\",\"type\":\"bool\"}],\"name\":\"changePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"presale_addresses\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SolarNA","CompilerVersion":"v0.4.22-nightly.2018.3.21+commit.8fd53c1c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000040000000000000000000000001d5d2e64abc778f7aaba74cd5bd63abbeb18638f000000000000000000000000a9fb73c2d6234a030d8287dce0194b889d75db8d00000000000000000000000054360d67e54fa949658467c8e7cd59118c9f9406000000000000000000000000dce8d394f6ecc607adfb1c2caf8093e4f9b15882000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000068e778000000000000000000000000000000000000000000000000000000000055d4a800000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000008f0d180","Library":"","SwarmSource":"bzzr://1145ef148df38cd6c2e17314694e0e99d549f6c90890026b4b1b6e6355339a14"}]}