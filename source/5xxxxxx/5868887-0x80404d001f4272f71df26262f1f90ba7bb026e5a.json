{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Multivest is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* public variables */\r\n    mapping (address => bool) public allowedMultivests;\r\n\r\n    /* events */\r\n    event MultivestSet(address multivest);\r\n\r\n    event MultivestUnset(address multivest);\r\n\r\n    event Contribution(address holder, uint256 value, uint256 tokens);\r\n\r\n    modifier onlyAllowedMultivests(address _addresss) {\r\n        require(allowedMultivests[_addresss] == true);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    function Multivest() public {}\r\n\r\n    function setAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = true;\r\n        MultivestSet(_address);\r\n    }\r\n\r\n    function unsetAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = false;\r\n        MultivestUnset(_address);\r\n    }\r\n\r\n    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\r\n        require(buy(_address, _value) == true);\r\n    }\r\n\r\n    function multivestBuy(\r\n        address _address,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\r\n        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\r\n    }\r\n\r\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool);\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract GigERC20 is StandardToken, Ownable {\r\n    /* Public variables of the token */\r\n    uint256 public creationBlock;\r\n\r\n    uint8 public decimals;\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string public standard;\r\n\r\n    bool public locked;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function GigERC20(\r\n        uint256 _totalSupply,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    ) public {\r\n        standard = \"ERC20 0.1\";\r\n        locked = _locked;\r\n        totalSupply_ = _totalSupply;\r\n\r\n        if (_transferAllSupplyToOwner) {\r\n            balances[msg.sender] = totalSupply_;\r\n        } else {\r\n            balances[this] = totalSupply_;\r\n        }\r\n        name = _tokenName;\r\n        // Set the name for display purposes\r\n        symbol = _tokenSymbol;\r\n        // Set the symbol for display purposes\r\n        decimals = _decimalUnits;\r\n        // Amount of decimals for display purposes\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    /* public methods */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(locked == false);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\r\nThis contract contains basic minting functionality though\r\n*/\r\ncontract MintingERC20 is GigERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //Variables\r\n    mapping (address => bool) public minters;\r\n\r\n    uint256 public maxSupply;\r\n\r\n    //Modifiers\r\n    modifier onlyMinters () {\r\n        require(true == minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function MintingERC20(\r\n        uint256 _initialSupply,\r\n        uint256 _maxSupply,\r\n        string _tokenName,\r\n        uint8 _decimals,\r\n        string _symbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    )\r\n        public GigERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\r\n    {\r\n        standard = \"MintingERC20 0.1\";\r\n        minters[msg.sender] = true;\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    function addMinter(address _newMinter) public onlyOwner {\r\n        minters[_newMinter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        if (true == locked) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (_amount == uint256(0)) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (totalSupply_.add(_amount) > maxSupply) {\r\n            return uint256(0);\r\n        }\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        Transfer(address(0), _addr, _amount);\r\n\r\n        return _amount;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract GigToken is MintingERC20 {\r\n    SellableToken public crowdSale; // Pre ICO & ICO\r\n    SellableToken public privateSale;\r\n\r\n    bool public transferFrozen = false;\r\n\r\n    uint256 public crowdSaleEndTime;\r\n\r\n    mapping(address => uint256) public lockedBalancesReleasedAfterOneYear;\r\n\r\n    modifier onlyCrowdSale() {\r\n        require(crowdSale != address(0) && msg.sender == address(crowdSale));\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlySales() {\r\n        require((privateSale != address(0) && msg.sender == address(privateSale)) ||\r\n            (crowdSale != address(0) && msg.sender == address(crowdSale)));\r\n\r\n        _;\r\n    }\r\n\r\n    event MaxSupplyBurned(uint256 burnedTokens);\r\n\r\n    function GigToken(bool _locked) public\r\n        MintingERC20(0, maxSupply, 'GigBit', 18, 'GBTC', false, _locked)\r\n    {\r\n        standard = 'GBTC 0.1';\r\n\r\n        maxSupply = uint256(1000000000).mul(uint256(10) ** decimals);\r\n    }\r\n\r\n    function setCrowdSale(address _crowdSale) public onlyOwner {\r\n        require(_crowdSale != address(0));\r\n\r\n        crowdSale = SellableToken(_crowdSale);\r\n\r\n        crowdSaleEndTime = crowdSale.endTime();\r\n    }\r\n\r\n    function setPrivateSale(address _privateSale) public onlyOwner {\r\n        require(_privateSale != address(0));\r\n\r\n        privateSale = SellableToken(_privateSale);\r\n    }\r\n\r\n    function freezing(bool _transferFrozen) public onlyOwner {\r\n        transferFrozen = _transferFrozen;\r\n    }\r\n\r\n    function isTransferAllowed(address _from, uint256 _value) public view returns (bool status) {\r\n        uint256 senderBalance = balanceOf(_from);\r\n        if (transferFrozen == true || senderBalance < _value) {\r\n            return false;\r\n        }\r\n\r\n        uint256 lockedBalance = lockedBalancesReleasedAfterOneYear[_from];\r\n\r\n        // check if holder tries to transfer more than locked tokens\r\n    if (lockedBalance > 0 && senderBalance.sub(_value) < lockedBalance) {\r\n            uint256 unlockTime = crowdSaleEndTime + 1 years;\r\n\r\n            // fail if unlock time is not come\r\n            if (crowdSaleEndTime == 0 || block.timestamp < unlockTime) {\r\n                return false;\r\n            }\r\n\r\n            uint256 secsFromUnlock = block.timestamp.sub(unlockTime);\r\n\r\n            // number of months over from unlock\r\n            uint256 months = secsFromUnlock / 30 days;\r\n\r\n            if (months > 12) {\r\n                months = 12;\r\n            }\r\n\r\n            uint256 tokensPerMonth = lockedBalance / 12;\r\n\r\n            uint256 unlockedBalance = tokensPerMonth.mul(months);\r\n\r\n            uint256 actualLockedBalance = lockedBalance.sub(unlockedBalance);\r\n\r\n            if (senderBalance.sub(_value) < actualLockedBalance) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (block.timestamp < crowdSaleEndTime &&\r\n            crowdSale != address(0) &&\r\n            crowdSale.isTransferAllowed(_from, _value) == false\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(isTransferAllowed(msg.sender, _value));\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        // transferFrom & approve are disabled before end of ICO\r\n        require((crowdSaleEndTime <= block.timestamp) && isTransferAllowed(_from, _value));\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // transferFrom & approve are disabled before end of ICO\r\n\r\n        require(crowdSaleEndTime <= block.timestamp);\r\n\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        // transferFrom & approve are disabled before end of ICO\r\n\r\n        require(crowdSaleEndTime <= block.timestamp);\r\n\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        // transferFrom & approve are disabled before end of ICO\r\n\r\n        require(crowdSaleEndTime <= block.timestamp);\r\n\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function increaseLockedBalance(address _address, uint256 _tokens) public onlySales {\r\n        lockedBalancesReleasedAfterOneYear[_address] =\r\n            lockedBalancesReleasedAfterOneYear[_address].add(_tokens);\r\n    }\r\n\r\n    // burn tokens if soft cap is not reached\r\n    function burnInvestorTokens(\r\n        address _address,\r\n        uint256 _amount\r\n    ) public onlyCrowdSale returns (uint256) {\r\n        require(block.timestamp > crowdSaleEndTime);\r\n\r\n        require(_amount <= balances[_address]);\r\n\r\n        balances[_address] = balances[_address].sub(_amount);\r\n\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n\r\n        Transfer(_address, address(0), _amount);\r\n\r\n        return _amount;\r\n    }\r\n\r\n    // decrease max supply of tokens that are not sold\r\n    function burnUnsoldTokens(uint256 _amount) public onlyCrowdSale {\r\n        require(block.timestamp > crowdSaleEndTime);\r\n\r\n        maxSupply = maxSupply.sub(_amount);\r\n\r\n        MaxSupplyBurned(_amount);\r\n    }\r\n}\r\n\r\ncontract SellableToken is Multivest {\r\n    uint256 public constant MONTH_IN_SEC = 2629743;\r\n    GigToken public token;\r\n\r\n    uint256 public minPurchase = 100 * 10 ** 5;\r\n    uint256 public maxPurchase;\r\n\r\n    uint256 public softCap;\r\n    uint256 public hardCap;\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    uint256 public maxTokenSupply;\r\n\r\n    uint256 public soldTokens;\r\n\r\n    uint256 public collectedEthers;\r\n\r\n    address public etherHolder;\r\n\r\n    uint256 public collectedUSD;\r\n\r\n    uint256 public etherPriceInUSD;\r\n    uint256 public priceUpdateAt;\r\n\r\n    mapping(address => uint256) public etherBalances;\r\n\r\n    Tier[] public tiers;\r\n\r\n    struct Tier {\r\n        uint256 discount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n\r\n    event Refund(address _holder, uint256 _ethers, uint256 _tokens);\r\n    event NewPriceTicker(string _price);\r\n\r\n    function SellableToken(\r\n        address _token,\r\n        address _etherHolder,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _maxTokenSupply,\r\n        uint256 _etherPriceInUSD\r\n    )\r\n    public Multivest()\r\n    {\r\n        require(_token != address(0) && _etherHolder != address(0));\r\n        token = GigToken(_token);\r\n\r\n        require(_startTime < _endTime);\r\n        etherHolder = _etherHolder;\r\n        require((_maxTokenSupply == uint256(0)) || (_maxTokenSupply <= token.maxSupply()));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        maxTokenSupply = _maxTokenSupply;\r\n        etherPriceInUSD = _etherPriceInUSD;\r\n\r\n        priceUpdateAt = block.timestamp;\r\n    }\r\n\r\n    function setTokenContract(address _token) public onlyOwner {\r\n        require(_token != address(0));\r\n        token = GigToken(_token);\r\n    }\r\n\r\n    function setEtherHolder(address _etherHolder) public onlyOwner {\r\n        if (_etherHolder != address(0)) {\r\n            etherHolder = _etherHolder;\r\n        }\r\n    }\r\n\r\n    function setPurchaseLimits(uint256 _min, uint256 _max) public onlyOwner {\r\n        if (_min < _max) {\r\n            minPurchase = _min;\r\n            maxPurchase = _max;\r\n        }\r\n    }\r\n\r\n    function mint(address _address, uint256 _tokenAmount) public onlyOwner returns (uint256) {\r\n        return mintInternal(_address, _tokenAmount);\r\n    }\r\n\r\n    function isActive() public view returns (bool);\r\n\r\n    function isTransferAllowed(address _from, uint256 _value) public view returns (bool);\r\n\r\n    function withinPeriod() public view returns (bool);\r\n\r\n    function getMinEthersInvestment() public view returns (uint256) {\r\n        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount);\r\n\r\n    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 bonus);\r\n\r\n    function updatePreICOMaxTokenSupply(uint256 _amount) public;\r\n\r\n    // set ether price in USD with 5 digits after the decimal point\r\n    //ex. 308.75000\r\n    //for updating the price through  multivest\r\n    function setEtherInUSD(string _price) public onlyAllowedMultivests(msg.sender) {\r\n        bytes memory bytePrice = bytes(_price);\r\n        uint256 dot = bytePrice.length.sub(uint256(6));\r\n\r\n        // check if dot is in 6 position  from  the last\r\n        require(0x2e == uint(bytePrice[dot]));\r\n\r\n        uint256 newPrice = uint256(10 ** 23).div(parseInt(_price, 5));\r\n\r\n        require(newPrice > 0);\r\n\r\n        etherPriceInUSD = parseInt(_price, 5);\r\n\r\n        priceUpdateAt = block.timestamp;\r\n\r\n        NewPriceTicker(_price);\r\n    }\r\n\r\n    function mintInternal(address _address, uint256 _tokenAmount) internal returns (uint256) {\r\n        uint256 mintedAmount = token.mint(_address, _tokenAmount);\r\n\r\n        require(mintedAmount == _tokenAmount);\r\n\r\n        soldTokens = soldTokens.add(_tokenAmount);\r\n        if (maxTokenSupply > 0) {\r\n            require(maxTokenSupply >= soldTokens);\r\n        }\r\n\r\n        return _tokenAmount;\r\n    }\r\n\r\n    function transferEthers() internal;\r\n\r\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint res = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                res *= 10;\r\n                res += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) res *= 10 ** _b;\r\n        return res;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenAllocation is Ownable {\r\n    using SafeERC20 for ERC20Basic;\r\n    using SafeMath for uint256;\r\n\r\n    address public ecosystemIncentive = 0xd339D9aeDFFa244E09874D65290c09d64b2356E0;\r\n    address public marketingAndBounty = 0x26d6EF95A51BF0A2048Def4Fb7c548c3BDE37410;\r\n    address public liquidityFund = 0x3D458b6f9024CDD9A2a7528c2E6451DD3b29e4cc;\r\n    address public treasure = 0x00dEaFC5959Dd0E164bB00D06B08d972A276bf8E;\r\n    address public amirShaikh = 0x31b17e7a2F86d878429C03f3916d17555C0d4884;\r\n    address public sadiqHameed = 0x27B5cb71ff083Bd6a34764fBf82700b3669137f3;\r\n    address public omairLatif = 0x92Db818bF10Bf3BfB73942bbB1f184274aA63833;\r\n\r\n    uint256 public icoEndTime;\r\n\r\n    address public vestingApplicature;\r\n    address public vestingSimonCocking;\r\n    address public vestingNathanChristian;\r\n    address public vestingEdwinVanBerg;\r\n\r\n    mapping(address => bool) public tokenInited;\r\n    address[] public vestings;\r\n\r\n    event VestingCreated(\r\n        address _vesting,\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _periods,\r\n        bool _revocable\r\n    );\r\n\r\n    event VestingRevoked(address _vesting);\r\n\r\n    function setICOEndTime(uint256 _icoEndTime) public onlyOwner {\r\n        icoEndTime = _icoEndTime;\r\n    }\r\n\r\n    function initVesting() public onlyOwner() {\r\n        require(vestingApplicature == address(0) &&\r\n        vestingSimonCocking == address(0) &&\r\n        vestingNathanChristian == address(0) &&\r\n        vestingEdwinVanBerg == address(0) &&\r\n        icoEndTime != 0\r\n        );\r\n\r\n        uint256 oneYearAfterIcoEnd = icoEndTime.add(1 years);\r\n\r\n        vestingApplicature = createVesting(\r\n            0x760864dcdC58FDA80dB6883ce442B6ce44921Cf9, oneYearAfterIcoEnd, 0, 1 years, 2, false\r\n        );\r\n\r\n        vestingSimonCocking = createVesting(\r\n            0x7f438d78a51886B24752941ba98Cc00aBA217495, oneYearAfterIcoEnd, 0, 1 years, 2, true\r\n        );\r\n\r\n        vestingNathanChristian = createVesting(\r\n            0xfD86B8B016de558Fe39B1697cBf525592A233B2c, oneYearAfterIcoEnd, 0, 1 years, 2, true\r\n        );\r\n\r\n        vestingEdwinVanBerg = createVesting(\r\n            0x2451A73F35874028217bC833462CCd90c72dbE6D, oneYearAfterIcoEnd, 0, 1 years, 2, true\r\n        );\r\n    }\r\n\r\n    function allocate(MintingERC20 token) public onlyOwner() {\r\n        require(tokenInited[token] == false);\r\n\r\n        tokenInited[token] = true;\r\n\r\n        require(vestingApplicature != address(0));\r\n        require(vestingSimonCocking != address(0));\r\n        require(vestingNathanChristian != address(0));\r\n        require(vestingEdwinVanBerg != address(0));\r\n\r\n        uint256 tokenPrecision = uint256(10) ** uint256(token.decimals());\r\n\r\n        // allocate funds\r\n        token.mint(ecosystemIncentive, 200000000 * tokenPrecision);\r\n        token.mint(marketingAndBounty, 50000000 * tokenPrecision);\r\n        token.mint(liquidityFund, 50000000 * tokenPrecision);\r\n        token.mint(treasure, 200000000 * tokenPrecision);\r\n\r\n        // allocate funds to founders\r\n        token.mint(amirShaikh, 73350000 * tokenPrecision);\r\n        token.mint(sadiqHameed, 36675000 * tokenPrecision);\r\n        token.mint(omairLatif, 36675000 * tokenPrecision);\r\n\r\n        // allocate funds to advisors\r\n        token.mint(vestingApplicature, 1500000 * tokenPrecision);\r\n        token.mint(vestingSimonCocking, 750000 * tokenPrecision);\r\n        token.mint(vestingNathanChristian, 750000 * tokenPrecision);\r\n        token.mint(vestingEdwinVanBerg, 300000 * tokenPrecision);\r\n    }\r\n\r\n    function createVesting(\r\n        address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _periods, bool _revocable\r\n    ) public onlyOwner() returns (PeriodicTokenVesting) {\r\n        PeriodicTokenVesting vesting = new PeriodicTokenVesting(\r\n            _beneficiary, _start, _cliff, _duration, _periods, _revocable\r\n        );\r\n\r\n        vestings.push(vesting);\r\n\r\n        VestingCreated(vesting, _beneficiary, _start, _cliff, _duration, _periods, _revocable);\r\n\r\n        return vesting;\r\n    }\r\n\r\n    function revokeVesting(PeriodicTokenVesting _vesting, MintingERC20 token) public onlyOwner() {\r\n        _vesting.revoke(token);\r\n\r\n        VestingRevoked(_vesting);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\ncontract PeriodicTokenVesting is TokenVesting {\r\n    uint256 public periods;\r\n\r\n    function PeriodicTokenVesting(\r\n        address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _periods, bool _revocable\r\n    )\r\n        public TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable)\r\n    {\r\n        periods = _periods;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the amount that has already vested.\r\n    * @param token ERC20 token which is being vested\r\n    */\r\n    function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(this);\r\n        uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= start.add(duration * periods) || revoked[token]) {\r\n            return totalBalance;\r\n        } else {\r\n\r\n            uint256 periodTokens = totalBalance.div(periods);\r\n\r\n            uint256 periodsOver = now.sub(start).div(duration) + 1;\r\n\r\n            if (periodsOver >= periods) {\r\n                return totalBalance;\r\n            }\r\n\r\n            return periodTokens.mul(periodsOver);\r\n        }\r\n    }\r\n}\r\n\r\ncontract PrivateSale is SellableToken {\r\n\r\n    uint256 public price;\r\n    uint256 public discount;\r\n    SellableToken public crowdSale;\r\n\r\n    function PrivateSale(\r\n        address _token,\r\n        address _etherHolder,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _maxTokenSupply, //14000000000000000000000000\r\n        uint256 _etherPriceInUSD\r\n    ) public SellableToken(\r\n        _token,\r\n        _etherHolder,\r\n        _startTime,\r\n        _endTime,\r\n        _maxTokenSupply,\r\n        _etherPriceInUSD\r\n    ) {\r\n        price = 24800;// $0.2480 * 10 ^ 5\r\n        discount = 75;// $75%\r\n    }\r\n\r\n    function changeSalePeriod(uint256 _start, uint256 _end) public onlyOwner {\r\n        if (_start != 0 && _start < _end) {\r\n            startTime = _start;\r\n            endTime = _end;\r\n        }\r\n    }\r\n\r\n    function isActive() public view returns (bool) {\r\n        if (soldTokens == maxTokenSupply) {\r\n            return false;\r\n        }\r\n\r\n        return withinPeriod();\r\n    }\r\n\r\n    function withinPeriod() public view returns (bool) {\r\n        return block.timestamp >= startTime && block.timestamp <= endTime;\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount) {\r\n        if (_value == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        usdAmount = _value.mul(etherPriceInUSD);\r\n\r\n        tokenAmount = usdAmount.div(price * (100 - discount) / 100);\r\n\r\n        usdAmount = usdAmount.div(uint256(10) ** 18);\r\n\r\n        if (usdAmount < minPurchase) {\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 usdAmount) {\r\n        if (_tokens == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        usdAmount = _tokens.mul((price * (100 - discount) / 100));\r\n        ethers = usdAmount.div(etherPriceInUSD);\r\n\r\n        if (ethers < getMinEthersInvestment()) {\r\n            return (0, 0);\r\n        }\r\n\r\n        usdAmount = usdAmount.div(uint256(10) ** 18);\r\n    }\r\n\r\n    function getStats(uint256 _ethPerBtc) public view returns (\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 sold,\r\n        uint256 maxSupply,\r\n        uint256 min,\r\n        uint256 tokensPerEth,\r\n        uint256 tokensPerBtc\r\n    ) {\r\n        start = startTime;\r\n        end = endTime;\r\n        sold = soldTokens;\r\n        maxSupply = maxTokenSupply;\r\n        min = minPurchase;\r\n        uint256 usd;\r\n        (tokensPerEth, usd) = calculateTokensAmount(1 ether);\r\n        (tokensPerBtc, usd) = calculateTokensAmount(_ethPerBtc);\r\n    }\r\n\r\n    function setCrowdSale(address _crowdSale) public onlyOwner {\r\n        require(_crowdSale != address(0));\r\n\r\n        crowdSale = SellableToken(_crowdSale);\r\n    }\r\n\r\n    function moveUnsoldTokens() public onlyOwner {\r\n        require(address(crowdSale) != address(0) && now >= endTime && !isActive() && maxTokenSupply > soldTokens);\r\n\r\n        crowdSale.updatePreICOMaxTokenSupply(maxTokenSupply.sub(soldTokens));\r\n        maxTokenSupply = soldTokens;\r\n    }\r\n\r\n    function updatePreICOMaxTokenSupply(uint256) public {\r\n        require(false);\r\n    }\r\n\r\n    function isTransferAllowed(address, uint256) public view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool) {\r\n        if (_value == 0 || _address == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 tokenAmount;\r\n        uint256 usdAmount;\r\n\r\n        (tokenAmount, usdAmount) = calculateTokensAmount(_value);\r\n\r\n        uint256 mintedAmount = mintInternal(_address, tokenAmount);\r\n        collectedUSD = collectedUSD.add(usdAmount);\r\n        require(usdAmount > 0 && mintedAmount > 0);\r\n\r\n        collectedEthers = collectedEthers.add(_value);\r\n        etherBalances[_address] = etherBalances[_address].add(_value);\r\n\r\n        token.increaseLockedBalance(_address, mintedAmount);\r\n\r\n        transferEthers();\r\n\r\n        Contribution(_address, _value, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferEthers() internal {\r\n        etherHolder.transfer(this.balance);\r\n    }\r\n}\r\n\r\ncontract CrowdSale is SellableToken {\r\n    uint256 public constant PRE_ICO_TIER_FIRST = 0;\r\n    uint256 public constant PRE_ICO_TIER_LAST = 4;\r\n    uint256 public constant ICO_TIER_FIRST = 5;\r\n    uint256 public constant ICO_TIER_LAST = 8;\r\n\r\n    SellableToken public privateSale;\r\n\r\n    uint256 public price;\r\n\r\n    Stats public preICOStats;\r\n    mapping(address => uint256) public icoBalances;\r\n\r\n    struct Stats {\r\n        uint256 soldTokens;\r\n        uint256 maxTokenSupply;\r\n        uint256 collectedUSD;\r\n        uint256 collectedEthers;\r\n        bool burned;\r\n    }\r\n\r\n    function CrowdSale(\r\n        address _token,\r\n        address _etherHolder,\r\n        uint256 _maxPreICOTokenSupply,\r\n    //10000000000000000000000000-527309544043097299200271 + 177500000000000000000000000 = 186972690455956902700799729\r\n        uint256 _maxICOTokenSupply, //62500000000000000000000000\r\n        uint256 _price,\r\n        uint256[2] _preIcoDuration, //1530432000  -1533081599\r\n        uint256[2] _icoDuration, // 1533110400 - 1538351999\r\n        uint256 _etherPriceInUSD\r\n    ) public\r\n    SellableToken(\r\n        _token,\r\n        _etherHolder,\r\n            _preIcoDuration[0],\r\n            _icoDuration[1],\r\n        _maxPreICOTokenSupply.add(_maxICOTokenSupply),\r\n        _etherPriceInUSD\r\n    ) {\r\n        softCap = 250000000000;\r\n        hardCap = 3578912800000;\r\n        price = _price;\r\n        preICOStats.maxTokenSupply = _maxPreICOTokenSupply;\r\n        //0.2480* 10^5\r\n        //PreICO\r\n        tiers.push(\r\n            Tier(\r\n                uint256(65),\r\n                _preIcoDuration[0],\r\n                _preIcoDuration[0].add(1 hours)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(60),\r\n                _preIcoDuration[0].add(1 hours),\r\n                _preIcoDuration[0].add(1 days)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(57),\r\n                _preIcoDuration[0].add(1 days),\r\n                _preIcoDuration[0].add(2 days)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(55),\r\n                _preIcoDuration[0].add(2 days),\r\n                _preIcoDuration[0].add(3 days)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(50),\r\n                _preIcoDuration[0].add(3 days),\r\n                _preIcoDuration[1]\r\n            )\r\n        );\r\n        //ICO\r\n        tiers.push(\r\n            Tier(\r\n                uint256(25),\r\n                _icoDuration[0],\r\n                _icoDuration[0].add(1 weeks)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(15),\r\n                _icoDuration[0].add(1 weeks),\r\n                _icoDuration[0].add(2 weeks)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(10),\r\n                _icoDuration[0].add(2 weeks),\r\n                _icoDuration[0].add(3 weeks)\r\n            )\r\n        );\r\n        tiers.push(\r\n            Tier(\r\n                uint256(5),\r\n                _icoDuration[0].add(3 weeks),\r\n                _icoDuration[1]\r\n            )\r\n        );\r\n\r\n    }\r\n\r\n    function changeICODates(uint256 _tierId, uint256 _start, uint256 _end) public onlyOwner {\r\n        require(_start != 0 && _start < _end && _tierId < tiers.length);\r\n        Tier storage icoTier = tiers[_tierId];\r\n        icoTier.startTime = _start;\r\n        icoTier.endTime = _end;\r\n        if (_tierId == PRE_ICO_TIER_FIRST) {\r\n            startTime = _start;\r\n        } else if (_tierId == ICO_TIER_LAST) {\r\n            endTime = _end;\r\n        }\r\n    }\r\n\r\n    function isActive() public view returns (bool) {\r\n        if (hardCap == collectedUSD.add(preICOStats.collectedUSD)) {\r\n            return false;\r\n        }\r\n        if (soldTokens == maxTokenSupply) {\r\n            return false;\r\n        }\r\n\r\n        return withinPeriod();\r\n    }\r\n\r\n    function withinPeriod() public view returns (bool) {\r\n        return getActiveTier() != tiers.length;\r\n    }\r\n\r\n    function setPrivateSale(address _privateSale) public onlyOwner {\r\n        if (_privateSale != address(0)) {\r\n            privateSale = SellableToken(_privateSale);\r\n        }\r\n    }\r\n\r\n    function getActiveTier() public view returns (uint256) {\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            if (block.timestamp >= tiers[i].startTime && block.timestamp <= tiers[i].endTime) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return uint256(tiers.length);\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount) {\r\n        if (_value == 0) {\r\n            return (0, 0);\r\n        }\r\n        uint256 activeTier = getActiveTier();\r\n\r\n        if (activeTier == tiers.length) {\r\n            if (endTime < block.timestamp) {\r\n                return (0, 0);\r\n            }\r\n            if (startTime > block.timestamp) {\r\n                activeTier = PRE_ICO_TIER_FIRST;\r\n            }\r\n        }\r\n        usdAmount = _value.mul(etherPriceInUSD);\r\n\r\n        tokenAmount = usdAmount.div(price * (100 - tiers[activeTier].discount) / 100);\r\n\r\n        usdAmount = usdAmount.div(uint256(10) ** 18);\r\n\r\n        if (usdAmount < minPurchase) {\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 usdAmount) {\r\n        if (_tokens == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 activeTier = getActiveTier();\r\n\r\n        if (activeTier == tiers.length) {\r\n            if (endTime < block.timestamp) {\r\n                return (0, 0);\r\n            }\r\n            if (startTime > block.timestamp) {\r\n                activeTier = PRE_ICO_TIER_FIRST;\r\n            }\r\n        }\r\n\r\n        usdAmount = _tokens.mul((price * (100 - tiers[activeTier].discount) / 100));\r\n        ethers = usdAmount.div(etherPriceInUSD);\r\n\r\n        if (ethers < getMinEthersInvestment()) {\r\n            return (0, 0);\r\n        }\r\n\r\n        usdAmount = usdAmount.div(uint256(10) ** 18);\r\n    }\r\n\r\n    function getStats(uint256 _ethPerBtc) public view returns (\r\n        uint256 sold,\r\n        uint256 maxSupply,\r\n        uint256 min,\r\n        uint256 soft,\r\n        uint256 hard,\r\n        uint256 tokenPrice,\r\n        uint256 tokensPerEth,\r\n        uint256 tokensPerBtc,\r\n        uint256[27] tiersData\r\n    ) {\r\n        sold = soldTokens;\r\n        maxSupply = maxTokenSupply.sub(preICOStats.maxTokenSupply);\r\n        min = minPurchase;\r\n        soft = softCap;\r\n        hard = hardCap;\r\n        tokenPrice = price;\r\n        uint256 usd;\r\n        (tokensPerEth, usd) = calculateTokensAmount(1 ether);\r\n        (tokensPerBtc, usd) = calculateTokensAmount(_ethPerBtc);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tiersData[j++] = uint256(tiers[i].discount);\r\n            tiersData[j++] = uint256(tiers[i].startTime);\r\n            tiersData[j++] = uint256(tiers[i].endTime);\r\n        }\r\n    }\r\n\r\n    function burnUnsoldTokens() public onlyOwner {\r\n        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\r\n            token.burnUnsoldTokens(maxTokenSupply.sub(soldTokens));\r\n            maxTokenSupply = soldTokens;\r\n        }\r\n    }\r\n\r\n    function isTransferAllowed(address _from, uint256 _value) public view returns (bool status){\r\n        if (collectedUSD.add(preICOStats.collectedUSD) < softCap) {\r\n            if (token.balanceOf(_from) >= icoBalances[_from] && token.balanceOf(_from).sub(icoBalances[_from])> _value) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isRefundPossible() public view returns (bool) {\r\n        if (isActive() || block.timestamp < startTime || collectedUSD.add(preICOStats.collectedUSD) >= softCap) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function refund() public returns (bool) {\r\n        if (!isRefundPossible() || etherBalances[msg.sender] == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 burnedAmount = token.burnInvestorTokens(msg.sender, icoBalances[msg.sender]);\r\n        if (burnedAmount == 0) {\r\n            return false;\r\n        }\r\n        uint256 etherBalance = etherBalances[msg.sender];\r\n        etherBalances[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(etherBalance);\r\n\r\n        Refund(msg.sender, etherBalance, burnedAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updatePreICOMaxTokenSupply(uint256 _amount) public {\r\n        if (msg.sender == address(privateSale)) {\r\n            maxTokenSupply = maxTokenSupply.add(_amount);\r\n            preICOStats.maxTokenSupply = preICOStats.maxTokenSupply.add(_amount);\r\n        }\r\n    }\r\n\r\n    function moveUnsoldTokensToICO() public onlyOwner {\r\n        uint256 unsoldTokens = preICOStats.maxTokenSupply - preICOStats.soldTokens;\r\n        if (unsoldTokens > 0) {\r\n            preICOStats.maxTokenSupply = preICOStats.soldTokens;\r\n        }\r\n    }\r\n\r\n    function transferEthers() internal {\r\n        if (collectedUSD.add(preICOStats.collectedUSD) >= softCap) {\r\n            etherHolder.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function mintPreICO(\r\n        address _address,\r\n        uint256 _tokenAmount,\r\n        uint256 _ethAmount,\r\n        uint256 _usdAmount\r\n    ) internal returns (uint256) {\r\n        uint256 mintedAmount = token.mint(_address, _tokenAmount);\r\n\r\n        require(mintedAmount == _tokenAmount);\r\n\r\n        preICOStats.soldTokens = preICOStats.soldTokens.add(_tokenAmount);\r\n        preICOStats.collectedEthers = preICOStats.collectedEthers.add(_ethAmount);\r\n        preICOStats.collectedUSD = preICOStats.collectedUSD.add(_usdAmount);\r\n\r\n        require(preICOStats.maxTokenSupply >= preICOStats.soldTokens);\r\n        require(maxTokenSupply >= preICOStats.soldTokens);\r\n\r\n        return _tokenAmount;\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool) {\r\n        if (_value == 0 || _address == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 activeTier = getActiveTier();\r\n        if (activeTier == tiers.length) {\r\n            return false;\r\n        }\r\n\r\n        uint256 tokenAmount;\r\n        uint256 usdAmount;\r\n        uint256 mintedAmount;\r\n\r\n        (tokenAmount, usdAmount) = calculateTokensAmount(_value);\r\n        require(usdAmount > 0 && tokenAmount > 0);\r\n\r\n        if (activeTier >= PRE_ICO_TIER_FIRST && activeTier <= PRE_ICO_TIER_LAST) {\r\n            mintedAmount = mintPreICO(_address, tokenAmount, _value, usdAmount);\r\n            etherHolder.transfer(this.balance);\r\n        } else {\r\n            mintedAmount = mintInternal(_address, tokenAmount);\r\n            require(soldTokens <= maxTokenSupply.sub(preICOStats.maxTokenSupply));\r\n            collectedUSD = collectedUSD.add(usdAmount);\r\n            require(hardCap >= collectedUSD.add(preICOStats.collectedUSD) && usdAmount > 0 && mintedAmount > 0);\r\n\r\n            collectedEthers = collectedEthers.add(_value);\r\n            etherBalances[_address] = etherBalances[_address].add(_value);\r\n            icoBalances[_address] = icoBalances[_address].add(tokenAmount);\r\n            transferEthers();\r\n        }\r\n\r\n        Contribution(_address, _value, tokenAmount);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"collectedEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"name\":\"discount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveUnsoldTokensToICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"calculateEthersAmount\",\"outputs\":[{\"name\":\"ethers\",\"type\":\"uint256\"},{\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privateSale\",\"type\":\"address\"}],\"name\":\"setPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_TIER_FIRST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTH_IN_SEC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"multivestBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tierId\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"changeICODates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unsetAllowedMultivest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateTokensAmount\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedMultivests\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updatePreICOMaxTokenSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"multivestBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAllowedMultivest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"isTransferAllowed\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherHolder\",\"type\":\"address\"}],\"name\":\"setEtherHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethPerBtc\",\"type\":\"uint256\"}],\"name\":\"getStats\",\"outputs\":[{\"name\":\"sold\",\"type\":\"uint256\"},{\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"soft\",\"type\":\"uint256\"},{\"name\":\"hard\",\"type\":\"uint256\"},{\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"name\":\"tokensPerEth\",\"type\":\"uint256\"},{\"name\":\"tokensPerBtc\",\"type\":\"uint256\"},{\"name\":\"tiersData\",\"type\":\"uint256[27]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUpdateAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"string\"}],\"name\":\"setEtherInUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TIER_FIRST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinEthersInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setPurchaseLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TIER_LAST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_TIER_LAST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOStats\",\"outputs\":[{\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"name\":\"maxTokenSupply\",\"type\":\"uint256\"},{\"name\":\"collectedUSD\",\"type\":\"uint256\"},{\"name\":\"collectedEthers\",\"type\":\"uint256\"},{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefundPossible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_etherHolder\",\"type\":\"address\"},{\"name\":\"_maxPreICOTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_maxICOTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_preIcoDuration\",\"type\":\"uint256[2]\"},{\"name\":\"_icoDuration\",\"type\":\"uint256[2]\"},{\"name\":\"_etherPriceInUSD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_price\",\"type\":\"string\"}],\"name\":\"NewPriceTicker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"multivest\",\"type\":\"address\"}],\"name\":\"MultivestSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"multivest\",\"type\":\"address\"}],\"name\":\"MultivestUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af038b0290c35a3210d5cfda9f39ffceea1c1ea5000000000000000000000000214bba17605f0f5f1127bbedef7986f5b9334b080000000000000000000000000000000000000000009aa901dc01028c8f6656f100000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000060e0000000000000000000000000000000000000000000000000000000005b388a00000000000000000000000000000000000000000000000000000000005b5fa67f000000000000000000000000000000000000000000000000000000005b8a4700000000000000000000000000000000000000000000000000000000005bb1637f0000000000000000000000000000000000000000000000000000000002ee4a38","Library":"","SwarmSource":"bzzr://d99be62d33545f604a9ee4a8d8297f5fdada7a9d49a335d0c1c37fc9f53af552"}]}