{"status":"1","message":"OK","result":[{"SourceCode":"/*! wem.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\r\n\r\npragma solidity 0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    function withdrawEther(address _to, uint _value) onlyOwner public returns(bool) {\r\n        require(_to != address(0));\r\n        require(this.balance >= _value);\r\n\r\n        _to.transfer(_value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\r\n        require(_to != address(0));\r\n\r\n        return _token.call('transfer', _to, _value);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract ERC223 is ERC20 {\r\n    function transfer(address to, uint256 value, bytes data) public returns(bool);\r\n}\r\n\r\ncontract ERC223Receiving {\r\n    function tokenFallback(address from, uint256 value, bytes data) external;\r\n}\r\n\r\ncontract StandardToken is ERC223 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _value, bytes _data) private returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        bool is_contract = false;\r\n        assembly {\r\n            is_contract := not(iszero(extcodesize(_to)))\r\n        }\r\n\r\n        if(is_contract) {\r\n            ERC223Receiving receiver = ERC223Receiving(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n            //receiver.call('tokenFallback', msg.sender, _value, _data);\r\n        }\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        bytes memory empty;\r\n        return _transfer(_to, _value, empty);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns(bool) {\r\n        return _transfer(_to, _value, _data);\r\n    }\r\n    \r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        require(_to.length == _value.length);\r\n\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _value[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n    uint256 public cap;\r\n\r\n    function CappedToken(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        require(totalSupply.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n/*\r\n    Полное название токена: Wind Energy Mining\r\n    Сокращенное: WEM \r\n    Эмиссия: 34 000 000\r\n\r\n    PreICO  нет\r\n    SetTokenRate нет\r\n    Refund нет\r\n\r\n    Цена фиксирована:\r\n    1 ETH = 1000 WEM\r\n\r\n    ICO\r\n    на продажу токенов: 30 600 000\r\n    Даты проведения: 20.03.2018 - 20.05.2018\r\n\r\n    После окончания ICO нераскупленные токены передаются бенефициару\r\n\r\n    Дополнительная информация:\r\n    Бонусы - при приобретении 1000 и более токенов WEM покупатель дополнительно получает  5% от приобретенного количества бесплатно.\r\n    Обратный выкуп токенов WEM будет производиться по фиксированной цене 0,0015 ETH за один WEM, начиная с 01.03.2019 до конца 2020 года.\r\n\r\n    ---- En -----\r\n\r\n    Token name: Wind Energy Mining\r\n    Symbol: WEM \r\n    Emission: 34,000,000\r\n\r\n    PreICO - no\r\n    SetTokenRate – no\r\n    Refund - no\r\n\r\n    Fixed price:\r\n    1 ETH = 1,000 WEM\r\n\r\n    ICO\r\n    Tokens to be sold: 30,600,000\r\n    ICO period: 20.03.2018 - 20.05.2018\r\n\r\n    After the ICO, all unsold tokens will be sent to a beneficiary. \r\n\r\n    Additional information:\r\n    Bonuses – when purchasing 1,000 and more WEM tokens, a buyer additionally receives 5% from the number of tokens purchased.\r\n    WEM buyback will take place beginning on 01.03.2019 until the end of 2020, at a fixed price of 0.0015 ETH for 1 WEM.\r\n*/\r\n\r\ncontract Token is CappedToken, BurnableToken, Withdrawable {\r\n    function Token() CappedToken(34000000 * 1 ether) StandardToken(\"Wind Energy Mining\", \"WEM\", 18) public {\r\n        \r\n    }\r\n}\r\n\r\ncontract Crowdsale is Withdrawable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    Token public token;\r\n    address public beneficiary = 0x16DEfd1C28006c117845509e4daec7Bc6DC40F50;\r\n\r\n    uint public priceTokenWei = 0.001 ether;\r\n    uint public priceTokenSellWei = 0.0015 ether;\r\n    uint public tokensForSale = 30600000 * 1 ether;\r\n    \r\n    uint public purchaseStartTime = 1521147600;\r\n    uint public purchaseEndTime = 1526763600;\r\n    uint public sellStartTime = 1551387600;\r\n    uint public sellEndTime = 1609448400;\r\n\r\n    uint public tokensSold;\r\n    uint public tokensSell;\r\n    uint public collectedWei;\r\n    uint public sellWei;\r\n\r\n    bool public crowdsaleClosed = false;\r\n\r\n    event Purchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Sell(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event AccrueEther(address indexed holder, uint256 etherAmount);\r\n    event CrowdsaleClose();\r\n\r\n    function Crowdsale() public {\r\n        token = new Token();\r\n    }\r\n\r\n    function() payable public {\r\n        purchase();\r\n    }\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) whenNotPaused external {\r\n        require(msg.sender == address(token));\r\n        require(now >= sellStartTime && now < sellEndTime);\r\n\r\n        uint sum = _value.mul(priceTokenSellWei).div(1 ether);\r\n\r\n        tokensSell = tokensSell.add(_value);\r\n        sellWei = sellWei.add(sum);\r\n\r\n        _from.transfer(sum);\r\n\r\n        Sell(_from, _value, sum);\r\n    }\r\n\r\n    function purchase() whenNotPaused payable public {\r\n        require(!crowdsaleClosed);\r\n        require(now >= purchaseStartTime && now < purchaseEndTime);\r\n        require(msg.value >= 0.001 ether);\r\n        require(tokensSold < tokensForSale);\r\n\r\n        uint sum = msg.value;\r\n        uint amount = sum.mul(1 ether).div(priceTokenWei);\r\n        uint retSum = 0;\r\n        \r\n        if(tokensSold.add(amount) > tokensForSale) {\r\n            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\r\n            retSum = retAmount.mul(priceTokenWei).div(1 ether);\r\n\r\n            amount = amount.sub(retAmount);\r\n            sum = sum.sub(retSum);\r\n        }\r\n\r\n        if(amount >= 1000 ether) {\r\n            amount = amount.add(amount.div(100).mul(5));\r\n        }\r\n\r\n        tokensSold = tokensSold.add(amount);\r\n        collectedWei = collectedWei.add(sum);\r\n\r\n        beneficiary.transfer(sum);\r\n        token.mint(msg.sender, amount);\r\n\r\n        if(retSum > 0) {\r\n            msg.sender.transfer(retSum);\r\n        }\r\n\r\n        Purchase(msg.sender, amount, sum);\r\n    }\r\n\r\n    function accrueEther() payable public {\r\n        AccrueEther(msg.sender, msg.value);\r\n    }\r\n\r\n    function closeCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n        \r\n        token.mint(beneficiary, token.cap() - token.totalSupply());\r\n        token.finishMinting();\r\n        token.transferOwnership(beneficiary);\r\n\r\n        crowdsaleClosed = true;\r\n\r\n        CrowdsaleClose();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"priceTokenWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTokenSellWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"AccrueEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd4c6e918bdb41dc9affdde7a45f75376b495ab5d2a8bfad813e603df19c930a"}]}