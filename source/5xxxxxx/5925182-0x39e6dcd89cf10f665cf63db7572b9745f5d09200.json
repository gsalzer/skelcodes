{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/* ==================================================================== */\r\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\r\n/* \r\n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \r\n/*  \r\n/* authors rainy@livestar.com/fanny.zheng@livestar.com\r\n/*                 \r\n/* ==================================================================== */\r\ninterface CardsInterface {\r\n  function getJadeProduction(address player) external constant returns (uint256);\r\n  function getOwnedCount(address player, uint256 cardId) external view returns (uint256);\r\n  function getUpgradesOwned(address player, uint256 upgradeId) external view returns (uint256);\r\n  function getUintCoinProduction(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitCoinProductionMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitCoinProductionIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitAttackIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitAttackMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitDefenseIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitDefenseMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitJadeStealingIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitJadeStealingMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitsProduction(address player, uint256 cardId, uint256 amount) external constant returns (uint256);\r\n  function getTotalEtherPool(uint8 itype) external view returns (uint256);\r\n  function coinBalanceOf(address player,uint8 itype) external constant returns(uint256);\r\n  function balanceOf(address player) public constant returns(uint256);\r\n   function getPlayersBattleStats(address player) public constant returns (\r\n    uint256 attackingPower, \r\n    uint256 defendingPower, \r\n    uint256 stealingPower,\r\n    uint256 battlePower);\r\n  function getTotalJadeProduction() external view returns (uint256);\r\n  function getNextSnapshotTime() external view returns(uint256);\r\n}\r\n\r\ninterface GameConfigInterface {\r\n  function productionCardIdRange() external constant returns (uint256, uint256);\r\n  function battleCardIdRange() external constant returns (uint256, uint256);\r\n  function upgradeIdRange() external constant returns (uint256, uint256); \r\n  function unitCoinProduction(uint256 cardId) external constant returns (uint256);\r\n  function unitAttack(uint256 cardId) external constant returns (uint256);\r\n  function unitDefense(uint256 cardId) external constant returns (uint256); \r\n  function unitStealingCapacity(uint256 cardId) external constant returns (uint256);\r\n}\r\n\r\ncontract CardsRead {\r\n  using SafeMath for SafeMath;\r\n\r\n  CardsInterface public cards;\r\n  GameConfigInterface public schema;\r\n  address owner;\r\n  \r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function CardsRead() public {\r\n    owner = msg.sender;\r\n  }\r\n    //setting configuration\r\n  function setConfigAddress(address _address) external onlyOwner {\r\n    schema = GameConfigInterface(_address);\r\n  }\r\n\r\n     //setting configuration\r\n  function setCardsAddress(address _address) external onlyOwner {\r\n    cards = CardsInterface(_address);\r\n  }\r\n\r\n  // get normal cardlist;\r\n  function getNormalCardList(address _owner) external view returns(uint256[],uint256[]){\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.productionCardIdRange(); \r\n    uint256 len = SafeMath.add(SafeMath.sub(endId,startId),1);\r\n    uint256[] memory itemId = new uint256[](len);\r\n    uint256[] memory itemNumber = new uint256[](len);\r\n\r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      itemId[i] = startId;\r\n      itemNumber[i] = cards.getOwnedCount(_owner,startId);\r\n      i++;\r\n      startId++;\r\n      }   \r\n    return (itemId, itemNumber);\r\n  }\r\n\r\n  // get normal cardlist;\r\n  function getBattleCardList(address _owner) external view returns(uint256[],uint256[]){\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.battleCardIdRange();\r\n    uint256 len = SafeMath.add(SafeMath.sub(endId,startId),1);\r\n    uint256[] memory itemId = new uint256[](len);\r\n    uint256[] memory itemNumber = new uint256[](len);\r\n\r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      itemId[i] = startId;\r\n      itemNumber[i] = cards.getOwnedCount(_owner,startId);\r\n      i++;\r\n      startId++;\r\n      }   \r\n    return (itemId, itemNumber);\r\n  }\r\n\r\n  // get upgrade cardlist;\r\n  function getUpgradeCardList(address _owner) external view returns(uint256[],uint256[]){\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId, endId) = schema.upgradeIdRange();\r\n    uint256 len = SafeMath.add(SafeMath.sub(endId,startId),1);\r\n    uint256[] memory itemId = new uint256[](len);\r\n    uint256[] memory itemNumber = new uint256[](len);\r\n\r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      itemId[i] = startId;\r\n      itemNumber[i] = cards.getUpgradesOwned(_owner,startId);\r\n      i++;\r\n      startId++;\r\n      }   \r\n    return (itemId, itemNumber);\r\n  }\r\n\r\n    //get up value\r\n  function getUpgradeValue(address player, uint256 upgradeClass, uint256 unitId, uint256 upgradeValue) external view returns (\r\n    uint256 productionGain ,uint256 preValue,uint256 afterValue) {\r\n    if (cards.getOwnedCount(player,unitId) == 0) {\r\n      if (upgradeClass == 0) {\r\n        productionGain = upgradeValue * 10;\r\n        preValue = schema.unitCoinProduction(unitId);\r\n        afterValue   = preValue + productionGain;\r\n      } else if (upgradeClass == 1){\r\n        productionGain = upgradeValue * schema.unitCoinProduction(unitId);\r\n        preValue = schema.unitCoinProduction(unitId);\r\n        afterValue   = preValue + productionGain;\r\n      } \r\n    }else { // >= 1\r\n      if (upgradeClass == 0) {\r\n        productionGain = (cards.getOwnedCount(player,unitId) * upgradeValue * (10 + cards.getUnitCoinProductionMultiplier(player,unitId)));\r\n        preValue = cards.getUintCoinProduction(player,unitId);\r\n        afterValue   = preValue + productionGain;\r\n     } else if (upgradeClass == 1) {\r\n        productionGain = (cards.getOwnedCount(player,unitId) * upgradeValue * (schema.unitCoinProduction(unitId) + cards.getUnitCoinProductionIncreases(player,unitId)));\r\n        preValue = cards.getUintCoinProduction(player,unitId);\r\n        afterValue   = preValue + productionGain;\r\n     }\r\n    }\r\n  }\r\n\r\n // To display on website\r\n  function getGameInfo() external view returns (uint256,  uint256, uint256, uint256, uint256, uint256, uint256[], uint256[], uint256[]){  \r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.productionCardIdRange();\r\n    uint256 len = SafeMath.add(SafeMath.sub(endId,startId),1); \r\n    uint256[] memory units = new uint256[](len);\r\n        \r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      units[i] = cards.getOwnedCount(msg.sender,startId);\r\n      i++;\r\n      startId++;\r\n    }\r\n      \r\n    (startId,endId) = schema.battleCardIdRange();\r\n    len = SafeMath.add(SafeMath.sub(endId,startId),1);\r\n    uint256[] memory battles = new uint256[](len);\r\n    \r\n    i=0; //reset for battle cards\r\n    while (startId <= endId) {\r\n      battles[i] = cards.getOwnedCount(msg.sender,startId);\r\n      i++;\r\n      startId++;\r\n    }\r\n        \r\n    // Reset for upgrades\r\n    i = 0;\r\n    (startId, endId) = schema.upgradeIdRange();\r\n    len = SafeMath.add(SafeMath.sub(endId,startId),1);\r\n    uint256[] memory upgrades = new uint256[](len);\r\n\r\n    while (startId <= endId) {\r\n      upgrades[i] = cards.getUpgradesOwned(msg.sender,startId);\r\n      i++;\r\n      startId++;\r\n    }\r\n    return (\r\n    cards.getTotalEtherPool(1), \r\n    cards.getJadeProduction(msg.sender),\r\n    cards.balanceOf(msg.sender), \r\n    cards.coinBalanceOf(msg.sender,1),\r\n    cards.getTotalJadeProduction(),\r\n    cards.getNextSnapshotTime(), \r\n    units, battles,upgrades\r\n    );\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBattleCardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCardsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"upgradeClass\",\"type\":\"uint256\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"upgradeValue\",\"type\":\"uint256\"}],\"name\":\"getUpgradeValue\",\"outputs\":[{\"name\":\"productionGain\",\"type\":\"uint256\"},{\"name\":\"preValue\",\"type\":\"uint256\"},{\"name\":\"afterValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNormalCardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUpgradeCardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"schema\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CardsRead","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://101090fa448cc6604aa33052a459ba8c6b315edb6642ae2f30e759d80b5b01e1"}]}