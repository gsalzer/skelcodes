{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    function name() public pure returns (string _name);\r\n    function symbol() public pure returns (string _symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    // function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract CryptoChallenge is ERC721{\r\n  using SafeMath for uint256;\r\n\r\n  event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  address private owner;\r\n  mapping (address => bool) private admins;\r\n\r\n  uint256 private increaseLimit1 = 0.02 ether;\r\n  uint256 private increaseLimit2 = 0.5 ether;\r\n  uint256 private increaseLimit3 = 2.0 ether;\r\n  uint256 private increaseLimit4 = 5.0 ether;\r\n\r\n  uint256[] private listedTokens;\r\n  mapping (uint256 => uint256) private bet1OfToken;\r\n  mapping (uint256 => uint256) private bet2OfToken;\r\n  mapping (uint256 => uint256) private bet1deltaOfToken;\r\n  mapping (uint256 => uint256) private bet2deltaOfToken;  \r\n  mapping (uint256 => address) private ownerOfToken;\r\n  mapping (uint256 => address) private owner1OfToken;\r\n  mapping (uint256 => address) private owner2OfToken;\r\n  mapping (uint256 => address) private witnessOfToken;  \r\n  mapping (uint256 => address) private p1OfToken;\r\n  mapping (uint256 => address) private p2OfToken;    \r\n  mapping (uint256 => uint256) private price1OfToken;\r\n  mapping (uint256 => uint256) private price2OfToken;  \r\n  mapping (uint256 => uint256) private free1OfToken;\r\n  mapping (uint256 => uint256) private free2OfToken;\r\n  mapping (uint256 => address) private approvedOfToken;\r\n  mapping (uint256 => uint256) private indexOfId;\r\n  \r\n  function CryptoChallenge () public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;    \r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier onlyWitness(uint256 _tokenId) {\r\n    require(msg.sender == witnessOfToken[_tokenId]);\r\n    _;\r\n  }  \r\n\r\n  /* Owner */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n\r\n  /* Withdraw */\r\n  /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract by `buy`. User funds are immediately sent to the old\r\n    owner in `buy`, no user funds are left in the contract.\r\n  */\r\n  function withdrawAll () onlyAdmins() public {\r\n   msg.sender.transfer(this.balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyAdmins() public {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  /* Buying */\r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(200).div(95);\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(135).div(96);\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(125).div(97);\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(117).div(97);\r\n    } else {\r\n      return _price.mul(115).div(98);\r\n    }\r\n  }\r\n\r\n  function calculateDevCut (uint256 _price) public pure returns (uint256 _devCut) {\r\n     return _price.div(20);\r\n  }\r\n\r\n  /*\r\n     Buy a country directly from the contract for the calculated price\r\n     which ensures that the owner gets a profit.  All countries that\r\n     have been listed can be bought by this method. User funds are sent\r\n     directly to the previous owner and are never stored in the contract.\r\n  */\r\n  function buy1 (uint256 _tokenId) payable public {\r\n    require(price1Of(_tokenId) > 0);\r\n    require(owner1Of(_tokenId) != address(0));\r\n    require(msg.value >= price1Of(_tokenId));\r\n    require(owner1Of(_tokenId) != msg.sender);\r\n    require(!isContract(msg.sender));\r\n    require(msg.sender != address(0));\r\n    require(now >= free1OfToken[_tokenId]);\r\n    require(now <= free2OfToken[_tokenId]);\r\n\r\n    address oldOwner = owner1Of(_tokenId);\r\n    address newOwner = msg.sender;\r\n    uint256 price = price1Of(_tokenId);\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    price1OfToken[_tokenId] = nextPrice1Of(_tokenId);\r\n\r\n    uint256 devCut = calculateDevCut(price);\r\n    oldOwner.transfer(price.sub(devCut));\r\n\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n\r\n    owner1OfToken[_tokenId] = newOwner;\r\n\r\n  }\r\n\r\n  function buy2 (uint256 _tokenId) payable public {\r\n    require(price2Of(_tokenId) > 0);\r\n    require(owner2Of(_tokenId) != address(0));\r\n    require(msg.value >= price2Of(_tokenId));\r\n    require(owner2Of(_tokenId) != msg.sender);\r\n    require(!isContract(msg.sender));\r\n    require(msg.sender != address(0));\r\n    require(now >= free1OfToken[_tokenId]);\r\n    require(now <= free2OfToken[_tokenId]);\r\n\r\n    address oldOwner = owner2Of(_tokenId);\r\n    address newOwner = msg.sender;\r\n    uint256 price = price2Of(_tokenId);\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    price2OfToken[_tokenId] = nextPrice2Of(_tokenId);\r\n\r\n    uint256 devCut = calculateDevCut(price);\r\n    oldOwner.transfer(price.sub(devCut));\r\n\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n\r\n    owner2OfToken[_tokenId] = newOwner;\r\n  }  \r\n\r\n  /* ERC721 */\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"betsignature\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"BET\";\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return listedTokens.length;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < listedTokens.length; i++) {\r\n      if (ownerOf(listedTokens[i]) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n    return ownerOfToken[_tokenId];\r\n  }\r\n\r\n  function owner1Of (uint256 _tokenId) public view returns (address _owner) {\r\n    return owner1OfToken[_tokenId];\r\n  }\r\n\r\n  function owner2Of (uint256 _tokenId) public view returns (address _owner) {\r\n    return owner2OfToken[_tokenId];\r\n  }\r\n\r\n  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\r\n    uint256[] memory Tokens = new uint256[](balanceOf(_owner));\r\n\r\n    uint256 TokenCounter = 0;\r\n    for (uint256 i = 0; i < listedTokens.length; i++) {\r\n      if (ownerOf(listedTokens[i]) == _owner) {\r\n        Tokens[TokenCounter] = listedTokens[i];\r\n        TokenCounter += 1;\r\n      }\r\n    }\r\n\r\n    return Tokens;\r\n  }\r\n\r\n  function tokenExists (uint256 _tokenId) public pure returns (bool _exists) {\r\n    return _tokenId == _tokenId;\r\n  }\r\n\r\n  function approvedFor(uint256 _tokenId) public view returns (address _approved) {\r\n    return approvedOfToken[_tokenId];\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    require(msg.sender != _to);\r\n    require(tokenExists(_tokenId));\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n\r\n    if (_to == 0) {\r\n      if (approvedOfToken[_tokenId] != 0) {\r\n        delete approvedOfToken[_tokenId];\r\n        Approval(msg.sender, 0, _tokenId);\r\n      }\r\n    } else {\r\n      approvedOfToken[_tokenId] = _to;\r\n      Approval(msg.sender, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /* Transferring a country to another owner will entitle the new owner the profits from `buy` */\r\n  function transfer(address _to, uint256 _tokenId) public {\r\n    require(msg.sender == ownerOf(_tokenId));\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(approvedFor(_tokenId) == msg.sender);\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(tokenExists(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    ownerOfToken[_tokenId] = _to;\r\n    approvedOfToken[_tokenId] = 0;\r\n\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /* Read */\r\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n    return admins[_admin];\r\n  }\r\n\r\n  function price1Of (uint256 _tokenId) public view returns (uint256 _price) {\r\n    return price1OfToken[_tokenId];\r\n  }\r\n\r\n  function price2Of (uint256 _tokenId) public view returns (uint256 _price) {\r\n    return price2OfToken[_tokenId];\r\n  }  \r\n\r\n  function free1Of (uint256 _tokenId) public view returns (uint256 _free1) {\r\n    return free1OfToken[_tokenId];\r\n  }\r\n  \r\n  function free2Of (uint256 _tokenId) public view returns (uint256 _free2) {\r\n      return free2OfToken[_tokenId];\r\n  }\r\n\r\n  function nextPrice1Of (uint256 _tokenId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(price1Of(_tokenId));\r\n  }\r\n\r\n  function nextPrice2Of (uint256 _tokenId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(price2Of(_tokenId));\r\n  }  \r\n\r\n  function witnessOf (uint256 _tokenId) public view returns (address _witness) {\r\n    return witnessOfToken[_tokenId];\r\n  }\r\n\r\n  function allOf (uint256 _tokenId) external view returns (address _owner1, address _owner2, uint256 _price1, uint256 _price2, uint256 _free1, uint256 _free2, address _witness) {\r\n    return (owner1Of(_tokenId), owner2Of(_tokenId), price1Of(_tokenId), price2Of(_tokenId), free1Of(_tokenId), free2Of(_tokenId), witnessOf(_tokenId));\r\n  }\r\n  \r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n  \r\n  function judge(uint256 _tokenId, bool _isP1Win) onlyWitness(_tokenId) public {\r\n    require(price2OfToken[_tokenId] != 0);\r\n    require(now > free2OfToken[_tokenId]);\r\n    uint reward = bet1OfToken[_tokenId] + bet2OfToken[_tokenId] + calculateDevCut(price1OfToken[_tokenId] + price2OfToken[_tokenId]);\r\n    reward -= calculateDevCut(reward);\r\n    if (_isP1Win == true) {\r\n      reward = reward.div(bet1OfToken[_tokenId] + price1OfToken[_tokenId]);\r\n      p1OfToken[_tokenId].transfer(reward.mul(bet1OfToken[_tokenId]));\r\n      owner1OfToken[_tokenId].transfer(reward.mul(price1OfToken[_tokenId]));\r\n    } else {\r\n      reward = reward.div(bet2OfToken[_tokenId] + price2OfToken[_tokenId]);\r\n      p2OfToken[_tokenId].transfer(reward.mul(bet2OfToken[_tokenId]));\r\n      owner2OfToken[_tokenId].transfer(reward.mul(price2OfToken[_tokenId]));\r\n    }\r\n  }\r\n\r\n  function accept1(uint256 _tokenId, uint256 _price1) public payable {\r\n    require(msg.sender == p1OfToken[_tokenId]);\r\n    require(msg.value >= bet1OfToken[_tokenId]);\r\n    require(_price1 > 0);\r\n    price2OfToken[_tokenId] = _price1;\r\n  }\r\n\r\n  function accept2(uint256 _tokenId) public payable {\r\n    require(msg.sender == p2OfToken[_tokenId]);\r\n    require(msg.value >= bet2deltaOfToken[_tokenId]);\r\n    bet2OfToken[_tokenId] += bet2deltaOfToken[_tokenId];\r\n    bet1deltaOfToken[_tokenId] = bet2deltaOfToken[_tokenId] = 0;\r\n  }\r\n\r\n  function cancel1(uint256 _tokenId) public {\r\n    require(msg.sender == p1OfToken[_tokenId]);\r\n    require(price2OfToken[_tokenId] == 0);\r\n    msg.sender.transfer(bet1OfToken[_tokenId]);\r\n  }\r\n  \r\n  function cancel2(uint256 _tokenId) public {\r\n    require(msg.sender == p1OfToken[_tokenId]);\r\n    require(price2OfToken[_tokenId] == 0);\r\n    msg.sender.transfer(bet1deltaOfToken[_tokenId]);\r\n    bet1deltaOfToken[_tokenId] = 0; \r\n  }\r\n  \r\n  function issueToken(address p2, address witness, uint256 price1, uint256 frozen1, uint256 frozen2) payable public {\r\n    require(msg.value >= 1000);\r\n    require(witness != msg.sender);\r\n    require(witness != p2);\r\n    require(price1 > 0);\r\n    uint i = listedTokens.length;\r\n    bet1OfToken[i] = msg.value;\r\n    witnessOfToken[i] = witness;\r\n    p1OfToken[i] = owner1OfToken[i] = msg.sender;  \r\n    p2OfToken[i] = owner2OfToken[i] = p2;    \r\n    price1OfToken[i] = price1;\r\n    free1OfToken[i] = now + frozen1;\r\n    free2OfToken[i] = now + frozen1 + frozen2;\r\n    listedTokens.push(i);\r\n  }\r\n\r\n\r\n  function addBet(uint256 _tokenId, uint256 _bet2delta) public payable {\r\n    require(msg.sender == p1OfToken[_tokenId]);\r\n    bet1deltaOfToken[_tokenId] = msg.value;\r\n    bet2deltaOfToken[_tokenId] = _bet2delta;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPrice1Of\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p2\",\"type\":\"address\"},{\"name\":\"witness\",\"type\":\"address\"},{\"name\":\"price1\",\"type\":\"uint256\"},{\"name\":\"frozen1\",\"type\":\"uint256\"},{\"name\":\"frozen2\",\"type\":\"uint256\"}],\"name\":\"issueToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPrice2Of\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"owner1Of\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_bet2delta\",\"type\":\"uint256\"}],\"name\":\"addBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_owner1\",\"type\":\"address\"},{\"name\":\"_owner2\",\"type\":\"address\"},{\"name\":\"_price1\",\"type\":\"uint256\"},{\"name\":\"_price2\",\"type\":\"uint256\"},{\"name\":\"_free1\",\"type\":\"uint256\"},{\"name\":\"_free2\",\"type\":\"uint256\"},{\"name\":\"_witness\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_isP1Win\",\"type\":\"bool\"}],\"name\":\"judge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"owner2Of\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price1\",\"type\":\"uint256\"}],\"name\":\"accept1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancel1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"price2Of\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"accept2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"free1Of\",\"outputs\":[{\"name\":\"_free1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"witnessOf\",\"outputs\":[{\"name\":\"_witness\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancel2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"free2Of\",\"outputs\":[{\"name\":\"_free2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"price1Of\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoChallenge","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bbb281af595594482fb736be4a6b0129a200ed7fb409eb550b936591554660a9"}]}