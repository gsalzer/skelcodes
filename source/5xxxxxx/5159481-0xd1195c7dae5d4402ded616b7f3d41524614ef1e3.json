{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/** * @dev Math operations with safety checks that throw on error */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**  * @dev Integer division of two numbers, truncating the quotient.  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  \r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }                          /*^    ^*/\r\n} /* k to the N to the 0 |  () (..) () \\\r\n  .' kn0 thy token v 1.0 |  __  rbl  __ }\r\n.',,,,,,,,,,,,,,,,,,_____|_(\\\\\\-----\\\\*/ contract kn0Token is StandardToken {\r\n  string public name; // solium-disable-line uppercase\r\n  string public symbol; // solium-disable-line uppercase\r\n  uint8 public decimals; // solium-disable-line uppercase\r\n  string public constant version = \"k1.05\";\r\n  uint256 public aDropedThisWeek;\r\n  uint256 lastWeek;\r\n  uint256 decimate;\r\n  uint256 weekly_limit;\r\n  uint256 air_drop;\r\n  mapping(address => uint256) airdroped;\r\n  address control;\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  uint256 public Market; // @ current frac\r\n  uint256 public AvailableTokenPool; // all of contracts initial tokens on creation\r\n  \r\n  /**\r\n   * @dev Throws if called by any account other than the owner, control.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner || msg.sender == control);\r\n    _;\r\n  }\r\n  modifier onlyControl() {\r\n    require(msg.sender == control);\r\n    _;\r\n  }\r\n  \r\n  /*** @param newOwner  The address to transfer ownership to\r\n    owner tokens go with owner, airdrops always from owner pool */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n\tOwnershipTransferred(owner, newOwner);\r\n\tif(owner != newOwner) {\r\n\t  uint256 t = balances[owner] / 10;\r\n\t  balances[newOwner] += balances[owner] - t;\r\n\t  balances[owner] = t;\r\n    }\t\r\n    owner = newOwner;\r\n\tupdate();\r\n  } /*** @param newControl  The address to transfer control to.   */\r\n  function transferControl(address newControl) public onlyControl {\r\n    require(newControl != address(0) && newControl != address(this));\r\n\tcontrol = newControl;\r\n  }\r\n  /* init contract itself as owner of all its tokens, all tokens set to air drop, and always comes form owner's bucket */\r\n  function kn0Token(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public { // 0xebbebae0fe\r\n\tcontrol = msg.sender;\r\n\towner = address(this);\r\n\tOwnershipTransferred(address(0), owner);\r\n\tsymbol = _tokenSymbol;   \r\n\tname = _tokenName;                                   \r\n    decimals = _decimalUnits;                            \r\n\ttotalSupply_ = _initialAmount;\r\n\tbalances[owner] = totalSupply_;\r\n\tTransfer(0x0, owner, totalSupply_);\r\n\tdecimate = (10 ** uint256(decimals));\r\n\tweekly_limit = 100000 * decimate;\r\n\tair_drop = 1018 * decimate;\r\n\tif(((totalSupply_  *2)/decimate) > 1 ether) coef = 1;\r\n\telse coef = 1 ether / ((totalSupply_  *2)/decimate);\r\n\tupdate();\r\n  } /** rescue lost erc20 kin **/\r\n  function transfererc20(address tokenAddress, address _to, uint256 _value) external onlyControl returns (bool) {\r\n    require(_to != address(0));\r\n\treturn ERC20(tokenAddress).transfer(_to, _value);\r\n  } /** kn0more **/\r\n  function destroy() onlyControl external {\r\n    require(owner != address(this)); selfdestruct(owner);\r\n  }  \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n\tupdate();\r\n    return true;\r\n  }  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\t// if no balance, see if eligible for airdrop instead\r\n    if(balances[msg.sender] == 0) { \r\n      uint256 qty = availableAirdrop(msg.sender);\r\n\t  if(qty > 0) {  // qty is validated qty against balances in airdrop\r\n\t    balances[owner] -= qty;\r\n\t    balances[msg.sender] += qty;\r\n\t\tTransfer(owner, _to, _value);\r\n\t\tupdate();\r\n\t\tairdroped[msg.sender] = qty;\r\n\t\taDropedThisWeek += qty;\r\n\t\t// airdrops don't trigger ownership change\r\n\t\treturn true;\r\n\t  }\t\r\n\t  revert(); // no go\r\n\t}\r\n  \r\n    // existing balance\r\n    if(balances[msg.sender] < _value) revert();\r\n\tif(balances[_to] + _value < balances[_to]) revert();\r\n\t\r\n    balances[_to] += _value;\r\n\tbalances[msg.sender] -= _value;\r\n    Transfer(msg.sender, _to, _value);\r\n\tupdate();\r\n\treturn true;\r\n  }  \r\n  function balanceOf(address who) public view returns (uint256 balance) {\r\n    balance = balances[who];\r\n\tif(balance == 0) \r\n\t  return availableAirdrop(who);\r\n\t\r\n    return balance;\r\n  }  \r\n  /*  * check the faucet  */  \r\n  function availableAirdrop(address who) internal constant returns (uint256) {\r\n    if(balances[owner] == 0) return 0;\r\n\tif(airdroped[who] > 0) return 0; // already used airdrop\r\n\t\r\n\tif (thisweek() > lastWeek || aDropedThisWeek < weekly_limit) {\r\n\t  if(balances[owner] > air_drop) return air_drop;\r\n\t  else return balances[owner];\r\n\t}\r\n\treturn 0;\r\n  }  function thisweek() internal view returns (uint256) {\r\n    return now / 1 weeks;\r\n  }  function getAirDropedToday() public view returns (uint256) {\r\n    if (thisweek() > lastWeek) return 0;\r\n\telse return aDropedThisWeek;\r\n  }  \r\n  function transferBalance(address upContract) external onlyControl {\r\n    require(upContract != address(0) && upContract.send(this.balance));\r\n  }\r\n  function () payable public {\r\n    uint256 qty = calc(msg.value);\r\n\tif(qty > 0) {\r\n\t  balances[msg.sender] += qty;\r\n\t  balances[owner] -= qty;\r\n\t  Transfer(owner, msg.sender, qty);\r\n\t  update();\r\n\t} else revert();\r\n  } \r\n  uint256 coef;\r\n  function update() internal {\r\n    if(balances[owner] != AvailableTokenPool) {\r\n\t  Market = (((totalSupply_ - balances[owner]) ** 2) / coef);\r\n\t  AvailableTokenPool = balances[owner];\r\n\t}\r\n  }\r\n  function calc(uint256 value) public view returns (uint256) {\r\n    if(balances[owner] == 0 || value < 15000000000000000) return 0;\r\n\tuint256 x = (coef * (value + Market)); \r\n\tuint256 qty = x;\r\n\tuint256 z = (x + 1) / 2;\r\n    while (z < qty) {\r\n        qty = z;\r\n        z = (x / z + z) / 2;\r\n    } /* add a frac of airdrop with each */ \r\n\tuint256 worth = (qty - (totalSupply_ - balances[owner])) + (air_drop * (1 + (value / 12500000000000000)));\r\n\tif(worth > balances[owner]) return balances[owner];\r\n\treturn worth;\r\n  }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AvailableTokenPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAirDropedToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Market\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"upContract\",\"type\":\"address\"}],\"name\":\"transferBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newControl\",\"type\":\"address\"}],\"name\":\"transferControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aDropedThisWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfererc20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"kn0Token","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000082bd67afbc0000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000086b6e30546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b4e300000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e6cd765c098adfc0ce805b5efdb17b357a1b770a487efa3cfe8adb89296b8aed"}]}