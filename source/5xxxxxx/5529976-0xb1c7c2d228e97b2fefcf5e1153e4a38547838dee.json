{"status":"1","message":"OK","result":[{"SourceCode":"{\"General.sol\":{\"content\":\"// The MIT License (MIT)\\n\\n// Copyright (c) 2016 Smart Contract Solutions, Inc.\\n\\n// Permission is hereby granted, free of charge, to any person obtaining\\n// a copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to\\n// the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n    * account.\\n    */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Cannot transfer to address 0\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n    event DidPause();\\n    event DidUnpause();\\n\\n    bool public paused = true;\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is not paused.\\n    */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Contract is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to make a function callable only when the contract is paused.\\n    */\\n    modifier whenPaused() {\\n        require(paused, \\\"Contract is not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev called by the owner to pause, triggers stopped state\\n    */\\n    function pause() public onlyOwner whenNotPaused {\\n        paused = true;\\n        emit DidPause();\\n    }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() public onlyOwner whenPaused {\\n        paused = false;\\n        emit DidUnpause();\\n    }\\n}\\n\"},\"Presale.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./General.sol\\\";\\n\\n\\ncontract Presale is Ownable, Pausable {\\n\\n    uint256 public constant MAX_PACKAGES = 5000;\\n\\n    uint256 public constant PRICE_START = 0.2 ether;\\n    uint256 public constant PRICE_INCREMENT = 0.00008 ether;\\n    uint256 public constant PRICE_MAX = PRICE_START + MAX_PACKAGES * PRICE_INCREMENT;\\n    // price(n) = 0.2 + n * 0.00008; (price(5000) = 0.6 ether)\\n\\n    uint256 public remainingPackages = MAX_PACKAGES;\\n    uint256 public constant PACKAGES_MAX_PER_USER = 25;\\n\\n    event SoldOutOfPackages();\\n\\n    event Purchased(address buyer, uint256 pkgsBought, uint256 spend);\\n\\n    mapping (address =\\u003e uint) private packagesOwnedByUser;\\n\\n    uint256 public constant PACKAGES_GIFTS = 100;\\n    mapping (address =\\u003e uint) public giftPackagesForUser;\\n\\n    constructor() public {\\n        //set aside packages for gift packages\\n        packagesOwnedByUser[owner] = PACKAGES_GIFTS;\\n        remainingPackages -= PACKAGES_GIFTS;\\n    }\\n\\n    // Convenient purchase of as many packages as possible with given ether (excess refunded)\\n    function () public payable whenNotPaused {\\n        purchasePackages();\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    // For people who have been gifted packages from the owner\\n    function claimPackages() external {\\n        uint256 claimable = giftPackagesForUser[msg.sender];\\n        require(claimable \\u003e 0, \\\"No packages to claim\\\");\\n        giftPackagesForUser[msg.sender] = 0;\\n        packagesOwnedByUser[msg.sender] += claimable;\\n    }\\n\\n    // Owner returning gift packages to supply\\n    function returnGiftPackages(uint256 packagesToReturn) external onlyOwner {\\n        require(packagesToReturn \\u003e 0, \\\"No packages to return\\\");\\n        require(packagesToReturn \\u003c= packagesOwnedByUser[msg.sender], \\\"Can\\u0027\\u0027t return more than you have\\\");\\n        packagesOwnedByUser[msg.sender] -= packagesToReturn;\\n        remainingPackages += packagesToReturn;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n    // Return how many packages are owned by given user\\n    function packagesOwned(address _user) public view returns (uint256) {\\n        require(_user != address(0), \\\"NA: Packages owned by address(0)\\\");\\n        return packagesOwnedByUser[_user];\\n    }\\n\\n    // Purchase as many as possible with given ether (excess refunded)\\n    function purchasePackages() public payable whenNotPaused {\\n        purchasePackagesUpto(remainingPackages);\\n    }\\n\\n    // execute function only if packages can be bought\\n    modifier presaleOpen() {\\n        if (remainingPackages == 0) {\\n            emit SoldOutOfPackages();\\n        }\\n        require(remainingPackages \\u003e 0, \\\"No remainingPackages\\\");\\n        _;\\n    }\\n\\n    //Purchase upto given number of packages, fail if not enough eth\\n    function purchasePackagesUpto(uint256 _maxPkgs) public presaleOpen payable whenNotPaused {\\n        // Can\\u0027t request more than the max\\n        if (_maxPkgs \\u003e PACKAGES_MAX_PER_USER) {\\n            _maxPkgs = PACKAGES_MAX_PER_USER;\\n        }\\n\\n        // How much does the next package cost?\\n        uint256 unitPrice = nextPrice();\\n\\n        // How many can be bought at this price?\\n        uint256 pkgs = msg.value / unitPrice;\\n\\n        // Don\\u0027t buy more than you want\\n        if (pkgs \\u003e _maxPkgs) {\\n            pkgs = _maxPkgs;\\n        }\\n\\n        // Don\\u0027t buy more than you can have\\n        require(packagesOwnedByUser[msg.sender] \\u003c= PACKAGES_MAX_PER_USER, \\\"Package limit exceeded\\\");\\n        if (pkgs + packagesOwnedByUser[msg.sender] \\u003e PACKAGES_MAX_PER_USER) {\\n            pkgs = PACKAGES_MAX_PER_USER - packagesOwnedByUser[msg.sender];\\n        }\\n\\n        // Still be buying something\\n        require(pkgs \\u003e 0, \\\"Unable to purchase packages with given ether\\\");\\n\\n        // Don\\u0027t buy more than there is left\\n        if (pkgs \\u003e= remainingPackages) {\\n            pkgs = remainingPackages;\\n            emit LuckyLast(msg.sender); // ;)\\n        }\\n        purchase(pkgs, pkgs * unitPrice);\\n    }\\n\\n    event LuckyLast(address);\\n\\n    // Price increases linearly as packages are sold\\n    function nextPrice() public view returns (uint256) {\\n        //y = mx + b where x = packagesSold (ie, max - remaining)\\n        return PRICE_INCREMENT * (MAX_PACKAGES-remainingPackages) + PRICE_START;\\n    }\\n\\n    // OWNER FUNCTIONS\\n    // Only owner can give 1 gift package per user in given addresses\\n    function giveGiftPackagePerUser(address[] _users) public onlyOwner {\\n        for (uint256 i = 0; i \\u003c _users.length; i++) {\\n            giveGiftPackages(1, _users[i]);\\n        }\\n    }\\n\\n    // Only owner can give gift packages set aside for this purpose\\n    function giveGiftPackages(uint256 _amt, address _user) public onlyOwner {\\n        require(packagesOwnedByUser[msg.sender] \\u003e= _amt, \\\"Not enough packages owned to gift\\\");\\n        packagesOwnedByUser[msg.sender] -= _amt;\\n        giftPackagesForUser[_user] += _amt;\\n    }\\n\\n    // Overrides ownership transfer to include package movement\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), \\\"Unable to transfer to address(0)\\\");\\n        giveGiftPackages(packagesOwnedByUser[owner], _newOwner);\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n    // Transfer amount to owner\\n    function withdraw(uint256 _amt) public onlyOwner {\\n        owner.transfer(_amt);\\n    }\\n\\n\\n    //INTERNAL/PRIVATE FUNCTIONS\\n    // Execute a valid purchase of packages, refund excess.\\n    function purchase(uint256 _pkgs, uint256 _totalCost) internal {\\n        // Double-check amount paid\\n        require(msg.value \\u003e= _totalCost, \\\"Not enough ether for purchase\\\");\\n\\n        remainingPackages -= _pkgs;\\n        packagesOwnedByUser[msg.sender] += _pkgs;\\n\\n        // Refund any overpayment\\n        uint256 refund = msg.value - _totalCost;\\n        if (refund \\u003e 0) {\\n            msg.sender.transfer(refund);\\n        }\\n        emit Purchased(msg.sender, _pkgs, _totalCost);\\n    }\\n\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_maxPkgs\",\"type\":\"uint256\"}],\"name\":\"purchasePackagesUpto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PACKAGES_GIFTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_INCREMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"giveGiftPackagePerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"packagesOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PACKAGES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PACKAGES_MAX_PER_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amt\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"giveGiftPackages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"packagesToReturn\",\"type\":\"uint256\"}],\"name\":\"returnGiftPackages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimPackages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchasePackages\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"giftPackagesForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingPackages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoldOutOfPackages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pkgsBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spend\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"LuckyLast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DidPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DidUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://51a236c2ca895dd833b92f7e2e457c0531f4454efffebf00283bd6c881420442"}]}