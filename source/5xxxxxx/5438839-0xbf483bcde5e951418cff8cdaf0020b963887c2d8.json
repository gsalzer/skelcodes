{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ACAToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    string public name = \"ACA Network Token\";\r\n    string public symbol = \"ACA\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 totalSupply_;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping (address => uint256) balances;\r\n\r\n    bool transferable = false;\r\n    mapping (address => bool) internal transferLocked;\r\n\r\n    event Genesis(address owner, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event LogAddress(address indexed addr);\r\n    event LogUint256(uint256 value);\r\n    event TransferLock(address indexed target, bool value);\r\n\r\n    // modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(address _from, address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n\r\n        if ( _from != owner && _from != admin ) {\r\n            require(transferable);\r\n            require (!transferLocked[_from]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // constructor\r\n    function ACAToken(uint256 _totalSupply, address _newAdmin) public {\r\n        require(_totalSupply > 0);\r\n        require(_newAdmin != address(0x0));\r\n        require(_newAdmin != msg.sender);\r\n\r\n        owner = msg.sender;\r\n        admin = _newAdmin;\r\n\r\n        totalSupply_ = _totalSupply;\r\n\r\n        balances[owner] = totalSupply_;\r\n        approve(admin, totalSupply_);\r\n        emit Genesis(owner, totalSupply_);\r\n    }\r\n\r\n    // permission related\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        require(newOwner != admin);\r\n\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n\r\n    function transferAdmin(address _newAdmin) public onlyOwner {\r\n        require(_newAdmin != address(0));\r\n        require(_newAdmin != address(this));\r\n        require(_newAdmin != owner);\r\n\r\n        admin = _newAdmin;\r\n        emit AdminTransferred(admin, _newAdmin);\r\n    }\r\n\r\n    function setTransferable(bool _transferable) public onlyAdmin {\r\n        transferable = _transferable;\r\n    }\r\n\r\n    function isTransferable() public view returns (bool) {\r\n        return transferable;\r\n    }\r\n\r\n    function transferLock() public returns (bool) {\r\n        transferLocked[msg.sender] = true;\r\n        emit TransferLock(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    function manageTransferLock(address _target, bool _value) public onlyOwner returns (bool) {\r\n        transferLocked[_target] = _value;\r\n        emit TransferLock(_target, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferAllowed(address _target) public view returns (bool) {\r\n        return (transferable && transferLocked[_target] == false);\r\n    }\r\n\r\n    // token related\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) canTransfer(msg.sender, _to) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function balanceOfOwner() public view returns (uint256 balance) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public canTransfer(msg.sender, _spender) returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public canTransfer(msg.sender, _spender) returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n\r\n    function emergencyERC20Drain(ERC20 _token, uint256 _amount) public onlyOwner {\r\n        _token.transfer(owner, _amount);\r\n    }\r\n}\r\n\r\ncontract ACATokenSale {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    address public wallet;\r\n    ACAToken public token;\r\n\r\n    uint256 totalSupply;\r\n\r\n    struct StageInfo {\r\n        uint256 opening;\r\n        uint256 closing;\r\n        uint256 capacity;\r\n        uint256 minimumWei;\r\n        uint256 maximumWei;\r\n        uint256 rate;\r\n        uint256 sold;\r\n    }\r\n    bool public tokenSaleEnabled = false;\r\n\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => bool) public kyclist;\r\n    mapping(address => bool) public whitelistBonus;\r\n\r\n    uint256 public whitelistBonusClosingTime;\r\n    uint256 public whitelistBonusSent = 0;\r\n    uint256 public whitelistBonusRate;\r\n    uint256 public whitelistBonusAmount;\r\n\r\n    mapping (address => uint256) public sales;\r\n    uint256 public softCap;\r\n    uint256 public hardCap;\r\n    uint256 public weiRaised = 0;\r\n\r\n    RefundVault public vault;\r\n\r\n    mapping (address => address) public referrals;\r\n    uint256 public referralAmount;\r\n    uint256 public referralRateInviter;\r\n    uint256 public referralRateInvitee;\r\n    uint256 public referralSent = 0;\r\n    bool public referralDone = false;\r\n\r\n    mapping (address => uint256) public bounties;\r\n    uint256 public bountyAmount;\r\n    uint256 public bountySent = 0;\r\n\r\n    StageInfo[] public stages;\r\n    uint256 public currentStage = 0;\r\n    uint256 public maxStage = 0;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    // events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event TokenSaleCreated(address indexed wallet, uint256 totalSupply);\r\n    event StageAdded(uint256 openingTime, uint256 closingTime, uint256 capacity, uint256 minimumWei, uint256 maximumWei, uint256 rate);\r\n    event TokenSaleEnabled();\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenClaimed(address indexed beneficiary, uint256 amount);\r\n    event Finalized();\r\n    event BountySetupDone();\r\n    event BountyUpdated(address indexed target, bool flag, uint256 amount);\r\n    event PurchaseReferral(address indexed beneficiary, uint256 amount);\r\n    event StageUpdated(uint256 stage);\r\n    event StageCapReached(uint256 stage);\r\n    event ReferralCapReached();\r\n\r\n    // do not use this on mainnet!\r\n    event LogAddress(address indexed addr);\r\n    event LogUint256(uint256 value);\r\n\r\n    // modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhileOpen {\r\n        require(tokenSaleEnabled == true);\r\n        require(now >= stages[currentStage].opening && now <= stages[currentStage].closing);\r\n        _;\r\n    }\r\n\r\n    modifier isVerified(address _beneficiary) {\r\n        require(whitelist[_beneficiary] == true);\r\n        require(kyclist[_beneficiary] == true);\r\n        _;\r\n    }\r\n\r\n    modifier claimable {\r\n        require(isFinalized == true);\r\n        require(isGoalReached());\r\n        _;\r\n    }\r\n\r\n    // getters\r\n    function isEnabled() public view returns (bool) {\r\n        return tokenSaleEnabled;\r\n    }\r\n\r\n    function isClosed() public view returns (bool) {\r\n        return now > stages[maxStage - 1].closing;\r\n    }\r\n\r\n    function isGoalReached() public view returns (bool) {\r\n        return getTotalTokenSold() >= softCap;\r\n    }\r\n\r\n    function getTotalTokenSold() public view returns (uint256) {\r\n        uint256 sold = 0;\r\n        for ( uint i = 0; i < maxStage; ++i ) {\r\n            sold = sold.add(stages[i].sold);\r\n        }\r\n\r\n        return sold;\r\n    }\r\n\r\n    function getOpeningTime() public view returns (uint256) {\r\n        return stages[currentStage].opening;\r\n    }\r\n\r\n    function getOpeningTimeByStage(uint _index) public view returns (uint256) {\r\n        require(_index < maxStage);\r\n        return stages[_index].opening;\r\n    }\r\n\r\n    function getClosingTime() public view returns (uint256) {\r\n        return stages[currentStage].closing;\r\n    }\r\n\r\n    function getClosingTimeByStage(uint _index) public view returns (uint256) {\r\n        require(_index < maxStage);\r\n        return stages[_index].closing;\r\n    }\r\n\r\n    function getCurrentCapacity() public view returns (uint256) {\r\n        return stages[currentStage].capacity;\r\n    }\r\n\r\n    function getCapacity(uint _index) public view returns (uint256) {\r\n        require(_index < maxStage);\r\n        return stages[_index].capacity;\r\n    }\r\n\r\n    function getCurrentSold() public view returns (uint256) {\r\n        return stages[currentStage].sold;\r\n    }\r\n\r\n    function getSold(uint _index) public view returns (uint256) {\r\n        require(_index < maxStage);\r\n        return stages[_index].sold;\r\n    }\r\n\r\n    function getCurrentRate() public view returns (uint256) {\r\n        return stages[currentStage].rate;\r\n    }\r\n\r\n    function getRate(uint _index) public view returns (uint256) {\r\n        require(_index < maxStage);\r\n        return stages[_index].rate;\r\n    }\r\n\r\n    function getRateWithoutBonus() public view returns (uint256) {\r\n        return stages[maxStage - 1].rate;\r\n    }\r\n\r\n    function getSales(address _beneficiary) public view returns (uint256) {\r\n        return sales[_beneficiary];\r\n    }\r\n    \r\n    // setter\r\n    function setSalePeriod(uint _index, uint256 _openingTime, uint256 _closingTime) onlyOwner public {\r\n        require(_openingTime > now);\r\n        require(_closingTime > _openingTime);\r\n\r\n        require(_index > currentStage);\r\n        require(_index < stages.length);\r\n\r\n        stages[_index].opening = _openingTime;        \r\n        stages[_index].closing = _closingTime;        \r\n    }\r\n\r\n    function setRate(uint _index, uint256 _rate) onlyOwner public {\r\n        require(_index > currentStage);\r\n        require(_index < stages.length);\r\n\r\n        require(_rate > 0);\r\n\r\n        stages[_index].rate = _rate;\r\n    }\r\n\r\n    \r\n    // permission\r\n    function setAdmin(address _newAdmin) public onlyOwner {\r\n        require(_newAdmin != address(0x0));\r\n        require(_newAdmin != address(this));\r\n        require(_newAdmin != owner);\r\n\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    // constructor\r\n    function ACATokenSale(\r\n        address _wallet, \r\n        uint256 _totalSupply,\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        address _admin) public {\r\n        owner = msg.sender;\r\n\r\n        require(_admin != address(0));\r\n        require(_wallet != address(0));\r\n\r\n        require(_totalSupply > 0);\r\n        require(_softCap > 0);\r\n        require(_hardCap > _softCap);\r\n\r\n        admin = _admin;\r\n        wallet = _wallet;\r\n\r\n        totalSupply = _totalSupply;\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n\r\n        emit TokenSaleCreated(wallet, _totalSupply);\r\n    }\r\n\r\n    // state related\r\n    function setupBounty(\r\n        uint256 _referralAmount,\r\n        uint256 _referralRateInviter,\r\n        uint256 _referralRateInvitee,\r\n        uint256 _bountyAmount,\r\n        uint256 _whitelistBonusClosingTime,\r\n        uint256 _whitelistBonusRate,\r\n        uint256 _whitelistBonusAmount\r\n    ) onlyOwner public {\r\n        \r\n        require(_referralAmount > 0);\r\n\r\n        require(_referralRateInviter > 0 && _referralRateInviter < 100);\r\n        require(_referralRateInvitee > 0 && _referralRateInvitee < 100);\r\n\r\n        require(_whitelistBonusClosingTime > now);\r\n        require(_whitelistBonusRate > 0);\r\n        require(_whitelistBonusAmount > _whitelistBonusRate);\r\n        require(_bountyAmount > 0);\r\n\r\n        referralAmount = _referralAmount;\r\n        referralRateInviter = _referralRateInviter;\r\n        referralRateInvitee = _referralRateInvitee;\r\n        bountyAmount = _bountyAmount;\r\n        whitelistBonusClosingTime = _whitelistBonusClosingTime;\r\n        whitelistBonusRate = _whitelistBonusRate;\r\n        whitelistBonusAmount = _whitelistBonusAmount;\r\n\r\n        emit BountySetupDone();\r\n    }\r\n    function addStage(\r\n        uint256 _openingTime, \r\n        uint256 _closingTime, \r\n        uint256 _capacity, \r\n        uint256 _minimumWei, \r\n        uint256 _maximumWei, \r\n        uint256 _rate) onlyOwner public {\r\n        require(tokenSaleEnabled == false);\r\n\r\n        require(_openingTime > now);\r\n        require(_closingTime > _openingTime);\r\n\r\n        require(_capacity > 0);\r\n        require(_capacity < hardCap);\r\n\r\n        require(_minimumWei > 0);\r\n        require(_maximumWei >= _minimumWei);\r\n\r\n        require(_rate > 0);\r\n\r\n        require(_minimumWei.mul(_rate) < _capacity);\r\n        require(_maximumWei.mul(_rate) < _capacity);\r\n        if ( stages.length > 0 ) {\r\n            StageInfo memory prevStage = stages[stages.length - 1];\r\n            require(_openingTime > prevStage.closing);\r\n        }\r\n\r\n        stages.push(StageInfo(_openingTime, _closingTime, _capacity, _minimumWei, _maximumWei, _rate, 0));\r\n        emit StageAdded(_openingTime, _closingTime, _capacity, _minimumWei, _maximumWei, _rate);\r\n    }\r\n\r\n    function setToken(ACAToken _token) onlyOwner public {\r\n        token = _token;\r\n    }\r\n\r\n    function enableTokenSale() onlyOwner public returns (bool) {\r\n        require(stages.length > 0);\r\n        maxStage = stages.length;\r\n\r\n        tokenSaleEnabled = true;\r\n\r\n        vault = new RefundVault(wallet);\r\n\r\n        emit TokenSaleEnabled();\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateStage() public returns (uint256) {\r\n        require(tokenSaleEnabled == true);\r\n        require(currentStage < maxStage);\r\n        require(now >= stages[currentStage].opening);\r\n\r\n        uint256 remains = stages[currentStage].capacity.sub(stages[currentStage].sold);\r\n        if ( now > stages[currentStage].closing ) {\r\n            uint256 nextStage = currentStage.add(1);\r\n            if ( remains > 0 && nextStage < maxStage ) {\r\n                stages[nextStage].capacity = stages[nextStage].capacity.add(remains);\r\n                remains = stages[nextStage].capacity;\r\n            }\r\n\r\n            currentStage = nextStage;\r\n            emit StageUpdated(nextStage);\r\n        }\r\n\r\n        return remains;\r\n    }\r\n\r\n    function finalize() onlyOwner public {\r\n        require(isFinalized == false);\r\n        require(isClosed());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    function finalization() internal {\r\n        if (isGoalReached()) {\r\n            vault.close();\r\n            // token.setTransferable(true);\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    // transaction\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(getCurrentRate());\r\n    }\r\n\r\n    function _getTokenAmountWithoutBonus(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(getRateWithoutBonus());\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isVerified(_beneficiary) {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n\r\n        require(tokenSaleEnabled == true);\r\n\r\n        require(now >= stages[currentStage].opening);\r\n\r\n        // lazy execution\r\n        uint256 remains = updateStage();\r\n\r\n        require(currentStage < maxStage);\r\n        require(now >= stages[currentStage].opening && now <= stages[currentStage].closing);\r\n\r\n        require(_weiAmount >= stages[currentStage].minimumWei);\r\n        require(_weiAmount <= stages[currentStage].maximumWei);\r\n\r\n        uint256 amount = _getTokenAmount(_weiAmount);\r\n\r\n        require(remains > amount);\r\n    }\r\n\r\n    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        if ( getCurrentSold() == getCurrentCapacity() ) {\r\n            currentStage = currentStage.add(1);\r\n            emit StageUpdated(currentStage);\r\n        }\r\n    }\r\n\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        sales[_beneficiary] = sales[_beneficiary].add(_tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n\r\n        stages[currentStage].sold = stages[currentStage].sold.add(_tokenAmount);\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        address inviter = referrals[_beneficiary];\r\n        if ( inviter != address(0x0) && referralDone == false ) {\r\n            uint256 baseRate = _getTokenAmountWithoutBonus(weiAmount);\r\n            uint256 referralAmountInviter = baseRate.div(100).mul(referralRateInviter);\r\n            uint256 referralAmountInvitee = baseRate.div(100).mul(referralRateInvitee);\r\n            uint256 referralRemains = referralAmount.sub(referralSent);\r\n            if ( referralRemains == 0 ) {\r\n                referralDone = true;\r\n            }\r\n            else {\r\n                if ( referralAmountInviter >= referralRemains ) {\r\n                    referralAmountInviter = referralRemains;\r\n                    referralAmountInvitee = 0; // priority to inviter\r\n                    emit ReferralCapReached();\r\n                    referralDone = true;\r\n                }\r\n                if ( referralDone == false && referralAmountInviter >= referralRemains ) {\r\n                    referralAmountInvitee = referralRemains.sub(referralAmountInviter);\r\n                    emit ReferralCapReached();\r\n                    referralDone = true;\r\n                }\r\n\r\n                uint256 referralAmountTotal = referralAmountInviter.add(referralAmountInvitee);\r\n                referralSent = referralSent.add(referralAmountTotal);\r\n\r\n                if ( referralAmountInviter > 0 ) {\r\n                    _deliverTokens(inviter, referralAmountInviter);\r\n                    emit PurchaseReferral(inviter, referralAmountInviter);\r\n                }\r\n                if ( referralAmountInvitee > 0 ) {\r\n                    _deliverTokens(_beneficiary, referralAmountInvitee);\r\n                    emit PurchaseReferral(_beneficiary, referralAmountInvitee);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    // claim\r\n    function claimToken() public claimable isVerified(msg.sender) returns (bool) {\r\n        address beneficiary = msg.sender;\r\n        uint256 amount = sales[beneficiary];\r\n\r\n        emit TokenClaimed(beneficiary, amount);\r\n\r\n        sales[beneficiary] = 0;\r\n        return token.transferFrom(owner, beneficiary, amount);\r\n    }\r\n\r\n    function claimRefund() isVerified(msg.sender) public {\r\n        require(isFinalized == true);\r\n        require(!isGoalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    function claimBountyToken() public claimable isVerified(msg.sender) returns (bool) {\r\n        address beneficiary = msg.sender;\r\n        uint256 amount = bounties[beneficiary];\r\n\r\n        emit TokenClaimed(beneficiary, amount);\r\n\r\n        bounties[beneficiary] = 0;\r\n        return token.transferFrom(owner, beneficiary, amount);\r\n    }\r\n\r\n    // bounty\r\n    function addBounty(address _address, uint256 _amount) public onlyAdmin isVerified(_address) returns (bool) {\r\n        require(bountyAmount.sub(bountySent) >= _amount);\r\n\r\n        bountySent = bountySent.add(_amount);\r\n        bounties[_address] = bounties[_address].add(_amount);\r\n        emit BountyUpdated(_address, true, _amount);\r\n    }\r\n    function delBounty(address _address, uint256 _amount) public onlyAdmin isVerified(_address) returns (bool) {\r\n        require(bounties[_address] >= _amount);\r\n        require(_amount >= bountySent);\r\n\r\n        bountySent = bountySent.sub(_amount);\r\n        bounties[_address] = bounties[_address].sub(_amount);\r\n        emit BountyUpdated(_address, false, _amount);\r\n    }\r\n    function getBountyAmount(address _address) public view returns (uint256) {\r\n        return bounties[_address];\r\n    }\r\n\r\n    // referral\r\n    function addReferral(address _inviter, address _invitee) public onlyAdmin isVerified(_inviter) isVerified(_invitee) returns (bool) {\r\n        referrals[_invitee] = _inviter;\r\n    }\r\n    function delReferral(address _inviter, address _invitee) public onlyAdmin isVerified(_inviter) isVerified(_invitee) returns (bool) {\r\n        delete referrals[_invitee];\r\n    }\r\n    function getReferral(address _address) public view returns (address) {\r\n        return referrals[_address];\r\n    }\r\n\r\n    // whitelist\r\n    function _deliverWhitelistBonus(address _beneficiary) internal {\r\n        if ( _beneficiary == address(0x0) ) {\r\n            return;\r\n        }\r\n\r\n        if ( whitelistBonus[_beneficiary] == true ) {\r\n            return;\r\n        }\r\n        \r\n        if (whitelistBonusAmount.sub(whitelistBonusSent) > whitelistBonusRate ) {\r\n            whitelistBonus[_beneficiary] = true;\r\n\r\n            whitelistBonusSent = whitelistBonusSent.add(whitelistBonusRate);\r\n            bounties[_beneficiary] = bounties[_beneficiary].add(whitelistBonusRate);\r\n            emit BountyUpdated(_beneficiary, true, whitelistBonusRate);\r\n        }\r\n    }\r\n    function isAccountWhitelisted(address _beneficiary) public view returns (bool) {\r\n        return whitelist[_beneficiary];\r\n    }\r\n\r\n    function addToWhitelist(address _beneficiary) external onlyAdmin {\r\n        whitelist[_beneficiary] = true;\r\n\r\n        if ( whitelistBonus[_beneficiary] == false && now < whitelistBonusClosingTime ) {\r\n            _deliverWhitelistBonus(_beneficiary);\r\n        }\r\n    }\r\n\r\n    function addManyToWhitelist(address[] _beneficiaries) external onlyAdmin {\r\n        uint256 i = 0;\r\n        if ( now < whitelistBonusClosingTime ) {\r\n            for (i = 0; i < _beneficiaries.length; i++) {\r\n                whitelist[_beneficiaries[i]] = true;\r\n                _deliverWhitelistBonus(_beneficiaries[i]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address _beneficiary) external onlyAdmin {\r\n        whitelist[_beneficiary] = false;\r\n    }\r\n\r\n    // kyc\r\n    function isAccountVerified(address _beneficiary) public view returns (bool) {\r\n        return kyclist[_beneficiary];\r\n    }\r\n\r\n    function setAccountVerified(address _beneficiary) external onlyAdmin {\r\n        kyclist[_beneficiary] = true;\r\n    }\r\n\r\n    function setManyAccountsVerified(address[] _beneficiaries) external onlyAdmin {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            kyclist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unverifyAccount(address _beneficiary) external onlyAdmin {\r\n        kyclist[_beneficiary] = false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"whitelistBonusSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviter\",\"type\":\"address\"},{\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBountyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistBonusClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOpeningTimeByStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getClosingTimeByStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralAmount\",\"type\":\"uint256\"},{\"name\":\"_referralRateInviter\",\"type\":\"uint256\"},{\"name\":\"_referralRateInvitee\",\"type\":\"uint256\"},{\"name\":\"_bountyAmount\",\"type\":\"uint256\"},{\"name\":\"_whitelistBonusClosingTime\",\"type\":\"uint256\"},{\"name\":\"_whitelistBonusRate\",\"type\":\"uint256\"},{\"name\":\"_whitelistBonusAmount\",\"type\":\"uint256\"}],\"name\":\"setupBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistBonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviter\",\"type\":\"address\"},{\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"delReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRateWithoutBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"opening\",\"type\":\"uint256\"},{\"name\":\"closing\",\"type\":\"uint256\"},{\"name\":\"capacity\",\"type\":\"uint256\"},{\"name\":\"minimumWei\",\"type\":\"uint256\"},{\"name\":\"maximumWei\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"sold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isAccountWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isAccountVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setAccountVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCapacity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCapacity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBountyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"unverifyAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kyclist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRateInviter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRateInvitee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_capacity\",\"type\":\"uint256\"},{\"name\":\"_minimumWei\",\"type\":\"uint256\"},{\"name\":\"_maximumWei\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"setManyAccountsVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"setSalePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"TokenSaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"openingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"closingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimumWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maximumWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"StageAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSaleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BountySetupDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"StageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"StageCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReferralCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"}]","ContractName":"ACATokenSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a13228eddf6079a84b3889d459bff15eecdd5a4000000000000000000000000000000000000000006765c793fa10079d000000000000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000ed7ad706c58af35dd88ce105db4ff7858d370a9c","Library":"","SwarmSource":"bzzr://7c0d237af0dfa4455e33664c2e2fc753a46a0a836aed658d7dc6784b3b647a94"}]}