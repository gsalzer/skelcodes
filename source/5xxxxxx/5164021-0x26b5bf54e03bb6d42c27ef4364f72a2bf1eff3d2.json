{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract AccessControl {\r\n    address public owner;\r\n    address[] public admins;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins {\r\n        bool found = false;\r\n\r\n        for (uint i = 0; i < admins.length; i++) {\r\n            if (admins[i] == msg.sender) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        require(found);\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address _adminAddress) public onlyOwner {\r\n        admins.push(_adminAddress);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    // Required Functions\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) public view returns (address);\r\n    function transfer(address _to, uint _tokenId) public;\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    // Optional Functions\r\n    function name() public pure returns (string);\r\n    function symbol() public pure returns (string);\r\n\r\n    // Required Events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\n\r\ncontract CryptoBeauty is AccessControl, ERC721 {\r\n    // Event fired for every new beauty created\r\n    event Creation(uint256 tokenId, string name, address owner);\r\n\r\n    // Event fired whenever beauty is sold\r\n    event Purchase(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, uint256 charityId);\r\n\r\n    // Event fired when price of beauty changes\r\n    event PriceChange(uint256 tokenId, uint256 price);\r\n\r\n    // Event fired when charities are modified\r\n    event Charity(uint256 charityId, address charity);\r\n\r\n    string public constant NAME = \"Crypto Beauty\"; \r\n    string public constant SYMBOL = \"BEAUTY\"; \r\n\r\n    // Initial price of card\r\n    uint256 private startingPrice = 0.005 ether;\r\n    uint256 private increaseLimit1 = 0.5 ether;\r\n    uint256 private increaseLimit2 = 50.0  ether;\r\n    uint256 private increaseLimit3 = 100.0  ether;\r\n\r\n    // Charities enabled in the future\r\n    bool charityEnabled;\r\n\r\n    // Beauty card\r\n    struct Beauty {\r\n        // unique name of beauty\r\n        string name;\r\n\r\n        // selling price\r\n        uint256 price;\r\n\r\n        // maximum price\r\n        uint256 maxPrice;\r\n    }\r\n\r\n    Beauty[] public beauties;\r\n\r\n    address[] public charities;\r\n    \r\n    mapping (uint256 => address) public beautyToOwner;\r\n    mapping (address => uint256) public beautyOwnershipCount;\r\n    mapping (uint256 => address) public beautyToApproved;\r\n\r\n    function CryptoBeauty() public {\r\n        owner = msg.sender;\r\n        admins.push(msg.sender);\r\n        charityEnabled = false;\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return beauties.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return beautyOwnershipCount[_owner];\r\n    }\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = beautyToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_to != address(0));\r\n        require(beautyToOwner[_tokenId] == msg.sender);\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(beautyToOwner[_tokenId] == msg.sender);\r\n        beautyToApproved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(beautyToApproved[_tokenId] == _to);\r\n        require(_to != address(0));\r\n        require(beautyToOwner[_tokenId] == _from);\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function addCharity(address _charity) public onlyAdmins {\r\n        require(_charity != address(0));\r\n\r\n        uint256 newCharityId = charities.push(_charity) - 1;\r\n\r\n        // emit charity event\r\n        Charity(newCharityId, _charity);\r\n    }\r\n\r\n    function deleteCharity(uint256 _charityId) public onlyAdmins {\r\n        delete charities[_charityId];\r\n\r\n        // emit charity event\r\n        Charity(_charityId, address(0));\r\n    }\r\n\r\n    function getCharity(uint256 _charityId) public view returns (address) {\r\n        return charities[_charityId];\r\n    }\r\n\r\n    function createBeauty(string _name, address _owner, uint256 _price) public onlyAdmins {\r\n        if (_price <= 0.005 ether) {\r\n            _price = startingPrice;\r\n        }\r\n        \r\n        Beauty memory _beauty = Beauty({\r\n            name: _name,\r\n            price: _price,\r\n            maxPrice: _price\r\n        });\r\n        uint256 newBeautyId = beauties.push(_beauty) - 1;\r\n\r\n        Creation(newBeautyId, _name, _owner);\r\n\r\n        _transfer(address(0), _owner, newBeautyId);\r\n\r\n\r\n    }\r\n    \r\n    function newBeauty(string _name, uint256 _price) public onlyAdmins {\r\n        createBeauty(_name, msg.sender, _price);\r\n    }\r\n\r\n    function getBeauty(uint256 _tokenId) public view returns (\r\n        string beautyName,\r\n        uint256 sellingPrice,\r\n        uint256 maxPrice,\r\n        address owner\r\n    ) {\r\n        Beauty storage beauty = beauties[_tokenId];\r\n        beautyName = beauty.name;\r\n        sellingPrice = beauty.price;\r\n        maxPrice = beauty.maxPrice;\r\n        owner = beautyToOwner[_tokenId];\r\n    }\r\n\r\n\r\n    function purchase(uint256 _tokenId, uint256 _charityId) public payable {\r\n        // seller\r\n        address oldOwner = beautyToOwner[_tokenId];\r\n        // current price\r\n        uint sellingPrice = beauties[_tokenId].price;\r\n        // buyer\r\n        address newOwner = msg.sender;\r\n        \r\n        require(oldOwner != newOwner);\r\n        require(newOwner != address(0));\r\n        require(msg.value >= sellingPrice);\r\n        \r\n        uint256 devCut;\r\n        uint256 nextPrice;\r\n\r\n        if (sellingPrice < increaseLimit1) {\r\n          devCut = SafeMath.div(SafeMath.mul(sellingPrice, 5), 100); // 5%\r\n          nextPrice = SafeMath.div(SafeMath.mul(sellingPrice, 200), 95);\r\n        } else if (sellingPrice < increaseLimit2) {\r\n          devCut = SafeMath.div(SafeMath.mul(sellingPrice, 4), 100); // 4%\r\n          nextPrice = SafeMath.div(SafeMath.mul(sellingPrice, 135), 96);\r\n        } else if (sellingPrice < increaseLimit3) {\r\n          devCut = SafeMath.div(SafeMath.mul(sellingPrice, 3), 100); // 3%\r\n          nextPrice = SafeMath.div(SafeMath.mul(sellingPrice, 125), 97);\r\n        } else {\r\n          devCut = SafeMath.div(SafeMath.mul(sellingPrice, 2), 100); // 2%\r\n          nextPrice = SafeMath.div(SafeMath.mul(sellingPrice, 115), 98);\r\n        }\r\n\r\n        uint256 excess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n        if (charityEnabled == true) {\r\n            \r\n            // address of choosen charity\r\n            address charity = charities[_charityId];\r\n\r\n            // check if charity address is not null\r\n            require(charity != address(0));\r\n            \r\n            // 1% of selling price\r\n            uint256 donate = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 1), 100));\r\n\r\n            // transfer money to charity\r\n            charity.transfer(donate);\r\n            \r\n        }\r\n\r\n        // set new price\r\n        beauties[_tokenId].price = nextPrice;\r\n        \r\n        // set maximum price\r\n        beauties[_tokenId].maxPrice = nextPrice;\r\n\r\n        // transfer card to buyer\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n        // transfer money to seller\r\n        if (oldOwner != address(this)) {\r\n            oldOwner.transfer(SafeMath.sub(sellingPrice, devCut));\r\n        }\r\n\r\n        // emit event that beauty was sold;\r\n        Purchase(_tokenId, sellingPrice, beauties[_tokenId].price, oldOwner, newOwner, _charityId);\r\n        \r\n        // transfer excess back to buyer\r\n        if (excess > 0) {\r\n            newOwner.transfer(excess);\r\n        }  \r\n    }\r\n\r\n    // owner can change price\r\n    function changePrice(uint256 _tokenId, uint256 _price) public {\r\n        // only owner can change price\r\n        require(beautyToOwner[_tokenId] == msg.sender);\r\n\r\n        // price cannot be higher than maximum price\r\n        require(beauties[_tokenId].maxPrice >= _price);\r\n\r\n        // set new price\r\n        beauties[_tokenId].price = _price;\r\n        \r\n        // emit event\r\n        PriceChange(_tokenId, _price);\r\n    }\r\n\r\n    function priceOfBeauty(uint256 _tokenId) public view returns (uint256) {\r\n        return beauties[_tokenId].price;\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) public view returns(uint256[]) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        uint256[] memory result = new uint256[](tokenCount);\r\n        uint256 total = totalSupply();\r\n        uint256 resultIndex = 0;\r\n\r\n        for(uint256 i = 0; i <= total; i++) {\r\n            if (beautyToOwner[i] == _owner) {\r\n                result[resultIndex] = i;\r\n                resultIndex++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        beautyOwnershipCount[_to]++;\r\n        beautyToOwner[_tokenId] = _to;\r\n\r\n        if (_from != address(0)) {\r\n            beautyOwnershipCount[_from]--;\r\n            delete beautyToApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function enableCharity() external onlyOwner {\r\n        require(!charityEnabled);\r\n        charityEnabled = true;\r\n    }\r\n\r\n    function disableCharity() external onlyOwner {\r\n        require(charityEnabled);\r\n        charityEnabled = false;\r\n    }\r\n\r\n    function withdrawAll() external onlyAdmins {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) external onlyAdmins {\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beautyToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_charityId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beautyToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"addCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBeauty\",\"outputs\":[{\"name\":\"beautyName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOfBeauty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newBeauty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createBeauty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beautyOwnershipCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityId\",\"type\":\"uint256\"}],\"name\":\"deleteCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beauties\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charities\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_charityId\",\"type\":\"uint256\"}],\"name\":\"getCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Creation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"charityId\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"charityId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"charity\",\"type\":\"address\"}],\"name\":\"Charity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoBeauty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c4c0fa8701e41325f358109666f806346c22370b5821639f2eb4ed875e713029"}]}