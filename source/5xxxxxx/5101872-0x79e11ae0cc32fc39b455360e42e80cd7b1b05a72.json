{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath { //standart library for uint\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0){\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\r\n    if (b == 0){\r\n      return 1;\r\n    }\r\n    uint256 c = a**b;\r\n    assert (c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable { //standart contract to identify owner\r\n\r\n  address public owner;\r\n\r\n  address public newOwner;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\ncontract BineuroToken is Ownable { //ERC - 20 token contract\r\n  using SafeMath for uint;\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  string public constant symbol = \"BNR\";\r\n  string public constant name = \"BiNeuro\";\r\n  uint8 public constant decimals = 3;\r\n  uint256 _totalSupply = (uint256)(650000000).mul((uint256)(10).pow(decimals));\r\n\r\n  // Owner of this contract\r\n  address private owner;\r\n  function getOwner()public view returns(address) {\r\n    return owner;\r\n  }\r\n  \r\n\r\n  // Balances for each account\r\n  mapping(address => uint256) balances;\r\n\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  function totalSupply() public view returns (uint256) { //standart ERC-20 function\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _address) public view returns (uint256 balance) {//standart ERC-20 function\r\n    return balances[_address];\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    require(this != _to);\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(msg.sender,_to,_amount);\r\n    return true;\r\n  }\r\n  \r\n  address public crowdsaleContract;\r\n\r\n  //connect to crowdsaleContract, can be use once\r\n  function setCrowdsaleContract (address _address) public{\r\n    require(crowdsaleContract == address(0));\r\n    crowdsaleContract = _address;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\r\n    require(this != _to);\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(_from,_to,_amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function approve(address _spender, uint256 _amount)public returns (bool success) { \r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  //Constructor\r\n  function BineuroToken() public {\r\n    owner = 0xCe390a89734B2222Ff01c9ac4fD370581DeD82E0;\r\n    // owner = msg.sender;\r\n    \r\n    balances[this] = _totalSupply;\r\n  }\r\n\r\n  uint public crowdsaleBalance = 52845528455;\r\n\r\n  function sendCrowdsaleTokens(address _address, uint256 _value)  public {\r\n    require(msg.sender == crowdsaleContract);\r\n    crowdsaleBalance = crowdsaleBalance.sub(_value);\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    Transfer(this,_address,_value);\r\n  }\r\n\r\n  function burnTokens(address _address1, address _address2, address _address3, uint _tokensSold) public {\r\n    require(msg.sender == crowdsaleContract);\r\n\r\n    balances[this] = balances[this].sub(_tokensSold.mul((uint)(23))/100);\r\n    balances[_address1] = balances[_address1].add(_tokensSold.mul((uint)(75))/1000);\r\n    balances[_address2] = balances[_address2].add(_tokensSold.mul((uint)(75))/1000);\r\n    balances[_address3] = balances[_address2].add(_tokensSold.mul((uint)(8))/100);\r\n\r\n    Transfer(this,_address1,_tokensSold.mul((uint)(75))/1000);\r\n    Transfer(this,_address2,_tokensSold.mul((uint)(75))/1000);\r\n    Transfer(this,_address3,_tokensSold.mul((uint)(8))/100);\r\n\r\n    _totalSupply = _totalSupply.sub(balances[this]);\r\n    Transfer(this,0,balances[this]);\r\n\r\n    balances[this] = 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address1\",\"type\":\"address\"},{\"name\":\"_address2\",\"type\":\"address\"},{\"name\":\"_address3\",\"type\":\"address\"},{\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCrowdsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BineuroToken","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cf2031dd1979664d5b62aadf04f3d794f7046c671c2ff0fc278fb00b44c79146"}]}