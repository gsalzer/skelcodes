{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\t/**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\tPause();\r\n\t}\r\n\r\n\t/**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\tUnpause();\r\n\t}\r\n}\r\n\r\ncontract CryptoLambos is Pausable, Destructible {\r\n  using SafeMath for uint256;\r\n\r\n  struct Lambo {\r\n    string  model;\r\n    address ownerAddress;\r\n    uint256 price;\r\n    bool    enabled;\r\n    string  nickname;\r\n    string  note;\r\n  }\r\n\r\n  Lambo[] public lambos;\r\n\r\n  event Bought(uint256 id, string model, address indexed ownerAddress, uint256 price, string nickname, string note);\r\n  event Added(uint256 id, string model, address indexed ownerAddress, uint256 price, bool enabled);\r\n  event Enabled(uint256 id);\r\n\r\n  function CryptoLambos() public { }\r\n\r\n  function _calcNextPrice(uint256 _price) internal pure returns(uint256) {\r\n    return _price\r\n      .mul(13).div(10) // Add 30%\r\n      .div(1 finney).mul(1 finney); // Round to 1 finney\r\n  }\r\n\r\n  function buy(uint256 _id, string _nickname, string _note) public payable whenNotPaused {\r\n    Lambo storage _lambo = lambos[_id];\r\n\r\n    require(_lambo.enabled);\r\n    require(msg.value  >= _lambo.price);\r\n    require(msg.sender != _lambo.ownerAddress);\r\n    require(bytes(_nickname).length <= 50);\r\n    require(bytes(_note).length <= 100);\r\n\r\n    uint256 _price      = _lambo.price;\r\n    uint256 _commission = _price.div(20);\r\n    uint256 _payout     = _price - _commission;\r\n    address _prevOwner  = _lambo.ownerAddress;\r\n    uint256 _newPrice   = _calcNextPrice(_price);\r\n\r\n    if (bytes(_lambo.nickname).length > 0) {\r\n      delete _lambo.nickname;\r\n    }\r\n    \r\n    if (bytes(_lambo.note).length > 0) {\r\n      delete _lambo.note;\r\n    }\r\n    \r\n    _lambo.ownerAddress = msg.sender;\r\n    _lambo.price        = _newPrice;\r\n    _lambo.nickname     = _nickname;\r\n    _lambo.note         = _note;\r\n\r\n    owner.transfer(_commission);\r\n    _prevOwner.transfer(_payout);\r\n\r\n    Bought(_id, _lambo.model, _lambo.ownerAddress, _lambo.price, _lambo.nickname, _lambo.note);\r\n  }\r\n\r\n  function getLambosCount() public view returns (uint256) {\r\n    return lambos.length;\r\n  }\r\n\r\n  function enableLambo(uint256 _id) public whenNotPaused onlyOwner {\r\n    require(!lambos[_id].enabled);\r\n\r\n    lambos[_id].enabled = true;\r\n\r\n    Enabled(_id);\r\n  }\r\n\r\n  function addLambo(string _model, uint256 _price, bool _enabled) public whenNotPaused onlyOwner {\r\n    lambos.push(Lambo(_model, owner, _price, _enabled, \"Crypto_Lambos\", \"Look ma! A Lambo!\"));\r\n\r\n    Added(lambos.length, _model, owner, _price, _enabled);\r\n  }\r\n\r\n  function withdrawAll() public onlyOwner {\r\n    owner.transfer(this.balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getLambosCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"addLambo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lambos\",\"outputs\":[{\"name\":\"model\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"enabled\",\"type\":\"bool\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"note\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"enableLambo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_nickname\",\"type\":\"string\"},{\"name\":\"_note\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"model\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nickname\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"model\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoLambos","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://10137f80495fc712644f3d51c4dae320f0a0345dfebc70c225686fd6fc3cdebb"}]}