{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/*SPEND APPROVAL ALERT INTERFACE*/\r\ninterface tokenRecipient { \r\nfunction receiveApproval(address _from, uint256 _value, \r\naddress _token, bytes _extraData) external; \r\n}\r\n\r\ncontract TOC {\r\n/*tokenchanger.io*/\r\n\r\n/*TOC TOKEN*/\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 public totalSupply;\r\n\r\n/*user coin balance*/\r\nmapping (address => uint256) public balances;\r\n/*user coin allowances*/\r\nmapping(address => mapping (address => uint256)) public allowed;\r\n\r\n/*EVENTS*/\t\t\r\n/*broadcast token transfers on the blockchain*/\r\nevent BroadcastTransfer(address indexed from, address indexed to, uint256 value);\r\n/*broadcast token spend approvals on the blockchain*/\r\nevent BroadcastApproval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n/*MINT TOKEN*/\r\nfunction TOC() public {\r\nname = \"TOC\";\r\nsymbol = \"TOC\";\r\ndecimals = 18;\r\n/*one billion base units*/\r\ntotalSupply = 10**27;\r\nbalances[msg.sender] = totalSupply; \r\n}\r\n\r\n/*INTERNAL TRANSFER*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {    \r\n/*prevent transfer to invalid address*/    \r\nif(_to == 0x0) revert();\r\n/*check if the sender has enough value to send*/\r\nif(balances[_from] < _value) revert(); \r\n/*check for overflows*/\r\nif(balances[_to] + _value < balances[_to]) revert();\r\n/*compute sending and receiving balances before transfer*/\r\nuint PreviousBalances = balances[_from] + balances[_to];\r\n/*substract from sender*/\r\nbalances[_from] -= _value;\r\n/*add to the recipient*/\r\nbalances[_to] += _value; \r\n/*check integrity of transfer operation*/\r\nassert(balances[_from] + balances[_to] == PreviousBalances);\r\n/*broadcast transaction*/\r\nemit BroadcastTransfer(_from, _to, _value); \r\n}\r\n\r\n/*PUBLIC TRANSFERS*/\r\nfunction transfer(address _to, uint256 _value) external returns (bool){\r\n_transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/*APPROVE THIRD PARTY SPENDING*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool success){\r\n/*update allowance record*/    \r\nallowed[msg.sender][_spender] = _value;\r\n/*broadcast approval*/\r\nemit BroadcastApproval(msg.sender, _spender, _value); \r\nreturn true;                                        \r\n}\r\n\r\n/*THIRD PARTY TRANSFER*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) \r\nexternal returns (bool success) {\r\n/*check if the message sender can spend*/\r\nrequire(_value <= allowed[_from][msg.sender]); \r\n/*substract from message sender's spend allowance*/\r\nallowed[_from][msg.sender] -= _value;\r\n/*transfer tokens*/\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/*APPROVE SPEND ALLOWANCE AND CALL SPENDER*/\r\nfunction approveAndCall(address _spender, uint256 _value, \r\n bytes _extraData) external returns (bool success) {\r\ntokenRecipient \r\nspender = tokenRecipient(_spender);\r\nif(approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n}\r\nreturn true;\r\n}\r\n\r\n}/////////////////////////////////end of toc token contract\r\n\r\n\r\npragma solidity ^0.4.16;\r\ncontract BlockPoints{\r\n/////////////////////////////////////////////////////////    \r\n///////(c)2017 tokenchanger.io -all rights reserved////// \r\n \r\n/*SUPER ADMINS*/\r\naddress Mars = 0x1947f347B6ECf1C3D7e1A58E3CDB2A15639D48Be;\r\naddress Mercury = 0x00795263bdca13104309Db70c11E8404f81576BE;\r\naddress Europa = 0x00e4E3eac5b520BCa1030709a5f6f3dC8B9e1C37;\r\naddress Jupiter = 0x2C76F260707672e240DC639e5C9C62efAfB59867;\r\naddress Neptune = 0xEB04E1545a488A5018d2b5844F564135211d3696;\r\n\r\n/*CONTRACT ADDRESS*/\r\nfunction GetContractAddr() public constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContractAddr = GetContractAddr();\r\n\r\n/*TOKEN VARIABLES*/\r\nstring public Name;\r\nstring public Symbol;\r\nuint8 public Decimals;\r\nuint256 public TotalSupply;\r\n\r\nstruct Global{\r\nbool Suspend;\r\nuint256 Rate;\r\n}\r\n\r\nstruct DApps{\r\nbool AuthoriseMint;\r\nbool AuthoriseBurn;\r\nbool AuthoriseRate;\r\n}\r\n \r\nstruct Admin{\r\nbool Authorised; \r\nuint256 Level;\r\n}\r\n\r\nstruct Coloured{\r\nuint256 Amount;\r\nuint256 Rate;\r\n}\r\n\r\nstruct AddressBook{\r\naddress TOCAddr;\r\n}\r\n\r\nstruct Process{\r\nuint256 n1;\r\nuint256 n2;\r\nuint256 n3;\r\nuint256 n4;\r\nuint256 n5;\r\n}\r\n\r\n/*INITIALIZE DATA STORES*/\r\nProcess pr;\r\n\r\n/*global operational record*/\r\nmapping (address => Global) public global;\r\n/*user coin balances*/\r\nmapping (address => uint256) public balances;\r\n/*list of authorised dapps*/\r\nmapping (address => DApps) public dapps;\r\n/*special exchange rates for block points*/\r\nmapping(address => mapping(address => Coloured)) public coloured;\r\n/*list of authorised admins*/\r\nmapping (address => Admin) public admin;\r\n/*comms address book*/\r\nmapping (address => AddressBook) public addressbook;\r\n\r\n\r\n/*MINT FIRST TOKEN*/\r\nfunction BlockPoints() public {\r\nName = 'BlockPoints';\r\nSymbol = 'BKP';\r\nDecimals = 0;\r\nTotalSupply = 1;\r\nbalances[msg.sender] = TotalSupply; \r\n}\r\n\r\n/*broadcast minting of tokens*/\r\nevent BrodMint(address indexed from, address indexed enduser, uint256 amount);\r\n/*broadcast buring of tokens*/\r\nevent BrodBurn(address indexed from, address indexed enduser, uint256 amount);\r\n\r\n/*RECEIVE APPROVAL & WITHDRAW TOC TOKENS*/\r\nfunction receiveApproval(address _from, uint256 _value, \r\naddress _token, bytes _extraData) external returns(bool){ \r\nTOC\r\nTOCCall = TOC(_token);\r\nTOCCall.transferFrom(_from,this,_value);\r\nreturn true;\r\n}\r\n\r\n/*AUTHORISE ADMINS*/\r\nfunction AuthAdmin (address _admin, bool _authority, uint256 _level) external \r\nreturns(bool){\r\nif((msg.sender != Mars) && (msg.sender != Mercury) && (msg.sender != Europa) &&\r\n(msg.sender != Jupiter) && (msg.sender != Neptune)) revert();      \r\nadmin[_admin].Authorised = _authority;\r\nadmin[_admin].Level = _level;\r\nreturn true;\r\n}\r\n\r\n/*ADD ADDRESSES TO ADDRESS BOOK*/\r\nfunction AuthAddr(address _tocaddr) external returns(bool){\r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 3 ) revert();\r\naddressbook[ContractAddr].TOCAddr = _tocaddr;\r\nreturn true;\r\n}\r\n\r\n/*AUTHORISE DAPPS*/\r\nfunction AuthDapps (address _dapp, bool _mint, bool _burn, bool _rate) external \r\nreturns(bool){\r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5) revert();\r\ndapps[_dapp].AuthoriseMint = _mint;\r\ndapps[_dapp].AuthoriseBurn = _burn;\r\ndapps[_dapp].AuthoriseRate = _rate;\r\nreturn true;\r\n}\r\n\r\n/*SUSPEND CONVERSIONS*/\r\nfunction AuthSuspend (bool _suspend) external returns(bool){\r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 3) revert();\r\nglobal[ContractAddr].Suspend = _suspend;\r\nreturn true;\r\n}\r\n\r\n/*SET GLOBAL RATE*/\r\nfunction SetRate (uint256 _globalrate) external returns(bool){\r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5) revert();\r\nglobal[ContractAddr].Rate = _globalrate;\r\nreturn true;\r\n}\r\n\r\n/*LET DAPPS ALLOCATE SPECIAL EXCHANGE RATES*/\r\nfunction SpecialRate (address _user, address _dapp, uint256 _amount, uint256 _rate) \r\nexternal returns(bool){\r\n/*conduct integrity check*/    \r\nif(dapps[msg.sender].AuthoriseRate == false) revert(); \r\nif(dapps[_dapp].AuthoriseRate == false) revert(); \r\ncoloured[_user][_dapp].Amount += _amount;\r\ncoloured[_user][_dapp].Rate = _rate;\r\nreturn true;\r\n}\r\n\r\n\r\n/*BLOCK POINTS REWARD*/\r\nfunction Reward(address r_to, uint256 r_amount) external returns (bool){\r\n/*conduct integrity check*/    \r\nif(dapps[msg.sender].AuthoriseMint == false) revert(); \r\n/*mint block point for beneficiary*/\r\nbalances[r_to] += r_amount;\r\n/*increase total supply*/\r\nTotalSupply += r_amount;\r\n/*broadcast mint*/\r\nemit BrodMint(msg.sender,r_to,r_amount);     \r\nreturn true;\r\n}\r\n\r\n/*GENERIC CONVERSION OF BLOCKPOINTS*/\r\nfunction ConvertBkp(uint256 b_amount) external returns (bool){\r\n/*conduct integrity check*/\r\nrequire(global[ContractAddr].Suspend == false);\r\nrequire(b_amount > 0);\r\nrequire(global[ContractAddr].Rate > 0);\r\n/*compute expected balance after conversion*/\r\npr.n1 = sub(balances[msg.sender],b_amount);\r\n/*check whether the converting address has enough block points to convert*/\r\nrequire(balances[msg.sender] >= b_amount); \r\n/*substract block points from converter and total supply*/\r\nbalances[msg.sender] -= b_amount;\r\nTotalSupply -= b_amount;\r\n/*determine toc liability*/\r\npr.n2 = mul(b_amount,global[ContractAddr].Rate);\r\n/*connect to toc contract*/\r\nTOC\r\nTOCCall = TOC(addressbook[ContractAddr].TOCAddr);\r\n/*check integrity of conversion operation*/\r\nassert(pr.n1 == balances[msg.sender]);\r\n/*send toc to message sender*/\r\nTOCCall.transfer(msg.sender,pr.n2);\r\nreturn true;\r\n}\r\n\r\n/*CONVERSION OF COLOURED BLOCKPOINTS*/\r\nfunction ConvertColouredBkp(address _dapp) external returns (bool){\r\n/*conduct integrity check*/\r\nrequire(global[ContractAddr].Suspend == false);\r\nrequire(coloured[msg.sender][_dapp].Rate > 0);\r\n/*determine conversion amount*/\r\nuint256 b_amount = coloured[msg.sender][_dapp].Amount;\r\nrequire(b_amount > 0);\r\n/*check whether the converting address has enough block points to convert*/\r\nrequire(balances[msg.sender] >= b_amount); \r\n/*compute expected balance after conversion*/\r\npr.n3 = sub(coloured[msg.sender][_dapp].Amount,b_amount);\r\npr.n4 = sub(balances[msg.sender],b_amount);\r\n/*substract block points from converter balances and total supply*/\r\ncoloured[msg.sender][_dapp].Amount -= b_amount;\r\nbalances[msg.sender] -= b_amount;\r\nTotalSupply -= b_amount;\r\n/*determine toc liability*/\r\npr.n5 = mul(b_amount,coloured[msg.sender][_dapp].Rate);\r\n/*connect to toc contract*/\r\nTOC\r\nTOCCall = TOC(addressbook[ContractAddr].TOCAddr);\r\n/*check integrity of conversion operation*/\r\nassert(pr.n3 == coloured[msg.sender][_dapp].Amount);\r\nassert(pr.n4 == balances[msg.sender]);\r\n/*send toc to message sender*/\r\nTOCCall.transfer(msg.sender,pr.n5);\r\nreturn true;\r\n}\r\n\r\n/*BURN BLOCK POINTS*/\r\nfunction Burn(address b_to, uint256 b_amount) external returns (bool){\r\n/*check if dapp can burn blockpoints*/    \r\nif(dapps[msg.sender].AuthoriseBurn == false) revert();    \r\n/*check whether the burning address has enough block points to burn*/\r\nrequire(balances[b_to] >= b_amount); \r\n/*substract blockpoints from burning address balance*/\r\nbalances[b_to] -= b_amount;\r\n/*substract blockpoints from total supply*/\r\nTotalSupply -= b_amount;\r\n/*broadcast burning*/\r\nemit BrodBurn(msg.sender, b_to,b_amount); \r\nreturn true;\r\n}\r\n\r\n/*SAFE MATHS*/\r\nfunction mul(uint256 a, uint256 b) public pure returns (uint256) {\r\nuint256 c = a * b;\r\nassert(a == 0 || c / a == b);\r\nreturn c;\r\n  }\r\nfunction sub(uint256 a, uint256 b) public pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }  \r\n  \r\n}///////////////////////////////////end of blockpoints contract","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_dapp\",\"type\":\"address\"},{\"name\":\"_mint\",\"type\":\"bool\"},{\"name\":\"_burn\",\"type\":\"bool\"},{\"name\":\"_rate\",\"type\":\"bool\"}],\"name\":\"AuthDapps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressbook\",\"outputs\":[{\"name\":\"TOCAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"coloured\",\"outputs\":[{\"name\":\"Amount\",\"type\":\"uint256\"},{\"name\":\"Rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalrate\",\"type\":\"uint256\"}],\"name\":\"SetRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b_amount\",\"type\":\"uint256\"}],\"name\":\"ConvertBkp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dapps\",\"outputs\":[{\"name\":\"AuthoriseMint\",\"type\":\"bool\"},{\"name\":\"AuthoriseBurn\",\"type\":\"bool\"},{\"name\":\"AuthoriseRate\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r_to\",\"type\":\"address\"},{\"name\":\"r_amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"Authorised\",\"type\":\"bool\"},{\"name\":\"Level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"bool\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"AuthAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_suspend\",\"type\":\"bool\"}],\"name\":\"AuthSuspend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b_to\",\"type\":\"address\"},{\"name\":\"b_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dapp\",\"type\":\"address\"}],\"name\":\"ConvertColouredBkp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"global\",\"outputs\":[{\"name\":\"Suspend\",\"type\":\"bool\"},{\"name\":\"Rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_dapp\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"SpecialRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tocaddr\",\"type\":\"address\"}],\"name\":\"AuthAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"enduser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BrodMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"enduser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BrodBurn\",\"type\":\"event\"}]","ContractName":"BlockPoints","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b50118b1f9bc2d593ba2667cec9904dc567f748c534384207eabd4b3d59dd38"}]}