{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n* @title Vivalid Token Contract\r\n* @dev ViV is an ERC-20 Standar Compliant Token\r\n* For more info https://vivalid.io\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin (partially)\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n* @title Admin parameters\r\n* @dev Define administration parameters for this contract\r\n*/\r\ncontract admined { //This token contract is administered\r\n    address public admin; //Admin address is public\r\n    bool public lockSupply; //Burn Lock flag\r\n\r\n    /**\r\n    * @dev Contract constructor\r\n    * define initial administrator\r\n    */\r\n    constructor() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        emit Admined(admin);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier supplyLock() { //A modifier to lock mint and burn transactions\r\n        require(lockSupply == false);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to set new admin address\r\n    * @param _newAdmin The address to transfer administration to\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        require(_newAdmin != 0);\r\n        admin = _newAdmin;\r\n        emit TransferAdminship(admin);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to set burn lock\r\n    * This function will be used after the burn process finish\r\n    */\r\n    function setSupplyLock(bool _flag) onlyAdmin public { //Only the admin can set a lock on supply\r\n        lockSupply = _flag;\r\n        emit SetSupplyLock(lockSupply);\r\n    }\r\n\r\n    //All admin actions have a log for public review\r\n    event SetSupplyLock(bool _set);\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20Token\r\n* @notice Token definition contract\r\n*/\r\ncontract ERC20Token is admined, ERC20 { //Standar definition of an ERC20Token\r\n    using SafeMath for uint256; //SafeMath is used for uint256 operations\r\n    mapping (address => uint256) internal balances; //A mapping of all balances per address\r\n    mapping (address => mapping (address => uint256)) internal allowed; //A mapping of all allowances\r\n    uint256 internal totalSupply_;\r\n\r\n    /**\r\n    * A mapping of frozen accounts and unfreeze dates\r\n    *\r\n    * In case your account balance is fronzen and you \r\n    * think it's an error please contact the support team\r\n    *\r\n    * This function is only intended to lock specific wallets\r\n    * as explained on project white paper\r\n    */\r\n    mapping (address => bool) frozen;\r\n    mapping (address => uint256) unfreezeDate;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n    * @notice Get the balance of an _who address.\r\n    * @param _who The address to be query.\r\n    */\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        return balances[_who];\r\n    }\r\n\r\n    /**\r\n    * @notice transfer _value tokens to address _to\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return success with boolean value true if done\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0)); //Invalid transfer\r\n        require(frozen[msg.sender]==false);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Get the allowance of an specified address to use another address balance.\r\n    * @param _owner The address of the owner of the tokens.\r\n    * @param _spender The address of the allowed spender.\r\n    * @return remaining with the allowance value\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\r\n    * @param _from The address where tokens comes.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return success with boolean value true if done\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0)); //Invalid transfer\r\n        require(frozen[_from]==false);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Assign allowance _value to _spender address to use the msg.sender balance\r\n    * @param _spender The address to be allowed to spend.\r\n    * @param _value The amount to be allowed.\r\n    * @return success with boolean value true\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn token of an specified address.\r\n    * @param _burnedAmount amount to burn.\r\n    */\r\n    function burnToken(uint256 _burnedAmount) onlyAdmin supplyLock public {\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\r\n        totalSupply_ = SafeMath.sub(totalSupply_, _burnedAmount);\r\n        emit Burned(msg.sender, _burnedAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Frozen account handler\r\n    * @param _target The address to being frozen.\r\n    * @param _flag The status of the frozen\r\n    * @param _timeInDays The amount of time the account becomes locked\r\n    */\r\n    function setFrozen(address _target,bool _flag,uint256 _timeInDays) public {\r\n        if(_flag == true){\r\n            require(msg.sender == admin); //Only admin\r\n            require(frozen[_target] == false); //Not already frozen\r\n            frozen[_target] = _flag;\r\n            unfreezeDate[_target] = now.add(_timeInDays * 1 days);\r\n\r\n            emit FrozenStatus(_target,_flag,unfreezeDate[_target]);\r\n\r\n        } else {\r\n            require(now >= unfreezeDate[_target]);\r\n            frozen[_target] = _flag;\r\n\r\n            emit FrozenStatus(_target,_flag,unfreezeDate[_target]);\r\n        }\r\n    }\r\n\r\n    event Burned(address indexed _target, uint256 _value);\r\n    event FrozenStatus(address indexed _target,bool _flag,uint256 _unfreezeDate);\r\n\r\n}\r\n\r\n/**\r\n* @title AssetViV\r\n* @notice ViV Token creation.\r\n* @dev ERC20 Token compliant\r\n*/\r\ncontract AssetViV is ERC20Token {\r\n    string public name = 'VIVALID';\r\n    uint8 public decimals = 18;\r\n    string public symbol = 'ViV';\r\n    string public version = '1';\r\n\r\n    /**\r\n    * @notice token contructor.\r\n    */\r\n    constructor() public {\r\n        totalSupply_ = 200000000 * 10 ** uint256(decimals); //Initial tokens supply 200M;\r\n        balances[msg.sender] = totalSupply_;\r\n        emit Transfer(0, this, totalSupply_);\r\n        emit Transfer(this, msg.sender, totalSupply_);       \r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim ANY token accidentally stuck on contract\r\n    * In case of claim of stuck tokens please contact contract owners\r\n    * Tokens to be claimed has to been strictly erc20 compliant\r\n    * We use the ERC20 interface declared before\r\n    */\r\n    function claimTokens(ERC20 _address, address _to) onlyAdmin public{\r\n        require(_to != address(0));\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(_to,remainder); //Transfer tokens to creator\r\n    }\r\n\r\n    \r\n    /**\r\n    * @notice this contract will revert on direct non-function calls, also it's not payable\r\n    * @dev Function to handle callback calls to contract\r\n    */\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"},{\"name\":\"_timeInDays\",\"type\":\"uint256\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setSupplyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_unfreezeDate\",\"type\":\"uint256\"}],\"name\":\"FrozenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetSupplyLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"}]","ContractName":"AssetViV","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0aa21640995869d76244c59a5fbde73c500e226ad16874ac8a7a079e9640d9c"}]}