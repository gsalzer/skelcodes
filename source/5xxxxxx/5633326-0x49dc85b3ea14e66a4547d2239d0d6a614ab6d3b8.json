{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract TokenSale is Ownable ,Pausable {\r\n  \r\n  uint256 public weiRaised;       \r\n  uint256 public saleHardcap;   \r\n  uint256 public personalMincap;  \r\n  uint256 public startTime;    \r\n  uint256 public endTime;       \r\n  bool    public isFinalized;     \r\n  \r\n  uint256 public mtStartTime; \r\n  uint256 public mtEndTime;      \r\n\r\n  mapping (address => uint256) public beneficiaryFunded; \r\n\r\n  function TokenSale() public \r\n    { \r\n      startTime = 1526634000; //  (2018.05.15 09:00:00 UTC);\r\n      endTime = 1527778800;   //  (2018.05.31 15:00:00 UTC);\r\n      saleHardcap = 17411.9813 * (1 ether);\r\n      personalMincap = 1 ether;\r\n      isFinalized = false;\r\n      weiRaised = 0x00;\r\n    }\r\n\r\n  function () public payable {\r\n    buyPresale();\r\n  }\r\n\r\n  function buyPresale() public payable \r\n  whenNotPaused\r\n  {\r\n    address beneficiary = msg.sender;\r\n    uint256 toFund = msg.value;  \r\n    // check validity\r\n    require(!isFinalized);\r\n    require(validPurchase());   \r\n        \r\n    uint256 postWeiRaised = SafeMath.add(weiRaised, toFund); \r\n    require(postWeiRaised <= saleHardcap);\r\n\r\n    weiRaised = SafeMath.add(weiRaised, toFund);     \r\n    beneficiaryFunded[beneficiary] = SafeMath.add(beneficiaryFunded[msg.sender], toFund);\r\n  }\r\n\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool validValue = msg.value >= personalMincap;                                                       \r\n    bool validTime = now >= startTime && now <= endTime && !checkMaintenanceTime(); \r\n    return validValue && !maxReached() && validTime;  \r\n  }\r\n\r\n  function maxReached() public constant returns (bool) {\r\n    return weiRaised >= saleHardcap;\r\n  }\r\n\r\n  function getNowTime() public constant returns(uint256) {\r\n      return now;\r\n  }\r\n\r\n  // Owner only Functions\r\n  function changeStartTime( uint64 newStartTime ) public onlyOwner {\r\n    startTime = newStartTime;\r\n  }\r\n\r\n  function changeEndTime( uint64 newEndTime ) public onlyOwner {\r\n    endTime = newEndTime;\r\n  }\r\n\r\n  function changeSaleHardcap( uint256 newsaleHardcap ) public onlyOwner {\r\n    saleHardcap = newsaleHardcap * (1 ether);\r\n  }\r\n\r\n  function changePersonalMincap( uint256 newpersonalMincap ) public onlyOwner {\r\n    personalMincap = newpersonalMincap * (1 ether);\r\n  }\r\n\r\n  function FinishTokensale() public onlyOwner {\r\n    require(maxReached() || now > endTime);\r\n    isFinalized = true;\r\n    \r\n    owner.transfer(address(this).balance);\r\n  }\r\n  \r\n  function changeMaintenanceTime(uint256 _starttime, uint256 _endtime) public onlyOwner{\r\n    mtStartTime = _starttime;\r\n    mtEndTime = _endtime;\r\n  }\r\n  \r\n  function checkMaintenanceTime() public view returns (bool)\r\n  {\r\n    uint256 datetime = now % (60 * 60 * 24);\r\n    return (datetime >= mtStartTime && datetime < mtEndTime);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"checkMaintenanceTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_starttime\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"changeMaintenanceTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStartTime\",\"type\":\"uint64\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndTime\",\"type\":\"uint64\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newpersonalMincap\",\"type\":\"uint256\"}],\"name\":\"changePersonalMincap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"personalMincap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FinishTokensale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newsaleHardcap\",\"type\":\"uint256\"}],\"name\":\"changeSaleHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f1f059969767966add711f9ce089115592dfb42a2a87d5bd863913459b7c2011"}]}