{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/* Adapted from strings.sol created by Nick Johnson <arachnid@notdot.net>\r\n * Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n * @title String & slice utility library for Solidity contracts.\r\n * @author Nick Johnson <arachnid@notdot.net>\r\n */\r\nlibrary strings {\r\n    \r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal pure returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private pure {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    \r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint cnt) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            cnt++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n     /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal pure returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n}\r\n\r\n/* Helper String Functions for Game Manager Contract\r\n * @title String Healpers\r\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\r\n */\r\ncontract StringHelpers {\r\n    using strings for *;\r\n    \r\n    function stringToBytes32(string memory source) internal returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) constant internal returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 _assetId) public view returns (address owner);\r\n  function approve(address _to, uint256 _assetId) public;\r\n  function transfer(address _to, uint256 _assetId) public;\r\n  function transferFrom(address _from, address _to, uint256 _assetId) public;\r\n  function implementsERC721() public pure returns (bool);\r\n  function takeOwnership(uint256 _assetId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n\r\n  // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n/* Controls game play state and access rights for game functions\r\n * @title Operational Control\r\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\r\n * Inspired and adapted from contract created by OpenZeppelin\r\n * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract OperationalControl {\r\n    // Facilitates access & control for the game.\r\n    // Roles:\r\n    //  -The Game Managers (Primary/Secondary): Has universal control of all game elements (No ability to withdraw)\r\n    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\r\n\r\n    /// @dev Emited when contract is upgraded\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public gameManagerPrimary;\r\n    address public gameManagerSecondary;\r\n    address public bankManager;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\r\n    bool public error = false;\r\n\r\n    /// @dev Operation modifiers for limiting access\r\n    modifier onlyGameManager() {\r\n        require(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBanker() {\r\n        require(msg.sender == bankManager);\r\n        _;\r\n    }\r\n\r\n    modifier anyOperator() {\r\n        require(\r\n            msg.sender == gameManagerPrimary ||\r\n            msg.sender == gameManagerSecondary ||\r\n            msg.sender == bankManager\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the GM.\r\n    function setPrimaryGameManager(address _newGM) external onlyGameManager {\r\n        require(_newGM != address(0));\r\n\r\n        gameManagerPrimary = _newGM;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the GM.\r\n    function setSecondaryGameManager(address _newGM) external onlyGameManager {\r\n        require(_newGM != address(0));\r\n\r\n        gameManagerSecondary = _newGM;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Banker.\r\n    function setBanker(address _newBK) external onlyGameManager {\r\n        require(_newBK != address(0));\r\n\r\n        bankManager = _newBK;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract has Error\r\n    modifier whenError {\r\n        require(error);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any Operator role to pause the contract.\r\n    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\r\n    function pause() external onlyGameManager whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\r\n    /// @notice This is public rather than external so it can be called by derived contracts. \r\n    function unpause() public onlyGameManager whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\r\n    /// @notice This is public rather than external so it can be called by derived contracts. \r\n    function hasError() public onlyGameManager whenPaused {\r\n        error = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\r\n    /// @notice This is public rather than external so it can be called by derived contracts. \r\n    function noError() public onlyGameManager whenPaused {\r\n        error = false;\r\n    }\r\n}\r\n\r\ncontract CSCCollectibleBase is ERC721, OperationalControl, StringHelpers {\r\n\r\n  /*** EVENTS ***/\r\n  /// @dev The Created event is fired whenever a new collectible comes into existence.\r\n  event CollectibleCreated(address owner, uint256 globalId, uint256 collectibleType, uint256 collectibleClass, uint256 sequenceId, bytes32 collectibleName, bool isRedeemed);\r\n  event Transfer(address from, address to, uint256 shipId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CSCPreSaleShip\";\r\n  string public constant SYMBOL = \"CSC\";\r\n  bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256('supportsInterface(bytes4)'));\r\n  bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n  /// @dev CSC Pre Sale Struct, having details of the ship\r\n  struct CSCPreSaleItem {\r\n\r\n    /// @dev asset ID i..e Local Index\r\n    uint256 assetId;\r\n\r\n    /// @dev name of the collectible stored in bytes\r\n    bytes32 collectibleName;\r\n\r\n    /// @dev Timestamp when bought\r\n    uint256 boughtTimestamp;\r\n\r\n    /// @dev Collectible Types (Voucher/Ship)\r\n    /// can be 0 - Voucher, 1 - Ship\r\n    uint256 collectibleType;\r\n\r\n    /// @dev Collectible Class (1 - Prometheus, 2 - Crosair, 3 - Intrepid)\r\n    uint256 collectibleClass;\r\n\r\n    // @dev owner address\r\n    address owner;\r\n\r\n    // @dev redeeme flag (to help whether it got redeemed or not)\r\n    bool isRedeemed;\r\n  }\r\n  \r\n  // @dev Mapping containing the reference to all CSC PreSaleItem\r\n  //mapping (uint256 => CSCPreSaleItem[]) public indexToPreSaleItem;\r\n\r\n  // @dev array of CSCPreSaleItem type holding information on the Ships\r\n  CSCPreSaleItem[] allPreSaleItems;\r\n\r\n  // Max Count for Voucher(s), Prometheus, Crosair & Intrepid Ships\r\n  uint256 public constant PROMETHEUS_SHIP_LIMIT = 300;\r\n  uint256 public constant INTREPID_SHIP_LIMIT = 1500;\r\n  uint256 public constant CROSAIR_SHIP_LIMIT = 600;\r\n  uint256 public constant PROMETHEUS_VOUCHER_LIMIT = 100;\r\n  uint256 public constant INTREPID_VOUCHER_LIMIT = 300;\r\n  uint256 public constant CROSAIR_VOUCHER_LIMIT = 200;\r\n\r\n  // Variable to keep a count of Prometheus/Intrepid/Crosair Minted\r\n  uint256 public prometheusShipMinted;\r\n  uint256 public intrepidShipMinted;\r\n  uint256 public crosairShipMinted;\r\n  uint256 public prometheusVouchersMinted;\r\n  uint256 public intrepidVouchersMinted;\r\n  uint256 public crosairVouchersMinted;\r\n\r\n  // @dev mapping which holds all the possible addresses which are allowed to interact with the contract\r\n  mapping (address => bool) approvedAddressList;\r\n\r\n  // @dev mapping holds the preSaleItem -> owner details\r\n  mapping (uint256 => address) public preSaleItemIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from preSaleItem to an address that has been approved to call\r\n  ///  transferFrom(). Each Ship can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public preSaleItemIndexToApproved;\r\n\r\n  /// @dev A mapping of preSaleItem Type to Type Sequence Number to Collectible\r\n  /// 0 - Voucher\r\n  /// 1 - Prometheus\r\n  /// 2 - Crosair\r\n  /// 3 - Intrepid\r\n  mapping (uint256 => mapping (uint256 => mapping ( uint256 => uint256 ) ) ) public preSaleItemTypeToSequenceIdToCollectible;\r\n\r\n  /// @dev A mapping from Pre Sale Item Type IDs to the Sequqence Number .\r\n  /// 0 - Voucher\r\n  /// 1 - Prometheus\r\n  /// 2 - Crosair\r\n  /// 3 - Intrepid\r\n  mapping (uint256 => mapping ( uint256 => uint256 ) ) public preSaleItemTypeToCollectibleCount;\r\n\r\n  /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n  ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n  ///  ERC-165 (obviously!) and ERC-721.\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n  {\r\n      // DEBUG ONLY\r\n      //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n      return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n  }\r\n\r\n  function getCollectibleDetails(uint256 _assetId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bool isRedeemed, address owner) {\r\n    CSCPreSaleItem memory _Obj = allPreSaleItems[_assetId];\r\n    assetId = _assetId;\r\n    sequenceId = _Obj.assetId;\r\n    collectibleType = _Obj.collectibleType;\r\n    collectibleClass = _Obj.collectibleClass;\r\n    owner = _Obj.owner;\r\n    isRedeemed = _Obj.isRedeemed;\r\n  }\r\n  \r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(address _to, uint256 _assetId) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _assetId));\r\n    preSaleItemIndexToApproved[_assetId] = _to;\r\n\r\n    Approval(msg.sender, _to, _assetId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _assetId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _assetId) public view returns (address owner) {\r\n    owner = preSaleItemIndexToOwner[_assetId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _assetId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = preSaleItemIndexToOwner[_assetId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _assetId));\r\n\r\n    _transfer(oldOwner, newOwner, _assetId);\r\n  }\r\n\r\n  /// @param _owner The owner whose ships tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire CSCShips array looking for emojis belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n        return new uint256[](0);\r\n    } else {\r\n        uint256[] memory result = new uint256[](tokenCount);\r\n        uint256 totalShips = totalSupply() + 1;\r\n        uint256 resultIndex = 0;\r\n\r\n        // We count on the fact that all CSC Ship Collectible have IDs starting at 0 and increasing\r\n        // sequentially up to the total count.\r\n        uint256 _assetId;\r\n\r\n        for (_assetId = 0; _assetId < totalShips; _assetId++) {\r\n            if (preSaleItemIndexToOwner[_assetId] == _owner) {\r\n                result[resultIndex] = _assetId;\r\n                resultIndex++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return allPreSaleItems.length - 1; //Removed 0 index\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(address _to, uint256 _assetId) public {\r\n    require(_addressNotNull(_to));\r\n    require(_owns(msg.sender, _assetId));\r\n\r\n    _transfer(msg.sender, _to, _assetId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _assetId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(address _from, address _to, uint256 _assetId) public {\r\n    require(_owns(_from, _assetId));\r\n    require(_approved(_to, _assetId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _assetId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) internal pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// @dev  For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _assetId) internal view returns (bool) {\r\n    return preSaleItemIndexToApproved[_assetId] == _to;\r\n  }\r\n\r\n  /// @dev For creating CSC Collectible\r\n  function _createCollectible(bytes32 _collectibleName, uint256 _collectibleType, uint256 _collectibleClass) internal returns(uint256) {\r\n    uint256 _sequenceId = uint256(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass]) + 1;\r\n\r\n    // These requires are not strictly necessary, our calling code should make\r\n    // sure that these conditions are never broken.\r\n    require(_sequenceId == uint256(uint32(_sequenceId)));\r\n    \r\n    CSCPreSaleItem memory _collectibleObj = CSCPreSaleItem(\r\n      _sequenceId,\r\n      _collectibleName,\r\n      0,\r\n      _collectibleType,\r\n      _collectibleClass,\r\n      address(0),\r\n      false\r\n    );\r\n\r\n    uint256 newCollectibleId = allPreSaleItems.push(_collectibleObj) - 1;\r\n    \r\n    preSaleItemTypeToSequenceIdToCollectible[_collectibleType][_collectibleClass][_sequenceId] = newCollectibleId;\r\n    preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] = _sequenceId;\r\n\r\n    // emit Created event\r\n    // CollectibleCreated(address owner, uint256 globalId, uint256 collectibleType, uint256 collectibleClass, uint256 sequenceId, bytes32[6] attributes, bool isRedeemed);\r\n    CollectibleCreated(address(this), newCollectibleId, _collectibleType, _collectibleClass, _sequenceId, _collectibleObj.collectibleName, false);\r\n    \r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), address(this), newCollectibleId);\r\n    \r\n    return newCollectibleId;\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _assetId) internal view returns (bool) {\r\n    return claimant == preSaleItemIndexToOwner[_assetId];\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Emoji to an address.\r\n  function _transfer(address _from, address _to, uint256 _assetId) internal {\r\n    // Updating the owner details of the ship\r\n    CSCPreSaleItem memory _shipObj = allPreSaleItems[_assetId];\r\n    _shipObj.owner = _to;\r\n    allPreSaleItems[_assetId] = _shipObj;\r\n\r\n    // Since the number of emojis is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n\r\n    //transfer ownership\r\n    preSaleItemIndexToOwner[_assetId] = _to;\r\n\r\n    // When creating new emojis _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete preSaleItemIndexToApproved[_assetId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _assetId);\r\n  }\r\n\r\n  /// @dev Checks if a given address currently has transferApproval for a particular CSCPreSaleItem.\r\n  /// 0 is a valid value as it will be the starter\r\n  function _approvedFor(address _claimant, uint256 _assetId) internal view returns (bool) {\r\n      return preSaleItemIndexToApproved[_assetId] == _claimant;\r\n  }\r\n\r\n  function _getCollectibleDetails (uint256 _assetId) internal view returns(CSCPreSaleItem) {\r\n    CSCPreSaleItem storage _Obj = allPreSaleItems[_assetId];\r\n    return _Obj;\r\n  }\r\n\r\n  /// @dev Helps in fetching the attributes of the ship depending on the ship\r\n  /// assetId : The actual ERC721 Asset ID\r\n  /// sequenceId : Index w.r.t Ship type\r\n  function getShipDetails(uint256 _sequenceId, uint256 _shipClass) external view returns (\r\n    uint256 assetId,\r\n    uint256 sequenceId,\r\n    string shipName,\r\n    uint256 collectibleClass,\r\n    uint256 boughtTimestamp,\r\n    address owner\r\n    ) {  \r\n    uint256 _assetId = preSaleItemTypeToSequenceIdToCollectible[1][_shipClass][_sequenceId];\r\n\r\n    CSCPreSaleItem storage _collectibleObj = allPreSaleItems[_assetId];\r\n    require(_collectibleObj.collectibleType == 1);\r\n\r\n    assetId = _assetId;\r\n    sequenceId = _sequenceId;\r\n    shipName = bytes32ToString(_collectibleObj.collectibleName);\r\n    collectibleClass = _collectibleObj.collectibleClass;\r\n    boughtTimestamp = _collectibleObj.boughtTimestamp;\r\n    owner = _collectibleObj.owner;\r\n  }\r\n\r\n  /// @dev Helps in fetching information regarding a Voucher\r\n  /// assetId : The actual ERC721 Asset ID\r\n  /// sequenceId : Index w.r.t Voucher Type\r\n  function getVoucherDetails(uint256 _sequenceId, uint256 _voucherClass) external view returns (\r\n    uint256 assetId,\r\n    uint256 sequenceId,\r\n    uint256 boughtTimestamp,\r\n    uint256 voucherClass,\r\n    address owner\r\n    ) {\r\n    uint256 _assetId = preSaleItemTypeToSequenceIdToCollectible[0][_voucherClass][_sequenceId];\r\n\r\n    CSCPreSaleItem storage _collectibleObj = allPreSaleItems[_assetId];\r\n    require(_collectibleObj.collectibleType == 0);\r\n\r\n    assetId = _assetId;\r\n    sequenceId = _sequenceId;\r\n    boughtTimestamp = _collectibleObj.boughtTimestamp;\r\n    voucherClass = _collectibleObj.collectibleClass;\r\n    owner = _collectibleObj.owner;\r\n  }\r\n\r\n  function _isActive(uint256 _assetId) internal returns(bool) {\r\n    CSCPreSaleItem memory _Obj = allPreSaleItems[_assetId];\r\n    return (_Obj.boughtTimestamp == 0);\r\n  }\r\n}\r\n\r\n/* Lucid Sight, Inc. ERC-721 CSC Collectilbe Sale Contract. \r\n * @title CSCCollectibleSale\r\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\r\n */\r\ncontract CSCCollectibleSale is CSCCollectibleBase {\r\n  event CollectibleBought (uint256 _assetId, address owner);\r\n  event PriceUpdated (uint256 collectibleClass, uint256 newPrice, uint256 oldPrice);\r\n\r\n  //  SHIP DATATYPES & CONSTANTS\r\n  // @dev ship Prices & price cap\r\n  uint256 public PROMETHEUS_SHIP_PRICE = 0.25 ether;\r\n  uint256 public INTREPID_SHIP_PRICE = 0.005 ether;\r\n  uint256 public CROSAIR_SHIP_PRICE = 0.1 ether;\r\n\r\n  uint256 public constant PROMETHEUS_MAX_PRICE = 0.85 ether;\r\n  uint256 public constant INTREPID_MAX_PRICE = 0.25 ether;\r\n  uint256 public constant CROSAIR_MAX_PRICE = 0.5 ether;\r\n\r\n  uint256 public constant PROMETHEUS_PRICE_INCREMENT = 0.05 ether;\r\n  uint256 public constant INTREPID_PRICE_INCREMENT = 0.002 ether;\r\n  uint256 public constant CROSAIR_PRICE_INCREMENT = 0.01 ether;\r\n\r\n  uint256 public constant PROMETHEUS_PRICE_THRESHOLD = 0.85 ether;\r\n  uint256 public constant INTREPID_PRICE_THRESHOLD = 0.25 ether;\r\n  uint256 public constant CROSAIR_PRICE_THRESHOLD = 0.5 ether;\r\n\r\n  uint256 public prometheusSoldCount;\r\n  uint256 public intrepidSoldCount;\r\n  uint256 public crosairSoldCount;\r\n\r\n  //  VOUCHER DATATYPES & CONSTANTS\r\n  uint256 public PROMETHEUS_VOUCHER_PRICE = 0.75 ether;\r\n  uint256 public INTREPID_VOUCHER_PRICE = 0.2 ether;\r\n  uint256 public CROSAIR_VOUCHER_PRICE = 0.35 ether;\r\n\r\n  uint256 public prometheusVoucherSoldCount;\r\n  uint256 public crosairVoucherSoldCount;\r\n  uint256 public intrepidVoucherSoldCount;\r\n  \r\n  /// @dev Mapping created store the amount of value a wallet address used to buy assets\r\n  mapping(address => uint256) addressToValue;\r\n\r\n  /// @dev Mapping to holde the balance of each address, i.e. addrs -> collectibleType -> collectibleClass -> balance\r\n  mapping(address => mapping(uint256 => mapping (uint256 => uint256))) addressToCollectibleTypeBalance;\r\n\r\n  function _bid(uint256 _assetId, uint256 _price,uint256 _collectibleType,uint256 _collectibleClass, address _buyer) internal {\r\n    CSCPreSaleItem memory _Obj = allPreSaleItems[_assetId];\r\n\r\n    if(_collectibleType == 1 && _collectibleClass == 1) {\r\n      require(_price == PROMETHEUS_SHIP_PRICE);\r\n      _Obj.owner = _buyer;\r\n      _Obj.boughtTimestamp = now;\r\n\r\n      addressToValue[_buyer] += _price;\r\n\r\n      prometheusSoldCount++;\r\n      if(prometheusSoldCount % 10 == 0){\r\n        if(PROMETHEUS_SHIP_PRICE < PROMETHEUS_PRICE_THRESHOLD){\r\n          PROMETHEUS_SHIP_PRICE +=  PROMETHEUS_PRICE_INCREMENT;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(_collectibleType == 1 && _collectibleClass == 2) {\r\n      require(_price == CROSAIR_SHIP_PRICE);\r\n      _Obj.owner = _buyer;\r\n      _Obj.boughtTimestamp = now;\r\n\r\n      addressToValue[_buyer] += _price;\r\n\r\n      crosairSoldCount++;\r\n      if(crosairSoldCount % 10 == 0){\r\n        if(CROSAIR_SHIP_PRICE < CROSAIR_PRICE_THRESHOLD){\r\n          CROSAIR_SHIP_PRICE += CROSAIR_PRICE_INCREMENT;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(_collectibleType == 1 && _collectibleClass == 3) {\r\n      require(_price == INTREPID_SHIP_PRICE);\r\n      _Obj.owner = _buyer;\r\n      _Obj.boughtTimestamp = now;\r\n\r\n      addressToValue[_buyer] += _price;\r\n\r\n      intrepidSoldCount++;\r\n      if(intrepidSoldCount % 10 == 0){\r\n        if(INTREPID_SHIP_PRICE < INTREPID_PRICE_THRESHOLD){\r\n          INTREPID_SHIP_PRICE += INTREPID_PRICE_INCREMENT;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(_collectibleType == 0 &&_collectibleClass == 1) {\r\n        require(_price == PROMETHEUS_VOUCHER_PRICE);\r\n        _Obj.owner = _buyer;\r\n        _Obj.boughtTimestamp = now;\r\n\r\n        addressToValue[_buyer] += _price;\r\n\r\n        prometheusVoucherSoldCount++;\r\n      }\r\n\r\n      if(_collectibleType == 0 && _collectibleClass == 2) {\r\n        require(_price == CROSAIR_VOUCHER_PRICE);\r\n        _Obj.owner = _buyer;\r\n        _Obj.boughtTimestamp = now;\r\n\r\n        addressToValue[_buyer] += _price;\r\n\r\n        crosairVoucherSoldCount++;\r\n      }\r\n      \r\n      if(_collectibleType == 0 && _collectibleClass == 3) {\r\n        require(_price == INTREPID_VOUCHER_PRICE);\r\n        _Obj.owner = _buyer;\r\n        _Obj.boughtTimestamp = now;\r\n\r\n        addressToValue[_buyer] += _price;\r\n\r\n        intrepidVoucherSoldCount++;\r\n      }\r\n\r\n    addressToCollectibleTypeBalance[_buyer][_collectibleType][_collectibleClass]++;\r\n\r\n    CollectibleBought(_assetId, _buyer);\r\n  }\r\n\r\n  function getCollectibleTypeBalance(address _owner, uint256 _collectibleType, uint256 _collectibleClass) external view returns(uint256) {\r\n    require(_owner != address(0));\r\n    return addressToCollectibleTypeBalance[_owner][_collectibleType][_collectibleClass];\r\n  }\r\n\r\n  function getCollectiblePrice(uint256 _collectibleType, uint256 _collectibleClass) external view returns(uint256 _price){\r\n\r\n    // For Ships\r\n    if(_collectibleType == 1 && _collectibleClass == 1) {\r\n      return PROMETHEUS_SHIP_PRICE;\r\n    }\r\n\r\n    if(_collectibleType == 1 && _collectibleClass == 2) {\r\n      return CROSAIR_SHIP_PRICE;\r\n    }\r\n\r\n    if(_collectibleType == 1 && _collectibleClass == 3) {\r\n      return INTREPID_SHIP_PRICE;\r\n    }\r\n\r\n    // For Vouchers\r\n    if(_collectibleType == 0 && _collectibleClass == 1) {\r\n      return PROMETHEUS_VOUCHER_PRICE;\r\n    }\r\n\r\n    if(_collectibleType == 0 && _collectibleClass == 2) {\r\n      return CROSAIR_VOUCHER_PRICE;\r\n    }\r\n\r\n    if(_collectibleType == 0 && _collectibleClass == 3) {\r\n      return INTREPID_VOUCHER_PRICE;\r\n    }\r\n  }\r\n}\r\n\r\n/* Lucid Sight, Inc. ERC-721 Collectibles. \r\n * @title LSNFT - Lucid Sight, Inc. Non-Fungible Token\r\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\r\n */\r\ncontract CSCPreSaleManager is CSCCollectibleSale {\r\n  event RefundClaimed(address owner, uint256 refundValue);\r\n\r\n  // Ship Names\r\n  string private constant prometheusShipName = \"Vulcan Harvester\";\r\n  string private constant crosairShipName = \"Phoenix Cruiser\";\r\n  string private constant intrepidShipName = \"Reaper Interceptor\";\r\n\r\n  bool CSCPreSaleInit = false;\r\n\r\n  /// @dev Constructor creates a reference to the NFT (ERC721) ownership contract\r\n  function CSCPreSaleManager() public {\r\n      require(msg.sender != address(0));\r\n      paused = true;\r\n      error = false;\r\n      gameManagerPrimary = msg.sender;\r\n  }\r\n\r\n  function addToApprovedAddress (address _newAddr) onlyGameManager {\r\n    require(_newAddr != address(0));\r\n    require(!approvedAddressList[_newAddr]);\r\n    approvedAddressList[_newAddr] = true;\r\n  }\r\n\r\n  function removeFromApprovedAddress (address _newAddr) onlyGameManager {\r\n    require(_newAddr != address(0));\r\n    require(approvedAddressList[_newAddr]);\r\n    approvedAddressList[_newAddr] = false;\r\n  }\r\n\r\n  function() external payable {\r\n  }\r\n\r\n  /// @dev Bid Function which call the interncal bid function\r\n  /// after doing all the pre-checks required to initiate a bid\r\n  function bid(uint256 _collectibleType, uint256 _collectibleClass) external payable {\r\n    require(msg.sender != address(0));\r\n    require(msg.sender != address(this));\r\n\r\n    require(_collectibleType >= 0 && _collectibleType <= 1);\r\n\r\n    require(_isActive(_assetId));\r\n\r\n    bytes32 collectibleName;\r\n\r\n    if(_collectibleType == 0){\r\n      collectibleName = bytes32(\"NoNameForVoucher\");\r\n      if(_collectibleClass == 1){\r\n        require(prometheusVouchersMinted < PROMETHEUS_VOUCHER_LIMIT);\r\n        collectibleName = stringToBytes32(prometheusShipName);\r\n        prometheusVouchersMinted++;\r\n      }\r\n      \r\n      if(_collectibleClass == 2){\r\n        require(crosairVouchersMinted < CROSAIR_VOUCHER_LIMIT);\r\n        crosairVouchersMinted++;\r\n      }\r\n\r\n      if(_collectibleClass == 3){\r\n        require(intrepidVoucherSoldCount < INTREPID_VOUCHER_LIMIT);\r\n        intrepidVouchersMinted++;\r\n      }\r\n    }\r\n\r\n    if(_collectibleType == 1){\r\n      if(_collectibleClass == 1){\r\n        require(prometheusShipMinted < PROMETHEUS_SHIP_LIMIT);\r\n        collectibleName = stringToBytes32(prometheusShipName);\r\n        prometheusShipMinted++;\r\n      }\r\n      \r\n      if(_collectibleClass == 2){\r\n        require(crosairShipMinted < CROSAIR_VOUCHER_LIMIT);\r\n        collectibleName = stringToBytes32(crosairShipName);\r\n        crosairShipMinted++;\r\n      }\r\n\r\n      if(_collectibleClass == 3){\r\n        require(intrepidShipMinted < INTREPID_SHIP_LIMIT);\r\n        collectibleName = stringToBytes32(intrepidShipName);\r\n        intrepidShipMinted++;\r\n      }\r\n    }\r\n\r\n    uint256 _assetId = _createCollectible(collectibleName, _collectibleType, _collectibleClass); \r\n\r\n    CSCPreSaleItem memory _Obj = allPreSaleItems[_assetId];\r\n\r\n    _bid(_assetId, msg.value, _Obj.collectibleType, _Obj.collectibleClass, msg.sender);\r\n    \r\n    _transfer(address(this), msg.sender, _assetId);\r\n  }\r\n\r\n  /// @dev Bid Function which call the interncal bid function\r\n  /// after doing all the pre-checks required to initiate a bid\r\n  function createReferralGiveAways(uint256 _collectibleType, uint256 _collectibleClass, address _toAddress) onlyGameManager external {\r\n    require(msg.sender != address(0));\r\n    require(msg.sender != address(this));\r\n\r\n    require(_collectibleType >= 0 && _collectibleType <= 1);\r\n\r\n    bytes32 collectibleName;\r\n\r\n    if(_collectibleType == 0){\r\n      collectibleName = bytes32(\"ReferralGiveAwayVoucher\");\r\n      if(_collectibleClass == 1){\r\n        collectibleName = stringToBytes32(prometheusShipName);\r\n      }\r\n      \r\n      if(_collectibleClass == 2){\r\n        crosairVouchersMinted++;\r\n      }\r\n\r\n      if(_collectibleClass == 3){\r\n        intrepidVouchersMinted++;\r\n      }\r\n    }\r\n\r\n    if(_collectibleType == 1){\r\n      if(_collectibleClass == 1){\r\n        collectibleName = stringToBytes32(prometheusShipName);\r\n      }\r\n      \r\n      if(_collectibleClass == 2){\r\n        collectibleName = stringToBytes32(crosairShipName);\r\n      }\r\n\r\n      if(_collectibleClass == 3){\r\n        collectibleName = stringToBytes32(intrepidShipName);\r\n      }\r\n    }\r\n\r\n    uint256 _assetId = _createCollectible(collectibleName, _collectibleType, _collectibleClass); \r\n\r\n    CSCPreSaleItem memory _Obj = allPreSaleItems[_assetId];\r\n    \r\n    _transfer(address(this), _toAddress, _assetId);\r\n  }\r\n\r\n  /// @dev Override unpause so it requires all external contract addresses\r\n  ///  to be set before contract can be unpaused. Also, we can't have\r\n  ///  newContractAddress set either, because then the contract was upgraded.\r\n  /// @notice This is public rather than external so we can call super.unpause\r\n  ///  without using an expensive CALL.\r\n  function unpause() public onlyGameManager whenPaused {\r\n      // Actually unpause the contract.\r\n      super.unpause();\r\n  }\r\n\r\n  /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n  ///  as well as any Ether sent directly to the contract address.\r\n  ///  Always transfers to the NFT (ERC721) contract, but can be called either by\r\n  ///  the owner or the NFT (ERC721) contract.\r\n  function withdrawBalance() onlyBanker {\r\n      // We are using this boolean method to make sure that even if one fails it will still work\r\n      bankManager.transfer(this.balance);\r\n  }\r\n\r\n  function claimRefund(address _ownerAddress) whenError {\r\n    uint256 refundValue = addressToValue[_ownerAddress];\r\n    addressToValue[_ownerAddress] = 0;\r\n\r\n    _ownerAddress.transfer(refundValue);\r\n    RefundClaimed(_ownerAddress, refundValue);\r\n  }\r\n  \r\n  function preSaleInit() onlyGameManager {\r\n    require(!CSCPreSaleInit);\r\n    require(allPreSaleItems.length == 0);\r\n      \r\n    CSCPreSaleInit = true;\r\n\r\n    //Fill in index 0 to null requests\r\n    CSCPreSaleItem memory _Obj = CSCPreSaleItem(0, stringToBytes32(\"DummyAsset\"), 0, 0, 0, address(this), true);\r\n    allPreSaleItems.push(_Obj);\r\n  }\r\n\r\n  function isRedeemed(uint256 _assetId) {\r\n    require(approvedAddressList[msg.sender]);\r\n\r\n    CSCPreSaleItem memory _Obj = allPreSaleItems[_assetId];\r\n    _Obj.isRedeemed = true;\r\n\r\n    allPreSaleItems[_assetId] = _Obj;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_VOUCHER_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intrepidSoldCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sequenceId\",\"type\":\"uint256\"},{\"name\":\"_shipClass\",\"type\":\"uint256\"}],\"name\":\"getShipDetails\",\"outputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"name\":\"shipName\",\"type\":\"string\"},{\"name\":\"collectibleClass\",\"type\":\"uint256\"},{\"name\":\"boughtTimestamp\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intrepidVoucherSoldCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameManagerSecondary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prometheusSoldCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_PRICE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_MAX_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_SHIP_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sequenceId\",\"type\":\"uint256\"},{\"name\":\"_voucherClass\",\"type\":\"uint256\"}],\"name\":\"getVoucherDetails\",\"outputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"name\":\"boughtTimestamp\",\"type\":\"uint256\"},{\"name\":\"voucherClass\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prometheusVouchersMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prometheusVoucherSoldCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"removeFromApprovedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"isRedeemed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crosairShipMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_VOUCHER_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_PRICE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleItemTypeToSequenceIdToCollectible\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_PRICE_INCREMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_PRICE_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_MAX_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_PRICE_INCREMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_SHIP_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collectibleType\",\"type\":\"uint256\"},{\"name\":\"_collectibleClass\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_collectibleType\",\"type\":\"uint256\"},{\"name\":\"_collectibleClass\",\"type\":\"uint256\"}],\"name\":\"getCollectiblePrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"getCollectibleDetails\",\"outputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"name\":\"collectibleType\",\"type\":\"uint256\"},{\"name\":\"collectibleClass\",\"type\":\"uint256\"},{\"name\":\"isRedeemed\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crosairSoldCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameManagerPrimary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_VOUCHER_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crosairVoucherSoldCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGM\",\"type\":\"address\"}],\"name\":\"setSecondaryGameManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collectibleType\",\"type\":\"uint256\"},{\"name\":\"_collectibleClass\",\"type\":\"uint256\"},{\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"createReferralGiveAways\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleItemIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"noError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crosairVouchersMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_PRICE_INCREMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_SHIP_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleItemIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preSaleInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_SHIP_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hasError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intrepidVouchersMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGM\",\"type\":\"address\"}],\"name\":\"setPrimaryGameManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_VOUCHER_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"addToApprovedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"error\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_VOUCHER_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prometheusShipMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROSAIR_MAX_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_VOUCHER_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBK\",\"type\":\"address\"}],\"name\":\"setBanker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_collectibleType\",\"type\":\"uint256\"},{\"name\":\"_collectibleClass\",\"type\":\"uint256\"}],\"name\":\"getCollectibleTypeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMETHEUS_SHIP_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intrepidShipMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleItemTypeToCollectibleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTREPID_SHIP_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refundValue\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CollectibleBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"collectibleClass\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"globalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collectibleType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collectibleClass\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collectibleName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isRedeemed\",\"type\":\"bool\"}],\"name\":\"CollectibleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"shipId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CSCPreSaleManager","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://38cdc13a2c0dd457f52c9818ed7f46bcdb2a25664144fa813fd6198b86b475f9"}]}