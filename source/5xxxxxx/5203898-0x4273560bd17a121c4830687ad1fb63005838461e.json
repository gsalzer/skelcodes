{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * BRX.SPACE (contact@brx.space)\r\n * \r\n * BRX token is a virtual token, governed by ERC20-compatible\r\n * Ethereum Smart Contract and secured by Ethereum Blockchain\r\n *\r\n * The official website is https://brx.space\r\n * \r\n * The uints are all in wei and atto tokens (*10^-18)\r\n\r\n * The contract code itself, as usual, is at the end, after all the connected libraries\r\n * Developed by 262dfb6c55bf6ac215fac30181bdbfb8a2872cc7e3ea7cffe3a001621bb559e2\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint a, uint b) internal pure returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * Fix for the ERC20 short address attack  \r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n   require(msg.data.length >= size + 4);\r\n   _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_to != address(0) &&\r\n        _value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n    require(_to != address(0) &&\r\n        _value <= balances[_from] &&\r\n        _value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract BRXToken is StandardToken, Ownable {\r\n  using SafeMath for uint;\r\n\r\n  //---------------  Info for ERC20 explorers  -----------------//\r\n  string public constant name = \"BRX Coin\";\r\n  string public constant symbol = \"BRX\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  //----------------------  Constants  -------------------------//\r\n  uint private constant atto = 1000000000000000000;\r\n  uint private constant INITIAL_SUPPLY = 15000000 * atto; // 15 mln BRX. Impossible to mint more than this\r\n  uint public totalSupply = INITIAL_SUPPLY;\r\n\r\n  //----------------------  Variables  -------------------------//\r\n  // Made up ICO address (designating the token pool reserved for ICO, no one has access to it)\r\n  address public ico_address = 0x1F01f01f01f01F01F01f01F01F01f01F01f01F01;\r\n  address public teamWallet = 0x58096c1dCd5f338530770B1f6Fe0AcdfB90Cc87B;\r\n  address public addrBRXPay = 0x2F02F02F02F02f02f02f02f02F02F02f02f02f02;\r\n\r\n  uint private current_supply = 0; // Holding the number of all the coins in existence\r\n  uint private ico_starting_supply = 0; // How many atto tokens *were* available for sale at the beginning of the ICO\r\n  uint private current_price_atto_tokens_per_wei = 0; // Holding current price (determined by the algorithm in buy())\r\n\r\n  //--------------  Flags describing ICO stages  ---------------//\r\n  bool private preSoldSharesDistributed = false; // Prevents accidental re-distribution of shares\r\n  bool private isICOOpened = false;\r\n  bool private isICOClosed = false;\r\n  // 3 stages:\r\n  // Contract has just been deployed and initialized. isICOOpened == false, isICOClosed == false\r\n  // ICO has started, now anybody can buy(). isICOOpened == true, isICOClosed == false\r\n  // ICO has finished, now the team can receive the ether. isICOOpened == false, isICOClosed == true\r\n\r\n  //-------------------  Founder Members  ----------------------//\r\n  uint public founderMembers = 0;\r\n  mapping(uint => address) private founderOwner;\r\n  mapping(address => uint) founderMembersInvest;\r\n  \r\n  //----------------------  Premiums  --------------------------//\r\n  uint[] private premiumPacks;\r\n  mapping(address => bool) private premiumICOMember;\r\n  mapping(address => uint) private premiumPacksPaid;\r\n  mapping(address => bool) public frozenAccounts;\r\n\r\n  //-----------------------  Events  ---------------------------//\r\n  event ICOOpened();\r\n  event ICOClosed();\r\n\r\n  event PriceChanged(uint old_price, uint new_price);\r\n  event SupplyChanged(uint supply, uint old_supply);\r\n\r\n  event FrozenFund(address _from, bool _freeze);\r\n\r\n  event BRXAcquired(address account, uint amount_in_wei, uint amount_in_brx);\r\n  event BRXNewFounder(address account, uint amount_in_brx);\r\n\r\n  // ***************************************************************************\r\n  // Constructor\r\n\r\n  function BRXToken() public {\r\n    // Some percentage of the tokens is already reserved by early employees and investors\r\n    // Here we're initializing their balances\r\n    distributePreSoldShares();\r\n\r\n    // Starting price\r\n    current_price_atto_tokens_per_wei = calculateCurrentPrice(1);\r\n\r\n    // Some other initializations\r\n    premiumPacks.length = 0;\r\n  }\r\n\r\n  // Sending ether directly to the contract invokes buy() and assigns tokens to the sender\r\n  function () public payable {\r\n    buy();\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(\r\n    address tokenAddress, uint tokens\r\n  ) public onlyOwner\r\n    returns (bool success) {\r\n    return StandardToken(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n  // ***************************************************************************\r\n\r\n  // Buy token by sending ether here\r\n  //\r\n  // Price is being determined by the algorithm in recalculatePrice()\r\n  // You can also send the ether directly to the contract address\r\n  function buy() public payable {\r\n    require(msg.value != 0 && isICOOpened == true && isICOClosed == false);\r\n\r\n    // Deciding how many tokens can be bought with the ether received\r\n    uint tokens = getAttoTokensAmountPerWeiInternal(msg.value);\r\n\r\n    // Don't allow to buy more than 1% per transaction (secures from huge investors swalling the whole thing in 1 second)\r\n    uint allowedInOneTransaction = current_supply / 100;\r\n    require(tokens < allowedInOneTransaction &&\r\n        tokens <= balances[ico_address]);\r\n\r\n    // Transfer from the ICO pool\r\n    balances[ico_address] = balances[ico_address].sub(tokens); // if not enough, will throw\r\n    balances[msg.sender] = balances[msg.sender].add(tokens);\r\n    premiumICOMember[msg.sender] = true;\r\n    \r\n    // Check if sender has become a founder member\r\n    if (balances[msg.sender] >= 2000000000000000000000) {\r\n        if (founderMembersInvest[msg.sender] == 0) {\r\n            founderOwner[founderMembers] = msg.sender;\r\n            founderMembers++; BRXNewFounder(msg.sender, balances[msg.sender]);\r\n        }\r\n        founderMembersInvest[msg.sender] = balances[msg.sender];\r\n    }\r\n\r\n    // Kick the price changing algo\r\n    uint old_price = current_price_atto_tokens_per_wei;\r\n    current_price_atto_tokens_per_wei = calculateCurrentPrice(getAttoTokensBoughtInICO());\r\n    if (current_price_atto_tokens_per_wei == 0) current_price_atto_tokens_per_wei = 1; // in case it is too small that it gets rounded to zero\r\n    if (current_price_atto_tokens_per_wei > old_price) current_price_atto_tokens_per_wei = old_price; // in case some weird overflow happens\r\n\r\n    // Broadcasting price change event\r\n    if (old_price != current_price_atto_tokens_per_wei) PriceChanged(old_price, current_price_atto_tokens_per_wei);\r\n\r\n    // Broadcasting the buying event\r\n    BRXAcquired(msg.sender, msg.value, tokens);\r\n  }\r\n\r\n  // Formula for the dynamic price change algorithm\r\n  function calculateCurrentPrice(\r\n    uint attoTokensBought\r\n  ) private pure\r\n    returns (uint result) {\r\n    // see http://www.wolframalpha.com/input/?i=f(x)+%3D+395500000+%2F+(x+%2B+150000)+-+136\r\n    // mixing safe and usual math here because the division will throw on inconsistency\r\n    return (395500000 / ((attoTokensBought / atto) + 150000)).sub(136);\r\n  }\r\n\r\n  // ***************************************************************************\r\n  // Functions for the contract owner\r\n\r\n  function openICO() public onlyOwner {\r\n    require(isICOOpened == false && isICOClosed == false);\r\n    isICOOpened = true;\r\n\r\n    ICOOpened();\r\n  }\r\n  function closeICO() public onlyOwner {\r\n    require(isICOClosed == false && isICOOpened == true);\r\n\r\n    isICOOpened = false;\r\n    isICOClosed = true;\r\n\r\n    // Redistribute ICO Tokens that were not bought as the first premiums\r\n    premiumPacks.length = 1;\r\n    premiumPacks[0] = balances[ico_address];\r\n    balances[ico_address] = 0;\r\n\r\n    ICOClosed();\r\n  }\r\n  function pullEtherFromContract() public onlyOwner {\r\n    require(isICOClosed == true); // Only when ICO is closed\r\n    if (!teamWallet.send(this.balance)) {\r\n      revert();\r\n    }\r\n  }\r\n  function freezeAccount(\r\n    address _from, bool _freeze\r\n  ) public onlyOwner\r\n    returns (bool) {\r\n    frozenAccounts[_from] = _freeze;\r\n    FrozenFund(_from, _freeze);  \r\n    return true;\r\n  }\r\n  function setNewBRXPay(\r\n    address newBRXPay\r\n  ) public onlyOwner {\r\n    require(newBRXPay != address(0));\r\n    addrBRXPay = newBRXPay;\r\n  }\r\n  function transferFromBRXPay(\r\n    address _from, address _to, uint _value\r\n  ) public allowedPayments\r\n    returns (bool) {\r\n    require(msg.sender == addrBRXPay && balances[_to].add(_value) > balances[_to] &&\r\n    _value <= balances[_from] && !frozenAccounts[_from] &&\r\n    !frozenAccounts[_to] && _to != address(0));\r\n    \r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function setCurrentPricePerWei(\r\n    uint _new_price  \r\n  ) public onlyOwner\r\n  returns (bool) {\r\n    require(isICOClosed == true && _new_price > 0); // Only when ICO is closed\r\n    uint old_price = current_price_atto_tokens_per_wei;\r\n    current_price_atto_tokens_per_wei = _new_price;\r\n    PriceChanged(old_price, current_price_atto_tokens_per_wei);\r\n  }\r\n\r\n  // ***************************************************************************\r\n  // Some percentage of the tokens is already reserved by early employees and investors\r\n  // Here we're initializing their balances\r\n\r\n  function distributePreSoldShares() private onlyOwner {\r\n    // Making it impossible to call this function twice\r\n    require(preSoldSharesDistributed == false);\r\n    preSoldSharesDistributed = true;\r\n\r\n    // Values are in atto tokens\r\n    balances[0xAEC5cbcCF89fc25e955A53A5a015f7702a14b629] = 7208811 * atto;\r\n    balances[0xAECDCB2a8e2cFB91869A9af30050BEa038034949] = 4025712 * atto;\r\n    balances[0xAECF0B1b6897195295FeeD1146F3732918a5b3E4] = 300275 * atto;\r\n    balances[0xAEC80F0aC04f389E84F3f4b39827087e393EB229] = 150000 * atto;\r\n    balances[0xAECc9545385d858D3142023d3c298a1662Aa45da] = 150000 * atto;\r\n    balances[0xAECE71616d07F609bd2CbD4122FbC9C4a2D11A9D] = 90000 * atto;\r\n    balances[0xAECee3E9686825e0c8ea65f1bC8b1aB613545B8e] = 75000 * atto;\r\n    balances[0xAECC8E8908cE17Dd6dCFFFDCCD561696f396148F] = 202 * atto;\r\n    current_supply = (7208811 + 4025712 + 300275 + 150000 + 150000 + 90000 + 75000 + 202) * atto;\r\n\r\n    // Sending the rest to ICO pool\r\n    balances[ico_address] = INITIAL_SUPPLY.sub(current_supply);\r\n\r\n    // Initializing the supply variables\r\n    ico_starting_supply = balances[ico_address];\r\n    current_supply = INITIAL_SUPPLY;\r\n    SupplyChanged(0, current_supply);\r\n  }\r\n\r\n  // ***************************************************************************\r\n  // Some useful getters (although you can just query the public variables)\r\n\r\n  function getIcoStatus() public view\r\n    returns (string result) {\r\n    return (isICOClosed) ? 'closed' : (isICOOpened) ? 'opened' : 'not opened' ;\r\n  }\r\n  function getCurrentPricePerWei() public view\r\n    returns (uint result) {\r\n    return current_price_atto_tokens_per_wei;\r\n  }\r\n  function getAttoTokensAmountPerWeiInternal(\r\n    uint value\r\n  ) public payable\r\n    returns (uint result) {\r\n    return value * current_price_atto_tokens_per_wei;\r\n  }\r\n  function getAttoTokensAmountPerWei(\r\n    uint value\r\n  ) public view\r\n  returns (uint result) {\r\n    return value * current_price_atto_tokens_per_wei;\r\n  }\r\n  function getAttoTokensLeftForICO() public view\r\n    returns (uint result) {\r\n    return balances[ico_address];\r\n  }\r\n  function getAttoTokensBoughtInICO() public view\r\n    returns (uint result) {\r\n    return ico_starting_supply - getAttoTokensLeftForICO();\r\n  }\r\n  function getPremiumPack(uint index) public view\r\n    returns (uint premium) {\r\n    return premiumPacks[index];\r\n  }\r\n  function getPremiumsAvailable() public view\r\n    returns (uint length) {\r\n    return premiumPacks.length;\r\n  }\r\n  function getBalancePremiumsPaid(\r\n    address account\r\n  ) public view\r\n    returns (uint result) {\r\n    return premiumPacksPaid[account];\r\n  }\r\n  function getAttoTokensToBeFounder() public view\r\n  returns (uint result) {\r\n    return 2000000000000000000000 / getCurrentPricePerWei();\r\n  }\r\n  function getFounderMembersInvest(\r\n    address account\r\n  ) public view\r\n    returns (uint result) {\r\n    return founderMembersInvest[account];\r\n  }\r\n  function getFounderMember(\r\n    uint index\r\n  ) public onlyOwner view\r\n    returns (address account) {\r\n    require(founderMembers >= index && founderOwner[index] != address(0));\r\n    return founderOwner[index];\r\n  }\r\n\r\n  // ***************************************************************************\r\n  // Premiums\r\n\r\n  function sendPremiumPack(\r\n    uint amount\r\n  ) public onlyOwner allowedPayments {\r\n    premiumPacks.length += 1;\r\n    premiumPacks[premiumPacks.length-1] = amount;\r\n    balances[msg.sender] = balances[msg.sender].sub(amount); // will throw and revert the whole thing if doesn't have this amount\r\n  }\r\n  function getPremiums() public allowedPayments\r\n    returns (uint amount) {\r\n    require(premiumICOMember[msg.sender]);\r\n    if (premiumPacks.length > premiumPacksPaid[msg.sender]) {\r\n      uint startPackIndex = premiumPacksPaid[msg.sender];\r\n      uint finishPackIndex = premiumPacks.length - 1;\r\n      uint owingTotal = 0;\r\n      for(uint i = startPackIndex; i <= finishPackIndex; i++) {\r\n        if (current_supply != 0) { // just in case\r\n          uint owing = balances[msg.sender] * premiumPacks[i] / current_supply;\r\n          balances[msg.sender] = balances[msg.sender].add(owing);\r\n          owingTotal = owingTotal + owing;\r\n        }\r\n      }\r\n      premiumPacksPaid[msg.sender] = premiumPacks.length;\r\n      return owingTotal;\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  // ***************************************************************************\r\n  // Overriding payment functions to take control over the logic\r\n\r\n  modifier allowedPayments() {\r\n    // Don't allow to transfer coins until the ICO ends\r\n    require(isICOOpened == false && isICOClosed == true && !frozenAccounts[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function transferFrom(\r\n    address _from, address _to, uint _value\r\n  ) public allowedPayments\r\n    returns (bool) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function transfer(\r\n    address _to, uint _value\r\n  ) public onlyPayloadSize(2 * 32) allowedPayments\r\n    returns (bool) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPremiums\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFounderMember\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_price\",\"type\":\"uint256\"}],\"name\":\"setCurrentPricePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrBRXPay\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAttoTokensAmountPerWeiInternal\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendPremiumPack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBRXPay\",\"type\":\"address\"}],\"name\":\"setNewBRXPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalancePremiumsPaid\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPremiumsAvailable\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFounderMembersInvest\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPremiumPack\",\"outputs\":[{\"name\":\"premium\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullEtherFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAttoTokensAmountPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromBRXPay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensBoughtInICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensToBeFounder\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPricePerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoStatus\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensLeftForICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"old_supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_in_wei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_in_brx\",\"type\":\"uint256\"}],\"name\":\"BRXAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_in_brx\",\"type\":\"uint256\"}],\"name\":\"BRXNewFounder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BRXToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://97885bf7ee626bb9e8de0f9d3533f08d73bd0b4808e9dbd92e08b208f72f70c6"}]}