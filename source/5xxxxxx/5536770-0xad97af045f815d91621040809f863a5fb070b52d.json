{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n    /**\r\n    * @title ERC20Basic\r\n    * @dev Simpler version of ERC20 interface\r\n    * @dev see https://github.com/ethereum/EIPs/issues/179\r\n    */\r\n    contract ERC20Basic {\r\n     function totalSupply() public view returns (uint256);\r\n     function balanceOf(address who) public view returns (uint256);\r\n     function transfer(address to, uint256 value) public returns (bool);\r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n   }\r\n    /**\r\n    * @title Ownable\r\n    * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n    * functions, this simplifies the implementation of \"user permissions\".\r\n    */\r\n    contract Ownable {\r\n     address public owner;\r\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n     /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n      constructor() public {\r\n       owner = msg.sender;\r\n     }\r\n     /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n      modifier onlyOwner() {\r\n       require(msg.sender == owner);\r\n       _;\r\n     }\r\n     /**\r\n      * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n      * @param newOwner The address to transfer ownership to.\r\n      */\r\n      function transferOwnership(address newOwner) public onlyOwner {\r\n       require(newOwner != address(0));\r\n       emit OwnershipTransferred(owner, newOwner);\r\n       owner = newOwner;\r\n     }\r\n   }\r\n\r\n\r\n\r\n    /**\r\n    * @title Pausable\r\n    * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n    */\r\n    contract Pausable is Ownable {\r\n     event Pause();\r\n     event Unpause();\r\n\r\n     bool public paused = false;\r\n\r\n\r\n     /**\r\n      * @dev Modifier to make a function callable only when the contract is not paused.\r\n      */\r\n      modifier whenNotPaused() {\r\n       require(!paused);\r\n       _;\r\n     }\r\n\r\n     /**\r\n      * @dev Modifier to make a function callable only when the contract is paused.\r\n      */\r\n      modifier whenPaused() {\r\n       require(paused);\r\n       _;\r\n     }\r\n\r\n     /**\r\n      * @dev called by the owner to pause, triggers stopped state\r\n      */\r\n      function pause() onlyOwner whenNotPaused public {\r\n       paused = true;\r\n       emit Pause();\r\n     }\r\n\r\n     /**\r\n      * @dev called by the owner to unpause, returns to normal state\r\n      */\r\n      function unpause() onlyOwner whenPaused public {\r\n       paused = false;\r\n       emit Unpause();\r\n     }\r\n   }\r\n\r\n    /**\r\n    * @title Whitelist\r\n    * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n    * @dev This simplifies the implementation of \"user permissions\".\r\n    */\r\n    contract Whitelist is Pausable {\r\n     mapping(address => bool) public whitelist;\r\n\r\n     event WhitelistedAddressAdded(address addr);\r\n     event WhitelistedAddressRemoved(address addr);\r\n     /**\r\n      * @dev Throws if called by any account that's not whitelisted.\r\n      */\r\n      modifier onlyWhitelisted() {\r\n       require(whitelist[msg.sender]);\r\n       _;\r\n     }\r\n     /**\r\n      * @dev add an address to the whitelist\r\n      * @param addr address\r\n      * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n      */\r\n      function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\r\n       if (!whitelist[addr]) {\r\n         whitelist[addr] = true;\r\n         emit WhitelistedAddressAdded(addr);\r\n         success = true;\r\n       }\r\n     }\r\n     /**\r\n      * @dev add addresses to the whitelist\r\n      * @param addrs addresses\r\n      * @return true if at least one address was added to the whitelist,\r\n      * false if all addresses were already in the whitelist\r\n      */\r\n      function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n       for (uint256 i = 0; i < addrs.length; i++) {\r\n         if (addAddressToWhitelist(addrs[i])) {\r\n           success = true;\r\n         }\r\n       }\r\n     }\r\n     /**\r\n      * @dev remove an address from the whitelist\r\n      * @param addr address\r\n      * @return true if the address was removed from the whitelist,\r\n      * false if the address wasn't in the whitelist in the first place\r\n      */\r\n      function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n       if (whitelist[addr]) {\r\n         whitelist[addr] = false;\r\n         emit WhitelistedAddressRemoved(addr);\r\n         success = true;\r\n       }\r\n     }\r\n     /**\r\n      * @dev remove addresses from the whitelist\r\n      * @param addrs addresses\r\n      * @return true if at least one address was removed from the whitelist,\r\n      * false if all addresses weren't in the whitelist in the first place\r\n      */\r\n      function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n       for (uint256 i = 0; i < addrs.length; i++) {\r\n         if (removeAddressFromWhitelist(addrs[i])) {\r\n           success = true;\r\n         }\r\n       }\r\n     }\r\n   }\r\n    /**\r\n    * @title ERC20 interface\r\n    * @dev see https://github.com/ethereum/EIPs/issues/20\r\n    */\r\n    contract ERC20 is ERC20Basic {\r\n     function allowance(address owner, address spender) public view returns (uint256);\r\n     function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n     function approve(address spender, uint256 value) public returns (bool);\r\n     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   }\r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    library SafeMath {\r\n     /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       if (a == 0) {\r\n         return 0;\r\n       }\r\n       uint256 c = a * b;\r\n       assert(c / a == b);\r\n       return c;\r\n     }\r\n     /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n       uint256 c = a / b;\r\n       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n       return c;\r\n     }\r\n     /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       assert(b <= a);\r\n       return a - b;\r\n     }\r\n     /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       uint256 c = a + b;\r\n       assert(c >= a);\r\n       return c;\r\n     }\r\n   }\r\n    /**\r\n    * @title Crowdsale\r\n    * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n    * allowing investors to purchase tokens with ether. This contract implements\r\n    * such functionality in its most fundamental form and can be extended to provide additional\r\n    * functionality and/or custom behavior.\r\n    * The external interface represents the basic interface for purchasing tokens, and conform\r\n    * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n    * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n    * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n    * behavior.\r\n    */\r\n    contract Crowdsale is Whitelist{\r\n     using SafeMath for uint256;\r\n     // The token being sold\r\n     MiniMeToken public token;\r\n     // Address where funds are collected\r\n     address public wallet;\r\n     // How many token units a buyer gets per wei\r\n     uint256 public rate = 6120;\r\n     // Amount of tokens sold\r\n     uint256 public tokensSold;\r\n    //Star of the crowdsale\r\n     uint256 startTime;\r\n\r\n\r\n\r\n     /**\r\n      * Event for token purchase logging\r\n      * @param purchaser who paid for the tokens\r\n      * @param beneficiary who got the tokens\r\n      * @param value weis paid for purchase\r\n      * @param amount amount of tokens purchased\r\n      */\r\n      event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n      event buyx(address buyer, address contractAddr, uint256 amount);\r\n\r\n      constructor(address _wallet, MiniMeToken _token, uint256 starttime) public{\r\n\r\n       require(_wallet != address(0));\r\n       require(_token != address(0));\r\n\r\n       wallet = _wallet;\r\n       token = _token;\r\n       startTime = starttime;\r\n     }\r\n     function setCrowdsale(address _wallet, MiniMeToken _token, uint256 starttime) public{\r\n\r\n\r\n       require(_wallet != address(0));\r\n       require(_token != address(0));\r\n\r\n       wallet = _wallet;\r\n       token = _token;\r\n       startTime = starttime;\r\n     }\r\n\r\n\r\n\r\n     // -----------------------------------------\r\n     // Crowdsale external interface\r\n     // -----------------------------------------\r\n     /**\r\n      *  fallback function ***DO NOT OVERRIDE***\r\n      */\r\n      function () external whenNotPaused payable {\r\n        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\r\n        buyTokens(msg.sender);\r\n      }\r\n     /**\r\n      * @dev low level token purchase ***DO NOT OVERRIDE***\r\n      * @param _beneficiary Address performing the token purchase\r\n      */\r\n     function buyTokens(address _beneficiary) public whenNotPaused payable {\r\n      \r\n       if ((tokensSold > 20884500000000000000000000 ) && (tokensSold <= 30791250000000000000000000)) {\r\n         rate = 5967;\r\n       }\r\n       else if ((tokensSold > 30791250000000000000000000) && (tokensSold <= 39270000000000000000000000)) {\r\n        rate = 5865;\r\n       }\r\n       else if ((tokensSold > 39270000000000000000000000) && (tokensSold <= 46856250000000000000000000)) {\r\n        rate = 5610;\r\n       }\r\n       else if ((tokensSold > 46856250000000000000000000) && (tokensSold <= 35700000000000000000000000)) {\r\n        rate = 5355;\r\n       }\r\n       else if (tokensSold > 35700000000000000000000000) {\r\n        rate = 5100;\r\n       }\r\n\r\n\r\n      uint256 weiAmount = msg.value;\r\n      uint256 tokens = _getTokenAmount(weiAmount);\r\n      tokensSold = tokensSold.add(tokens);\r\n      _processPurchase(_beneficiary, tokens);\r\n      emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n      _updatePurchasingState(_beneficiary, weiAmount);\r\n      _forwardFunds();\r\n      _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n\r\n\r\n     /**\r\n      * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _weiAmount Value in wei involved in the purchase\r\n      */\r\n      function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n       require(_beneficiary != address(0));\r\n       require(_weiAmount != 0);\r\n     }\r\n     /**\r\n      * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _weiAmount Value in wei involved in the purchase\r\n      */\r\n      function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n       // optional override\r\n     }\r\n     /**\r\n      * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _tokenAmount Number of tokens to be emitted\r\n      */\r\n      function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n       token.transfer(_beneficiary, _tokenAmount);\r\n     }\r\n     /**\r\n      * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n      * @param _beneficiary Address receiving the tokens\r\n      * @param _tokenAmount Number of tokens to be purchased\r\n      */\r\n      function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n       _deliverTokens(_beneficiary, _tokenAmount);\r\n     }\r\n     /**\r\n      * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n      * @param _beneficiary Address receiving the tokens\r\n      * @param _weiAmount Value in wei involved in the purchase\r\n      */\r\n      function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n       // optional override\r\n     }\r\n     /**\r\n      * @dev Override to extend the way in which ether is converted to tokens.\r\n      * @param _weiAmount Value in wei to be converted into tokens\r\n      * @return Number of tokens that can be purchased with the specified _weiAmount\r\n      */\r\n      function _getTokenAmount(uint256 _weiAmount) internal  returns (uint256) {\r\n\r\n       return _weiAmount.mul(rate);\r\n     }\r\n\r\n     /**\r\n      * @dev Determines how ETH is stored/forwarded on purchases.\r\n      */\r\n      function _forwardFunds() internal {\r\n       wallet.transfer(msg.value);\r\n     }\r\n\r\n   }\r\n\r\n\r\n\r\n   contract EmaCrowdSale is Crowdsale {\r\n    uint256 public hardcap;\r\n    uint256 public starttime;\r\n    Crowdsale public csale;\r\n    using SafeMath for uint256; \r\n    constructor(address wallet, MiniMeToken token, uint256 startTime, uint256 cap) Crowdsale(wallet, token, starttime) public onlyOwner\r\n    {\r\n\r\n      hardcap = cap;\r\n      starttime = startTime;\r\n      setCrowdsale(wallet, token, startTime);\r\n    }\r\n\r\nfunction tranferPresaleTokens(address investor, uint256 ammount)public onlyOwner{\r\n    tokensSold = tokensSold.add(ammount); \r\n    token.transferFrom(this, investor, ammount); \r\n}\r\n\r\n    function setTokenTransferState(bool state) public onlyOwner {\r\n     token.changeController(this);\r\n     token.enableTransfers(state);\r\n   }\r\n\r\n   function claim(address claimToken) public onlyOwner {\r\n     token.changeController(this);\r\n     token.claimTokens(claimToken);\r\n   }\r\n\r\n   function () external payable onlyWhitelisted whenNotPaused{\r\n\r\n    emit buyx(msg.sender, this, _getTokenAmount(msg.value));\r\n\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Controlled is Pausable {\r\n /// @notice The address of the controller is the only address that can call\r\n ///  a function with this modifier\r\n modifier onlyController { require(msg.sender == controller); _; }\r\n modifier onlyControllerorOwner { require((msg.sender == controller) || (msg.sender == owner)); _; }\r\n address public controller;\r\n constructor() public { controller = msg.sender;}\r\n /// @notice Changes the controller of the contract\r\n /// @param _newController The new controller of the contract\r\n function changeController(address _newController) public onlyControllerorOwner {\r\n   controller = _newController;\r\n }\r\n}\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n /// @param _owner The address that sent the ether to create tokens\r\n /// @return True if the ether is accepted, false if it throws\r\n function proxyPayment(address _owner) public payable returns(bool);\r\n /// @notice Notifies the controller about a token transfer allowing the\r\n ///  controller to react if desired\r\n /// @param _from The origin of the transfer\r\n /// @param _to The destination of the transfer\r\n /// @param _amount The amount of the transfer\r\n /// @return False if the controller does not authorize the transfer\r\n function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n /// @notice Notifies the controller about an approval allowing the\r\n ///  controller to react if desired\r\n /// @param _owner The address that calls `approve()`\r\n /// @param _spender The spender in the `approve()` call\r\n /// @param _amount The amount in the `approve()` call\r\n /// @return False if the controller does not authorize the approval\r\n function onApprove(address _owner, address _spender, uint _amount) public\r\n returns(bool);\r\n}\r\n    /*\r\n       Copyright 2016, Jordi Baylina\r\n       This program is free software: you can redistribute it and/or modify\r\n       it under the terms of the GNU General Public License as published by\r\n       the Free Software Foundation, either version 3 of the License, or\r\n       (at your option) any later version.\r\n       This program is distributed in the hope that it will be useful,\r\n       but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n       GNU General Public License for more details.\r\n       You should have received a copy of the GNU General Public License\r\n       along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n       */\r\n       /// @title MiniMeToken Contract\r\n       /// @author Jordi Baylina\r\n       /// @dev This token contract's goal is to make it easy for anyone to clone this\r\n       ///  token using the token distribution at a given block, this will allow DAO's\r\n       ///  and DApps to upgrade their features in a decentralized manner without\r\n       ///  affecting the original token\r\n       /// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n       contract ApproveAndCallFallBack {\r\n         function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n       }\r\n       /// @dev The actual token contract, the default controller is the msg.sender\r\n       ///  that deploys the contract, so usually this token will be deployed by a\r\n       ///  token controller contract, which Giveth will call a \"Campaign\"\r\n       contract MiniMeToken is Controlled\r\n       {\r\n         using SafeMath for uint256;\r\n         string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n         uint8 public decimals;             //Number of decimals of the smallest unit\r\n         string public symbol;              //An identifier: e.g. REP\r\n         string public version = 'V 1.0'; //An arbitrary versioning scheme\r\n         /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n         ///  given value, the block number attached is the one that last changed the\r\n         ///  value\r\n         struct  Checkpoint {\r\n           // `fromBlock` is the block number that the value was generated from\r\n           uint128 fromBlock;\r\n           // `value` is the amount of tokens at a specific block number\r\n           uint128 value;\r\n         }\r\n         // `parentToken` is the Token address that was cloned to produce this token;\r\n         //  it will be 0x0 for a token that was not cloned\r\n         MiniMeToken public parentToken;\r\n         // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n         //  used to determine the initial distribution of the Clone Token\r\n         uint public parentSnapShotBlock;\r\n         // `creationBlock` is the block number that the Clone Token was created\r\n         uint public creationBlock;\r\n         // `balances` is the map that tracks the balance of each address, in this\r\n         //  contract when the balance changes the block number that the change\r\n         //  occurred is also included in the map\r\n         mapping (address => Checkpoint[]) balances;\r\n         // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n         mapping (address => mapping (address => uint256)) allowed;\r\n         // Tracks the history of the `totalSupply` of the token\r\n         Checkpoint[] totalSupplyHistory;\r\n         // Flag that determines if the token is transferable or not.\r\n         bool public transfersEnabled;\r\n         // The factory used to create new clone tokens\r\n         MiniMeTokenFactory public tokenFactory;\r\n         ////////////////\r\n         // Constructor\r\n         ////////////////\r\n         /// @notice Constructor to create a MiniMeToken\r\n         /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n         ///  will create the Clone token contracts, the token factory needs to be\r\n         ///  deployed first\r\n         /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n         ///  new token\r\n         /// @param _parentSnapShotBlock Block of the parent token that will\r\n         ///  determine the initial distribution of the clone token, set to 0 if it\r\n         ///  is a new token\r\n         /// @param _tokenName Name of the new token\r\n         /// @param _decimalUnits Number of decimals of the new token\r\n         /// @param _tokenSymbol Token Symbol for the new token\r\n         /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n         constructor(\r\n           address _tokenFactory,\r\n           address _parentToken,\r\n           uint _parentSnapShotBlock,\r\n           string _tokenName,\r\n           uint8 _decimalUnits,\r\n           string _tokenSymbol,\r\n           bool _transfersEnabled\r\n           ) public {\r\n           tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n           name = _tokenName;                                 // Set the name\r\n           decimals = _decimalUnits;                          // Set the decimals\r\n           symbol = _tokenSymbol;                             // Set the symbol\r\n           parentToken = MiniMeToken(_parentToken);\r\n           parentSnapShotBlock = _parentSnapShotBlock;\r\n           transfersEnabled = _transfersEnabled;\r\n           creationBlock = block.number;\r\n         }\r\n         ///////////////////\r\n         // ERC20 Methods\r\n         ///////////////////\r\n         /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n         /// @param _to The address of the recipient\r\n         /// @param _amount The amount of tokens to be transferred\r\n         /// @return Whether the transfer was successful or not\r\n         function transfer(address _to, uint256 _amount) public returns (bool success)  {\r\n           require(transfersEnabled);\r\n           doTransfer(msg.sender, _to, _amount);\r\n           return true;\r\n         }\r\n         /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n         ///  is approved by `_from`\r\n         /// @param _from The address holding the tokens being transferred\r\n         /// @param _to The address of the recipient\r\n         /// @param _amount The amount of tokens to be transferred\r\n         /// @return True if the transfer was successful\r\n         function transferFrom(address _from, address _to, uint256 _amount\r\n           ) public  returns (bool success) {\r\n           // The controller of this contract can move tokens around at will,\r\n           //  this is important to recognize! Confirm that you trust the\r\n           //  controller of this contract, which in most situations should be\r\n           //  another open source smart contract or 0x0\r\n           if (msg.sender != controller) {\r\n             require(transfersEnabled);\r\n             // The standard ERC 20 transferFrom functionality\r\n             require(allowed[_from][msg.sender] >= _amount);\r\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n           }\r\n           doTransfer(_from, _to, _amount);\r\n           return true;\r\n         }\r\n\r\n         /// @dev This is the actual transfer function in the token contract, it can\r\n         ///  only be called by other functions in this contract.\r\n         /// @param _from The address holding the tokens being transferred\r\n         /// @param _to The address of the recipient\r\n         /// @param _amount The amount of tokens to be transferred\r\n         /// @return True if the transfer was successful\r\n         function doTransfer(address _from, address _to, uint _amount\r\n           ) internal {\r\n          if (_amount == 0) {\r\n            emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\r\n            return;\r\n          }\r\n\r\n          // Do not allow transfer to 0x0 or the token contract itself\r\n          require((_to != 0) && (_to != address(this)));\r\n          // If the amount being transfered is more than the balance of the\r\n          //  account the transfer throws\r\n          uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n          require(previousBalanceFrom >= _amount);\r\n          //  sending the tokens\r\n          updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n          // Then update the balance array with the new value for the address\r\n          //  receiving the tokens\r\n          uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n          require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\r\n          updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\r\n          // An event to make the transfer easy to find on the blockchain\r\n          emit Transfer(_from, _to, _amount);\r\n        }\r\n        /// @param _owner The address that's balance is being requested\r\n        /// @return The balance of `_owner` at the current block\r\n        function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n         return balanceOfAt(_owner, block.number);\r\n       }\r\n       /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n       ///  its behalf. This is a modified version of the ERC20 approve function\r\n       ///  to be a little bit safer\r\n       /// @param _spender The address of the account able to transfer the tokens\r\n       /// @param _amount The amount of tokens to be approved for transfer\r\n       /// @return True if the approval was successful\r\n       function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        //  Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n         require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n       }\r\n       allowed[msg.sender][_spender] = _amount;\r\n       emit Approval(msg.sender, _spender, _amount);\r\n       return true;\r\n     }\r\n     /// @dev This function makes it easy to read the `allowed[]` map\r\n     /// @param _owner The address of the account that owns the token\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n     ///  to spend\r\n     function allowance(address _owner, address _spender\r\n       ) public constant returns (uint256 remaining) {\r\n       return allowed[_owner][_spender];\r\n     }\r\n     /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n     ///  its behalf, and then a function is triggered in the contract that is\r\n     ///  being approved, `_spender`. This allows users to use their tokens to\r\n     ///  interact with contracts in one function call instead of two\r\n     /// @param _spender The address of the contract able to transfer the tokens\r\n     /// @param _amount The amount of tokens to be approved for transfer\r\n     /// @return True if the function call was successful\r\n     function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n       ) public returns (bool success) {\r\n       require(approve(_spender, _amount));\r\n       ApproveAndCallFallBack(_spender).receiveApproval(\r\n         msg.sender,\r\n         _amount,\r\n         this,\r\n         _extraData\r\n         );\r\n       return true;\r\n     }\r\n     /// @dev This function makes it easy to get the total number of tokens\r\n     /// @return The total number of tokens\r\n     function totalSupply() public constant returns (uint) {\r\n       return totalSupplyAt(block.number);\r\n     }\r\n     ////////////////\r\n     // Query balance and totalSupply in History\r\n     ////////////////\r\n     /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n     /// @param _owner The address from which the balance will be retrieved\r\n     /// @param _blockNumber The block number when the balance is queried\r\n     /// @return The balance at `_blockNumber`\r\n     function balanceOfAt(address _owner, uint _blockNumber) public constant\r\n     returns (uint) {\r\n       // These next few lines are used when the balance of the token is\r\n       //  requested before a check point was ever created for this token, it\r\n       //  requires that the `parentToken.balanceOfAt` be queried at the\r\n       //  genesis block for that token as this contains initial balance of\r\n       //  this token\r\n       if ((balances[_owner].length == 0)\r\n         || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n         if (address(parentToken) != 0) {\r\n           return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n           } else {\r\n             // Has no parent\r\n             return 0;\r\n           }\r\n           // This will return the expected balance during normal situations\r\n           } else {\r\n             return getValueAt(balances[_owner], _blockNumber);\r\n           }\r\n         }\r\n         /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n         /// @param _blockNumber The block number when the totalSupply is queried\r\n         /// @return The total amount of tokens at `_blockNumber`\r\n         function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n           // These next few lines are used when the totalSupply of the token is\r\n           //  requested before a check point was ever created for this token, it\r\n           //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n           //  genesis block for this token as that contains totalSupply of this\r\n           //  token at this block number.\r\n           if ((totalSupplyHistory.length == 0)\r\n             || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n             if (address(parentToken) != 0) {\r\n               return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n               } else {\r\n                 return 0;\r\n               }\r\n               // This will return the expected totalSupply during normal situations\r\n               } else {\r\n                 return getValueAt(totalSupplyHistory, _blockNumber);\r\n               }\r\n             }\r\n             \r\n             ////////////////\r\n             // Generate and destroy tokens\r\n             ////////////////\r\n             /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n             /// @param _owner The address that will be assigned the new tokens\r\n             /// @param _amount The quantity of tokens generated\r\n             /// @return True if the tokens are generated correctly\r\n             function generateTokens(address _owner, uint _amount\r\n               ) public onlyControllerorOwner whenNotPaused  returns (bool) {\r\n               uint curTotalSupply = totalSupply();\r\n               require(curTotalSupply.add(_amount) >= curTotalSupply); // Check for overflow\r\n               uint previousBalanceTo = balanceOf(_owner);\r\n               require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\r\n               updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\r\n               updateValueAtNow(balances[_owner], previousBalanceTo.add(_amount));\r\n               emit Transfer(0, _owner, _amount);\r\n               return true;\r\n             }\r\n             /// @notice Burns `_amount` tokens from `_owner`\r\n             /// @param _owner The address that will lose the tokens\r\n             /// @param _amount The quantity of tokens to burn\r\n             /// @return True if the tokens are burned correctly\r\n             function destroyTokens(address _owner, uint _amount\r\n               ) onlyControllerorOwner public returns (bool) {\r\n               uint curTotalSupply = totalSupply();\r\n               require(curTotalSupply >= _amount);\r\n               uint previousBalanceFrom = balanceOf(_owner);\r\n               require(previousBalanceFrom >= _amount);\r\n               updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_amount));\r\n               updateValueAtNow(balances[_owner], previousBalanceFrom.sub(_amount));\r\n               emit Transfer(_owner, 0, _amount);\r\n               return true;\r\n             }\r\n             ////////////////\r\n             // Enable tokens transfers\r\n             ////////////////\r\n             /// @notice Enables token holders to transfer their tokens freely if true\r\n             /// @param _transfersEnabled True if transfers are allowed in the clone\r\n             function enableTransfers(bool _transfersEnabled) public onlyControllerorOwner {\r\n               transfersEnabled = _transfersEnabled;\r\n             }\r\n             ////////////////\r\n             // Internal helper functions to query and set a value in a snapshot array\r\n             ////////////////\r\n             /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n             /// @param checkpoints The history of values being queried\r\n             /// @param _block The block number to retrieve the value at\r\n             /// @return The number of tokens being queried\r\n             function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n               ) constant internal returns (uint) {\r\n               if (checkpoints.length == 0) return 0;\r\n               // Shortcut for the actual value\r\n               if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock)\r\n               return checkpoints[checkpoints.length.sub(1)].value;\r\n               if (_block < checkpoints[0].fromBlock) return 0;\r\n               // Binary search of the value in the array\r\n               uint min = 0;\r\n               uint max = checkpoints.length.sub(1);\r\n               while (max > min) {\r\n                 uint mid = (max.add(min).add(1)).div(2);\r\n                 if (checkpoints[mid].fromBlock<=_block) {\r\n                   min = mid;\r\n                   } else {\r\n                     max = mid.sub(1);\r\n                   }\r\n                 }\r\n                 return checkpoints[min].value;\r\n               }\r\n               /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n               ///  `totalSupplyHistory`\r\n               /// @param checkpoints The history of data being updated\r\n               /// @param _value The new number of tokens\r\n               function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n                 ) internal  {\r\n                 if ((checkpoints.length == 0)\r\n                   || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\r\n                  Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n                  newCheckPoint.fromBlock =  uint128(block.number);\r\n                  newCheckPoint.value = uint128(_value);\r\n                  } else {\r\n                    Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length.sub(1)];\r\n                    oldCheckPoint.value = uint128(_value);\r\n                  }\r\n                }\r\n                /// @dev Internal function to determine if an address is a contract\r\n                /// @param _addr The address being queried\r\n                /// @return True if `_addr` is a contract\r\n                function isContract(address _addr) constant internal returns(bool) {\r\n                 uint size;\r\n                 if (_addr == 0) return false;\r\n                 assembly {\r\n                   size := extcodesize(_addr)\r\n                 }\r\n                 return size>0;\r\n               }\r\n               /// @dev Helper function to return a min betwen the two uints\r\n               function min(uint a, uint b) pure internal returns (uint) {\r\n                 return a < b ? a : b;\r\n               }\r\n               /// @notice The fallback function: If the contract's controller has not been\r\n               ///  set to 0, then the `proxyPayment` method is called which relays the\r\n               ///  ether and creates tokens as described in the token controller contract\r\n               function () public payable {\r\n           /*require(isContract(controller));\r\n           require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));*/\r\n           revert();\r\n         }\r\n         //////////\r\n         // Safety Methods\r\n         //////////\r\n         /// @notice This method can be used by the controller to extract mistakenly\r\n         ///  sent tokens to this contract.\r\n         /// @param _token The address of the token contract that you want to recover\r\n         ///  set to 0 in case you want to extract ether.\r\n         function claimTokens(address _token) public onlyControllerorOwner {\r\n           if (_token == 0x0) {\r\n             controller.transfer(address(this).balance);\r\n             return;\r\n           }\r\n           MiniMeToken token = MiniMeToken(_token);\r\n           uint balance = token.balanceOf(this);\r\n           token.transfer(controller, balance);\r\n           emit ClaimedTokens(_token, controller, balance);\r\n         }\r\n         ////////////////\r\n         // Events\r\n         ////////////////\r\n         event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n         event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n         event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n         event Approval(\r\n           address indexed _owner,\r\n           address indexed _spender,\r\n           uint256 _amount\r\n           );\r\n       }\r\n       ////////////////\r\n       // MiniMeTokenFactory\r\n       ////////////////\r\n       /// @dev This contract is used to generate clone contracts from a contract.\r\n       ///  In solidity this is the way to create a contract from a contract of the\r\n       ///  same class\r\n       contract MiniMeTokenFactory {\r\n         /// @notice Update the DApp by creating a new token with new functionalities\r\n         ///  the msg.sender becomes the controller of this clone token\r\n         /// @param _parentToken Address of the token being cloned\r\n         /// @param _snapshotBlock Block of the parent token that will\r\n         ///  determine the initial distribution of the clone token\r\n         /// @param _tokenName Name of the new token\r\n         /// @param _decimalUnits Number of decimals of the new token\r\n         /// @param _tokenSymbol Token Symbol for the new token\r\n         /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n         /// @return The address of the new token contract\r\n         function createCloneToken(\r\n           address _parentToken,\r\n           uint _snapshotBlock,\r\n           string _tokenName,\r\n           uint8 _decimalUnits,\r\n           string _tokenSymbol,\r\n           bool _transfersEnabled\r\n           ) public returns (MiniMeToken) {\r\n           MiniMeToken newToken = new MiniMeToken(\r\n             this,\r\n             _parentToken,\r\n             _snapshotBlock,\r\n             _tokenName,\r\n             _decimalUnits,\r\n             _tokenSymbol,\r\n             _transfersEnabled\r\n             );\r\n           newToken.changeController(msg.sender);\r\n           return newToken;\r\n         }\r\n       }\r\n\r\n       contract EmaToken is MiniMeToken {\r\n        constructor(address tokenfactory, address parenttoken, uint parentsnapshot, string tokenname, uint8 dec, string tokensymbol, bool transfersenabled)\r\n        MiniMeToken(tokenfactory, parenttoken, parentsnapshot, tokenname, dec, tokensymbol, transfersenabled) public{\r\n        }\r\n      }\r\n      contract Configurator is Ownable {\r\n        EmaToken public token = EmaToken(0xC3EE57Fa8eD253E3F214048879977265967AE745);\r\n        EmaCrowdSale public crowdsale = EmaCrowdSale(0xAd97aF045F815d91621040809F863a5fb070B52d);\r\n        address ownerWallet = 0x3046751e1d843748b4983D7bca58ECF6Ef1e5c77;\r\n        address tokenfactory = 0xB74AA356913316ce49626527AE8543FFf23bB672;\r\n        address fundsWallet = 0x3046751e1d843748b4983D7bca58ECF6Ef1e5c77;\r\n        address incetivesPool = 0x95eac65414a6a650E2c71e3480AeEF0cF76392FA;\r\n        address FoundersAndTeam = 0x88C952c4A8fc156b883318CdA8b4a5279d989391;\r\n        address FuturePartners = 0x5B0333399E0D8F3eF1e5202b4eA4ffDdFD7a0382;\r\n        address Contributors = 0xa02dfB73de485Ebd9d37CbA4583e916F3bA94CeE;\r\n        address BountiesWal = 0xaB662f89A2c6e71BD8c7f754905cAaEC326BcdE7;\r\n        uint256 public crowdSaleStart;\r\n\r\n\r\n        function deploy() onlyOwner public{\r\n \t    owner = msg.sender; \r\n\t    \r\n\t  \r\n\t//\tcrowdsale.transferOwnership(ownerWallet);\r\n\t//\ttoken.transferOwnership(ownerWallet);\r\n\t//\ttoken.changeController(this);\r\n\t\ttoken.generateTokens(crowdsale, 255000000000000000000000000); // Generate CrowdSale tokens\r\n\t\ttoken.generateTokens(incetivesPool, 115000000000000000000000000); //generate Incentives pool tokens\r\n\t\ttoken.generateTokens(FoundersAndTeam, 85000000000000000000000000); //generate Founders and team tokens\r\n\t\ttoken.generateTokens(FuturePartners, 40000000000000000000000000); //generate future partners tokens and contributors\r\n\t\ttoken.generateTokens(BountiesWal, 5000000000000000000000000); //generate contributors tokens\r\n\t\ttoken.changeController(EmaCrowdSale(crowdsale));\r\n\t\t\ttoken.transferOwnership(ownerWallet);\r\n\t\t\tcrowdsale.transferOwnership(ownerWallet);\r\n        }\r\n      }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"csale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"ammount\",\"type\":\"uint256\"}],\"name\":\"tranferPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTokenTransferState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"starttime\",\"type\":\"uint256\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EmaCrowdSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003046751e1d843748b4983d7bca58ecf6ef1e5c77000000000000000000000000c3ee57fa8ed253e3f214048879977265967ae745000000000000000000000000000000000000000000000000000000005ad870a7000000000000000000000000000000000000000000d2ee59b2fe20b35f000000","Library":"","SwarmSource":"bzzr://1f548f213a72c7f4fc957a5cae45a1efa554045842b80bcaf0e6749d539fc963"}]}