{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Storage {\r\n    address owner; // This address has permission to upload data\r\n    \r\n    bytes32[] public data; // Storage container in pieces of 32 byte\r\n    uint remainder; // Where the previous uploadData() left off\r\n    \r\n    bool readOnly; // Set the contract to read only once upload is finished\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    // Data is uploaded over many transactions, until the whole file is stored in the contract\r\n    function uploadData(bytes _data) public {\r\n        require(msg.sender == owner);\r\n        require(readOnly != true);\r\n        uint startPoint;\r\n\r\n        if(remainder != 0) {\r\n\r\n            startPoint = 32 - remainder;\r\n            bytes memory rest = new bytes(32);\r\n            for(uint i = 0; i < remainder; i++) {\r\n                rest[i] = data[data.length - 1][i];\r\n            }\r\n            for(i = 0; i < startPoint; i++) {\r\n                rest[remainder + i] = _data[i];\r\n            }\r\n            bytes32 p;\r\n            assembly {\r\n                p := mload(add(rest, 32))\r\n            }\r\n            data[data.length - 1] = p;\r\n        }\r\n        for(i = 0; i < (uint(_data.length - startPoint) / 32); i++) {\r\n            bytes32 word;\r\n            assembly {\r\n                word:= mload(add(_data, add(add(32, startPoint), mul(i, 32))))\r\n            }\r\n            data.push(word);\r\n        }\r\n        uint loose = (_data.length - startPoint) % 32;\r\n        if(loose != 0) {\r\n            uint position = _data.length - loose;\r\n            bytes32 leftover;\r\n            assembly {\r\n                leftover := mload(add(_data, add(32, position)))\r\n            }\r\n            data.push(leftover);\r\n        }\r\n        remainder = loose;\r\n    }\r\n    // If a mistake is done during upload, reverse using erase()\r\n    function erase(uint _entriesToDelete) public {\r\n        require(msg.sender == owner);\r\n        require(readOnly != true);\r\n        if(data.length < _entriesToDelete) { \r\n            delete data;\r\n        }\r\n        else data.length -= _entriesToDelete;\r\n        remainder = 0;\r\n    }\r\n    function uploadFinish() public {\r\n        require(msg.sender == owner);\r\n        readOnly = true;\r\n    }\r\n\r\n    // This loads the entire file as a single byte array. Since it does not\r\n    // affect the contract state, there are no gas costs\r\n    function getData() public view returns (bytes){\r\n        bytes memory result = new bytes(data.length*0x20);\r\n        for(uint i = 0; i < data.length; i++) {\r\n            bytes32 word = data[i];\r\n            assembly {\r\n                mstore(add(result, add(0x20, mul(i, 32))), word)\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_entriesToDelete\",\"type\":\"uint256\"}],\"name\":\"erase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uploadData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"uploadFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"data\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Storage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://072cf55ba5d889dd2e24a025f1b55d4918ce77539565efc67a72c844df3e5a06"}]}