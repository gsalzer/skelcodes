{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract Bitron is ERC20\r\n{ using SafeMath for uint256;\r\n    // Name of the token\r\n    string public constant name = \"Bitron coin\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"BTO\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 50000000 * 10 ** 18; // 50 Million total supply // muliplies dues to decimal precision\r\n    address public owner;                    // Owner of this contract\r\n    uint256 public _price_tokn; \r\n    uint256 no_of_tokens;\r\n    uint256 bonus_token;\r\n    uint256 total_token;\r\n    bool stopped = false;\r\n    address ethFundMain = 0x1e6d1Fc2d934D2E4e2aE5e4882409C3fECD769dF; \r\n    uint256 public postico_startdate;\r\n    uint256 postico_enddate;\r\n    uint256 maxCap_POSTICO;\r\n    \r\n    uint public priceFactor;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    uint bon;\r\n    uint public bonus;\r\n    \r\n     enum Stages {\r\n        NOTSTARTED,\r\n        POSTICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        require (stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require (msg.sender == owner);\r\n     _;\r\n    }\r\n    \r\n  constructor(uint256 EtherPriceFactor) public\r\n    {\r\n         require(EtherPriceFactor != 0);\r\n        owner = msg.sender;\r\n        balances[owner] = 30000000 * 10 **18; // 30 million to owner\r\n        stage = Stages.NOTSTARTED;\r\n        priceFactor = EtherPriceFactor;\r\n      emit  Transfer(0, owner, balances[owner]);\r\n    }\r\n  \r\n   function setpricefactor(uint256 newPricefactor) external onlyOwner\r\n    {\r\n        priceFactor = newPricefactor;\r\n    }\r\n    function () public payable \r\n    {\r\n        require(stage != Stages.ENDED);\r\n        require(!stopped && msg.sender != owner);\r\n        no_of_tokens = ((msg.value).mul(priceFactor.mul(100))).div(_price_tokn);\r\n        transferTokens(msg.sender,no_of_tokens);\r\n       \r\n    }\r\n   \r\n    \r\n  \r\n     function start_POSTICO() public onlyOwner atStage(Stages.NOTSTARTED)\r\n      {\r\n          stage = Stages.POSTICO;\r\n          stopped = false;\r\n          maxCap_POSTICO = 20000000 * 10 **18;  // 20 million\r\n           balances[address(this)] = maxCap_POSTICO;\r\n          postico_startdate = now;\r\n          postico_enddate = now + 90 days; //3 months\r\n          _price_tokn = 5; // Price in Cents\r\n          emit Transfer(0, address(this), maxCap_POSTICO);\r\n      }\r\n      \r\n     \r\n     \r\n    // called by the owner, pause ICO\r\n    function PauseICO() external onlyOwner\r\n    {\r\n        stopped = true;\r\n       }\r\n\r\n    // called by the owner , resumes ICO\r\n    function ResumeICO() external onlyOwner\r\n    {\r\n        stopped = false;\r\n      }\r\n   \r\n     \r\n      function end_ICO() external onlyOwner\r\n     {\r\n        stage = Stages.ENDED;\r\n        uint256 x = balances[address(this)];\r\n        balances[owner] = (balances[owner]).add(balances[address(this)]);\r\n        balances[address(this)] = 0;\r\n        emit  Transfer(address(this), owner , x);\r\n         \r\n         \r\n     }\r\n // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalsupply;\r\n     }\r\n    \r\n    // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n    \r\n    // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\r\n     require( _to != 0x0);\r\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n     balances[_from] = (balances[_from]).sub(_amount);\r\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n     balances[_to] = (balances[_to]).add(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n     return true;\r\n         }\r\n    \r\n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         require( _spender != 0x0);\r\n         allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         require( _owner != 0x0 && _spender !=0x0);\r\n         return allowed[_owner][_spender];\r\n   }\r\n\r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n       emit Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n         }\r\n    \r\n          // Transfer the balance from owner's account to another account\r\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\r\n        require( _to != 0x0);       \r\n        require(balances[address(this)] >= _amount && _amount > 0);\r\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n       emit Transfer(address(this), _to, _amount);\r\n        return true;\r\n        }\r\n        \r\n         //In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner) external onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t   emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n    \r\n    function drain() external onlyOwner {\r\n        address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n       \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPricefactor\",\"type\":\"uint256\"}],\"name\":\"setpricefactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"postico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_POSTICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"EtherPriceFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Bitron","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://c62e2ad5c39d9d9ab09854ec755b94c4568558cc37ba819049d7c1386b4f356d"}]}