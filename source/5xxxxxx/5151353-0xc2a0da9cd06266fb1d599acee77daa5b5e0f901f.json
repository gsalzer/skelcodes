{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Original code of smart contract on github: \r\n\r\n// Standart libary from \"Open Zeppelin\"\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n// Standart contract from \"Open Zeppelin\"\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) constant public returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// Standart contract from \"Open Zeppelin\"\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Describing contract with owner.\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    function Owned() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n\r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\n// Describing Bloccking modifier which founds on time block.\r\ncontract Blocked {\r\n\r\n\t// Time till modifier block\r\n    uint public blockedUntil;\r\n\r\n    modifier unblocked {\r\n        require(now > blockedUntil);\r\n        _;\r\n    }\r\n}\r\n\r\n// contract which discribes contract of token which founds on ERC20 and implement balanceOf function.\r\ncontract BalancingToken is ERC20 {\r\n    mapping (address => uint256) public balances;      //!< array of all balances\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// Contract for dividend tokens. This contract describes implementation for tokens which can be used for dividends\r\ncontract DividendToken is BalancingToken, Blocked, Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\t// Event for dividends when somebody takes dividends it will raised.\r\n    event DividendReceived(address indexed dividendReceiver, uint256 dividendValue);\r\n\r\n\t// mapping for alloweds and amounts.\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n\t// full reward amount for one round.\r\n\t// this value is defined by ether amount on DividendToken contract on moment when dividend payments starts.\r\n    uint public totalReward;\r\n\t// time when last time dividends started pay.\r\n    uint public lastDivideRewardTime;\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n\t// This modifier checkes if reward payment is over.\r\n    modifier rewardTimePast() {\r\n        require(now > lastDivideRewardTime + rewardDays * 1 days);\r\n        _;\r\n    }\r\n\r\n\t// Structure is for Token holder which contains information about all token holders with balances and times.\r\n    struct TokenHolder {\r\n        uint256 balance;\r\n        uint    balanceUpdateTime;\r\n        uint    rewardWithdrawTime;\r\n    }\r\n\r\n\t// mapping for token holders.\r\n    mapping(address => TokenHolder) holders;\r\n\r\n\t// the number of days for rewards.\r\n    uint public rewardDays = 0;\r\n\r\n\t// standard method for transfer from ERC20.\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n        return transferSimple(_to, _value);\r\n    }\r\n\r\n\t// internal implementation for transfer with recounting rewards.\r\n    function transferSimple(address _to, uint256 _value) internal returns (bool) {\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(_to);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\t// standard method for transferFrom from ERC20. \r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) unblocked public returns (bool) {\r\n        beforeBalanceChanges(_from);\r\n        beforeBalanceChanges(_to);\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\t// standard method for transferFrom from ERC20. \r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\t// standard method for transferFrom from ERC20. \r\n    function allowance(address _owner, address _spender) onlyPayloadSize(2 * 32) unblocked constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\t// THis method returns the amount of caller's reward.\r\n\t// Caller gets ether which should be given to him.\r\n    function reward() constant public returns (uint256) {\r\n        if (holders[msg.sender].rewardWithdrawTime >= lastDivideRewardTime) {\r\n            return 0;\r\n        }\r\n        uint256 balance;\r\n        if (holders[msg.sender].balanceUpdateTime <= lastDivideRewardTime) {\r\n            balance = balances[msg.sender];\r\n        } else {\r\n            balance = holders[msg.sender].balance;\r\n        }\r\n        return totalReward.mul(balance).div(totalSupply);\r\n    }\r\n\r\n\t// This method shoud be called when caller wants take dividends reward.\r\n\t// Caller gets ether which should be given to him.\r\n    function withdrawReward() public returns (uint256) {\r\n        uint256 rewardValue = reward();\r\n        if (rewardValue == 0) {\r\n            return 0;\r\n        }\r\n        if (balances[msg.sender] == 0) {\r\n            // garbage collector\r\n            delete holders[msg.sender];\r\n        } else {\r\n            holders[msg.sender].rewardWithdrawTime = now;\r\n        }\r\n        require(msg.sender.call.gas(3000000).value(rewardValue)());\r\n        DividendReceived(msg.sender, rewardValue);\r\n        return rewardValue;\r\n    }\r\n\r\n    // Divide up reward and make it accesible for withdraw\r\n\t// Need to provide the number of days for reward. It can be less then 15 days and more then 45 days.\r\n    function divideUpReward(uint inDays) rewardTimePast onlyOwner external payable {\r\n        require(inDays >= 15 && inDays <= 45);\r\n        lastDivideRewardTime = now;\r\n        rewardDays = inDays;\r\n        totalReward = this.balance;\r\n    }\r\n\t\r\n\t// Take left reward after reward period.\r\n    function withdrawLeft() rewardTimePast onlyOwner external {\r\n        require(msg.sender.call.gas(3000000).value(this.balance)());\r\n    }\r\n\r\n\t// recount reward of somebody.\r\n    function beforeBalanceChanges(address _who) public {\r\n        if (holders[_who].balanceUpdateTime <= lastDivideRewardTime) {\r\n            holders[_who].balanceUpdateTime = now;\r\n            holders[_who].balance = balances[_who];\r\n        }\r\n    }\r\n}\r\n\r\n// Final contract for RENT coin.\r\ncontract RENTCoin is DividendToken {\r\n\r\n    string public constant name = \"RentAway Coin\";\r\n\r\n    string public constant symbol = \"RTW\";\r\n\r\n    uint32 public constant decimals = 18;\r\n\r\n    function RENTCoin(uint256 initialSupply, uint unblockTime) public {\r\n        totalSupply = initialSupply;\r\n        balances[owner] = totalSupply;\r\n        blockedUntil = unblockTime;\r\n\t\tTransfer(this, owner, totalSupply);\r\n    }\r\n\r\n\t// Uses for overwork manual Blocked contract for ICO time.\r\n\t// After ICO it is not needed.\r\n    function manualTransfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\r\n        return transferSimple(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDivideRewardTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLeft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"beforeBalanceChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"manualTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockedUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inDays\",\"type\":\"uint256\"}],\"name\":\"divideUpReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"unblockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dividendReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividendValue\",\"type\":\"uint256\"}],\"name\":\"DividendReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RENTCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000003e09de2596099e2b000000000000000000000000000000000000000000000000000000000000005ac06750","Library":"","SwarmSource":"bzzr://cb9db94bea835aeaab5a7856b0f2ce4dcb3231ca3f544948070cf5c079c7fc02"}]}