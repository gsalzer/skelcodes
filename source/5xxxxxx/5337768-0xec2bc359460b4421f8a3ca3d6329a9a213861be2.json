{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) constant public returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    function Owned() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n\r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\ncontract Blocked {\r\n\r\n    uint public blockedUntil;\r\n\r\n    modifier unblocked {\r\n        require(now > blockedUntil);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Blocked {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) unblocked public returns (bool) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) onlyPayloadSize(2 * 32) unblocked constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) unblocked public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract DEVCoin is BurnableToken, Owned {\r\n\r\n    string public constant name = \"Dev Coin\";\r\n\r\n    string public constant symbol = \"DEVC\";\r\n\r\n    uint32 public constant decimals = 18;\r\n\r\n    function DEVCoin(uint256 initialSupply, uint unblockTime) public {\r\n        totalSupply = initialSupply;\r\n        balances[owner] = initialSupply;\r\n        blockedUntil = unblockTime;\r\n    }\r\n\r\n    function manualTransfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ManualSendingCrowdsale is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    struct AmountData {\r\n        bool exists;\r\n        uint256 value;\r\n    }\r\n\r\n    mapping (uint => AmountData) public amountsByCurrency;\r\n\r\n    function addCurrency(uint currency) external onlyOwner {\r\n        addCurrencyInternal(currency);\r\n    }\r\n\r\n    function addCurrencyInternal(uint currency) internal {\r\n        AmountData storage amountData = amountsByCurrency[currency];\r\n        amountData.exists = true;\r\n    }\r\n\r\n    function manualTransferTokensToInternal(address to, uint256 givenTokens, uint currency, uint256 amount) internal returns (uint256) {\r\n        AmountData memory tempAmountData = amountsByCurrency[currency];\r\n        require(tempAmountData.exists);\r\n        AmountData storage amountData = amountsByCurrency[currency];\r\n        amountData.value = amountData.value.add(amount);\r\n        return transferTokensTo(to, givenTokens);\r\n    }\r\n\r\n    function transferTokensTo(address to, uint256 givenTokens) internal returns (uint256);\r\n}\r\n\r\ncontract Crowdsale is ManualSendingCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum State { PRE_ICO, ICO }\r\n\r\n    State public state = State.PRE_ICO;\r\n\r\n    // Date of start pre-ICO and ICO.\r\n    uint public constant preICOstartTime =    1522454400; // start at Saturday, March 31, 2018 12:00:00 AM\r\n    uint public constant preICOendTime =      1523750400; // end at Sunday, April 15, 2018 12:00:00 AM\r\n    uint public constant ICOstartTime =    1524355200; // start at Tuesday, May 22, 2018 12:00:00 AM\r\n    uint public constant ICOendTime =      1527033600; // end at Wednesday, May 23, 2018 12:00:00 AM\r\n\r\n    uint public constant bountyAvailabilityTime = ICOendTime + 90 days;\r\n\r\n    uint256 public constant maxTokenAmount = 108e24; // max minting   (108, 000, 000 tokens)\r\n    uint256 public constant bountyTokens =   324e23; // bounty amount ( 32, 400, 000 tokens)\r\n\r\n    uint256 public constant maxPreICOTokenAmount = 81e23; // max number of tokens on pre-ICO (8, 100, 000 tokens);\r\n\r\n    DEVCoin public token;\r\n\r\n    uint256 public leftTokens = 0;\r\n\r\n    uint256 public totalAmount = 0;\r\n    uint public transactionCounter = 0;\r\n\r\n    /** ------------------------------- */\r\n    /** Bonus part: */\r\n\r\n    // Amount bonuses\r\n    uint private firstAmountBonus = 20;\r\n    uint256 private firstAmountBonusBarrier = 500 ether;\r\n    uint private secondAmountBonus = 15;\r\n    uint256 private secondAmountBonusBarrier = 100 ether;\r\n    uint private thirdAmountBonus = 10;\r\n    uint256 private thirdAmountBonusBarrier = 50 ether;\r\n    uint private fourthAmountBonus = 5;\r\n    uint256 private fourthAmountBonusBarrier = 20 ether;\r\n\r\n    // pre-ICO bonuses by time\r\n    uint private firstPreICOTimeBarrier = preICOstartTime + 1 days;\r\n    uint private firstPreICOTimeBonus = 20;\r\n    uint private secondPreICOTimeBarrier = preICOstartTime + 7 days;\r\n    uint private secondPreICOTimeBonus = 10;\r\n    uint private thirdPreICOTimeBarrier = preICOstartTime + 14 days;\r\n    uint private thirdPreICOTimeBonus = 5;\r\n\r\n    // ICO bonuses by time\r\n    uint private firstICOTimeBarrier = ICOstartTime + 1 days;\r\n    uint private firstICOTimeBonus = 15;\r\n    uint private secondICOTimeBarrier = ICOstartTime + 7 days;\r\n    uint private secondICOTimeBonus = 7;\r\n    uint private thirdICOTimeBarrier = ICOstartTime + 14 days;\r\n    uint private thirdICOTimeBonus = 4;\r\n\r\n    /** ------------------------------- */\r\n\r\n    bool public bonusesPayed = false;\r\n\r\n    uint256 public constant rateToEther = 9000; // rate to ether, how much tokens gives to 1 ether\r\n\r\n    uint256 public constant minAmountForDeal = 10**17;\r\n\r\n    modifier canBuy() {\r\n        require(!isFinished());\r\n        require(isPreICO() || isICO());\r\n        _;\r\n    }\r\n\r\n    modifier minPayment() {\r\n        require(msg.value >= minAmountForDeal);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale() public {\r\n        //require(currentTime() < preICOstartTime);\r\n        token = new DEVCoin(maxTokenAmount, ICOendTime);\r\n        leftTokens = maxPreICOTokenAmount;\r\n        addCurrencyInternal(0); // add BTC\r\n    }\r\n\r\n    function isFinished() public constant returns (bool) {\r\n        return currentTime() > ICOendTime || (leftTokens == 0 && state == State.ICO);\r\n    }\r\n\r\n    function isPreICO() public constant returns (bool) {\r\n        uint curTime = currentTime();\r\n        return curTime < preICOendTime && curTime > preICOstartTime;\r\n    }\r\n\r\n    function isICO() public constant returns (bool) {\r\n        uint curTime = currentTime();\r\n        return curTime < ICOendTime && curTime > ICOstartTime;\r\n    }\r\n\r\n    function() external canBuy minPayment payable {\r\n        uint256 amount = msg.value;\r\n        uint bonus = getBonus(amount);\r\n        uint256 givenTokens = amount.mul(rateToEther).div(100).mul(100 + bonus);\r\n        uint256 providedTokens = transferTokensTo(msg.sender, givenTokens);\r\n\r\n        if (givenTokens > providedTokens) {\r\n            uint256 needAmount = providedTokens.mul(100).div(100 + bonus).div(rateToEther);\r\n            require(amount > needAmount);\r\n            require(msg.sender.call.gas(3000000).value(amount - needAmount)());\r\n            amount = needAmount;\r\n        }\r\n        totalAmount = totalAmount.add(amount);\r\n    }\r\n\r\n    function manualTransferTokensToWithBonus(address to, uint256 givenTokens, uint currency, uint256 amount) external canBuy onlyOwner returns (uint256) {\r\n        uint bonus = getBonus(0);\r\n        uint256 transferedTokens = givenTokens.mul(100 + bonus).div(100);\r\n        return manualTransferTokensToInternal(to, transferedTokens, currency, amount);\r\n    }\r\n\r\n    function manualTransferTokensTo(address to, uint256 givenTokens, uint currency, uint256 amount) external onlyOwner canBuy returns (uint256) {\r\n        return manualTransferTokensToInternal(to, givenTokens, currency, amount);\r\n    }\r\n\r\n    function getBonus(uint256 amount) public constant returns (uint) {\r\n        uint bonus = 0;\r\n        if (isPreICO()) {\r\n            bonus = getPreICOBonus();\r\n        }\r\n\r\n        if (isICO()) {\r\n            bonus = getICOBonus();\r\n        }\r\n        return bonus + getAmountBonus(amount);\r\n    }\r\n\r\n    function getAmountBonus(uint256 amount) public constant returns (uint) {\r\n        if (amount >= firstAmountBonusBarrier) {\r\n            return firstAmountBonus;\r\n        }\r\n        if (amount >= secondAmountBonusBarrier) {\r\n            return secondAmountBonus;\r\n        }\r\n        if (amount >= thirdAmountBonusBarrier) {\r\n            return thirdAmountBonus;\r\n        }\r\n        if (amount >= fourthAmountBonusBarrier) {\r\n            return fourthAmountBonus;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getPreICOBonus() public constant returns (uint) {\r\n        uint curTime = currentTime();\r\n        if (curTime < firstPreICOTimeBarrier) {\r\n            return firstPreICOTimeBonus;\r\n        }\r\n        if (curTime < secondPreICOTimeBarrier) {\r\n            return secondPreICOTimeBonus;\r\n        }\r\n        if (curTime < thirdPreICOTimeBarrier) {\r\n            return thirdPreICOTimeBonus;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getICOBonus() public constant returns (uint) {\r\n        uint curTime = currentTime();\r\n        if (curTime < firstICOTimeBarrier) {\r\n            return firstICOTimeBonus;\r\n        }\r\n        if (curTime < secondICOTimeBarrier) {\r\n            return secondICOTimeBonus;\r\n        }\r\n        if (curTime < thirdICOTimeBarrier) {\r\n            return thirdICOTimeBonus;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function finishCrowdsale() external {\r\n        require(isFinished());\r\n        require(state == State.ICO);\r\n        if (leftTokens > 0) {\r\n            token.burn(leftTokens);\r\n            leftTokens = 0;\r\n        }\r\n    }\r\n\r\n    function takeBounty() external onlyOwner {\r\n        require(isFinished());\r\n        require(state == State.ICO);\r\n        require(now > bountyAvailabilityTime);\r\n        require(!bonusesPayed);\r\n        bonusesPayed = true;\r\n        require(token.transfer(msg.sender, bountyTokens));\r\n    }\r\n\r\n    function startICO() external {\r\n        require(currentTime() > preICOendTime);\r\n        require(state == State.PRE_ICO && leftTokens <= maxPreICOTokenAmount);\r\n        leftTokens = leftTokens.add(maxTokenAmount).sub(maxPreICOTokenAmount).sub(bountyTokens);\r\n        state = State.ICO;\r\n    }\r\n\r\n    function transferTokensTo(address to, uint256 givenTokens) internal returns (uint256) {\r\n        uint256 providedTokens = givenTokens;\r\n        if (givenTokens > leftTokens) {\r\n            providedTokens = leftTokens;\r\n        }\r\n        leftTokens = leftTokens.sub(providedTokens);\r\n        require(token.manualTransfer(to, providedTokens));\r\n        transactionCounter = transactionCounter + 1;\r\n        return providedTokens;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(msg.sender.call.gas(3000000).value(address(this).balance)());\r\n    }\r\n\r\n    function withdrawAmount(uint256 amount) external onlyOwner {\r\n        uint256 givenAmount = amount;\r\n        if (address(this).balance < amount) {\r\n            givenAmount = address(this).balance;\r\n        }\r\n        require(msg.sender.call.gas(3000000).value(givenAmount)());\r\n    }\r\n\r\n    function currentTime() internal constant returns (uint) {\r\n        return now;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountsByCurrency\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreICOTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmountForDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAvailabilityTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOendTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOendTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getICOBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currency\",\"type\":\"uint256\"}],\"name\":\"addCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"givenTokens\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualTransferTokensToWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"givenTokens\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualTransferTokensTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreICOBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9722086d08440484759d0616c508794f0ff16f34869d82694e7dd082a021006"}]}