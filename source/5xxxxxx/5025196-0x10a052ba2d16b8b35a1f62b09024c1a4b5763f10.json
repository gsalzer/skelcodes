{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization\r\n *      control functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    // Public variable with address of owner\r\n    address public owner;\r\n\r\n    /**\r\n     * Log ownership transference\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the\r\n     *      contract to the sender account.\r\n     */\r\n    function Ownable() public {\r\n        // Set the contract creator as the owner\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        // Check that sender is owner\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        // Check for a non-null owner\r\n        require(newOwner != address(0));\r\n        // Log ownership transference\r\n        OwnershipTransferred(owner, newOwner);\r\n        // Set new owner\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Qwasder Token contract.\r\n * @dev Custom ERC20 Token.\r\n */\r\ncontract QwasderToken is ERC20Basic, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * BasicToken data.\r\n     */\r\n    uint256 public totalSupply_ = 0;\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n     * StandardToken data.\r\n     */\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * MintableToken data.\r\n     */\r\n    bool public mintingFinished = false;\r\n\r\n    /**\r\n     * GrantableToken modifiers.\r\n     */\r\n    uint256 public grantsUnlock = 1523318400; // Tue, 10 Apr 2018 00:00:00 +0000 (GMT)\r\n    uint256 public reservedSupply = 20000000000000000000000000;\r\n    // -------------------------------------^\r\n\r\n    /**\r\n     * CappedToken data.\r\n     */\r\n    uint256 public cap = 180000000000000000000000000;\r\n    // ---------------------------^\r\n\r\n    /**\r\n     * DetailedERC20 data.\r\n     */\r\n    string public name     = \"Qwasder\";\r\n    string public symbol   = \"QWS\";\r\n    uint8  public decimals = 18;\r\n\r\n    /**\r\n     * QwasderToken data.\r\n     */\r\n    mapping (address => bool) partners;\r\n    mapping (address => bool) blacklisted;\r\n    mapping (address => bool) freezed;\r\n    uint256 public publicRelease   = 1525046400; // Mon, 30 Apr 2018 00:00:00 +0000 (GMT)\r\n    uint256 public partnersRelease = 1539129600; // Wed, 10 Oct 2018 00:00:00 +0000 (GMT)\r\n    uint256 public hardcap = 200000000000000000000000000;\r\n    // -------------------------------^\r\n\r\n    /**\r\n     * ERC20Basic events.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * ERC20 events.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * MintableToken events.\r\n     */\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    /**\r\n     * GrantableToken events.\r\n     */\r\n    event Grant(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * BurnableToken events.\r\n     */\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * QwasderToken events.\r\n     */\r\n    event UpdatedPublicReleaseDate(uint256 date);\r\n    event UpdatedPartnersReleaseDate(uint256 date);\r\n    event UpdatedGrantsLockDate(uint256 date);\r\n    event Blacklisted(address indexed account);\r\n    event Freezed(address indexed investor);\r\n    event PartnerAdded(address indexed investor);\r\n    event PartnerRemoved(address indexed investor);\r\n    event Unfreezed(address indexed investor);\r\n\r\n    /**\r\n     * Initializes contract.\r\n     */\r\n    function QwasderToken() public {\r\n        assert(reservedSupply < cap && reservedSupply.add(cap) == hardcap);\r\n        assert(publicRelease <= partnersRelease);\r\n        assert(grantsUnlock < partnersRelease);\r\n    }\r\n\r\n    /**\r\n     * MintableToken modifiers.\r\n     */\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * GrantableToken modifiers.\r\n     */\r\n\r\n    modifier canGrant() {\r\n        require(now >= grantsUnlock && reservedSupply > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * ERC20Basic interface.\r\n     */\r\n\r\n    /**\r\n     * @dev Gets the total raised token supply.\r\n     */\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param investor The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address investor) public view returns (uint256 balance) {\r\n        return balances[investor];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address.\r\n     * @param to The address which you want to transfer to.\r\n     * @param amount The amount of tokens to be transferred.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function transfer(address to, uint256 amount) public returns (bool success) {\r\n        require(!freezed[msg.sender] && !blacklisted[msg.sender]);\r\n        require(to != address(0) && !freezed[to] && !blacklisted[to]);\r\n        require((!partners[msg.sender] && now >= publicRelease) || now >= partnersRelease);\r\n        require(0 < amount && amount <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC20 interface.\r\n     */\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param holder The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address holder, address spender) public view returns (uint256 remaining) {\r\n        return allowed[holder][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *      Beware that changing an allowance with this method brings the risk that someone may use both\r\n     *      the old and the new allowance by unfortunate transaction ordering. One possible solution to\r\n     *      mitigate this race condition is to first reduce the spender's allowance to 0 and set the\r\n     *      desired value afterwards.\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to be spent.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool success) {\r\n        allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param from The address which you want to send tokens from.\r\n     * @param to The address which you want to transfer to.\r\n     * @param amount The amount of tokens to be transferred.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\r\n        require(!blacklisted[msg.sender]);\r\n        require(to != address(0) && !freezed[to] && !blacklisted[to]);\r\n        require(from != address(0) && !freezed[from] && !blacklisted[from]);\r\n        require((!partners[from] && now >= publicRelease) || now >= partnersRelease);\r\n        require(0 < amount && amount <= balances[from]);\r\n        require(amount <= allowed[from][msg.sender]);\r\n        balances[from] = balances[from].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n        Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * StandardToken interface.\r\n     */\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of token to be decreased, in fraction units.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function decreaseApproval(address spender, uint256 amount) public returns (bool success) {\r\n        uint256 oldValue = allowed[msg.sender][spender];\r\n        if (amount > oldValue) {\r\n            allowed[msg.sender][spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][spender] = oldValue.sub(amount);\r\n        }\r\n        Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *      approve should be called when allowance(owner, spender) == 0. To\r\n     *      increment allowed value is better to use this function to avoid 2\r\n     *      calls (and wait until the first transaction is mined).\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of token to be increased, in fraction units.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function increaseApproval(address spender, uint amount) public returns (bool success) {\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(amount);\r\n        Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * MintableToken interface.\r\n     */\r\n\r\n    /**\r\n     * @dev Function to mint tokens to investors.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint, in fraction units.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 amount) onlyOwner canMint public returns (bool success) {\r\n        require(!freezed[to] && !blacklisted[to] && !partners[to]);\r\n        uint256 total = totalSupply_.add(amount);\r\n        require(total <= cap);\r\n        totalSupply_ = total;\r\n        balances[to] = balances[to].add(amount);\r\n        Mint(to, amount);\r\n        Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner public returns (bool success) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * GrantableToken interface.\r\n     */\r\n\r\n    /**\r\n     * @dev Function to mint tokens to partners (grants), including up to reserved tokens.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint, in fraction units.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function grant(address to, uint256 amount) onlyOwner canGrant public returns (bool success) {\r\n        require(!freezed[to] && !blacklisted[to] && partners[to]);\r\n        require(amount <= reservedSupply);\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        reservedSupply = reservedSupply.sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        Grant(to, amount);\r\n        Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * BurnableToken interface.\r\n     */\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param amount The amount of token to be burned, in fraction units.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function burn(uint256 amount) public returns (bool success) {\r\n        require(!freezed[msg.sender]);\r\n        require((!partners[msg.sender] && now >= publicRelease) || now >= partnersRelease);\r\n        require(amount > 0 && amount <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        totalSupply_ = totalSupply_.sub(amount);\r\n        Burn(msg.sender, amount);\r\n        Transfer(msg.sender, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * QwasderToken interface.\r\n     */\r\n\r\n    /**\r\n     * Add a new partner.\r\n     */\r\n    function addPartner(address investor) onlyOwner public returns (bool) {\r\n        require(investor != address(0));\r\n        require(!partners[investor] && !blacklisted[investor] && balances[investor] == 0);\r\n        partners[investor] = true;\r\n        PartnerAdded(investor);\r\n        return partners[investor];\r\n    }\r\n\r\n    /**\r\n     * Remove a partner.\r\n     */\r\n    function removePartner(address investor) onlyOwner public returns (bool) {\r\n        require(partners[investor] && balances[investor] == 0);\r\n        partners[investor] = false;\r\n        PartnerRemoved(investor);\r\n        return !partners[investor];\r\n    }\r\n\r\n    /**\r\n     * Freeze permanently an investor.\r\n     * WARNING: This will burn out any token sold to the blacklisted account.\r\n     */\r\n    function blacklist(address account) onlyOwner public returns (bool) {\r\n        require(account != address(0));\r\n        require(!blacklisted[account]);\r\n        blacklisted[account] = true;\r\n        totalSupply_ = totalSupply_.sub(balances[account]);\r\n        uint256 amount = balances[account];\r\n        balances[account] = 0;\r\n        Blacklisted(account);\r\n        Burn(account, amount);\r\n        return blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * Freeze (temporarily) an investor.\r\n     */\r\n    function freeze(address investor) onlyOwner public returns (bool) {\r\n        require(investor != address(0));\r\n        require(!freezed[investor]);\r\n        freezed[investor] = true;\r\n        Freezed(investor);\r\n        return freezed[investor];\r\n    }\r\n\r\n    /**\r\n     * Unfreeze an investor.\r\n     */\r\n    function unfreeze(address investor) onlyOwner public returns (bool) {\r\n        require(freezed[investor]);\r\n        freezed[investor] = false;\r\n        Unfreezed(investor);\r\n        return !freezed[investor];\r\n    }\r\n\r\n    /**\r\n     * @dev Set a new release date for investor's transfers.\r\n     *      Must be executed before the current release date, and the new\r\n     *      date must be a later one. Up to one more week for security reasons.\r\n     * @param date UNIX timestamp of the new release date for investor's transfers.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function setPublicRelease(uint256 date) onlyOwner public returns (bool success) {\r\n        require(now < publicRelease && date > publicRelease);\r\n        require(date.sub(publicRelease) <= 604800);\r\n        publicRelease = date;\r\n        assert(publicRelease <= partnersRelease);\r\n        UpdatedPublicReleaseDate(date);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set a new release date for partners' transfers.\r\n     *      Must be executed before the current release date, and the new\r\n     *      date must be a later one. Up to one more week for security reasons.\r\n     * @param date UNIX timestamp of the new release date for partners' transfers.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function setPartnersRelease(uint256 date) onlyOwner public returns (bool success) {\r\n        require(now < partnersRelease && date > partnersRelease);\r\n        require(date.sub(partnersRelease) <= 604800);\r\n        partnersRelease = date;\r\n        assert(grantsUnlock < partnersRelease);\r\n        UpdatedPartnersReleaseDate(date);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to set a new unlock date for partners' minting grants.\r\n     *      Must be executed before the current unlock date, and the new\r\n     *      date must be a later one. Up to one more week for security reasons.\r\n     * @param date UNIX timestamp of the new unlock date for partners' grants.\r\n     * @param extendLocking boolean value, true to extend the locking periods,\r\n     *        false to leave the current dates.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function setGrantsUnlock(uint256 date, bool extendLocking) onlyOwner public returns (bool success) {\r\n        require(now < grantsUnlock && date > grantsUnlock);\r\n        if (extendLocking) {\r\n          uint256 delay = date.sub(grantsUnlock);\r\n          require(delay <= 604800);\r\n          grantsUnlock = date;\r\n          publicRelease = publicRelease.add(delay);\r\n          partnersRelease = partnersRelease.add(delay);\r\n          assert(publicRelease <= partnersRelease);\r\n          assert(grantsUnlock < partnersRelease);\r\n          UpdatedPublicReleaseDate(publicRelease);\r\n          UpdatedPartnersReleaseDate(partnersRelease);\r\n        }\r\n        else {\r\n          // Can set a date more than one week later, provided it is before the release date.\r\n          grantsUnlock = date;\r\n          assert(grantsUnlock < partnersRelease);\r\n        }\r\n        UpdatedGrantsLockDate(date);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to extend the transfer locking periods up to one more\r\n     *      week. Must be executed before the current public release date.\r\n     * @param delay The amount of hours to extend the locking period.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function extendLockPeriods(uint delay, bool extendGrantLock) onlyOwner public returns (bool success) {\r\n        require(now < publicRelease && 0 < delay && delay <= 168);\r\n        delay = delay * 3600;\r\n        publicRelease = publicRelease.add(delay);\r\n        partnersRelease = partnersRelease.add(delay);\r\n        assert(publicRelease <= partnersRelease);\r\n        UpdatedPublicReleaseDate(publicRelease);\r\n        UpdatedPartnersReleaseDate(partnersRelease);\r\n        if (extendGrantLock) {\r\n            grantsUnlock = grantsUnlock.add(delay);\r\n            assert(grantsUnlock < partnersRelease);\r\n            UpdatedGrantsLockDate(grantsUnlock);\r\n        }\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"extendLocking\",\"type\":\"bool\"}],\"name\":\"setGrantsUnlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\"},{\"name\":\"extendGrantLock\",\"type\":\"bool\"}],\"name\":\"extendLockPeriods\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"addPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setPublicRelease\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setPartnersRelease\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"removePartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantsUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Grant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UpdatedPublicReleaseDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UpdatedPartnersReleaseDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UpdatedGrantsLockDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"PartnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"PartnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Unfreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QwasderToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e0aa4a29bd89668e1e5bfdccece1c64c802c6693ee685dc6e3ebfbc9ab88397f"}]}