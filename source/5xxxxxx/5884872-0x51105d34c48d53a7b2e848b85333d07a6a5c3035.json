{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Interface for ERC223\r\n */\r\ninterface ERC223 {\r\n    function balanceOf(address _owner) external constant returns (uint256);\r\n    \r\n    \r\n    function name() external constant returns  (string _name);\r\n    function symbol() external constant returns  (string _symbol);\r\n    function decimals() external constant returns (uint8 _decimals);\r\n    function totalSupply() external constant returns (uint256 _totalSupply);\r\n    \r\n    \r\n    function transfer(address _to, uint256 _value) external returns (bool ok);\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool ok);\r\n    function sell(uint256 _value) external returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n    event Sell(address indexed from, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC223ReceivingContract\r\n * @dev Contract for ERC223 fallback\r\n */\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract C3Coin is ERC223, Ownable {\r\n    using SafeMath for uint;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    constructor() public {\r\n        name = \"C3 Coin\";\r\n        symbol = \"CCC\";\r\n        decimals = 18;\r\n        totalSupply = 100000000000000000000000000000;\r\n        balances[msg.sender] = totalSupply;\r\n    } \r\n    \r\n    mapping (address => uint256) internal balances;\r\n    \r\n    address public icoContract;\r\n\r\n\r\n    /**\r\n    * @dev Getters\r\n    */ \r\n    // Function to access name of token .\r\n    function name() external constant returns (string _name) {\r\n      return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() external constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() external constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() external constant returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    \r\n\r\n\r\n   /**\r\n   * @notice This function is modified for erc223 standard\r\n   * @dev ERC20 transfer function added for backward compatibility.\r\n   * @param _to Address of token receiver\r\n   * @param _value Number of tokens to send\r\n   */\r\n   function transfer(address _to, uint256 _value) external returns (bool) {\r\n     require(_to != address(0));\r\n     require(_value <= balances[msg.sender] && balances[_to] + _value >= balances[_to]);\r\n     require(!isContract(_to));\r\n     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     emit Transfer(msg.sender, _to, _value);\r\n     return true;\r\n   }\r\n   \r\n   \r\n  /**\r\n   * @dev Get balance of a token owner\r\n   * @param _owner address The address which one owns tokens\r\n   */\r\n  function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n   }\r\n  \r\n  /**\r\n   * @notice Instead of sending byte string for the transaction data, string type is used for more detailed description.\r\n   * @dev ERC223 transfer function \r\n   * @param _to Address of token receiver\r\n   * @param _value Number of tokens to send\r\n   * @param _data information for the transaction\r\n   */ \r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender] && balances[_to] + _value >= balances[_to]);\r\n    if(isContract(_to)) {\r\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n    }\r\n        \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n    }\r\n  \r\n  /**\r\n   * @dev Check if the given address is non-user\r\n   * @param _addr address to check\r\n   */   \r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev Set ICO contract address to supply tokens\r\n   * @param _icoContract address of an ICO smart contract\r\n   */   \r\n  function setIcoContract(address _icoContract) public onlyOwner {\r\n    if (_icoContract != address(0)) {\r\n      icoContract = _icoContract;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Supply tokens to ICO contract\r\n   * @param _value uint256 amount of tokens to sell\r\n   */\r\n  function sell(uint256 _value) public onlyOwner returns (bool) {\r\n    require(icoContract != address(0));\r\n    require(_value <= balances[msg.sender] && balances[icoContract] + _value >= balances[icoContract]); \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[icoContract] = balances[icoContract].add(_value);\r\n    emit Sell(msg.sender, _value);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev default payable function executed after receiving ether\r\n   */ \r\n  function () public payable {\r\n        // contract does not accept ether\r\n        revert();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"}]","ContractName":"C3Coin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b0c329cc2783acdd6573ebdbbe6b86e1c489003ac2ae1fd46a6e05adfaaa490"}]}