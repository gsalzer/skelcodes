{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title HolderBase\r\n * @notice HolderBase handles data & funcitons for token or ether holders.\r\n * HolderBase contract can distribute only one of ether or token.\r\n */\r\ncontract HolderBase is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 public constant MAX_HOLDERS = 64; // TODO: tokyo-input should verify # of holders\r\n  uint256 public coeff;\r\n  bool public distributed;\r\n  bool public initialized;\r\n\r\n  struct Holder {\r\n    address addr;\r\n    uint96 ratio;\r\n  }\r\n\r\n  Holder[] public holders;\r\n\r\n  event Distributed();\r\n\r\n  function HolderBase(uint256 _coeff) public {\r\n    require(_coeff != 0);\r\n    coeff = _coeff;\r\n  }\r\n\r\n  function getHolderCount() public view returns (uint256) {\r\n    return holders.length;\r\n  }\r\n\r\n  function initHolders(address[] _addrs, uint96[] _ratios) public onlyOwner {\r\n    require(!initialized);\r\n    require(holders.length == 0);\r\n    require(_addrs.length != 0);\r\n    require(_addrs.length <= MAX_HOLDERS);\r\n    require(_addrs.length == _ratios.length);\r\n\r\n    uint256 accRatio;\r\n\r\n    for(uint8 i = 0; i < _addrs.length; i++) {\r\n      if (_addrs[i] != address(0)) {\r\n        // address will be 0x00 in case of \"crowdsale\".\r\n        holders.push(Holder(_addrs[i], _ratios[i]));\r\n      }\r\n\r\n      accRatio = accRatio.add(uint256(_ratios[i]));\r\n    }\r\n\r\n    require(accRatio <= coeff);\r\n\r\n    initialized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Distribute ether to `holder`s according to ratio.\r\n   * Remaining ether is transfered to `wallet` from the close\r\n   * function of RefundVault contract.\r\n   */\r\n  function distribute() internal {\r\n    require(!distributed, \"Already distributed\");\r\n    uint256 balance = this.balance;\r\n\r\n    require(balance > 0, \"No ether to distribute\");\r\n    distributed = true;\r\n\r\n    for (uint8 i = 0; i < holders.length; i++) {\r\n      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);\r\n\r\n      holders[i].addr.transfer(holderAmount);\r\n    }\r\n\r\n    emit Distributed(); // A single log to reduce gas\r\n  }\r\n\r\n  /**\r\n   * @dev Distribute ERC20 token to `holder`s according to ratio.\r\n   */\r\n  function distributeToken(ERC20Basic _token, uint256 _targetTotalSupply) internal {\r\n    require(!distributed, \"Already distributed\");\r\n    distributed = true;\r\n\r\n    for (uint8 i = 0; i < holders.length; i++) {\r\n      uint256 holderAmount = _targetTotalSupply.mul(uint256(holders[i].ratio)).div(coeff);\r\n      deliverTokens(_token, holders[i].addr, holderAmount);\r\n    }\r\n\r\n    emit Distributed(); // A single log to reduce gas\r\n  }\r\n\r\n  // Override to distribute tokens\r\n  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {}\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MultiHolderVault\r\n * @dev This contract distribute ether to multiple address.\r\n */\r\ncontract MultiHolderVault is HolderBase, RefundVault {\r\n  using SafeMath for uint256;\r\n\r\n  function MultiHolderVault(address _wallet, uint256 _ratioCoeff)\r\n    public\r\n    HolderBase(_ratioCoeff)\r\n    RefundVault(_wallet)\r\n  {}\r\n\r\n  function close() public onlyOwner {\r\n    require(state == State.Active);\r\n    require(initialized);\r\n\r\n    super.distribute(); // distribute ether to holders\r\n    super.close(); // transfer remaining ether to wallet\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOLDERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ratio\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coeff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_ratios\",\"type\":\"uint96[]\"}],\"name\":\"initHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_ratioCoeff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiHolderVault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aa6d812eefd2c8e36cd38b12ec6ddea6130b63460000000000000000000000000000000000000000000000000000000000002710","Library":"","SwarmSource":"bzzr://ca64f99371fe970c533c3f6f8bbf9f4f22c9fb72b631e9c41c555dbc3e9351de"}]}