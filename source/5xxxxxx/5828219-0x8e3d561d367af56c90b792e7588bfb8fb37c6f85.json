{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable\r\n{\r\n    address owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient\r\n{\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract TokenERC20 is Ownable\r\n{\r\n    using SafeMath for uint;\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals = 18;\r\n    uint256 DEC = 10 ** uint256(decimals);\r\n    uint256 public totalSupply;\r\n    uint256 public avaliableSupply;\r\n    uint256 public buyPrice = 1000000000000000000 wei;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public\r\n    {\r\n        totalSupply = initialSupply.mul(DEC);  // Update total supply with the decimal amount\r\n        balanceOf[this] = totalSupply;         // Give the creator all initial tokens\r\n        avaliableSupply = balanceOf[this];     // Show how much tokens on contract\r\n        name = tokenName;                      // Set the name for display purposes\r\n        symbol = tokenSymbol;                  // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     *\r\n     * @param _from - address of the contract\r\n     * @param _to - address of the investor\r\n     * @param _value - tokens for the investor\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal\r\n    {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        // Subtract from the sender\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\r\n\r\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n        returns (bool success)\r\n    {\r\n        uint oldValue = allowance[msg.sender][_spender];\r\n\r\n        if (_subtractedValue > oldValue) {\r\n            allowance[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        avaliableSupply = avaliableSupply.sub(_value);\r\n\r\n        emit Burn(msg.sender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);              // Update totalSupply\r\n        avaliableSupply = avaliableSupply.sub(_value);\r\n\r\n        emit Burn(_from, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Extending is TokenERC20\r\n{\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n    * Function for transfer ethereum from contract to any address\r\n    *\r\n    * @param _to - address of the recipient\r\n    * @param amount - ethereum\r\n    */\r\n    function transferEthFromContract(address _to, uint256 amount) public onlyOwner\r\n    {\r\n        _to.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * Function for transfer tokens from contract to any address\r\n    *\r\n    */\r\n    function transferTokensFromContract(address _to, uint256 _value) public onlyOwner\r\n    {\r\n        avaliableSupply = avaliableSupply.sub(_value);\r\n        _transfer(this, _to, _value);\r\n    }\r\n}\r\n\r\ncontract Pauseble is TokenERC20\r\n{\r\n    event EPause();\r\n    event EUnpause();\r\n\r\n    bool public paused = true;\r\n    uint public startIcoDate = 0;\r\n\r\n    modifier whenNotPaused()\r\n    {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused()\r\n    {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner\r\n    {\r\n        paused = true;\r\n        emit EPause();\r\n    }\r\n\r\n    function pauseInternal() internal\r\n    {\r\n        paused = true;\r\n        emit EPause();\r\n    }\r\n\r\n    function unpause() public onlyOwner\r\n    {\r\n        paused = false;\r\n        emit EUnpause();\r\n    }\r\n\r\n    function unpauseInternal() internal\r\n    {\r\n        paused = false;\r\n        emit EUnpause();\r\n    }\r\n}\r\n\r\ncontract StreamityCrowdsale is Pauseble\r\n{\r\n    using SafeMath for uint;\r\n\r\n    uint public stage = 0;\r\n\r\n    event CrowdSaleFinished(string info);\r\n\r\n    struct Ico {\r\n        uint256 tokens;             // Tokens in crowdsale\r\n        uint startDate;             // Date when crowsale will be starting, after its starting that property will be the 0\r\n        uint endDate;               // Date when crowdsale will be stop\r\n        uint8 discount;             // Discount\r\n        uint8 discountFirstDayICO;  // Discount. Only for first stage ico\r\n    }\r\n\r\n    Ico public ICO;\r\n\r\n    /**\r\n    * Expanding of the functionality\r\n    *\r\n    * @param _numerator - Numerator - value (10000)\r\n    * @param _denominator - Denominator - value (10000)\r\n    *\r\n    * example: price 1000 tokens by 1 ether = changeRate(1, 1000)\r\n    */\r\n    function changeRate(uint256 _numerator, uint256 _denominator) public onlyOwner\r\n        returns (bool success)\r\n    {\r\n        if (_numerator == 0) _numerator = 1;\r\n        if (_denominator == 0) _denominator = 1;\r\n\r\n        buyPrice = (_numerator.mul(DEC)).div(_denominator);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    * Function show in contract what is now\r\n    *\r\n    */\r\n    function crowdSaleStatus() internal constant\r\n        returns (string)\r\n    {\r\n        if (1 == stage) {\r\n            return \"Pre-ICO\";\r\n        } else if(2 == stage) {\r\n            return \"ICO first stage\";\r\n        } else if (3 == stage) {\r\n            return \"ICO second stage\";\r\n        } else if (4 >= stage) {\r\n            return \"feature stage\";\r\n        }\r\n\r\n        return \"there is no stage at present\";\r\n    }\r\n\r\n    /*\r\n    * Function for selling tokens in crowd time.\r\n    *\r\n    */\r\n    function sell(address _investor, uint256 amount) internal\r\n    {\r\n        uint256 _amount = (amount.mul(DEC)).div(buyPrice);\r\n\r\n        if (1 == stage) {\r\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\r\n        }\r\n        else if (2 == stage)\r\n        {\r\n            if (now <= ICO.startDate + 1 days)\r\n            {\r\n                  if (0 == ICO.discountFirstDayICO) {\r\n                      ICO.discountFirstDayICO = 20;\r\n                  }\r\n\r\n                  _amount = _amount.add(withDiscount(_amount, ICO.discountFirstDayICO));\r\n            } else {\r\n                _amount = _amount.add(withDiscount(_amount, ICO.discount));\r\n            }\r\n        } else if (3 == stage) {\r\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\r\n        }\r\n\r\n        if (ICO.tokens < _amount)\r\n        {\r\n            emit CrowdSaleFinished(crowdSaleStatus());\r\n            pauseInternal();\r\n\r\n            revert();\r\n        }\r\n\r\n        ICO.tokens = ICO.tokens.sub(_amount);\r\n        avaliableSupply = avaliableSupply.sub(_amount);\r\n\r\n        _transfer(this, _investor, _amount);\r\n    }\r\n\r\n    /*\r\n    * Function for start crowdsale (any)\r\n    *\r\n    * @param _tokens - How much tokens will have the crowdsale - amount humanlike value (10000)\r\n    * @param _startDate - When crowdsale will be start - unix timestamp (1512231703 )\r\n    * @param _endDate - When crowdsale will be end - humanlike value (7) same as 7 days\r\n    * @param _discount - Discount for the crowd - humanlive value (7) same as 7 %\r\n    * @param _discount - Discount for the crowds first day - humanlive value (7) same as 7 %\r\n    */\r\n    function startCrowd(uint256 _tokens, uint _startDate, uint _endDate, uint8 _discount, uint8 _discountFirstDayICO) public onlyOwner\r\n    {\r\n        require(_tokens * DEC <= avaliableSupply);  // require to set correct tokens value for crowd\r\n        startIcoDate = _startDate;\r\n        ICO = Ico (_tokens * DEC, _startDate, _startDate + _endDate * 1 days , _discount, _discountFirstDayICO);\r\n        stage = stage.add(1);\r\n        unpauseInternal();\r\n    }\r\n\r\n    /**\r\n    * Function for web3js, should be call when somebody will buy tokens from website. This function only delegator.\r\n    *\r\n    * @param _investor - address of investor (who payed)\r\n    * @param _amount - ethereum\r\n    */\r\n    function transferWeb3js(address _investor, uint256 _amount) external onlyOwner\r\n    {\r\n        sell(_investor, _amount);\r\n    }\r\n\r\n    /**\r\n    * Function for adding discount\r\n    *\r\n    */\r\n    function withDiscount(uint256 _amount, uint _percent) internal pure\r\n        returns (uint256)\r\n    {\r\n        return (_amount.mul(_percent)).div(100);\r\n    }\r\n}\r\n\r\ncontract StreamityContract is ERC20Extending, StreamityCrowdsale\r\n{\r\n    using SafeMath for uint;\r\n\r\n    uint public weisRaised;  // how many weis was raised on crowdsale\r\n\r\n    /* Streamity tokens Constructor */\r\n    function StreamityContract() public TokenERC20(130000000, \"Streamity\", \"STM\") {} //change before send !!!\r\n\r\n    /**\r\n    * Function payments handler\r\n    *\r\n    */\r\n    function () public payable\r\n    {\r\n        assert(msg.value >= 1 ether / 10);\r\n        require(now >= ICO.startDate);\r\n\r\n        if (now >= ICO.endDate) {\r\n            pauseInternal();\r\n            emit CrowdSaleFinished(crowdSaleStatus());\r\n        }\r\n\r\n\r\n        if (0 != startIcoDate) {\r\n            if (now < startIcoDate) {\r\n                revert();\r\n            } else {\r\n                startIcoDate = 0;\r\n            }\r\n        }\r\n\r\n        if (paused == false) {\r\n            sell(msg.sender, msg.value);\r\n            weisRaised = weisRaised.add(msg.value);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancy_lock);\r\n    reentrancy_lock = true;\r\n    _;\r\n    reentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using his signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ContractToken {\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n}\r\n\r\ncontract StreamityEscrow is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using ECRecovery for bytes32;\r\n\r\n    uint8 constant public STATUS_NO_DEAL = 0x0;\r\n    uint8 constant public STATUS_DEAL_WAIT_CONFIRMATION = 0x01;\r\n    uint8 constant public STATUS_DEAL_APPROVE = 0x02;\r\n    uint8 constant public STATUS_DEAL_RELEASE = 0x03;\r\n\r\n    TokenERC20 public streamityContractAddress;\r\n    \r\n    uint256 public availableForWithdrawal;\r\n\r\n    uint32 public requestCancelationTime;\r\n\r\n    mapping(bytes32 => Deal) public streamityTransfers;\r\n\r\n    function StreamityEscrow(address streamityContract) public {\r\n        owner = msg.sender; \r\n        requestCancelationTime = 2 hours;\r\n        streamityContractAddress = TokenERC20(streamityContract);\r\n    }\r\n\r\n    struct Deal {\r\n        uint256 value;\r\n        uint256 cancelTime;\r\n        address seller;\r\n        address buyer;\r\n        uint8 status;\r\n        uint256 commission;\r\n        bool isAltCoin;\r\n    }\r\n\r\n    event StartDealEvent(bytes32 _hashDeal, address _seller, address _buyer);\r\n    event ApproveDealEvent(bytes32 _hashDeal, address _seller, address _buyer);\r\n    event ReleasedEvent(bytes32 _hashDeal, address _seller, address _buyer);\r\n    event SellerCancelEvent(bytes32 _hashDeal, address _seller, address _buyer);\r\n    \r\n    function pay(bytes32 _tradeID, address _seller, address _buyer, uint256 _value, uint256 _commission, bytes _sign) \r\n    external \r\n    payable \r\n    {\r\n        require(msg.value > 0);\r\n        require(msg.value == _value);\r\n        require(msg.value > _commission);\r\n        bytes32 _hashDeal = keccak256(_tradeID, _seller, _buyer, msg.value, _commission);\r\n        verifyDeal(_hashDeal, _sign);\r\n        startDealForUser(_hashDeal, _seller, _buyer, _commission, msg.value, false);\r\n    }\r\n\r\n    function () public payable {\r\n        availableForWithdrawal = availableForWithdrawal.add(msg.value);\r\n    }\r\n\r\n    function payAltCoin(bytes32 _tradeID, address _seller, address _buyer, uint256 _value, uint256 _commission, bytes _sign) \r\n    external \r\n    {\r\n        bytes32 _hashDeal = keccak256(_tradeID, _seller, _buyer, _value, _commission);\r\n        verifyDeal(_hashDeal, _sign);\r\n        bool result = streamityContractAddress.transferFrom(msg.sender, address(this), _value);\r\n        require(result == true);\r\n        startDealForUser(_hashDeal, _seller, _buyer, _commission, _value, true);\r\n    }\r\n\r\n    function verifyDeal(bytes32 _hashDeal, bytes _sign) private view {\r\n        require(_hashDeal.recover(_sign) == owner);\r\n        require(streamityTransfers[_hashDeal].status == STATUS_NO_DEAL); \r\n    }\r\n\r\n    function startDealForUser(bytes32 _hashDeal, address _seller, address _buyer, uint256 _commission, uint256 _value, bool isAltCoin) \r\n    private returns(bytes32) \r\n    {\r\n        Deal storage userDeals = streamityTransfers[_hashDeal];\r\n        userDeals.seller = _seller;\r\n        userDeals.buyer = _buyer;\r\n        userDeals.value = _value; \r\n        userDeals.commission = _commission; \r\n        userDeals.cancelTime = block.timestamp.add(requestCancelationTime); \r\n        userDeals.status = STATUS_DEAL_WAIT_CONFIRMATION;\r\n        userDeals.isAltCoin = isAltCoin;\r\n        emit StartDealEvent(_hashDeal, _seller, _buyer);\r\n        \r\n        return _hashDeal;\r\n    }\r\n\r\n    function withdrawCommisionToAddress(address _to, uint256 _amount) external onlyOwner {\r\n        require(_amount <= availableForWithdrawal); \r\n        availableForWithdrawal = availableForWithdrawal.sub(_amount);\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function withdrawCommisionToAddressAltCoin(address _to, uint256 _amount) external onlyOwner {\r\n        streamityContractAddress.transfer(_to, _amount);\r\n    }\r\n\r\n    function getStatusDeal(bytes32 _hashDeal) external view returns (uint8) {\r\n        return streamityTransfers[_hashDeal].status;\r\n    }\r\n    \r\n    // _additionalComission is wei\r\n    uint256 constant GAS_releaseTokens = 60000;\r\n    function releaseTokens(bytes32 _hashDeal, uint256 _additionalGas) \r\n    external \r\n    nonReentrant\r\n    returns(bool) \r\n    {\r\n        Deal storage deal = streamityTransfers[_hashDeal];\r\n\r\n        if (deal.status == STATUS_DEAL_APPROVE) {\r\n            deal.status = STATUS_DEAL_RELEASE; \r\n            bool result = false;\r\n\r\n            if (deal.isAltCoin == false)\r\n                result = transferMinusComission(deal.buyer, deal.value, deal.commission.add((msg.sender == owner ? (GAS_releaseTokens.add(_additionalGas)).mul(tx.gasprice) : 0)));\r\n            else \r\n                result = transferMinusComissionAltCoin(streamityContractAddress, deal.buyer, deal.value, deal.commission);\r\n\r\n            if (result == false) {\r\n                deal.status = STATUS_DEAL_APPROVE; \r\n                return false;   \r\n            }\r\n\r\n            emit ReleasedEvent(_hashDeal, deal.seller, deal.buyer);\r\n            delete streamityTransfers[_hashDeal];\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    function releaseTokensForce(bytes32 _hashDeal) \r\n    external onlyOwner\r\n    nonReentrant\r\n    returns(bool) \r\n    {\r\n        Deal storage deal = streamityTransfers[_hashDeal];\r\n        uint8 prevStatus = deal.status; \r\n        if (deal.status != STATUS_NO_DEAL) {\r\n            deal.status = STATUS_DEAL_RELEASE; \r\n            bool result = false;\r\n\r\n            if (deal.isAltCoin == false)\r\n                result = transferMinusComission(deal.buyer, deal.value, deal.commission);\r\n            else \r\n                result = transferMinusComissionAltCoin(streamityContractAddress, deal.buyer, deal.value, deal.commission);\r\n\r\n            if (result == false) {\r\n                deal.status = prevStatus; \r\n                return false;   \r\n            }\r\n\r\n            emit ReleasedEvent(_hashDeal, deal.seller, deal.buyer);\r\n            delete streamityTransfers[_hashDeal];\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    uint256 constant GAS_cancelSeller = 30000;\r\n    function cancelSeller(bytes32 _hashDeal, uint256 _additionalGas) \r\n    external onlyOwner\r\n    nonReentrant\t\r\n    returns(bool)   \r\n    {\r\n        Deal storage deal = streamityTransfers[_hashDeal];\r\n\r\n        if (deal.cancelTime > block.timestamp)\r\n            return false;\r\n\r\n        if (deal.status == STATUS_DEAL_WAIT_CONFIRMATION) {\r\n            deal.status = STATUS_DEAL_RELEASE; \r\n\r\n            bool result = false;\r\n            if (deal.isAltCoin == false)\r\n                result = transferMinusComission(deal.seller, deal.value, GAS_cancelSeller.add(_additionalGas).mul(tx.gasprice));\r\n            else \r\n                result = transferMinusComissionAltCoin(streamityContractAddress, deal.seller, deal.value, _additionalGas);\r\n\r\n            if (result == false) {\r\n                deal.status = STATUS_DEAL_WAIT_CONFIRMATION; \r\n                return false;   \r\n            }\r\n\r\n            emit SellerCancelEvent(_hashDeal, deal.seller, deal.buyer);\r\n            delete streamityTransfers[_hashDeal];\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    function approveDeal(bytes32 _hashDeal) \r\n    external \r\n    onlyOwner \r\n    nonReentrant\t\r\n    returns(bool) \r\n    {\r\n        Deal storage deal = streamityTransfers[_hashDeal];\r\n        \r\n        if (deal.status == STATUS_DEAL_WAIT_CONFIRMATION) {\r\n            deal.status = STATUS_DEAL_APPROVE;\r\n            emit ApproveDealEvent(_hashDeal, deal.seller, deal.buyer);\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    function transferMinusComission(address _to, uint256 _value, uint256 _commission) \r\n    private returns(bool) \r\n    {\r\n        uint256 _totalComission = _commission; \r\n        \r\n        require(availableForWithdrawal.add(_totalComission) >= availableForWithdrawal); // Check for overflows\r\n\r\n        availableForWithdrawal = availableForWithdrawal.add(_totalComission); \r\n\r\n        _to.transfer(_value.sub(_totalComission));\r\n        return true;\r\n    }\r\n\r\n    function transferMinusComissionAltCoin(TokenERC20 _contract, address _to, uint256 _value, uint256 _commission) \r\n    private returns(bool) \r\n    {\r\n        uint256 _totalComission = _commission; \r\n        _contract.transfer(_to, _value.sub(_totalComission));\r\n        return true;\r\n    }\r\n\r\n    function setStreamityContractAddress(address newAddress) \r\n    external onlyOwner \r\n    {\r\n        streamityContractAddress = TokenERC20(newAddress);\r\n    }\r\n\r\n    // For other Tokens\r\n    function transferToken(ContractToken _tokenContract, address _transferTo, uint256 _value) onlyOwner external {\r\n        _tokenContract.transfer(_transferTo, _value);\r\n    }\r\n    function transferTokenFrom(ContractToken _tokenContract, address _transferTo, address _transferFrom, uint256 _value) onlyOwner external {\r\n        _tokenContract.transferFrom(_transferTo, _transferFrom, _value);\r\n    }\r\n    function approveToken(ContractToken _tokenContract, address _spender, uint256 _value) onlyOwner external {\r\n        _tokenContract.approve(_spender, _value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"name\":\"_additionalGas\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_NO_DEAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableForWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"}],\"name\":\"getStatusDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"streamityContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"streamityTransfers\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cancelTime\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"isAltCoin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DEAL_RELEASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DEAL_APPROVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommisionToAddressAltCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"payAltCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"}],\"name\":\"releaseTokensForce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setStreamityContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommisionToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_transferTo\",\"type\":\"address\"},{\"name\":\"_transferFrom\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"name\":\"_additionalGas\",\"type\":\"uint256\"}],\"name\":\"cancelSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"}],\"name\":\"approveDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DEAL_WAIT_CONFIRMATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_transferTo\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCancelationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"streamityContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"StartDealEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"ApproveDealEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"ReleasedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"SellerCancelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StreamityEscrow","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000611171923b84185e9328827cfaae6630481ecc7a","Library":"ECRecovery:fc205067c7986504b6f1547e8f39765ebe4ff010","SwarmSource":"bzzr://9f15a455e92576e202c07bd381b3002a9e8f2795cd896f4afc3d5906a48f95d9"}]}