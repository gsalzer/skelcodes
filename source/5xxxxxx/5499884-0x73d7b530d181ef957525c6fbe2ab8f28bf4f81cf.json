{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/erc/erc20/ERC20Interface.sol\r\n\r\n/**\r\n * @title ERC-20 Token Standard.\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\r\n */\r\ncontract ERC20Interface {\r\n  /**\r\n   * @dev MUST trigger when tokens are transferred, including zero value transfers.\r\n   * @dev A token contract which creates new tokens SHOULD trigger a `Transfer` event\r\n   *   with the `_from` address set to `0x0` when tokens are created.\r\n   */\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * @dev MUST trigger on any successful call to `approve(address _spender, uint256 _value)`.\r\n   */\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  /**\r\n   * @notice Returns the total token supply.\r\n   * @return The supply.\r\n   */\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  /**\r\n   * @notice Returns the balance of an account with address `_owner`.\r\n   * @return The account balance.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\r\n  /**\r\n   * @notice Transfers `_value` amount of tokens to address `_to`.\r\n   *\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   *\r\n   * @dev The function MUST fire the `Transfer` event.\r\n   * @dev The function SHOULD throw if the `_from` account balance does not have enough tokens to spend.\r\n   * @dev Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\r\n   *\r\n   * @return Whether the transfer was successful or not.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool _success);\r\n\r\n  /**\r\n   * @notice Transfers `_value` amount of tokens from address `_from` to address `_to`.\r\n   *\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   *\r\n   * @dev The `transferFrom` method is used for a withdraw workflow,\r\n   *   allowing contracts to transfer tokens on your behalf.\r\n   *   This can be used for example to allow a contract to transfer tokens on your behalf\r\n   *   and/or to charge fees in sub-currencies.\r\n   * @dev The function MUST fire the `Transfer` event.\r\n   * @dev The function SHOULD throw unless the `_from` account\r\n   *   has deliberately authorized the sender of the message via some mechanism.\r\n   * @dev Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\r\n   *\r\n   * @return Whether the transfer was successful or not.\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\r\n\r\n  /**\r\n   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\r\n   *   If this function is called again it overwrites the current allowance with `_value`.\r\n   *\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   *\r\n   * @dev To prevent attack vectors like the one described in\r\n   *   https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\r\n   *   and discussed in\r\n   *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\r\n   *   clients SHOULD make sure to create user interfaces in such a way\r\n   *   that they set the allowance first to 0 before setting it to another value for the same spender.\r\n   *   THOUGH The contract itself shouldn't enforce it,\r\n   *   to allow backwards compatibility with contracts deployed before.\r\n   *\r\n   * @return Whether the approval was successful or not.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool _success);\r\n\r\n  /**\r\n   * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\r\n   *\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   *\r\n   * @return Amount of remaining tokens allowed to spent.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 _remaining);\r\n}\r\n\r\n// File: zeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/erc/erc20/ERC20.sol\r\n\r\n/**\r\n * @title An implementation of the ERC-20 Token Standard.\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\r\n */\r\ncontract ERC20 is ERC20Interface {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal _totalSupply;\r\n  mapping (address => uint256) internal _balance;\r\n  mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n\r\n  /**\r\n   * @notice Returns the total token supply.\r\n   * @return The supply.\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the balance of an account with address `_owner`.\r\n   * @return The account balance.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return _balance[_owner];\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers `_value` amount of tokens to address `_to`.\r\n   *\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   *\r\n   * @return Whether the transfer was successful or not.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    _balance[msg.sender] = _balance[msg.sender].sub(_value);\r\n    _balance[_to] = _balance[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers `_value` amount of tokens from address `_from` to address `_to`.\r\n   *\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   *\r\n   * @return Whether the transfer was successful or not.\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    _balance[_from] = _balance[_from].sub(_value);\r\n    _balance[_to] = _balance[_to].add(_value);\r\n    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\r\n   *   If this function is called again it overwrites the current allowance with `_value`.\r\n   *\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   *\r\n   * @return Whether the approval was successful or not.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    _allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\r\n   *\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   *\r\n   * @return Amount of remaining tokens allowed to spent.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return _allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n// File: contracts/erc/erc20/ERC20Burnable.sol\r\n\r\n/**\r\n * @title An implementation of the ERC-20 Token Standard\r\n *   which allows tokens to be burnt.\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  function burn(uint256 _value) public returns (bool) {\r\n    _balance[msg.sender] = _balance[msg.sender].sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n\r\n    emit Transfer(msg.sender, address(0), _value);\r\n    emit Burn(msg.sender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool) {\r\n    _balance[_from] = _balance[_from].sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, address(0), _value);\r\n    emit Burn(_from, _value);\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/erc/erc20/ERC20DetailedInterface.sol\r\n\r\n/**\r\n * @title Contains optional methods which give some detailed information about the token\r\n *   in ERC-20 Token Standard.\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\r\n */\r\ncontract ERC20DetailedInterface is ERC20Interface {\r\n  /**\r\n   * @notice Returns the name of the token.\r\n   * @return The name.\r\n   */\r\n  function name() public view returns (string _name);\r\n\r\n  /**\r\n   * @notice Returns the name of the token.\r\n   * @return The symbol.\r\n   */\r\n  function symbol() public view returns (string _symbol);\r\n\r\n  /**\r\n   * @notice Returns the number of decimals the token uses.\r\n   * @dev For example, 8 means to divide the token amount by 100,000,000\r\n   *   to get its user representation.\r\n   * @return The number of decimals.\r\n   */\r\n  function decimals() public view returns (uint8 _decimals);\r\n}\r\n\r\n// File: contracts/erc/erc20/ERC20RecipientInterface.sol\r\n\r\ninterface ERC20RecipientInterface {\r\n  function receiveApproval(address _from, uint256 _value, address _erc20Address, bytes _data) external;\r\n}\r\n\r\n// File: contracts/erc/erc20/ERC20Extended.sol\r\n\r\n/**\r\n * @title An implementation of the ERC-20 Token Standard\r\n *   which implements `approveAndCall` function according to the extended standard.\r\n */\r\ncontract ERC20Extended is ERC20 {\r\n  /**\r\n   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\r\n   *   After the approval, executes `receiveApproval` function on `_spender`.\r\n   *   If this function is called again it overwrites the current allowance with `_value`.\r\n   *\r\n   * @param _spender The address that will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @param _data Additional data to be passed to `receiveApproval` function on `_spender`.\r\n   *\r\n   * @return Whether the approval was successful or not.\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _data) public returns (bool) {\r\n    require(approve(_spender, _value));\r\n    ERC20RecipientInterface(_spender).receiveApproval(msg.sender, _value, this, _data);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: zeppelin/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/erc/erc20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title An implementation of the ERC-20 Token Standard\r\n *   which allows tokens to be minted.\r\n */\r\ncontract ERC20Mintable is ERC20, Ownable {\r\n  bool public mintingFinished = false;\r\n\r\n  event Mint(address indexed to, uint256 value);\r\n  event MintFinished();\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _value) onlyOwner canMint public returns (bool) {\r\n    _balance[_to] = _balance[_to].add(_value);\r\n    _totalSupply = _totalSupply.add(_value);\r\n\r\n    emit Mint(_to, _value);\r\n    emit Transfer(address(0), _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/AxieOriginCoin.sol\r\n\r\n/**\r\n * @title The contract which holds Axie Origin Coins.\r\n * @dev Five Axie Origin Coins can be redeemed for one Origin Axie.\r\n */\r\ncontract AxieOriginCoin is ERC20DetailedInterface, ERC20Extended, ERC20Mintable, ERC20Burnable {\r\n  uint256 constant public NUM_COIN_PER_AXIE = 5;\r\n  uint256 constant public NUM_RESERVED_AXIE = 427;\r\n  uint256 constant public NUM_RESERVED_COIN = NUM_RESERVED_AXIE * NUM_COIN_PER_AXIE;\r\n\r\n  constructor() public {\r\n    // Reserve 20% of all remaining Axies from the Presale.\r\n    mint(msg.sender, NUM_RESERVED_COIN);\r\n\r\n    // As its name says.\r\n    _allocateUnspentRefTokens();\r\n\r\n    // Don't allow tokens to be minted anymore.\r\n    finishMinting();\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the name of the token.\r\n   * @return The name.\r\n   */\r\n  function name() public view returns (string) {\r\n    return \"Axie Origin Coin\";\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the name of the token.\r\n   * @return The symbol.\r\n   */\r\n  function symbol() public view returns (string) {\r\n    return \"AOC\";\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the number of decimals the token uses.\r\n   * @return The number of decimals.\r\n   */\r\n  function decimals() public view returns (uint8) {\r\n    return 0;\r\n  }\r\n\r\n  function _allocateUnspentRefTokens() private {\r\n    // 0\r\n    mint(0x052731748979e182fdf9Bf849C6df54f9f196645, 3);\r\n    mint(0x1878B18693fc273DE9FD833B83f9679785c01aB2, 1);\r\n    mint(0x1E3934EA7E416F4E2BC5F7d55aE9783da0061475, 1);\r\n    mint(0x32451d81EB31411B2CA4e70F3d87B3DEACCEA2d2, 3);\r\n    mint(0x494952f01a30547d269aaF147e6226f940f5B041, 8);\r\n    // 5\r\n    mint(0x5BD73bB4e2A9f81922dbE7F4b321cfAE208BE2E6, 1);\r\n    mint(0x6564A5639e17e186f749e493Af98a51fd3092048, 12);\r\n    mint(0x696A567271BBDAC6f435CAb9D69e56cD115B76eB, 1);\r\n    mint(0x70580eA14d98a53fd59376dC7e959F4a6129bB9b, 2);\r\n    mint(0x75f732C1b1D0bBdA60f4B49EF0B36EB6e8AD6531, 1);\r\n    // 10\r\n    mint(0x84418eD93d141CFE7471dED46747D003117eCaD5, 2);\r\n    mint(0x9455A90Cbf43D331Dd76a2d07192431370f64384, 2);\r\n    mint(0x95fd3579c73Ea675C89415285355C4795118B345, 1);\r\n    mint(0xa3346F3Af6A3AE749aCA18d7968A03811d15d733, 1);\r\n    mint(0xA586A3B8939e9C0DC72D88166F6F6bb7558EeDCe, 1);\r\n    // 15\r\n    mint(0xAb01D4895b802c38Eee7553bb52A4160CFca2878, 1);\r\n    mint(0xd6E8D52Be82550B230176b6E9bA49BC3fAF43E4a, 1);\r\n    mint(0xEAB0c22D927d15391dd0CfbE89a3b59F6e814551, 3);\r\n    mint(0x03300279d711b8dEb1353DD9719eFf81Ea1b6bEd, 3);\r\n    mint(0x03b4A1fdeCeC66338071180a7F2f2D518CFf224A, 4);\r\n    // 20\r\n    mint(0x0537544De3935408246EE2Ad09949D046F92574D, 4);\r\n    mint(0x0E26169270D92Ff3649461B55CA51C99703dE59e, 1);\r\n    mint(0x16Ea1F673E01419BA9aF51365b88138Ac492489a, 1);\r\n    mint(0x28d02f67316123Dc0293849a0D254AD86b379b34, 2);\r\n    mint(0x38A6022FECb675a53F31CDaB3457456DD6e5911c, 2);\r\n    // 25\r\n    mint(0x4260E8206c58cD0530d9A5cff55B77D6165c7BCd, 1);\r\n    mint(0x7E1DCf785f0353BF657c38Ab7865C1f184EFE208, 4);\r\n    mint(0x7f328117b7de7579C6249258d084f75556E2699d, 1);\r\n    mint(0x8a9d49a6e9D037843560091fC280B9Ff9819e462, 3);\r\n    mint(0x8C5fC43ad00Cc53e11F61bEce329DDc5E3ea0929, 3);\r\n    // 30\r\n    mint(0x8FF9679fc77B077cB5f8818B7B63022582b5d538, 1);\r\n    mint(0x97bfc7fc1Ee5b25CfAF6075bac5d7EcA037AD694, 1);\r\n    mint(0x993a64DB27a51D1E6C1AFF56Fb61Ba0Dac253acb, 2);\r\n    mint(0xa6bCEc585F12CeFBa9709A080cE2EFD38f871024, 1);\r\n    mint(0xaF6488744207273c79B896922e65651C61033787, 5);\r\n    // 35\r\n    mint(0xB3C2a4ce7ce57A74371b7E3dAE8f3393229c2aaC, 3);\r\n    mint(0xb4A90c06d5bC51D79D44e11336077b6F9ccD5683, 23);\r\n    mint(0xB94c9e7D28e54cb37fA3B0D3FFeC24A8E4affA90, 3);\r\n    mint(0xDe0D2e92e85B8B7828723Ee789ffA3Ba9FdCDb9c, 1);\r\n    mint(0xe37Ba1117746473db68A807aE9E37a2088BDB20f, 1);\r\n    // 40\r\n    mint(0x5eA1D56D0ddE1cA5B50c277275855F69edEfA169, 1);\r\n    mint(0x6692DE2d4b3102ab922cB21157EeBCD9BDDDBb15, 4);\r\n    // 42\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_RESERVED_AXIE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_COIN_PER_AXIE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_RESERVED_COIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AxieOriginCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0af71108af0255efd4917da60ba0ec748697c11ebfd1b33f5f9c295a7f6181dd"}]}