{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenInterface {\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract rateInterface {\r\n    function readRate(string _currency) public view returns (uint256 oneEtherValue);\r\n}\r\n\r\ncontract RC {\r\n    using SafeMath for uint256;\r\n    TokenSale tokenSaleContract;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    \r\n    uint256 public soldTokens;\r\n    uint256 public remainingTokens;\r\n    \r\n    uint256 public oneTokenInUsdWei;\r\n\r\n    function RC(address _tokenSaleContract, uint256 _oneTokenInUsdWei, uint256 _remainingTokens,  uint256 _startTime , uint256 _endTime ) public {\r\n        require ( _tokenSaleContract != 0 );\r\n        require ( _oneTokenInUsdWei != 0 );\r\n        require( _remainingTokens != 0 );\r\n        \r\n        tokenSaleContract = TokenSale(_tokenSaleContract);\r\n        \r\n        tokenSaleContract.addMeByRC();\r\n        \r\n        soldTokens = 0;\r\n        remainingTokens = _remainingTokens;\r\n        oneTokenInUsdWei = _oneTokenInUsdWei;\r\n        \r\n        setTimeRC( _startTime, _endTime );\r\n    }\r\n    \r\n    function setTimeRC(uint256 _startTime, uint256 _endTime ) internal {\r\n        if( _startTime == 0 ) {\r\n            startTime = tokenSaleContract.startTime();\r\n        } else {\r\n            startTime = _startTime;\r\n        }\r\n        if( _endTime == 0 ) {\r\n            endTime = tokenSaleContract.endTime();\r\n        } else {\r\n            endTime = _endTime;\r\n        }\r\n    }\r\n    \r\n    modifier onlyTokenSaleOwner() {\r\n        require(msg.sender == tokenSaleContract.owner() );\r\n        _;\r\n    }\r\n    \r\n    function setTime(uint256 _newStart, uint256 _newEnd) public onlyTokenSaleOwner {\r\n        if ( _newStart != 0 ) startTime = _newStart;\r\n        if ( _newEnd != 0 ) endTime = _newEnd;\r\n    }\r\n    \r\n    event BuyRC(address indexed buyer, bytes trackID, uint256 value, uint256 soldToken, uint256 valueTokenInUsdWei );\r\n    \r\n    function () public payable {\r\n        require( now > startTime );\r\n        require( now < endTime );\r\n        require( msg.value >= 1*10**18); //1 Ether\r\n        require( remainingTokens > 0 );\r\n        \r\n        uint256 tokenAmount = tokenSaleContract.buyFromRC.value(msg.value)(msg.sender, oneTokenInUsdWei, remainingTokens);\r\n        \r\n        remainingTokens = remainingTokens.sub(tokenAmount);\r\n        soldTokens = soldTokens.add(tokenAmount);\r\n        \r\n        BuyRC( msg.sender, msg.data, msg.value, tokenAmount, oneTokenInUsdWei );\r\n    }\r\n}\r\n\r\ncontract CardSale {\r\n    using SafeMath for uint256;\r\n    TokenSale tokenSaleContract;\r\n    \r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    \r\n    uint256 public soldTokens;\r\n    uint256 public remainingTokens;    \r\n    \r\n    mapping(address => bool) public rc;\r\n    \r\n    function CardSale(address _tokenSaleContract, uint256 _remainingTokens,  uint256 _startTime , uint256 _endTime ) public {\r\n        require ( _tokenSaleContract != 0 );\r\n        require( _remainingTokens != 0 );\r\n        \r\n        tokenSaleContract = TokenSale(_tokenSaleContract);\r\n        \r\n        tokenSaleContract.addMeByRC();\r\n        \r\n        soldTokens = 0;\r\n        remainingTokens = _remainingTokens;\r\n        \r\n        setTimeRC( _startTime, _endTime );\r\n    }\r\n    \r\n    function setTimeRC(uint256 _startTime, uint256 _endTime ) internal {\r\n        if( _startTime == 0 ) {\r\n            startTime = tokenSaleContract.startTime();\r\n        } else {\r\n            startTime = _startTime;\r\n        }\r\n        if( _endTime == 0 ) {\r\n            endTime = tokenSaleContract.endTime();\r\n        } else {\r\n            endTime = _endTime;\r\n        }\r\n    }\r\n\r\n    function owner() view public returns (address) {\r\n        return tokenSaleContract.owner();\r\n    }\r\n    \r\n    modifier onlyTokenSaleOwner() {\r\n        require(msg.sender == owner() );\r\n        _;\r\n    }\r\n    \r\n    function setTime(uint256 _newStart, uint256 _newEnd) public onlyTokenSaleOwner {\r\n        if ( _newStart != 0 ) startTime = _newStart;\r\n        if ( _newEnd != 0 ) endTime = _newEnd;\r\n    }\r\n    \r\n    event NewRC(address contr);\r\n    \r\n    function addMeByRC() public {\r\n        require(tx.origin == owner() );\r\n        \r\n        rc[ msg.sender ]  = true;\r\n        \r\n        NewRC(msg.sender);\r\n    }\r\n    \r\n    function newCard(uint256 _oneTokenInUsdWei) onlyTokenSaleOwner public {\r\n        new RC(this, _oneTokenInUsdWei, remainingTokens, 0, 0 );\r\n    }\r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n    \r\n    modifier onlyRC() {\r\n        require( rc[msg.sender] ); //check if is an authorized rcContract\r\n        _;\r\n    }\r\n    \r\n    function buyFromRC(address _buyer, uint256 _rcTokenValue, uint256 ) onlyRC public payable returns(uint256) {\r\n        uint256 tokenAmount = tokenSaleContract.buyFromRC.value(msg.value)(_buyer, _rcTokenValue, remainingTokens);\r\n        remainingTokens = remainingTokens.sub(tokenAmount);\r\n        soldTokens = soldTokens.add(tokenAmount);\r\n        return tokenAmount;\r\n    }\r\n}\r\n\r\ncontract TokenSale is Ownable {\r\n    using SafeMath for uint256;\r\n    tokenInterface public tokenContract;\r\n    rateInterface public rateContract;\r\n    \r\n    address public wallet;\r\n    address public advisor;\r\n    uint256 public advisorFee; // 1 = 0,1%\r\n    \r\n\tuint256 public constant decimals = 18;\r\n    \r\n    uint256 public endTime;  // seconds from 1970-01-01T00:00:00Z\r\n    uint256 public startTime;  // seconds from 1970-01-01T00:00:00Z\r\n\r\n    mapping(address => bool) public rc;\r\n\r\n\r\n    function TokenSale(address _tokenAddress, address _rateAddress, uint256 _startTime, uint256 _endTime) public {\r\n        tokenContract = tokenInterface(_tokenAddress);\r\n        rateContract = rateInterface(_rateAddress);\r\n        setTime(_startTime, _endTime); \r\n        wallet = msg.sender;\r\n        advisor = msg.sender;\r\n        advisorFee = 0 * 10**3;\r\n    }\r\n    \r\n    function tokenValueInEther(uint256 _oneTokenInUsdWei) public view returns(uint256 tknValue) {\r\n        uint256 oneEtherInUsd = rateContract.readRate(\"usd\");\r\n        tknValue = _oneTokenInUsdWei.mul(10 ** uint256(decimals)).div(oneEtherInUsd);\r\n        return tknValue;\r\n    } \r\n    \r\n    modifier isBuyable() {\r\n        require( now > startTime ); // check if started\r\n        require( now < endTime ); // check if ended\r\n        require( msg.value > 0 );\r\n\t\t\r\n\t\tuint256 remainingTokens = tokenContract.balanceOf(this);\r\n        require( remainingTokens > 0 ); // Check if there are any remaining tokens \r\n        _;\r\n    }\r\n    \r\n    event Buy(address buyer, uint256 value, address indexed ambassador);\r\n    \r\n    modifier onlyRC() {\r\n        require( rc[msg.sender] ); //check if is an authorized rcContract\r\n        _;\r\n    }\r\n    \r\n    function buyFromRC(address _buyer, uint256 _rcTokenValue, uint256 _remainingTokens) onlyRC isBuyable public payable returns(uint256) {\r\n        uint256 oneToken = 10 ** uint256(decimals);\r\n        uint256 tokenValue = tokenValueInEther(_rcTokenValue);\r\n        uint256 tokenAmount = msg.value.mul(oneToken).div(tokenValue);\r\n        address _ambassador = msg.sender;\r\n        \r\n        \r\n        uint256 remainingTokens = tokenContract.balanceOf(this);\r\n        if ( _remainingTokens < remainingTokens ) {\r\n            remainingTokens = _remainingTokens;\r\n        }\r\n        \r\n        if ( remainingTokens < tokenAmount ) {\r\n            uint256 refund = (tokenAmount - remainingTokens).mul(tokenValue).div(oneToken);\r\n            tokenAmount = remainingTokens;\r\n            forward(msg.value-refund);\r\n\t\t\tremainingTokens = 0; // set remaining token to 0\r\n             _buyer.transfer(refund);\r\n        } else {\r\n\t\t\tremainingTokens = remainingTokens.sub(tokenAmount); // update remaining token without bonus\r\n            forward(msg.value);\r\n        }\r\n        \r\n        tokenContract.transfer(_buyer, tokenAmount);\r\n        Buy(_buyer, tokenAmount, _ambassador);\r\n\t\t\r\n        return tokenAmount; \r\n    }\r\n    \r\n    function forward(uint256 _amount) internal {\r\n        uint256 advisorAmount = _amount.mul(advisorFee).div(10**3);\r\n        uint256 walletAmount = _amount - advisorAmount;\r\n        advisor.transfer(advisorAmount);\r\n        wallet.transfer(walletAmount);\r\n    }\r\n\r\n    event NewRC(address contr);\r\n    \r\n    function addMeByRC() public {\r\n        require(tx.origin == owner);\r\n        \r\n        rc[ msg.sender ]  = true;\r\n        \r\n        NewRC(msg.sender);\r\n    }\r\n    \r\n    function setTime(uint256 _newStart, uint256 _newEnd) public onlyOwner {\r\n        if ( _newStart != 0 ) startTime = _newStart;\r\n        if ( _newEnd != 0 ) endTime = _newEnd;\r\n    }\r\n\r\n    function withdraw(address to, uint256 value) public onlyOwner {\r\n        to.transfer(value);\r\n    }\r\n    \r\n    function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {\r\n        return tokenContract.transfer(to, value);\r\n    }\r\n    \r\n    function setTokenContract(address _tokenContract) public onlyOwner {\r\n        tokenContract = tokenInterface(_tokenContract);\r\n    }\r\n\r\n    function setWalletAddress(address _wallet) public onlyOwner {\r\n        wallet = _wallet;\r\n    }\r\n    \r\n    function setAdvisorAddress(address _advisor) public onlyOwner {\r\n            advisor = _advisor;\r\n    }\r\n    \r\n    function setAdvisorFee(uint256 _advisorFee) public onlyOwner {\r\n            advisorFee = _advisorFee;\r\n    }\r\n    \r\n    function setRateContract(address _rateAddress) public onlyOwner {\r\n        rateContract = rateInterface(_rateAddress);\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n    \r\n    function newRC(uint256 _oneTokenInUsdWei, uint256 _remainingTokens) onlyOwner public {\r\n        new RC(this, _oneTokenInUsdWei, _remainingTokens, 0, 0 );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_advisor\",\"type\":\"address\"}],\"name\":\"setAdvisorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_rcTokenValue\",\"type\":\"uint256\"},{\"name\":\"_remainingTokens\",\"type\":\"uint256\"}],\"name\":\"buyFromRC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addMeByRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateAddress\",\"type\":\"address\"}],\"name\":\"setRateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oneTokenInUsdWei\",\"type\":\"uint256\"},{\"name\":\"_remainingTokens\",\"type\":\"uint256\"}],\"name\":\"newRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oneTokenInUsdWei\",\"type\":\"uint256\"}],\"name\":\"tokenValueInEther\",\"outputs\":[{\"name\":\"tknValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStart\",\"type\":\"uint256\"},{\"name\":\"_newEnd\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_advisorFee\",\"type\":\"uint256\"}],\"name\":\"setAdvisorFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_rateAddress\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ambassador\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"NewRC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007025bab2ec90410de37f488d1298204cd4d6b29d000000000000000000000000af0e27602eaa73fdf4849806d75bdfc77fb95217000000000000000000000000000000000000000000000000000000005a8225cc000000000000000000000000000000000000000000000000000000005ab43570","Library":"","SwarmSource":"bzzr://40b9df57d78528a215e3958f11e80bf2b30819195cdede1892f67d207e7412b5"}]}