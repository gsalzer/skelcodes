{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract XRRtoken {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract XRRsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public wallet = 0x3398BdC73b3e245187aAe7b231e453c0089AA04e;\r\n    XRRtoken public token = XRRtoken(0x0e75235647330B5e13cAD9115254C4B8E16272F8);\r\n    address public frozenVaults = 0xc684Bf3b56Ca914b7B0670845092420A661963F7;\r\n\r\n    uint256 public totalRaiseWei = 0;\r\n    uint256 public totalTokenRaiseWei = 0;\r\n\r\n    // Pre-Sale Launch March 20 - April 5th\r\n    uint PreSaleStart = 1521504000;\r\n\r\n    uint PreSaleEnd = 1522886400;\r\n\r\n\r\n    //  Crowd sale Launch 12th - May 9th\r\n    uint ICO1 = 1523491200;\r\n    uint ICO2 = 1524096000;\r\n    uint ICO3 = 1524700800;\r\n    uint ICO4 = 1525305600;\r\n    uint ICOend = 1525910400;\r\n\r\n    function XRRsale() public {\r\n\r\n    }\r\n\r\n    function currentPrice() public view returns (uint256){\r\n        if (now >= PreSaleStart && now < PreSaleEnd) return 26000;\r\n        else if (now >= ICO1 && now < ICO2) return 12000;\r\n        else if (now >= ICO2 && now < ICO3) return 11500;\r\n        else if (now >= ICO3 && now < ICO4) return 11000;\r\n        else if (now >= ICO4 && now < ICOend) return 10500;\r\n        else return 0;\r\n    }\r\n\r\n\r\n    function checkAmount(uint256 _amount) public view returns (bool){\r\n        if (now >= PreSaleStart && now < PreSaleEnd) return _amount >= 1 ether;\r\n        else if (now >= ICO1 && now < ICO2) return _amount >= 0.1 ether;\r\n        else if (now >= ICO2 && now < ICO3) return _amount >= 0.1 ether;\r\n        else if (now >= ICO3 && now < ICO4) return _amount >= 0.1 ether;\r\n        else if (now >= ICO4 && now < ICOend) return _amount >= 0.1 ether;\r\n        else return false;\r\n    }\r\n\r\n\r\n    function tokenTosale() public view returns (uint256){\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function tokenWithdraw() public onlyOwner {\r\n        require(tokenTosale() > 0);\r\n        token.transfer(owner, tokenTosale());\r\n    }\r\n\r\n    function() public payable {\r\n        require(msg.value > 0);\r\n        require(checkAmount(msg.value));\r\n        require(currentPrice() > 0);\r\n\r\n        totalRaiseWei = totalRaiseWei.add(msg.value);\r\n        uint256 tokens = currentPrice().mul(msg.value);\r\n        require(tokens <= tokenTosale());\r\n\r\n        totalTokenRaiseWei = totalTokenRaiseWei.add(tokens);\r\n        token.transfer(msg.sender, tokens);\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function sendTokens(address _to, uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n        require(_value <= tokenTosale());\r\n        require(currentPrice() > 0);\r\n        require(tokenTosale() >= _value);\r\n\r\n        uint256 amount = _value.div(currentPrice());\r\n        totalRaiseWei = totalRaiseWei.add(amount);\r\n        totalTokenRaiseWei = totalTokenRaiseWei.add(_value);\r\n        token.transfer(_to, _value);\r\n    }\r\n\r\n    function finishSale() public onlyOwner {\r\n        uint256 tokensToFrozen = 18000000 ether;\r\n        require(tokenTosale() >= tokensToFrozen);\r\n        // Frozen tokens for Bounty, Airdrop, Stakeholders\r\n        token.transfer(frozenVaults, tokensToFrozen);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaiseWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTosale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenRaiseWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"XRRsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fbec3ac59ca8dcf5d23cbd647347fd65cd624ef4764c3467132e2e86530b4e42"}]}