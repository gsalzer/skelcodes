{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/** ----------------------MonetaryCoin V1.0.0 ------------------------*/\r\n\r\n/**\r\n * Homepage: https://MonetaryCoin.org  Distribution: https://MonetaryCoin.io\r\n *\r\n * Full source code: https://github.com/Monetary-Foundation/MonetaryCoin\r\n * \r\n * Licenced MIT - The Monetary Foundation 2018\r\n *\r\n */\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MineableToken\r\n * @dev ERC20 Token with Pos mining.\r\n * The blockReward_ is controlled by a GDP oracle tied to the national identity or currency union identity of the subject MonetaryCoin.\r\n * This type of mining will be used during both the initial distribution period and when GDP growth is positive.\r\n * For mining during negative growth period please refer to MineableM5Token.sol. \r\n * Unlike standard erc20 token, the totalSupply is sum(all user balances) + totalStake instead of sum(all user balances).\r\n*/\r\ncontract MineableToken is MintableToken { \r\n  event Commit(address indexed from, uint value,uint atStake, int onBlockReward);\r\n  event Withdraw(address indexed from, uint reward, uint commitment);\r\n\r\n  uint256 totalStake_ = 0;\r\n  int256 blockReward_;         //could be positive or negative according to GDP\r\n\r\n  struct Commitment {\r\n    uint256 value;             // value commited to mining\r\n    uint256 onBlockNumber;     // commitment done on block\r\n    uint256 atStake;           // stake during commitment\r\n    int256 onBlockReward;\r\n  }\r\n\r\n  mapping( address => Commitment ) miners;\r\n\r\n  /**\r\n  * @dev commit _value for minning\r\n  * @notice the _value will be substructed from user balance and added to the stake.\r\n  * if user previously commited, add to an existing commitment. \r\n  * this is done by calling withdraw() then commit back previous commit + reward + new commit \r\n  * @param _value The amount to be commited.\r\n  * @return the commit value: _value OR prevCommit + reward + _value\r\n  */\r\n  function commit(uint256 _value) public returns (uint256 commitmentValue) {\r\n    require(0 < _value);\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    commitmentValue = _value;\r\n    uint256 prevCommit = miners[msg.sender].value;\r\n    //In case user already commited, withdraw and recommit \r\n    // new commitment value: prevCommit + reward + _value\r\n    if (0 < prevCommit) {\r\n      // withdraw Will revert if reward is negative\r\n      uint256 prevReward;\r\n      (prevReward, prevCommit) = withdraw();\r\n      commitmentValue = prevReward.add(prevCommit).add(_value);\r\n    }\r\n\r\n    // sub will revert if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(commitmentValue);\r\n    emit Transfer(msg.sender, address(0), commitmentValue);\r\n\r\n    totalStake_ = totalStake_.add(commitmentValue);\r\n\r\n    miners[msg.sender] = Commitment(\r\n      commitmentValue, // Commitment.value\r\n      block.number, // onBlockNumber\r\n      totalStake_, // atStake = current stake + commitments value\r\n      blockReward_ // onBlockReward\r\n      );\r\n    \r\n    emit Commit(msg.sender, commitmentValue, totalStake_, blockReward_); // solium-disable-line\r\n\r\n    return commitmentValue;\r\n  }\r\n\r\n  /**\r\n  * @dev withdraw reward\r\n  * @return {\r\n    \"uint256 reward\": the new supply\r\n    \"uint256 commitmentValue\": the commitment to be returned\r\n    }\r\n  */\r\n  function withdraw() public returns (uint256 reward, uint256 commitmentValue) {\r\n    require(miners[msg.sender].value > 0); \r\n\r\n    //will revert if reward is negative:\r\n    reward = getReward(msg.sender);\r\n\r\n    Commitment storage commitment = miners[msg.sender];\r\n    commitmentValue = commitment.value;\r\n\r\n    uint256 withdrawnSum = commitmentValue.add(reward);\r\n    \r\n    totalStake_ = totalStake_.sub(commitmentValue);\r\n    totalSupply_ = totalSupply_.add(reward);\r\n    \r\n    balances[msg.sender] = balances[msg.sender].add(withdrawnSum);\r\n    emit Transfer(address(0), msg.sender, commitmentValue.add(reward));\r\n    \r\n    delete miners[msg.sender];\r\n    \r\n    emit Withdraw(msg.sender, reward, commitmentValue);  // solium-disable-line\r\n    return (reward, commitmentValue);\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the reward if withdraw() happans on this block\r\n  * @notice The reward is calculated by the formula:\r\n  * (numberOfBlocks) * (effectiveBlockReward) * (commitment.value) / (effectiveStake) \r\n  * effectiveBlockReward is the average between the block reward during commit and the block reward during the call\r\n  * effectiveStake is the average between the stake during the commit and the stake during call (liniar aproximation)\r\n  * @return An uint256 representing the reward amount\r\n  */ \r\n  function getReward(address _miner) public view returns (uint256) {\r\n    if (miners[_miner].value == 0) {\r\n      return 0;\r\n    }\r\n\r\n    Commitment storage commitment = miners[_miner];\r\n\r\n    int256 averageBlockReward = signedAverage(commitment.onBlockReward, blockReward_);\r\n    \r\n    require(0 <= averageBlockReward);\r\n    \r\n    uint256 effectiveBlockReward = uint256(averageBlockReward);\r\n    \r\n    uint256 effectiveStake = average(commitment.atStake, totalStake_);\r\n    \r\n    uint256 numberOfBlocks = block.number.sub(commitment.onBlockNumber);\r\n\r\n    uint256 miningReward = numberOfBlocks.mul(effectiveBlockReward).mul(commitment.value).div(effectiveStake);\r\n       \r\n    return miningReward;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the average of two integer numbers \r\n  * @notice 1.5 will be rounded toward zero\r\n  * @return An uint256 representing integer average\r\n  */\r\n  function average(uint256 a, uint256 b) public pure returns (uint256) {\r\n    return a.add(b).div(2);\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the average of two signed integers numbers \r\n  * @notice 1.5 will be toward zero\r\n  * @return An int256 representing integer average\r\n  */\r\n  function signedAverage(int256 a, int256 b) public pure returns (int256) {\r\n    int256 ans = a + b;\r\n\r\n    if (a > 0 && b > 0 && ans <= 0) {\r\n      require(false);\r\n    }\r\n    if (a < 0 && b < 0 && ans >= 0) {\r\n      require(false);\r\n    }\r\n\r\n    return ans / 2;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the commitment of the specified address.\r\n  * @param _miner The address to query the the commitment Of\r\n  * @return the amount commited.\r\n  */\r\n  function commitmentOf(address _miner) public view returns (uint256) {\r\n    return miners[_miner].value;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the all fields for the commitment of the specified address.\r\n  * @param _miner The address to query the the commitment Of\r\n  * @return {\r\n    \"uint256 value\": the amount commited.\r\n    \"uint256 onBlockNumber\": block number of commitment.\r\n    \"uint256 atStake\": stake when commited.\r\n    \"int256 onBlockReward\": block reward when commited.\r\n    }\r\n  */\r\n  function getCommitment(address _miner) public view \r\n  returns (\r\n    uint256 value,             // value commited to mining\r\n    uint256 onBlockNumber,     // commited on block\r\n    uint256 atStake,           // stake during commit\r\n    int256 onBlockReward       // block reward during commit\r\n    ) \r\n  {\r\n    value = miners[_miner].value;\r\n    onBlockNumber = miners[_miner].onBlockNumber;\r\n    atStake = miners[_miner].atStake;\r\n    onBlockReward = miners[_miner].onBlockReward;\r\n  }\r\n\r\n  /**\r\n  * @dev the total stake\r\n  * @return the total stake\r\n  */\r\n  function totalStake() public view returns (uint256) {\r\n    return totalStake_;\r\n  }\r\n\r\n  /**\r\n  * @dev the block reward\r\n  * @return the current block reward\r\n  */\r\n  function blockReward() public view returns (int256) {\r\n    return blockReward_;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title GDPOraclizedToken\r\n * @dev This is an interface for the GDP Oracle to control the mining rate.\r\n * For security reasons, two distinct functions were created: \r\n * setPositiveGrowth() and setNegativeGrowth()\r\n */\r\ncontract GDPOraclizedToken is MineableToken {\r\n\r\n  event GDPOracleTransferred(address indexed previousOracle, address indexed newOracle);\r\n  event BlockRewardChanged(int oldBlockReward, int newBlockReward);\r\n\r\n  address GDPOracle_;\r\n  address pendingGDPOracle_;\r\n\r\n  /**\r\n   * @dev Modifier Throws if called by any account other than the GDPOracle.\r\n   */\r\n  modifier onlyGDPOracle() {\r\n    require(msg.sender == GDPOracle_);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingGDPOracle.\r\n   */\r\n  modifier onlyPendingGDPOracle() {\r\n    require(msg.sender == pendingGDPOracle_);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current GDPOracle to transfer control to a newOracle.\r\n   * The new GDPOracle need to call claimOracle() to finalize\r\n   * @param newOracle The address to transfer ownership to.\r\n   */\r\n  function transferGDPOracle(address newOracle) public onlyGDPOracle {\r\n    pendingGDPOracle_ = newOracle;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingGDPOracle_ address to finalize the transfer.\r\n   */\r\n  function claimOracle() onlyPendingGDPOracle public {\r\n    emit GDPOracleTransferred(GDPOracle_, pendingGDPOracle_);\r\n    GDPOracle_ = pendingGDPOracle_;\r\n    pendingGDPOracle_ = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Chnage block reward according to GDP \r\n   * @param newBlockReward the new block reward in case of possible growth\r\n   */\r\n  function setPositiveGrowth(int256 newBlockReward) public onlyGDPOracle returns(bool) {\r\n    // protect against error / overflow\r\n    require(0 <= newBlockReward);\r\n    \r\n    emit BlockRewardChanged(blockReward_, newBlockReward);\r\n    blockReward_ = newBlockReward;\r\n  }\r\n\r\n  /**\r\n   * @dev Chnage block reward according to GDP \r\n   * @param newBlockReward the new block reward in case of negative growth\r\n   */\r\n  function setNegativeGrowth(int256 newBlockReward) public onlyGDPOracle returns(bool) {\r\n    require(newBlockReward < 0);\r\n\r\n    emit BlockRewardChanged(blockReward_, newBlockReward);\r\n    blockReward_ = newBlockReward;\r\n  }\r\n\r\n  /**\r\n  * @dev get GDPOracle\r\n  * @return the address of the GDPOracle\r\n  */\r\n  function GDPOracle() public view returns (address) { // solium-disable-line mixedcase\r\n    return GDPOracle_;\r\n  }\r\n\r\n  /**\r\n  * @dev get GDPOracle\r\n  * @return the address of the GDPOracle\r\n  */\r\n  function pendingGDPOracle() public view returns (address) { // solium-disable-line mixedcase\r\n    return pendingGDPOracle_;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MineableM5Token\r\n * @notice This contract adds the ability to mine for M5 tokens when growth is negative.\r\n * The M5 token is a distinct ERC20 token that may be obtained only following a period of negative GDP growth.\r\n * The logic for M5 mining will be finalized in advance of the close of the initial distribution period – see the White Paper for additional details.\r\n * After upgrading this contract with the final M5 logic, finishUpgrade() will be called to permanently seal the upgradeability of the contract.\r\n*/\r\ncontract MineableM5Token is GDPOraclizedToken { \r\n  \r\n  event M5TokenUpgrade(address indexed oldM5Token, address indexed newM5Token);\r\n  event M5LogicUpgrade(address indexed oldM5Logic, address indexed newM5Logic);\r\n  event FinishUpgrade();\r\n\r\n  // The M5 token contract\r\n  address M5Token_;\r\n  // The contract to manage M5 mining logic.\r\n  address M5Logic_;\r\n  // The address which controls the upgrade process\r\n  address upgradeManager_;\r\n  // When isUpgradeFinished_ is true, no more upgrades is allowed\r\n  bool isUpgradeFinished_ = false;\r\n\r\n  /**\r\n  * @dev get the M5 token address\r\n  * @return M5 token address\r\n  */\r\n  function M5Token() public view returns (address) {\r\n    return M5Token_;\r\n  }\r\n\r\n  /**\r\n  * @dev get the M5 logic contract address\r\n  * @return M5 logic contract address\r\n  */\r\n  function M5Logic() public view returns (address) {\r\n    return M5Logic_;\r\n  }\r\n\r\n  /**\r\n  * @dev get the upgrade manager address\r\n  * @return the upgrade manager address\r\n  */\r\n  function upgradeManager() public view returns (address) {\r\n    return upgradeManager_;\r\n  }\r\n\r\n  /**\r\n  * @dev get the upgrade status\r\n  * @return the upgrade status. if true, no more upgrades are possible.\r\n  */\r\n  function isUpgradeFinished() public view returns (bool) {\r\n    return isUpgradeFinished_;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the GDPOracle.\r\n  */\r\n  modifier onlyUpgradeManager() {\r\n    require(msg.sender == upgradeManager_);\r\n    require(!isUpgradeFinished_);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows to set the M5 token contract \r\n   * @param newM5Token The address of the new contract\r\n   */\r\n  function upgradeM5Token(address newM5Token) public onlyUpgradeManager { // solium-disable-line\r\n    require(newM5Token != address(0));\r\n    emit M5TokenUpgrade(M5Token_, newM5Token);\r\n    M5Token_ = newM5Token;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the upgrade the M5 logic contract \r\n   * @param newM5Logic The address of the new contract\r\n   */\r\n  function upgradeM5Logic(address newM5Logic) public onlyUpgradeManager { // solium-disable-line\r\n    require(newM5Logic != address(0));\r\n    emit M5LogicUpgrade(M5Logic_, newM5Logic);\r\n    M5Logic_ = newM5Logic;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the upgrade the M5 logic contract and token at the same transaction\r\n   * @param newM5Token The address of a new M5 token\r\n   * @param newM5Logic The address of the new contract\r\n   */\r\n  function upgradeM5(address newM5Token, address newM5Logic) public onlyUpgradeManager { // solium-disable-line\r\n    require(newM5Token != address(0));\r\n    require(newM5Logic != address(0));\r\n    emit M5TokenUpgrade(M5Token_, newM5Token);\r\n    emit M5LogicUpgrade(M5Logic_, newM5Logic);\r\n    M5Token_ = newM5Token;\r\n    M5Logic_ = newM5Logic;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to dismiss the upgrade capability\r\n  * @return True if the operation was successful.\r\n  */\r\n  function finishUpgrade() onlyUpgradeManager public returns (bool) {\r\n    isUpgradeFinished_ = true;\r\n    emit FinishUpgrade();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the reward if withdrawM5() happans on this block\r\n  * @notice This is a wrapper, which calls and return result from M5Logic\r\n  * the actual logic is found in the M5Logic contract\r\n  * @param _miner The address of the _miner\r\n  * @return An uint256 representing the reward amount\r\n  */\r\n  function getM5Reward(address _miner) public view returns (uint256) {\r\n    require(M5Logic_ != address(0));\r\n    if (miners[_miner].value == 0) {\r\n      return 0;\r\n    }\r\n    // check that effective block reward is indeed negative\r\n    require(signedAverage(miners[_miner].onBlockReward, blockReward_) < 0);\r\n\r\n    // return length (bytes)\r\n    uint32 returnSize = 32;\r\n    // target contract\r\n    address target = M5Logic_;\r\n    // method signeture for target contract\r\n    bytes32 signature = keccak256(\"getM5Reward(address)\");\r\n    // size of calldata for getM5Reward function: 4 for signeture and 32 for one variable (address)\r\n    uint32 inputSize = 4 + 32;\r\n    // variable to check delegatecall result (success or failure)\r\n    uint8 callResult;\r\n    // result from target.getM5Reward()\r\n    uint256 result;\r\n    \r\n    assembly { // solium-disable-line\r\n        // return _dest.delegatecall(msg.data)\r\n        mstore(0x0, signature) // 4 bytes of method signature\r\n        mstore(0x4, _miner)    // 20 bytes of address\r\n        // delegatecall(g, a, in, insize, out, outsize)\t- call contract at address a with input mem[in..(in+insize))\r\n        // providing g gas and v wei and output area mem[out..(out+outsize)) returning 0 on error (eg. out of gas) and 1 on success\r\n        // keep caller and callvalue\r\n        callResult := delegatecall(sub(gas, 10000), target, 0x0, inputSize, 0x0, returnSize)\r\n        switch callResult \r\n        case 0 \r\n          { revert(0,0) } \r\n        default \r\n          { result := mload(0x0) }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  event WithdrawM5(address indexed from,uint commitment, uint M5Reward);\r\n\r\n  /**\r\n  * @dev withdraw M5 reward, only appied to mining when GDP is negative\r\n  * @return {\r\n    \"uint256 reward\": the new M5 supply\r\n    \"uint256 commitmentValue\": the commitment to be returned\r\n    }\r\n  */\r\n  function withdrawM5() public returns (uint256 reward, uint256 commitmentValue) {\r\n    require(M5Logic_ != address(0));\r\n    require(M5Token_ != address(0));\r\n    require(miners[msg.sender].value > 0); \r\n    \r\n    // will revert if reward is positive\r\n    reward = getM5Reward(msg.sender);\r\n    commitmentValue = miners[msg.sender].value;\r\n    \r\n    require(M5Logic_.delegatecall(bytes4(keccak256(\"withdrawM5()\")))); // solium-disable-line\r\n    \r\n    return (reward,commitmentValue);\r\n  }\r\n\r\n  //triggered when user swaps m5Value of M5 tokens for value of regular tokens.\r\n  event Swap(address indexed from, uint256 M5Value, uint256 value);\r\n\r\n  /**\r\n  * @dev swap M5 tokens back to regular tokens when GDP is back to positive \r\n  * @param _value The amount of M5 tokens to swap for regular tokens\r\n  * @return true\r\n  */\r\n  function swap(uint256 _value) public returns (bool) {\r\n    require(M5Logic_ != address(0));\r\n    require(M5Token_ != address(0));\r\n\r\n    require(M5Logic_.delegatecall(bytes4(keccak256(\"swap(uint256)\")),_value)); // solium-disable-line\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MCoin\r\n * @dev The MonetaryCoin contract\r\n * The MonetaryCoin contract allows for the creation of a new monetary coin.\r\n * The supply of a minable coin in a period is defined by an oracle that reports GDP data from the country related to that coin.\r\n * Example: If the GDP of a given country grows by 3%, then 3% more coins will be available for forging (i.e. mining) in the next period.\r\n * Coins will be distributed by the proof of stake forging mechanism both during and after the initial distribution period.\r\n * The Proof of stake forging is defined by the MineableToken.sol contract. \r\n */\r\ncontract MCoin is MineableM5Token {\r\n\r\n  string public name; // solium-disable-line uppercase\r\n  string public symbol; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  constructor(\r\n    string tokenName,\r\n    string tokenSymbol,\r\n    uint256 blockReward, // will be transformed using toDecimals()\r\n    address GDPOracle,\r\n    address upgradeManager\r\n    ) public \r\n    {\r\n    require(GDPOracle != address(0));\r\n    require(upgradeManager != address(0));\r\n    \r\n    name = tokenName;\r\n    symbol = tokenSymbol;\r\n\r\n    blockReward_ = toDecimals(blockReward);\r\n    emit BlockRewardChanged(0, blockReward_);\r\n\r\n    GDPOracle_ = GDPOracle;\r\n    emit GDPOracleTransferred(0x0, GDPOracle_);\r\n\r\n    M5Token_ = address(0);\r\n    M5Logic_ = address(0);\r\n    upgradeManager_ = upgradeManager;\r\n  }\r\n\r\n  function toDecimals(uint256 _value) pure internal returns (int256 value) {\r\n    value = int256 (\r\n      _value.mul(10 ** uint256(decimals))\r\n    );\r\n    assert(0 < value);\r\n    return value;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newBlockReward\",\"type\":\"int256\"}],\"name\":\"setNegativeGrowth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newM5Token\",\"type\":\"address\"},{\"name\":\"newM5Logic\",\"type\":\"address\"}],\"name\":\"upgradeM5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"average\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBlockReward\",\"type\":\"int256\"}],\"name\":\"setPositiveGrowth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"commitmentValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingGDPOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"M5Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawM5\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"commitmentValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUpgradeFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"getM5Reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"transferGDPOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"},{\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"signedAverage\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newM5Logic\",\"type\":\"address\"}],\"name\":\"upgradeM5Logic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newM5Token\",\"type\":\"address\"}],\"name\":\"upgradeM5Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GDPOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[{\"name\":\"commitmentValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"M5Logic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"commitmentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"getCommitment\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"onBlockNumber\",\"type\":\"uint256\"},{\"name\":\"atStake\",\"type\":\"uint256\"},{\"name\":\"onBlockReward\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"blockReward\",\"type\":\"uint256\"},{\"name\":\"GDPOracle\",\"type\":\"address\"},{\"name\":\"upgradeManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldM5Token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newM5Token\",\"type\":\"address\"}],\"name\":\"M5TokenUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldM5Logic\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newM5Logic\",\"type\":\"address\"}],\"name\":\"M5LogicUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"commitment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"M5Reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawM5\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"M5Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOracle\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"GDPOracleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldBlockReward\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"newBlockReward\",\"type\":\"int256\"}],\"name\":\"BlockRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"onBlockReward\",\"type\":\"int256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000005e51000000000000000000000000286d39aae5953fa2d6cac8fe6585cdce190d66ea000000000000000000000000286d39aae5953fa2d6cac8fe6585cdce190d66ea000000000000000000000000000000000000000000000000000000000000000f4d6f6e6574617279436f696e45524f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d45524f00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://914c2ea2f48fcc80be434c26fbcd0552f64c658939e6945763955d8e9aa638c9"}]}