{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract ZZZToken is StandardToken, Ownable {\r\n\r\n    string public name = \"ZZZ Token\";\r\n    string public symbol = \"ZZZ\";\r\n    uint public decimals = 18;\r\n\r\n    // The token allocation\r\n    uint public constant TOTAL_SUPPLY       = 10000000000e18;\r\n    uint public constant ALLOC_ECOSYSTEM    =  10000000000e18; // 30%\r\n    //uint public constant ALLOC_FOUNDATION   =  2100000000e18; // 20%\r\n    //uint public constant ALLOC_TEAM         =  450000000e18; // 15%\r\n    //uint public constant ALLOC_PARTNER      =  300000000e18; // 10%\r\n    //uint public constant ALLOC_SALE         =  750000000e18; // 25%\r\n\r\n    // wallets\r\n    address public constant WALLET_ECOSYSTEM    = 0xdefdd4D6EE598B75c9F79575252a27BbF4df5bdF; \r\n    //address public constant WALLET_FOUNDATION   = 0xbF96a0452A3388488673006bE65bC928BDe780d6;\r\n    //address public constant WALLET_TEAM         = 0x9f255092008F6163395aEB35c4Dec58a1ecbdFd6;\r\n    //address public constant WALLET_PARTNER      = 0xD6d64A62A7fF8F55841b0DD2c02d5052457bCA6c;\r\n    //address public constant WALLET_SALE         = 0x55aaeC60E116086AC3a5e4fDC74b21de9B91CC53;\r\n    \r\n    // 2 groups of lockup\r\n    mapping(address => uint256) public contributors_locked; \r\n    mapping(address => uint256) public investors_locked;\r\n\r\n    // 2 types of releasing\r\n    mapping(address => uint256) public contributors_countdownDate;\r\n    mapping(address => uint256) public investors_deliveryDate;\r\n\r\n    // MODIFIER\r\n\r\n    // checks if the address can transfer certain amount of tokens\r\n    modifier canTransfer(address _sender, uint256 _value) {\r\n        require(_sender != address(0));\r\n\r\n        uint256 remaining = balances[_sender].sub(_value);\r\n        uint256 totalLockAmt = 0;\r\n\r\n        if (contributors_locked[_sender] > 0) {\r\n            totalLockAmt = totalLockAmt.add(getLockedAmount_contributors(_sender));\r\n        }\r\n\r\n        if (investors_locked[_sender] > 0) {\r\n            totalLockAmt = totalLockAmt.add(getLockedAmount_investors(_sender));\r\n        }\r\n\r\n        require(remaining >= totalLockAmt);\r\n\r\n        _;\r\n    }\r\n\r\n    // EVENTS\r\n    event UpdatedLockingState(string whom, address indexed to, uint256 value, uint256 date);\r\n\r\n    // FUNCTIONS\r\n\r\n    function ZZZToken() public {\r\n        balances[msg.sender] = TOTAL_SUPPLY;\r\n        totalSupply = TOTAL_SUPPLY;\r\n\r\n        // do the distribution of the token, in token transfer\r\n        transfer(WALLET_ECOSYSTEM, ALLOC_ECOSYSTEM);\r\n        //transfer(WALLET_FOUNDATION, ALLOC_FOUNDATION);\r\n        //transfer(WALLET_TEAM, ALLOC_TEAM);\r\n        //transfer(WALLET_PARTNER, ALLOC_PARTNER);\r\n        //transfer(WALLET_SALE, ALLOC_SALE);\r\n    }\r\n\t\r\n    // get contributors' locked amount of token\r\n    // this lockup will be released in 8 batches which take place every 180 days\r\n    function getLockedAmount_contributors(address _contributor) \r\n        public\r\n\t\tconstant\r\n\t\treturns (uint256)\r\n\t{\r\n        uint256 countdownDate = contributors_countdownDate[_contributor];\r\n        uint256 lockedAmt = contributors_locked[_contributor];\r\n\r\n        if (now <= countdownDate +  1 hours) {return lockedAmt;}\r\n        if (now <= countdownDate +  2 hours) {return lockedAmt.mul(7).div(8);}\r\n        if (now <= countdownDate +  3 hours) {return lockedAmt.mul(6).div(8);}\r\n        if (now <= countdownDate +  4 hours) {return lockedAmt.mul(5).div(8);}\r\n        if (now <= countdownDate +  5 hours) {return lockedAmt.mul(4).div(8);}\r\n        if (now <= countdownDate +  6 hours) {return lockedAmt.mul(3).div(8);}\r\n        if (now <= countdownDate +  7 hours) {return lockedAmt.mul(2).div(8);}\r\n        if (now <= countdownDate +  8 hours) {return lockedAmt.mul(1).div(8);}\r\n\t\r\n        return 0;\r\n    }\r\n\r\n    // get investors' locked amount of token\r\n    // this lockup will be released in 3 batches: \r\n    // 1. on delievery date\r\n    // 2. three months after the delivery date\r\n    // 3. six months after the delivery date\r\n    function getLockedAmount_investors(address _investor)\r\n        public\r\n\t\tconstant\r\n\t\treturns (uint256)\r\n\t{\r\n        uint256 delieveryDate = investors_deliveryDate[_investor];\r\n        uint256 lockedAmt = investors_locked[_investor];\r\n\r\n        if (now <= delieveryDate) {return lockedAmt;}\r\n        if (now <= delieveryDate + 1 hours) {return lockedAmt.mul(2).div(3);}\r\n        if (now <= delieveryDate + 2 hours) {return lockedAmt.mul(1).div(3);}\r\n\t\r\n        return 0;\r\n    }\r\n\r\n    // set lockup for contributors \r\n    function setLockup_contributors(address _contributor, uint256 _value, uint256 _countdownDate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_contributor != address(0));\r\n\r\n        contributors_locked[_contributor] = _value;\r\n        contributors_countdownDate[_contributor] = _countdownDate;\r\n        UpdatedLockingState(\"contributor\", _contributor, _value, _countdownDate);\r\n    }\r\n\r\n    // set lockup for strategic investor\r\n    function setLockup_investors(address _investor, uint256 _value, uint256 _delieveryDate)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_investor != address(0));\r\n\r\n        investors_locked[_investor] = _value;\r\n        investors_deliveryDate[_investor] = _delieveryDate;\r\n        UpdatedLockingState(\"investor\", _investor, _value, _delieveryDate);\r\n    }\r\n\r\n\t// Transfer amount of tokens from sender account to recipient.\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        canTransfer(msg.sender, _value)\r\n\t\treturns (bool success)\r\n\t{\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\t// Transfer amount of tokens from a specified address to a recipient.\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        canTransfer(_from, _value)\r\n\t\treturns (bool success)\r\n\t{\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getLockedAmount_contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors_countdownDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ECOSYSTEM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getLockedAmount_investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_ECOSYSTEM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors_deliveryDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_delieveryDate\",\"type\":\"uint256\"}],\"name\":\"setLockup_investors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_countdownDate\",\"type\":\"uint256\"}],\"name\":\"setLockup_contributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whom\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UpdatedLockingState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ZZZToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c9bf4c201e0fdbd2cc3c4a16007acd50e3027607559a30c3868ce585aea3244"}]}