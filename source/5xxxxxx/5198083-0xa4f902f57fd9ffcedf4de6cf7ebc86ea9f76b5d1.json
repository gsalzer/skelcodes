{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.15;\r\n\r\ncontract EtheraffleLOT {\r\n    function mint(address _to, uint _amt) external {}\r\n    function transfer(address to, uint value) public {}\r\n    function balanceOf(address who) constant public returns (uint) {}\r\n}\r\ncontract EtheraffleICO is EtheraffleLOT {\r\n\r\n    /* Lot reward per ether in each tier */\r\n    uint public constant tier0LOT = 110000 * 10 ** 6;\r\n    uint public constant tier1LOT = 100000 * 10 ** 6;\r\n    uint public constant tier2LOT =  90000 * 10 ** 6;\r\n    uint public constant tier3LOT =  80000 * 10 ** 6;\r\n    /* Bonus tickets multiplier */\r\n    uint public constant bonusLOT     = 1500 * 10 ** 6;\r\n    uint public constant bonusFreeLOT = 10;\r\n    /* Maximum amount of ether investable per tier */\r\n    uint public constant maxWeiTier0 = 700   * 10 ** 18;\r\n    uint public constant maxWeiTier1 = 2500  * 10 ** 18;\r\n    uint public constant maxWeiTier2 = 7000  * 10 ** 18;\r\n    uint public constant maxWeiTier3 = 20000 * 10 ** 18;\r\n    /* Minimum investment (0.025 Ether) */\r\n    uint public constant minWei = 25 * 10 ** 15;\r\n    /* Crowdsale open, close, withdraw & tier times (UTC Format)*/\r\n    uint public ICOStart = 1522281600;//Thur 29th March 2018\r\n    uint public tier1End = 1523491200;//Thur 12th April 2018\r\n    uint public tier2End = 1525305600;//Thur 3rd May 2018\r\n    uint public tier3End = 1527724800;//Thur 31st May 2018\r\n    uint public wdBefore = 1528934400;//Thur 14th June 2018\r\n    /* Variables to track amount of purchases in tier */\r\n    uint public tier0Total;\r\n    uint public tier1Total;\r\n    uint public tier2Total;\r\n    uint public tier3Total;\r\n    /* Etheraffle's multisig wallet & LOT token addresses */\r\n    address public etheraffle;\r\n    /* ICO status toggle */\r\n    bool public ICORunning = true;\r\n    /* Map of purchaser's ethereum addresses to their purchase amounts for calculating bonuses*/\r\n    mapping (address => uint) public tier0;\r\n    mapping (address => uint) public tier1;\r\n    mapping (address => uint) public tier2;\r\n    mapping (address => uint) public tier3;\r\n    /* Instantiate the variables to hold Etheraffle's LOT & freeLOT token contract instances */\r\n    EtheraffleLOT LOT;\r\n    EtheraffleLOT FreeLOT;\r\n    /* Event loggers */\r\n    event LogTokenDeposit(address indexed from, uint value, bytes data);\r\n    event LogRefund(address indexed toWhom, uint amountOfEther, uint atTime);\r\n    event LogEtherTransfer(address indexed toWhom, uint amount, uint atTime);\r\n    event LogBonusLOTRedemption(address indexed toWhom, uint lotAmount, uint atTime);\r\n    event LogLOTTransfer(address indexed toWhom, uint indexed inTier, uint ethAmt, uint LOTAmt, uint atTime);\r\n    /**\r\n     * @dev Modifier function to prepend to later functions in this contract in\r\n     *      order to redner them only useable by the Etheraffle address.\r\n     */\r\n    modifier onlyEtheraffle() {\r\n        require(msg.sender == etheraffle);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Modifier function to prepend to later functions rendering the method\r\n     *      only callable if the crowdsale is running.\r\n     */\r\n    modifier onlyIfRunning() {\r\n        require(ICORunning);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Modifier function to prepend to later functions rendering the method\r\n     *      only callable if the crowdsale is NOT running.\r\n     */\r\n    modifier onlyIfNotRunning() {\r\n        require(!ICORunning);\r\n        _;\r\n    }\r\n    /**\r\n    * @dev  Constructor. Sets up the variables pertaining to the ICO start &\r\n    *       end times, the tier start & end times, the Etheraffle MultiSig Wallet\r\n    *       address & the Etheraffle LOT & FreeLOT token contracts.\r\n    */\r\n    function EtheraffleICO() public {//address _LOT, address _freeLOT, address _msig) public {\r\n        etheraffle = 0x97f535e98cf250cdd7ff0cb9b29e4548b609a0bd;\r\n        LOT        = EtheraffleLOT(0xAfD9473dfe8a49567872f93c1790b74Ee7D92A9F);\r\n        FreeLOT    = EtheraffleLOT(0xc39f7bB97B31102C923DaF02bA3d1bD16424F4bb);\r\n    }\r\n    /**\r\n    * @dev  Purchase LOT tokens.\r\n    *       LOT are sent in accordance with how much ether is invested, and in what\r\n    *       tier the investment was made. The function also stores the amount of ether\r\n    *       invested for later conversion to the amount of bonus LOT owed. Once the\r\n    *       crowdsale is over and the final number of tokens sold is known, the purchaser's\r\n    *       bonuses can be calculated. Using the fallback function allows LOT purchasers to\r\n    *       simply send ether to this address in order to purchase LOT, without having\r\n    *       to call a function. The requirements also also mean that once the crowdsale is\r\n    *       over, any ether sent to this address by accident will be returned to the sender\r\n    *       and not lost.\r\n    */\r\n    function () public payable onlyIfRunning {\r\n        /* Requires the crowdsale time window to be open and the function caller to send ether */\r\n        require\r\n        (\r\n            now <= tier3End &&\r\n            msg.value >= minWei\r\n        );\r\n        uint numLOT = 0;\r\n        if (now <= ICOStart) {// ∴ tier zero...\r\n            /* Eth investable in each tier is capped via this requirement */\r\n            require(tier0Total + msg.value <= maxWeiTier0);\r\n            /* Store purchasers purchased amount for later bonus redemption */\r\n            tier0[msg.sender] += msg.value;\r\n            /* Track total investment in tier one for later bonus calculation */\r\n            tier0Total += msg.value;\r\n            /* Number of LOT this tier's purchase results in */\r\n            numLOT = (msg.value * tier0LOT) / (1 * 10 ** 18);\r\n            /* Transfer the number of LOT bought to the purchaser */\r\n            LOT.transfer(msg.sender, numLOT);\r\n            /* Log the  transfer */\r\n            LogLOTTransfer(msg.sender, 0, msg.value, numLOT, now);\r\n            return;\r\n        } else if (now <= tier1End) {// ∴ tier one...\r\n            require(tier1Total + msg.value <= maxWeiTier1);\r\n            tier1[msg.sender] += msg.value;\r\n            tier1Total += msg.value;\r\n            numLOT = (msg.value * tier1LOT) / (1 * 10 ** 18);\r\n            LOT.transfer(msg.sender, numLOT);\r\n            LogLOTTransfer(msg.sender, 1, msg.value, numLOT, now);\r\n            return;\r\n        } else if (now <= tier2End) {// ∴ tier two...\r\n            require(tier2Total + msg.value <= maxWeiTier2);\r\n            tier2[msg.sender] += msg.value;\r\n            tier2Total += msg.value;\r\n            numLOT = (msg.value * tier2LOT) / (1 * 10 ** 18);\r\n            LOT.transfer(msg.sender, numLOT);\r\n            LogLOTTransfer(msg.sender, 2, msg.value, numLOT, now);\r\n            return;\r\n        } else {// ∴ tier three...\r\n            require(tier3Total + msg.value <= maxWeiTier3);\r\n            tier3[msg.sender] += msg.value;\r\n            tier3Total += msg.value;\r\n            numLOT = (msg.value * tier3LOT) / (1 * 10 ** 18);\r\n            LOT.transfer(msg.sender, numLOT);\r\n            LogLOTTransfer(msg.sender, 3, msg.value, numLOT, now);\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n    * @dev      Redeem bonus LOT: This function cannot be called until\r\n    *           the crowdsale is over, nor after the withdraw period.\r\n    *           During this window, a LOT purchaser calls this function\r\n    *           in order to receive their bonus LOT owed to them, as\r\n    *           calculated by their share of the total amount of LOT\r\n    *           sales in the tier(s) following their purchase. Once\r\n    *           claimed, user's purchased amounts are set to 1 wei rather\r\n    *           than zero, to allow the contract to maintain a list of\r\n    *           purchasers in each. All investors, regardless of tier/amount,\r\n    *           receive ten free entries into the flagship Saturday\r\n    *           Etheraffle via the FreeLOT coupon.\r\n    */\r\n    function redeemBonusLot() external onlyIfRunning { //81k gas\r\n        /* Requires crowdsale to be over and the wdBefore time to not have passed yet */\r\n        require\r\n        (\r\n            now > tier3End &&\r\n            now < wdBefore\r\n        );\r\n        /* Requires user to have a LOT purchase in at least one of the tiers. */\r\n        require\r\n        (\r\n            tier0[msg.sender] > 1 ||\r\n            tier1[msg.sender] > 1 ||\r\n            tier2[msg.sender] > 1 ||\r\n            tier3[msg.sender] > 1\r\n        );\r\n        uint bonusNumLOT;\r\n        /* If purchaser has ether in this tier, LOT tokens owed is calculated and added to LOT amount */\r\n        if(tier0[msg.sender] > 1) {\r\n            bonusNumLOT +=\r\n            /* Calculate share of bonus LOT user is entitled to, based on tier one sales */\r\n            ((tier1Total * bonusLOT * tier0[msg.sender]) / (tier0Total * (1 * 10 ** 18))) +\r\n            /* Calculate share of bonus LOT user is entitled to, based on tier two sales */\r\n            ((tier2Total * bonusLOT * tier0[msg.sender]) / (tier0Total * (1 * 10 ** 18))) +\r\n            /* Calculate share of bonus LOT user is entitled to, based on tier three sales */\r\n            ((tier3Total * bonusLOT * tier0[msg.sender]) / (tier0Total * (1 * 10 ** 18)));\r\n            /* Set amount of ether in this tier to 1 to make further bonus redemptions impossible */\r\n            tier0[msg.sender] = 1;\r\n        }\r\n        if(tier1[msg.sender] > 1) {\r\n            bonusNumLOT +=\r\n            ((tier2Total * bonusLOT * tier1[msg.sender]) / (tier1Total * (1 * 10 ** 18))) +\r\n            ((tier3Total * bonusLOT * tier1[msg.sender]) / (tier1Total * (1 * 10 ** 18)));\r\n            tier1[msg.sender] = 1;\r\n        }\r\n        if(tier2[msg.sender] > 1) {\r\n            bonusNumLOT +=\r\n            ((tier3Total * bonusLOT * tier2[msg.sender]) / (tier2Total * (1 * 10 ** 18)));\r\n            tier2[msg.sender] = 1;\r\n        }\r\n        if(tier3[msg.sender] > 1) {\r\n            tier3[msg.sender] = 1;\r\n        }\r\n        /* Final check that user cannot withdraw twice */\r\n        require\r\n        (\r\n            tier0[msg.sender]  <= 1 &&\r\n            tier1[msg.sender]  <= 1 &&\r\n            tier2[msg.sender]  <= 1 &&\r\n            tier3[msg.sender]  <= 1\r\n        );\r\n        /* Transfer bonus LOT to bonus redeemer */\r\n        if(bonusNumLOT > 0) {\r\n            LOT.transfer(msg.sender, bonusNumLOT);\r\n        }\r\n        /* Mint FreeLOT and give to bonus redeemer */\r\n        FreeLOT.mint(msg.sender, bonusFreeLOT);\r\n        /* Log the bonus LOT redemption */\r\n        LogBonusLOTRedemption(msg.sender, bonusNumLOT, now);\r\n    }\r\n    /**\r\n    * @dev    Should crowdsale be cancelled for any reason once it has\r\n    *         begun, any ether is refunded to the purchaser by calling\r\n    *         this funcion. Function checks each tier in turn, totalling\r\n    *         the amount whilst zeroing the balance, and finally makes\r\n    *         the transfer.\r\n    */\r\n    function refundEther() external onlyIfNotRunning {\r\n        uint amount;\r\n        if(tier0[msg.sender] > 1) {\r\n            /* Add balance of caller's address in this tier to the amount */\r\n            amount += tier0[msg.sender];\r\n            /* Zero callers balance in this tier */\r\n            tier0[msg.sender] = 0;\r\n        }\r\n        if(tier1[msg.sender] > 1) {\r\n            amount += tier1[msg.sender];\r\n            tier1[msg.sender] = 0;\r\n        }\r\n        if(tier2[msg.sender] > 1) {\r\n            amount += tier2[msg.sender];\r\n            tier2[msg.sender] = 0;\r\n        }\r\n        if(tier3[msg.sender] > 1) {\r\n            amount += tier3[msg.sender];\r\n            tier3[msg.sender] = 0;\r\n        }\r\n        /* Final check that user cannot be refunded twice */\r\n        require\r\n        (\r\n            tier0[msg.sender] == 0 &&\r\n            tier1[msg.sender] == 0 &&\r\n            tier2[msg.sender] == 0 &&\r\n            tier3[msg.sender] == 0\r\n        );\r\n        /* Transfer the ether to the caller */\r\n        msg.sender.transfer(amount);\r\n        /* Log the refund */\r\n        LogRefund(msg.sender, amount, now);\r\n        return;\r\n    }\r\n    /**\r\n    * @dev    Function callable only by Etheraffle's multi-sig wallet. It\r\n    *         transfers the tier's raised ether to the etheraffle multisig wallet\r\n    *         once the tier is over.\r\n    *\r\n    * @param _tier    The tier from which the withdrawal is being made.\r\n    */\r\n    function transferEther(uint _tier) external onlyIfRunning onlyEtheraffle {\r\n        if(_tier == 0) {\r\n            /* Require tier zero to be over and a tier zero ether be greater than 0 */\r\n            require(now > ICOStart && tier0Total > 0);\r\n            /* Transfer the tier zero total to the etheraffle multisig */\r\n            etheraffle.transfer(tier0Total);\r\n            /* Log the transfer event */\r\n            LogEtherTransfer(msg.sender, tier0Total, now);\r\n            return;\r\n        } else if(_tier == 1) {\r\n            require(now > tier1End && tier1Total > 0);\r\n            etheraffle.transfer(tier1Total);\r\n            LogEtherTransfer(msg.sender, tier1Total, now);\r\n            return;\r\n        } else if(_tier == 2) {\r\n            require(now > tier2End && tier2Total > 0);\r\n            etheraffle.transfer(tier2Total);\r\n            LogEtherTransfer(msg.sender, tier2Total, now);\r\n            return;\r\n        } else if(_tier == 3) {\r\n            require(now > tier3End && tier3Total > 0);\r\n            etheraffle.transfer(tier3Total);\r\n            LogEtherTransfer(msg.sender, tier3Total, now);\r\n            return;\r\n        } else if(_tier == 4) {\r\n            require(now > tier3End && this.balance > 0);\r\n            etheraffle.transfer(this.balance);\r\n            LogEtherTransfer(msg.sender, this.balance, now);\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n    * @dev    Function callable only by Etheraffle's multi-sig wallet.\r\n    *         It transfers any remaining unsold LOT tokens to the\r\n    *         Etheraffle multisig wallet. Function only callable once\r\n    *         the withdraw period and ∴ the ICO ends.\r\n    */\r\n    function transferLOT() onlyEtheraffle onlyIfRunning external {\r\n        require(now > wdBefore);\r\n        uint amt = LOT.balanceOf(this);\r\n        LOT.transfer(etheraffle, amt);\r\n        LogLOTTransfer(msg.sender, 5, 0, amt, now);\r\n    }\r\n    /**\r\n    * @dev    Toggle crowdsale status. Only callable by the Etheraffle\r\n    *         mutlisig account. If set to false, the refund function\r\n    *         becomes live allow purchasers to withdraw their ether\r\n    *\r\n    */\r\n    function setCrowdSaleStatus(bool _status) external onlyEtheraffle {\r\n        ICORunning = _status;\r\n    }\r\n    /**\r\n     * @dev This function is what allows this contract to receive ERC223\r\n     *      compliant tokens. Any tokens sent to this address will fire off\r\n     *      an event announcing their arrival. Unlike ERC20 tokens, ERC223\r\n     *      tokens cannot be sent to contracts absent this function,\r\n     *      thereby preventing loss of tokens by mistakenly sending them to\r\n     *      contracts not designed to accept them.\r\n     *\r\n     * @param _from     From whom the transfer originated\r\n     * @param _value    How many tokens were sent\r\n     * @param _data     Transaction metadata\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public {\r\n        if (_value > 0) {\r\n            LogTokenDeposit(_from, _value, _data);\r\n        }\r\n    }\r\n    /**\r\n     * @dev   Housekeeping function in the event this contract is no\r\n     *        longer needed. Will delete the code from the blockchain.\r\n     */\r\n    function selfDestruct() external onlyIfNotRunning onlyEtheraffle {\r\n        selfdestruct(etheraffle);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiTier2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier3LOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiTier3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier0Total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier3Total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier0LOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier1LOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferLOT\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusLOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemBonusLot\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier2End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiTier0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wdBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setCrowdSaleStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier2Total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFreeLOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etheraffle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiTier1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier2LOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICORunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier1End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier3End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier1Total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogTokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toWhom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toWhom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogEtherTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toWhom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogBonusLOTRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toWhom\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"inTier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"LOTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogLOTTransfer\",\"type\":\"event\"}]","ContractName":"EtheraffleICO","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f7ad4b52667c2a3f808d00ce3a2614a1b04253788d41932f07c6ea0778f3cc4"}]}