{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  //function tokenUri(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\ncontract HiPrecious is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new precious comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"HiPrecious\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"HIP\"; // solhint-disable-line\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from precious IDs to the address that owns them. All preciouses have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public preciousIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of precious that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipPreciousCount;\r\n\r\n  /// @dev A mapping from HiPreciousIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Precious can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public preciousIndexToApproved;\r\n\r\n  // Addresses of the main roles in HiPrecious.\r\n  address public daVinciAddress; //CPO Product\r\n  address public cresusAddress;  //CFO Finance\r\n  \r\n  \r\n function () public payable {} // Give the ability of receiving ether\r\n\r\n  /*** DATATYPES ***/\r\n\r\n  struct Precious {\r\n    string name;  // Edition name like 'Monroe'\r\n    uint256 number; //  Like 12 means #12 out of the edition.worldQuantity possible (here in the example 15)\r\n    uint256 editionId;  // id to find the edition in which this precious Belongs to. Stored in allEditions[precious.editionId]\r\n    uint256 collectionId; // id to find the collection in which this precious Belongs to. Stored in allCollections[precious.collectionId]\r\n    string tokenURI;\r\n  }\r\n\r\n  struct Edition {\r\n    uint256 id;\r\n    string name; // Like 'Lee'\r\n    uint256 worldQuantity; // The number of precious composing this edition (ex: if 15 then there will never be more precious in this edition)\r\n    uint256[] preciousIds; // The list of precious ids which compose this edition.\r\n    uint256 collectionId;\r\n  }\r\n\r\n  struct Collection {\r\n    uint256 id;\r\n    string name; // Like 'China'\r\n    uint256[] editionIds; // The list of edition ids which compose this collection Ex: allEditions.get[editionIds[0]].name = 'Lee01'dawd'\r\n  }\r\n\r\n  Precious[] private allPreciouses;\r\n  Edition[] private allEditions;\r\n  Collection[] private allCollections;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyDaVinci() {\r\n    require(msg.sender == daVinciAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for CFO-only functionality\r\n  modifier onlyCresus() {\r\n    require(msg.sender == cresusAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(msg.sender == daVinciAddress || msg.sender == cresusAddress);\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function HiPrecious() public {\r\n    daVinciAddress = msg.sender;\r\n    cresusAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    preciousIndexToApproved[_tokenId] = _to;\r\n\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipPreciousCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new Collection with the given name.\r\n  function createContractCollection(string _name) public onlyDaVinci {\r\n    _createCollection(_name);\r\n  }\r\n\r\n  /// @dev Creates a new Edition with the given name and worldQuantity which will never be overcome.\r\n  function createContractEditionForCollection(string _name, uint256 _collectionId, uint256 _worldQuantity) public onlyDaVinci {\r\n    _createEdition(_name, _collectionId, _worldQuantity);\r\n  }\r\n  \r\n    /// @dev Creates a new Precious with the given name.\r\n  function createContractPreciousForEdition(address _to, uint256 _editionId, string _tokenURI) public onlyDaVinci {\r\n    _createPrecious(_to, _editionId, _tokenURI);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific precious.\r\n  /// @param _tokenId The tokenId of the precious of interest.\r\n  function getPrecious(uint256 _tokenId) public view returns (\r\n    string preciousName,\r\n    uint256 number,\r\n    uint256 editionId,\r\n    uint256 collectionId,\r\n    address owner\r\n  ) {\r\n    Precious storage precious = allPreciouses[_tokenId];\r\n    preciousName = precious.name;\r\n    number = precious.number;\r\n    editionId = precious.editionId;\r\n    collectionId = precious.collectionId;\r\n    owner = preciousIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific edition.\r\n  /// @param _editionId The tokenId of the edition of interest.\r\n  function getEdition(uint256 _editionId) public view returns (\r\n    uint256 id,\r\n    string editionName,\r\n    uint256 worldQuantity,\r\n    uint256[] preciousIds\r\n  ) {\r\n    Edition storage edition = allEditions[_editionId-1];\r\n    id = edition.id;\r\n    editionName = edition.name;\r\n    worldQuantity = edition.worldQuantity;\r\n    preciousIds = edition.preciousIds;\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific collection.\r\n  /// @param _collectionId The tokenId of the collection of interest.\r\n  function getCollection(uint256 _collectionId) public view returns (\r\n    uint256 id,\r\n    string collectionName,\r\n    uint256[] editionIds\r\n  ) {\r\n    Collection storage collection = allCollections[_collectionId-1];\r\n    id = collection.id;\r\n    collectionName = collection.name;\r\n    editionIds = collection.editionIds;\r\n  }\r\n\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = preciousIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCresus {\r\n    _payout(_to);\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CPO. Only available to the current CPO.\r\n  /// @param _newDaVinci The address of the new CPO\r\n  function setDaVinci(address _newDaVinci) public onlyDaVinci {\r\n    require(_newDaVinci != address(0));\r\n\r\n    daVinciAddress = _newDaVinci;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CFO. Only available to the current CFO.\r\n  /// @param _newCresus The address of the new CFO\r\n  function setCresus(address _newCresus) public onlyCresus {\r\n    require(_newCresus != address(0));\r\n\r\n    cresusAddress = _newCresus;\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view returns (string){\r\n      require(_tokenId<allPreciouses.length);\r\n      return allPreciouses[_tokenId].tokenURI;\r\n  }\r\n  \r\n  function setTokenURI(uint256 _tokenId, string newURI) public onlyDaVinci{\r\n      require(_tokenId<allPreciouses.length);\r\n      Precious storage precious = allPreciouses[_tokenId];\r\n      precious.tokenURI = newURI;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = preciousIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire allPreciouses array looking for preciouses belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalPreciouses = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 preciousId;\r\n      for (preciousId = 0; preciousId <= totalPreciouses; preciousId++) {\r\n        if (preciousIndexToOwner[preciousId] == _owner) {\r\n          result[resultIndex] = preciousId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of preciouses\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return allPreciouses.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return preciousIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating Collections\r\n  function _createCollection(string _name) private onlyDaVinci{\r\n    uint256 newCollectionId = allCollections.length+1;\r\n    uint256[] storage newEditionIds;\r\n    Collection memory _collection = Collection({\r\n      id: newCollectionId,\r\n      name: _name,\r\n      editionIds: newEditionIds\r\n    });\r\n\r\n    allCollections.push(_collection);\r\n  }\r\n\r\n  /// For creating Editions\r\n  function _createEdition(string _name, uint256 _collectionId, uint256 _worldQuantity) private onlyDaVinci{\r\n    Collection storage collection = allCollections[_collectionId-1]; //Would retrieve Bad instruction if not exist\r\n\r\n    uint256 newEditionId = allEditions.length+1;\r\n    uint256[] storage newPreciousIds;\r\n\r\n    Edition memory _edition = Edition({\r\n      id: newEditionId,\r\n      name: _name,\r\n      worldQuantity: _worldQuantity,\r\n      preciousIds: newPreciousIds,\r\n      collectionId: _collectionId\r\n    });\r\n\r\n    allEditions.push(_edition);\r\n    collection.editionIds.push(newEditionId);\r\n  }\r\n\r\n  /// For creating Precious\r\n  function _createPrecious(address _owner, uint256 _editionId, string _tokenURI) private onlyDaVinci{\r\n    Edition storage edition = allEditions[_editionId-1]; //if _editionId doesn't exist in array, exits.\r\n    \r\n    //Check if we can still print precious for that specific edition\r\n    require(edition.preciousIds.length < edition.worldQuantity);\r\n\r\n    //string memory preciousName = edition.name + '_' + edition.preciousIds.length+1 + '/' + edition.worldQuantity; NOT DOABLE IN SOLIDITY\r\n\r\n    Precious memory _precious = Precious({\r\n      name: edition.name,\r\n      number: edition.preciousIds.length+1,\r\n      editionId: _editionId,\r\n      collectionId: edition.collectionId,\r\n      tokenURI: _tokenURI\r\n    });\r\n\r\n    uint256 newPreciousId = allPreciouses.push(_precious) - 1;\r\n    edition.preciousIds.push(newPreciousId);\r\n\r\n    // It's probably never going to happen, 4 billion preciouses are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newPreciousId == uint256(uint32(newPreciousId)));\r\n\r\n    emit Birth(newPreciousId, edition.name, _owner);\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newPreciousId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == preciousIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      cresusAddress.transfer(address(this).balance);\r\n    } else {\r\n      _to.transfer(address(this).balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Precious to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of preciouses is capped to 2^32 we can't overflow this\r\n    ownershipPreciousCount[_to]++;\r\n    //transfer ownership\r\n    preciousIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new preciouses _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipPreciousCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete preciousIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cresusAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCresus\",\"type\":\"address\"}],\"name\":\"setCresus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preciousIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_editionId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"createContractPreciousForEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"name\":\"_worldQuantity\",\"type\":\"uint256\"}],\"name\":\"createContractEditionForCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDaVinci\",\"type\":\"address\"}],\"name\":\"setDaVinci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"getCollection\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"collectionName\",\"type\":\"string\"},{\"name\":\"editionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrecious\",\"outputs\":[{\"name\":\"preciousName\",\"type\":\"string\"},{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"editionId\",\"type\":\"uint256\"},{\"name\":\"collectionId\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createContractCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"getEdition\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"editionName\",\"type\":\"string\"},{\"name\":\"worldQuantity\",\"type\":\"uint256\"},{\"name\":\"preciousIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daVinciAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preciousIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HiPrecious","CompilerVersion":"v0.4.24-nightly.2018.4.26+commit.ef2111a2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6be75eb840b4e8535a9f481b49cd2c2d7a3620adc58ad1f8ba95018a23096b16"}]}