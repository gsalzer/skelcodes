{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Maths\r\n * A library to make working with numbers in Solidity hurt your brain less.\r\n */\r\nlibrary Maths {\r\n  /**\r\n   * @dev Adds two addends together, returns the sum\r\n   * @param addendA the first addend\r\n   * @param addendB the second addend\r\n   * @return sum the sum of the equation (e.g. addendA + addendB)\r\n   */\r\n  function plus(\r\n    uint256 addendA,\r\n    uint256 addendB\r\n  ) public pure returns (uint256 sum) {\r\n    sum = addendA + addendB;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts the minuend from the subtrahend, returns the difference\r\n   * @param minuend the minuend\r\n   * @param subtrahend the subtrahend\r\n   * @return difference the difference (e.g. minuend - subtrahend)\r\n   */\r\n  function minus(\r\n    uint256 minuend,\r\n    uint256 subtrahend\r\n  ) public pure returns (uint256 difference) {\r\n    assert(minuend >= subtrahend);\r\n    difference = minuend - subtrahend;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function mul(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    if (factorA == 0 || factorB == 0) return 0;\r\n    product = factorA * factorB;\r\n    assert(product / factorA == factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function times(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    return mul(factorA, factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function div(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    quotient = dividend / divisor;\r\n    assert(quotient * divisor == dividend);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function dividedBy(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    return div(dividend, divisor);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the quotient and remainder\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   * @return remainder the remainder of the equation (e.g. dividend % divisor)\r\n   */\r\n  function divideSafely(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient, uint256 remainder) {\r\n    quotient = div(dividend, divisor);\r\n    remainder = dividend % divisor;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the lesser of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the lesser of the two values\r\n   */\r\n  function min(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a <= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the greater of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the greater of the two values\r\n   */\r\n  function max(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a < b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than or equal to b\r\n   */\r\n  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a <= b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is greater than b\r\n   */\r\n  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a > b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a >= b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Manageable\r\n */\r\ncontract Manageable {\r\n  address public owner;\r\n  address public manager;\r\n\r\n  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\r\n  event ManagementChanged(address indexed previousManager, address indexed newManager);\r\n\r\n  /**\r\n   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Manageable() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or manager.\r\n   */\r\n  modifier onlyManagement() {\r\n    require(msg.sender == owner || msg.sender == manager);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipChanged(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner or manager to replace the current manager\r\n   * @param newManager The address to give contract management rights.\r\n   */\r\n  function replaceManager(address newManager) public onlyManagement {\r\n    require(newManager != address(0));\r\n    ManagementChanged(manager, newManager);\r\n    manager = newManager;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function totalSupply() public view returns (uint256);\r\n}\r\n\r\ncontract MythereumERC20Token is ERC20 {\r\n  function burn(address burner, uint256 amount) public returns (bool);\r\n  function mint(address to, uint256 amount) public returns (bool);\r\n}\r\n\r\ncontract MythereumCardToken {\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  ) public;\r\n\r\n  function isEditionAvailable(uint8 _editionNumber) public view returns (bool);\r\n  function cloneCard(address _owner, uint256 _tokenId) public returns (bool);\r\n  function mintRandomCards(\r\n    address _owner,\r\n    uint8 _editionNumber,\r\n    uint8 _numCards\r\n  ) public returns (bool);\r\n  function improveCard(\r\n    uint256 _tokenId,\r\n    uint256 _addedDamage,\r\n    uint256 _addedShield\r\n  ) public returns (bool);\r\n  function destroyCard(uint256 _tokenId) public returns (bool);\r\n}\r\n\r\ncontract Mythereum is Manageable {\r\n  using Maths for uint256;\r\n\r\n  struct Edition {\r\n    string  name;\r\n    uint256 sales;\r\n    uint256 maxSales;\r\n    uint8   packSize;\r\n    uint256 packPrice;\r\n    uint256 packPriceIncrease;\r\n  }\r\n\r\n  mapping (uint8 => Edition) public editions;\r\n  mapping (address => bool) public isVIP;\r\n  mapping (address => bool) public isTokenAccepted;\r\n  mapping (address => uint256) public tokenCostPerPack;\r\n\r\n  mapping (uint256 => uint256) public mythexCostPerUpgradeLevel;\r\n  mapping (uint256 => uint256) public cardDamageUpgradeLevel;\r\n  mapping (uint256 => uint256) public cardShieldUpgradeLevel;\r\n  uint256 public maxCardUpgradeLevel = 30;\r\n\r\n  address public cardTokenAddress;\r\n  address public xpTokenAddress;\r\n  address public mythexTokenAddress;\r\n  address public gameHostAddress;\r\n\r\n  /* data related to shared ownership */\r\n  uint256 public totalShares = 0;\r\n  uint256 public totalReleased = 0;\r\n  mapping(address => uint256) public shares;\r\n  mapping(address => uint256) public released;\r\n\r\n  event CardsPurchased(uint256 editionNumber, uint256 packSize, address buyer);\r\n  event CardUpgraded(uint256 cardId, uint256 addedDamage, uint256 addedShield);\r\n\r\n  modifier onlyHosts() {\r\n    require(\r\n      msg.sender == owner ||\r\n      msg.sender == manager ||\r\n      msg.sender == gameHostAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  function Mythereum() public {\r\n    editions[0] = Edition({\r\n      name: \"Genesis\",\r\n      sales: 3999,\r\n      maxSales: 5000,\r\n      packSize: 7,\r\n      packPrice: 100 finney,\r\n      packPriceIncrease: 1 finney\r\n    });\r\n\r\n    editions[1] = Edition({\r\n      name: \"Survivor\",\r\n      sales: 20,\r\n      maxSales: 1000000,\r\n      packSize: 10,\r\n      packPrice: 0,\r\n      packPriceIncrease: 0\r\n    });\r\n\r\n    isVIP[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Disallow funds being sent directly to the contract since we can't know\r\n   *  which edition they'd intended to purchase.\r\n   */\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n  function buyPack(\r\n    uint8 _editionNumber\r\n  ) public payable {\r\n    uint256 packPrice = isVIP[msg.sender] ? 0 : editions[_editionNumber].packPrice;\r\n\r\n    require(msg.value.isAtLeast(packPrice));\r\n    if (msg.value.isGreaterThan(packPrice)) {\r\n      msg.sender.transfer(msg.value.minus(packPrice));\r\n    }\r\n\r\n    _deliverPack(msg.sender, _editionNumber);\r\n  }\r\n\r\n  function buyPackWithERC20Tokens(\r\n    uint8   _editionNumber,\r\n    address _tokenAddress\r\n  ) public {\r\n    require(isTokenAccepted[_tokenAddress]);\r\n    _processERC20TokenPackPurchase(_editionNumber, _tokenAddress, msg.sender);\r\n  }\r\n\r\n  function upgradeCardDamage(uint256 _cardId) public {\r\n    require(cardDamageUpgradeLevel[_cardId].isLessThan(maxCardUpgradeLevel));\r\n    uint256 costOfUpgrade = 32 * (cardDamageUpgradeLevel[_cardId] + 1);\r\n\r\n    MythereumERC20Token mythexContract = MythereumERC20Token(mythexTokenAddress);\r\n    require(mythexContract.burn(msg.sender, costOfUpgrade));\r\n\r\n    cardDamageUpgradeLevel[_cardId]++;\r\n    _improveCard(_cardId, 1, 0);\r\n  }\r\n\r\n  function upgradeCardShield(uint256 _cardId) public {\r\n    require(cardShieldUpgradeLevel[_cardId].isLessThan(maxCardUpgradeLevel));\r\n    uint256 costOfUpgrade = 32 * (cardShieldUpgradeLevel[_cardId] + 1);\r\n\r\n    MythereumERC20Token mythexContract = MythereumERC20Token(mythexTokenAddress);\r\n    require(mythexContract.burn(msg.sender, costOfUpgrade));\r\n\r\n    cardShieldUpgradeLevel[_cardId]++;\r\n    _improveCard(_cardId, 0, 1);\r\n  }\r\n\r\n  function improveCard(\r\n    uint256 _cardId,\r\n    uint256 _addedDamage,\r\n    uint256 _addedShield\r\n  ) public onlyManagement {\r\n    require(cardShieldUpgradeLevel[_cardId].isLessThan(maxCardUpgradeLevel));\r\n    _improveCard(_cardId, _addedDamage, _addedShield);\r\n  }\r\n\r\n  function _improveCard(\r\n    uint256 _cardId,\r\n    uint256 _addedDamage,\r\n    uint256 _addedShield\r\n  ) internal {\r\n    MythereumCardToken cardToken = MythereumCardToken(cardTokenAddress);\r\n    require(cardToken.improveCard(_cardId, _addedDamage, _addedShield));\r\n    CardUpgraded(_cardId, _addedDamage, _addedShield);\r\n  }\r\n\r\n  function receiveApproval(\r\n    address _sender,\r\n    uint256 _value,\r\n    address _tokenContract,\r\n    bytes _extraData\r\n  ) public {\r\n    require(isTokenAccepted[_tokenContract]);\r\n\r\n    uint8 editionNumber = 0;\r\n    if (_extraData.length != 0) editionNumber = uint8(_extraData[0]);\r\n\r\n    _processERC20TokenPackPurchase(editionNumber, _tokenContract, _sender);\r\n  }\r\n\r\n  function _processERC20TokenPackPurchase(\r\n    uint8   _editionNumber,\r\n    address _tokenAddress,\r\n    address _buyer\r\n  ) internal {\r\n    require(isTokenAccepted[_tokenAddress]);\r\n    ERC20 tokenContract = ERC20(_tokenAddress);\r\n    uint256 costPerPack = tokenCostPerPack[_tokenAddress];\r\n\r\n    uint256 ourBalanceBefore = tokenContract.balanceOf(address(this));\r\n    tokenContract.transferFrom(_buyer, address(this), costPerPack);\r\n\r\n    uint256 ourBalanceAfter = tokenContract.balanceOf(address(this));\r\n    require(ourBalanceAfter.isAtLeast(ourBalanceBefore.plus(costPerPack)));\r\n\r\n    _deliverPack(_buyer, _editionNumber);\r\n  }\r\n\r\n  function burnMythexTokens(address _burner, uint256 _amount) public onlyHosts {\r\n    require(_burner != address(0));\r\n    MythereumERC20Token(mythexTokenAddress).burn(_burner, _amount);\r\n  }\r\n\r\n  function burnXPTokens(address _burner, uint256 _amount) public onlyHosts {\r\n    require(_burner != address(0));\r\n    MythereumERC20Token(xpTokenAddress).burn(_burner, _amount);\r\n  }\r\n\r\n  function grantMythexTokens(address _recipient, uint256 _amount) public onlyHosts {\r\n    require(_recipient != address(0));\r\n    MythereumERC20Token(mythexTokenAddress).mint(_recipient, _amount);\r\n  }\r\n\r\n  function grantXPTokens(address _recipient, uint256 _amount) public onlyHosts {\r\n    require(_recipient != address(0));\r\n    MythereumERC20Token(xpTokenAddress).mint(_recipient, _amount);\r\n  }\r\n\r\n  function grantPromoPack(\r\n    address _recipient,\r\n    uint8 _editionNumber\r\n  ) public onlyManagement {\r\n    _deliverPack(_recipient, _editionNumber);\r\n  }\r\n\r\n  function setTokenAcceptanceRate(\r\n    address _token,\r\n    uint256 _costPerPack\r\n  ) public onlyManagement {\r\n    if (_costPerPack > 0) {\r\n      isTokenAccepted[_token] = true;\r\n      tokenCostPerPack[_token] = _costPerPack;\r\n    } else {\r\n      isTokenAccepted[_token] = false;\r\n      tokenCostPerPack[_token] = 0;\r\n    }\r\n  }\r\n\r\n  function transferERC20Tokens(\r\n    address _token,\r\n    address _recipient,\r\n    uint256 _amount\r\n  ) public onlyManagement {\r\n    require(ERC20(_token).transfer(_recipient, _amount));\r\n  }\r\n\r\n  function addVIP(address _vip) public onlyManagement {\r\n    isVIP[_vip] = true;\r\n  }\r\n\r\n  function removeVIP(address _vip) public onlyManagement {\r\n    isVIP[_vip] = false;\r\n  }\r\n\r\n  function setEditionName(\r\n    uint8 _editionNumber,\r\n    string _name\r\n  ) public onlyManagement {\r\n    editions[_editionNumber].name = _name;\r\n  }\r\n\r\n  function setEditionSales(\r\n    uint8 _editionNumber,\r\n    uint256 _numSales\r\n  ) public onlyManagement {\r\n    editions[_editionNumber].sales = _numSales;\r\n  }\r\n\r\n  function setEditionMaxSales(\r\n    uint8 _editionNumber,\r\n    uint256 _maxSales\r\n  ) public onlyManagement {\r\n    editions[_editionNumber].maxSales = _maxSales;\r\n  }\r\n\r\n  function setEditionPackPrice(\r\n    uint8 _editionNumber,\r\n    uint256 _newPrice\r\n  ) public onlyManagement {\r\n    editions[_editionNumber].packPrice = _newPrice;\r\n  }\r\n\r\n  function setEditionPackPriceIncrease(\r\n    uint8 _editionNumber,\r\n    uint256 _increase\r\n  ) public onlyManagement {\r\n    editions[_editionNumber].packPriceIncrease = _increase;\r\n  }\r\n\r\n  function setEditionPackSize(\r\n    uint8 _editionNumber,\r\n    uint8 _newSize\r\n  ) public onlyManagement {\r\n    editions[_editionNumber].packSize = _newSize;\r\n  }\r\n\r\n  function setCardTokenAddress(address _addr) public onlyManagement {\r\n    require(_addr != address(0));\r\n    cardTokenAddress = _addr;\r\n  }\r\n\r\n  function setXPTokenAddress(address _addr) public onlyManagement {\r\n    require(_addr != address(0));\r\n    xpTokenAddress = _addr;\r\n  }\r\n\r\n  function setMythexTokenAddress(address _addr) public onlyManagement {\r\n    require(_addr != address(0));\r\n    mythexTokenAddress = _addr;\r\n  }\r\n\r\n  function setGameHostAddress(address _addr) public onlyManagement {\r\n    require(_addr != address(0));\r\n    gameHostAddress = _addr;\r\n  }\r\n\r\n  function claim() public {\r\n    _claim(msg.sender);\r\n  }\r\n\r\n  function deposit() public payable {\r\n    // this is for crediting funds to the contract - only meant for internal use\r\n  }\r\n\r\n  function addShareholder(address _payee, uint256 _shares) public onlyOwner {\r\n    require(_payee != address(0));\r\n    require(_shares.isAtLeast(1));\r\n    require(shares[_payee] == 0);\r\n\r\n    shares[_payee] = _shares;\r\n    totalShares = totalShares.plus(_shares);\r\n  }\r\n\r\n  function removeShareholder(address _payee) public onlyOwner {\r\n    require(shares[_payee] != 0);\r\n    _claim(_payee);\r\n    _forfeitShares(_payee, shares[_payee]);\r\n  }\r\n\r\n  function grantAdditionalShares(\r\n    address _payee,\r\n    uint256 _shares\r\n  ) public onlyOwner {\r\n    require(shares[_payee] != 0);\r\n    require(_shares.isAtLeast(1));\r\n\r\n    shares[_payee] = shares[_payee].plus(_shares);\r\n    totalShares = totalShares.plus(_shares);\r\n  }\r\n\r\n  function forfeitShares(uint256 _numShares) public {\r\n    _forfeitShares(msg.sender, _numShares);\r\n  }\r\n\r\n  function transferShares(address _to, uint256 _numShares) public {\r\n    require(_numShares.isAtLeast(1));\r\n    require(shares[msg.sender].isAtLeast(_numShares));\r\n\r\n    shares[msg.sender] = shares[msg.sender].minus(_numShares);\r\n    shares[_to] = shares[_to].plus(_numShares);\r\n  }\r\n\r\n  function transferEntireStake(address _to) public {\r\n    transferShares(_to, shares[msg.sender]);\r\n  }\r\n\r\n  function _claim(address payee) internal {\r\n    require(shares[payee].isAtLeast(1));\r\n\r\n    uint256 totalReceived = address(this).balance.plus(totalReleased);\r\n    uint256 payment = totalReceived.times(shares[payee]).dividedBy(totalShares).minus(released[payee]);\r\n\r\n    require(payment != 0);\r\n    require(address(this).balance.isAtLeast(payment));\r\n\r\n    released[payee] = released[payee].plus(payment);\r\n    totalReleased = totalReleased.plus(payment);\r\n\r\n    payee.transfer(payment);\r\n  }\r\n\r\n  function _forfeitShares(address payee, uint256 numShares) internal {\r\n    require(shares[payee].isAtLeast(numShares));\r\n    shares[payee] = shares[payee].minus(numShares);\r\n    totalShares = totalShares.minus(numShares);\r\n  }\r\n\r\n  function _deliverPack(address recipient, uint8 editionNumber) internal {\r\n    Edition storage edition = editions[editionNumber];\r\n    require(edition.sales.isLessThan(edition.maxSales.plus(edition.packSize)));\r\n\r\n    edition.sales = edition.sales.plus(edition.packSize);\r\n    edition.packPrice = edition.packPrice.plus(edition.packPriceIncrease);\r\n\r\n    MythereumCardToken cardToken = MythereumCardToken(cardTokenAddress);\r\n    cardToken.mintRandomCards(recipient, editionNumber, edition.packSize);\r\n\r\n    CardsPurchased(editionNumber, edition.packSize, recipient);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gameHostAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenAccepted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vip\",\"type\":\"address\"}],\"name\":\"removeVIP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCardTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setXPTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardShieldUpgradeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_maxSales\",\"type\":\"uint256\"}],\"name\":\"setEditionMaxSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnXPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_increase\",\"type\":\"uint256\"}],\"name\":\"setEditionPackPriceIncrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCostPerPack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"},{\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"grantAdditionalShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_numSales\",\"type\":\"uint256\"}],\"name\":\"setEditionSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"replaceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setEditionPackPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferEntireStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"grantMythexTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"editions\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sales\",\"type\":\"uint256\"},{\"name\":\"maxSales\",\"type\":\"uint256\"},{\"name\":\"packSize\",\"type\":\"uint8\"},{\"name\":\"packPrice\",\"type\":\"uint256\"},{\"name\":\"packPriceIncrease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mythexTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vip\",\"type\":\"address\"}],\"name\":\"addVIP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"upgradeCardDamage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGameHostAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"buyPackWithERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"},{\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"addShareholder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"grantXPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xpTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnMythexTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_numShares\",\"type\":\"uint256\"}],\"name\":\"transferShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCardUpgradeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"}],\"name\":\"buyPack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"removeShareholder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"upgradeCardShield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_newSize\",\"type\":\"uint8\"}],\"name\":\"setEditionPackSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"}],\"name\":\"grantPromoPack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"improveCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMythexTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numShares\",\"type\":\"uint256\"}],\"name\":\"forfeitShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mythexCostPerUpgradeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_costPerPack\",\"type\":\"uint256\"}],\"name\":\"setTokenAcceptanceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardDamageUpgradeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setEditionName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"packSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"CardsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addedDamage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addedShield\",\"type\":\"uint256\"}],\"name\":\"CardUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementChanged\",\"type\":\"event\"}]","ContractName":"Mythereum","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"Maths:b5f1efa8a3267cce1aea000dd2cc7a0778aa8299","SwarmSource":"bzzr://9459e60942f381772bf32392cc5164db65e2b5aaa06e38728a4c6b7f9b20e70c"}]}