{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath { //standart library for uint\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0){\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\r\n    if (b == 0){\r\n      return 1;\r\n    }\r\n    uint256 c = a**b;\r\n    assert (c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//standart contract to identify owner\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  address public newOwner;\r\n\r\n  address public techSupport;\r\n\r\n  address public newTechSupport;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyTechSupport() {\r\n    require(msg.sender == techSupport);\r\n    _;\r\n  }\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  function transferTechSupport (address _newSupport) public{\r\n    require (msg.sender == owner || msg.sender == techSupport);\r\n    newTechSupport = _newSupport;\r\n  }\r\n\r\n  function acceptSupport() public{\r\n    if(msg.sender == newTechSupport){\r\n      techSupport = newTechSupport;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n//Abstract Token contract\r\ncontract BineuroToken{\r\n  function setCrowdsaleContract (address) public;\r\n  function sendCrowdsaleTokens(address, uint256)  public;\r\n  function burnTokens(address,address, address, uint) public;\r\n  function getOwner()public view returns(address);\r\n}\r\n\r\n//Crowdsale contract\r\ncontract Crowdsale is Ownable{\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint decimals = 3;\r\n  // Token contract address\r\n  BineuroToken public token;\r\n\r\n  // Constructor\r\n  function Crowdsale(address _tokenAddress) public{\r\n    token = BineuroToken(_tokenAddress);\r\n    techSupport = msg.sender;\r\n\r\n    token.setCrowdsaleContract(this);\r\n    owner = token.getOwner();\r\n  }\r\n\r\n  address etherDistribution1 = 0x64f89e3CE504f1b15FcD4465b780Fb393ab79187;\r\n  address etherDistribution2 = 0x320359973d7953FbEf62C4f50960C46D8DBE2425;\r\n\r\n  address bountyAddress = 0x7e06828655Ba568Bbe06eD8ce165e4052A6Ea441;\r\n\r\n  //Crowdsale variables\r\n  uint public tokensSold = 0;\r\n  uint public ethCollected = 0;\r\n\r\n  // Buy constants\r\n  uint minDeposit = (uint)(500).mul((uint)(10).pow(decimals));\r\n\r\n  uint tokenPrice = 0.0001 ether;\r\n\r\n  // Ico constants\r\n  uint public icoStart = 1519034400; //02/19/2018 1519034400\r\n  uint public icoFinish = 1521453600; //03/19/2018 \r\n\r\n  uint public maxCap = 27000 ether;\r\n\r\n  //Owner can change end date\r\n  function changeIcoFinish (uint _newDate) public onlyOwner {\r\n    icoFinish = _newDate;\r\n  }\r\n  \r\n  //check is now ICO\r\n  function isIco(uint _time) public view returns (bool){\r\n    if((icoStart <= _time) && (_time < icoFinish)){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function timeBasedBonus(uint _time) public view returns(uint res) {\r\n    res = 20;\r\n    uint timeBuffer = icoStart;\r\n    for (uint i = 0; i<10; i++){\r\n      if(_time <= timeBuffer + 7 days){\r\n        return res;\r\n      }else{\r\n        res = res - 2;\r\n        timeBuffer = timeBuffer + 7 days;\r\n      }\r\n      if (res == 0){\r\n        return (0);\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  \r\n  function volumeBasedBonus(uint _value)public pure returns(uint res) {\r\n    if(_value < 5 ether){\r\n      return 0;\r\n    }\r\n    if (_value < 15 ether){\r\n      return 2;\r\n    }\r\n    if (_value < 30 ether){\r\n      return 5;\r\n    }\r\n    if (_value < 50 ether){\r\n      return 8;\r\n    }\r\n    return 10;\r\n  }\r\n  \r\n  //fallback function (when investor send ether to contract)\r\n  function() public payable{\r\n    require(isIco(now));\r\n    require(ethCollected.add(msg.value) <= maxCap);\r\n    require(buy(msg.sender,msg.value, now)); //redirect to func buy\r\n  }\r\n\r\n  //function buy Tokens\r\n  function buy(address _address, uint _value, uint _time) internal returns (bool){\r\n    uint tokensForSend = etherToTokens(_value,_time);\r\n\r\n    require (tokensForSend >= minDeposit);\r\n\r\n    tokensSold = tokensSold.add(tokensForSend);\r\n    ethCollected = ethCollected.add(_value);\r\n\r\n    token.sendCrowdsaleTokens(_address,tokensForSend);\r\n    etherDistribution1.transfer(this.balance/2);\r\n    etherDistribution2.transfer(this.balance);\r\n\r\n    return true;\r\n  }\r\n\r\n  function manualSendTokens (address _address, uint _tokens) public onlyTechSupport {\r\n    token.sendCrowdsaleTokens(_address, _tokens);\r\n    tokensSold = tokensSold.add(_tokens);\r\n  }\r\n\r\n  //convert ether to tokens (without decimals)\r\n  function etherToTokens(uint _value, uint _time) public view returns(uint res) {\r\n    res = _value.mul((uint)(10).pow(decimals))/(tokenPrice);\r\n    uint bonus = timeBasedBonus(_time).add(volumeBasedBonus(_value));\r\n    res = res.add(res.mul(bonus)/100);\r\n  }\r\n  \r\n  bool public isIcoEnded = false;\r\n  \r\n  function endIco () public {\r\n    require(!isIcoEnded);\r\n    require(msg.sender == owner || msg.sender == techSupport);\r\n    require(now > icoFinish + 5 days);\r\n    token.burnTokens(etherDistribution1, etherDistribution2, bountyAddress, tokensSold);\r\n    isIcoEnded = true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newDate\",\"type\":\"uint256\"}],\"name\":\"changeIcoFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"manualSendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"etherToTokens\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSupport\",\"type\":\"address\"}],\"name\":\"transferTechSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"timeBasedBonus\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"volumeBasedBonus\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTechSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000079e11ae0cc32fc39b455360e42e80cd7b1b05a72","Library":"","SwarmSource":"bzzr://71ed338f566cc460553fd69d135f4f89a931755e4a6af5cda27c5f3d42ee44ca"}]}