{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    bool public transfersEnabled;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    bool public transfersEnabled;\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n    * Protection against short address attack\r\n    */\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(transfersEnabled);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(transfersEnabled);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public ownerTwo;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == ownerTwo);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwnerTwo(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        emit OwnerChanged(owner, _newOwner);\r\n        ownerTwo = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    string public constant name = \"FOOOZ\";\r\n    string public constant symbol = \"FOOOZ\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\r\n        balances[_to] = balances[_to].add(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(_owner, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint internal returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Peterson's Law Protection\r\n     * Claim tokens\r\n     */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        MintableToken token = MintableToken(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n\r\n        emit Transfer(_token, owner, balance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    uint256 public tokenAllocated;\r\n\r\n    uint256 public hardWeiCap = 119000 * (10 ** 18);\r\n\r\n    constructor (address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n    }\r\n}\r\n\r\n\r\ncontract FooozCrowdsale is Ownable, Crowdsale, MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Closed}\r\n    State public state;\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 613333328 * (10 ** uint256(decimals));\r\n    uint256 public fundForSale = 466133330 * (10 ** uint256(decimals));\r\n\r\n    address public addressFundDevelopers = 0x326B7740e5E806fc731200A3ea92f588a86568A3;\r\n    address public addressFundBounty = 0xE585b723bDc6324dD55cf614fa83f61A88D5b3D8;\r\n    address public addressFundBonus = 0x1f318fE745bEE511a72A8AB2b704a5F285587335;\r\n    address public addressFundInvestment = 0x80A0BE0Ab330E48dE8E37277b838b9eB0Bb3bb6f;\r\n    address public addressFundAdministration = 0xFe3905B9Bd7C0c4164873180dfE0ee85FbFe9F19;\r\n\r\n\r\n    uint256[] public discount  = [50, 25, 20, 15, 10];\r\n\r\n\r\n\r\n    uint256 public weiMinSalePreIco = 1190 * 10 ** 15;\r\n    uint256 public weiMinSaleIco = 29 * 10 ** 15;\r\n    uint256 priceToken = 3362;\r\n    // $0.25 = 1 token => $1,000 = 1.19 ETH =>\r\n    //4,000 token = 1.19 ETH => 1 ETH = 4,000/1.19 = 3362 token\r\n\r\n    uint256 public countInvestor;\r\n    uint256 public currentAfterIcoPeriod;\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\r\n    event HardCapReached();\r\n    event Finalized();\r\n\r\n    constructor (address _owner, address _ownerTwo) public\r\n    Crowdsale(_owner)\r\n    {\r\n        require(_owner != address(0));\r\n        require(_ownerTwo != address(0));\r\n        owner = _owner;\r\n        ownerTwo = _ownerTwo;\r\n        //owner = msg.sender; //for test's\r\n        transfersEnabled = true;\r\n        mintingFinished = false;\r\n        state = State.Active;\r\n        totalSupply = INITIAL_SUPPLY;\r\n        mintForOwner(owner);\r\n    }\r\n\r\n    modifier inState(State _state) {\r\n        require(state == _state);\r\n        _;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function setPriceToken(uint256 _newPrice) public onlyOwner {\r\n        require(_newPrice > 0);\r\n        priceToken = _newPrice;\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address _investor) public inState(State.Active) payable returns (uint256){\r\n        require(_investor != address(0));\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = validPurchaseTokens(weiAmount);\r\n        if (tokens == 0) {revert();}\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokenAllocated = tokenAllocated.add(tokens);\r\n        mint(_investor, tokens, owner);\r\n\r\n        emit TokenPurchase(_investor, weiAmount, tokens);\r\n        if (deposited[_investor] == 0) {\r\n            countInvestor = countInvestor.add(1);\r\n        }\r\n        deposit(_investor);\r\n        wallet.transfer(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n    function getTotalAmountOfTokens(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 currentDate = now;\r\n        //currentDate = 1534204800; //for test's (Tue, 14 Aug 2018 00:00:00 GMT)\r\n        uint256 currentPeriod = getPeriod(currentDate);\r\n        uint256 amountOfTokens = 0;\r\n        if(currentPeriod < 5){\r\n            amountOfTokens = _weiAmount.mul(priceToken).mul(discount[currentPeriod] + 100).div(100);\r\n        }\r\n        if(currentPeriod == 0 && _weiAmount < weiMinSalePreIco){\r\n            amountOfTokens = 0;\r\n        }\r\n        if(0 < currentPeriod && currentPeriod < 5 && _weiAmount < weiMinSaleIco){\r\n            amountOfTokens = 0;\r\n        }\r\n        return amountOfTokens;\r\n    }\r\n\r\n    /**\r\n    * Pre-ICO sale starts on 01 of Jul, ends on 05 Jul 2018\r\n    * 1st. Stage starts 06 of Jul, ends on 15 of Jul , 2018\r\n    * 2nd. Stage starts 16 of Jul, ends on 25 of Jul , 2018\r\n    * 3rd. Stage starts 26 of Jul, ends on 05 of Aug , 2018\r\n    * 4th. Stage starts 06 of Aug, ends on 15  of Aug , 2018\r\n    */\r\n    function getPeriod(uint256 _currentDate) public pure returns (uint) {\r\n        //1530403200 - July, 01, 2018 00:00:00 && 1530835199 - July, 05, 2018 23:59:59\r\n        if( 1530403200 <= _currentDate && _currentDate <= 1530835199){\r\n            return 0;\r\n        }\r\n        //1530835200 - July, 06, 2018 00:00:00 && 1531699199 - July, 15, 2018 23:59:59\r\n        if( 1530835200 <= _currentDate && _currentDate <= 1531699199){\r\n            return 1;\r\n        }\r\n        //1531699200 - July, 16, 2018 00:00:00 && 1532563199 - July, 25, 2018 23:59:59\r\n        if( 1531699200 <= _currentDate && _currentDate <= 1532563199){\r\n            return 2;\r\n        }\r\n        //1532563200 - July, 26, 2018 00:00:00 && 1533513599 - August,   05, 2018 23:59:59\r\n        if( 1532563200 <= _currentDate && _currentDate <= 1533513599){\r\n            return 3;\r\n        }\r\n        //1533513600 - August,   06, 2018 00:00:00 && 1534377599 - August,   15, 2018 23:59:59\r\n        if( 1533513600 <= _currentDate && _currentDate <= 1534377599){\r\n            return 4;\r\n        }\r\n        return 10;\r\n    }\r\n\r\n    function getAfterIcoPeriod(uint256 _currentDate) public pure returns (uint) {\r\n        uint256 endIco = 1534377600; // August,   16, 2018 00:00:00\r\n        if( endIco < _currentDate && _currentDate <= endIco + 2*365 days){\r\n            return 100;\r\n        }\r\n        if( endIco + 2*365 days < _currentDate && _currentDate <= endIco + 4*365 days){\r\n            return 200;\r\n        }\r\n        if( endIco + 4*365 days < _currentDate && _currentDate <= endIco + 6*365 days){\r\n            return 300;\r\n        }\r\n        if( endIco + 6*365 days < _currentDate && _currentDate <= endIco + 8*365 days){\r\n            return 400;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function mintAfterIcoPeriod() public returns (bool result) {\r\n        uint256 totalCost = tokenAllocated.div(priceToken);\r\n        uint256 fivePercent = 0;\r\n        uint256 currentDate = now;\r\n        //currentDate = 1571101199; //for test Oct, 15, 2019\r\n        bool changePeriod = false;\r\n        uint256 nonSoldToken = totalSupply.sub(tokenAllocated);\r\n        uint256 mintTokens = 0;\r\n        result = false;\r\n        if (currentAfterIcoPeriod < getAfterIcoPeriod(currentDate)){\r\n            currentAfterIcoPeriod = currentAfterIcoPeriod.add(getAfterIcoPeriod(currentDate));\r\n            changePeriod = true;\r\n        }\r\n        if(totalCost.mul(100).div(weiRaised) < 200 || changePeriod){\r\n            mintTokens = nonSoldToken.div(4); // 25%\r\n            fivePercent = mintTokens.div(20); // 5%\r\n\r\n            balances[addressFundBonus] = balances[addressFundBonus].add(fivePercent.mul(2));\r\n            balances[addressFundBounty] = balances[addressFundBounty].add(fivePercent);\r\n            balances[addressFundInvestment] = balances[addressFundInvestment].add(fivePercent.mul(10));\r\n            balances[addressFundAdministration] = balances[addressFundAdministration].add(fivePercent);\r\n            //balances[ownerTwo] = balances[ownerTwo].add(fivePercent.mul(6));\r\n\r\n            balances[owner] = balances[owner].sub(fivePercent.mul(14)); // - 70%\r\n            tokenAllocated = tokenAllocated.add(fivePercent.mul(14));\r\n            result = true;\r\n        }\r\n    }\r\n\r\n    function deposit(address investor) internal {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function mintForOwner(address _wallet) internal returns (bool result) {\r\n        result = false;\r\n        uint256 fundBounty = 24533333 * (10 ** uint256(decimals));\r\n        uint256 fundDevelopers = 122666665 * (10 ** uint256(decimals));\r\n        require(_wallet != address(0));\r\n        balances[addressFundDevelopers] = balances[addressFundDevelopers].add(fundDevelopers);\r\n        balances[addressFundBounty] = balances[addressFundBounty].add(fundBounty);\r\n        tokenAllocated = tokenAllocated.add(fundDevelopers).add(fundBounty);\r\n        balances[_wallet] = balances[_wallet].add(INITIAL_SUPPLY).sub(tokenAllocated);\r\n        result = true;\r\n    }\r\n\r\n    function getDeposited(address _investor) public view returns (uint256){\r\n        return deposited[_investor];\r\n    }\r\n\r\n    function validPurchaseTokens(uint256 _weiAmount) public inState(State.Active) returns (uint256) {\r\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\r\n        if (tokenAllocated.add(addTokens) > fundForSale) {\r\n            emit TokenLimitReached(tokenAllocated, addTokens);\r\n            return 0;\r\n        }\r\n        if (weiRaised.add(_weiAmount) > hardWeiCap) {\r\n            emit HardCapReached();\r\n            return 0;\r\n        }\r\n        return addTokens;\r\n    }\r\n\r\n    function finalize() public onlyOwner inState(State.Active) returns (bool result) {\r\n        result = false;\r\n        state = State.Closed;\r\n        wallet.transfer(address(this).balance);\r\n        finishMinting();\r\n        emit Finalized();\r\n        result = true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"addressFundBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerTwo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintAfterIcoPeriod\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundAdministration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAfterIcoPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinSaleIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentDate\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentDate\",\"type\":\"uint256\"}],\"name\":\"getAfterIcoPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundDevelopers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinSalePreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"validPurchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_ownerTwo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedToken\",\"type\":\"uint256\"}],\"name\":\"TokenLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FooozCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006d2faf6a5706bcc104e9c001f0af585c11f72437000000000000000000000000df8ea37a5ec5159c54e6e18a5ecb120e6df5044f","Library":"","SwarmSource":"bzzr://cff9144ea16078a505daed65b6054bb83ff1fbc405160de747768d6c9b229074"}]}