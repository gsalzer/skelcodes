{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ReferTokenERC20Basic is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) depositBalances;\r\n    mapping(address => uint256) rewardBalances;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= rewardBalances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw an error if there is not enough balance.\r\n        rewardBalances[msg.sender] = rewardBalances[msg.sender].sub(_value);\r\n        rewardBalances[_to] = rewardBalances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return rewardBalances[_owner];\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MintableToken is Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract PackageContract is ReferTokenERC20Basic, MintableToken {\r\n    uint constant daysPerMonth = 30;\r\n    mapping(uint => mapping(string => uint256)) internal packageType;\r\n\r\n    struct Package {\r\n        uint256 since;\r\n        uint256 tokenValue;\r\n        uint256 kindOf;\r\n    }\r\n\r\n    mapping(address => Package) internal userPackages;\r\n\r\n    function PackageContract() public {\r\n        packageType[2]['fee'] = 30;\r\n        packageType[2]['reward'] = 20;\r\n        packageType[4]['fee'] = 35;\r\n        packageType[4]['reward'] = 25;\r\n    }\r\n\r\n    function depositMint(address _to, uint256 _amount, uint _kindOfPackage) canMint internal returns (bool) {\r\n        return depositMintSince(_to, _amount, _kindOfPackage, now);\r\n    }\r\n\r\n    function depositMintSince(address _to, uint256 _amount, uint _kindOfPackage, uint since) canMint internal returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        Package memory pac;\r\n        pac = Package({since : since, tokenValue : _amount, kindOf : _kindOfPackage});\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        userPackages[_to] = pac;\r\n        return true;\r\n    }\r\n\r\n    function depositBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return userPackages[_owner].tokenValue;\r\n    }\r\n\r\n    function getKindOfPackage(address _owner) public view returns (uint256) {\r\n        return userPackages[_owner].kindOf;\r\n    }\r\n\r\n}\r\n\r\ncontract ColdWalletToken is PackageContract {\r\n    address internal coldWalletAddress;\r\n    uint internal percentageCW = 30;\r\n\r\n    event CWStorageTransferred(address indexed previousCWAddress, address indexed newCWAddress);\r\n    event CWPercentageChanged(uint previousPCW, uint newPCW);\r\n\r\n    function setColdWalletAddress(address _newCWAddress) onlyOwner public {\r\n        require(_newCWAddress != coldWalletAddress && _newCWAddress != address(0));\r\n        CWStorageTransferred(coldWalletAddress, _newCWAddress);\r\n        coldWalletAddress = _newCWAddress;\r\n    }\r\n\r\n    function getColdWalletAddress() onlyOwner public view returns (address) {\r\n        return coldWalletAddress;\r\n    }\r\n\r\n    function setPercentageCW(uint _newPCW) onlyOwner public {\r\n        require(_newPCW != percentageCW && _newPCW < 100);\r\n        CWPercentageChanged(percentageCW, _newPCW);\r\n        percentageCW = _newPCW;\r\n    }\r\n\r\n    function getPercentageCW() onlyOwner public view returns (uint) {\r\n        return percentageCW;\r\n    }\r\n\r\n    function saveToCW() onlyOwner public {\r\n        coldWalletAddress.transfer(this.balance.mul(percentageCW).div(100));\r\n    }\r\n}\r\n\r\ncontract StatusContract is Ownable {\r\n\r\n    mapping(uint => mapping(string => uint[])) internal statusRewardsMap;\r\n    mapping(address => uint) internal statuses;\r\n\r\n    event StatusChanged(address participant, uint newStatus);\r\n\r\n    function StatusContract() public {\r\n        statusRewardsMap[1]['deposit'] = [3, 2, 1];\r\n        statusRewardsMap[1]['refReward'] = [3, 1, 1];\r\n\r\n        statusRewardsMap[2]['deposit'] = [7, 3, 1];\r\n        statusRewardsMap[2]['refReward'] = [5, 3, 1];\r\n\r\n        statusRewardsMap[3]['deposit'] = [10, 3, 1, 1, 1];\r\n        statusRewardsMap[3]['refReward'] = [7, 3, 3, 1, 1];\r\n\r\n        statusRewardsMap[4]['deposit'] = [10, 5, 3, 3, 1];\r\n        statusRewardsMap[4]['refReward'] = [10, 5, 3, 3, 3];\r\n\r\n        statusRewardsMap[5]['deposit'] = [12, 5, 3, 3, 3];\r\n        statusRewardsMap[5]['refReward'] = [10, 7, 5, 3, 3];\r\n    }\r\n\r\n    function getStatusOf(address participant) public view returns (uint) {\r\n        return statuses[participant];\r\n    }\r\n\r\n    function setStatus(address participant, uint8 status) public onlyOwner returns (bool) {\r\n        return setStatusInternal(participant, status);\r\n    }\r\n\r\n    function setStatusInternal(address participant, uint8 status) internal returns (bool) {\r\n        require(statuses[participant] != status && status > 0 && status <= 5);\r\n        statuses[participant] = status;\r\n        StatusChanged(participant, status);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ReferTreeContract is Ownable {\r\n    mapping(address => address) public referTree;\r\n\r\n    event TreeStructChanged(address sender, address parentSender);\r\n\r\n    function checkTreeStructure(address sender, address parentSender) onlyOwner public {\r\n        setTreeStructure(sender, parentSender);\r\n    }\r\n\r\n    function setTreeStructure(address sender, address parentSender) internal {\r\n        require(referTree[sender] == 0x0);\r\n        require(sender != parentSender);\r\n        referTree[sender] = parentSender;\r\n        TreeStructChanged(sender, parentSender);\r\n    }\r\n}\r\n\r\ncontract ReferToken is ColdWalletToken, StatusContract, ReferTreeContract {\r\n    string public constant name = \"EtherState\";\r\n    string public constant symbol = \"ETHS\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n\r\n    uint256 public constant hardCap = 10000000 * 1 ether;\r\n    mapping(address => uint256) private lastPayoutAddress;\r\n    uint private rate = 100;\r\n    uint public constant depth = 5;\r\n\r\n    event RateChanged(uint previousRate, uint newRate);\r\n    event DataReceived(bytes data);\r\n    event RefererAddressReceived(address referer);\r\n\r\n    function depositMintAndPay(address _to, uint256 _amount, uint _kindOfPackage) canMint private returns (bool) {\r\n        require(userPackages[_to].since == 0);\r\n        _amount = _amount.mul(rate);\r\n        if (depositMint(_to, _amount, _kindOfPackage)) {\r\n            payToReferer(_to, _amount, 'deposit');\r\n            lastPayoutAddress[_to] = now;\r\n        }\r\n    }\r\n\r\n    function rewardMint(address _to, uint256 _amount) private returns (bool) {\r\n        rewardBalances[_to] = rewardBalances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function payToReferer(address sender, uint256 _amount, string _key) private {\r\n        address currentReferral = sender;\r\n        uint currentStatus = 0;\r\n        uint256 refValue = 0;\r\n\r\n        for (uint level = 0; level < depth; ++level) {\r\n            currentReferral = referTree[currentReferral];\r\n            if (currentReferral == 0x0) {\r\n                break;\r\n            }\r\n            currentStatus = statuses[currentReferral];\r\n            if (currentStatus < 3 && level >= 3) {\r\n                continue;\r\n            }\r\n            refValue = _amount.mul(statusRewardsMap[currentStatus][_key][level]).div(100);\r\n            rewardMint(currentReferral, refValue);\r\n        }\r\n    }\r\n\r\n    function AddressDailyReward(address rewarded) public {\r\n        require(lastPayoutAddress[rewarded] != 0 && (now - lastPayoutAddress[rewarded]).div(1 days) > 0);\r\n        uint256 n = (now - lastPayoutAddress[rewarded]).div(1 days);\r\n        uint256 refValue = 0;\r\n\r\n        if (userPackages[rewarded].kindOf != 0) {\r\n            refValue = userPackages[rewarded].tokenValue.mul(n).mul(packageType[userPackages[rewarded].kindOf]['reward']).div(30).div(100);\r\n            rewardMint(rewarded, refValue);\r\n            payToReferer(rewarded, userPackages[rewarded].tokenValue, 'refReward');\r\n        }\r\n        if (n > 0) {\r\n            lastPayoutAddress[rewarded] = now;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        require(totalSupply < hardCap);\r\n        coldWalletAddress.transfer(msg.value.mul(percentageCW).div(100));\r\n        bytes memory data = bytes(msg.data);\r\n        DataReceived(data);\r\n        address referer = getRefererAddress(data);\r\n        RefererAddressReceived(referer);\r\n        setTreeStructure(msg.sender, referer);\r\n        setStatusInternal(msg.sender, 1);\r\n        uint8 kind = getReferralPackageKind(data);\r\n        depositMintAndPay(msg.sender, msg.value, kind);\r\n    }\r\n\r\n    function getRefererAddress(bytes data) private pure returns (address) {\r\n        if (data.length == 1 || data.length == 0) {\r\n            return address(0);\r\n        }\r\n        uint256 referer_address;\r\n        uint256 factor = 1;\r\n        for (uint i = 20; i > 0; i--) {\r\n            referer_address += uint8(data[i - 1]) * factor;\r\n            factor = factor * 256;\r\n        }\r\n        return address(referer_address);\r\n    }\r\n\r\n    function getReferralPackageKind(bytes data) private pure returns (uint8) {\r\n        if (data.length == 0) {\r\n            return 4;\r\n        }\r\n        if (data.length == 1) {\r\n            return uint8(data[0]);\r\n        }\r\n        return uint8(data[20]);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(userPackages[msg.sender].tokenValue != 0);\r\n        uint256 withdrawValue = userPackages[msg.sender].tokenValue.div(rate);\r\n        uint256 dateDiff = now - userPackages[msg.sender].since;\r\n        if (dateDiff < userPackages[msg.sender].kindOf.mul(30 days)) {\r\n            uint256 fee = withdrawValue.mul(packageType[userPackages[msg.sender].kindOf]['fee']).div(100);\r\n            withdrawValue = withdrawValue.sub(fee);\r\n            coldWalletAddress.transfer(fee);\r\n            userPackages[msg.sender].tokenValue = 0;\r\n        }\r\n        msg.sender.transfer(withdrawValue);\r\n    }\r\n\r\n    function createRawDeposit(address sender, uint256 _value, uint d, uint since) onlyOwner public {\r\n        depositMintSince(sender, _value, d, since);\r\n    }\r\n\r\n    function createDeposit(address sender, uint256 _value, uint d) onlyOwner public {\r\n        depositMintAndPay(sender, _value, d);\r\n    }\r\n\r\n    function setRate(uint _newRate) onlyOwner public {\r\n        require(_newRate != rate && _newRate > 0);\r\n        RateChanged(rate, _newRate);\r\n        rate = _newRate;\r\n    }\r\n\r\n    function getRate() public view returns (uint) {\r\n        return rate;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"},{\"name\":\"since\",\"type\":\"uint256\"}],\"name\":\"createRawDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewarded\",\"type\":\"address\"}],\"name\":\"AddressDailyReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"createDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getStatusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"parentSender\",\"type\":\"address\"}],\"name\":\"checkTreeStructure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPCW\",\"type\":\"uint256\"}],\"name\":\"setPercentageCW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getKindOfPackage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getColdWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercentageCW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCWAddress\",\"type\":\"address\"}],\"name\":\"setColdWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"depositBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saveToCW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DataReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"RefererAddressReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentSender\",\"type\":\"address\"}],\"name\":\"TreeStructChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newStatus\",\"type\":\"uint256\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCWAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCWAddress\",\"type\":\"address\"}],\"name\":\"CWStorageTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousPCW\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPCW\",\"type\":\"uint256\"}],\"name\":\"CWPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ReferToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4cd679f42240e39c4c00ec9e4c8da8f342326132c9ee2760e34f8db61d65d71d"}]}