{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract Cofounded {\r\n  mapping (address => uint) public cofounderIndices;\r\n  address[] public cofounders;\r\n\r\n\r\n  /// @dev restrict execution to one of original cofounder addresses\r\n  modifier restricted () {\r\n    uint cofounderIndex = cofounderIndices[msg.sender];\r\n    require(msg.sender == cofounders[cofounderIndex]);\r\n    _;\r\n  }\r\n\r\n  /// @notice creates the Cofounded contract instance\r\n  /// @dev adds up to cofounders.\r\n  ///      also adds  the deployment address as a cofounder\r\n  function Cofounded (address[] contractCofounders) public {\r\n    cofounders.push(msg.sender);\r\n    \r\n    for (uint8 x = 0; x < contractCofounders.length; x++) {\r\n      address cofounder = contractCofounders[x];\r\n\r\n      bool isValidUniqueCofounder =\r\n        cofounder != address(0) &&\r\n        cofounder != msg.sender &&\r\n        cofounderIndices[cofounder] == 0;\r\n\r\n            \r\n      // NOTE: solidity as of 0.4.20 does not have an\r\n      // undefined or null-like value\r\n      // thusly mappings return the default value of the value type\r\n      // for an unregistered key value\r\n      // an address which doesn't exist will return 0\r\n      // which is actually the index of the address of the first\r\n      // cofounder\r\n      if (isValidUniqueCofounder) {\r\n        uint256 cofounderIndex = cofounders.push(cofounder) - 1;\r\n        cofounderIndices[cofounder] = cofounderIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev get count of cofounders\r\n  function getCofounderCount () public constant returns (uint256) {\r\n    return cofounders.length;\r\n  }\r\n\r\n  /// @dev get list of cofounders\r\n  function getCofounders () public constant returns (address[]) {\r\n    return cofounders;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n\r\n  // Required methods\r\n  function transfer (address to, uint256 value) public returns (bool success);\r\n  function transferFrom (address from, address to, uint256 value) public returns (bool success);\r\n  function approve (address spender, uint256 value) public returns (bool success);\r\n  function allowance (address owner, address spender) public constant returns (uint256 remaining);\r\n  function balanceOf (address owner) public constant returns (uint256 balance);\r\n  // Events\r\n  event Transfer (address indexed from, address indexed to, uint256 value);\r\n  event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-165: Pseudo-Introspection, or standard interface detection\r\n/// @author Mish Ochu\r\ninterface ERC165 {\r\n  /// @dev true iff the interface is supported\r\n  function supportsInterface(bytes4 interfaceID) external constant returns (bool);\r\n}\r\ncontract InterfaceSignatureConstants {\r\n  bytes4 constant InterfaceSignature_ERC165 =\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n  bytes4 constant InterfaceSignature_ERC20 =\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('allowance(address,address)'));\r\n\r\n  bytes4 constant InterfaceSignature_ERC20_PlusOptions = \r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('decimals()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('allowance(address,address)'));\r\n}\r\n\r\n/// @title an original cofounder based ERC-20 compliant token\r\n/// @author Mish Ochu\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n//http://solidity.readthedocs.io/en/develop/contracts.html#arguments-for-base-constructors\r\ncontract OriginalToken is Cofounded, ERC20, ERC165, InterfaceSignatureConstants {\r\n    bool private hasExecutedCofounderDistribution;\r\n    struct Allowance {\r\n      uint256 amount;\r\n      bool    hasBeenPartiallyWithdrawn;\r\n    }\r\n\r\n    //***** Apparently Optional *****/\r\n    /// @dev returns the name of the token\r\n    string public constant name = 'Original Crypto Coin';\r\n    /// @dev returns the symbol of the token (e.g. 'OCC')\r\n    string public constant symbol = 'OCC';\r\n    /// @dev returns the number of decimals the tokens use\r\n    uint8 public constant decimals = 18;\r\n    //**********/\r\n\r\n    /// @dev  returns the total token supply\r\n    /// @note implemented as a state variable with an automatic (compiler provided) getter\r\n    ///       instead of a constant (view/readonly) function.\r\n    uint256 public totalSupply = 100000000000000000000000000000;\r\n\r\n    mapping (address => uint256) public balances;\r\n    // TODO: determine if the gas cost for handling the race condition\r\n    //       (outlined here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\r\n    //       is cheaper this way (or this way: https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol#L221-L225)\r\n    mapping (address => mapping (address => Allowance)) public allowances;\r\n\r\n  /// @dev creates the token\r\n  /// NOTE  passes tokenCofounders to base contract\r\n  /// see   Cofounded\r\n  function OriginalToken (address[] tokenCofounders,\r\n                          uint256 cofounderDistribution) Cofounded(tokenCofounders) public { \r\n\r\n    if (hasExecutedCofounderDistribution ||\r\n        cofounderDistribution == 0 || \r\n        totalSupply < cofounderDistribution) revert();\r\n\r\n    hasExecutedCofounderDistribution = true;\r\n    uint256 initialSupply = totalSupply;\r\n\r\n    // divvy up initial token supply accross cofounders\r\n    // TODO: ensure each cofounder gets an equal base distribution\r\n\r\n    for (uint8 x = 0; x < cofounders.length; x++) {\r\n      address cofounder = cofounders[x];\r\n\r\n      initialSupply -= cofounderDistribution;\r\n      // there should be some left over for the airdrop campaign\r\n      // otherwise don't create this contract\r\n      if (initialSupply < cofounderDistribution) revert();\r\n      balances[cofounder] = cofounderDistribution;\r\n    }\r\n\r\n    balances[msg.sender] += initialSupply;\r\n  }\r\n\r\n  function transfer (address to, uint256 value) public returns (bool) {\r\n    return transferBalance (msg.sender, to, value);\r\n  }\r\n\r\n  function transferFrom (address from, address to, uint256 value) public returns (bool success) {\r\n    Allowance storage allowance = allowances[from][msg.sender];\r\n    if (allowance.amount < value) revert();\r\n\r\n    allowance.hasBeenPartiallyWithdrawn = true;\r\n    allowance.amount -= value;\r\n\r\n    if (allowance.amount == 0) {\r\n      delete allowances[from][msg.sender];\r\n    }\r\n\r\n    return transferBalance(from, to, value);\r\n  }\r\n\r\n  event ApprovalDenied (address indexed owner, address indexed spender);\r\n\r\n  // TODO: test with an unintialized Allowance struct\r\n  function approve (address spender, uint256 value) public returns (bool success) {\r\n    Allowance storage allowance = allowances[msg.sender][spender];\r\n\r\n    if (value == 0) {\r\n      delete allowances[msg.sender][spender];\r\n      Approval(msg.sender, spender, value);\r\n      return true;\r\n    }\r\n\r\n    if (allowance.hasBeenPartiallyWithdrawn) {\r\n      delete allowances[msg.sender][spender];\r\n      ApprovalDenied(msg.sender, spender);\r\n      return false;\r\n    } else {\r\n      allowance.amount = value;\r\n      Approval(msg.sender, spender, value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // TODO: compare gas cost estimations between this and https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol#L39-L45\r\n  function transferBalance (address from, address to, uint256 value) private returns (bool) {\r\n    // don't burn these tokens\r\n    if (to == address(0) || from == to) revert();\r\n    // match spec and emit events on 0 value\r\n    if (value == 0) {\r\n      Transfer(msg.sender, to, value);\r\n      return true;\r\n    }\r\n\r\n    uint256 senderBalance = balances[from];\r\n    uint256 receiverBalance = balances[to];\r\n    if (senderBalance < value) revert();\r\n    senderBalance -= value;\r\n    receiverBalance += value;\r\n    // overflow check (altough one could use https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol)\r\n    if (receiverBalance < value) revert();\r\n\r\n    balances[from] = senderBalance;\r\n    balances[to] = receiverBalance;\r\n\r\n    Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n \r\n  // TODO: test with an unintialized Allowance struct\r\n  function allowance (address owner, address spender) public constant returns (uint256 remaining) {\r\n    return allowances[owner][spender].amount;\r\n  }\r\n\r\n  function balanceOf (address owner) public constant returns (uint256 balance) {\r\n    return balances[owner];\r\n  }\r\n\r\n  function supportsInterface (bytes4 interfaceID) external constant returns (bool) {\r\n    return ((interfaceID == InterfaceSignature_ERC165) ||\r\n            (interfaceID == InterfaceSignature_ERC20)  ||\r\n            (interfaceID == InterfaceSignature_ERC20_PlusOptions));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cofounders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cofounderIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCofounderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"hasBeenPartiallyWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCofounders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenCofounders\",\"type\":\"address[]\"},{\"name\":\"cofounderDistribution\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ApprovalDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OriginalToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000011c57e4d6efac237d0a510000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000a4e3ae7f92106af0c16173d85c89e1f6488b14a50000000000000000000000002378113e6c0a1dd0436c56f7e25fdcb6fd38b7bc000000000000000000000000f5dd9a84dcb05b7b201371cd7f75e9090e5068450000000000000000000000001fb72b88fd9a3205fd603d6899ced5bf582915ea0000000000000000000000000f74a326f321e2a87650b95bcf697a8c1cf8a33c000000000000000000000000beab88087012d26019de54467096525fa63128ae0000000000000000000000004f5adf9b6516b58db57330bbac75e78ea72cf817000000000000000000000000b5651dc6e84373c3f96d228e6b95aa9b081e7c8b","Library":"","SwarmSource":"bzzr://3e772ab407df884ddbc2c7a1fd8201ebc9fcff0eaf8f848b0e7dabd7341f6e90"}]}