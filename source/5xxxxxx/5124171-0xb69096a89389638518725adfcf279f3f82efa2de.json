{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns(uint256);\r\n    function transfer(address to, uint256 value) returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function allowance(address owner, address spender) constant returns(uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns(bool);\r\n    function approve(address spender, uint256 value) returns(bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            uint256 _allowance = allowed[_from][msg.sender];\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns(bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract NOLLYCOIN is BasicToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Nolly Coin\";                        //name of the token\r\n    string public symbol = \"NOLLY\";                                // symbol of the token\r\n    uint8 public decimals = 18;                                  // decimals\r\n    uint256 public totalSupply = 500000000 * 10 ** 18;             // total supply of NOLLY Tokens  \r\n\r\n    // variables\r\n    uint256 public reservedForFounders;              // fund allocated to key founder \r\n    uint256 public bountiesAllocation;                  // fund allocated for bounty\r\n    uint256 public affiliatesAllocation;                  // fund allocated to affiliates \r\n    uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\r\n    uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\r\n\r\n\r\n\r\n    // addresses\r\n    // multi sign address of founders which hold \r\n    address public founderMultiSigAddress =    0x59b645EB51B1e47e45F14A56F271030182393Efd;\r\n    address public bountiesAllocAddress = 0x6C2625A8b19c7Bfa88d1420120DE45A60dCD6e28;  //CHANGE THIS\r\n    address public affiliatesAllocAddress = 0x0f0345699Afa5EE03d2B089A5aF73C405885B592;  //CHANGE THIS\r\n    address public crowdFundAddress;                    // address of crowdfund contract   \r\n    address public owner;                               // owner of the contract\r\n    \r\n    \r\n\r\n\r\n    //events\r\n    event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\r\n\r\n    //modifiers\r\n    modifier onlyCrowdFundAddress() {\r\n        require(msg.sender == crowdFundAddress);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders() {\r\n        require(msg.sender == founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    // creation of the token contract \r\n    function NOLLYCOIN(address _crowdFundAddress) {\r\n        owner = msg.sender;\r\n        crowdFundAddress = _crowdFundAddress;\r\n\r\n\r\n        // Token Distribution         \r\n        reservedForFounders        = 97500000 * 10 ** 18;           // 97,500,000 [19.50%]\r\n        tokensAllocatedToCrowdFund = 300000000 * 10 ** 18;      // 300,000,000NOLLY [50%]\r\n        // tokensAllocatedToPreICO    = 50000000 * 10 ** 18;       // 50,000,000 [10%]\r\n        affiliatesAllocation =       25000000 * 10 ** 18;               // 25, 000, 000[5.0 %]\r\n        bountiesAllocation         = 27750000 * 10 ** 18;               // 27,750,000[5.5%] \r\n                                                \r\n\r\n\r\n        // Assigned balances to respective stakeholders\r\n        balances[founderMultiSigAddress] = reservedForFounders;\r\n        balances[affiliatesAllocAddress] = affiliatesAllocation;\r\n        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\r\n        balances[bountiesAllocAddress] = bountiesAllocation;\r\n        totalAllocatedTokens = balances[founderMultiSigAddress] + balances[affiliatesAllocAddress] + balances[bountiesAllocAddress];\r\n    }\r\n\r\n\r\n    // function to keep track of the total token allocation\r\n    function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\r\n        totalAllocatedTokens += _amount;\r\n    }\r\n\r\n    // function to change founder multisig wallet address            \r\n    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\n        founderMultiSigAddress = _newFounderMultiSigAddress;\r\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n    }\r\n\r\n\r\n    // fallback function to restrict direct sending of ether\r\n    function () {\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract NOLLYCOINCrowdFund {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    NOLLYCOIN public token;                                    // Token contract reference\r\n\r\n    //variables\r\n    uint256 public preSaleStartTime = 1514874072; //1519898430;             // 01-MARCH-18 00:10:00 UTC //CHANGE THIS    \r\n    uint256 public preSaleEndTime = 1522490430;               // 31-MARCH-18 00:10:00 UTC           //CHANGE THIS\r\n    uint256 public crowdfundStartDate = 1522576830;           // 1-APRIL-18 00:10:00 UTC      //CHANGE THIS\r\n    uint256 public crowdfundEndDate = 1525155672;             // 31-MARCH-17 00:10:00 UTC      //CHANGE THIS\r\n    uint256 public totalWeiRaised;                            // Counter to track the amount raised //CHANGE THIS\r\n    uint256 public exchangeRateForETH = 32000;                  // No. of NOLLY Tokens in 1 ETH  // CHANGE THIS \r\n    uint256 public exchangeRateForBTC = 60000;                 // No. of NOLLY Tokens in 1 BTC  //CHANGE THIS\r\n    uint256 internal tokenSoldInPresale = 0;\r\n    uint256 internal tokenSoldInCrowdsale = 0;\r\n    uint256 internal minAmount = 1 * 10 ** 17;                // Equivalent to 0.1 ETH\r\n\r\n    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\r\n\r\n\r\n    // addresses\r\n    // Founders multisig address\r\n    address public founderMultiSigAddress = 0x59b645EB51B1e47e45F14A56F271030182393Efd;   //CHANGE THIS                          \r\n    // Owner of the contract\r\n    address public owner;\r\n\r\n    enum State { PreSale, Crowdfund, Finish }\r\n\r\n    //events\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event CrowdFundClosed(uint256 _blockTimeStamp);\r\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\n\r\n    //Modifiers\r\n    modifier tokenIsDeployed() {\r\n        require(isTokenDeployed == true);\r\n        _;\r\n    }\r\n    modifier nonZeroEth() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders() {\r\n        require(msg.sender == founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublic() {\r\n        require(msg.sender != founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier inState(State state) {\r\n        require(getState() == state);\r\n        _;\r\n    }\r\n\r\n    // Constructor to initialize the local variables \r\n    function NOLLYCOINCrowdFund() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Function to change the founders multisig address \r\n    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\r\n        founderMultiSigAddress = _newFounderAddress;\r\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n    }\r\n\r\n    // Attach the token contract, can only be done once     \r\n    function setTokenAddress(address _tokenAddress) external onlyOwner nonZeroAddress(_tokenAddress) {\r\n        require(isTokenDeployed == false);\r\n        token = NOLLYCOIN(_tokenAddress);\r\n        isTokenDeployed = true;\r\n    }\r\n\r\n    // function call after crowdFundEndTime.\r\n    // It transfers the remaining tokens to remainingTokenHolder address\r\n    function endCrowdfund() onlyFounders inState(State.Finish) returns(bool) {\r\n        require(now > crowdfundEndDate);\r\n        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\r\n\r\n        if (remainingToken != 0)\r\n            token.transfer(founderMultiSigAddress, remainingToken);\r\n        CrowdFundClosed(now);\r\n        return true;\r\n    }\r\n\r\n    // Buy token function call only in duration of crowdfund active \r\n    function buyTokens(address beneficiary) \r\n    nonZeroEth \r\n    tokenIsDeployed \r\n    onlyPublic \r\n    nonZeroAddress(beneficiary) \r\n    payable \r\n    returns(bool) \r\n    {\r\n        require(msg.value >= minAmount);\r\n\r\n        if (getState() == State.PreSale) {\r\n            if (buyPreSaleTokens(beneficiary)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        } else {\r\n            require(now >= crowdfundStartDate && now <= crowdfundEndDate);\r\n            fundTransfer(msg.value);\r\n\r\n            uint256 amount = getNoOfTokens(exchangeRateForETH, msg.value);\r\n\r\n            if (token.transfer(beneficiary, amount)) {\r\n                tokenSoldInCrowdsale = tokenSoldInCrowdsale.add(amount);\r\n                token.changeTotalSupply(amount);\r\n                totalWeiRaised = totalWeiRaised.add(msg.value);\r\n                TokenPurchase(beneficiary, msg.value, amount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    // function to buy the tokens at presale \r\n    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\r\n\r\n        uint256 amount = getTokensForPreSale(exchangeRateForETH, msg.value);\r\n        fundTransfer(msg.value);\r\n\r\n        if (token.transfer(beneficiary, amount)) {\r\n            tokenSoldInPresale = tokenSoldInPresale.add(amount);\r\n            token.changeTotalSupply(amount);\r\n            totalWeiRaised = totalWeiRaised.add(msg.value);\r\n            TokenPurchase(beneficiary, msg.value, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // function to calculate the total no of tokens with bonus multiplication\r\n    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\r\n        uint256 noOfToken = _amount.mul(_exchangeRate);\r\n        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\r\n        return noOfTokenWithBonus;\r\n    }\r\n\r\n    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\r\n        uint256 noOfToken = _amount.mul(_exchangeRate);\r\n        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\r\n        if (noOfTokenWithBonus + tokenSoldInPresale > (50000000 * 10 ** 18)) { //change this to reflect current max\r\n            revert();\r\n        }\r\n        return noOfTokenWithBonus;\r\n    }\r\n\r\n    // function to transfer the funds to founders account\r\n    function fundTransfer(uint256 weiAmount) internal {\r\n        founderMultiSigAddress.transfer(weiAmount);\r\n    }\r\n\r\n\r\n    // Get functions \r\n\r\n    // function to get the current state of the crowdsale\r\n    function getState() public constant returns(State) {\r\n       if (now >= preSaleStartTime && now <= preSaleEndTime) {\r\n            return State.PreSale;\r\n        }\r\n        if (now >= crowdfundStartDate && now <= crowdfundEndDate) {\r\n            return State.Crowdfund;\r\n        } \r\n        return State.Finish;\r\n    }\r\n\r\n\r\n    // function provide the current bonus rate\r\n    function getCurrentBonusRate() internal returns(uint8) {\r\n\r\n        if (getState() == State.PreSale) {\r\n            return 30; //presale bonus rate is 33%\r\n        }\r\n        if (getState() == State.Crowdfund) {\r\n            \r\n\r\n        //  week 1: 8th of April 1523197901\r\n            if (now > crowdfundStartDate && now <= 1523197901) { \r\n                return 25;\r\n            }\r\n\r\n        //  week 2: 15th of April 1523802701\r\n            if (now > 1523197901 && now <= 1523802701) { \r\n                return 20;\r\n            }\r\n\r\n\r\n        // week 3: \r\n            if (now > 1523802701 && now <= 1524565102 ) {\r\n                return 15;\r\n\r\n            } else {\r\n\r\n                return 10;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // provides the bonus % \r\n    function currentBonus() public constant returns(uint8) {\r\n        return getCurrentBonusRate();\r\n    }\r\n\r\n    // GET functions\r\n    function getContractTimestamp() public constant returns(\r\n        uint256 _presaleStartDate,\r\n        uint256 _presaleEndDate,\r\n        uint256 _crowdsaleStartDate,\r\n        uint256 _crowdsaleEndDate)\r\n    {\r\n        return (preSaleStartTime, preSaleEndTime, crowdfundStartDate, crowdfundEndDate);\r\n    }\r\n\r\n    function getExchangeRate() public constant returns(uint256 _exchangeRateForETH, uint256 _exchangeRateForBTC) {\r\n        return (exchangeRateForETH, exchangeRateForBTC);\r\n    }\r\n\r\n    function getNoOfSoldToken() public constant returns(uint256 _tokenSoldInPresale, uint256 _tokenSoldInCrowdsale) {\r\n        return (tokenSoldInPresale, tokenSoldInCrowdsale);\r\n    }\r\n\r\n    function getWeiRaised() public constant returns(uint256 _totalWeiRaised) {\r\n        return totalWeiRaised;\r\n    }\r\n\r\n    // Crowdfund entry\r\n    // send ether to the contract address\r\n    // With at least 200 000 gas\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderMultiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountiesAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounderMultiSigAddress\",\"type\":\"address\"}],\"name\":\"changeFounderMultiSigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountiesAllocAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatesAllocAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatesAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAllocatedToCrowdFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedForFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdFundAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_foundersWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangeFoundersWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NOLLYCOIN","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000034d54bcf318ccdd1d6ba67144c9f35a3c348b470","Library":"","SwarmSource":"bzzr://476f3cd36fc27d037e25b298f1c20d2d1f7c34eec5603d3ba0b91d9290df6210"}]}