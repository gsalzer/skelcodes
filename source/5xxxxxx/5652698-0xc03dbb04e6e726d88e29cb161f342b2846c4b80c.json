{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\ncontract ItemSelling {\r\n    using SafeMath for uint256;\r\n    using ArrayUtils for uint256[];\r\n\r\n    /* Events */\r\n    event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n    event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n    event BuyBack (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _itemId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _itemId);\r\n    event Dividends(address indexed _owner, uint _dividends);\r\n\r\n    /* Items */\r\n    struct Item {\r\n        uint256 id;\r\n        address owner;\r\n        uint256 startingPrice;\r\n        uint256 prevPrice;\r\n        uint256 price;\r\n        uint256 transactions;\r\n    }\r\n\r\n    /* Players */\r\n    struct Player {\r\n        address id;\r\n        uint256 transactions;\r\n        uint256 [] ownedItems;\r\n        uint256 lastPayedDividends;\r\n        mapping (uint => TxInfo) txHistory;\r\n        uint historyIdx;\r\n    }\r\n\r\n    struct TxInfo {\r\n        address owner;\r\n        uint256 itemId; // if type == 2 than itemId contains number of items for dividens\r\n        uint256 price;  // if type == 2 than field price holds dividens amount for player\r\n        uint txType;  // 0 - sold, 1 - bougth, 2 -dividens\r\n        uint timestamp;\r\n    }\r\n\r\n    mapping(uint => TxInfo) public txBuffer;\r\n    uint private txBufferMaxSize;\r\n    uint private txIdx = 0;\r\n    uint private playerHistoryMaxSize;\r\n\r\n    mapping (uint256 => Item) private items;\r\n    uint256 [] private itemList;\r\n\r\n    mapping(address => Player) private players;\r\n    address[] private playerList;\r\n\r\n\r\n    /* Administration utility */\r\n    address private owner;\r\n    mapping (address => bool) private admins;\r\n    bool private erc721Enabled = false;\r\n    mapping (uint256 => address) private approvedOfItem;\r\n\r\n    uint256 private DIVIDEND_TRANSACTION_NUMBER = 300;\r\n    uint256 private dividendTransactionCount = 0;\r\n    uint256 private dividendsAmount = 0;\r\n    uint256 private lastDividendsAmount = 0;\r\n\r\n    /* Next price calculation table */\r\n    uint256 private increaseLimit1 = 0.05 ether;\r\n    uint256 private increaseLimit2 = 0.5 ether;\r\n    uint256 private increaseLimit3 = 2.0 ether;\r\n    uint256 private increaseLimit4 = 5.0 ether;\r\n\r\n    uint256 private fee = 6;\r\n    uint256 private fee100 = 106;\r\n\r\n    /* Contract body */\r\n    function ItemSelling() public {\r\n        owner = msg.sender;\r\n        admins[owner] = true;\r\n        txBufferMaxSize = 15;\r\n        txIdx = 0;\r\n        playerHistoryMaxSize = 15;\r\n    }\r\n\r\n    /* Modifiers */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins() {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyERC721() {\r\n        require(erc721Enabled);\r\n        _;\r\n    }\r\n\r\n    /* Owner */\r\n    function setOwner (address _owner) onlyOwner() public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /* Admins functions */\r\n    function addAdmin (address _admin) onlyOwner() public {\r\n        admins[_admin] = true;\r\n    }\r\n\r\n    function removeAdmin (address _admin) onlyOwner() public {\r\n        delete admins[_admin];\r\n    }\r\n\r\n    function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n        return admins[_admin];\r\n    }\r\n\r\n    // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\r\n    function enableERC721 () onlyOwner() public {\r\n        erc721Enabled = true;\r\n    }\r\n\r\n    function getBalance() onlyOwner view public returns (uint256 _balance) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /* Items */\r\n    function addItem(uint256 _itemId, uint256 _price, address _owner) onlyAdmins public {\r\n        require(_price > 0);\r\n        require(items[_itemId].id == 0);\r\n\r\n        Item storage item = items[_itemId];\r\n        item.id = _itemId;\r\n        item.owner = _owner;\r\n        item.startingPrice = _price;\r\n        item.prevPrice = _price;\r\n        item.price = _price;\r\n        item.transactions = 0;\r\n\r\n        itemList.push(_itemId) - 1;\r\n    }\r\n\r\n    function addItems (uint256[] _itemIds, uint256[] _prices, address _owner) onlyAdmins() public {\r\n        require(_itemIds.length == _prices.length);\r\n        for (uint256 i = 0; i < _itemIds.length; i++) {\r\n            addItem(_itemIds[i], _prices[i], _owner);\r\n        }\r\n    }\r\n\r\n    function getItemIds() view public returns (uint256[]) {\r\n        return itemList;\r\n    }\r\n\r\n    function getItemIdsPagable (uint256 _from, uint256 _pageSize) public view returns (uint256[] _items) {\r\n        uint256[] memory page = new uint256[](_pageSize);\r\n\r\n        for (uint256 i = 0; i < _pageSize; i++) {\r\n            page[i] = itemList[_from + i];\r\n        }\r\n        return page;\r\n    }\r\n\r\n    function itemExists(uint256 _itemId) view public returns (bool _exists) {\r\n        return items[_itemId].price > 0;\r\n    }\r\n\r\n    function getItem(uint256 _itemId) view public returns (uint256, address, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        Item storage item = items[_itemId];\r\n        return (item.id, item.owner, item.startingPrice, item.price, calculateNextPrice(item.price), buybackPriceOf(_itemId), item.transactions, item.prevPrice);\r\n    }\r\n\r\n    function totalItems() public view returns (uint256 _itemsNumber) {\r\n        return itemList.length;\r\n    }\r\n\r\n    function getItemsByOwner (address _owner) public view returns (uint256[] _itemsIds) {\r\n        return players[_owner].ownedItems;\r\n    }\r\n\r\n    function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n        if (_price < increaseLimit1) {\r\n            return _price.mul(200).div(100).mul(fee100).div(100);\r\n        } else if (_price < increaseLimit2) {\r\n            return _price.mul(140).div(100).mul(fee100).div(100);\r\n        } else if (_price < increaseLimit3) {\r\n            return _price.mul(125).div(100).mul(fee100).div(100);\r\n        } else if (_price < increaseLimit4) {\r\n            return _price.mul(120).div(100).mul(fee100).div(100);\r\n        } else {\r\n            return _price.mul(119).div(100).mul(fee100).div(100);\r\n        }\r\n    }\r\n\r\n    function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\r\n        if (_price < increaseLimit1) {\r\n            return _price.mul(fee).div(fee100); // 6%\r\n        } else if (_price < increaseLimit2) {\r\n            return _price.mul(fee).div(fee100); // 6%\r\n        } else if (_price < increaseLimit3) {\r\n            return _price.mul(fee).div(fee100); // 6%\r\n        } else if (_price < increaseLimit4) {\r\n            return _price.mul(fee).div(fee100); // 6%\r\n        } else {\r\n            return _price.mul(fee).div(fee100); // 6%\r\n        }\r\n    }\r\n\r\n    function buybackPriceOf(uint256 _itemId) public view returns (uint256 _buybackPrice){\r\n        uint256 price = items[_itemId].price;\r\n        uint256 startPrice = items[_itemId].startingPrice;\r\n\r\n        uint256 bp = price.div(10); // 10% = price * 10 / 100 or price / 10\r\n        uint256 sp = startPrice.mul(100).div(fee100);\r\n        return bp < sp ? sp : bp;\r\n    }\r\n\r\n    /* Players */\r\n    function createPlayerIfNeeded(address _playerId) internal {\r\n\r\n        if (players[_playerId].id == address(0)) {\r\n            Player storage player = players[_playerId];\r\n            player.id = _playerId;\r\n            player.transactions = 0;\r\n            player.ownedItems = new uint256[](0);\r\n            player.historyIdx = 0;\r\n            player.lastPayedDividends = 0;\r\n\r\n            playerList.push(_playerId) -1;\r\n        }\r\n    }\r\n\r\n    function getPlayer(address _playerId) view public returns (address, uint256, uint256, uint256, uint256) {\r\n        return (players[_playerId].id, players[_playerId].ownedItems.length, calculatePlayerValue(_playerId), players[_playerId].transactions, players[_playerId].lastPayedDividends);\r\n    }\r\n\r\n    function getPlayerIds() view public returns (address[]) {\r\n        return playerList;\r\n    }\r\n\r\n    function calculatePlayerValue(address _playerId) view public returns(uint256 _value) {\r\n        uint256 value = 0;\r\n        for(uint256 i = 0; i < players[_playerId].ownedItems.length; i++){\r\n            value += items[players[_playerId].ownedItems[i]].price;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function addPlayerTxHistory(address _playerId, uint256 _itemId, uint256 _price, uint _txType, uint _timestamp) internal {\r\n        if (!isAdmin(_playerId)){\r\n            Player storage player = players[_playerId];\r\n\r\n            player.txHistory[player.historyIdx].owner = _playerId;\r\n            player.txHistory[player.historyIdx].itemId = _itemId;\r\n            player.txHistory[player.historyIdx].price = _price;\r\n            player.txHistory[player.historyIdx].txType = _txType;\r\n            player.txHistory[player.historyIdx].timestamp = _timestamp;\r\n            player.historyIdx = player.historyIdx < playerHistoryMaxSize - 1 ? player.historyIdx + 1 : 0;\r\n        }\r\n    }\r\n\r\n    // history\r\n    function playerTransactionList(address _playerId)\r\n        view\r\n        public\r\n        returns (uint256[] _itemIds, uint256[] _prices, uint[] _types, uint[] _ts )\r\n    {\r\n      //  _owners  = new address[](playerHistoryMaxSize);\r\n        _itemIds = new uint256[](playerHistoryMaxSize);\r\n        _prices  = new uint256[](playerHistoryMaxSize);\r\n        _types   = new uint256[](playerHistoryMaxSize);\r\n        _ts      = new uint[](playerHistoryMaxSize);\r\n\r\n        uint offset = playerHistoryMaxSize - 1;\r\n        if (players[_playerId].historyIdx > 0) {offset = players[_playerId].historyIdx - 1;}\r\n        for (uint i = 0; i < playerHistoryMaxSize; i++){\r\n        //    _owners[i]  = txBuffer[offset].owner;\r\n            _itemIds[i] = players[_playerId].txHistory[offset].itemId;\r\n            _prices[i]  = players[_playerId].txHistory[offset].price;\r\n            _types[i]   = players[_playerId].txHistory[offset].txType;\r\n            _ts[i]      = players[_playerId].txHistory[offset].timestamp;\r\n\r\n            offset = offset > 0 ?  offset - 1 : playerHistoryMaxSize - 1;\r\n        }\r\n    }\r\n\r\n    /* Buy */\r\n    function buy (uint256 _itemId) payable public {\r\n        Item storage item = items[_itemId];\r\n\r\n        require(item.price > 0);\r\n        require(item.owner != address(0));\r\n        require(msg.value >= item.price);\r\n        require(item.owner != msg.sender);\r\n        require(!isContract(msg.sender));\r\n        require(msg.sender != address(0));\r\n\r\n        address oldOwner = item.owner;\r\n        address newOwner = msg.sender;\r\n        uint256 price = item.price;\r\n        uint256 excess = msg.value.sub(price);\r\n\r\n        createPlayerIfNeeded(newOwner);\r\n\r\n        _transfer(oldOwner, newOwner, _itemId);\r\n        addTxInBuffer(newOwner, _itemId, price, 1, now);\r\n        addPlayerTxHistory(newOwner, _itemId, price, 1, now);\r\n        addPlayerTxHistory(oldOwner, _itemId, price, 0, now);\r\n        item.prevPrice = price;\r\n        item.price = calculateNextPrice(price);\r\n        item.transactions += 1;\r\n\r\n        players[newOwner].transactions += 1;\r\n\r\n        emit Bought(_itemId, newOwner, price);\r\n        emit Sold(_itemId, oldOwner, price);\r\n\r\n        // Devevloper's cut which is left in contract and accesed by\r\n        // `withdrawAll` and `withdrawAmountTo` methods.\r\n        uint256 devCut = calculateDevCut(price);\r\n\r\n        // Transfer payment to old owner minus the developer's cut.\r\n        if (!isAdmin(oldOwner)){\r\n            oldOwner.transfer(price.sub(devCut));\r\n        }\r\n\r\n        if (excess > 0) {\r\n            newOwner.transfer(excess);\r\n        }\r\n\r\n        proceedDividends(devCut);\r\n        handleDividends();\r\n    }\r\n\r\n    function buyback(uint256 _itemId) public {\r\n        Item storage item = items[_itemId];\r\n\r\n        require(item.price > 0);\r\n        require(item.owner != address(0));\r\n        require(item.owner == msg.sender);\r\n        require(!isContract(msg.sender));\r\n        require(msg.sender != address(0));\r\n\r\n        uint256 bprice = buybackPriceOf(_itemId);\r\n\r\n        require(address(this).balance >= bprice);\r\n\r\n        address oldOwner = msg.sender;\r\n        address newOwner = owner;\r\n\r\n        _transfer(oldOwner, newOwner, _itemId);\r\n        addTxInBuffer(oldOwner, _itemId, bprice, 0, now);\r\n        addPlayerTxHistory(oldOwner, _itemId, bprice, 0, now);\r\n\r\n        item.price = calculateNextPrice(bprice);\r\n        oldOwner.transfer(bprice);\r\n        emit Sold(_itemId, oldOwner, bprice);\r\n        emit BuyBack(_itemId, oldOwner, bprice);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _itemId) internal {\r\n\r\n        require(itemExists(_itemId));\r\n        require(items[_itemId].owner == _from);\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n\r\n        items[_itemId].owner = _to;\r\n     //   approvedOfItem[_itemId] = 0;\r\n\r\n        if (!isAdmin(_to)) {\r\n            players[_to].ownedItems.push(_itemId) -1;\r\n        }\r\n\r\n        if (!isAdmin(_from)) {\r\n            uint256 idx = players[_from].ownedItems.indexOf(_itemId);\r\n            players[_from].ownedItems.remove(idx);\r\n        }\r\n\r\n        emit Transfer(_from, _to, _itemId);\r\n    }\r\n\r\n    /* Dividens */\r\n    function getLastDividendsAmount() view public returns (uint256 _dividends) {\r\n      return lastDividendsAmount;\r\n    }\r\n\r\n    function setDividendTransactionNumber(uint256 _txNumber) onlyAdmins public {\r\n        DIVIDEND_TRANSACTION_NUMBER = _txNumber;\r\n    }\r\n\r\n    function getDividendTransactionLeft () view public returns (uint256 _txNumber) {\r\n      return DIVIDEND_TRANSACTION_NUMBER - dividendTransactionCount;\r\n    }\r\n\r\n    function getTotalVolume() view public returns (uint256 _volume) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < itemList.length; i++){\r\n            if (!isAdmin(items[itemList[i]].owner)) {\r\n                sum += items[itemList[i]].price;\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function proceedDividends(uint256 _devCut) internal {\r\n        dividendTransactionCount += 1;\r\n        dividendsAmount += _devCut.div(5); // *0.2\r\n    }\r\n\r\n    function handleDividends() internal {\r\n        if (dividendTransactionCount < DIVIDEND_TRANSACTION_NUMBER ) return;\r\n\r\n        lastDividendsAmount = dividendsAmount;\r\n        dividendTransactionCount = 0;\r\n        dividendsAmount = 0;\r\n\r\n        uint256 totalCurrentVolume = getTotalVolume();\r\n        uint256 userVolume = 0;\r\n        uint256 userDividens = 0;\r\n\r\n        for (uint256 i = 0; i < playerList.length; i++) {\r\n            userVolume = calculatePlayerValue(playerList[i]);\r\n            players[playerList[i]].lastPayedDividends = 0;\r\n            if (userVolume > 0) {\r\n                userDividens = userVolume.mul(lastDividendsAmount).div(totalCurrentVolume);\r\n                players[playerList[i]].lastPayedDividends = userDividens;\r\n\r\n                addPlayerTxHistory(playerList[i], players[playerList[i]].ownedItems.length, userDividens, 2, now);\r\n                emit Dividends(playerList[i], userDividens);\r\n\r\n                playerList[i].transfer(userDividens);\r\n            }\r\n            userVolume = 0;\r\n            userDividens = 0;\r\n        }\r\n    }\r\n\r\n    /* Withdraw */\r\n    function hardWithdrawAll() onlyOwner public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) onlyOwner public {\r\n        require(_amount <= address(this).balance);\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    function calculateAllBuyBackSum() view public returns (uint256 _buyBackSum) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < itemList.length; i++) {\r\n            if (!isAdmin(items[itemList[i]].owner)) {\r\n                sum += buybackPriceOf(itemList[i]);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function softWithdraw() onlyOwner public {\r\n        uint256 buyBackSum = calculateAllBuyBackSum();\r\n        uint256 requiredFunds = dividendsAmount + buyBackSum;\r\n\r\n        uint256 withdrawal = address(this).balance - requiredFunds;\r\n        require(withdrawal > 0);\r\n\r\n        owner.transfer(withdrawal);\r\n    }\r\n\r\n    /* ERC721 */\r\n    function approvedFor(uint256 _itemId) public view returns (address _approved) {\r\n        return approvedOfItem[_itemId];\r\n    }\r\n\r\n    function approve(address _to, uint256 _itemId) onlyERC721() public {\r\n        require(msg.sender != _to);\r\n        require(itemExists(_itemId));\r\n        require(items[_itemId].owner == msg.sender);\r\n\r\n        if (_to == 0) {\r\n            if (approvedOfItem[_itemId] != 0) {\r\n                delete approvedOfItem[_itemId];\r\n                emit Approval(msg.sender, 0, _itemId);\r\n            }\r\n        } else {\r\n            approvedOfItem[_itemId] = _to;\r\n            emit Approval(msg.sender, _to, _itemId);\r\n        }\r\n    }\r\n\r\n    /* Transferring a country to another owner will entitle the new owner the profits from `buy` */\r\n    function transfer(address _to, uint256 _itemId) onlyERC721() public {\r\n        require(msg.sender == items[_itemId].owner);\r\n        createPlayerIfNeeded(_to);\r\n        _transfer(msg.sender, _to, _itemId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _itemId) onlyERC721() public {\r\n        require(approvedFor(_itemId) == msg.sender);\r\n        createPlayerIfNeeded(_to);\r\n        _transfer(_from, _to, _itemId);\r\n    }\r\n\r\n    /* transactions */\r\n\r\n    function addTxInBuffer(address _owner, uint256 _itemId, uint256 _price, uint _txType, uint _timestamp) internal {\r\n        txBuffer[txIdx].owner = _owner;\r\n        txBuffer[txIdx].itemId = _itemId;\r\n        txBuffer[txIdx].price = _price;\r\n        txBuffer[txIdx].txType = _txType;\r\n        txBuffer[txIdx].timestamp = _timestamp;\r\n        txIdx = txIdx  < txBufferMaxSize - 1 ? txIdx + 1 : 0;\r\n    }\r\n\r\n    function transactionList()\r\n        view\r\n        public\r\n        returns (address[] _owners, uint256[] _itemIds, uint256[] _prices, uint[] _types, uint[] _ts )\r\n    {\r\n        _owners  = new address[](txBufferMaxSize);\r\n        _itemIds = new uint256[](txBufferMaxSize);\r\n        _prices  = new uint256[](txBufferMaxSize);\r\n        _types   = new uint256[](txBufferMaxSize);\r\n        _ts      = new uint[](txBufferMaxSize);\r\n\r\n        uint offset = txBufferMaxSize - 1;\r\n        if (txIdx > 0) { offset = txIdx - 1;}\r\n        for (uint i = 0; i < txBufferMaxSize; i++){\r\n            _owners[i]  = txBuffer[offset].owner;\r\n            _itemIds[i] = txBuffer[offset].itemId;\r\n            _prices[i]  = txBuffer[offset].price;\r\n            _types[i]   = txBuffer[offset].txType;\r\n            _ts[i]      = txBuffer[offset].timestamp;\r\n\r\n            offset = offset > 0 ?  offset - 1 : txBufferMaxSize - 1;\r\n        }\r\n    }\r\n\r\n\r\n    /* Util */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) } // solium-disable-line\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary ArrayUtils {\r\n\r\n    function remove(uint256[] storage self, uint256 _removeIdx) internal {\r\n        if (_removeIdx < 0 || _removeIdx >= self.length) return;\r\n\r\n        for (uint i = _removeIdx; i < self.length - 1; i++){\r\n            self[i] = self[i + 1];\r\n        }\r\n        self.length--;\r\n    }\r\n\r\n    function indexOf(uint[] storage self, uint value) internal view returns (uint) {\r\n        for (uint i = 0; i < self.length; i++){\r\n            if (self[i] == value) return i;\r\n        }\r\n        return uint(-1);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_txNumber\",\"type\":\"uint256\"}],\"name\":\"setDividendTransactionNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"address\"}],\"name\":\"playerTransactionList\",\"outputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_types\",\"type\":\"uint256[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVolume\",\"outputs\":[{\"name\":\"_volume\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"softWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalItems\",\"outputs\":[{\"name\":\"_itemsNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getItemsByOwner\",\"outputs\":[{\"name\":\"_itemsIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"address\"}],\"name\":\"calculatePlayerValue\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionList\",\"outputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_types\",\"type\":\"uint256[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buybackPriceOf\",\"outputs\":[{\"name\":\"_buybackPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"itemExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hardWithdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastDividendsAmount\",\"outputs\":[{\"name\":\"_dividends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txBuffer\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"itemId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"txType\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_pageSize\",\"type\":\"uint256\"}],\"name\":\"getItemIdsPagable\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateAllBuyBackSum\",\"outputs\":[{\"name\":\"_buyBackSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getItemIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDividendTransactionLeft\",\"outputs\":[{\"name\":\"_txNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_dividends\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"}]","ContractName":"ItemSelling","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e96eb9c020d8acb92e366a46022ab7cd8e92b02af78f110f5976e8e5ca279e89"}]}