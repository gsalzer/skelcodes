{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address internal owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public returns (bool) {\r\n        require(newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Unlocked }\r\n\r\n    mapping (address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault(address _wallet) public {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state != State.Refunding);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function unlock() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Unlocked;\r\n    }\r\n\r\n    function withdraw(address beneficiary, uint256 amount) onlyOwner public {\r\n        require(beneficiary != 0x0);\r\n        require(state == State.Unlocked);\r\n\r\n        beneficiary.transfer(amount);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\ninterface MintableToken {\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function transferOwnership(address newOwner) external returns (bool);\r\n}\r\n\r\n/**\r\n    This contract will handle the KYC contribution caps and the AML whitelist.\r\n    The crowdsale contract checks this whitelist everytime someone tries to buy tokens.\r\n*/\r\ncontract BitNauticWhitelist is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public usdPerEth;\r\n\r\n    function BitNauticWhitelist(uint256 _usdPerEth) public {\r\n        usdPerEth = _usdPerEth;\r\n    }\r\n\r\n    mapping(address => bool) public AMLWhitelisted;\r\n    mapping(address => uint256) public contributionCap;\r\n\r\n    /**\r\n     * @dev sets the KYC contribution cap for one address\r\n     * @param addr address\r\n     * @param level uint8\r\n     * @return true if the operation was successful\r\n     */\r\n    function setKYCLevel(address addr, uint8 level) onlyOwner public returns (bool) {\r\n        if (level >= 3) {\r\n            contributionCap[addr] = 50000 ether; // crowdsale hard cap\r\n        } else if (level == 2) {\r\n            contributionCap[addr] = SafeMath.div(500000 * 10 ** 18, usdPerEth); // KYC Tier 2 - 500k USD\r\n        } else if (level == 1) {\r\n            contributionCap[addr] = SafeMath.div(3000 * 10 ** 18, usdPerEth); // KYC Tier 1 - 3k USD\r\n        } else {\r\n            contributionCap[addr] = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setKYCLevelsBulk(address[] addrs, uint8[] levels) onlyOwner external returns (bool success) {\r\n        require(addrs.length == levels.length);\r\n\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            assert(setKYCLevel(addrs[i], levels[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev adds the specified address to the AML whitelist\r\n     * @param addr address\r\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n     */\r\n    function setAMLWhitelisted(address addr, bool whitelisted) onlyOwner public returns (bool) {\r\n        AMLWhitelisted[addr] = whitelisted;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setAMLWhitelistedBulk(address[] addrs, bool[] whitelisted) onlyOwner external returns (bool) {\r\n        require(addrs.length == whitelisted.length);\r\n\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            assert(setAMLWhitelisted(addrs[i], whitelisted[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract NewBitNauticCrowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    uint256 public ICOStartTime = 1531267200; // 11 Jul 2018 00:00 GMT\r\n    uint256 public ICOEndTime = 1537056000; // 16 Sep 2018 00:00 GMT\r\n\r\n    uint256 public constant tokenBaseRate = 500; // 1 ETH = 500 BTNT\r\n\r\n    bool public manualBonusActive = false;\r\n    uint256 public manualBonus = 0;\r\n\r\n    uint256 public constant crowdsaleSupply = 35000000 * 10 ** 18;\r\n    uint256 public tokensSold = 0;\r\n\r\n    uint256 public constant softCap = 2500000 * 10 ** 18;\r\n\r\n    uint256 public teamSupply =     3000000 * 10 ** 18; // 6% of token cap\r\n    uint256 public bountySupply =   2500000 * 10 ** 18; // 5% of token cap\r\n    uint256 public reserveSupply =  5000000 * 10 ** 18; // 10% of token cap\r\n    uint256 public advisorSupply =  2500000 * 10 ** 18; // 5% of token cap\r\n    uint256 public founderSupply =  2000000 * 10 ** 18; // 4% of token cap\r\n\r\n    // amount of tokens each address will receive at the end of the crowdsale\r\n    mapping (address => uint256) public creditOf;\r\n\r\n    // amount of ether invested by each address\r\n    mapping (address => uint256) public weiInvestedBy;\r\n\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault private vault;\r\n\r\n    MintableToken public token;\r\n    BitNauticWhitelist public whitelist;\r\n\r\n    constructor(MintableToken _token, BitNauticWhitelist _whitelist, address _beneficiary) public {\r\n        token = _token;\r\n        whitelist = _whitelist;\r\n        vault = new RefundVault(_beneficiary);\r\n    }\r\n\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address beneficiary) whenNotPaused public payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        // checks if the ether amount invested by the buyer is lower than his contribution cap\r\n        require(SafeMath.add(weiInvestedBy[msg.sender], msg.value) <= whitelist.contributionCap(msg.sender));\r\n\r\n        // compute the amount of tokens given the baseRate\r\n        uint256 tokens = SafeMath.mul(msg.value, tokenBaseRate);\r\n        // add the bonus tokens depending on current time\r\n        tokens = tokens.add(SafeMath.mul(tokens, getCurrentBonus()).div(1000));\r\n\r\n        // check hardcap\r\n        require(SafeMath.add(tokensSold, tokens) <= crowdsaleSupply);\r\n\r\n        // update total token sold counter\r\n        tokensSold = SafeMath.add(tokensSold, tokens);\r\n\r\n        // keep track of the token credit and ether invested by the buyer\r\n        creditOf[beneficiary] = creditOf[beneficiary].add(tokens);\r\n        weiInvestedBy[msg.sender] = SafeMath.add(weiInvestedBy[msg.sender], msg.value);\r\n\r\n        emit TokenPurchase(msg.sender, beneficiary, msg.value, tokens);\r\n\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    function privateSale(address beneficiary, uint256 tokenAmount) onlyOwner public {\r\n        require(beneficiary != 0x0);\r\n        require(SafeMath.add(tokensSold, tokenAmount) <= crowdsaleSupply); // check hardcap\r\n\r\n        tokensSold = SafeMath.add(tokensSold, tokenAmount);\r\n\r\n        assert(token.mint(beneficiary, tokenAmount));\r\n    }\r\n\r\n    // for payments in other currencies\r\n    function offchainSale(address beneficiary, uint256 tokenAmount) onlyOwner public {\r\n        require(beneficiary != 0x0);\r\n        require(SafeMath.add(tokensSold, tokenAmount) <= crowdsaleSupply); // check hardcap\r\n\r\n        tokensSold = SafeMath.add(tokensSold, tokenAmount);\r\n\r\n        // keep track of the token credit of the buyer\r\n        creditOf[beneficiary] = creditOf[beneficiary].add(tokenAmount);\r\n\r\n        emit TokenPurchase(beneficiary, beneficiary, 0, tokenAmount);\r\n    }\r\n\r\n    // this function can be called by the contributor to claim his BTNT tokens at the end of the ICO\r\n    function claimBitNauticTokens() public returns (bool) {\r\n        return grantContributorTokens(msg.sender);\r\n    }\r\n\r\n    // if the ICO is finished and the goal has been reached, this function will be used to mint and transfer BTNT tokens to each contributor\r\n    function grantContributorTokens(address contributor) public returns (bool) {\r\n        require(creditOf[contributor] > 0);\r\n        require(whitelist.AMLWhitelisted(contributor));\r\n        require(now > ICOEndTime && tokensSold >= softCap);\r\n\r\n        assert(token.mint(contributor, creditOf[contributor]));\r\n        creditOf[contributor] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    // returns the token sale bonus permille depending on the current time\r\n    function getCurrentBonus() public view returns (uint256) {\r\n        if (manualBonusActive) return manualBonus;\r\n\r\n        return Math.min(340, Math.max(100, (340 - (now - ICOStartTime) / (60 * 60 * 24) * 4)));\r\n    }\r\n\r\n    function setManualBonus(uint256 newBonus, bool isActive) onlyOwner public returns (bool) {\r\n        manualBonus = newBonus;\r\n        manualBonusActive = isActive;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setICOEndTime(uint256 newEndTime) onlyOwner public returns (bool) {\r\n        ICOEndTime = newEndTime;\r\n\r\n        return true;\r\n    }\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        bool duringICO = ICOStartTime <= now && now <= ICOEndTime;\r\n        bool minimumContribution = msg.value >= 0.05 ether;\r\n        return duringICO && minimumContribution;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        return now > ICOEndTime;\r\n    }\r\n\r\n    function unlockVault() onlyOwner public {\r\n        if (tokensSold >= softCap) {\r\n            vault.unlock();\r\n        }\r\n    }\r\n\r\n    function withdraw(address beneficiary, uint256 amount) onlyOwner public {\r\n        vault.withdraw(beneficiary, amount);\r\n    }\r\n\r\n    bool isFinalized = false;\r\n    function finalizeCrowdsale() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(now > ICOEndTime);\r\n\r\n        if (tokensSold < softCap) {\r\n            vault.enableRefunds();\r\n        }\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(tokensSold < softCap);\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    function transferTokenOwnership(address newTokenOwner) onlyOwner public returns (bool) {\r\n        return token.transferOwnership(newTokenOwner);\r\n    }\r\n\r\n    function grantBountyTokens(address beneficiary) onlyOwner public {\r\n        require(bountySupply > 0);\r\n\r\n        token.mint(beneficiary, bountySupply);\r\n        bountySupply = 0;\r\n    }\r\n\r\n    function grantReserveTokens(address beneficiary) onlyOwner public {\r\n        require(reserveSupply > 0);\r\n\r\n        token.mint(beneficiary, reserveSupply);\r\n        reserveSupply = 0;\r\n    }\r\n\r\n    function grantAdvisorsTokens(address beneficiary) onlyOwner public {\r\n        require(advisorSupply > 0);\r\n\r\n        token.mint(beneficiary, advisorSupply);\r\n        advisorSupply = 0;\r\n    }\r\n\r\n    function grantFoundersTokens(address beneficiary) onlyOwner public {\r\n        require(founderSupply > 0);\r\n\r\n        token.mint(beneficiary, founderSupply);\r\n        founderSupply = 0;\r\n    }\r\n\r\n    function grantTeamTokens(address beneficiary) onlyOwner public {\r\n        require(teamSupply > 0);\r\n\r\n        token.mint(beneficiary, teamSupply);\r\n        teamSupply = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantAdvisorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"setICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonus\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setManualBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manualBonusActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantFoundersTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"grantContributorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"offchainSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manualBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiInvestedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBitNauticTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"privateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NewBitNauticCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047010bfcdebde5c6f0cb3426cee269a96f7ac6ce00000000000000000000000019fefe079d1035ca7ca9fcc058ba44542f5393e4000000000000000000000000a23c85f0cd4a21a738bd8fa6e509b16dea5a5ea9","Library":"","SwarmSource":"bzzr://509d6346181a1029931c325336e5a07dcf17d35ea252e28da4c4323482659dc8"}]}