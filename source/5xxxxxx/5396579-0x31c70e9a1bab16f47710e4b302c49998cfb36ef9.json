{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/*\r\n\r\n  Sketches:\r\n  - can be created\r\n  - can be traded: you make a bid, the other party can accept or you can withdraw the bid\r\n  - can not be destroyed\r\n\r\n*/\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SketchMarket is Ownable {\r\n  // ERC-20 compatibility {\r\n  string public standard = \"CryptoSketches\";\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  // }\r\n\r\n  // Sketch storage {\r\n  mapping(uint256 => string)  public sketchIndexToName;\r\n  mapping(uint256 => string)  public sketchIndexToData;\r\n  mapping(uint256 => address) public sketchIndexToHolder;\r\n  mapping(uint256 => address) public sketchIndexToAuthor;\r\n  mapping(uint256 => uint8)   public sketchIndexToOwnerFlag;\r\n\r\n  mapping(address => uint256) public sketchAuthorCount;\r\n\r\n  event SketchCreated(address indexed author, uint256 indexed sketchIndex);\r\n  // }\r\n\r\n  // Sketch trading {\r\n\r\n  // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n  // Values 0-10,000 map to 0%-100%\r\n  uint256 public ownerCut;\r\n\r\n  // Amount owner takes on each submission, measured in Wei.\r\n  uint256 public listingFeeInWei;\r\n\r\n  mapping (uint256 => Offer) public sketchIndexToOffer;\r\n  mapping (uint256 => Bid) public sketchIndexToHighestBid;\r\n  mapping (address => uint256) public accountToWithdrawableValue;\r\n\r\n  event SketchTransfer(uint256 indexed sketchIndex, address indexed fromAddress, address indexed toAddress);\r\n  event SketchOffered(uint256 indexed sketchIndex, uint256 minValue, address indexed toAddress);\r\n  event SketchBidEntered(uint256 indexed sketchIndex, uint256 value, address indexed fromAddress);\r\n  event SketchBidWithdrawn(uint256 indexed sketchIndex, uint256 value, address indexed fromAddress);\r\n  event SketchBought(uint256 indexed sketchIndex, uint256 value, address indexed fromAddress, address indexed toAddress);\r\n  event SketchNoLongerForSale(uint256 indexed sketchIndex);\r\n\r\n  struct Offer {\r\n    bool isForSale;\r\n    uint256 sketchIndex;\r\n    address seller;\r\n    uint256 minValue;   // ETH\r\n    address onlySellTo; // require a specific seller address\r\n  }\r\n\r\n  struct Bid {\r\n    bool hasBid;\r\n    uint256 sketchIndex;\r\n    address bidder;\r\n    uint256 value;\r\n  }\r\n  // }\r\n\r\n  // -- Constructor (see also: Ownable)\r\n\r\n  function SketchMarket() public payable {\r\n    // ERC-20 token\r\n    totalSupply = 0;\r\n    name = \"CRYPTOSKETCHES\";\r\n    symbol = \"SÌˆ\";\r\n    decimals = 0; // whole number; number of sketches owned\r\n\r\n    // Trading parameters\r\n    ownerCut = 375; // 3.75% cut to auctioneer\r\n    listingFeeInWei = 5000000000000000; // 0.005 ETH, to discourage spam\r\n  }\r\n\r\n  function setOwnerCut(uint256 _ownerCut) external onlyOwner {\r\n    require(_ownerCut == uint256(uint16(_ownerCut)));\r\n    require(_ownerCut <= 10000);\r\n    ownerCut = _ownerCut;\r\n  }\r\n\r\n  function setListingFeeInWei(uint256 _listingFeeInWei) external onlyOwner {\r\n    require(_listingFeeInWei == uint256(uint128(_listingFeeInWei))); // length check\r\n    listingFeeInWei = _listingFeeInWei;\r\n  }\r\n\r\n  // -- Creation and fetching methods\r\n\r\n  function createSketch(string _name, string _data) external payable {\r\n    require(msg.value == listingFeeInWei);\r\n    require(bytes(_name).length < 256);     // limit name byte size to 255\r\n    require(bytes(_data).length < 1048576); // limit drawing byte size to 1,048,576\r\n\r\n    accountToWithdrawableValue[owner] += msg.value; // auctioneer gets paid\r\n\r\n    sketchIndexToHolder[totalSupply] = msg.sender;\r\n    sketchIndexToAuthor[totalSupply] = msg.sender;\r\n    sketchAuthorCount[msg.sender]++;\r\n\r\n    sketchIndexToName[totalSupply] = _name;\r\n    sketchIndexToData[totalSupply] = _data;\r\n\r\n    balanceOf[msg.sender]++;\r\n\r\n    SketchCreated(msg.sender, totalSupply);\r\n\r\n    totalSupply++;\r\n  }\r\n\r\n  function setOwnerFlag(uint256 index, uint8 _ownerFlag) external onlyOwner {\r\n    sketchIndexToOwnerFlag[index] = _ownerFlag;\r\n  }\r\n\r\n  function getSketch(uint256 index) external view returns (string _name, string _data, address _holder, address _author, uint8 _ownerFlag, uint256 _highestBidValue, uint256 _offerMinValue) {\r\n    require(totalSupply != 0);\r\n    require(index < totalSupply);\r\n\r\n    _name = sketchIndexToName[index];\r\n    _data = sketchIndexToData[index];\r\n    _holder = sketchIndexToHolder[index];\r\n    _author = sketchIndexToAuthor[index];\r\n    _ownerFlag = sketchIndexToOwnerFlag[index];\r\n    _highestBidValue = sketchIndexToHighestBid[index].value;\r\n    _offerMinValue = sketchIndexToOffer[index].minValue;\r\n  }\r\n\r\n  function getBidCountForSketchesWithHolder(address _holder) external view returns (uint256) {\r\n    uint256 count = balanceOf[_holder];\r\n\r\n    if (count == 0) {\r\n      return 0;\r\n    } else {\r\n      uint256 result = 0;\r\n      uint256 totalCount = totalSupply;\r\n      uint256 sketchIndex;\r\n\r\n      for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n        if ((sketchIndexToHolder[sketchIndex] == _holder) && sketchIndexToHighestBid[sketchIndex].hasBid) {\r\n          result++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function getSketchesOnOffer() external view returns (uint256[]) {\r\n    if (totalSupply == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256 count = 0;\r\n    uint256 totalCount = totalSupply;\r\n    uint256 sketchIndex;\r\n\r\n    for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n      if (sketchIndexToOffer[sketchIndex].isForSale) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    if (count == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256[] memory result = new uint256[](count);\r\n    uint256 resultIndex = 0;\r\n\r\n    for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n      if (sketchIndexToOffer[sketchIndex].isForSale) {\r\n        result[resultIndex] = sketchIndex;\r\n        resultIndex++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function getSketchesOnOfferWithHolder(address _holder) external view returns (uint256[]) {\r\n    if (totalSupply == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256 count = 0;\r\n    uint256 totalCount = totalSupply;\r\n    uint256 sketchIndex;\r\n\r\n    for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n      if (sketchIndexToOffer[sketchIndex].isForSale && (sketchIndexToHolder[sketchIndex] == _holder)) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    if (count == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256[] memory result = new uint256[](count);\r\n    uint256 resultIndex = 0;\r\n\r\n    for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n      if (sketchIndexToOffer[sketchIndex].isForSale && (sketchIndexToHolder[sketchIndex] == _holder)) {\r\n        result[resultIndex] = sketchIndex;\r\n        resultIndex++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function getSketchesWithHolder(address _holder) external view returns (uint256[]) {\r\n    uint256 count = balanceOf[_holder];\r\n\r\n    if (count == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](count);\r\n      uint256 totalCount = totalSupply;\r\n      uint256 resultIndex = 0;\r\n      uint256 sketchIndex;\r\n\r\n      for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n        if (sketchIndexToHolder[sketchIndex] == _holder) {\r\n          result[resultIndex] = sketchIndex;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function getSketchesWithAuthor(address _author) external view returns (uint256[]) {\r\n    uint256 count = sketchAuthorCount[_author];\r\n\r\n    if (count == 0) {\r\n      return new uint256[](0);      \r\n    } else {\r\n      uint256[] memory result = new uint256[](count);\r\n      uint256 totalCount = totalSupply;\r\n      uint256 resultIndex = 0;\r\n      uint256 sketchIndex;\r\n\r\n      for (sketchIndex = 0; sketchIndex <= totalCount; sketchIndex++) {\r\n        if (sketchIndexToAuthor[sketchIndex] == _author) {\r\n          result[resultIndex] = sketchIndex;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  // -- Trading methods\r\n\r\n  modifier onlyHolderOf(uint256 sketchIndex) {\r\n    require(totalSupply != 0);\r\n    require(sketchIndex < totalSupply);\r\n    require(sketchIndexToHolder[sketchIndex] == msg.sender);\r\n    _;\r\n }\r\n\r\n  // Transfer holdership without requiring payment\r\n  function transferSketch(address to, uint256 sketchIndex) external onlyHolderOf(sketchIndex) {\r\n    require(to != address(0));\r\n    require(balanceOf[msg.sender] > 0);\r\n\r\n    if (sketchIndexToOffer[sketchIndex].isForSale) {\r\n      sketchNoLongerForSale(sketchIndex); // remove the offer\r\n    }\r\n\r\n    sketchIndexToHolder[sketchIndex] = to;\r\n    balanceOf[msg.sender]--;\r\n    balanceOf[to]++;\r\n\r\n    Transfer(msg.sender, to, 1); // ERC-20\r\n    SketchTransfer(sketchIndex, msg.sender, to);\r\n\r\n    // If the recipient had bid for the Sketch, remove the bid and make it possible to refund its value\r\n    Bid storage bid = sketchIndexToHighestBid[sketchIndex];\r\n    if (bid.bidder == to) {\r\n        accountToWithdrawableValue[to] += bid.value;\r\n        sketchIndexToHighestBid[sketchIndex] = Bid(false, sketchIndex, 0x0, 0);\r\n    }\r\n  }\r\n\r\n  // Withdraw Sketch from sale (NOTE: does not cancel bids, since bids must be withdrawn manually by bidders)\r\n  function sketchNoLongerForSale(uint256 _sketchIndex) public onlyHolderOf(_sketchIndex) {\r\n    sketchIndexToOffer[_sketchIndex] = Offer(false, _sketchIndex, msg.sender, 0, 0x0);\r\n    SketchNoLongerForSale(_sketchIndex);\r\n  }\r\n\r\n  // Place a Sketch up for sale, to any buyer\r\n  function offerSketchForSale(uint256 _sketchIndex, uint256 _minSalePriceInWei) public onlyHolderOf(_sketchIndex) {\r\n    sketchIndexToOffer[_sketchIndex] = Offer(true, _sketchIndex, msg.sender, _minSalePriceInWei, 0x0);\r\n    SketchOffered(_sketchIndex, _minSalePriceInWei, 0x0);\r\n  }\r\n\r\n  // Place a Sketch up for sale, but only to a specific buyer\r\n  function offerSketchForSaleToAddress(uint256 _sketchIndex, uint256 _minSalePriceInWei, address _toAddress) public onlyHolderOf(_sketchIndex) {\r\n    require(_toAddress != address(0));\r\n    require(_toAddress != msg.sender);\r\n\r\n    sketchIndexToOffer[_sketchIndex] = Offer(true, _sketchIndex, msg.sender, _minSalePriceInWei, _toAddress);\r\n    SketchOffered(_sketchIndex, _minSalePriceInWei, _toAddress);\r\n  }\r\n\r\n  // Accept a bid for a Sketch that you own, receiving the amount for withdrawal at any time - note minPrice safeguard!\r\n  function acceptBidForSketch(uint256 sketchIndex, uint256 minPrice) public onlyHolderOf(sketchIndex) {\r\n    address seller = msg.sender;    \r\n    require(balanceOf[seller] > 0);\r\n\r\n    Bid storage bid = sketchIndexToHighestBid[sketchIndex];\r\n    uint256 price = bid.value;\r\n    address bidder = bid.bidder;\r\n\r\n    require(price > 0);\r\n    require(price == uint256(uint128(price))); // length check for computeCut(...)\r\n    require(minPrice == uint256(uint128(minPrice))); // length check for computeCut(...)\r\n    require(price >= minPrice); // you may be accepting a different bid than you think, but its value will be at least as high\r\n\r\n    sketchIndexToHolder[sketchIndex] = bidder; // transfer actual holdership!\r\n    balanceOf[seller]--; // update balances\r\n    balanceOf[bidder]++;\r\n    Transfer(seller, bidder, 1);\r\n\r\n    sketchIndexToOffer[sketchIndex] = Offer(false, sketchIndex, bidder, 0, 0x0); // remove the offer    \r\n    sketchIndexToHighestBid[sketchIndex] = Bid(false, sketchIndex, 0x0, 0); // remove the bid\r\n\r\n    uint256 ownerProceeds = computeCut(price);\r\n    uint256 holderProceeds = price - ownerProceeds;\r\n\r\n    accountToWithdrawableValue[seller] += holderProceeds; // make profit available to seller for withdrawal\r\n    accountToWithdrawableValue[owner] += ownerProceeds;   // make cut available to auctioneer for withdrawal\r\n\r\n    SketchBought(sketchIndex, price, seller, bidder); // note that SketchNoLongerForSale event will not be fired\r\n  }\r\n\r\n  // Buy a Sketch that's up for sale now, provided you've matched the Offer price and it's not on offer to a specific buyer\r\n  function buySketch(uint256 sketchIndex) external payable {      \r\n    Offer storage offer = sketchIndexToOffer[sketchIndex];\r\n    uint256 messageValue = msg.value;\r\n\r\n    require(totalSupply != 0);\r\n    require(sketchIndex < totalSupply);\r\n    require(offer.isForSale);\r\n    require(offer.onlySellTo == 0x0 || offer.onlySellTo == msg.sender);\r\n    require(messageValue >= offer.minValue);\r\n    require(messageValue == uint256(uint128(messageValue))); // length check for computeCut(...)\r\n    require(offer.seller == sketchIndexToHolder[sketchIndex]); // the holder may have changed since an Offer was last put up\r\n\r\n    address holder = offer.seller;\r\n    require(balanceOf[holder] > 0);\r\n\r\n    sketchIndexToHolder[sketchIndex] = msg.sender; // transfer actual holdership!\r\n    balanceOf[holder]--; // update balances\r\n    balanceOf[msg.sender]++;\r\n    Transfer(holder, msg.sender, 1);\r\n\r\n    sketchNoLongerForSale(sketchIndex); // remove the offer\r\n\r\n    uint256 ownerProceeds = computeCut(messageValue);\r\n    uint256 holderProceeds = messageValue - ownerProceeds;\r\n\r\n    accountToWithdrawableValue[owner] += ownerProceeds;\r\n    accountToWithdrawableValue[holder] += holderProceeds;\r\n\r\n    SketchBought(sketchIndex, messageValue, holder, msg.sender);\r\n\r\n    // Refund any bid the new buyer had placed for this Sketch.\r\n    // Other bids have to stay put for continued consideration or until their values have been withdrawn.\r\n    Bid storage bid = sketchIndexToHighestBid[sketchIndex];\r\n    if (bid.bidder == msg.sender) {\r\n        accountToWithdrawableValue[msg.sender] += bid.value;\r\n        sketchIndexToHighestBid[sketchIndex] = Bid(false, sketchIndex, 0x0, 0); // remove the bid\r\n    }\r\n  }\r\n\r\n  // Withdraw any value owed to:\r\n  // (a) a buyer that withdraws their bid or invalidates it by purchasing a Sketch outright for its asking price\r\n  // (b) a seller owed funds from the sale of a Sketch\r\n  function withdraw() external {\r\n      uint256 amount = accountToWithdrawableValue[msg.sender];\r\n      // Zero the pending refund before transferring to prevent re-entrancy attacks\r\n      accountToWithdrawableValue[msg.sender] = 0;\r\n      msg.sender.transfer(amount);\r\n  }\r\n\r\n  // Enter a bid, regardless of whether the Sketch holder wishes to sell or not\r\n  function enterBidForSketch(uint256 sketchIndex) external payable {\r\n      require(totalSupply != 0);\r\n      require(sketchIndex < totalSupply);\r\n      require(sketchIndexToHolder[sketchIndex] != 0x0); // can't bid on \"non-owned\" Sketch (theoretically impossible anyway)\r\n      require(sketchIndexToHolder[sketchIndex] != msg.sender); // can't bid on a Sketch that you own\r\n\r\n      uint256 price = msg.value; // in wei\r\n\r\n      require(price > 0); // can't bid zero\r\n      require(price == uint256(uint128(price))); // length check for computeCut(...)      \r\n\r\n      Bid storage existing = sketchIndexToHighestBid[sketchIndex];\r\n\r\n      require(price > existing.value); // can't bid less than highest bid\r\n\r\n      if (existing.value > 0) {\r\n          // Place the amount from the previous highest bid into escrow for withdrawal at any time\r\n          accountToWithdrawableValue[existing.bidder] += existing.value;\r\n      }\r\n      sketchIndexToHighestBid[sketchIndex] = Bid(true, sketchIndex, msg.sender, price);\r\n\r\n      SketchBidEntered(sketchIndex, price, msg.sender);\r\n  }\r\n\r\n  function withdrawBidForSketch(uint256 sketchIndex) public {\r\n    require(totalSupply != 0);\r\n    require(sketchIndex < totalSupply);\r\n    require(sketchIndexToHolder[sketchIndex] != 0x0); // can't bid on \"non-owned\" Sketch (theoretically impossible anyway)\r\n    require(sketchIndexToHolder[sketchIndex] != msg.sender); // can't withdraw a bid for a Sketch that you own\r\n      \r\n    Bid storage bid = sketchIndexToHighestBid[sketchIndex];\r\n    require(bid.bidder == msg.sender); // it has to be your bid\r\n\r\n    SketchBidWithdrawn(sketchIndex, bid.value, msg.sender);\r\n\r\n    uint256 amount = bid.value;\r\n    sketchIndexToHighestBid[sketchIndex] = Bid(false, sketchIndex, 0x0, 0);\r\n\r\n    // Refund the bid money directly\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function computeCut(uint256 price) internal view returns (uint256) {\r\n    // NOTE: We don't use SafeMath (or similar) in this function because\r\n    //  all of our entry functions carefully cap the maximum values for\r\n    //  currency (at 128-bits), and ownerCut <= 10000. The result of this\r\n    //  function is always guaranteed to be <= _price.\r\n    return price * ownerCut / 10000;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listingFeeInWei\",\"type\":\"uint256\"}],\"name\":\"setListingFeeInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToHighestBid\",\"outputs\":[{\"name\":\"hasBid\",\"type\":\"bool\"},{\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSketchesOnOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForSketch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listingFeeInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerCut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getSketchesOnOfferWithHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sketchIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForSketch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToOwnerFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sketchIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForSketch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sketchIndex\",\"type\":\"uint256\"},{\"name\":\"_minSalePriceInWei\",\"type\":\"uint256\"},{\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"offerSketchForSaleToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToWithdrawableValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sketchIndex\",\"type\":\"uint256\"}],\"name\":\"sketchNoLongerForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToAuthor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToOffer\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getBidCountForSketchesWithHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_author\",\"type\":\"address\"}],\"name\":\"getSketchesWithAuthor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sketchIndex\",\"type\":\"uint256\"},{\"name\":\"_minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerSketchForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"_ownerFlag\",\"type\":\"uint8\"}],\"name\":\"setOwnerFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sketchIndexToData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"sketchIndex\",\"type\":\"uint256\"}],\"name\":\"transferSketch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSketch\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_author\",\"type\":\"address\"},{\"name\":\"_ownerFlag\",\"type\":\"uint8\"},{\"name\":\"_highestBidValue\",\"type\":\"uint256\"},{\"name\":\"_offerMinValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sketchAuthorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getSketchesWithHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sketchIndex\",\"type\":\"uint256\"}],\"name\":\"buySketch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"createSketch\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"}],\"name\":\"SketchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"SketchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"SketchOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"SketchBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"SketchBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"SketchBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sketchIndex\",\"type\":\"uint256\"}],\"name\":\"SketchNoLongerForSale\",\"type\":\"event\"}]","ContractName":"SketchMarket","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bda93a08d5a44f6ec4d4d3bc9e11c91c6c1813e371221de09eb2ac2eca003910"}]}