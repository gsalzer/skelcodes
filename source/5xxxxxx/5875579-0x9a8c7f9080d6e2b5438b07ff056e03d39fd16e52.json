{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath \r\n{\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256 c) \r\n  {\r\n     if (a == 0) \r\n     {\r\n     \treturn 0;\r\n     }\r\n     c = a * b;\r\n     assert(c / a == b);\r\n     return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) \r\n  {\r\n     return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) \r\n  {\r\n     assert(b <= a);\r\n     return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256 c) \r\n  {\r\n     c = a + b;\r\n     assert(c >= a);\r\n     return c;\r\n  }\r\n}\r\n\r\ncontract ERC20\r\n{\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n */\r\n\r\ncontract OppOpenWiFi is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n   \r\n    uint256 constant public TOKEN_DECIMALS = 10 ** 18;\r\n    string public constant name            = \"OppOpenWiFi Token\";\r\n    string public constant symbol          = \"OPP\";\r\n    uint256 public totalTokenSupply        = 4165000000 * TOKEN_DECIMALS;  \r\n    address public owner;\r\n    uint8 public constant decimals = 18;\r\n\r\n    /** mappings **/ \r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => uint256) balances;\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n\r\n    modifier onlyOwner() \r\n    {\r\n       require(msg.sender == owner);\r\n       _;\r\n    }\r\n    \r\n    /** constructor **/\r\n\r\n    constructor() public\r\n    {\r\n       owner = msg.sender;\r\n       balances[address(this)] = totalTokenSupply;\r\n       emit Transfer(address(0x0), address(this), balances[address(this)]);\r\n    }\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n    */\r\n\r\n    function totalSupply() public view returns(uint256 _totalSupply) \r\n    {\r\n       _totalSupply = totalTokenSupply;\r\n       return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of. \r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) \r\n    {\r\n       return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)     \r\n    {\r\n       if (_value == 0) \r\n       {\r\n           emit Transfer(_from, _to, _value);  // Follow the spec to launch the event when value is equal to 0\r\n           return;\r\n       }\r\n\r\n       require(_to != address(0x0));\r\n       require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\r\n\r\n       balances[_from] = balances[_from].sub(_value);\r\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n       balances[_to] = balances[_to].add(_value);\r\n       emit Transfer(_from, _to, _value);\r\n       return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _tokens The amount of tokens to be spent.\r\n    */\r\n\r\n    function approve(address _spender, uint256 _tokens)public returns(bool)\r\n    {\r\n       require(_spender != address(0x0));\r\n\r\n       allowed[msg.sender][_spender] = _tokens;\r\n       emit Approval(msg.sender, _spender, _tokens);\r\n       return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n     */\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256)\r\n    {\r\n       require(_owner != address(0x0) && _spender != address(0x0));\r\n\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _address The address to transfer to.\r\n    * @param _tokens The amount to be transferred.\r\n    */\r\n\r\n    function transfer(address _address, uint256 _tokens)public returns(bool)\r\n    {\r\n       if (_tokens == 0) \r\n       {\r\n           emit Transfer(msg.sender, _address, _tokens);  // Follow the spec to launch the event when tokens are equal to 0\r\n           return;\r\n       }\r\n\r\n       require(_address != address(0x0));\r\n       require(balances[msg.sender] >= _tokens);\r\n\r\n       balances[msg.sender] = (balances[msg.sender]).sub(_tokens);\r\n       balances[_address] = (balances[_address]).add(_tokens);\r\n       emit Transfer(msg.sender, _address, _tokens);\r\n       return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev transfer token from smart contract to another account, only by owner\r\n    * @param _address The address to transfer to.\r\n    * @param _tokens The amount to be transferred.\r\n    */\r\n\r\n    function transferTo(address _address, uint256 _tokens) external onlyOwner returns(bool) \r\n    {\r\n       require( _address != address(0x0)); \r\n       require( balances[address(this)] >= _tokens.mul(TOKEN_DECIMALS) && _tokens.mul(TOKEN_DECIMALS) > 0);\r\n\r\n       balances[address(this)] = ( balances[address(this)]).sub(_tokens.mul(TOKEN_DECIMALS));\r\n       balances[_address] = (balances[_address]).add(_tokens.mul(TOKEN_DECIMALS));\r\n       emit Transfer(address(this), _address, _tokens.mul(TOKEN_DECIMALS));\r\n       return true;\r\n    }\r\n\t\r\n    /**\r\n    * @dev transfer ownership of this contract, only by owner\r\n    * @param _newOwner The address of the new owner to transfer ownership\r\n    */\r\n\r\n    function transferOwnership(address _newOwner)public onlyOwner\r\n    {\r\n       require( _newOwner != address(0x0));\r\n\r\n       balances[_newOwner] = (balances[_newOwner]).add(balances[owner]);\r\n       balances[owner] = 0;\r\n       owner = _newOwner;\r\n       emit Transfer(msg.sender, _newOwner, balances[_newOwner]);\r\n   }\r\n\r\n   /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender\r\n   */\r\n\r\n   function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) \r\n   {\r\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n   }\r\n\r\n   /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender\r\n   */\r\n   function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) \r\n   {\r\n      uint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n      if (_subtractedValue > oldValue) \r\n      {\r\n         allowed[msg.sender][_spender] = 0;\r\n      }\r\n      else \r\n      {\r\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OppOpenWiFi","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3af9778f6dda29406901d29f541259404b006513c0dec5b6bef6094e5351eae6"}]}