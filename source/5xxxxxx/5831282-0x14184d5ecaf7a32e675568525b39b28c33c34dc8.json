{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n    \r\n  mapping (address => uint256) balances;\r\n  uint256 totalSupply_;\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BurnableToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    \r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n}\r\n\r\ncontract BittechToken is StandardToken {\r\n\r\n  string constant public name = \"Bittech Token\";\r\n  string constant public symbol = \"BTECH\";\r\n  uint256 constant public decimals = 18;\r\n\r\n  address constant public bountyWallet = 0x8E8d4cdADbc027b192DfF91c77382521B419E5A2;\r\n  uint256 public bountyPart = uint256(5000000).mul(10 ** decimals); \r\n  address constant public adviserWallet = 0x1B9D19Af310E8cB35D0d3B8977b65bD79C5bB299;\r\n  uint256 public adviserPart = uint256(1000000).mul(10 ** decimals);\r\n  address constant public reserveWallet = 0xa323DA182fDfC10861609C2c98894D9745ABAB91;\r\n  uint256 public reservePart = uint256(20000000).mul(10 ** decimals);\r\n  address constant public ICOWallet = 0x1ba99f4F5Aa56684423a122D72990A7851AaFD9e;\r\n  uint256 public ICOPart = uint256(60000000).mul(10 ** decimals);\r\n  uint256 public PreICOPart = uint256(5000000).mul(10 ** decimals);\r\n  address constant public teamWallet = 0x69548B7740EAf1200312d803f8bDd04F77523e09;\r\n  uint256 public teamPart = uint256(9000000).mul(10 ** decimals);\r\n\r\n  uint256 constant public yearSeconds = 31536000; // 60*60*24*365 = 31536000\r\n  uint256 constant public secsPerBlock = 15; // 1 block per 15 seconds\r\n  uint256 public INITIAL_SUPPLY = uint256(100000000).mul(10 ** decimals); // 100 000 000 tokens\r\n\r\n  uint256 public withdrawTokens = 0;\r\n  uint256 public startTime;\r\n\r\n  function BittechToken() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n\r\n    balances[bountyWallet] = bountyPart;\r\n    emit Transfer(this, bountyWallet, bountyPart);\r\n\r\n    balances[adviserWallet] = adviserPart;\r\n    emit Transfer(this, adviserWallet, adviserPart);\r\n\r\n    balances[reserveWallet] = reservePart;\r\n    emit Transfer(this, reserveWallet, reservePart);\r\n\r\n    balances[ICOWallet] = ICOPart;\r\n    emit Transfer(this, ICOWallet, ICOPart);\r\n\r\n    balances[msg.sender] = PreICOPart;\r\n    emit Transfer(this, msg.sender, PreICOPart);\r\n\r\n    balances[this] = teamPart;\r\n    emit Transfer(this, this, teamPart); \r\n\r\n    startTime = block.number;\r\n  }\r\n\r\n  modifier onlyTeam() {\r\n    require(msg.sender == teamWallet);\r\n    _;\r\n  }\r\n\r\n  function viewTeamTokens() public view returns (uint256) {\r\n\r\n    if (block.number >= startTime.add(yearSeconds.div(secsPerBlock))) {\r\n      return 3000000;\r\n    }\r\n\r\n    if (block.number >= startTime.add(yearSeconds.div(secsPerBlock).mul(2))) {\r\n      return 6000000;\r\n    }\r\n\r\n    if (block.number >= startTime.add(yearSeconds.div(secsPerBlock).mul(3))) {\r\n      return 9000000;\r\n    }\r\n\r\n  }\r\n\r\n  function getTeamTokens(uint256 _tokens) public onlyTeam {\r\n    uint256 tokens = _tokens.mul(10 ** decimals);\r\n    require(withdrawTokens.add(tokens) <= viewTeamTokens().mul(10 ** decimals));\r\n    transfer(teamWallet, tokens);\r\n    emit Transfer(this, teamWallet, tokens);\r\n    withdrawTokens = withdrawTokens.add(tokens);\r\n  }\r\n  \r\n}\r\n\r\ncontract BittechPresale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    BittechToken public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public balanceOfUSD;\r\n    uint256 constant public tokenHardCap = 5000000000000000000000000; // 5 mln tokens\r\n    uint256 constant public decim = 1000000000000000000; // 10 ** 18\r\n    uint256 public tokensRaised = 0;\r\n    uint256 public minimalPriceUSD = 2000000;\r\n    uint256 public ETHUSD = 520;\r\n    uint256 public tokenPricePerUSD = 100;\r\n    bool public presaleFinished = false;\r\n    \r\n    modifier whenNotFinished() {\r\n        require(!presaleFinished);\r\n        _;\r\n    }\r\n\r\n    modifier whenFinished() {\r\n        require(presaleFinished);\r\n        _;\r\n    }\r\n\r\n    function BittechPresale(address _tokenReward) public {\r\n        tokenReward = BittechToken(_tokenReward);\r\n        owner = 0x8Ce2e52b5A75035E9d282226A42A6C6E551f1198;\r\n    }\r\n    \r\n    function () public payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    function getBonus(address investor) public view returns (uint256) {\r\n        if (balanceOfUSD[investor] <= 10000) return 100;\r\n        else if (balanceOfUSD[investor] <= 30000) return 110;\r\n        else if (balanceOfUSD[investor] <= 50000) return 120;\r\n        else if (balanceOfUSD[investor] <= 100000) return 130;\r\n        else return 140;\r\n    }\r\n\r\n    function buy(address buyer) whenNotPaused whenNotFinished public payable {\r\n        require(buyer != address(0));\r\n        require(msg.value.mul(ETHUSD) >= minimalPriceUSD.mul(decim).div(1000));\r\n        \r\n        uint256 tokens = msg.value.mul(ETHUSD).mul(getBonus(buyer)).mul(tokenPricePerUSD).div(100).div(100);\r\n        tokenReward.transfer(buyer, tokens);\r\n        uint256 receivedDollars = msg.value.mul(ETHUSD).div(decim);\r\n        balanceOfUSD[buyer] = balanceOfUSD[buyer].add(receivedDollars);\r\n        balanceOf[buyer] = balanceOf[buyer].add(msg.value);\r\n\r\n        tokensRaised = tokensRaised.add(tokens);\r\n\r\n        if (tokensRaised >= tokenHardCap) {\r\n            presaleFinished = true;\r\n            uint256 tokenBalance = tokenReward.balanceOf(address(this));\r\n            tokenReward.burn(tokenBalance);\r\n        }\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function transferFunds() onlyOwner public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function transferTokens(address who, uint amount) onlyOwner public {\r\n        tokenReward.transfer(who, amount);\r\n    }\r\n\r\n    function finishPresale() onlyOwner public {\r\n        presaleFinished = true;\r\n\r\n        uint256 tokenBalance = tokenReward.balanceOf(address(this));\r\n        tokenReward.burn(tokenBalance);\r\n    }\r\n\r\n    function updatePrice(uint256 _ETHUSD) onlyOwner public {\r\n        ETHUSD = _ETHUSD;\r\n    }\r\n\r\n    function updateMinimal(uint256 _minimalPriceUSD) onlyOwner public {\r\n        minimalPriceUSD = _minimalPriceUSD;\r\n    }\r\n\r\n    function updateTokenPricePerUSD(uint256 _tokenPricePerUSD) onlyOwner public {\r\n        tokenPricePerUSD = _tokenPricePerUSD;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPricePerUSD\",\"type\":\"uint256\"}],\"name\":\"updateTokenPricePerUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPricePerUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimalPriceUSD\",\"type\":\"uint256\"}],\"name\":\"updateMinimal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ETHUSD\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalPriceUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BittechPresale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006ee2ee1a5a257e6e7ade7fe537617ead9c7bd3d2","Library":"","SwarmSource":"bzzr://d6eaa60f1627ca93683306cc46c27e25b8cf491d70370e68bc6ab88aa0621c8e"}]}