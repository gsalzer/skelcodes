{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(\r\n        address indexed previousOwner\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract ERC223Interface {\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool);\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n}\r\n\r\ncontract ERC223ReceivingContract {\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title PoSTokenStandard\r\n * @dev the interface of PoSTokenStandard\r\n */\r\ncontract PoSTokenStandard {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n    function mint() public returns (bool);\r\n    function coinAge() public view returns (uint256);\r\n    function annualInterest() public view returns (uint256);\r\n    function calculateReward() public view returns (uint256);\r\n    function calculateRewardAt(uint256 _now) public view returns (uint256);\r\n    event Mint(\r\n        address indexed _address,\r\n        uint256 _reward\r\n    );\r\n}\r\n\r\n/**\r\n * @title TRUE Token\r\n * @dev ERC20, ERC223, PoS Token for TrueDeck Platform\r\n */\r\ncontract TrueToken is ERC20, ERC223Interface, PoSTokenStandard, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    event CoinAgeRecordEvent(\r\n        address indexed who,\r\n        uint256 value,\r\n        uint64 time\r\n    );\r\n    event CoinAgeResetEvent(\r\n        address indexed who,\r\n        uint256 value,\r\n        uint64 time\r\n    );\r\n\r\n    string public constant name = \"TRUE Token\";\r\n    string public constant symbol = \"TRUE\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total Number of TRUE tokens that can ever be created.\r\n    *      200M TRUE Tokens\r\n    */\r\n    uint256 public MAX_TOTAL_SUPPLY = 200000000 *  10 ** uint256(decimals);\r\n\r\n    /**\r\n    * @dev Initial supply of TRUE tokens.\r\n    *      70M TRUE Tokens\r\n    *      35% of Maximum Total Supply\r\n    *      Will be distributed as follows:\r\n    *           5% : Platform Partners\r\n    *           1% : Pre-Airdrop\r\n    *          15% : Mega-Airdrop\r\n    *           4% : Bounty (Vested over 6 months)\r\n    *          10% : Development (Vested over 12 months)\r\n    */\r\n    uint256 public INITIAL_SUPPLY = 70000000 *  10 ** uint256(decimals);\r\n\r\n    /**\r\n    * @dev Time at which the contract was deployed\r\n    */\r\n    uint256 public chainStartTime;\r\n\r\n    /**\r\n    * @dev Ethereum Blockchain Block Number at time the contract was deployed\r\n    */\r\n    uint256 public chainStartBlockNumber;\r\n\r\n    /**\r\n    * @dev To keep the record of a single incoming token transfer\r\n    */\r\n    struct CoinAgeRecord {\r\n        uint256 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    /**\r\n    * @dev To keep the coin age record for all addresses\r\n    */\r\n    mapping(address => CoinAgeRecord[]) coinAgeRecordMap;\r\n\r\n    /**\r\n     * @dev Modifier to make contract mint new tokens only\r\n     *      - Staking has started.\r\n     *      - When total supply has not reached MAX_TOTAL_SUPPLY.\r\n     */\r\n    modifier canMint() {\r\n        require(stakeStartTime > 0 && now >= stakeStartTime && totalSupply_ < MAX_TOTAL_SUPPLY);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        chainStartTime = now;\r\n        chainStartBlockNumber = block.number;\r\n\r\n        stakeMinAge = 3 days;\r\n        stakeMaxAge = 60 days;\r\n\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n    }\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer the specified amount of tokens to the specified address.\r\n    *      - Invokes the `tokenFallback` function if the recipient is a contract.\r\n    *        The token transfer fails if the recipient is a contract\r\n    *        but does not implement the `tokenFallback` function\r\n    *        or the fallback function to receive funds.\r\n    *      - Records coin age if the recipient is not a contract\r\n    *\r\n    * @param _to    Receiver address.\r\n    * @param _value Amount of tokens that will be transferred.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        if (msg.sender == _to) {\r\n            return mint();\r\n        }\r\n\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        bool flag = isContract(_to);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if (flag) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n\r\n        logCoinAgeRecord(msg.sender, _to, _value, flag);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer the specified amount of tokens to the specified address.\r\n    *      This function works the same with the previous one\r\n    *      but doesn't contain `_data` param.\r\n    *      Added due to backwards compatibility reasons.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        if (msg.sender == _to) {\r\n            return mint();\r\n        }\r\n\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        bytes memory empty;\r\n        bool flag = isContract(_to);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if (flag) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n\r\n        logCoinAgeRecord(msg.sender, _to, _value, flag);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // Coin age should not be recorded if receiver is the sender.\r\n        if (_from != _to) {\r\n            logCoinAgeRecord(_from, _to, _value, isContract(_to));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool) {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool) {\r\n        require(_spender != address(0));\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Mints new TRUE token and rewards to caller as per the coin age.\r\n    *      Deletes all previous coinage records and resets with new coin age record.\r\n    */\r\n    function mint() public whenNotPaused canMint returns (bool) {\r\n        if (balances[msg.sender] <= 0) {\r\n            return false;\r\n        }\r\n\r\n        if (coinAgeRecordMap[msg.sender].length <= 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 reward = calculateRewardInternal(msg.sender, now);\r\n        if (reward <= 0) {\r\n            return false;\r\n        }\r\n\r\n        if (reward > MAX_TOTAL_SUPPLY.sub(totalSupply_)) {\r\n            reward = MAX_TOTAL_SUPPLY.sub(totalSupply_);\r\n        }\r\n\r\n        totalSupply_ = totalSupply_.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        emit Mint(msg.sender, reward);\r\n\r\n        uint64 _now = uint64(now);\r\n        delete coinAgeRecordMap[msg.sender];\r\n        coinAgeRecordMap[msg.sender].push(CoinAgeRecord(balances[msg.sender], _now));\r\n        emit CoinAgeResetEvent(msg.sender, balances[msg.sender], _now);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns coinage for the caller address\r\n    */\r\n    function coinAge() public view returns (uint256) {\r\n         return getCoinAgeInternal(msg.sender, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns current annual interest\r\n    */\r\n    function annualInterest() public view returns(uint256) {\r\n        return getAnnualInterest(now);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates and returns proof-of-stake reward\r\n    */\r\n    function calculateReward() public view returns (uint256) {\r\n        return calculateRewardInternal(msg.sender, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates and returns proof-of-stake reward for provided time\r\n    *\r\n    * @param _now timestamp The time for which the reward will be calculated\r\n    */\r\n    function calculateRewardAt(uint256 _now) public view returns (uint256) {\r\n        return calculateRewardInternal(msg.sender, _now);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns coinage record for the given address and index\r\n    *\r\n    * @param _address address The address for which coinage record will be fetched\r\n    * @param _index index The index of coinage record for that address\r\n    */\r\n    function coinAgeRecordForAddress(address _address, uint256 _index) public view onlyOwner returns (uint256, uint64) {\r\n        if (coinAgeRecordMap[_address].length > _index) {\r\n            return (coinAgeRecordMap[_address][_index].amount, coinAgeRecordMap[_address][_index].time);\r\n        } else {\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns coinage for the caller address\r\n    *\r\n    * @param _address address The address for which coinage will be calculated\r\n    */\r\n    function coinAgeForAddress(address _address) public view onlyOwner returns (uint256) {\r\n         return getCoinAgeInternal(_address, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns coinage for the caller address\r\n    *\r\n    * @param _address address The address for which coinage will be calculated\r\n    * @param _now timestamp The time for which the coinage will be calculated\r\n    */\r\n    function coinAgeForAddressAt(address _address, uint256 _now) public view onlyOwner returns (uint256) {\r\n         return getCoinAgeInternal(_address, _now);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates and returns proof-of-stake reward for provided address and time\r\n    *\r\n    * @param _address address The address for which reward will be calculated\r\n    */\r\n    function calculateRewardForAddress(address _address) public view onlyOwner returns (uint256) {\r\n        return calculateRewardInternal(_address, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates and returns proof-of-stake reward for provided address and time\r\n    *\r\n    * @param _address address The address for which reward will be calculated\r\n    * @param _now timestamp The time for which the reward will be calculated\r\n    */\r\n    function calculateRewardForAddressAt(address _address, uint256 _now) public view onlyOwner returns (uint256) {\r\n        return calculateRewardInternal(_address, _now);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the stake start time\r\n    */\r\n    function startStakingAt(uint256 timestamp) public onlyOwner {\r\n        require(stakeStartTime <= 0 && timestamp >= chainStartTime && timestamp > now);\r\n        stakeStartTime = timestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the given _address is a contract, false otherwise.\r\n    */\r\n    function isContract(address _address) private view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_address)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    /**\r\n    * @dev Logs coinage record for sender and receiver.\r\n    *      Deletes sender's previous coinage records if any.\r\n    *\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    * @param _isContract bool if the receiver is a contract\r\n    */\r\n    function logCoinAgeRecord(address _from, address _to, uint256 _value, bool _isContract) private returns (bool) {\r\n        if (coinAgeRecordMap[_from].length > 0) {\r\n            delete coinAgeRecordMap[_from];\r\n        }\r\n\r\n        uint64 _now = uint64(now);\r\n\r\n        if (balances[_from] != 0) {\r\n            coinAgeRecordMap[_from].push(CoinAgeRecord(balances[_from], _now));\r\n            emit CoinAgeResetEvent(_from, balances[_from], _now);\r\n        }\r\n\r\n        if (_value != 0 && !_isContract) {\r\n            coinAgeRecordMap[_to].push(CoinAgeRecord(_value, _now));\r\n            emit CoinAgeRecordEvent(_to, _value, _now);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates and returns proof-of-stake reward for provided address\r\n    *\r\n    * @param _address address The address for which reward will be calculated\r\n    * @param _now timestamp The time for which the reward will be calculated\r\n    */\r\n    function calculateRewardInternal(address _address, uint256 _now) private view returns (uint256) {\r\n        uint256 _coinAge = getCoinAgeInternal(_address, _now);\r\n        if (_coinAge <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 interest = getAnnualInterest(_now);\r\n\r\n        return (_coinAge.mul(interest)).div(365 * 100);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the coin age for given address and time.\r\n    *\r\n    * @param _address address The address for which coinage will be calculated\r\n    * @param _now timestamp The time for which the coinage will be calculated\r\n    */\r\n    function getCoinAgeInternal(address _address, uint256 _now) private view returns (uint256 _coinAge) {\r\n        if (coinAgeRecordMap[_address].length <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint256 i = 0; i < coinAgeRecordMap[_address].length; i++) {\r\n            if (_now < uint256(coinAgeRecordMap[_address][i].time).add(stakeMinAge)) {\r\n                continue;\r\n            }\r\n\r\n            uint256 secondsPassed = _now.sub(uint256(coinAgeRecordMap[_address][i].time));\r\n            if (secondsPassed > stakeMaxAge ) {\r\n                secondsPassed = stakeMaxAge;\r\n            }\r\n\r\n            _coinAge = _coinAge.add((coinAgeRecordMap[_address][i].amount).mul(secondsPassed.div(1 days)));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the annual interest rate for given time\r\n    *\r\n    * @param _now timestamp The time for which the annual interest will be calculated\r\n    */\r\n    function getAnnualInterest(uint256 _now) private view returns(uint256 interest) {\r\n        if (stakeStartTime > 0 && _now >= stakeStartTime && totalSupply_ < MAX_TOTAL_SUPPLY) {\r\n            uint256 secondsPassed = _now.sub(stakeStartTime);\r\n            // 1st Year = 30% annually\r\n            if (secondsPassed <= 365 days) {\r\n                interest = 30;\r\n            } else if (secondsPassed <= 547 days) {  // 2nd Year, 1st Half = 25% annually\r\n                interest = 25;\r\n            } else if (secondsPassed <= 730 days) {  // 2nd Year, 2nd Half = 20% annually\r\n                interest = 20;\r\n            } else if (secondsPassed <= 911 days) {  // 3rd Year, 1st Half = 15% annually\r\n                interest = 15;\r\n            } else if (secondsPassed <= 1094 days) {  // 3rd Year, 2nd Half = 10% annually\r\n                interest = 10;\r\n            } else {  // 4th Year Onwards = 5% annually\r\n                interest = 5;\r\n            }\r\n        } else {\r\n            interest = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"coinAgeRecordForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"coinAgeForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"calculateRewardForAddressAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"coinAgeForAddressAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"calculateRewardAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"startStakingAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculateRewardForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"CoinAgeRecordEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"CoinAgeResetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TrueToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a50a39ac94657eafce14d2db1bda9599a4d8f5ca350273dec62bd37a3fb1c3a"}]}