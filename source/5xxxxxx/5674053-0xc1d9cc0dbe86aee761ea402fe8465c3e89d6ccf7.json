{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * Marriage\r\n * Copyright (c) 2018 MING-CHIEN LEE\r\n */\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\ncontract Marriage is owned {\r\n    // Marriage data variables\r\n    bytes32 public partner1;\r\n    bytes32 public partner2;\r\n    uint256 public marriageDate;\r\n    bytes32 public marriageStatus;\r\n    bytes public imageHash;\r\n    bytes public marriageProofDoc;\r\n    \r\n    constructor() public {\r\n        createMarriage();\r\n    }\r\n\r\n    // Create initial marriage contract\r\n    function createMarriage() onlyOwner public {\r\n        partner1 = \"Edison Lee\";\r\n        partner2 = \"Chino Kafuu\";\r\n        marriageDate = 1526983200;\r\n        setStatus(\"Married\");\r\n        bytes32 name = \"Marriage Contract Creation\";\r\n        \r\n        majorEventFunc(marriageDate, name, \"We got married!\");\r\n    }\r\n    \r\n    // Set the marriage status if it changes\r\n    function setStatus(bytes32 status) onlyOwner public {\r\n        marriageStatus = status;\r\n        majorEventFunc(block.timestamp, \"Changed Status\", status);\r\n    }\r\n    \r\n    // Set the IPFS hash of the image of the couple\r\n    function setImage(bytes IPFSImageHash) onlyOwner public {\r\n        imageHash = IPFSImageHash;\r\n        majorEventFunc(block.timestamp, \"Entered Marriage Image\", \"Image is in IPFS\");\r\n    }\r\n    \r\n    // Upload documentation for proof of marrage like a marriage certificate\r\n    function marriageProof(bytes IPFSProofHash) onlyOwner public {\r\n        marriageProofDoc = IPFSProofHash;\r\n        majorEventFunc(block.timestamp, \"Entered Marriage Proof\", \"Marriage proof in IPFS\");\r\n    }\r\n\r\n    // Log major life events\r\n    function majorEventFunc(uint256 eventTimeStamp, bytes32 name, bytes32 description) public {\r\n        emit MajorEvent(block.timestamp, eventTimeStamp, name, description);\r\n    }\r\n\r\n    // Declare event structure\r\n    event MajorEvent(uint256 logTimeStamp, uint256 eventTimeStamp, bytes32 indexed name, bytes32 indexed description);\r\n    \r\n    // This function gets executed if a transaction with invalid data is sent to\r\n    // the contract or just ether without data. We revert the send so that no-one\r\n    // accidentally loses money when using the contract.\r\n    function () public {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bytes32\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"IPFSImageHash\",\"type\":\"bytes\"}],\"name\":\"setImage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marriageDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marriageProofDoc\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createMarriage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marriageStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"IPFSProofHash\",\"type\":\"bytes\"}],\"name\":\"marriageProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eventTimeStamp\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"}],\"name\":\"majorEventFunc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"logTimeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"description\",\"type\":\"bytes32\"}],\"name\":\"MajorEvent\",\"type\":\"event\"}]","ContractName":"Marriage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6824946324d262a4feca3e85b2f88e80fe4db9a27d8664e6aa77276c2312373f"}]}