{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner{\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title \r\n * @dev Very simple ERC20 Token that can be minted.\r\n * It is meant to be used in a crowdsale contract.\r\n */\r\ncontract ChariotToken is StandardToken, Ownable {\r\n\r\n  string public constant name = \"Chariot Coin\";\r\n  string public constant symbol = \"TOM\";\r\n  uint8 public constant decimals = 18;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event MintPaused(bool pause);\r\n\r\n  bool public mintingFinished = false;\r\n  bool public mintingPaused = false;\r\n  address public saleAgent = address(0);\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier unpauseMint() {\r\n    require(!mintingPaused);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to pause/unpause minting new tokens.\r\n   * @return True if minting was pause.\r\n   * @return False if minting was unpause\r\n   */\r\n  function pauseMinting(bool _mintingPaused) canMint public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner));\r\n    mintingPaused = _mintingPaused;\r\n    MintPaused(_mintingPaused);\r\n    return _mintingPaused;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) canMint unpauseMint public returns (bool) {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(this), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() canMint public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner));\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(msg.sender == saleAgent || msg.sender == owner);\r\n        require(balances[_from] >= _value);// Check if the targeted balance is enough\r\n        require(_value <= allowed[_from][msg.sender]);// Check allowance\r\n        balances[_from] = balances[_from].sub(_value); // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract TokenSale is Ownable{\r\n  using SafeMath for uint256;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n   // The token being sold\r\n  ChariotToken public token;\r\n\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  uint256 public initialSupply = 37600000 * 1 ether;\r\n\r\n  // bool public checkDiscountStage = true;\r\n  uint256 limit;\r\n  uint256 period;\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // one token per one rate, token default = 0.001 ETH = 1 TOM\r\n  uint256 public rate = 1000;\r\n\r\n  // Company addresses\r\n  address public TeamAndAdvisors;\r\n  address public Investors;\r\n  address public EADC;\r\n  address public Bounty;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public weiSoftCap = 800 * 1 ether;\r\n  uint256 public weiHardCap = 1600 * 1 ether;\r\n\r\n  modifier saleIsOn() {\r\n      require(now > startTime && now < endTime);\r\n      require(weiRaised <= weiHardCap);\r\n      require(initialSupply >= token.totalSupply());\r\n      _;\r\n  }\r\n\r\n  uint256 discountStage1 = 60;\r\n  uint256 discountStage2 = 55;\r\n  uint256 discountStage3 = 50;\r\n  uint256 discountStage4 = 40;\r\n\r\n  function setDiscountStage(\r\n    uint256 _newDiscountStage1,\r\n    uint256 _newDiscountStage2,\r\n    uint256 _newDiscountStage3,\r\n    uint256 _newDiscountStage4\r\n    ) onlyOwner public {\r\n    discountStage1 = _newDiscountStage1;\r\n    discountStage2 = _newDiscountStage2;\r\n    discountStage3 = _newDiscountStage3;\r\n    discountStage4 = _newDiscountStage4;\r\n  }\r\n\r\n  function setTime(uint _startTime, uint _endTime) public onlyOwner {\r\n    require(now < _endTime && _startTime < _endTime);\r\n    endTime = _endTime;\r\n    startTime = _startTime;\r\n  }\r\n\r\n  function setRate(uint _newRate) public onlyOwner {\r\n    rate = _newRate;\r\n  }\r\n\r\n  function setTeamAddress(\r\n    address _TeamAndAdvisors,\r\n    address _Investors,\r\n    address _EADC,\r\n    address _Bounty,\r\n    address _wallet) public onlyOwner {\r\n    TeamAndAdvisors = _TeamAndAdvisors;\r\n    Investors = _Investors;\r\n    EADC = _EADC;\r\n    Bounty = _Bounty;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function getDiscountStage() public view returns (uint256) {\r\n    if(now < startTime + 5 days) {\r\n        return discountStage1;\r\n      } else if(now >= startTime + 5 days && now < startTime + 10 days) {\r\n        return discountStage2;\r\n      } else if(now >= startTime + 10 days && now < startTime + 15 days) {\r\n        return discountStage3;\r\n      } else if(now >= startTime + 15 days && now < endTime) {\r\n        return discountStage4;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * events for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event TokenPartners(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n\r\n  function TokenSale(\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    address _wallet,\r\n    uint256 _limit,\r\n    uint256 _period,\r\n    address _TeamAndAdvisors,\r\n    address _Investors,\r\n    address _Bounty,\r\n    address _EADC\r\n    ) public {\r\n    require(_wallet != address(0));\r\n    require(_TeamAndAdvisors != address(0));\r\n    require(_Investors != address(0));\r\n    require(_EADC != address(0));\r\n    require(_Bounty != address(0));\r\n    require(_endTime > _startTime);\r\n    require(now < _startTime);\r\n    token = new ChariotToken();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    wallet = _wallet;\r\n    limit = _limit * 1 ether;\r\n    period = _period;\r\n    TeamAndAdvisors = _TeamAndAdvisors;\r\n    Investors = _Investors;\r\n    EADC = _EADC;\r\n    Bounty = _Bounty;\r\n    token.setSaleAgent(owner);\r\n  }\r\n\r\n  function updatePrice() returns(uint256){\r\n    uint256 _days = now.sub(startTime).div(1 days); // days after startTime\r\n    return (_days % period).add(1).mul(rate); // rate in this period\r\n  }\r\n  \r\n  function setLimit(uint256 _newLimit) public onlyOwner {\r\n    limit = _newLimit * 1 ether;\r\n  }\r\n\r\n  // @ value - tokens for sale\r\n  function isUnderLimit(uint256 _value) public returns (bool){\r\n    uint256 _days = now.sub(startTime).div(1 days); // days after startTime\r\n    uint256 coinsLimit = (_days % period).add(1).mul(limit); // limit coins in this period\r\n    return (msg.sender).balance.add(_value) <= coinsLimit;\r\n  }\r\n\r\n  function buyTokens(address beneficiary) saleIsOn public payable {\r\n    require(beneficiary != address(0));\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 all = 100;\r\n    uint256 tokens;\r\n    \r\n    // calculate token amount to be created\r\n    tokens = weiAmount.mul(updatePrice()).mul(100).div(all.sub(getDiscountStage()));\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    if(endTime.sub(now).div(1 days) > 5) {\r\n      require(isUnderLimit(tokens));\r\n    }\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    wallet.transfer(weiAmount.mul(30).div(100));\r\n    Investors.transfer(weiAmount.mul(65).div(100));\r\n    EADC.transfer(weiAmount.mul(5).div(100));\r\n\r\n    uint256 taaTokens = tokens.mul(27).div(100);\r\n    uint256 bountyTokens = tokens.mul(3).div(100);\r\n\r\n    token.mint(TeamAndAdvisors, taaTokens);\r\n    token.mint(Bounty, bountyTokens);\r\n\r\n    TokenPartners(msg.sender, TeamAndAdvisors, taaTokens);\r\n    TokenPartners(msg.sender, Bounty, bountyTokens);  \r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // @return true if tokensale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_TeamAndAdvisors\",\"type\":\"address\"},{\"name\":\"_Investors\",\"type\":\"address\"},{\"name\":\"_EADC\",\"type\":\"address\"},{\"name\":\"_Bounty\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"isUnderLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiscountStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamAndAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDiscountStage1\",\"type\":\"uint256\"},{\"name\":\"_newDiscountStage2\",\"type\":\"uint256\"},{\"name\":\"_newDiscountStage3\",\"type\":\"uint256\"},{\"name\":\"_newDiscountStage4\",\"type\":\"uint256\"}],\"name\":\"setDiscountStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EADC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_TeamAndAdvisors\",\"type\":\"address\"},{\"name\":\"_Investors\",\"type\":\"address\"},{\"name\":\"_Bounty\",\"type\":\"address\"},{\"name\":\"_EADC\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPartners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a859260000000000000000000000000000000000000000000000000000000005a9ff060000000000000000000000000aeebc6fb585e670a186cef538e98da78040aa2b50000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000000000000000050000000000000000000000005786109f3248a6601081c53b91a8e1e305a3d0b4000000000000000000000000e503cd45d4af2bcb8517dd177419ba1c211c1c1d00000000000000000000000083b12d7f7af3133e2a63cb3740bf4db8ba2cce00000000000000000000000000a9b5b2d371b59abb07dfc5f53477173376aa4459","Library":"","SwarmSource":"bzzr://4c0d9574da12daaf76e0eef21104137c709c27bfd3e84c48101597e4f0dd7d70"}]}