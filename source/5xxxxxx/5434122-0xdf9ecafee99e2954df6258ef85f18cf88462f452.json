{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary StringUtils {\r\n    // Tests for uppercase characters in a given string\r\n    function allLower(string memory _string) internal pure returns (bool) {\r\n        bytes memory bytesString = bytes(_string);\r\n        for (uint i = 0; i < bytesString.length; i++) {\r\n            if ((bytesString[i] >= 65) && (bytesString[i] <= 90)) {  // Uppercase characters\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    // Allows owner to withdraw ether from the contract\r\n    function withdrawEther(address to) public onlyOwner {\r\n        to.transfer(address(this).balance);\r\n    }\r\n\r\n    // Allows owner to withdraw ERC20 tokens from the contract\r\n    function withdrawERC20Token(address tokenAddress, address to) public onlyOwner {\r\n        ERC20Basic token = ERC20Basic(tokenAddress);\r\n        token.transfer(to, token.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n\r\ninterface HydroToken {\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract RaindropClient is Withdrawable {\r\n    // Events for when a user signs up for Raindrop Client and when their account is deleted\r\n    event UserSignUp(string userName, address userAddress, bool official);\r\n    event UserDeleted(string userName, address userAddress, bool official);\r\n    // Events for when an application signs up for Raindrop Client and when their account is deleted\r\n    event ApplicationSignUp(string applicationName, bool official);\r\n    event ApplicationDeleted(string applicationName, bool official);\r\n\r\n    using StringUtils for string;\r\n\r\n    // Fees that unofficial users/applications must pay to sign up for Raindrop Client\r\n    uint public unofficialUserSignUpFee;\r\n    uint public unofficialApplicationSignUpFee;\r\n\r\n    address public hydroTokenAddress;\r\n    uint public hydroStakingMinimum;\r\n\r\n    // User accounts\r\n    struct User {\r\n        string userName;\r\n        address userAddress;\r\n        bool official;\r\n        bool _initialized;\r\n    }\r\n\r\n    // Application accounts\r\n    struct Application {\r\n        string applicationName;\r\n        bool official;\r\n        bool _initialized;\r\n    }\r\n\r\n    // Internally, users and applications are identified by the hash of their names\r\n    mapping (bytes32 => User) internal userDirectory;\r\n    mapping (bytes32 => Application) internal officialApplicationDirectory;\r\n    mapping (bytes32 => Application) internal unofficialApplicationDirectory;\r\n\r\n    // Allows the Hydro API to sign up official users with their app-generated address\r\n    function officialUserSignUp(string userName, address userAddress) public onlyOwner {\r\n        _userSignUp(userName, userAddress, true);\r\n    }\r\n\r\n    // Allows anyone to sign up as an unofficial user with their own address\r\n    function unofficialUserSignUp(string userName) public payable {\r\n        require(bytes(userName).length < 100);\r\n        require(msg.value >= unofficialUserSignUpFee);\r\n\r\n        return _userSignUp(userName, msg.sender, false);\r\n    }\r\n\r\n    // Allows the Hydro API to delete official users iff they've signed keccak256(\"Delete\") with their private key\r\n    function deleteUserForUser(string userName, uint8 v, bytes32 r, bytes32 s) public onlyOwner {\r\n        bytes32 userNameHash = keccak256(userName);\r\n        require(userNameHashTaken(userNameHash));\r\n        address userAddress = userDirectory[userNameHash].userAddress;\r\n        require(isSigned(userAddress, keccak256(\"Delete\"), v, r, s));\r\n\r\n        delete userDirectory[userNameHash];\r\n\r\n        emit UserDeleted(userName, userAddress, true);\r\n    }\r\n\r\n    // Allows unofficial users to delete their account\r\n    function deleteUser(string userName) public {\r\n        bytes32 userNameHash = keccak256(userName);\r\n        require(userNameHashTaken(userNameHash));\r\n        address userAddress = userDirectory[userNameHash].userAddress;\r\n        require(userAddress == msg.sender);\r\n\r\n        delete userDirectory[userNameHash];\r\n\r\n        emit UserDeleted(userName, userAddress, true);\r\n    }\r\n\r\n    // Allows the Hydro API to sign up official applications\r\n    function officialApplicationSignUp(string applicationName) public onlyOwner {\r\n        bytes32 applicationNameHash = keccak256(applicationName);\r\n        require(!applicationNameHashTaken(applicationNameHash, true));\r\n        officialApplicationDirectory[applicationNameHash] = Application(applicationName, true, true);\r\n\r\n        emit ApplicationSignUp(applicationName, true);\r\n    }\r\n\r\n    // Allows anyone to sign up as an unofficial application\r\n    function unofficialApplicationSignUp(string applicationName) public payable {\r\n        require(bytes(applicationName).length < 100);\r\n        require(msg.value >= unofficialApplicationSignUpFee);\r\n        require(applicationName.allLower());\r\n\r\n        HydroToken hydro = HydroToken(hydroTokenAddress);\r\n        uint256 hydroBalance = hydro.balanceOf(msg.sender);\r\n        require(hydroBalance >= hydroStakingMinimum);\r\n\r\n        bytes32 applicationNameHash = keccak256(applicationName);\r\n        require(!applicationNameHashTaken(applicationNameHash, false));\r\n        unofficialApplicationDirectory[applicationNameHash] = Application(applicationName, false, true);\r\n\r\n        emit ApplicationSignUp(applicationName, false);\r\n    }\r\n\r\n    // Allows the Hydro API to delete applications unilaterally\r\n    function deleteApplication(string applicationName, bool official) public onlyOwner {\r\n        bytes32 applicationNameHash = keccak256(applicationName);\r\n        require(applicationNameHashTaken(applicationNameHash, official));\r\n        if (official) {\r\n            delete officialApplicationDirectory[applicationNameHash];\r\n        } else {\r\n            delete unofficialApplicationDirectory[applicationNameHash];\r\n        }\r\n\r\n        emit ApplicationDeleted(applicationName, official);\r\n    }\r\n\r\n    // Allows the Hydro API to changes the unofficial user fee\r\n    function setUnofficialUserSignUpFee(uint newFee) public onlyOwner {\r\n        unofficialUserSignUpFee = newFee;\r\n    }\r\n\r\n    // Allows the Hydro API to changes the unofficial application fee\r\n    function setUnofficialApplicationSignUpFee(uint newFee) public onlyOwner {\r\n        unofficialApplicationSignUpFee = newFee;\r\n    }\r\n\r\n    // Allows the Hydro API to link to the Hydro token\r\n    function setHydroContractAddress(address _hydroTokenAddress) public onlyOwner {\r\n        hydroTokenAddress = _hydroTokenAddress;\r\n    }\r\n\r\n    // Allows the Hydro API to set a minimum hydro balance required to register unofficially\r\n    function setHydroStakingMinimum(uint newMinimum) public onlyOwner {\r\n        hydroStakingMinimum = newMinimum;\r\n    }\r\n\r\n    // Indicates whether a given user name has been claimed\r\n    function userNameTaken(string userName) public view returns (bool taken) {\r\n        bytes32 userNameHash = keccak256(userName);\r\n        return userDirectory[userNameHash]._initialized;\r\n    }\r\n\r\n    // Indicates whether a given application name has been claimed for official and unofficial applications\r\n    function applicationNameTaken(string applicationName)\r\n        public\r\n        view\r\n        returns (bool officialTaken, bool unofficialTaken)\r\n    {\r\n        bytes32 applicationNameHash = keccak256(applicationName);\r\n        return (\r\n            officialApplicationDirectory[applicationNameHash]._initialized,\r\n            unofficialApplicationDirectory[applicationNameHash]._initialized\r\n        );\r\n    }\r\n\r\n    // Returns user details by user name\r\n    function getUserByName(string userName) public view returns (address userAddress, bool official) {\r\n        bytes32 userNameHash = keccak256(userName);\r\n        require(userNameHashTaken(userNameHash));\r\n        User storage _user = userDirectory[userNameHash];\r\n\r\n        return (_user.userAddress, _user.official);\r\n    }\r\n\r\n    // Checks whether the provided (v, r, s) signature was created by the private key associated with _address\r\n    function isSigned(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\r\n        return ecrecover(messageHash, v, r, s) == _address;\r\n    }\r\n\r\n    // Common internal logic for all user signups\r\n    function _userSignUp(string userName, address userAddress, bool official) internal {\r\n        bytes32 userNameHash = keccak256(userName);\r\n        require(!userNameHashTaken(userNameHash));\r\n        userDirectory[userNameHash] = User(userName, userAddress, official, true);\r\n\r\n        emit UserSignUp(userName, userAddress, official);\r\n    }\r\n\r\n    // Internal check for whether a user name has been taken\r\n    function userNameHashTaken(bytes32 userNameHash) internal view returns (bool) {\r\n        return userDirectory[userNameHash]._initialized;\r\n    }\r\n\r\n    // Internal check for whether an application name has been taken\r\n    function applicationNameHashTaken(bytes32 applicationNameHash, bool official) internal view returns (bool) {\r\n        if (official) {\r\n            return officialApplicationDirectory[applicationNameHash]._initialized;\r\n        } else {\r\n            return unofficialApplicationDirectory[applicationNameHash]._initialized;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"applicationName\",\"type\":\"string\"},{\"name\":\"official\",\"type\":\"bool\"}],\"name\":\"deleteApplication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"setHydroStakingMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"getUserByName\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"official\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hydroTokenAddress\",\"type\":\"address\"}],\"name\":\"setHydroContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setUnofficialApplicationSignUpFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unofficialApplicationSignUpFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hydroTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"applicationName\",\"type\":\"string\"}],\"name\":\"unofficialApplicationSignUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unofficialUserSignUpFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setUnofficialUserSignUpFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hydroStakingMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deleteUserForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"applicationName\",\"type\":\"string\"}],\"name\":\"officialApplicationSignUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"applicationName\",\"type\":\"string\"}],\"name\":\"applicationNameTaken\",\"outputs\":[{\"name\":\"officialTaken\",\"type\":\"bool\"},{\"name\":\"unofficialTaken\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"unofficialUserSignUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"officialUserSignUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"userNameTaken\",\"outputs\":[{\"name\":\"taken\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"official\",\"type\":\"bool\"}],\"name\":\"UserSignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"official\",\"type\":\"bool\"}],\"name\":\"UserDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"applicationName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"official\",\"type\":\"bool\"}],\"name\":\"ApplicationSignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"applicationName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"official\",\"type\":\"bool\"}],\"name\":\"ApplicationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RaindropClient","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7578cab8c7d7042b8149156212956b294b80f373f7458c49c71139a0e1c96458"}]}