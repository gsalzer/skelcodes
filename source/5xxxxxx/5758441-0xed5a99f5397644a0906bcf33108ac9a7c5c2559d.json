{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract IGold {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function issueTokens(address _who, uint _tokens) public;\r\n    function burnTokens(address _who, uint _tokens) public;\r\n}\r\n\r\n// StdToken inheritance is commented, because no 'totalSupply' needed\r\ncontract IMNTP { /*is StdToken */\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n\r\n    // Additional methods that MNTP contract provides\r\n    function lockTransfer(bool _lock) public;\r\n    function issueTokens(address _who, uint _tokens) public;\r\n    function burnTokens(address _who, uint _tokens) public;\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n     }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n   function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract CreatorEnabled {\r\n\r\n    address public creator = 0x0;\r\n\r\n    modifier onlyCreator() { require(msg.sender == creator); _; }\r\n\r\n    function changeCreator(address _to) public onlyCreator {\r\n        creator = _to;\r\n    }\r\n}\r\n\r\ncontract StringMover {\r\n\r\n    function stringToBytes32(string s) public constant returns(bytes32){\r\n        bytes32 out;\r\n        assembly {\r\n             out := mload(add(s, 32))\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function stringToBytes64(string s) public constant returns(bytes32,bytes32){\r\n        bytes32 out;\r\n        bytes32 out2;\r\n\r\n        assembly {\r\n             out := mload(add(s, 32))\r\n             out2 := mload(add(s, 64))\r\n        }\r\n        return (out,out2);\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) public constant returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n             byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n             if (char != 0) {\r\n                  bytesString[charCount] = char;\r\n                  charCount++;\r\n             }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n             bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    function bytes64ToString(bytes32 x, bytes32 y) public constant returns (string) {\r\n        bytes memory bytesString = new bytes(64);\r\n        uint charCount = 0;\r\n\r\n        for (uint j = 0; j < 32; j++) {\r\n             byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n             if (char != 0) {\r\n                  bytesString[charCount] = char;\r\n                  charCount++;\r\n             }\r\n        }\r\n        for (j = 0; j < 32; j++) {\r\n             char = byte(bytes32(uint(y) * 2 ** (8 * j)));\r\n             if (char != 0) {\r\n                  bytesString[charCount] = char;\r\n                  charCount++;\r\n             }\r\n        }\r\n\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n             bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}\r\n\r\n\r\ncontract Storage is SafeMath, StringMover {\r\n\r\n    function Storage() public {\r\n        controllerAddress = msg.sender;\r\n    }\r\n\r\n    address public controllerAddress = 0x0;\r\n    modifier onlyController() { require(msg.sender==controllerAddress); _; }\r\n\r\n    function setControllerAddress(address _newController) public onlyController {\r\n        controllerAddress = _newController;\r\n    }\r\n\r\n    address public hotWalletAddress = 0x0;\r\n\r\n    function setHotWalletAddress(address _address) public onlyController {\r\n       hotWalletAddress = _address;\r\n    }\r\n\r\n\r\n    // Fields - 1\r\n    mapping(uint => string) docs;\r\n    uint public docCount = 0;\r\n\r\n    // Fields - 2\r\n    mapping(string => mapping(uint => int)) fiatTxs;\r\n    mapping(string => uint) fiatBalancesCents;\r\n    mapping(string => uint) fiatTxCounts;\r\n    uint fiatTxTotal = 0;\r\n\r\n    // Fields - 3\r\n    mapping(string => mapping(uint => int)) goldTxs;\r\n    mapping(string => uint) goldHotBalances;\r\n    mapping(string => uint) goldTxCounts;\r\n    uint goldTxTotal = 0;\r\n\r\n    // Fields - 4\r\n    struct Request {\r\n        address sender;\r\n        string userId;\r\n        uint reference;\r\n        bool buyRequest;         // otherwise - sell\r\n        uint inputAmount;\r\n        // 0 - init\r\n        // 1 - processed\r\n        // 2 - cancelled\r\n        uint8 state;\r\n        uint outputAmount;\r\n    }\r\n\r\n    mapping (uint=>Request) requests;\r\n    uint public requestsCount = 0;\r\n\r\n    ///////\r\n    function addDoc(string _ipfsDocLink) public onlyController returns(uint) {\r\n        docs[docCount] = _ipfsDocLink;\r\n        uint out = docCount;\r\n        docCount++;\r\n\r\n        return out;\r\n    }\r\n\r\n    function getDocCount() public constant returns (uint) {\r\n        return docCount;\r\n    }\r\n\r\n    function getDocAsBytes64(uint _index) public constant returns (bytes32,bytes32) {\r\n        require(_index < docCount);\r\n        return stringToBytes64(docs[_index]);\r\n    }\r\n\r\n    function addFiatTransaction(string _userId, int _amountCents) public onlyController returns(uint) {\r\n        require(0 != _amountCents);\r\n\r\n        uint c = fiatTxCounts[_userId];\r\n\r\n        fiatTxs[_userId][c] = _amountCents;\r\n\r\n        if (_amountCents > 0) {\r\n            fiatBalancesCents[_userId] = safeAdd(fiatBalancesCents[_userId], uint(_amountCents));\r\n        } else {\r\n            fiatBalancesCents[_userId] = safeSub(fiatBalancesCents[_userId], uint(-_amountCents));\r\n        }\r\n\r\n        fiatTxCounts[_userId] = safeAdd(fiatTxCounts[_userId], 1);\r\n\r\n        fiatTxTotal++;\r\n        return c;\r\n    }\r\n\r\n    function getFiatTransactionsCount(string _userId) public constant returns (uint) {\r\n        return fiatTxCounts[_userId];\r\n    }\r\n\r\n    function getAllFiatTransactionsCount() public constant returns (uint) {\r\n        return fiatTxTotal;\r\n    }\r\n\r\n    function getFiatTransaction(string _userId, uint _index) public constant returns(int) {\r\n        require(_index < fiatTxCounts[_userId]);\r\n        return fiatTxs[_userId][_index];\r\n    }\r\n\r\n    function getUserFiatBalance(string _userId) public constant returns(uint) {\r\n        return fiatBalancesCents[_userId];\r\n    }\r\n\r\n    function addGoldTransaction(string _userId, int _amount) public onlyController returns(uint) {\r\n        require(0 != _amount);\r\n\r\n        uint c = goldTxCounts[_userId];\r\n\r\n        goldTxs[_userId][c] = _amount;\r\n\r\n        if (_amount > 0) {\r\n            goldHotBalances[_userId] = safeAdd(goldHotBalances[_userId], uint(_amount));\r\n        } else {\r\n            goldHotBalances[_userId] = safeSub(goldHotBalances[_userId], uint(-_amount));\r\n        }\r\n\r\n        goldTxCounts[_userId] = safeAdd(goldTxCounts[_userId], 1);\r\n\r\n        goldTxTotal++;\r\n        return c;\r\n    }\r\n\r\n    function getGoldTransactionsCount(string _userId) public constant returns (uint) {\r\n        return goldTxCounts[_userId];\r\n    }\r\n\r\n    function getAllGoldTransactionsCount() public constant returns (uint) {\r\n        return goldTxTotal;\r\n    }\r\n\r\n    function getGoldTransaction(string _userId, uint _index) public constant returns(int) {\r\n        require(_index < goldTxCounts[_userId]);\r\n        return goldTxs[_userId][_index];\r\n    }\r\n\r\n    function getUserHotGoldBalance(string _userId) public constant returns(uint) {\r\n        return goldHotBalances[_userId];\r\n    }\r\n\r\n    function addBuyTokensRequest(address _who, string _userId, uint _reference, uint _amount) public onlyController returns(uint) {\r\n\r\n        Request memory r;\r\n        r.sender = _who;\r\n        r.userId = _userId;\r\n        r.reference = _reference;\r\n        r.buyRequest = true;\r\n        r.inputAmount = _amount;\r\n        r.state = 0;\r\n\r\n        requests[requestsCount] = r;\r\n        uint out = requestsCount;\r\n        requestsCount++;\r\n        return out;\r\n    }\r\n\r\n    function addSellTokensRequest(address _who, string _userId, uint _reference, uint _amount) public onlyController returns(uint) {\r\n        Request memory r;\r\n        r.sender = _who;\r\n        r.userId = _userId;\r\n        r.reference = _reference;\r\n        r.buyRequest = false;\r\n        r.inputAmount = _amount;\r\n        r.state = 0;\r\n\r\n        requests[requestsCount] = r;\r\n        uint out = requestsCount;\r\n        requestsCount++;\r\n        return out;\r\n    }\r\n\r\n    function getRequestsCount() public constant returns(uint) {\r\n        return requestsCount;\r\n    }\r\n\r\n    function getRequest(uint _index) public constant returns(address, bytes32, uint, bool, uint8, uint) {\r\n        require(_index < requestsCount);\r\n\r\n        Request memory r = requests[_index];\r\n\r\n        bytes32 userBytes = stringToBytes32(r.userId);\r\n\r\n        return (r.sender, userBytes, r.reference, r.buyRequest, r.state, r.inputAmount);\r\n    }\r\n    \r\n    function getRequestBaseInfo(uint _index) public constant returns(address, uint8, uint, uint) {\r\n        require(_index < requestsCount);\r\n\r\n        Request memory r = requests[_index];\r\n\r\n        return (r.sender, r.state, r.inputAmount, r.outputAmount);\r\n    }\r\n\r\n    function cancelRequest(uint _index) onlyController public {\r\n        require(_index < requestsCount);\r\n        require(0==requests[_index].state);\r\n\r\n        requests[_index].state = 2;\r\n    }\r\n\r\n    function setRequestFailed(uint _index) onlyController public {\r\n        require(_index < requestsCount);\r\n        require(0==requests[_index].state);\r\n\r\n        requests[_index].state = 3;\r\n    }\r\n\r\n    function setRequestProcessed(uint _index, uint _outputAmount) onlyController public {\r\n        require(_index < requestsCount);\r\n        require(0==requests[_index].state);\r\n\r\n        requests[_index].state = 1;\r\n        requests[_index].outputAmount = _outputAmount;\r\n    }\r\n}\r\n\r\ncontract GoldIssueBurnFee is CreatorEnabled, StringMover {\r\n\r\n    string gmUserId = \"\";\r\n\r\n    // Functions:\r\n    function GoldIssueBurnFee(string _gmUserId) public {\r\n        creator = msg.sender;\r\n        gmUserId = _gmUserId;\r\n    }\r\n\r\n    function getGoldmintFeeAccount() public constant returns(bytes32) {\r\n        bytes32 userBytes = stringToBytes32(gmUserId);\r\n        return userBytes;\r\n    }\r\n\r\n    function setGoldmintFeeAccount(string _gmUserId) public onlyCreator {\r\n        gmUserId = _gmUserId;\r\n    }\r\n\r\n    function calculateIssueGoldFee(uint _mntpBalance, uint _value, bool _forFiat) public constant returns(uint) {\r\n        return 0;\r\n    }\r\n\r\n    function calculateBurnGoldFee(uint _mntpBalance, uint _value, bool _forFiat) public constant returns(uint) {\r\n\r\n        // if burn is for crypocurrencies, then fee is 0.1%\r\n        if (!_forFiat) return (1 * _value / 1000);\r\n\r\n\r\n        // If the sender holds 0 MNTP, then the fee is 3%,\r\n        // If the sender holds at least 10 MNTP, then the fee is 2%,\r\n        // If the sender holds at least 1000 MNTP, then the fee is 1.5%,\r\n        // If the sender holds at least 10000 MNTP, then the fee is 1%,\r\n        if (_mntpBalance >= (10000 * 1 ether)) {\r\n             return (75 * _value / 10000);\r\n        }\r\n\r\n        if (_mntpBalance >= (1000 * 1 ether)) {\r\n             return (15 * _value / 1000);\r\n        }\r\n\r\n        if (_mntpBalance >= (10 * 1 ether)) {\r\n             return (25 * _value / 1000);\r\n        }\r\n\r\n        // 3%\r\n        return (3 * _value / 100);\r\n    }\r\n}\r\n\r\ncontract IGoldIssueBurnFee {\r\n\r\n    function getGoldmintFeeAccount()public constant returns(bytes32);\r\n    function calculateIssueGoldFee(uint _mntpBalance, uint _goldValue, bool _forFiat) public constant returns(uint);\r\n    function calculateBurnGoldFee(uint _mntpBalance, uint _goldValue, bool _forFiat) public constant returns(uint);\r\n}\r\n\r\ncontract StorageController is SafeMath, CreatorEnabled, StringMover {\r\n\r\n    Storage public stor;\r\n    IMNTP public mntpToken;\r\n    IGold public goldToken;\r\n    IGoldIssueBurnFee public goldIssueBurnFee;\r\n\r\n    address public managerAddress = 0x0;\r\n\r\n    event TokenBuyRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index);\r\n    event TokenSellRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index);\r\n    event RequestCancelled(uint indexed _index);\r\n    event RequestProcessed(uint indexed _index);\r\n    event RequestFailed(uint indexed _index);\r\n\r\n    modifier onlyManagerOrCreator() { require(msg.sender == managerAddress || msg.sender == creator); _; }\r\n\r\n    function StorageController(address _mntpContractAddress, address _goldContractAddress, address _storageAddress, address _goldIssueBurnFeeContract) public {\r\n        creator = msg.sender;\r\n\r\n        if (0 != _storageAddress) {\r\n             // use existing storage\r\n             stor = Storage(_storageAddress);\r\n        } else {\r\n             stor = new Storage();\r\n        }\r\n\r\n        require(0x0!=_mntpContractAddress);\r\n        require(0x0!=_goldContractAddress);\r\n        require(0x0!=_goldIssueBurnFeeContract);\r\n\r\n        mntpToken = IMNTP(_mntpContractAddress);\r\n        goldToken = IGold(_goldContractAddress);\r\n        goldIssueBurnFee = IGoldIssueBurnFee(_goldIssueBurnFeeContract);\r\n    }\r\n\r\n    function setManagerAddress(address _address) public onlyCreator {\r\n       managerAddress = _address;\r\n    }\r\n\r\n    // Only old controller can call setControllerAddress\r\n    function changeController(address _newController) public onlyCreator {\r\n        stor.setControllerAddress(_newController);\r\n    }\r\n\r\n    function setHotWalletAddress(address _hotWalletAddress) public onlyCreator {\r\n       stor.setHotWalletAddress(_hotWalletAddress);\r\n    }\r\n\r\n    function getHotWalletAddress() public constant returns (address) {\r\n        return stor.hotWalletAddress();\r\n    }\r\n\r\n    function changeGoldIssueBurnFeeContract(address _goldIssueBurnFeeAddress) public onlyCreator {\r\n        goldIssueBurnFee = IGoldIssueBurnFee(_goldIssueBurnFeeAddress);\r\n    }\r\n\r\n    function addDoc(string _ipfsDocLink) public onlyManagerOrCreator returns(uint) {\r\n        return stor.addDoc(_ipfsDocLink);\r\n    }\r\n\r\n    function getDocCount() public constant returns (uint) {\r\n        return stor.getDocCount();\r\n    }\r\n\r\n    function getDoc(uint _index) public constant returns (string) {\r\n        bytes32 x;\r\n        bytes32 y;\r\n        (x, y) = stor.getDocAsBytes64(_index);\r\n        return bytes64ToString(x,y);\r\n    }\r\n\r\n\r\n    function addGoldTransaction(string _userId, int _amount) public onlyManagerOrCreator returns(uint) {\r\n        return stor.addGoldTransaction(_userId, _amount);\r\n    }\r\n\r\n    function getGoldTransactionsCount(string _userId) public constant returns (uint) {\r\n        return stor.getGoldTransactionsCount(_userId);\r\n    }\r\n\r\n    function getAllGoldTransactionsCount() public constant returns (uint) {\r\n        return stor.getAllGoldTransactionsCount();\r\n    }\r\n\r\n    function getGoldTransaction(string _userId, uint _index) public constant returns(int) {\r\n        require(keccak256(_userId) != keccak256(\"\"));\r\n\r\n        return stor.getGoldTransaction(_userId, _index);\r\n    }\r\n\r\n    function getUserHotGoldBalance(string _userId) public constant returns(uint) {\r\n        require(keccak256(_userId) != keccak256(\"\"));\r\n\r\n        return stor.getUserHotGoldBalance(_userId);\r\n    }\r\n\r\n    function addBuyTokensRequest(string _userId, uint _reference) public payable returns(uint) {\r\n        require(keccak256(_userId) != keccak256(\"\"));\r\n        require(msg.value > 0);\r\n\r\n        uint reqIndex = stor.addBuyTokensRequest(msg.sender, _userId, _reference, msg.value);\r\n\r\n        TokenBuyRequest(msg.sender, _userId, _reference, msg.value, reqIndex);\r\n\r\n        return reqIndex;\r\n    }\r\n\r\n    function addSellTokensRequest(string _userId, uint _reference, uint _amount) public returns(uint) {\r\n        require(keccak256(_userId) != keccak256(\"\"));\r\n        require(_amount > 0);\r\n\r\n        uint tokenBalance = goldToken.balanceOf(msg.sender);\r\n\r\n        require(tokenBalance >= _amount);\r\n\r\n        burnGoldTokens(msg.sender, _amount);\r\n\r\n        uint reqIndex = stor.addSellTokensRequest(msg.sender, _userId, _reference, _amount);\r\n\r\n        TokenSellRequest(msg.sender, _userId, _reference, _amount, reqIndex);\r\n\r\n        return reqIndex;\r\n    }\r\n\r\n    function getRequestsCount() public constant returns(uint) {\r\n        return stor.getRequestsCount();\r\n    }\r\n\r\n    function getRequest(uint _index) public constant returns(address, string, uint, bool, uint8, uint) {\r\n        address sender;\r\n        bytes32 userIdBytes;\r\n        uint reference;\r\n        bool buy;\r\n        uint8 state;\r\n        uint inputAmount;\r\n\r\n        (sender, userIdBytes, reference, buy, state, inputAmount) = stor.getRequest(_index);\r\n\r\n        string memory userId = bytes32ToString(userIdBytes);\r\n        \r\n        return (sender, userId, reference, buy, state, inputAmount);\r\n    }\r\n    \r\n    function getRequestBaseInfo(uint _index) public constant returns(address, uint8, uint, uint) {\r\n        return stor.getRequestBaseInfo(_index);\r\n    }\r\n\r\n    function cancelRequest(uint _index) onlyManagerOrCreator public {\r\n\r\n        address sender;\r\n        string memory userId;\r\n        uint reference;\r\n        bool isBuy;\r\n        uint state;\r\n        uint inputAmount;\r\n        (sender, userId, reference, isBuy, state, inputAmount) = getRequest(_index);\r\n        require(0 == state);\r\n\r\n        if (isBuy) {\r\n            sender.transfer(inputAmount);\r\n        } else {\r\n            goldToken.issueTokens(sender, inputAmount);\r\n        }\r\n\r\n        stor.cancelRequest(_index);\r\n\r\n        RequestCancelled(_index);\r\n    }\r\n\r\n    function processRequest(uint _index, uint _weiPerGold) onlyManagerOrCreator public returns(bool) {\r\n        require(_index < getRequestsCount());\r\n\r\n        address sender;\r\n        string memory userId;\r\n        uint reference;\r\n        bool isBuy;\r\n        uint state;\r\n        uint inputAmount;\r\n        \r\n        (sender, userId, reference, isBuy, state, inputAmount) = getRequest(_index);\r\n        require(0 == state);\r\n\r\n        bool processResult = false;\r\n        uint outputAmount = 0;\r\n\r\n        if (isBuy) {\r\n            (processResult, outputAmount) = processBuyRequest(userId, sender, inputAmount, _weiPerGold, false);\r\n        } else {\r\n            (processResult, outputAmount) = processSellRequest(userId, sender, inputAmount, _weiPerGold, false);\r\n        }\r\n\r\n        if (processResult) {\r\n            stor.setRequestProcessed(_index, outputAmount);\r\n            RequestProcessed(_index);\r\n        } else {\r\n            stor.setRequestFailed(_index);\r\n            RequestFailed(_index);\r\n        }\r\n\r\n        return processResult;\r\n    }\r\n\r\n    function processBuyRequestFiat(string _userId, uint _reference, address _userAddress, uint _amountCents, uint _centsPerGold) onlyManagerOrCreator public returns(bool) {\r\n      \r\n      uint reqIndex = stor.addBuyTokensRequest(_userAddress, _userId, _reference, _amountCents);\r\n\r\n      bool processResult = false;\r\n      uint outputAmount = 0;\r\n        \r\n      (processResult, outputAmount) = processBuyRequest(_userId, _userAddress, _amountCents * 1 ether, _centsPerGold * 1 ether, true);\r\n\r\n      if (processResult) {\r\n        stor.setRequestProcessed(reqIndex, outputAmount);\r\n        RequestProcessed(reqIndex);\r\n      } else {\r\n        stor.setRequestFailed(reqIndex);\r\n        RequestFailed(reqIndex);\r\n      }\r\n\r\n      return processResult;\r\n    }\r\n\r\n    function processSellRequestFiat(uint _index, uint _centsPerGold) onlyManagerOrCreator public returns(bool) {\r\n        require(_index < getRequestsCount());\r\n\r\n        address sender;\r\n        string memory userId;\r\n        uint reference;\r\n        bool isBuy;\r\n        uint state;\r\n        uint inputAmount;\r\n        (sender, userId, reference, isBuy, state, inputAmount) = getRequest(_index);\r\n        require(0 == state);\r\n\r\n        \r\n        // fee\r\n        uint userMntpBalance = mntpToken.balanceOf(sender);\r\n        uint fee = goldIssueBurnFee.calculateBurnGoldFee(userMntpBalance, inputAmount, true);\r\n\r\n        require(inputAmount > fee);\r\n\r\n        if (fee > 0) {\r\n             inputAmount = safeSub(inputAmount, fee);\r\n        }\r\n\r\n        require(inputAmount > 0);\r\n\r\n        uint resultAmount = inputAmount * _centsPerGold / 1 ether;\r\n        \r\n        stor.setRequestProcessed(_index, resultAmount);\r\n        RequestProcessed(_index);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function processBuyRequest(string _userId, address _userAddress, uint _amountWei, uint _weiPerGold, bool _isFiat) internal returns(bool, uint) {\r\n        require(keccak256(_userId) != keccak256(\"\"));\r\n\r\n        uint userMntpBalance = mntpToken.balanceOf(_userAddress);\r\n        uint fee = goldIssueBurnFee.calculateIssueGoldFee(userMntpBalance, _amountWei, _isFiat);\r\n        require(_amountWei > fee);\r\n\r\n        // issue tokens minus fee\r\n        uint amountWeiMinusFee = _amountWei;\r\n        if (fee > 0) {\r\n            amountWeiMinusFee = safeSub(_amountWei, fee);\r\n        }\r\n\r\n        require(amountWeiMinusFee > 0);\r\n\r\n        uint tokensWei = safeDiv(uint(amountWeiMinusFee) * 1 ether, _weiPerGold);\r\n\r\n        issueGoldTokens(_userAddress, tokensWei);\r\n\r\n        // request from hot wallet\r\n        if (isHotWallet(_userAddress)) {\r\n            addGoldTransaction(_userId, int(tokensWei));\r\n        }\r\n\r\n        return (true, tokensWei);\r\n    }\r\n\r\n    function processSellRequest(string _userId, address _userAddress, uint _amountWei, uint _weiPerGold, bool _isFiat) internal returns(bool, uint) {\r\n        require(keccak256(_userId) != keccak256(\"\"));\r\n\r\n        uint amountWei = safeMul(_amountWei, _weiPerGold) / 1 ether;\r\n\r\n        require(amountWei > 0);\r\n        // request from hot wallet\r\n        if (isHotWallet(_userAddress)) {\r\n            // TODO: overflow\r\n            addGoldTransaction(_userId, - int(_amountWei));\r\n        }\r\n\r\n        // fee\r\n        uint userMntpBalance = mntpToken.balanceOf(_userAddress);\r\n        uint fee = goldIssueBurnFee.calculateBurnGoldFee(userMntpBalance, amountWei, _isFiat);\r\n\r\n        require(amountWei > fee);\r\n\r\n        uint amountWeiMinusFee = amountWei;\r\n\r\n        if (fee > 0) {\r\n             amountWeiMinusFee = safeSub(amountWei, fee);\r\n        }\r\n\r\n        require(amountWeiMinusFee > 0);\r\n\r\n        if (amountWeiMinusFee > this.balance) {\r\n            issueGoldTokens(_userAddress, _amountWei);\r\n            return (false, 0);\r\n        }\r\n\r\n        _userAddress.transfer(amountWeiMinusFee);\r\n\r\n        return (true, amountWeiMinusFee);\r\n    }\r\n\r\n\r\n\r\n    //////// INTERNAL REQUESTS FROM HOT WALLET\r\n    function processInternalRequest(string _userId, bool _isBuy, uint _amountCents, uint _centsPerGold) onlyManagerOrCreator public {\r\n      if (_isBuy) {\r\n          processBuyRequest(_userId, getHotWalletAddress(), _amountCents, _centsPerGold, true);\r\n      } else {\r\n          processSellRequest(_userId, getHotWalletAddress(), _amountCents, _centsPerGold, true);\r\n      }\r\n    }\r\n\r\n    function transferGoldFromHotWallet(address _to, uint _value, string _userId) onlyManagerOrCreator public {\r\n      require(keccak256(_userId) != keccak256(\"\"));\r\n\r\n      uint balance = getUserHotGoldBalance(_userId);\r\n      require(balance >= _value);\r\n\r\n      goldToken.burnTokens(getHotWalletAddress(), _value);\r\n      goldToken.issueTokens(_to, _value);\r\n\r\n      addGoldTransaction(_userId, -int(_value));\r\n    }\r\n\r\n\r\n    function withdrawEth(address _userAddress, uint _value) onlyManagerOrCreator public {\r\n        require(_value >= 0.1 * 1 ether);\r\n\r\n        if (this.balance < _value) _value = this.balance;\r\n\r\n        _userAddress.transfer(_value);\r\n    }\r\n\r\n    function withdrawTokens(address _userAddress, uint _value) onlyManagerOrCreator public {\r\n        burnGoldTokens(address(this), _value);\r\n\r\n        issueGoldTokens(_userAddress, _value);\r\n    }\r\n\r\n    ////////\r\n    function issueGoldTokens(address _userAddress, uint _tokenAmount) internal {\r\n        require(0!=_tokenAmount);\r\n        goldToken.issueTokens(_userAddress, _tokenAmount);\r\n    }\r\n\r\n    function burnGoldTokens(address _userAddress, uint _tokenAmount) internal {\r\n        require(0!=_tokenAmount);\r\n        goldToken.burnTokens(_userAddress, _tokenAmount);\r\n    }\r\n\r\n    function isHotWallet(address _address) internal returns(bool) {\r\n       return _address == getHotWalletAddress();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"},{\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"bytes64ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mntpBalance\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_forFiat\",\"type\":\"bool\"}],\"name\":\"calculateIssueGoldFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mntpBalance\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_forFiat\",\"type\":\"bool\"}],\"name\":\"calculateBurnGoldFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gmUserId\",\"type\":\"string\"}],\"name\":\"setGoldmintFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGoldmintFeeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToBytes64\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gmUserId\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GoldIssueBurnFee","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b5fb87c866e7dd1ba033a3a9237e9b7b1d8377377fe060a3315e01a010e1b8a6"}]}