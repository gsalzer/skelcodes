{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Autonomy is Ownable {\r\n    address public congress;\r\n    bool init = false;\r\n\r\n    modifier onlyCongress() {\r\n        require(msg.sender == congress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev initialize a Congress contract address for this token \r\n     *\r\n     * @param _congress address the congress contract address\r\n     */\r\n    function initialCongress(address _congress) onlyOwner public {\r\n        require(!init);\r\n        require(_congress != address(0));\r\n        congress = _congress;\r\n        init = true;\r\n    }\r\n\r\n    /**\r\n     * @dev set a Congress contract address for this token\r\n     * must change this address by the last congress contract \r\n     *\r\n     * @param _congress address the congress contract address\r\n     */\r\n    function changeCongress(address _congress) onlyCongress public {\r\n        require(_congress != address(0));\r\n        congress = _congress;\r\n    }\r\n}\r\n\r\ncontract withdrawable is Ownable {\r\n    event ReceiveEther(address _from, uint256 _value);\r\n    event WithdrawEther(address _to, uint256 _value);\r\n    event WithdrawToken(address _token, address _to, uint256 _value);\r\n\r\n    /**\r\n\t * @dev recording receiving ether from msn.sender\r\n\t */\r\n    function () payable public {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n\t * @dev withdraw,send ether to target\r\n\t * @param _to is where the ether will be sent to\r\n\t *        _amount is the number of the ether\r\n\t */\r\n    function withdraw(address _to, uint _amount) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        _to.transfer(_amount);\r\n        emit WithdrawEther(_to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t * @dev withdraw tokens, send tokens to target\r\n     *\r\n     * @param _token the token address that will be withdraw\r\n\t * @param _to is where the tokens will be sent to\r\n\t *        _value is the number of the token\r\n\t */\r\n    function withdrawToken(address _token, address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        require(_token != address(0));\r\n\r\n        ERC20 tk = ERC20(_token);\r\n        tk.transfer(_to, _value);\r\n        emit WithdrawToken(_token, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev receive approval from an ERC20 token contract, and then gain the tokens, \r\n     *      then take a record\r\n     *\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _value uint256 the amounts of tokens to be sent\r\n     * @param _token address the ERC20 token address\r\n     * @param _extraData bytes the extra data for the record\r\n     */\r\n    // function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n    //     require(_token != address(0));\r\n    //     require(_from != address(0));\r\n        \r\n    //     ERC20 tk = ERC20(_token);\r\n    //     require(tk.transferFrom(_from, this, _value));\r\n        \r\n    //     emit ReceiveDeposit(_from, _value, _token, _extraData);\r\n    // }\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract TokenDestructible is Ownable {\r\n\r\n  function TokenDestructible() public payable { }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\r\n   refund.\r\n   * @notice The called token contracts could try to re-enter this contract. Only\r\n   supply token contracts you trust.\r\n   */\r\n  function destroy(address[] tokens) onlyOwner public {\r\n\r\n    // Transfer tokens to owner\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      ERC20Basic token = ERC20Basic(tokens[i]);\r\n      uint256 balance = token.balanceOf(this);\r\n      token.transfer(owner, balance);\r\n    }\r\n\r\n    // Transfer Eth to owner and terminate contract\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract OwnerContract is Claimable {\r\n    Claimable public ownedContract;\r\n    address internal origOwner;\r\n\r\n    /**\r\n     * @dev bind a contract as its owner\r\n     *\r\n     * @param _contract the contract address that will be binded by this Owner Contract\r\n     */\r\n    function bindContract(address _contract) onlyOwner public returns (bool) {\r\n        require(_contract != address(0));\r\n        ownedContract = Claimable(_contract);\r\n        origOwner = ownedContract.owner();\r\n\r\n        // take ownership of the owned contract\r\n        ownedContract.claimOwnership();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to the original one. \r\n     *\r\n     */\r\n    function transferOwnershipBack() onlyOwner public {\r\n        ownedContract.transferOwnership(origOwner);\r\n        ownedContract = Claimable(address(0));\r\n        origOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to another one. \r\n     *\r\n     * @param _nextOwner the contract address that will be next Owner of the original Contract\r\n     */\r\n    function changeOwnershipto(address _nextOwner)  onlyOwner public {\r\n        ownedContract.transferOwnership(_nextOwner);\r\n        ownedContract = Claimable(address(0));\r\n        origOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract DepositWithdraw is Claimable, withdrawable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * transaction record\r\n     */\r\n    struct TransferRecord {\r\n        uint256 timeStamp;\r\n        address account;\r\n        uint256 value;\r\n    }\r\n    \r\n    /**\r\n     * accumulated transferring amount record\r\n     */\r\n    struct accumulatedRecord {\r\n        uint256 mul;\r\n        uint256 count;\r\n        uint256 value;\r\n    }\r\n\r\n    TransferRecord[] deposRecs; // record all the deposit tx data\r\n    TransferRecord[] withdrRecs; // record all the withdraw tx data\r\n\r\n    accumulatedRecord dayWithdrawRec; // accumulated amount record for one day\r\n    accumulatedRecord monthWithdrawRec; // accumulated amount record for one month\r\n\r\n    address wallet; // the binded withdraw address\r\n\r\n    event ReceiveDeposit(address _from, uint256 _value, address _token, bytes _extraData);\r\n    \r\n    /**\r\n     * @dev constructor of the DepositWithdraw contract\r\n     * @param _wallet the binded wallet address to this depositwithdraw contract\r\n     */\r\n    constructor(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n\t * @dev set the default wallet address\r\n\t * @param _wallet the default wallet address binded to this deposit contract\r\n\t */\r\n    function setWithdrawWallet(address _wallet) onlyOwner public returns (bool) {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t * @dev util function to change bytes data to bytes32 data\r\n\t * @param _data the bytes data to be converted\r\n\t */\r\n    function bytesToBytes32(bytes _data) public pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_data, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev receive approval from an ERC20 token contract, take a record\r\n     *\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _value uint256 the amounts of tokens to be sent\r\n     * @param _token address the ERC20 token address\r\n     * @param _extraData bytes the extra data for the record\r\n     */\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) onlyOwner public {\r\n        require(_token != address(0));\r\n        require(_from != address(0));\r\n        \r\n        ERC20 tk = ERC20(_token);\r\n        require(tk.transferFrom(_from, this, _value));\r\n        bytes32 timestamp = bytesToBytes32(_extraData);\r\n        deposRecs.push(TransferRecord(uint256(timestamp), _from, _value));\r\n        emit ReceiveDeposit(_from, _value, _token, _extraData);\r\n    }\r\n\r\n    /**\r\n\t * @dev withdraw tokens, send tokens to target\r\n     *\r\n     * @param _token the token address that will be withdraw\r\n     * @param _params the limitation parameters for withdraw\r\n     * @param _time the timstamp of the withdraw time\r\n\t * @param _to is where the tokens will be sent to\r\n\t *        _value is the number of the token\r\n     *        _fee is the amount of the transferring costs\r\n     *        _tokenReturn is the address that return back the tokens of the _fee\r\n\t */\r\n    function withdrawToken(address _token, address _params, uint256 _time, address _to, uint256 _value, uint256 _fee, address _tokenReturn) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        require(_token != address(0));\r\n        require(_value > _fee);\r\n        // require(_tokenReturn != address(0));\r\n\r\n        DRCWalletMgrParams params = DRCWalletMgrParams(_params);\r\n        require(_value <= params.singleWithdrawMax());\r\n        require(_value >= params.singleWithdrawMin());\r\n\r\n        uint256 daysCount = _time.div(86400); // one day of seconds\r\n        if (daysCount <= dayWithdrawRec.mul) {\r\n            dayWithdrawRec.count = dayWithdrawRec.count.add(1);\r\n            dayWithdrawRec.value = dayWithdrawRec.value.add(_value);\r\n            require(dayWithdrawRec.count <= params.dayWithdrawCount());\r\n            require(dayWithdrawRec.value <= params.dayWithdraw());\r\n        } else {\r\n            dayWithdrawRec.mul = daysCount;\r\n            dayWithdrawRec.count = 1;\r\n            dayWithdrawRec.value = _value;\r\n        }\r\n        \r\n        uint256 monthsCount = _time.div(86400 * 30);\r\n        if (monthsCount <= monthWithdrawRec.mul) {\r\n            monthWithdrawRec.count = monthWithdrawRec.count.add(1);\r\n            monthWithdrawRec.value = monthWithdrawRec.value.add(_value);\r\n            require(monthWithdrawRec.value <= params.monthWithdraw());\r\n        } else {            \r\n            monthWithdrawRec.mul = monthsCount;\r\n            monthWithdrawRec.count = 1;\r\n            monthWithdrawRec.value = _value;\r\n        }\r\n\r\n        ERC20 tk = ERC20(_token);\r\n        uint256 realAmount = _value.sub(_fee);\r\n        require(tk.transfer(_to, realAmount));\r\n        if (_tokenReturn != address(0) && _fee > 0) {\r\n            require(tk.transfer(_tokenReturn, _fee));\r\n        }\r\n\r\n        withdrRecs.push(TransferRecord(_time, _to, realAmount));\r\n        emit WithdrawToken(_token, _to, realAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t * @dev withdraw tokens, send tokens to target default wallet\r\n     *\r\n     * @param _token the token address that will be withdraw\r\n     * @param _params the limitation parameters for withdraw\r\n     * @param _time the timestamp occur the withdraw record\r\n\t * @param _value is the number of the token\r\n     *        _fee is the amount of the transferring costs\r\n     *        —tokenReturn is the address that return back the tokens of the _fee\r\n\t */\r\n    function withdrawTokenToDefault(address _token, address _params, uint256 _time, uint256 _value, uint256 _fee, address _tokenReturn) public onlyOwner returns (bool) {\r\n        return withdrawToken(_token, _params, _time, wallet, _value, _fee, _tokenReturn);\r\n    }\r\n\r\n    /**\r\n\t * @dev get the Deposit records number\r\n     *\r\n     */\r\n    function getDepositNum() public view returns (uint256) {\r\n        return deposRecs.length;\r\n    }\r\n\r\n    /**\r\n\t * @dev get the one of the Deposit records\r\n     *\r\n     * @param _ind the deposit record index\r\n     */\r\n    function getOneDepositRec(uint256 _ind) public view returns (uint256, address, uint256) {\r\n        require(_ind < deposRecs.length);\r\n\r\n        return (deposRecs[_ind].timeStamp, deposRecs[_ind].account, deposRecs[_ind].value);\r\n    }\r\n\r\n    /**\r\n\t * @dev get the withdraw records number\r\n     *\r\n     */\r\n    function getWithdrawNum() public view returns (uint256) {\r\n        return withdrRecs.length;\r\n    }\r\n    \r\n    /**\r\n\t * @dev get the one of the withdraw records\r\n     *\r\n     * @param _ind the withdraw record index\r\n     */\r\n    function getOneWithdrawRec(uint256 _ind) public view returns (uint256, address, uint256) {\r\n        require(_ind < withdrRecs.length);\r\n\r\n        return (withdrRecs[_ind].timeStamp, withdrRecs[_ind].account, withdrRecs[_ind].value);\r\n    }\r\n}\r\n\r\ncontract DRCWalletManager is OwnerContract, withdrawable, Destructible, TokenDestructible {\r\n    using SafeMath for uint256;\r\n    \r\n    /**\r\n     * withdraw wallet description\r\n     */\r\n    struct WithdrawWallet {\r\n        bytes32 name;\r\n        address walletAddr;\r\n    }\r\n\r\n    /**\r\n     * Deposit data storage\r\n     */\r\n    struct DepositRepository {\r\n        // uint256 balance;\r\n        uint256 frozen;\r\n        WithdrawWallet[] withdrawWallets;\r\n        // mapping (bytes32 => address) withdrawWallets;\r\n    }\r\n\r\n    mapping (address => DepositRepository) depositRepos;\r\n    mapping (address => address) walletDeposits;\r\n    mapping (address => bool) public frozenDeposits;\r\n\r\n    ERC20 public tk; // the token will be managed\r\n    DRCWalletMgrParams params; // the parameters that the management needs\r\n    \r\n    event CreateDepositAddress(address indexed _wallet, address _deposit);\r\n    event FrozenTokens(address indexed _deposit, uint256 _value);\r\n    event ChangeDefaultWallet(address indexed _oldWallet, address _newWallet);\r\n\r\n    /**\r\n\t * @dev withdraw tokens, send tokens to target default wallet\r\n     *\r\n     * @param _token the token address that will be withdraw\r\n     * @param _walletParams the wallet management parameters\r\n\t */\r\n    function bindToken(address _token, address _walletParams) onlyOwner public returns (bool) {\r\n        require(_token != address(0));\r\n        require(_walletParams != address(0));\r\n\r\n        tk = ERC20(_token);\r\n        params = DRCWalletMgrParams(_walletParams);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n\t * @dev create deposit contract address for the default withdraw wallet\r\n     *\r\n     * @param _wallet the binded default withdraw wallet address\r\n\t */\r\n    function createDepositContract(address _wallet) onlyOwner public returns (address) {\r\n        require(_wallet != address(0));\r\n\r\n        DepositWithdraw deposWithdr = new DepositWithdraw(_wallet); // new contract for deposit\r\n        address _deposit = address(deposWithdr);\r\n        walletDeposits[_wallet] = _deposit;\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        withdrawWalletList.push(WithdrawWallet(\"default wallet\", _wallet));\r\n        // depositRepos[_deposit].balance = 0;\r\n        depositRepos[_deposit].frozen = 0;\r\n\r\n        emit CreateDepositAddress(_wallet, address(deposWithdr));\r\n        return deposWithdr;\r\n    }\r\n    \r\n    /**\r\n\t * @dev get deposit contract address by using the default withdraw wallet\r\n     *\r\n     * @param _wallet the binded default withdraw wallet address\r\n\t */\r\n    function getDepositAddress(address _wallet) onlyOwner public view returns (address) {\r\n        require(_wallet != address(0));\r\n        address deposit = walletDeposits[_wallet];\r\n\r\n        return deposit;\r\n    }\r\n    \r\n    /**\r\n\t * @dev get deposit balance and frozen amount by using the deposit address\r\n     *\r\n     * @param _deposit the deposit contract address\r\n\t */\r\n    function getDepositInfo(address _deposit) onlyOwner public view returns (uint256, uint256) {\r\n        require(_deposit != address(0));\r\n        uint256 _balance = tk.balanceOf(_deposit);\r\n        uint256 frozenAmount = depositRepos[_deposit].frozen;\r\n        // depositRepos[_deposit].balance = _balance;\r\n\r\n        return (_balance, frozenAmount);\r\n    }\r\n    \r\n    /**\r\n\t * @dev get the number of withdraw wallet addresses bindig to the deposit contract address\r\n     *\r\n     * @param _deposit the deposit contract address\r\n\t */\r\n    function getDepositWithdrawCount(address _deposit) onlyOwner public view returns (uint) {\r\n        require(_deposit != address(0));\r\n\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        uint len = withdrawWalletList.length;\r\n\r\n        return len;\r\n    }\r\n    \r\n    /**\r\n\t * @dev get the withdraw wallet addresses list binding to the deposit contract address\r\n     *\r\n     * @param _deposit the deposit contract address\r\n     * @param _indices the array of indices of the withdraw wallets\r\n\t */\r\n    function getDepositWithdrawList(address _deposit, uint[] _indices) onlyOwner public view returns (bytes32[], address[]) {\r\n        require(_indices.length != 0);\r\n\r\n        bytes32[] memory names = new bytes32[](_indices.length);\r\n        address[] memory wallets = new address[](_indices.length);\r\n        \r\n        for (uint i = 0; i < _indices.length; i = i.add(1)) {\r\n            WithdrawWallet storage wallet = depositRepos[_deposit].withdrawWallets[_indices[i]];\r\n            names[i] = wallet.name;\r\n            wallets[i] = wallet.walletAddr;\r\n        }\r\n        \r\n        return (names, wallets);\r\n    }\r\n    \r\n    /**\r\n\t * @dev change the default withdraw wallet address binding to the deposit contract address\r\n     *\r\n     * @param _oldWallet the previous default withdraw wallet\r\n     * @param _newWallet the new default withdraw wallet\r\n\t */\r\n    function changeDefaultWithdraw(address _oldWallet, address _newWallet) onlyOwner public returns (bool) {\r\n        require(_newWallet != address(0));\r\n        \r\n        address deposit = walletDeposits[_oldWallet];\r\n        DepositWithdraw deposWithdr = DepositWithdraw(deposit);\r\n        require(deposWithdr.setWithdrawWallet(_newWallet));\r\n\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[deposit].withdrawWallets;\r\n        withdrawWalletList[0].walletAddr = _newWallet;\r\n        emit ChangeDefaultWallet(_oldWallet, _newWallet);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n\t * @dev freeze the tokens in the deposit address\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _value the amount of tokens need to be frozen\r\n\t */\r\n    function freezeTokens(address _deposit, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_deposit != address(0));\r\n        \r\n        frozenDeposits[_deposit] = true;\r\n        depositRepos[_deposit].frozen = _value;\r\n\r\n        emit FrozenTokens(_deposit, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n\t * @dev withdraw the tokens from the deposit address with charge fee\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _time the timestamp the withdraw occurs\r\n     * @param _value the amount of tokens need to be frozen\r\n\t */\r\n    function withdrawWithFee(address _deposit, uint256 _time, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_deposit != address(0));\r\n\r\n        uint256 _balance = tk.balanceOf(_deposit);\r\n        require(_value <= _balance);\r\n\r\n        // depositRepos[_deposit].balance = _balance;\r\n        uint256 frozenAmount = depositRepos[_deposit].frozen;\r\n        require(_value <= _balance.sub(frozenAmount));\r\n\r\n        DepositWithdraw deposWithdr = DepositWithdraw(_deposit);\r\n        return (deposWithdr.withdrawTokenToDefault(address(tk), address(params), _time, _value, params.chargeFee(), params.chargeFeePool()));\r\n    }\r\n    \r\n    /**\r\n\t * @dev check if the wallet name is not matching the expected wallet address\r\n     *\r\n     * @param _deposit the deposit address\r\n     * @param _name the withdraw wallet name\r\n     * @param _to the withdraw wallet address\r\n\t */\r\n    function checkWithdrawAddress(address _deposit, bytes32 _name, address _to) public view returns (bool, bool) {\r\n        uint len = depositRepos[_deposit].withdrawWallets.length;\r\n        for (uint i = 0; i < len; i = i.add(1)) {\r\n            WithdrawWallet storage wallet = depositRepos[_deposit].withdrawWallets[i];\r\n            if (_name == wallet.name) {\r\n                return(true, (_to == wallet.walletAddr));\r\n            }\r\n        }\r\n\r\n        return (false, true);\r\n    }\r\n\r\n    /**\r\n\t * @dev withdraw tokens, send tokens to target withdraw wallet\r\n     *\r\n     * @param _deposit the deposit address that will be withdraw from\r\n     * @param _time the timestamp occur the withdraw record\r\n\t * @param _name the withdraw address alias name to verify\r\n     * @param _to the address the token will be transfer to \r\n     * @param _value the token transferred value\r\n     * @param _check if we will check the value is valid or meet the limit condition\r\n\t */\r\n    function withdrawWithFee(address _deposit, \r\n                             uint256 _time, \r\n                             bytes32 _name, \r\n                             address _to, \r\n                             uint256 _value, \r\n                             bool _check) onlyOwner public returns (bool) {\r\n        require(_deposit != address(0));\r\n        require(_to != address(0));\r\n\r\n        uint256 _balance = tk.balanceOf(_deposit);\r\n        if (_check) {\r\n            require(_value <= _balance);\r\n        }\r\n\r\n        uint256 available = _balance.sub(depositRepos[_deposit].frozen);\r\n        if (_check) {\r\n            require(_value <= available);\r\n        }\r\n\r\n        bool exist;\r\n        bool correct;\r\n        WithdrawWallet[] storage withdrawWalletList = depositRepos[_deposit].withdrawWallets;\r\n        (exist, correct) = checkWithdrawAddress(_deposit, _name, _to);\r\n        if(!exist) {\r\n            withdrawWalletList.push(WithdrawWallet(_name, _to));\r\n        } else if(!correct) {\r\n            return false;\r\n        }\r\n\r\n        if (!_check && _value > available) {\r\n            tk.transfer(_deposit, _value.sub(available));\r\n            _value = _value.sub(available);\r\n        }\r\n\r\n        DepositWithdraw deposWithdr = DepositWithdraw(_deposit);\r\n        return (deposWithdr.withdrawToken(address(tk), address(params), _time, _to, _value, params.chargeFee(), params.chargeFeePool()));        \r\n    }\r\n\r\n}\r\n\r\ncontract DRCWalletMgrParams is Claimable, Autonomy, Destructible {\r\n    uint256 public singleWithdrawMin; // min value of single withdraw\r\n    uint256 public singleWithdrawMax; // Max value of single withdraw\r\n    uint256 public dayWithdraw; // Max value of one day of withdraw\r\n    uint256 public monthWithdraw; // Max value of one month of withdraw\r\n    uint256 public dayWithdrawCount; // Max number of withdraw counting\r\n\r\n    uint256 public chargeFee; // the charge fee for withdraw\r\n    address public chargeFeePool; // the address that will get the returned charge fees.\r\n\r\n\r\n    function initialSingleWithdrawMax(uint256 _value) onlyOwner public {\r\n        require(!init);\r\n\r\n        singleWithdrawMax = _value;\r\n    }\r\n\r\n    function initialSingleWithdrawMin(uint256 _value) onlyOwner public {\r\n        require(!init);\r\n\r\n        singleWithdrawMin = _value;\r\n    }\r\n\r\n    function initialDayWithdraw(uint256 _value) onlyOwner public {\r\n        require(!init);\r\n\r\n        dayWithdraw = _value;\r\n    }\r\n\r\n    function initialDayWithdrawCount(uint256 _count) onlyOwner public {\r\n        require(!init);\r\n\r\n        dayWithdrawCount = _count;\r\n    }\r\n\r\n    function initialMonthWithdraw(uint256 _value) onlyOwner public {\r\n        require(!init);\r\n\r\n        monthWithdraw = _value;\r\n    }\r\n\r\n    function initialChargeFee(uint256 _value) onlyOwner public {\r\n        require(!init);\r\n\r\n        chargeFee = _value;\r\n    }\r\n\r\n    function initialChargeFeePool(address _pool) onlyOwner public {\r\n        require(!init);\r\n\r\n        chargeFeePool = _pool;\r\n    }    \r\n\r\n    function setSingleWithdrawMax(uint256 _value) onlyCongress public {\r\n        singleWithdrawMax = _value;\r\n    }   \r\n\r\n    function setSingleWithdrawMin(uint256 _value) onlyCongress public {\r\n        singleWithdrawMin = _value;\r\n    }\r\n\r\n    function setDayWithdraw(uint256 _value) onlyCongress public {\r\n        dayWithdraw = _value;\r\n    }\r\n\r\n    function setDayWithdrawCount(uint256 _count) onlyCongress public {\r\n        dayWithdrawCount = _count;\r\n    }\r\n\r\n    function setMonthWithdraw(uint256 _value) onlyCongress public {\r\n        monthWithdraw = _value;\r\n    }\r\n\r\n    function setChargeFee(uint256 _value) onlyCongress public {\r\n        chargeFee = _value;\r\n    }\r\n\r\n    function setChargeFeePool(address _pool) onlyOwner public {\r\n        chargeFeePool = _pool;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"getDepositWithdrawCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tk\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawWithFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnershipBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldWallet\",\"type\":\"address\"},{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeDefaultWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_check\",\"type\":\"bool\"}],\"name\":\"withdrawWithFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"checkWithdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getDepositWithdrawList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"bindContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"createDepositContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_walletParams\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getDepositAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"changeOwnershipto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"CreateDepositAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_deposit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FrozenTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"ChangeDefaultWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DRCWalletManager","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65221fac2496a433ce4b351e6d2ccd2db790325d8c5651502f4d4a60ab5a4384"}]}