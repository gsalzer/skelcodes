{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  \r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  //event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  \r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    //balances[_from] = balances[_from].sub(_value); // this was removed\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\ncontract BigbomPrivateSaleList is Ownable {\r\n    mapping(address=>uint) public addressCap;\r\n\r\n    function BigbomPrivateSaleList() public  {}\r\n\r\n    event ListAddress( address _user, uint _amount, uint _time );\r\n\r\n    // Owner can delist by setting amount = 0.\r\n    // Onwer can also change it at any time\r\n    function listAddress( address _user, uint _amount ) public onlyOwner {\r\n        require(_user != address(0x0));\r\n\r\n        addressCap[_user] = _amount;\r\n        ListAddress( _user, _amount, now );\r\n    }\r\n\r\n    // an optimization in case of network congestion\r\n    function listAddresses( address[] _users, uint[] _amount ) public onlyOwner {\r\n        require(_users.length == _amount.length );\r\n        for( uint i = 0 ; i < _users.length ; i++ ) {\r\n            listAddress( _users[i], _amount[i] );\r\n        }\r\n    }\r\n\r\n    function getCap( address _user ) public constant returns(uint) {\r\n        return addressCap[_user];\r\n    }\r\n\r\n}\r\n\r\ncontract BigbomToken is StandardToken, Ownable {\r\n    \r\n    string  public  constant name = \"Bigbom\";\r\n    string  public  constant symbol = \"BBO\";\r\n    uint    public  constant decimals = 18;\r\n    uint    public   totalSupply = 2000000000 * 1e18; //2,000,000,000\r\n\r\n    uint    public  constant founderAmount = 200000000 * 1e18; // 200,000,000\r\n    uint    public  constant coreStaffAmount = 60000000 * 1e18; // 60,000,000\r\n    uint    public  constant advisorAmount = 140000000 * 1e18; // 140,000,000\r\n    uint    public  constant networkGrowthAmount = 600000000 * 1e18; //600,000,000\r\n    uint    public  constant reserveAmount = 635000000 * 1e18; // 635,000,000\r\n    uint    public  constant bountyAmount = 40000000 * 1e18; // 40,000,000\r\n    uint    public  constant publicSaleAmount = 275000000 * 1e18; // 275,000,000\r\n\r\n    address public   bbFounderCoreStaffWallet ;\r\n    address public   bbAdvisorWallet;\r\n    address public   bbAirdropWallet;\r\n    address public   bbNetworkGrowthWallet;\r\n    address public   bbReserveWallet;\r\n    address public   bbPublicSaleWallet;\r\n\r\n    uint    public  saleStartTime;\r\n    uint    public  saleEndTime;\r\n\r\n    address public  tokenSaleContract;\r\n    BigbomPrivateSaleList public privateSaleList;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint) public frozenTime;\r\n    mapping (address => uint) public maxAllowedAmount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen, uint _seconds);\r\n   \r\n\r\n    function checkMaxAllowed(address target)  public constant  returns (uint) {\r\n        var maxAmount  = balances[target];\r\n        if(target == bbFounderCoreStaffWallet){\r\n            maxAmount = 10000000 * 1e18;\r\n        }\r\n        if(target == bbAdvisorWallet){\r\n            maxAmount = 10000000 * 1e18;\r\n        }\r\n        if(target == bbAirdropWallet){\r\n            maxAmount = 40000000 * 1e18;\r\n        }\r\n        if(target == bbNetworkGrowthWallet){\r\n            maxAmount = 20000000 * 1e18;\r\n        }\r\n        if(target == bbReserveWallet){\r\n            maxAmount = 6350000 * 1e18;\r\n        }\r\n        return maxAmount;\r\n    }\r\n\r\n    function selfFreeze(bool freeze, uint _seconds) public {\r\n        // selfFreeze cannot more than 7 days\r\n        require(_seconds <= 7 * 24 * 3600);\r\n        // if unfreeze\r\n        if(!freeze){\r\n            // get End time of frozenAccount\r\n            var frozenEndTime = frozenTime[msg.sender];\r\n            // if now > frozenEndTime\r\n            require (now >= frozenEndTime);\r\n            // unfreeze account\r\n            frozenAccount[msg.sender] = freeze;\r\n            // set time to 0\r\n            _seconds = 0;           \r\n        }else{\r\n            frozenAccount[msg.sender] = freeze;\r\n            \r\n        }\r\n        // set endTime = now + _seconds to freeze\r\n        frozenTime[msg.sender] = now + _seconds;\r\n        FrozenFunds(msg.sender, freeze, _seconds);\r\n        \r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze, uint _seconds) onlyOwner public {\r\n        \r\n        // if unfreeze\r\n        if(!freeze){\r\n            // get End time of frozenAccount\r\n            var frozenEndTime = frozenTime[target];\r\n            // if now > frozenEndTime\r\n            require (now >= frozenEndTime);\r\n            // unfreeze account\r\n            frozenAccount[target] = freeze;\r\n            // set time to 0\r\n            _seconds = 0;           \r\n        }else{\r\n            frozenAccount[target] = freeze;\r\n            \r\n        }\r\n        // set endTime = now + _seconds to freeze\r\n        frozenTime[target] = now + _seconds;\r\n        FrozenFunds(target, freeze, _seconds);\r\n        \r\n    }\r\n\r\n    modifier validDestination( address to ) {\r\n        require(to != address(0x0));\r\n        require(to != address(this) );\r\n        require(!frozenAccount[to]);                       // Check if recipient is frozen\r\n        _;\r\n    }\r\n    modifier validFrom(address from){\r\n        require(!frozenAccount[from]);                     // Check if sender is frozen\r\n        _;\r\n    }\r\n    modifier onlyWhenTransferEnabled() {\r\n        if( now <= saleEndTime && now >= saleStartTime ) {\r\n            require( msg.sender == tokenSaleContract );\r\n        }\r\n        _;\r\n    }\r\n    modifier onlyPrivateListEnabled(address _to){\r\n        require(now <= saleStartTime);\r\n        uint allowcap = privateSaleList.getCap(_to);\r\n        require (allowcap > 0);\r\n        _;\r\n    }\r\n    function setPrivateList(BigbomPrivateSaleList _privateSaleList)   onlyOwner public {\r\n        require(_privateSaleList != address(0x0));\r\n        privateSaleList = _privateSaleList;\r\n\r\n    }\r\n    \r\n    function BigbomToken(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet,\r\n        address _bbAirdropWallet,\r\n        address _bbNetworkGrowthWallet,\r\n        address _bbReserveWallet, \r\n        address _bbPublicSaleWallet\r\n        ) public {\r\n\r\n        require(admin!=address(0x0));\r\n        require(_bbAirdropWallet!=address(0x0));\r\n        require(_bbAdvisorWallet!=address(0x0));\r\n        require(_bbReserveWallet!=address(0x0));\r\n        require(_bbNetworkGrowthWallet!=address(0x0));\r\n        require(_bbFounderCoreStaffWallet!=address(0x0));\r\n        require(_bbPublicSaleWallet!=address(0x0));\r\n\r\n        // Mint all tokens. Then disable minting forever.\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0x0), msg.sender, totalSupply);\r\n        // init internal amount limit\r\n        // set address when deploy\r\n        bbAirdropWallet = _bbAirdropWallet;\r\n        bbAdvisorWallet = _bbAdvisorWallet;\r\n        bbReserveWallet = _bbReserveWallet;\r\n        bbNetworkGrowthWallet = _bbNetworkGrowthWallet;\r\n        bbFounderCoreStaffWallet = _bbFounderCoreStaffWallet;\r\n        bbPublicSaleWallet = _bbPublicSaleWallet;\r\n        \r\n        saleStartTime = startTime;\r\n        saleEndTime = endTime;\r\n        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\r\n    }\r\n\r\n    function setTimeSale(uint startTime, uint endTime) onlyOwner public {\r\n        require (now < saleStartTime || now > saleEndTime);\r\n        require (now < startTime);\r\n        require ( startTime < endTime);\r\n        saleStartTime = startTime;\r\n        saleEndTime = endTime;\r\n    }\r\n\r\n    function setTokenSaleContract(address _tokenSaleContract) onlyOwner public {\r\n        // check address ! 0\r\n        require(_tokenSaleContract != address(0x0));\r\n        // do not allow run when saleStartTime <= now <= saleEndTime\r\n        require (now < saleStartTime || now > saleEndTime);\r\n\r\n        tokenSaleContract = _tokenSaleContract;\r\n    }\r\n    function transfer(address _to, uint _value)\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)\r\n        validFrom(msg.sender)\r\n        public \r\n        returns (bool) {\r\n        if (msg.sender == bbFounderCoreStaffWallet || msg.sender == bbAdvisorWallet|| \r\n            msg.sender == bbAirdropWallet|| msg.sender == bbNetworkGrowthWallet|| msg.sender == bbReserveWallet){\r\n\r\n            // check maxAllowedAmount\r\n            var withdrawAmount =  maxAllowedAmount[msg.sender]; \r\n            var defaultAllowAmount = checkMaxAllowed(msg.sender);\r\n            var maxAmount = defaultAllowAmount - withdrawAmount;\r\n            // _value transfer must <= maxAmount\r\n            require(maxAmount >= _value); // \r\n\r\n            // if maxAmount = 0, need to block this msg.sender\r\n            if(maxAmount==_value){\r\n               \r\n                var isTransfer = super.transfer(_to, _value);\r\n                 // freeze account\r\n                selfFreeze(true, 24 * 3600); // temp freeze account 24h\r\n                maxAllowedAmount[msg.sender] = 0;\r\n                return isTransfer;\r\n            }else{\r\n                // set max withdrawAmount\r\n                maxAllowedAmount[msg.sender] = maxAllowedAmount[msg.sender].add(_value); // \r\n                \r\n            }\r\n        }\r\n        return  super.transfer(_to, _value);\r\n            \r\n    }\r\n\r\n    function transferPrivateSale(address _to, uint _value)\r\n        onlyOwner\r\n        onlyPrivateListEnabled(_to) \r\n        public \r\n        returns (bool) {\r\n         return transfer( _to,  _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)\r\n        validFrom(_from)\r\n        public \r\n        returns (bool) {\r\n            if (_from == bbFounderCoreStaffWallet || _from == bbAdvisorWallet|| \r\n                _from == bbAirdropWallet|| _from == bbNetworkGrowthWallet|| _from == bbReserveWallet){\r\n\r\n                  // check maxAllowedAmount\r\n                var withdrawAmount =  maxAllowedAmount[_from]; \r\n                var defaultAllowAmount = checkMaxAllowed(_from);\r\n                var maxAmount = defaultAllowAmount - withdrawAmount; \r\n                // _value transfer must <= maxAmount\r\n                require(maxAmount >= _value); \r\n\r\n                // if maxAmount = 0, need to block this _from\r\n                if(maxAmount==_value){\r\n                   \r\n                    var isTransfer = super.transfer(_to, _value);\r\n                     // freeze account\r\n                    selfFreeze(true, 24 * 3600); \r\n                    maxAllowedAmount[_from] = 0;\r\n                    return isTransfer;\r\n                }else{\r\n                    // set max withdrawAmount\r\n                    maxAllowedAmount[_from] = maxAllowedAmount[_from].add(_value); \r\n                    \r\n                }\r\n            }\r\n            return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    function burn(uint _value) onlyWhenTransferEnabled\r\n        public \r\n        returns (bool){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    // save some gas by making only one contract call\r\n    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\r\n        public \r\n        returns (bool) {\r\n        assert( transferFrom( _from, msg.sender, _value ) );\r\n        return burn(_value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner public {\r\n        token.transfer( owner, amount );\r\n    }\r\n}\r\ncontract BigbomTokenExtended is BigbomToken {\r\n    \r\n    string  public  constant name = \"Bigbom\";\r\n    string  public  constant symbol = \"BBO\";\r\n    uint    public  constant decimals = 18;\r\n    uint    public   totalSupply = 2000000000 * 1e18; //2,000,000,000\r\n\r\n    BigbomToken public  bigbomToken;\r\n    function BigbomTokenExtended(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet,\r\n        address _bbAirdropWallet,\r\n        address _bbNetworkGrowthWallet,\r\n        address _bbReserveWallet, \r\n        address _bbPublicSaleWallet,\r\n        BigbomToken _bigbomToken\r\n        ) public BigbomToken(startTime, endTime, admin, _bbFounderCoreStaffWallet, _bbAdvisorWallet,\r\n         _bbAirdropWallet,\r\n         _bbNetworkGrowthWallet,\r\n         _bbReserveWallet, \r\n         _bbPublicSaleWallet\r\n        ){\r\n            bigbomToken = _bigbomToken;\r\n    }\r\n        \r\n    \r\n    event TokenDrop( address receiver, uint amount );\r\n    function airDrop(address[] recipients) public onlyOwner {\r\n        for(uint i = 0 ; i < recipients.length ; i++){\r\n            uint amount = bigbomToken.balanceOf(recipients[i]);\r\n            if (amount > 0){\r\n                //\r\n                transfer(recipients[i], amount);\r\n                TokenDrop( recipients[i], amount );\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier validFrozenAccount(address target) {\r\n        if(frozenAccount[target]){\r\n            require(now >= frozenTime[target]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function selfFreeze(bool freeze, uint _seconds) \r\n    validFrozenAccount(msg.sender) \r\n    public {\r\n        // selfFreeze cannot more than 7 days\r\n        require(_seconds <= 7 * 24 * 3600);\r\n        // if unfreeze\r\n        if(!freeze){\r\n            // get End time of frozenAccount\r\n            var frozenEndTime = frozenTime[msg.sender];\r\n            // if now > frozenEndTime\r\n            require (now >= frozenEndTime);\r\n            // unfreeze account\r\n            frozenAccount[msg.sender] = freeze;\r\n            // set time to 0\r\n            _seconds = 0;           \r\n        }else{\r\n            frozenAccount[msg.sender] = freeze;\r\n            \r\n        }\r\n        // set endTime = now + _seconds to freeze\r\n        frozenTime[msg.sender] = now + _seconds;\r\n        FrozenFunds(msg.sender, freeze, _seconds);\r\n        \r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze, uint _seconds) \r\n    onlyOwner\r\n    validFrozenAccount(target)\r\n    public {\r\n        \r\n        // if unfreeze\r\n        if(!freeze){\r\n            // get End time of frozenAccount\r\n            var frozenEndTime = frozenTime[target];\r\n            // if now > frozenEndTime\r\n            require (now >= frozenEndTime);\r\n            // unfreeze account\r\n            frozenAccount[target] = freeze;\r\n            // set time to 0\r\n            _seconds = 0;           \r\n        }else{\r\n            frozenAccount[target] = freeze;\r\n            \r\n        }\r\n        // set endTime = now + _seconds to freeze\r\n        frozenTime[target] = now + _seconds;\r\n        FrozenFunds(target, freeze, _seconds);\r\n        \r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"airDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setTimeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bbPublicSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkGrowthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSaleContract\",\"type\":\"address\"}],\"name\":\"setTokenSaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreStaffAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"},{\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bbNetworkGrowthWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bbFounderCoreStaffWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bbAirdropWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bbAdvisorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAllowedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freeze\",\"type\":\"bool\"},{\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"selfFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bigbomToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bbReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privateSaleList\",\"type\":\"address\"}],\"name\":\"setPrivateList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"checkMaxAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"_bbFounderCoreStaffWallet\",\"type\":\"address\"},{\"name\":\"_bbAdvisorWallet\",\"type\":\"address\"},{\"name\":\"_bbAirdropWallet\",\"type\":\"address\"},{\"name\":\"_bbNetworkGrowthWallet\",\"type\":\"address\"},{\"name\":\"_bbReserveWallet\",\"type\":\"address\"},{\"name\":\"_bbPublicSaleWallet\",\"type\":\"address\"},{\"name\":\"_bigbomToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BigbomTokenExtended","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ac4c18c000000000000000000000000000000000000000000000000000000005ac4b37c000000000000000000000000ada72ca1a93a5690b16e53700843b0327b3728b60000000000000000000000009968d3072a7fb3140f9ceceeb9f093a019fe366900000000000000000000000015d4c19c22f90b2fa8fed2a63b94ec32997bad97000000000000000000000000a81c747dd94d80ff47f9e9b3ea311555dedd559a0000000000000000000000004787d5af133aa9fe6dfa4153514a425543c604c7000000000000000000000000912b11528f8ea6d871ac033f82fc82b43bc040a100000000000000000000000028d9d3a63444a1195e582ddf417dc014c81ae5870000000000000000000000008227cf5171bfdafad9110775c4dce2cc5897b5dd","Library":"","SwarmSource":"bzzr://d5390b2bef6a79743c7504c5cc83252e1422596f4d1092000b597640dd8cae04"}]}