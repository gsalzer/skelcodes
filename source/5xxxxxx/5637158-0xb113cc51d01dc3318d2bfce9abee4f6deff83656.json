{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  // 1 denied / 0 allow\r\n  mapping(address => uint8) permissionsList;\r\n  \r\n  function SetPermissionsList(address _address, uint8 _sign) public onlyOwner{\r\n    permissionsList[_address] = _sign; \r\n  }\r\n  function GetPermissionsList(address _address) public constant onlyOwner returns(uint8){\r\n    return permissionsList[_address]; \r\n  }  \r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(permissionsList[msg.sender] == 0);\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(permissionsList[msg.sender] == 0);\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is PausableToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint whenNotPaused public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\ncontract BurnableByOwner is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n  function burn(address _address, uint256 _value) public onlyOwner{\r\n    require(_value <= balances[_address]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = _address;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract TRND is Ownable, MintableToken, BurnableByOwner {\r\n  using SafeMath for uint256;    \r\n  string public constant name = \"Trends\";\r\n  string public constant symbol = \"TRND\";\r\n  uint32 public constant decimals = 18;\r\n  \r\n  address public addressPrivateSale;\r\n  address public addressAirdrop;\r\n  address public addressPremineBounty;\r\n  address public addressPartnerships;\r\n\r\n  uint256 public summPrivateSale;\r\n  uint256 public summAirdrop;\r\n  uint256 public summPremineBounty;\r\n  uint256 public summPartnerships;\r\n // uint256 public totalSupply;\r\n\r\n  function TRND() public {\r\n    addressPrivateSale   = 0x6701DdeDBeb3155B8c908D0D12985A699B9d2272;\r\n    addressAirdrop       = 0xd176131235B5B8dC314202a8B348CC71798B0874;\r\n    addressPremineBounty = 0xd176131235B5B8dC314202a8B348CC71798B0874;\r\n    addressPartnerships  = 0x441B2B781a6b411f1988084a597e2ED4e0A7C352; \r\n\t\r\n    summPrivateSale   = 5000000 * (10 ** uint256(decimals)); \r\n    summAirdrop       = 4500000 * (10 ** uint256(decimals));  \r\n    summPremineBounty = 1000000 * (10 ** uint256(decimals));  \r\n    summPartnerships  = 2500000 * (10 ** uint256(decimals));  \t\t    \r\n    // Founders and supporters initial Allocations\r\n    mint(addressPrivateSale, summPrivateSale);\r\n    mint(addressAirdrop, summAirdrop);\r\n    mint(addressPremineBounty, summPremineBounty);\r\n    mint(addressPartnerships, summPartnerships);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where Contributors can make\r\n * token Contributions and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // soft cap\r\n  uint softcap;\r\n  // hard cap\r\n  uint256 hardcapPreICO; \r\n  uint256 hardcapMainSale;  \r\n  TRND public token;\r\n  // balances for softcap\r\n  mapping(address => uint) public balances;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  //ico\r\n    //start\r\n  uint256 public startIcoPreICO;  \r\n  uint256 public startIcoMainSale;  \r\n    //end \r\n  uint256 public endIcoPreICO; \r\n  uint256 public endIcoMainSale;   \r\n  //token distribution\r\n // uint256 public maxIco;\r\n\r\n  uint256 public totalSoldTokens;\r\n  uint256 minPurchasePreICO;     \r\n  uint256 minPurchaseMainSale;   \r\n  \r\n  // how many token units a Contributor gets per wei\r\n  uint256 public rateIcoPreICO;\r\n  uint256 public rateIcoMainSale;\r\n\r\n  //Unconfirmed sum\r\n  uint256 public unconfirmedSum;\r\n  mapping(address => uint) public unconfirmedSumAddr;\r\n  // address where funds are collected\r\n  address public wallet;\r\n  \r\n  \r\n/**\r\n* event for token Procurement logging\r\n* @param contributor who Pledged for the tokens\r\n* @param beneficiary who got the tokens\r\n* @param value weis Contributed for Procurement\r\n* @param amount amount of tokens Procured\r\n*/\r\n  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n  function Crowdsale() public {\r\n    token = createTokenContract();\r\n    //soft cap in tokens\r\n    softcap            = 20000000 * 1 ether; \r\n    hardcapPreICO      =  5000000 * 1 ether; \r\n    hardcapMainSale    = 80000000 * 1 ether; \r\n\t\r\n    //min Purchase in wei = 0.1 ETH\r\n    minPurchasePreICO      = 100000000000000000;\r\n    minPurchaseMainSale    = 100000000000000000;\r\n    // start and end timestamps where investments are allowed\r\n    //ico\r\n    //start/end \r\n    startIcoPreICO   = 1527843600; //   06/01/2018 @ 9:00am (UTC)\r\n    endIcoPreICO     = 1530435600; //   07/01/2018 @ 9:00am (UTC)\r\n    startIcoMainSale = 1530435600; //   07/01/2018 @ 9:00am (UTC)\r\n    endIcoMainSale   = 1533891600; //   08/10/2018 @ 9:00am (UTC)\r\n\r\n    //rate; 0.125$ for ETH = 700$\r\n    rateIcoPreICO = 5600;\r\n    //rate; 0.25$ for ETH = 700$\r\n    rateIcoMainSale = 2800;\r\n\r\n    // address where funds are collected\r\n    wallet = 0xca5EdAE100d4D262DC3Ec2dE96FD9943Ea659d04;\r\n  }\r\n  \r\n  function setStartIcoPreICO(uint256 _startIcoPreICO) public onlyOwner  { \r\n    uint256 delta;\r\n    require(now < startIcoPreICO);\r\n\tif (startIcoPreICO > _startIcoPreICO) {\r\n\t  delta = startIcoPreICO.sub(_startIcoPreICO);\r\n\t  startIcoPreICO   = _startIcoPreICO;\r\n\t  endIcoPreICO     = endIcoPreICO.sub(delta);\r\n      startIcoMainSale = startIcoMainSale.sub(delta);\r\n      endIcoMainSale   = endIcoMainSale.sub(delta);\r\n\t}\r\n\tif (startIcoPreICO < _startIcoPreICO) {\r\n\t  delta = _startIcoPreICO.sub(startIcoPreICO);\r\n\t  startIcoPreICO   = _startIcoPreICO;\r\n\t  endIcoPreICO     = endIcoPreICO.add(delta);\r\n      startIcoMainSale = startIcoMainSale.add(delta);\r\n      endIcoMainSale   = endIcoMainSale.add(delta);\r\n\t}\t\r\n  }\r\n  \r\n  function setRateIcoPreICO(uint256 _rateIcoPreICO) public onlyOwner  {\r\n    rateIcoPreICO = _rateIcoPreICO;\r\n  }   \r\n  function setRateIcoMainSale(uint _rateIcoMainSale) public onlyOwner  {\r\n    rateIcoMainSale = _rateIcoMainSale;\r\n  }     \r\n  // fallback function can be used to Procure tokens\r\n  function () external payable {\r\n    procureTokens(msg.sender);\r\n  }\r\n  \r\n  function createTokenContract() internal returns (TRND) {\r\n    return new TRND();\r\n  }\r\n  \r\n  function getRateIcoWithBonus() public view returns (uint256) {\r\n    uint256 bonus;\r\n\tuint256 rateICO;\r\n    //icoPreICO   \r\n    if (now >= startIcoPreICO && now < endIcoPreICO){\r\n      rateICO = rateIcoPreICO;\r\n    }  \r\n\r\n    //icoMainSale   \r\n    if (now >= startIcoMainSale  && now < endIcoMainSale){\r\n      rateICO = rateIcoMainSale;\r\n    }  \r\n\r\n    //bonus\r\n    if (now >= startIcoPreICO && now < startIcoPreICO.add( 2 * 7 * 1 days )){\r\n      bonus = 10;\r\n    }  \r\n    if (now >= startIcoPreICO.add(2 * 7 * 1 days) && now < startIcoPreICO.add(4 * 7 * 1 days)){\r\n      bonus = 8;\r\n    } \r\n    if (now >= startIcoPreICO.add(4 * 7 * 1 days) && now < startIcoPreICO.add(6 * 7 * 1 days)){\r\n      bonus = 6;\r\n    } \r\n    if (now >= startIcoPreICO.add(6 * 7 * 1 days) && now < startIcoPreICO.add(8 * 7 * 1 days)){\r\n      bonus = 4;\r\n    } \r\n    if (now >= startIcoPreICO.add(8 * 7 * 1 days) && now < startIcoPreICO.add(10 * 7 * 1 days)){\r\n      bonus = 2;\r\n    } \r\n\r\n    return rateICO + rateICO.mul(bonus).div(100);\r\n  }    \r\n  // low level token Pledge function\r\n  function procureTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 backAmount;\r\n    uint256 rate;\r\n    uint hardCap;\r\n    require(beneficiary != address(0));\r\n    rate = getRateIcoWithBonus();\r\n    //icoPreICO   \r\n    hardCap = hardcapPreICO;\r\n    if (now >= startIcoPreICO && now < endIcoPreICO && totalSoldTokens < hardCap){\r\n\t  require(weiAmount >= minPurchasePreICO);\r\n      tokens = weiAmount.mul(rate);\r\n      if (hardCap.sub(totalSoldTokens) < tokens){\r\n        tokens = hardCap.sub(totalSoldTokens); \r\n        weiAmount = tokens.div(rate);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n    }  \r\n    //icoMainSale  \r\n    hardCap = hardcapMainSale.add(hardcapPreICO);\r\n    if (now >= startIcoMainSale  && now < endIcoMainSale  && totalSoldTokens < hardCap){\r\n\t  require(weiAmount >= minPurchaseMainSale);\r\n      tokens = weiAmount.mul(rate);\r\n      if (hardCap.sub(totalSoldTokens) < tokens){\r\n        tokens = hardCap.sub(totalSoldTokens); \r\n        weiAmount = tokens.div(rate);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n    }     \r\n    require(tokens > 0);\r\n    totalSoldTokens = totalSoldTokens.add(tokens);\r\n    balances[msg.sender] = balances[msg.sender].add(weiAmount);\r\n    token.mint(msg.sender, tokens);\r\n\tunconfirmedSum = unconfirmedSum.add(tokens);\r\n\tunconfirmedSumAddr[msg.sender] = unconfirmedSumAddr[msg.sender].add(tokens);\r\n\ttoken.SetPermissionsList(beneficiary, 1);\r\n    if (backAmount > 0){\r\n      msg.sender.transfer(backAmount);    \r\n    }\r\n    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n\r\n  function refund() public{\r\n    require(totalSoldTokens.sub(unconfirmedSum) < softcap && now > endIcoMainSale);\r\n    require(balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n  \r\n  function transferEthToMultisig() public onlyOwner {\r\n    address _this = this;\r\n    require(totalSoldTokens.sub(unconfirmedSum) >= softcap && now > endIcoMainSale);  \r\n    wallet.transfer(_this.balance);\r\n  } \r\n  \r\n  function refundUnconfirmed() public{\r\n    require(now > endIcoMainSale);\r\n    require(balances[msg.sender] > 0);\r\n    require(token.GetPermissionsList(msg.sender) == 1);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n   // token.burn(msg.sender, token.balanceOf(msg.sender));\r\n    uint uvalue = unconfirmedSumAddr[msg.sender];\r\n    unconfirmedSumAddr[msg.sender] = 0;\r\n    token.burn(msg.sender, uvalue );\r\n   // totalICO = totalICO.sub(token.balanceOf(msg.sender));    \r\n  } \r\n  \r\n  function SetPermissionsList(address _address, uint8 _sign) public onlyOwner{\r\n      uint8 sign;\r\n      sign = token.GetPermissionsList(_address);\r\n      token.SetPermissionsList(_address, _sign);\r\n      if (_sign == 0){\r\n          if (sign != _sign){  \r\n\t\t\tunconfirmedSum = unconfirmedSum.sub(unconfirmedSumAddr[_address]);\r\n\t\t\tunconfirmedSumAddr[_address] = 0;\r\n          }\r\n      }\r\n   }\r\n   \r\n   function GetPermissionsList(address _address) public constant onlyOwner returns(uint8){\r\n     return token.GetPermissionsList(_address); \r\n   }   \r\n   \r\n   function pause() onlyOwner public {\r\n     token.pause();\r\n   }\r\n\r\n   function unpause() onlyOwner public {\r\n     token.unpause();\r\n   }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressPremineBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressPartnerships\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_sign\",\"type\":\"uint8\"}],\"name\":\"SetPermissionsList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summPartnerships\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"GetPermissionsList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summPremineBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summPrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TRND","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a22b95da41b708125e9d91bbbbb86c6a18384ce1c45e18bc4dadb0ed4585cfc2"}]}