{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Ethernauts\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function implementsERC721() public pure returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n// Copied from: https://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266d#code\r\n\r\n\r\n// Copied from: https://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266d#code\r\n\r\n\r\n\r\n\r\n\r\n// Extend this library for child contracts\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Compara two numbers, and return the bigger one.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a > b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Compara two numbers, and return the bigger one.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a < b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return SafeMath.mul(_price, SafeMath.div(ownerCut,10000));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/// @dev Base contract for all Ethernauts contracts holding global constants and functions.\r\ncontract EthernautsBase {\r\n\r\n    /*** CONSTANTS USED ACROSS CONTRACTS ***/\r\n\r\n    /// @dev Used by all contracts that interfaces with Ethernauts\r\n    ///      The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('takeOwnership(uint256)')) ^\r\n    bytes4(keccak256('tokensOfOwner(address)')) ^\r\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @dev due solidity limitation we cannot return dynamic array from methods\r\n    /// so it creates incompability between functions across different contracts\r\n    uint8 public constant STATS_SIZE = 10;\r\n    uint8 public constant SHIP_SLOTS = 5;\r\n\r\n    // Possible state of any asset\r\n    enum AssetState { Available, UpForLease, Used }\r\n\r\n    // Possible state of any asset\r\n    // NotValid is to avoid 0 in places where category must be bigger than zero\r\n    enum AssetCategory { NotValid, Sector, Manufacturer, Ship, Object, Factory, CrewMember }\r\n\r\n    /// @dev Sector stats\r\n    enum ShipStats {Level, Attack, Defense, Speed, Range, Luck}\r\n    /// @notice Possible attributes for each asset\r\n    /// 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\r\n    /// 00000010 - Producible - Product of a factory and/or factory contract.\r\n    /// 00000100 - Explorable- Product of exploration.\r\n    /// 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\r\n    /// 00010000 - Permanent - Cannot be removed, always owned by a user.\r\n    /// 00100000 - Consumable - Destroyed after N exploration expeditions.\r\n    /// 01000000 - Tradable - Buyable and sellable on the market.\r\n    /// 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\r\n    bytes2 public ATTR_SEEDED     = bytes2(2**0);\r\n    bytes2 public ATTR_PRODUCIBLE = bytes2(2**1);\r\n    bytes2 public ATTR_EXPLORABLE = bytes2(2**2);\r\n    bytes2 public ATTR_LEASABLE   = bytes2(2**3);\r\n    bytes2 public ATTR_PERMANENT  = bytes2(2**4);\r\n    bytes2 public ATTR_CONSUMABLE = bytes2(2**5);\r\n    bytes2 public ATTR_TRADABLE   = bytes2(2**6);\r\n    bytes2 public ATTR_GOLDENGOOSE = bytes2(2**7);\r\n}\r\n\r\n/// @title Inspired by https://github.com/axiomzen/cryptokitties-bounty/blob/master/contracts/KittyAccessControl.sol\r\n/// @notice This contract manages the various addresses and constraints for operations\r\n//          that can be executed only by specific roles. Namely CEO and CTO. it also includes pausable pattern.\r\ncontract EthernautsAccessControl is EthernautsBase {\r\n\r\n    // This facet controls access control for Ethernauts.\r\n    // All roles have same responsibilities and rights, but there is slight differences between them:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and only role that can unpause the smart contract.\r\n    //       It is initially set to the address that created the smart contract.\r\n    //\r\n    //     - The CTO: The CTO can change contract address, oracle address and plan for upgrades.\r\n    //\r\n    //     - The COO: The COO can change contract address and add create assets.\r\n    //\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    /// @param newContract address pointing to new contract\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public ctoAddress;\r\n    address public cooAddress;\r\n    address public oracleAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CTO-only functionality\r\n    modifier onlyCTO() {\r\n        require(msg.sender == ctoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CTO-only functionality\r\n    modifier onlyOracle() {\r\n        require(msg.sender == oracleAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == ctoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CTO. Only available to the current CTO or CEO.\r\n    /// @param _newCTO The address of the new CTO\r\n    function setCTO(address _newCTO) external {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == ctoAddress\r\n        );\r\n        require(_newCTO != address(0));\r\n\r\n        ctoAddress = _newCTO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current COO or CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as oracle.\r\n    /// @param _newOracle The address of oracle\r\n    function setOracle(address _newOracle) external {\r\n        require(msg.sender == ctoAddress);\r\n        require(_newOracle != address(0));\r\n\r\n        oracleAddress = _newOracle;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CTO account is compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Storage contract for Ethernauts Data. Common structs and constants.\r\n/// @notice This is our main data storage, constants and data types, plus\r\n//          internal functions for managing the assets. It is isolated and only interface with\r\n//          a list of granted contracts defined by CTO\r\n/// @author Ethernauts - Fernando Pauer\r\ncontract EthernautsStorage is EthernautsAccessControl {\r\n\r\n    function EthernautsStorage() public {\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is the initial CTO as well\r\n        ctoAddress = msg.sender;\r\n\r\n        // the creator of the contract is the initial CTO as well\r\n        cooAddress = msg.sender;\r\n\r\n        // the creator of the contract is the initial Oracle as well\r\n        oracleAddress = msg.sender;\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here. Hopefully, we can prevent user accidents.\r\n    function() external payable {\r\n        require(msg.sender == address(this));\r\n    }\r\n\r\n    /*** Mapping for Contracts with granted permission ***/\r\n    mapping (address => bool) public contractsGrantedAccess;\r\n\r\n    /// @dev grant access for a contract to interact with this contract.\r\n    /// @param _v2Address The contract address to grant access\r\n    function grantAccess(address _v2Address) public onlyCTO {\r\n        // See README.md for updgrade plan\r\n        contractsGrantedAccess[_v2Address] = true;\r\n    }\r\n\r\n    /// @dev remove access from a contract to interact with this contract.\r\n    /// @param _v2Address The contract address to be removed\r\n    function removeAccess(address _v2Address) public onlyCTO {\r\n        // See README.md for updgrade plan\r\n        delete contractsGrantedAccess[_v2Address];\r\n    }\r\n\r\n    /// @dev Only allow permitted contracts to interact with this contract\r\n    modifier onlyGrantedContracts() {\r\n        require(contractsGrantedAccess[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier validAsset(uint256 _tokenId) {\r\n        require(assets[_tokenId].ID > 0);\r\n        _;\r\n    }\r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The main Ethernauts asset struct. Every asset in Ethernauts is represented by a copy\r\n    ///  of this structure. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Asset {\r\n\r\n        // Asset ID is a identifier for look and feel in frontend\r\n        uint16 ID;\r\n\r\n        // Category = Sectors, Manufacturers, Ships, Objects (Upgrades/Misc), Factories and CrewMembers\r\n        uint8 category;\r\n\r\n        // The State of an asset: Available, On sale, Up for lease, Cooldown, Exploring\r\n        uint8 state;\r\n\r\n        // Attributes\r\n        // byte pos - Definition\r\n        // 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\r\n        // 00000010 - Producible - Product of a factory and/or factory contract.\r\n        // 00000100 - Explorable- Product of exploration.\r\n        // 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\r\n        // 00010000 - Permanent - Cannot be removed, always owned by a user.\r\n        // 00100000 - Consumable - Destroyed after N exploration expeditions.\r\n        // 01000000 - Tradable - Buyable and sellable on the market.\r\n        // 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\r\n        bytes2 attributes;\r\n\r\n        // The timestamp from the block when this asset was created.\r\n        uint64 createdAt;\r\n\r\n        // The minimum timestamp after which this asset can engage in exploring activities again.\r\n        uint64 cooldownEndBlock;\r\n\r\n        // The Asset's stats can be upgraded or changed based on exploration conditions.\r\n        // It will be defined per child contract, but all stats have a range from 0 to 255\r\n        // Examples\r\n        // 0 = Ship Level\r\n        // 1 = Ship Attack\r\n        uint8[STATS_SIZE] stats;\r\n\r\n        // Set to the cooldown time that represents exploration duration for this asset.\r\n        // Defined by a successful exploration action, regardless of whether this asset is acting as ship or a part.\r\n        uint256 cooldown;\r\n\r\n        // a reference to a super asset that manufactured the asset\r\n        uint256 builtBy;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right storage contract in our EthernautsLogic(address _CStorageAddress) call.\r\n    bool public isEthernautsStorage = true;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Asset struct for all assets in existence. The Asset UniqueId\r\n    ///  of each asset is actually an index into this array.\r\n    Asset[] public assets;\r\n\r\n    /// @dev A mapping from Asset UniqueIDs to the price of the token.\r\n    /// stored outside Asset Struct to save gas, because price can change frequently\r\n    mapping (uint256 => uint256) internal assetIndexToPrice;\r\n\r\n    /// @dev A mapping from asset UniqueIDs to the address that owns them. All assets have some valid owner address.\r\n    mapping (uint256 => address) internal assetIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) internal ownershipTokenCount;\r\n\r\n    /// @dev A mapping from AssetUniqueIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Asset can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) internal assetIndexToApproved;\r\n\r\n\r\n    /*** SETTERS ***/\r\n\r\n    /// @dev set new asset price\r\n    /// @param _tokenId  asset UniqueId\r\n    /// @param _price    asset price\r\n    function setPrice(uint256 _tokenId, uint256 _price) public onlyGrantedContracts {\r\n        assetIndexToPrice[_tokenId] = _price;\r\n    }\r\n\r\n    /// @dev Mark transfer as approved\r\n    /// @param _tokenId  asset UniqueId\r\n    /// @param _approved address approved\r\n    function approve(uint256 _tokenId, address _approved) public onlyGrantedContracts {\r\n        assetIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @dev Assigns ownership of a specific Asset to an address.\r\n    /// @param _from    current owner address\r\n    /// @param _to      new owner address\r\n    /// @param _tokenId asset UniqueId\r\n    function transfer(address _from, address _to, uint256 _tokenId) public onlyGrantedContracts {\r\n        // Since the number of assets is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        assetIndexToOwner[_tokenId] = _to;\r\n        // When creating new assets _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete assetIndexToApproved[_tokenId];\r\n        }\r\n    }\r\n\r\n    /// @dev A public method that creates a new asset and stores it. This\r\n    ///  method does basic checking and should only be called from other contract when the\r\n    ///  input data is known to be valid. Will NOT generate any event it is delegate to business logic contracts.\r\n    /// @param _creatorTokenID The asset who is father of this asset\r\n    /// @param _owner First owner of this asset\r\n    /// @param _price asset price\r\n    /// @param _ID asset ID\r\n    /// @param _category see Asset Struct description\r\n    /// @param _state see Asset Struct description\r\n    /// @param _attributes see Asset Struct description\r\n    /// @param _stats see Asset Struct description\r\n    function createAsset(\r\n        uint256 _creatorTokenID,\r\n        address _owner,\r\n        uint256 _price,\r\n        uint16 _ID,\r\n        uint8 _category,\r\n        uint8 _state,\r\n        uint8 _attributes,\r\n        uint8[STATS_SIZE] _stats,\r\n        uint256 _cooldown,\r\n        uint64 _cooldownEndBlock\r\n    )\r\n    public onlyGrantedContracts\r\n    returns (uint256)\r\n    {\r\n        // Ensure our data structures are always valid.\r\n        require(_ID > 0);\r\n        require(_category > 0);\r\n        require(_attributes != 0x0);\r\n        require(_stats.length > 0);\r\n\r\n        Asset memory asset = Asset({\r\n            ID: _ID,\r\n            category: _category,\r\n            builtBy: _creatorTokenID,\r\n            attributes: bytes2(_attributes),\r\n            stats: _stats,\r\n            state: _state,\r\n            createdAt: uint64(now),\r\n            cooldownEndBlock: _cooldownEndBlock,\r\n            cooldown: _cooldown\r\n            });\r\n\r\n        uint256 newAssetUniqueId = assets.push(asset) - 1;\r\n\r\n        // Check it reached 4 billion assets but let's just be 100% sure.\r\n        require(newAssetUniqueId == uint256(uint32(newAssetUniqueId)));\r\n\r\n        // store price\r\n        assetIndexToPrice[newAssetUniqueId] = _price;\r\n\r\n        // This will assign ownership\r\n        transfer(address(0), _owner, newAssetUniqueId);\r\n\r\n        return newAssetUniqueId;\r\n    }\r\n\r\n    /// @dev A public method that edit asset in case of any mistake is done during process of creation by the developer. This\r\n    /// This method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid.\r\n    /// @param _tokenId The token ID\r\n    /// @param _creatorTokenID The asset that create that token\r\n    /// @param _price asset price\r\n    /// @param _ID asset ID\r\n    /// @param _category see Asset Struct description\r\n    /// @param _state see Asset Struct description\r\n    /// @param _attributes see Asset Struct description\r\n    /// @param _stats see Asset Struct description\r\n    /// @param _cooldown asset cooldown index\r\n    function editAsset(\r\n        uint256 _tokenId,\r\n        uint256 _creatorTokenID,\r\n        uint256 _price,\r\n        uint16 _ID,\r\n        uint8 _category,\r\n        uint8 _state,\r\n        uint8 _attributes,\r\n        uint8[STATS_SIZE] _stats,\r\n        uint16 _cooldown\r\n    )\r\n    external validAsset(_tokenId) onlyCLevel\r\n    returns (uint256)\r\n    {\r\n        // Ensure our data structures are always valid.\r\n        require(_ID > 0);\r\n        require(_category > 0);\r\n        require(_attributes != 0x0);\r\n        require(_stats.length > 0);\r\n\r\n        // store price\r\n        assetIndexToPrice[_tokenId] = _price;\r\n\r\n        Asset storage asset = assets[_tokenId];\r\n        asset.ID = _ID;\r\n        asset.category = _category;\r\n        asset.builtBy = _creatorTokenID;\r\n        asset.attributes = bytes2(_attributes);\r\n        asset.stats = _stats;\r\n        asset.state = _state;\r\n        asset.cooldown = _cooldown;\r\n    }\r\n\r\n    /// @dev Update only stats\r\n    /// @param _tokenId asset UniqueId\r\n    /// @param _stats asset state, see Asset Struct description\r\n    function updateStats(uint256 _tokenId, uint8[STATS_SIZE] _stats) public validAsset(_tokenId) onlyGrantedContracts {\r\n        assets[_tokenId].stats = _stats;\r\n    }\r\n\r\n    /// @dev Update only asset state\r\n    /// @param _tokenId asset UniqueId\r\n    /// @param _state asset state, see Asset Struct description\r\n    function updateState(uint256 _tokenId, uint8 _state) public validAsset(_tokenId) onlyGrantedContracts {\r\n        assets[_tokenId].state = _state;\r\n    }\r\n\r\n    /// @dev Update Cooldown for a single asset\r\n    /// @param _tokenId asset UniqueId\r\n    /// @param _cooldown asset state, see Asset Struct description\r\n    function setAssetCooldown(uint256 _tokenId, uint256 _cooldown, uint64 _cooldownEndBlock)\r\n    public validAsset(_tokenId) onlyGrantedContracts {\r\n        assets[_tokenId].cooldown = _cooldown;\r\n        assets[_tokenId].cooldownEndBlock = _cooldownEndBlock;\r\n    }\r\n\r\n    /*** GETTERS ***/\r\n\r\n    /// @notice Returns only stats data about a specific asset.\r\n    /// @dev it is necessary due solidity compiler limitations\r\n    ///      when we have large qty of parameters it throws StackTooDeepException\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    function getStats(uint256 _tokenId) public view returns (uint8[STATS_SIZE]) {\r\n        return assets[_tokenId].stats;\r\n    }\r\n\r\n    /// @dev return current price of an asset\r\n    /// @param _tokenId asset UniqueId\r\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n        return assetIndexToPrice[_tokenId];\r\n    }\r\n\r\n    /// @notice Check if asset has all attributes passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _attributes see Asset Struct description\r\n    function hasAllAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\r\n        return assets[_tokenId].attributes & _attributes == _attributes;\r\n    }\r\n\r\n    /// @notice Check if asset has any attribute passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _attributes see Asset Struct description\r\n    function hasAnyAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\r\n        return assets[_tokenId].attributes & _attributes != 0x0;\r\n    }\r\n\r\n    /// @notice Check if asset is in the state passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _category see AssetCategory in EthernautsBase for possible states\r\n    function isCategory(uint256 _tokenId, uint8 _category) public view returns (bool) {\r\n        return assets[_tokenId].category == _category;\r\n    }\r\n\r\n    /// @notice Check if asset is in the state passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _state see enum AssetState in EthernautsBase for possible states\r\n    function isState(uint256 _tokenId, uint8 _state) public view returns (bool) {\r\n        return assets[_tokenId].state == _state;\r\n    }\r\n\r\n    /// @notice Returns owner of a given Asset(Token).\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @param _tokenId asset UniqueId\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n    {\r\n        return assetIndexToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance\r\n    /// @notice Returns the number of Assets owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\r\n    /// @param _tokenId asset UniqueId\r\n    function approvedFor(uint256 _tokenId) public view onlyGrantedContracts returns (address) {\r\n        return assetIndexToApproved[_tokenId];\r\n    }\r\n\r\n    /// @notice Returns the total number of Assets currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256) {\r\n        return assets.length;\r\n    }\r\n\r\n    /// @notice List all existing tokens. It can be filtered by attributes or assets with owner\r\n    /// @param _owner filter all assets by owner\r\n    function getTokenList(address _owner, uint8 _withAttributes, uint256 start, uint256 count) external view returns(\r\n        uint256[6][]\r\n    ) {\r\n        uint256 totalAssets = assets.length;\r\n\r\n        if (totalAssets == 0) {\r\n            // Return an empty array\r\n            return new uint256[6][](0);\r\n        } else {\r\n            uint256[6][] memory result = new uint256[6][](totalAssets > count ? count : totalAssets);\r\n            uint256 resultIndex = 0;\r\n            bytes2 hasAttributes  = bytes2(_withAttributes);\r\n            Asset memory asset;\r\n\r\n            for (uint256 tokenId = start; tokenId < totalAssets && resultIndex < count; tokenId++) {\r\n                asset = assets[tokenId];\r\n                if (\r\n                    (asset.state != uint8(AssetState.Used)) &&\r\n                    (assetIndexToOwner[tokenId] == _owner || _owner == address(0)) &&\r\n                    (asset.attributes & hasAttributes == hasAttributes)\r\n                ) {\r\n                    result[resultIndex][0] = tokenId;\r\n                    result[resultIndex][1] = asset.ID;\r\n                    result[resultIndex][2] = asset.category;\r\n                    result[resultIndex][3] = uint256(asset.attributes);\r\n                    result[resultIndex][4] = asset.cooldown;\r\n                    result[resultIndex][5] = assetIndexToPrice[tokenId];\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title The facet of the Ethernauts contract that manages ownership, ERC-721 compliant.\r\n/// @notice This provides the methods required for basic non-fungible token\r\n//          transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n//          It interfaces with EthernautsStorage provinding basic functions as create and list, also holds\r\n//          reference to logic contracts as Auction, Explore and so on\r\n/// @author Ethernatus - Fernando Pauer\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\ncontract EthernautsOwnership is EthernautsAccessControl, ERC721 {\r\n\r\n    /// @dev Contract holding only data.\r\n    EthernautsStorage public ethernautsStorage;\r\n\r\n    /*** CONSTANTS ***/\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"Ethernauts\";\r\n    string public constant symbol = \"ETNT\";\r\n\r\n    /********* ERC 721 - COMPLIANCE CONSTANTS AND FUNCTIONS ***************/\r\n    /**********************************************************************/\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /*** EVENTS ***/\r\n\r\n    // Events as per ERC-721\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokens);\r\n\r\n    /// @dev When a new asset is create it emits build event\r\n    /// @param owner The address of asset owner\r\n    /// @param tokenId Asset UniqueID\r\n    /// @param assetId ID that defines asset look and feel\r\n    /// @param price asset price\r\n    event Build(address owner, uint256 tokenId, uint16 assetId, uint256 price);\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. ERC-165 and ERC-721.\r\n    /// @param _interfaceID interface signature ID\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Asset.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId asset UniqueId, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ethernautsStorage.ownerOf(_tokenId) == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\r\n    /// @param _claimant the address we are confirming asset is approved for.\r\n    /// @param _tokenId asset UniqueId, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ethernautsStorage.approvedFor(_tokenId) == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Assets on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        ethernautsStorage.approve(_tokenId, _approved);\r\n    }\r\n\r\n    /// @notice Returns the number of Assets owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ethernautsStorage.balanceOf(_owner);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Transfers a Asset to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  Ethernauts specifically) or your Asset may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Asset to transfer.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any assets\r\n        // (except very briefly after it is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Disallow transfers to the storage contract to prevent accidental\r\n        // misuse. Auction or Upgrade contracts should only take ownership of assets\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(ethernautsStorage));\r\n\r\n        // You can only send your own asset.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        ethernautsStorage.transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Grant another address the right to transfer a specific Asset via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Asset that can be transferred if this call succeeds.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n\r\n    /// @notice Transfer a Asset owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Asset to be transferred.\r\n    /// @param _to The address that should take ownership of the Asset. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Asset to be transferred.\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    internal\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any assets (except for used assets).\r\n        require(_owns(_from, _tokenId));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(_to, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        ethernautsStorage.transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Transfer a Asset owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Asset to be transfered.\r\n    /// @param _to The address that should take ownership of the Asset. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Asset to be transferred.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Allow pre-approved user to take ownership of a token\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address _from = ethernautsStorage.ownerOf(_tokenId);\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_from != address(0));\r\n        _transferFrom(_from, msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Assets currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256) {\r\n        return ethernautsStorage.totalSupply();\r\n    }\r\n\r\n    /// @notice Returns owner of a given Asset(Token).\r\n    /// @param _tokenId Token ID to get owner.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (address owner)\r\n    {\r\n        owner = ethernautsStorage.ownerOf(_tokenId);\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @dev Creates a new Asset with the given fields. ONly available for C Levels\r\n    /// @param _creatorTokenID The asset who is father of this asset\r\n    /// @param _price asset price\r\n    /// @param _assetID asset ID\r\n    /// @param _category see Asset Struct description\r\n    /// @param _attributes see Asset Struct description\r\n    /// @param _stats see Asset Struct description\r\n    function createNewAsset(\r\n        uint256 _creatorTokenID,\r\n        uint256 _price,\r\n        uint16 _assetID,\r\n        uint8 _category,\r\n        uint8 _attributes,\r\n        uint8[STATS_SIZE] _stats\r\n    )\r\n    external onlyCLevel\r\n    returns (uint256)\r\n    {\r\n        // owner must be sender\r\n        require(msg.sender != address(0));\r\n\r\n        uint256 tokenID = ethernautsStorage.createAsset(\r\n            _creatorTokenID,\r\n            msg.sender,\r\n            _price,\r\n            _assetID,\r\n            _category,\r\n            uint8(AssetState.Available),\r\n            _attributes,\r\n            _stats,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // emit the build event\r\n        Build(\r\n            msg.sender,\r\n            tokenID,\r\n            _assetID,\r\n            _price\r\n        );\r\n\r\n        return tokenID;\r\n    }\r\n\r\n    /// @notice verify if token is in exploration time\r\n    /// @param _tokenId The Token ID that can be upgraded\r\n    function isExploring(uint256 _tokenId) public view returns (bool) {\r\n        uint256 cooldown;\r\n        uint64 cooldownEndBlock;\r\n        (,,,,,cooldownEndBlock, cooldown,) = ethernautsStorage.assets(_tokenId);\r\n        return (cooldown > now) || (cooldownEndBlock > uint64(block.number));\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the Ethernauts Logic contract handle all common code for logic/business contracts\r\n/// @author Ethernatus - Fernando Pauer\r\ncontract EthernautsLogic is EthernautsOwnership {\r\n\r\n    // Set in case the logic contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @dev Constructor\r\n    function EthernautsLogic() public {\r\n        // the creator of the contract is the initial CEO, COO, CTO\r\n        ceoAddress = msg.sender;\r\n        ctoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        oracleAddress = msg.sender;\r\n\r\n        // Starts paused.\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCTO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @dev set a new reference to the NFT ownership contract\r\n    /// @param _CStorageAddress - address of a deployed contract implementing EthernautsStorage.\r\n    function setEthernautsStorageContract(address _CStorageAddress) public onlyCLevel whenPaused {\r\n        EthernautsStorage candidateContract = EthernautsStorage(_CStorageAddress);\r\n        require(candidateContract.isEthernautsStorage());\r\n        ethernautsStorage = candidateContract;\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(ethernautsStorage != address(0));\r\n        require(newContractAddress == address(0));\r\n        // require this contract to have access to storage contract\r\n        require(ethernautsStorage.contractsGrantedAccess(address(this)) == true);\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the COO to capture the balance available to the contract.\r\n    function withdrawBalances(address _to) public onlyCLevel {\r\n        _to.transfer(this.balance);\r\n    }\r\n\r\n    /// return current contract balance\r\n    function getBalance() public view onlyCLevel returns (uint256) {\r\n        return this.balance;\r\n    }\r\n}\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\n///         This provides public methods for Upgrade ship.\r\n///\r\n///      - UpgradeShip: This provides public methods for managing how and if a ship can upgrade.\r\n///             The user can place a number of Ship Upgrades on the ship to affect the ship’s exploration.\r\n///             Combining the Explore and Upgrade actions together limits the amount of gas the user has to pay.\r\n/// @author Ethernatus - Fernando Pauer\r\ncontract EthernautsUpgrade is EthernautsLogic, ClockAuctionBase {\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    ///  and Delegate constructor to Nonfungible contract.\r\n    function EthernautsUpgrade() public\r\n    EthernautsLogic() {}\r\n\r\n    /*** EVENTS ***/\r\n    /// @dev The Upgrade event is fired whenever a ship is upgraded.\r\n    event Upgrade(uint256 indexed tokenId);\r\n\r\n    /*** CONSTANTS ***/\r\n    uint8 STATS_CAPOUT = 2**8 - 1; // all stats have a range from 0 to 255\r\n\r\n    // ************************* UPGRADE SHIP ****************************\r\n\r\n    /// @notice Check and define how a ship can upgrade\r\n    /// Example:\r\n    /// User A wants to Upgrade Ship A. Ship A has 5 available upgrade slots.\r\n    /// Thankfully, User A has 5 Ship Upgrades in their inventory.\r\n    /// They have 1x Plasma Cannons (+1 Attack), Hardened Plates (+2 Defense),\r\n    ///           1x Navigation Processor (+1 Range), 1x Engine Tune (+2 Speed), and Lucky Shamrock (+1 Luck) .\r\n    /// User A drags the 5 Ship Upgrades into the appropriate slots and hits the Upgrade button.\r\n    /// Ship A’s stats are now improved by +1 Attack, +2 Defense, +1 Range, +2 Speed, and +1 Luck, forever.\r\n    /// The Ship Upgrades are consumed and disappear. The Ship then increases in level +1 to a total level of 2.\r\n    /// @param _tokenId The Token ID that can be upgraded\r\n    /// @param _objects List of objects to be used in the upgrade\r\n    function upgradeShip(uint256 _tokenId, uint256[SHIP_SLOTS] _objects) external whenNotPaused {\r\n        // Checking if Asset is a ship or not\r\n        require(ethernautsStorage.isCategory(_tokenId, uint8(AssetCategory.Ship)));\r\n\r\n        // Ensure the Ship is in available state, otherwise it cannot be upgraded\r\n        require(ethernautsStorage.isState(_tokenId, uint8(AssetState.Available)));\r\n\r\n        // only owner can upgrade his/her ship\r\n        require(msg.sender == ethernautsStorage.ownerOf(_tokenId));\r\n\r\n        // ship could not be in exploration\r\n        require(!isExploring(_tokenId));\r\n\r\n        // get ship and objects current stats\r\n        uint i = 0;\r\n        uint8[STATS_SIZE] memory _shipStats = ethernautsStorage.getStats(_tokenId);\r\n        uint256 level = _shipStats[uint(ShipStats.Level)];\r\n        uint8[STATS_SIZE][SHIP_SLOTS] memory _objectsStats;\r\n\r\n        // check if level capped out, if yes no more upgrade is available\r\n        require(level < 5);\r\n\r\n        // a mapping to require upgrades should have different token ids\r\n        uint256[] memory upgradesToTokenIndex = new uint256[](ethernautsStorage.totalSupply());\r\n\r\n        // all objects must be available to use\r\n        for(i = 0; i < _objects.length; i++) {\r\n            // sender should owner all assets\r\n            require(msg.sender == ethernautsStorage.ownerOf(_objects[i]));\r\n            require(!isExploring(_objects[i]));\r\n            require(ethernautsStorage.isCategory(_objects[i], uint8(AssetCategory.Object)));\r\n            // avoiding duplicate keys\r\n            require(upgradesToTokenIndex[_objects[i]] == 0);\r\n\r\n            // mark token id as read and avoid duplicated token ids\r\n            upgradesToTokenIndex[_objects[i]] = _objects[i];\r\n            _objectsStats[i] = ethernautsStorage.getStats(_objects[i]);\r\n        }\r\n\r\n        // upgrading stats\r\n        uint256 attack = _shipStats[uint(ShipStats.Attack)];\r\n        uint256 defense = _shipStats[uint(ShipStats.Defense)];\r\n        uint256 speed = _shipStats[uint(ShipStats.Speed)];\r\n        uint256 range = _shipStats[uint(ShipStats.Range)];\r\n        uint256 luck = _shipStats[uint(ShipStats.Luck)];\r\n\r\n        for(i = 0; i < SHIP_SLOTS; i++) {\r\n            // Only objects with upgrades are allowed\r\n            require(_objectsStats[i][1] +\r\n                    _objectsStats[i][2] +\r\n                    _objectsStats[i][3] +\r\n                    _objectsStats[i][4] +\r\n                    _objectsStats[i][5] > 0);\r\n\r\n            attack += _objectsStats[i][uint(ShipStats.Attack)];\r\n            defense += _objectsStats[i][uint(ShipStats.Defense)];\r\n            speed += _objectsStats[i][uint(ShipStats.Speed)];\r\n            range += _objectsStats[i][uint(ShipStats.Range)];\r\n            luck += _objectsStats[i][uint(ShipStats.Luck)];\r\n        }\r\n\r\n        if (attack > STATS_CAPOUT) {\r\n            attack = STATS_CAPOUT;\r\n        }\r\n        if (defense > STATS_CAPOUT) {\r\n            defense = STATS_CAPOUT;\r\n        }\r\n        if (speed > STATS_CAPOUT) {\r\n            speed = STATS_CAPOUT;\r\n        }\r\n        if (range > STATS_CAPOUT) {\r\n            range = STATS_CAPOUT;\r\n        }\r\n        if (luck > STATS_CAPOUT) {\r\n            luck = STATS_CAPOUT;\r\n        }\r\n\r\n        // All stats must increase, even if its provided 5 upgrades in the slots\r\n        require(attack > _shipStats[uint(ShipStats.Attack)]);\r\n        require(defense > _shipStats[uint(ShipStats.Defense)]);\r\n        require(speed > _shipStats[uint(ShipStats.Speed)]);\r\n        require(range > _shipStats[uint(ShipStats.Range)]);\r\n        require(luck > _shipStats[uint(ShipStats.Luck)]);\r\n\r\n        _shipStats[uint(ShipStats.Level)] = uint8(level + 1);\r\n        _shipStats[uint(ShipStats.Attack)] = uint8(attack);\r\n        _shipStats[uint(ShipStats.Defense)] = uint8(defense);\r\n        _shipStats[uint(ShipStats.Speed)] = uint8(speed);\r\n        _shipStats[uint(ShipStats.Range)] = uint8(range);\r\n        _shipStats[uint(ShipStats.Luck)] = uint8(luck);\r\n\r\n        // only upgrade after confirmed transaction by Upgrade Ship Contract\r\n        ethernautsStorage.updateStats(_tokenId, _shipStats);\r\n\r\n        // mark all objects as used and change owner\r\n        for(i = 0; i < _objects.length; i++) {\r\n            ethernautsStorage.updateState(_objects[i], uint8(AssetState.Used));\r\n\r\n            // Register the approval and transfer to upgrade ship contract\r\n            _approve(_objects[i], address(this));\r\n            _transferFrom(msg.sender, address(this), _objects[i]);\r\n        }\r\n\r\n        Upgrade(_tokenId);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_GOLDENGOOSE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CStorageAddress\",\"type\":\"address\"}],\"name\":\"setEthernautsStorageContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creatorTokenID\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_assetID\",\"type\":\"uint16\"},{\"name\":\"_category\",\"type\":\"uint8\"},{\"name\":\"_attributes\",\"type\":\"uint8\"},{\"name\":\"_stats\",\"type\":\"uint8[10]\"}],\"name\":\"createNewAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethernautsStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_SEEDED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_TRADABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATS_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_LEASABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_PRODUCIBLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_CONSUMABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SHIP_SLOTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_objects\",\"type\":\"uint256[5]\"}],\"name\":\"upgradeShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_PERMANENT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isExploring\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ATTR_EXPLORABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCTO\",\"type\":\"address\"}],\"name\":\"setCTO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Build\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"EthernautsUpgrade","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c85cdc9a8a17fb7d8758a96760f25ad4f94377f0994da6d91e7881b8c15d8a98"}]}