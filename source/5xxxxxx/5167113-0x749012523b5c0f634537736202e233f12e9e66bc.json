{"status":"1","message":"OK","result":[{"SourceCode":"// CryptoGods Copyright (c) 2018. All rights reserved.\r\n\r\npragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n}\r\ncontract Owned {\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n    address private newCeoAddress;\r\n    address private newCooAddress;\r\n    function Owned() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        _;\r\n    }\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        newCeoAddress = _newCEO;\r\n    }\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n        newCooAddress = _newCOO;\r\n    }\r\n    function acceptCeoOwnership() public {\r\n        require(msg.sender == newCeoAddress);\r\n        require(address(0) != newCeoAddress);\r\n        ceoAddress = newCeoAddress;\r\n        newCeoAddress = address(0);\r\n    }\r\n    function acceptCooOwnership() public {\r\n        require(msg.sender == newCooAddress);\r\n        require(address(0) != newCooAddress);\r\n        cooAddress = newCooAddress;\r\n        newCooAddress = address(0);\r\n    }\r\n}\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\ncontract ERC20 is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public constant symbol = \"GPC\";\r\n    string public constant name = \"God Power Coin\";\r\n    uint8 public constant decimals = 18;\r\n    uint constant WAD = 10 ** 18;\r\n    uint public _totalSupply = (10 ** 9) * WAD;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    function () public payable {\r\n        revert();\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCLevel returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(ceoAddress, tokens);\r\n    }\r\n    \r\n    // Payout\r\n    function payout(uint amount) public onlyCLevel {\r\n        if (amount > this.balance)\r\n            amount = this.balance;\r\n        ceoAddress.transfer(amount);\r\n    }\r\n}\r\n\r\ncontract ERC721 is ERC20 {\r\n\r\n    function _addressNotNull(address _to) private pure returns(bool) {\r\n        return _to != address(0);\r\n    }\r\n    function _approved(address _to, uint _tokenId) private view returns(bool) {\r\n        return token[_tokenId].approved == _to;\r\n    }\r\n    function _ownsToken(address user, uint _tokenId) public view returns(bool) {\r\n        return user == token[_tokenId].owner;\r\n    }\r\n    function _transferToken(address _from, address _to, uint _tokenId) internal {\r\n        token[_tokenId].owner = _to;\r\n        token[_tokenId].approved = address(0);\r\n        TransferToken(_from, _to, _tokenId);\r\n    }\r\n\r\n    uint[] public tokenList;\r\n    \r\n    struct TOKEN {\r\n        \r\n        address owner;\r\n        address approved;\r\n        \r\n        uint price;\r\n        uint lastPrice;\r\n        \r\n        uint mSpeed;\r\n\r\n        uint mLastPayoutBlock;\r\n    }\r\n\r\n    mapping(uint => TOKEN) public token;\r\n    \r\n    event Birth(uint indexed tokenId, uint startPrice);\r\n    event TokenSold(uint indexed tokenId, uint price, address indexed prevOwner, address indexed winner);\r\n    event TransferToken(address indexed from, address indexed to, uint indexed tokenId);\r\n    event ApprovalToken(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    \r\n    function approveToken(address _to, uint _tokenId) public {\r\n        require(_ownsToken(msg.sender, _tokenId));\r\n        token[_tokenId].approved = _to;\r\n        ApprovalToken(msg.sender, _to, _tokenId);\r\n    }\r\n    function getTotalTokenSupply() public view returns(uint) {\r\n        return tokenList.length;\r\n    }\r\n    function ownerOf(uint _tokenId) public view returns (address owner) {\r\n        owner = token[_tokenId].owner;\r\n    }\r\n    function priceOf(uint _tokenId) public view returns (uint price) {\r\n        price = token[_tokenId].price;\r\n    }\r\n    function takeOwnership(uint _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = token[_tokenId].owner;\r\n\r\n        require(_addressNotNull(newOwner));\r\n        require(_approved(newOwner, _tokenId));\r\n\r\n        _transferToken(oldOwner, newOwner, _tokenId);\r\n    }\r\n    function transferToken(address _to, uint _tokenId) public {\r\n        require(_ownsToken(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n        _transferToken(msg.sender, _to, _tokenId);\r\n    }\r\n    function transferTokenFrom(address _from, address _to, uint _tokenId) public {\r\n        require(_ownsToken(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n        _transferToken(_from, _to, _tokenId);\r\n    }\r\n    function tokenBalanceOf(address _owner) public view returns(uint result) {\r\n        uint totalTokens = tokenList.length;\r\n        uint tokenIndex;\r\n        uint tokenId;\r\n        result = 0;\r\n        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n            tokenId = tokenList[tokenIndex];\r\n            if (token[tokenId].owner == _owner) {\r\n                result = result.add(1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function tokensOfOwner(address _owner) public view returns(uint[] ownerTokens) {\r\n        uint tokenCount = tokenBalanceOf(_owner);\r\n        \r\n        if (tokenCount == 0) return new uint[](0);\r\n\r\n        uint[] memory result = new uint[](tokenCount);\r\n        uint totalTokens = tokenList.length;\r\n        uint resultIndex = 0;\r\n        uint tokenIndex;\r\n        uint tokenId;\r\n        \r\n        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n            tokenId = tokenList[tokenIndex];\r\n            if (token[tokenId].owner == _owner) {\r\n                result[resultIndex] = tokenId;\r\n                resultIndex = resultIndex.add(1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getTokenIds() public view returns(uint[]) {\r\n        return tokenList;\r\n    }\r\n\r\n    // MIN(A * PRICE, MAX(B * PRICE, 100*PRICE + C)) / 100\r\n    \r\n    uint public priceFactorA = 200;\r\n    uint public priceFactorB = 120;\r\n    uint public priceFactorC = 16 * (10**18);\r\n    \r\n    function changePriceFactor(uint a_, uint b_, uint c_) public onlyCLevel {\r\n        priceFactorA = a_;\r\n        priceFactorB = b_;\r\n        priceFactorC = c_;\r\n    }\r\n    \r\n    function getMaxPrice(uint _tokenId) public view returns (uint) {\r\n        uint price = token[_tokenId].lastPrice.mul(priceFactorB);\r\n        uint priceLow = token[_tokenId].lastPrice.mul(100).add(priceFactorC);\r\n        uint priceHigh = token[_tokenId].lastPrice.mul(priceFactorA);\r\n        if (price < priceLow)\r\n            price = priceLow;\r\n        if (price > priceHigh)\r\n            price = priceHigh;\r\n            \r\n        price = price / (10**18);\r\n        price = price.mul(10**16); // round to x.xx ETH\r\n        \r\n        return price;\r\n    }\r\n    \r\n    function changeTokenPrice(uint newPrice, uint _tokenId) public {\r\n        require(\r\n            (_ownsToken(msg.sender, _tokenId))\r\n            || \r\n            ((_ownsToken(address(0), _tokenId)) && ((msg.sender == ceoAddress) || (msg.sender == cooAddress)))\r\n        );\r\n        \r\n        newPrice = newPrice / (10**16);\r\n        newPrice = newPrice.mul(10**16); // round to x.xx ETH\r\n        \r\n        require(newPrice > 0);\r\n\r\n        require(newPrice <= getMaxPrice(_tokenId));\r\n        token[_tokenId].price = newPrice;\r\n    }\r\n}\r\n\r\ncontract GodPowerCoin is ERC721 {\r\n    \r\n    function GodPowerCoin() public {\r\n        balances[msg.sender] = _totalSupply;\r\n        Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    uint public divCutPool = 0;\r\n    uint public divCutMaster = 10; // to master card\r\n    uint public divCutAdmin = 30;\r\n    \r\n    uint public divPoolAmt = 0;\r\n    uint public divMasterAmt = 0;\r\n    \r\n    mapping(address => uint) public dividend;\r\n    \r\n    function withdrawDividend() public {\r\n        require(dividend[msg.sender] > 0);\r\n        msg.sender.transfer(dividend[msg.sender]);\r\n        dividend[msg.sender] = 0;\r\n    }\r\n    \r\n    function setCut(uint admin_, uint pool_, uint master_) public onlyCLevel {\r\n        divCutAdmin = admin_;\r\n        divCutPool = pool_;\r\n        divCutMaster = master_;\r\n    }\r\n    \r\n    function purchase(uint _tokenId, uint _newPrice) public payable {\r\n        address oldOwner = token[_tokenId].owner;\r\n        uint sellingPrice = token[_tokenId].price;\r\n        \r\n        require(oldOwner != msg.sender);\r\n        require(msg.sender != address(0));\r\n\r\n        require(sellingPrice > 0); // can't purchase unreleased token\r\n\r\n        require(msg.value >= sellingPrice);\r\n        uint purchaseExcess = msg.value.sub(sellingPrice);\r\n\r\n        payoutMining(_tokenId); // must happen before owner change!!\r\n\r\n        uint payment = sellingPrice.mul(1000 - divCutPool - divCutAdmin - divCutMaster) / 1000;\r\n        if (divCutPool > 0)\r\n            divPoolAmt = divPoolAmt.add(sellingPrice.mul(divCutPool) / 1000);\r\n        \r\n        divMasterAmt = divMasterAmt.add(sellingPrice.mul(divCutMaster) / 1000);\r\n        \r\n        token[_tokenId].lastPrice = sellingPrice;\r\n\r\n        uint maxPrice = getMaxPrice(_tokenId);\r\n        if ((_newPrice > maxPrice) || (_newPrice == 0))\r\n            _newPrice = maxPrice;\r\n            \r\n        token[_tokenId].price = _newPrice;\r\n\r\n        _transferToken(oldOwner, msg.sender, _tokenId);\r\n        \r\n        if (_tokenId % 10000 > 0) {\r\n            address MASTER = token[(_tokenId / 10000).mul(10000)].owner;\r\n            dividend[MASTER] = dividend[MASTER].add(sellingPrice.mul(divCutMaster) / 1000);\r\n        }\r\n        \r\n        oldOwner.transfer(payment);\r\n\r\n        if (purchaseExcess > 0)\r\n            msg.sender.transfer(purchaseExcess);\r\n\r\n        TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\r\n    }\r\n    \r\n    function _createToken(uint tokenId, uint _price, address _owner, uint _mBaseSpeed) internal {\r\n        \r\n        token[tokenId].owner = _owner;\r\n        token[tokenId].price = _price;\r\n        token[tokenId].lastPrice = _price;\r\n        \r\n        token[tokenId].mSpeed = _mBaseSpeed;\r\n\r\n        token[tokenId].mLastPayoutBlock = block.number;\r\n        \r\n        mSumRawSpeed = mSumRawSpeed.add(getMiningRawSpeed(tokenId));\r\n        \r\n        Birth(tokenId, _price);\r\n        tokenList.push(tokenId);\r\n    }\r\n    function createToken(uint tokenId, uint _price, address _owner, uint _mBaseSpeed) public onlyCLevel {\r\n        require(_price != 0);\r\n        if (_owner == address(0))\r\n            _owner = ceoAddress;\r\n\r\n        require(token[tokenId].price == 0);\r\n        _createToken(tokenId, _price, _owner, _mBaseSpeed);\r\n        TransferToken(0, _owner, tokenId);\r\n    }\r\n    function createSimilarTokens(uint[] tokenId, uint _price, address _owner, uint _mBaseSpeed) public onlyCLevel {\r\n        require(_price != 0);\r\n        if (_owner == address(0))\r\n            _owner = ceoAddress;\r\n\r\n        for (uint i = 0; i < tokenId.length; i++) {\r\n            require(token[tokenId[i]].price == 0);\r\n            _createToken(tokenId[i], _price, _owner, _mBaseSpeed);\r\n            TransferToken(0, _owner, tokenId[i]);\r\n        }\r\n    }\r\n    function createMultipleTokens(uint[] tokenId, uint[] _price, address _owner, uint[] _mBaseSpeed) public onlyCLevel {\r\n        if (_owner == address(0))\r\n            _owner = ceoAddress;\r\n\r\n        for (uint i = 0; i < tokenId.length; i++) {\r\n            require(_price[i] != 0);\r\n            require(token[tokenId[i]].price == 0);\r\n            _createToken(tokenId[i], _price[i], _owner, _mBaseSpeed[i]);\r\n            TransferToken(0, _owner, tokenId[i]);\r\n        }\r\n    }\r\n    \r\n    event MiningUpgrade(address indexed sender, uint indexed token, uint newLevelSpeed);\r\n\r\n    // ETH: 6000 blocks per day, 5 ETH per block\r\n    \r\n    uint public mSumRawSpeed = 0;\r\n\r\n    uint public mCoinPerBlock = 50;\r\n    \r\n    uint public mUpgradeCostFactor = mCoinPerBlock * 6000 * WAD;\r\n    uint public mUpgradeSpeedup = 1040; // = * 1.04\r\n    \r\n    function adminSetMining(uint mCoinPerBlock_, uint mUpgradeCostFactor_, uint mUpgradeSpeedup_) public onlyCLevel {\r\n        mCoinPerBlock = mCoinPerBlock_;\r\n        mUpgradeCostFactor = mUpgradeCostFactor_;\r\n        mUpgradeSpeedup = mUpgradeSpeedup_;\r\n    }\r\n    \r\n    function getMiningRawSpeed(uint id) public view returns (uint) {\r\n        return token[id].mSpeed;\r\n    }\r\n    function getMiningRealSpeed(uint id) public view returns (uint) {\r\n        return getMiningRawSpeed(id).mul(mCoinPerBlock) / mSumRawSpeed;\r\n    }\r\n    function getMiningUpgradeCost(uint id) public view returns (uint) {\r\n        return getMiningRawSpeed(id).mul(mUpgradeCostFactor) / mSumRawSpeed;\r\n    }\r\n    function upgradeMining(uint id) public {\r\n        uint cost = getMiningUpgradeCost(id);\r\n        balances[msg.sender] = balances[msg.sender].sub(cost);\r\n        _totalSupply = _totalSupply.sub(cost);\r\n        \r\n        mSumRawSpeed = mSumRawSpeed.sub(getMiningRawSpeed(id));\r\n        token[id].mSpeed = token[id].mSpeed.mul(mUpgradeSpeedup) / 1000;\r\n        mSumRawSpeed = mSumRawSpeed.add(getMiningRawSpeed(id));\r\n        \r\n        MiningUpgrade(msg.sender, id, token[id].mSpeed);\r\n    }\r\n    function upgradeMiningMultipleTimes(uint id, uint n) public {\r\n        for (uint i = 0; i < n; i++) {\r\n            uint cost = getMiningUpgradeCost(id);\r\n            balances[msg.sender] = balances[msg.sender].sub(cost);\r\n            _totalSupply = _totalSupply.sub(cost);\r\n        \r\n            mSumRawSpeed = mSumRawSpeed.sub(getMiningRawSpeed(id));\r\n            token[id].mSpeed = token[id].mSpeed.mul(mUpgradeSpeedup) / 1000;\r\n            mSumRawSpeed = mSumRawSpeed.add(getMiningRawSpeed(id));\r\n        }\r\n        MiningUpgrade(msg.sender, id, token[id].mSpeed);\r\n    }\r\n    function payoutMiningAll(address owner, uint[] list) public {\r\n        uint sum = 0;\r\n        for (uint i = 0; i < list.length; i++) {\r\n            uint id = list[i];\r\n            require(token[id].owner == owner);\r\n            uint blocks = block.number.sub(token[id].mLastPayoutBlock);\r\n            token[id].mLastPayoutBlock = block.number;\r\n            sum = sum.add(getMiningRawSpeed(id).mul(mCoinPerBlock).mul(blocks).mul(WAD) / mSumRawSpeed); // mul WAD !\r\n        }\r\n        balances[owner] = balances[owner].add(sum);\r\n        _totalSupply = _totalSupply.add(sum);\r\n    }\r\n    function payoutMining(uint id) public {\r\n        require(token[id].mLastPayoutBlock > 0);\r\n        uint blocks = block.number.sub(token[id].mLastPayoutBlock);\r\n        token[id].mLastPayoutBlock = block.number;\r\n        address owner = token[id].owner;\r\n        uint coinsMined = getMiningRawSpeed(id).mul(mCoinPerBlock).mul(blocks).mul(WAD) / mSumRawSpeed; // mul WAD !\r\n        \r\n        balances[owner] = balances[owner].add(coinsMined);\r\n        _totalSupply = _totalSupply.add(coinsMined);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"priceFactorC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"mSpeed\",\"type\":\"uint256\"},{\"name\":\"mLastPayoutBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPoolAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCutPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_mBaseSpeed\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_mBaseSpeed\",\"type\":\"uint256\"}],\"name\":\"createSimilarTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"upgradeMiningMultipleTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCutAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMiningRawSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_ownsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"list\",\"type\":\"uint256[]\"}],\"name\":\"payoutMiningAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMiningUpgradeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_mBaseSpeed\",\"type\":\"uint256[]\"}],\"name\":\"createMultipleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMiningRealSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"payoutMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"upgradeMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_\",\"type\":\"uint256\"},{\"name\":\"b_\",\"type\":\"uint256\"},{\"name\":\"c_\",\"type\":\"uint256\"}],\"name\":\"changePriceFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCutMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"uint256\"},{\"name\":\"pool_\",\"type\":\"uint256\"},{\"name\":\"master_\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mCoinPerBlock_\",\"type\":\"uint256\"},{\"name\":\"mUpgradeCostFactor_\",\"type\":\"uint256\"},{\"name\":\"mUpgradeSpeedup_\",\"type\":\"uint256\"}],\"name\":\"adminSetMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mUpgradeCostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mUpgradeSpeedup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mSumRawSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mCoinPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divMasterAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactorB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactorA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newLevelSpeed\",\"type\":\"uint256\"}],\"name\":\"MiningUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GodPowerCoin","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8320ef3f5a3702e7a5a4b42f39a5c566d60edeb40580ee934a50512ed96fe889"}]}