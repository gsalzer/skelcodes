{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract TokenInterface {\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract Kitty {\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function getKitty(uint256 _id) external view returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address owner;\r\n    Kitty kitty;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function () external payable {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function getTokens(address _contract, uint256 _amount) external {\r\n        TokenInterface(_contract).transfer(owner, _amount);\r\n    }\r\n\r\n    function setKitty(address _contract) external onlyOwner {\r\n        kitty = Kitty(_contract);\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    string public constant name = \"Crypto Shrooms\"; // ERC-721\r\n    string public constant symbol = \"SHRM\"; // ERC-721\r\n    uint256[] public tokenIdToDna;\r\n    mapping (address => uint256) public balanceOf; // ERC-721\r\n    mapping (uint256 => address) public tokenIdToApproved;\r\n    mapping (uint256 => address) tokenIdToOwner;\r\n\r\n    event Transfer(address from, address to, uint256 tokenId); // ERC-721\r\n    event Approval(address owner, address approved, uint256 tokenId); // ERC-721\r\n\r\n    constructor() public {\r\n        tokenIdToDna.push(0);\r\n    }\r\n\r\n    // ERC-721\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenIdToDna.length - 1;\r\n    }\r\n\r\n    // ERC-721\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n        owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    // ERC-721\r\n    function approve(address _to, uint256 _tokenId) external {\r\n        require(msg.sender != address(0));\r\n        require(tokenIdToOwner[_tokenId] == msg.sender);\r\n        tokenIdToApproved[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // ERC-721\r\n    function transfer(address _to, uint256 _tokenId) external {\r\n        require(msg.sender != address(0));\r\n        require(tokenIdToOwner[_tokenId] == msg.sender);\r\n        require(_to != address(0));\r\n        balanceOf[msg.sender]--;\r\n        tokenIdToOwner[_tokenId] = _to;\r\n        balanceOf[_to]++;\r\n        delete tokenIdToApproved[_tokenId];\r\n        emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // ERC-721\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        require(msg.sender != address(0));\r\n        require(tokenIdToApproved[_tokenId] == msg.sender);\r\n        require(_from != address(0));\r\n        require(tokenIdToOwner[_tokenId] == _from);\r\n        require(_to != address(0));\r\n        balanceOf[_from]--;\r\n        tokenIdToOwner[_tokenId] = _to;\r\n        balanceOf[_to]++;\r\n        delete tokenIdToApproved[_tokenId];\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    // ERC-721\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds) {\r\n        uint256 tokenCount = balanceOf[_owner];\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 total = tokenIdToDna.length - 1;\r\n            uint256 resultIndex = 0;\r\n            for (uint i = 1; i <= total; i++) {\r\n                if (tokenIdToOwner[i] == _owner) {\r\n                    result[resultIndex] = i;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function _create(uint256 _dna, address _owner) internal {\r\n        uint256 tokenId = tokenIdToDna.push(_dna) - 1;\r\n        tokenIdToOwner[tokenId] = _owner;\r\n        balanceOf[_owner]++;\r\n        emit Transfer(address(this), _owner, tokenId);\r\n    }\r\n\r\n    function _move(uint256 _tokenId, address _from, address _to) internal {\r\n        balanceOf[_from]--;\r\n        tokenIdToOwner[_tokenId] = _to;\r\n        balanceOf[_to]++;\r\n        delete tokenIdToApproved[_tokenId];\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n}\r\n\r\ncontract Shroom is Ownable, Token {\r\n    mapping (uint256 => bool) public kittyIdToDead;\r\n    mapping (uint256 => uint256) shroomIdToPrice;\r\n    uint256 salt;\r\n\r\n    event SaleCreated(uint256 shroomId, uint256 price);\r\n    event SaleSuccessful(uint256 shroomId);\r\n    event SaleCancelled(uint256 shroomId);\r\n\r\n    constructor() public {\r\n        salt = now;\r\n    }\r\n\r\n    function getNewShroom(uint256 _kittyId) external {\r\n        require(msg.sender != address(0));\r\n        require(!kittyIdToDead[_kittyId]);\r\n        require(kitty.ownerOf(_kittyId) == msg.sender);\r\n        uint256 dna;\r\n        (,,,,,,,,,dna) = kitty.getKitty(_kittyId);\r\n        require(dna != 0);\r\n        salt++;\r\n        dna = uint256(keccak256(dna + salt + now));\r\n        kittyIdToDead[_kittyId] = true;\r\n        _create(dna, msg.sender);\r\n    }\r\n\r\n    function createSale(uint256 _shroomId, uint256 _price) external {\r\n        address currentOwner = tokenIdToOwner[_shroomId];\r\n        require(currentOwner != address(0));\r\n        require(currentOwner == msg.sender);\r\n        shroomIdToPrice[_shroomId] = _price;\r\n        emit SaleCreated(_shroomId, _price);\r\n    }\r\n\r\n    function buy(uint256 _shroomId) external payable {\r\n        address newOwner = msg.sender;\r\n        require(newOwner != address(0));\r\n        address currentOwner = tokenIdToOwner[_shroomId];\r\n        require(currentOwner != address(0));\r\n        uint256 price = shroomIdToPrice[_shroomId];\r\n        require(price > 0);\r\n        require(msg.value >= price);\r\n        delete shroomIdToPrice[_shroomId];\r\n        currentOwner.transfer(price);\r\n        emit SaleSuccessful(_shroomId);\r\n        _move(_shroomId, currentOwner, newOwner);\r\n    }\r\n\r\n    function cancelSale(uint256 _shroomId) external {\r\n        address currentOwner = tokenIdToOwner[_shroomId];\r\n        require(currentOwner != address(0));\r\n        require(currentOwner == msg.sender);\r\n        require(shroomIdToPrice[_shroomId] > 0);\r\n        delete shroomIdToPrice[_shroomId];\r\n        emit SaleCancelled(_shroomId);\r\n    }\r\n\r\n    function getPrice(uint256 _shroomId) external view returns (uint256) {\r\n        uint256 price = shroomIdToPrice[_shroomId];\r\n        require(price > 0);\r\n        return price;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyIdToDead\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToDna\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shroomId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"getNewShroom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shroomId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shroomId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shroomId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shroomId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shroomId\",\"type\":\"uint256\"}],\"name\":\"SaleSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shroomId\",\"type\":\"uint256\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Shroom","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3a0a81b4ca768327eb08c3e597818540107419629b82c9733eff76ab2207b1b"}]}