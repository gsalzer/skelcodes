{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract TRIPAGO is ERC20\r\n{ using SafeMath for uint256;\r\n    // Name of the token\r\n    string public constant name = \"TRIPAGO\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"TPG\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 1000000000 * 10 ** 18; // 1 Billion inculding decimal precesion\r\n    address public owner;                    // Owner of this contract\r\n    uint256 public _price_tokn; \r\n    uint256 no_of_tokens;\r\n    uint256 public pre_startdate;\r\n    uint256 public ico_startdate;\r\n    uint256 public pre_enddate;\r\n    uint256 public ico_enddate;\r\n    bool stopped = false;\r\n   \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n     address ethFundMain = 0x85B442dBD198104F5D43Fbe44F9F8047D9D3705F; \r\n\r\n    \r\n     enum Stages {\r\n        NOTSTARTED,\r\n        PRESALE,\r\n        ICO,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function TRIPAGO() public\r\n    {\r\n        \r\n         owner = msg.sender;\r\n        balances[owner] = 600000000 * 10 **18;  //600 Million given to Owner\r\n        balances[address(this)]=  400000000 * 10 **18;  //400 Million given to Smart COntract\r\n        stage = Stages.NOTSTARTED;\r\n        emit Transfer(0, owner, balances[owner]);\r\n        emit  Transfer(0, address(this), balances[address(this)]);\r\n       \r\n    }\r\n    \r\n     function start_PREICO() public onlyOwner atStage(Stages.NOTSTARTED)\r\n      {\r\n          stage = Stages.PRESALE;\r\n          stopped = false;\r\n         _price_tokn = 16000;     // 1 Ether = 16000 coins\r\n          pre_startdate = now;\r\n          pre_enddate = now + 19 days;\r\n       \r\n          }\r\n    \r\n    function start_ICO() public onlyOwner atStage(Stages.PRESALE)\r\n      {\r\n        //  require(now > pre_enddate);\r\n          stage = Stages.ICO;\r\n          stopped = false;\r\n         _price_tokn = 12000;    // 1 Ether = 12000 coins\r\n          ico_startdate = now;\r\n          ico_enddate = now + 31 days;\r\n     \r\n      }\r\n  \r\n  \r\n    function () public payable \r\n    {\r\n      require(msg.value >= .25 ether);\r\n        require(!stopped && msg.sender != owner);\r\n        \r\n          if( stage == Stages.PRESALE && now <= pre_enddate )\r\n            { \r\n                no_of_tokens =((msg.value).mul(_price_tokn));\r\n                drain(msg.value);\r\n                transferTokens(msg.sender,no_of_tokens);\r\n               }\r\n               \r\n                else if(stage == Stages.ICO && now <= ico_enddate )\r\n            {\r\n             \r\n               no_of_tokens =((msg.value).mul(_price_tokn));\r\n               drain(msg.value);\r\n               transferTokens(msg.sender,no_of_tokens);\r\n            }\r\n        \r\n        else\r\n        {\r\n            revert();\r\n        }\r\n       \r\n    }\r\n     \r\n      \r\n    \r\n    // called by the owner, pause ICO\r\n    function StopICO() external onlyOwner \r\n    {\r\n        stopped = true;\r\n       }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner \r\n    {\r\n        \r\n        stopped = false;\r\n      }\r\n      \r\n      \r\n       function end_ICO() external onlyOwner\r\n     {\r\n          stage = Stages.ENDED;\r\n          uint256 x = balances[address(this)];\r\n         balances[owner] = (balances[owner]).add(balances[address(this)]);\r\n         balances[address(this)] = 0;\r\n       emit  Transfer(address(this), owner , x);\r\n         \r\n         \r\n     }\r\n\r\n\r\n    // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalsupply;\r\n     }\r\n    \r\n    // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n    \r\n    // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\r\n     require( _to != 0x0);\r\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n     balances[_from] = (balances[_from]).sub(_amount);\r\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n     balances[_to] = (balances[_to]).add(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n     return true;\r\n         }\r\n    \r\n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         require( _spender != 0x0);\r\n         allowed[msg.sender][_spender] = _amount;\r\n       emit  Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         require( _owner != 0x0 && _spender !=0x0);\r\n         return allowed[_owner][_spender];\r\n   }\r\n\r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n       emit Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n         }\r\n    \r\n          // Transfer the balance from owner's account to another account\r\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\r\n        require( _to != 0x0);       \r\n        require(balances[address(this)] >= _amount && _amount > 0);\r\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n       emit Transfer(address(this), _to, _amount);\r\n        return true;\r\n        }\r\n    \r\n    \r\n    function drain(uint256 value) private {\r\n         \r\n        ethFundMain.transfer(value);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_PREICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TRIPAGO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://afcde9c6a61ca8746cb40fdc130feff2ece4b5c20acbfe1b9b9c709e99865c80"}]}