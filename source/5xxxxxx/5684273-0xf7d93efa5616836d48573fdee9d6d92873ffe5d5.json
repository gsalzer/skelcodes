{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n            );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n            ERC20 token,\r\n            address from,\r\n            address to,\r\n            uint256 value\r\n            )\r\n        internal\r\n        {\r\n            require(token.transferFrom(from, to, value));\r\n        }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20Basic public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary = 0x2F1C2Fb4cf9b46172D59d8878Fc795277b8a2c9a;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 public firstTime = 1529942400;         //2018-06-26\r\n    uint256 public secondTime = 1532534400;        //2018-07-26\r\n    uint256 public thirdTime = 1535212800;         //2018-08-26\r\n\r\n    uint256 public firstPay = 900000000000000000000000000;    //900 million  FTI\r\n    uint256 public secondPay = 900000000000000000000000000;    //900 million  FTI\r\n    uint256 public thirdPay = 600000000000000000000000000;    //900 million  FTI\r\n\r\n    constructor(\r\n            ERC20Basic _token\r\n            )\r\n        public\r\n        {\r\n            token = _token;\r\n        }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public {\r\n        uint256 tmpPay = 0;\r\n        if(block.timestamp >= firstTime && firstPay > 0){\r\n            tmpPay = firstPay;\r\n            firstPay = 0;\r\n        }else if(block.timestamp >= secondTime && secondPay > 0 ){\r\n            tmpPay = secondPay;\r\n            secondPay = 0;\r\n        }else if (block.timestamp >= thirdTime && thirdPay > 0) {\r\n            tmpPay = token.balanceOf(this);\r\n            thirdPay = 0;\r\n        }\r\n        require(tmpPay > 0);\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount >= tmpPay);\r\n        token.safeTransfer(beneficiary, tmpPay);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenTimelock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000943ed852dadb5c3938ecdc6883718df8142de4c8","Library":"","SwarmSource":"bzzr://ba6c864e04c96db63fe0f79593668780eac75352222786f1e2309d29d4130c06"}]}