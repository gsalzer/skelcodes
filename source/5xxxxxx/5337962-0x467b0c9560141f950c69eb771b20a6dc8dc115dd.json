{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/*\r\n  https://cryptogs.io\r\n  --Austin Thomas Griffith for ETHDenver\r\n  ( this is unaudited )\r\n*/\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract SlammerTime is Ownable{\r\n\r\n  string public constant purpose = \"ETHDenver\";\r\n  string public constant contact = \"https://cryptogs.io\";\r\n  string public constant author = \"Austin Thomas Griffith | austin@concurrence.io\";\r\n\r\n  address public cryptogs;\r\n\r\n  function SlammerTime(address _cryptogs) public {\r\n    //deploy slammertime with cryptogs address coded in so\r\n    // only the cryptogs address can mess with it\r\n    cryptogs=_cryptogs;\r\n  }\r\n\r\n  function startSlammerTime(address _player1,uint256[5] _id1,address _player2,uint256[5] _id2) public returns (bool) {\r\n    //only the cryptogs contract should be able to hit it\r\n    require(msg.sender==cryptogs);\r\n\r\n    Cryptogs cryptogsContract = Cryptogs(cryptogs);\r\n\r\n    for(uint8 i=0;i<5;i++){\r\n      //make sure player1 owns _id1\r\n      require(cryptogsContract.tokenIndexToOwner(_id1[i])==_player1);\r\n      //transfer id1 in\r\n      cryptogsContract.transferFrom(_player1,address(this),_id1[i]);\r\n      //make this contract is the owner\r\n      require(cryptogsContract.tokenIndexToOwner(_id1[i])==address(this));\r\n    }\r\n\r\n\r\n    for(uint8 j=0;j<5;j++){\r\n      //make sure player2 owns _id1\r\n      require(cryptogsContract.tokenIndexToOwner(_id2[j])==_player2);\r\n      //transfer id1 in\r\n      cryptogsContract.transferFrom(_player2,address(this),_id2[j]);\r\n      //make this contract is the owner\r\n      require(cryptogsContract.tokenIndexToOwner(_id2[j])==address(this));\r\n    }\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferBack(address _toWhom, uint256 _id) public returns (bool) {\r\n    //only the cryptogs contract should be able to hit it\r\n    require(msg.sender==cryptogs);\r\n\r\n    Cryptogs cryptogsContract = Cryptogs(cryptogs);\r\n\r\n    require(cryptogsContract.tokenIndexToOwner(_id)==address(this));\r\n    cryptogsContract.transfer(_toWhom,_id);\r\n    require(cryptogsContract.tokenIndexToOwner(_id)==_toWhom);\r\n    return true;\r\n  }\r\n\r\n  function withdraw(uint256 _amount) public onlyOwner returns (bool) {\r\n    require(this.balance >= _amount);\r\n    assert(owner.send(_amount));\r\n    return true;\r\n  }\r\n\r\n  function withdrawToken(address _token,uint256 _amount) public onlyOwner returns (bool) {\r\n    StandardToken token = StandardToken(_token);\r\n    token.transfer(msg.sender,_amount);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract StandardToken {\r\n  function transfer(address _to, uint256 _value) public returns (bool) { }\r\n}\r\n\r\n\r\ncontract Cryptogs {\r\n  mapping (uint256 => address) public tokenIndexToOwner;\r\n  function transfer(address _to,uint256 _tokenId) external { }\r\n  function transferFrom(address _from,address _to,uint256 _tokenId) external { }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cryptogs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player1\",\"type\":\"address\"},{\"name\":\"_id1\",\"type\":\"uint256[5]\"},{\"name\":\"_player2\",\"type\":\"address\"},{\"name\":\"_id2\",\"type\":\"uint256[5]\"}],\"name\":\"startSlammerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contact\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purpose\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toWhom\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"transferBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cryptogs\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SlammerTime","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000efabe332d31c3982b76f8630a306c960169bd5b3","Library":"","SwarmSource":"bzzr://8a45d5fa218f0ef3386f51da38c2860ba8f83fe6d2054c09f62a102629fbf191"}]}