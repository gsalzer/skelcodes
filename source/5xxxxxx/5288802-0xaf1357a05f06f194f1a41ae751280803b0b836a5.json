{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract InvestorsList is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /* Investor */\r\n\r\n    enum WhiteListStatus  {Usual, WhiteList, PreWhiteList}\r\n\r\n    struct Investor {\r\n        bytes32 id;\r\n        uint tokensCount;\r\n        address walletForTokens;\r\n        WhiteListStatus whiteListStatus;\r\n        bool isVerified;\r\n    }\r\n\r\n    /*Investor's end*/\r\n\r\n    mapping (address => bool) manipulators;\r\n    mapping (address => bytes32) public nativeInvestorsIds;\r\n    mapping (bytes32 => Investor) public investorsList;\r\n\r\n    /*Manipulators*/\r\n\r\n    modifier allowedToManipulate(){\r\n        require(manipulators[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeManipulatorAddress(address saleAddress, bool isAllowedToManipulate) external onlyOwner{\r\n        require(saleAddress != 0x0);\r\n        manipulators[saleAddress] = isAllowedToManipulate;\r\n    }\r\n\r\n    /*Manipulators' end*/\r\n\r\n    function setInvestorId(address investorAddress, bytes32 id) external onlyOwner{\r\n        require(investorAddress != 0x0 && id != 0);\r\n        nativeInvestorsIds[investorAddress] = id;\r\n    }\r\n\r\n    function addInvestor(\r\n        bytes32 id,\r\n        WhiteListStatus status,\r\n        bool isVerified\r\n    ) external onlyOwner {\r\n        require(id != 0);\r\n        require(investorsList[id].id == 0);\r\n\r\n        investorsList[id].id = id;\r\n        investorsList[id].tokensCount = 0;\r\n        investorsList[id].whiteListStatus = status;\r\n        investorsList[id].isVerified = isVerified;\r\n    }\r\n\r\n    function removeInvestor(bytes32 id) external onlyOwner {\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].id = 0;\r\n    }\r\n\r\n    function isAllowedToBuyByAddress(address investor) external view returns(bool){\r\n        require(investor != 0x0);\r\n        bytes32 id = nativeInvestorsIds[investor];\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].isVerified;\r\n    }\r\n\r\n    function isAllowedToBuyByAddressWithoutVerification(address investor) external view returns(bool){\r\n        require(investor != 0x0);\r\n        bytes32 id = nativeInvestorsIds[investor];\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return true;\r\n    }\r\n\r\n    function isAllowedToBuy(bytes32 id) external view returns(bool){\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].isVerified;\r\n    }\r\n\r\n    function isPreWhiteListed(bytes32 id) external constant returns(bool){\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].whiteListStatus == WhiteListStatus.PreWhiteList;\r\n    }\r\n\r\n    function isWhiteListed(bytes32 id) external view returns(bool){\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].whiteListStatus == WhiteListStatus.WhiteList;\r\n    }\r\n\r\n    function setVerificationStatus(bytes32 id, bool status) external onlyOwner{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].isVerified = status;\r\n    }\r\n\r\n    function setWhiteListStatus(bytes32 id, WhiteListStatus status) external onlyOwner{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].whiteListStatus = status;\r\n    }\r\n\r\n    function addTokens(bytes32 id, uint tokens) external allowedToManipulate{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].tokensCount = investorsList[id].tokensCount.add(tokens);\r\n    }\r\n\r\n    function subTokens(bytes32 id, uint tokens) external allowedToManipulate{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].tokensCount = investorsList[id].tokensCount.sub(tokens);\r\n    }\r\n\r\n    function setWalletForTokens(bytes32 id, address wallet) external onlyOwner{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].walletForTokens = wallet;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nativeInvestorsIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setWhiteListStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"subTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isAllowedToBuyByAddressWithoutVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleAddress\",\"type\":\"address\"},{\"name\":\"isAllowedToManipulate\",\"type\":\"bool\"}],\"name\":\"changeManipulatorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"addInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"investorsList\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"tokensCount\",\"type\":\"uint256\"},{\"name\":\"walletForTokens\",\"type\":\"address\"},{\"name\":\"whiteListStatus\",\"type\":\"uint8\"},{\"name\":\"isVerified\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setVerificationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isAllowedToBuyByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isAllowedToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"removeInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isPreWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletForTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"setInvestorId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InvestorsList","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd2378ef1760962eb050242784e15f17a76d9d692e6ba3f9e31b81d19cacbd7b"}]}