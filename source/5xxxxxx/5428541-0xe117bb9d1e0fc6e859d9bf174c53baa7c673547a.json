{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n  address public addressTeam =  0x04cFbFa64917070d7AEECd20225782240E8976dc;\r\n  bool public frozenAccountICO = true;\r\n  mapping(address => uint256) balances;\r\n  mapping (address => bool) public frozenAccount;\r\n  function setFrozenAccountICO(bool _frozenAccountICO) public onlyOwner{\r\n    frozenAccountICO = _frozenAccountICO;   \r\n  }\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event FrozenFunds(address target, bool frozen);\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    if (msg.sender != owner && msg.sender != addressTeam){  \r\n      require(!frozenAccountICO); \r\n    }\r\n    require(!frozenAccount[_to]);   // Check if recipient is frozen  \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    if (msg.sender != owner && msg.sender != addressTeam){  \r\n      require(!frozenAccountICO); \r\n    }    \r\n    require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n    require(!frozenAccount[_to]);                       // Check if recipient is frozen      \r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MahalaCoin is Ownable, MintableToken {\r\n  using SafeMath for uint256;    \r\n  string public constant name = \"Mahala Coin\";\r\n  string public constant symbol = \"MHC\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  // address public addressTeam; \r\n  uint public summTeam;\r\n  \r\n  function MahalaCoin() public {\r\n    summTeam =     110000000 * 1 ether;\r\n    //Founders and supporters initial Allocations\r\n    mint(addressTeam, summTeam);\r\n\tmint(owner, 70000000 * 1 ether);\r\n  }\r\n      /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n  function getTotalSupply() public constant returns(uint256){\r\n      return totalSupply;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where Contributors can make\r\n * token Contributions and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // totalTokens\r\n  uint256 public totalTokens;\r\n  // soft cap\r\n  uint softcap;\r\n  // hard cap\r\n  uint hardcap;  \r\n  MahalaCoin public token;\r\n  // balances for softcap\r\n  mapping(address => uint) public balances;\r\n  // balances for softcap\r\n  mapping(address => uint) public balancesToken;  \r\n  // The token being offered\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  \r\n  //pre-sale\r\n    //start\r\n  uint256 public startPreSale;\r\n    //end\r\n  uint256 public endPreSale;\r\n\r\n  //ico\r\n    //start\r\n  uint256 public startIco;\r\n    //end \r\n  uint256 public endIco;    \r\n\r\n  //token distribution\r\n  uint256 public maxPreSale;\r\n  uint256 public maxIco;\r\n\r\n  uint256 public totalPreSale;\r\n  uint256 public totalIco;\r\n  \r\n  // how many token units a Contributor gets per wei\r\n  uint256 public ratePreSale;\r\n  uint256 public rateIco;   \r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // minimum quantity values\r\n  uint256 public minQuanValues; \r\n  uint256 public maxQuanValues; \r\n\r\n/**\r\n* event for token Procurement logging\r\n* @param contributor who Pledged for the tokens\r\n* @param beneficiary who got the tokens\r\n* @param value weis Contributed for Procurement\r\n* @param amount amount of tokens Procured\r\n*/\r\n  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\r\n  function Crowdsale() public {\r\n    token = createTokenContract();\r\n    //soft cap\r\n    softcap = 5000 * 1 ether; \r\n    hardcap = 20000 * 1 ether;  \t\r\n    // min quantity values\r\n    minQuanValues = 100000000000000000; //0.1 eth\r\n    // max quantity values\r\n    maxQuanValues = 22 * 1 ether; //    \r\n    // start and end timestamps where investments are allowed\r\n    //Pre-sale\r\n      //start\r\n    startPreSale = 1523260800;//09 Apr 2018 08:00:00 +0000\r\n      //end\r\n    endPreSale = startPreSale + 40 * 1 days;\r\n  \r\n    //ico\r\n      //start\r\n    startIco = endPreSale;\r\n      //end \r\n    endIco = startIco + 40 * 1 days;   \r\n\r\n    // rate;\r\n    ratePreSale = 462;\r\n    rateIco = 231; \r\n    \r\n    // restrictions on amounts during the crowdfunding event stages\r\n    maxPreSale = 30000000 * 1 ether;\r\n    maxIco =     60000000 * 1 ether;    \r\n    // address where funds are collected\r\n    wallet = 0x04cFbFa64917070d7AEECd20225782240E8976dc;\r\n  }\r\n\r\n  function setratePreSale(uint _ratePreSale) public onlyOwner  {\r\n    ratePreSale = _ratePreSale;\r\n  }\r\n \r\n  function setrateIco(uint _rateIco) public onlyOwner  {\r\n    rateIco = _rateIco;\r\n  }   \r\n  \r\n\r\n  // fallback function can be used to Procure tokens\r\n  function () external payable {\r\n    procureTokens(msg.sender);\r\n  }\r\n  \r\n  function createTokenContract() internal returns (MahalaCoin) {\r\n    return new MahalaCoin();\r\n  }\r\n    \r\n  // low level token Pledge function\r\n  function procureTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 backAmount;\r\n    require(beneficiary != address(0));\r\n    //minimum amount in ETH\r\n    require(weiAmount >= minQuanValues);\r\n    //maximum amount in ETH\r\n    require(weiAmount.add(balances[msg.sender]) <= maxQuanValues);    \r\n    //hard cap\r\n    address _this = this;\r\n    require(hardcap > _this.balance);\r\n\r\n    //Pre-sale\r\n    if (now >= startPreSale && now < endPreSale && totalPreSale < maxPreSale){\r\n      tokens = weiAmount.mul(ratePreSale);\r\n\t  if (maxPreSale.sub(totalPreSale) <= tokens){\r\n\t    endPreSale = now;\r\n\t    startIco = now;\r\n\t    endIco = startIco + 40 * 1 days; \r\n\t  }\r\n      if (maxPreSale.sub(totalPreSale) < tokens){\r\n        tokens = maxPreSale.sub(totalPreSale); \r\n        weiAmount = tokens.div(ratePreSale);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalPreSale = totalPreSale.add(tokens);\r\n    }\r\n       \r\n    //ico   \r\n    if (now >= startIco && now < endIco && totalIco < maxIco){\r\n      tokens = weiAmount.mul(rateIco);\r\n      if (maxIco.sub(totalIco) < tokens){\r\n        tokens = maxIco.sub(totalIco); \r\n        weiAmount = tokens.div(rateIco);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalIco = totalIco.add(tokens);\r\n    }        \r\n\r\n    require(tokens > 0);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    token.transfer(msg.sender, tokens);\r\n   // balancesToken[msg.sender] = balancesToken[msg.sender].add(tokens);\r\n    \r\n    if (backAmount > 0){\r\n      msg.sender.transfer(backAmount);    \r\n    }\r\n    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n\r\n  function refund() public{\r\n    address _this = this;\r\n    require(_this.balance < softcap && now > endIco);\r\n    require(balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n  \r\n  function transferTokenToMultisig(address _address) public onlyOwner {\r\n    address _this = this;\r\n    require(_this.balance < softcap && now > endIco);  \r\n    token.transfer(_address, token.balanceOf(_this));\r\n  }   \r\n  \r\n  function transferEthToMultisig() public onlyOwner {\r\n    address _this = this;\r\n    require(_this.balance >= softcap && now > endIco);  \r\n    wallet.transfer(_this.balance);\r\n    token.setFrozenAccountICO(false);\r\n  }  \r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n  function freezeAccount(address target, bool freeze) onlyOwner public {\r\n    token.freezeAccount(target, freeze);\r\n  }\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n    token.mint(target, mintedAmount);\r\n    }  \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_rateIco\",\"type\":\"uint256\"}],\"name\":\"setrateIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxQuanValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferTokenToMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthToMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratePreSale\",\"type\":\"uint256\"}],\"name\":\"setratePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"procureTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuanValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenProcurement\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d36272e9e0da803f5b6c2f1c66eb867cade3c78687bca9366488ec85e975ee4a"}]}