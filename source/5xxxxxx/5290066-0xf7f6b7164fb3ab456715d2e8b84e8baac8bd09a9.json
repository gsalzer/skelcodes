{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Club {\r\n  struct Member {\r\n    bytes20 username;\r\n    uint64 karma; \r\n    uint16 canWithdrawPeriod;\r\n    uint16 birthPeriod;\r\n  }\r\n\r\n  // Manage members.\r\n  mapping(address => Member) public members;\r\n}\r\n\r\n// Last person to press the button before time runs out, wins the pot.\r\n// Button presses cost $.50\r\n// You must pay .5% of the total pot to press the button the first time. (this amount is donated to the reddithereum community).\r\n// After the first button press, a 6 hour countdown will begin, and you won't be able to press the button for 12 hours.\r\n// Each time you press the button, the countdown will decrease by 10%, and cooldown will increase by 10%.\r\n// The pot starts at $100.\r\ncontract Button {\r\n  event Pressed(address indexed presser, uint256 endBlock);\r\n  event Winner(address winner, uint256 winnings);\r\n\r\n  uint64 public countdown;\r\n  uint64 public countdownDecrement;\r\n  uint64 public cooloffIncrement;\r\n\r\n  uint64 public pressFee;\r\n  uint64 public signupFee; // basis points * contract value\r\n  Club public club; // collects signup, bypasses signup.\r\n\r\n  address public lastPresser;\r\n  uint64 public endBlock;\r\n\r\n  struct Presser {\r\n    uint64 numPresses;\r\n    uint64 cooloffEnd;\r\n  }\r\n\r\n  mapping (address => Presser) public pressers;\r\n\r\n  function Button(\r\n    uint64 _countdown, \r\n    uint64 _countdownDecrement, \r\n    uint64 _cooloffIncrement, \r\n    uint64 _pressFee, \r\n    uint64 _signupFee, \r\n    address _club\r\n  ) public payable {\r\n    countdown = _countdown;\r\n    countdownDecrement = _countdownDecrement;\r\n    cooloffIncrement = _cooloffIncrement;\r\n    pressFee = _pressFee;\r\n    signupFee = _signupFee;\r\n    club = Club(_club);\r\n\r\n    lastPresser = msg.sender;\r\n    endBlock = uint64(block.number + countdown);\r\n  }\r\n\r\n  function press() public payable {\r\n    require(block.number <= endBlock);\r\n\r\n    uint256 change = msg.value-pressFee;\r\n    Presser storage p = pressers[msg.sender];\r\n    require(p.cooloffEnd < block.number);\r\n\r\n    if (p.numPresses == 0) {\r\n      // balance - value will never be negative.\r\n      uint128 npf = _newPresserFee(address(this).balance - msg.value);\r\n      change -= npf;\r\n      address(club).transfer(npf);\r\n    }\r\n    // Breaks when pressFee+presserFee > 2^256\r\n    require(change <= msg.value);\r\n\r\n    lastPresser = msg.sender;\r\n    uint64 finalCountdown = countdown - (p.numPresses*countdownDecrement);\r\n    if (finalCountdown < 10 || finalCountdown > countdown) {\r\n      finalCountdown = 10;\r\n    }\r\n    endBlock = uint64(block.number + finalCountdown);\r\n\r\n    p.numPresses++;\r\n    p.cooloffEnd = uint64(block.number + (p.numPresses*cooloffIncrement));\r\n\r\n    if (change > 0) {\r\n      msg.sender.transfer(change);\r\n    }\r\n\r\n    Pressed(msg.sender, endBlock);\r\n  }\r\n\r\n  function close() public {\r\n    require(block.number > endBlock);\r\n    require(lastPresser == msg.sender);\r\n    Winner(msg.sender, address(this).balance);\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n  // Breaks when balance = 10^20 ether.\r\n  function newPresserFee() public view returns (uint128) {\r\n    return _newPresserFee(address(this).balance);\r\n  }\r\n\r\n  function isMember() public view returns (bool) {\r\n    return _isMember();\r\n  }\r\n\r\n  // Caller must assure that _balance < max_uint128.\r\n  function _newPresserFee(uint256 _balance) private view returns (uint128) {\r\n    if (_isMember()){\r\n      return 0;\r\n    }\r\n    return uint128((_balance * signupFee) / 10000);\r\n  }\r\n\r\n  function _isMember() private view returns (bool) {\r\n    var(un, k, cwp, bp) = club.members(msg.sender);\r\n    // members have non-zero birthPeriods\r\n    return bp != 0;\r\n  }\r\n\r\n  // Up the stakes...\r\n  function() payable public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"newPresserFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"club\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pressFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countdownDecrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"press\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooloffIncrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pressers\",\"outputs\":[{\"name\":\"numPresses\",\"type\":\"uint64\"},{\"name\":\"cooloffEnd\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countdown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPresser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signupFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_countdown\",\"type\":\"uint64\"},{\"name\":\"_countdownDecrement\",\"type\":\"uint64\"},{\"name\":\"_cooloffIncrement\",\"type\":\"uint64\"},{\"name\":\"_pressFee\",\"type\":\"uint64\"},{\"name\":\"_signupFee\",\"type\":\"uint64\"},{\"name\":\"_club\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"presser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"Pressed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnings\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"}]","ContractName":"Button","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000005dc000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000032000000000000000000000000501c17b26029f3a129fd9adeb4b642bd35a35248","Library":"","SwarmSource":"bzzr://3b93a7e3cb565b5cd18c1127a35baf5238028a080442bf0ee46a889e8f0feb5e"}]}