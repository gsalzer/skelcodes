{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// File: contracts/utility/ContractReceiverInterface.sol\r\n\r\ncontract ContractReceiverInterface {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes _data) public;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/utility/SafeContract.sol\r\n\r\ncontract SafeContract is Ownable {\r\n\r\n    /**\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens\r\n     */\r\n    function transferAnyERC20Token(address _tokenAddress, uint256 _tokens, address _beneficiary) public onlyOwner returns (bool success) {\r\n        return ERC20Basic(_tokenAddress).transfer(_beneficiary, _tokens);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/FriendsFingersToken.sol\r\n\r\n/**\r\n * @title FriendsFingersToken\r\n */\r\ncontract FriendsFingersToken is DetailedERC20, MintableToken, BurnableToken, SafeContract {\r\n\r\n    address public builder;\r\n\r\n    modifier canTransfer() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function FriendsFingersToken(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals\r\n    )\r\n    DetailedERC20 (_name, _symbol, _decimals)\r\n    public\r\n    {\r\n        builder = owner;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) canTransfer public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) canTransfer public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ContractReceiverInterface(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/CappedCrowdsale.sol\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return capReached || super.hasEnded();\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return withinCap && super.validPurchase();\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/FriendsFingersCrowdsale.sol\r\n\r\n/**\r\n * @title FriendsFingersCrowdsale\r\n */\r\ncontract FriendsFingersCrowdsale is CappedCrowdsale, FinalizableCrowdsale, Pausable, SafeContract {\r\n\r\n    enum State { Active, Refunding, Closed, Blocked, Expired }\r\n\r\n    uint256 public id;\r\n    uint256 public previousRoundId;\r\n    uint256 public nextRoundId;\r\n\r\n    // The token being sold\r\n    FriendsFingersToken public token;\r\n\r\n    // the round of crowdsale\r\n    uint256 public round;\r\n\r\n    // minimum amount of funds to be raised in weis\r\n    uint256 public goal;\r\n\r\n    string public crowdsaleInfo;\r\n\r\n    uint256 public friendsFingersRatePerMille;\r\n    address public friendsFingersWallet;\r\n\r\n    uint256 public investorCount = 0;\r\n    mapping (address => uint256) public deposited;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event Expired();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function FriendsFingersCrowdsale(\r\n        uint256 _id,\r\n        uint256 _cap,\r\n        uint256 _goal,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        FriendsFingersToken _token,\r\n        string _crowdsaleInfo,\r\n        uint256 _round,\r\n        uint256 _previousRoundId,\r\n        uint256 _friendsFingersRatePerMille,\r\n        address _friendsFingersWallet\r\n    ) public\r\n    CappedCrowdsale (_cap)\r\n    FinalizableCrowdsale ()\r\n    Crowdsale (_startTime, _endTime, _rate, _wallet)\r\n    {\r\n        require(_endTime <= _startTime + 30 days);\r\n        require(_token != address(0));\r\n\r\n        require(_round <= 5);\r\n        if (_round == 1) {\r\n            if (_id == 1) {\r\n                require(_goal >= 0);\r\n            } else {\r\n                require(_goal > 0);\r\n            }\r\n        } else {\r\n            require(_goal == 0);\r\n        }\r\n        require(_cap > 0);\r\n        require(_cap >= _goal);\r\n\r\n        goal = _goal;\r\n\r\n        crowdsaleInfo = _crowdsaleInfo;\r\n\r\n        token = _token;\r\n\r\n        round = _round;\r\n        previousRoundId = _previousRoundId;\r\n        state = State.Active;\r\n\r\n        id = _id;\r\n\r\n        friendsFingersRatePerMille = _friendsFingersRatePerMille;\r\n        friendsFingersWallet = _friendsFingersWallet;\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) whenNotPaused public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(\r\n            msg.sender,\r\n            beneficiary,\r\n            weiAmount,\r\n            tokens\r\n        );\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // Public methods\r\n\r\n    // if crowdsale is unsuccessful or blocked, investors can claim refunds here\r\n    function claimRefund() whenNotPaused public {\r\n        require(state == State.Refunding || state == State.Blocked);\r\n        address investor = msg.sender;\r\n\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n\r\n    function finalize() whenNotPaused public {\r\n        super.finalize();\r\n    }\r\n\r\n    // View methods\r\n\r\n    function goalReached() view public returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n    // Only owner methods\r\n\r\n    function updateCrowdsaleInfo(string _crowdsaleInfo) onlyOwner public {\r\n        require(!hasEnded());\r\n        crowdsaleInfo = _crowdsaleInfo;\r\n    }\r\n\r\n    function blockCrowdsale() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Blocked;\r\n    }\r\n\r\n    function setnextRoundId(uint256 _nextRoundId) onlyOwner public {\r\n        nextRoundId = _nextRoundId;\r\n    }\r\n\r\n    function setFriendsFingersRate(uint256 _newFriendsFingersRatePerMille) onlyOwner public {\r\n        require(_newFriendsFingersRatePerMille >= 0);\r\n        require(_newFriendsFingersRatePerMille <= friendsFingersRatePerMille);\r\n        friendsFingersRatePerMille = _newFriendsFingersRatePerMille;\r\n    }\r\n\r\n    function setFriendsFingersWallet(address _friendsFingersWallet) onlyOwner public {\r\n        require(_friendsFingersWallet != address(0));\r\n        friendsFingersWallet = _friendsFingersWallet;\r\n    }\r\n\r\n    // Emergency methods\r\n\r\n    function safeWithdrawal() onlyOwner public {\r\n        require(now >= endTime + 1 years);\r\n        friendsFingersWallet.transfer(this.balance);\r\n    }\r\n\r\n    function setExpiredAndWithdraw() onlyOwner public {\r\n        require((state == State.Refunding || state == State.Blocked) && now >= endTime + 1 years);\r\n        state = State.Expired;\r\n        friendsFingersWallet.transfer(this.balance);\r\n        Expired();\r\n    }\r\n\r\n    // Internal methods\r\n\r\n    /**\r\n     * @dev Create new instance of token contract\r\n     */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return MintableToken(address(0));\r\n    }\r\n\r\n    // overriding CappedCrowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal view returns (bool) {\r\n        bool isActive = state == State.Active;\r\n        return isActive && super.validPurchase();\r\n    }\r\n\r\n    // We're overriding the fund forwarding from Crowdsale.\r\n    function forwardFunds() internal {\r\n        if (deposited[msg.sender] == 0) {\r\n            investorCount++;\r\n        }\r\n        deposited[msg.sender] = deposited[msg.sender].add(msg.value);\r\n    }\r\n\r\n    // vault finalization task, called when owner calls finalize()\r\n    function finalization() internal {\r\n        require(state == State.Active);\r\n\r\n        if (goalReached()) {\r\n            state = State.Closed;\r\n            Closed();\r\n\r\n            if (friendsFingersRatePerMille > 0) {\r\n                uint256 friendsFingersFee = weiRaised.mul(friendsFingersRatePerMille).div(1000);\r\n                friendsFingersWallet.transfer(friendsFingersFee);\r\n            }\r\n\r\n            wallet.transfer(this.balance);\r\n        } else {\r\n            state = State.Refunding;\r\n            RefundsEnabled();\r\n        }\r\n\r\n        if (friendsFingersRatePerMille > 0) {\r\n            uint256 friendsFingersSupply = cap.mul(rate).mul(friendsFingersRatePerMille).div(1000);\r\n            token.mint(owner, friendsFingersSupply);\r\n        }\r\n\r\n        token.transferOwnership(owner);\r\n\r\n        super.finalization();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/FriendsFingersBuilder.sol\r\n\r\n/**\r\n * @title FriendsFingersBuilder\r\n */\r\ncontract FriendsFingersBuilder is Pausable, SafeContract {\r\n    using SafeMath for uint256;\r\n\r\n    event CrowdsaleStarted(address ffCrowdsale);\r\n    event CrowdsaleClosed(address ffCrowdsale);\r\n\r\n    uint public version = 1;\r\n    string public website = \"https://www.friendsfingers.com\";\r\n    uint256 public friendsFingersRatePerMille = 50; //5%\r\n    address public friendsFingersWallet;\r\n    mapping (address => bool) public enabledAddresses;\r\n\r\n    uint256 public crowdsaleCount = 0;\r\n    mapping (uint256 => address) public crowdsaleList;\r\n    mapping (address => address) public crowdsaleCreators;\r\n\r\n    modifier onlyOwnerOrEnabledAddress() {\r\n        require(enabledAddresses[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrCreator(address _ffCrowdsale) {\r\n        require(msg.sender == crowdsaleCreators[_ffCrowdsale] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function FriendsFingersBuilder(address _friendsFingersWallet) public {\r\n        setMainWallet(_friendsFingersWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice This is for people who want to donate ETH to FriendsFingers\r\n     */\r\n    function () public payable {\r\n        require(msg.value != 0);\r\n        friendsFingersWallet.transfer(msg.value);\r\n    }\r\n\r\n    // crowdsale utility methods\r\n\r\n    function startCrowdsale(\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _tokenDecimals,\r\n        uint256 _cap,\r\n        uint256 _goal,\r\n        uint256 _creatorSupply,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        string _crowdsaleInfo\r\n    ) whenNotPaused public returns (FriendsFingersCrowdsale)\r\n    {\r\n        crowdsaleCount++;\r\n        uint256 _round = 1;\r\n\r\n        FriendsFingersToken token = new FriendsFingersToken(\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _tokenDecimals\r\n        );\r\n\r\n        if (_creatorSupply > 0) {\r\n            token.mint(_wallet, _creatorSupply);\r\n        }\r\n\r\n        FriendsFingersCrowdsale ffCrowdsale = new FriendsFingersCrowdsale(\r\n        crowdsaleCount,\r\n        _cap,\r\n        _goal,\r\n        _startTime,\r\n        _endTime,\r\n        _rate,\r\n        _wallet,\r\n        token,\r\n        _crowdsaleInfo,\r\n        _round,\r\n        0,\r\n        friendsFingersRatePerMille,\r\n        friendsFingersWallet\r\n        );\r\n\r\n        if (crowdsaleCount > 1) {\r\n            ffCrowdsale.pause();\r\n        }\r\n\r\n        token.transferOwnership(address(ffCrowdsale));\r\n\r\n        addCrowdsaleToList(address(ffCrowdsale));\r\n\r\n        return ffCrowdsale;\r\n    }\r\n\r\n    function restartCrowdsale(\r\n        address _ffCrowdsale,\r\n        uint256 _cap,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        string _crowdsaleInfo\r\n    ) whenNotPaused onlyOwnerOrCreator(_ffCrowdsale) public returns (FriendsFingersCrowdsale)\r\n    {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        // can't restart twice\r\n        require(ffCrowdsale.nextRoundId() == 0);\r\n        // can't restart if goal not reached or rate greater or equal old rate\r\n        require(ffCrowdsale.goalReached());\r\n        require(_rate < ffCrowdsale.rate());\r\n\r\n        ffCrowdsale.finalize();\r\n\r\n        crowdsaleCount++;\r\n        uint256 _round = ffCrowdsale.round();\r\n        _round++;\r\n\r\n        FriendsFingersToken token = ffCrowdsale.token();\r\n\r\n        FriendsFingersCrowdsale newFriendsFingersCrowdsale = new FriendsFingersCrowdsale(\r\n            crowdsaleCount,\r\n            _cap,\r\n            0,\r\n            _startTime,\r\n            _endTime,\r\n            _rate,\r\n            ffCrowdsale.wallet(),\r\n            token,\r\n            _crowdsaleInfo,\r\n            _round,\r\n            ffCrowdsale.id(),\r\n            friendsFingersRatePerMille,\r\n            friendsFingersWallet\r\n        );\r\n\r\n        token.transferOwnership(address(newFriendsFingersCrowdsale));\r\n\r\n        ffCrowdsale.setnextRoundId(crowdsaleCount);\r\n\r\n        addCrowdsaleToList(address(newFriendsFingersCrowdsale));\r\n\r\n        return newFriendsFingersCrowdsale;\r\n    }\r\n\r\n    function closeCrowdsale(address _ffCrowdsale) onlyOwnerOrCreator(_ffCrowdsale) public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.finalize();\r\n\r\n        FriendsFingersToken token = ffCrowdsale.token();\r\n        token.finishMinting();\r\n        token.transferOwnership(crowdsaleCreators[_ffCrowdsale]);\r\n\r\n        CrowdsaleClosed(ffCrowdsale);\r\n    }\r\n\r\n    function updateCrowdsaleInfo(address _ffCrowdsale, string _crowdsaleInfo) onlyOwnerOrCreator(_ffCrowdsale) public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.updateCrowdsaleInfo(_crowdsaleInfo);\r\n    }\r\n\r\n    // Only builder owner methods\r\n\r\n    function changeEnabledAddressStatus(address _address, bool _status) onlyOwner public {\r\n        require(_address != address(0));\r\n        enabledAddresses[_address] = _status;\r\n    }\r\n\r\n    function setDefaultFriendsFingersRate(uint256 _newFriendsFingersRatePerMille) onlyOwner public {\r\n        require(_newFriendsFingersRatePerMille >= 0);\r\n        require(_newFriendsFingersRatePerMille < friendsFingersRatePerMille);\r\n        friendsFingersRatePerMille = _newFriendsFingersRatePerMille;\r\n    }\r\n\r\n    function setMainWallet(address _newFriendsFingersWallet) onlyOwner public {\r\n        require(_newFriendsFingersWallet != address(0));\r\n        friendsFingersWallet = _newFriendsFingersWallet;\r\n    }\r\n\r\n    function setFriendsFingersRateForCrowdsale(address _ffCrowdsale, uint256 _newFriendsFingersRatePerMille) onlyOwner public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.setFriendsFingersRate(_newFriendsFingersRatePerMille);\r\n    }\r\n\r\n    function setFriendsFingersWalletForCrowdsale(address _ffCrowdsale, address _newFriendsFingersWallet) onlyOwner public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.setFriendsFingersWallet(_newFriendsFingersWallet);\r\n    }\r\n\r\n    // Emergency methods (only builder owner or enabled addresses)\r\n\r\n    function pauseCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.pause();\r\n    }\r\n\r\n    function unpauseCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.unpause();\r\n    }\r\n\r\n    function blockCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.blockCrowdsale();\r\n    }\r\n\r\n    function safeTokenWithdrawalFromCrowdsale(address _ffCrowdsale, address _tokenAddress, uint256 _tokens) onlyOwnerOrEnabledAddress public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.transferAnyERC20Token(_tokenAddress, _tokens, friendsFingersWallet);\r\n    }\r\n\r\n    function safeWithdrawalFromCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.safeWithdrawal();\r\n    }\r\n\r\n    function setExpiredAndWithdraw(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\r\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\r\n        ffCrowdsale.setExpiredAndWithdraw();\r\n    }\r\n\r\n    // Internal methods\r\n\r\n    function addCrowdsaleToList(address ffCrowdsale) internal {\r\n        crowdsaleList[crowdsaleCount] = ffCrowdsale;\r\n        crowdsaleCreators[ffCrowdsale] = msg.sender;\r\n\r\n        CrowdsaleStarted(ffCrowdsale);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleInfo\",\"type\":\"string\"}],\"name\":\"restartCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"safeTokenWithdrawalFromCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"}],\"name\":\"blockCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"},{\"name\":\"_crowdsaleInfo\",\"type\":\"string\"}],\"name\":\"updateCrowdsaleInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_creatorSupply\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_crowdsaleInfo\",\"type\":\"string\"}],\"name\":\"startCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"},{\"name\":\"_newFriendsFingersRatePerMille\",\"type\":\"uint256\"}],\"name\":\"setFriendsFingersRateForCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"}],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"},{\"name\":\"_newFriendsFingersWallet\",\"type\":\"address\"}],\"name\":\"setFriendsFingersWalletForCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowdsaleList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"}],\"name\":\"safeWithdrawalFromCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFriendsFingersRatePerMille\",\"type\":\"uint256\"}],\"name\":\"setDefaultFriendsFingersRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"friendsFingersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeEnabledAddressStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFriendsFingersWallet\",\"type\":\"address\"}],\"name\":\"setMainWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"}],\"name\":\"setExpiredAndWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"friendsFingersRatePerMille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ffCrowdsale\",\"type\":\"address\"}],\"name\":\"unpauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crowdsaleCreators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_friendsFingersWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ffCrowdsale\",\"type\":\"address\"}],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ffCrowdsale\",\"type\":\"address\"}],\"name\":\"CrowdsaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FriendsFingersBuilder","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000086486e4329c7f29cf6cc6fbdea6f00040f272856","Library":"","SwarmSource":"bzzr://073d930c6764c1ae84c8358324396e6ffd7c3faa1cc1aa14d7a8d856aaa66b88"}]}