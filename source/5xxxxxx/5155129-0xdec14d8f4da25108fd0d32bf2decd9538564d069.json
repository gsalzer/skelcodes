{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract CryptoVideoGames {\r\n\r\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\r\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\r\n\r\n    struct VideoGame {\r\n        string videoGameName;\r\n        address ownerAddress;\r\n        uint256 currentPrice;\r\n    }\r\n    VideoGame[] videoGames;\r\n\r\n    modifier onlyContractCreator() {\r\n        require (msg.sender == contractCreator);\r\n        _;\r\n    }\r\n\r\n    bool isPaused;\r\n    \r\n    \r\n    /*\r\n    We use the following functions to pause and unpause the game.\r\n    */\r\n    function pauseGame() public onlyContractCreator {\r\n        isPaused = true;\r\n    }\r\n    function unPauseGame() public onlyContractCreator {\r\n        isPaused = false;\r\n    }\r\n    function GetGamestatus() public view returns(bool) {\r\n       return(isPaused);\r\n    }\r\n\r\n    /*\r\n    This function allows users to purchase Video Game. \r\n    The price is automatically multiplied by 2 after each purchase.\r\n    Users can purchase multiple video games.\r\n    */\r\n    function purchaseVideoGame(uint _videoGameId) public payable {\r\n        require(msg.value == videoGames[_videoGameId].currentPrice);\r\n        require(isPaused == false);\r\n\r\n        // Calculate the 10% value\r\n        uint256 devFee = (msg.value / 10);\r\n\r\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \r\n        uint256 commissionOwner = msg.value - devFee; // => 90%\r\n        videoGames[_videoGameId].ownerAddress.transfer(commissionOwner);\r\n\r\n        // Transfer the 10% commission to the developer\r\n        devFeeAddress.transfer(devFee); // => 10%                       \r\n\r\n        // Update the video game owner and set the new price\r\n        videoGames[_videoGameId].ownerAddress = msg.sender;\r\n        videoGames[_videoGameId].currentPrice = mul(videoGames[_videoGameId].currentPrice, 2);\r\n    }\r\n    \r\n    /*\r\n    This function can be used by the owner of a video game to modify the price of its video game.\r\n    He can make the price lesser than the current price only.\r\n    */\r\n    function modifyCurrentVideoGamePrice(uint _videoGameId, uint256 _newPrice) public {\r\n        require(_newPrice > 0);\r\n        require(videoGames[_videoGameId].ownerAddress == msg.sender);\r\n        require(_newPrice < videoGames[_videoGameId].currentPrice);\r\n        videoGames[_videoGameId].currentPrice = _newPrice;\r\n    }\r\n    \r\n    // This function will return all of the details of the Video Games\r\n    function getVideoGameDetails(uint _videoGameId) public view returns (\r\n        string videoGameName,\r\n        address ownerAddress,\r\n        uint256 currentPrice\r\n    ) {\r\n        VideoGame memory _videoGame = videoGames[_videoGameId];\r\n\r\n        videoGameName = _videoGame.videoGameName;\r\n        ownerAddress = _videoGame.ownerAddress;\r\n        currentPrice = _videoGame.currentPrice;\r\n    }\r\n    \r\n    // This function will return only the price of a specific Video Game\r\n    function getVideoGameCurrentPrice(uint _videoGameId) public view returns(uint256) {\r\n        return(videoGames[_videoGameId].currentPrice);\r\n    }\r\n    \r\n    // This function will return only the owner address of a specific Video Game\r\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\r\n        return(videoGames[_videoGameId].ownerAddress);\r\n    }\r\n    \r\n    \r\n    /**\r\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    // This function will be used to add a new video game by the contract creator\r\n    function addVideoGame(string videoGameName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\r\n        videoGames.push(VideoGame(videoGameName,ownerAddress,currentPrice));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetGamestatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_videoGameId\",\"type\":\"uint256\"}],\"name\":\"getVideoGameDetails\",\"outputs\":[{\"name\":\"videoGameName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"videoGameName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"addVideoGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_videoGameId\",\"type\":\"uint256\"}],\"name\":\"purchaseVideoGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_videoGameId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"modifyCurrentVideoGamePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_videoGameId\",\"type\":\"uint256\"}],\"name\":\"getVideoGameOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_videoGameId\",\"type\":\"uint256\"}],\"name\":\"getVideoGameCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoVideoGames","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07ac6c24a841b3d5bbb4f2c07761386057a270a25ad3362ecee5d9ea2f676013"}]}