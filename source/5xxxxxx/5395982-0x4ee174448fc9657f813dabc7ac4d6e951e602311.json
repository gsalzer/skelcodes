{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n// Check balances for multiple ERC20 tokens in 1 batched request\r\n// address 0x0 is used to indicate ETH\r\n// Based on DeltaBalances 0x3e25f0ba291f202188ae9bda3004a7b3a803599a\r\n\r\n// Exchange contract Interface\r\ncontract Exchange {\r\n  function balanceOf(address /*token*/, address /*user*/) public constant returns (uint);\r\n}\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n  function balanceOf(address /*tokenOwner*/) public constant returns (uint /*balance*/);\r\n  function transfer(address /*to*/, uint /*tokens*/) public returns (bool /*success*/);\r\n}\r\n\r\ncontract TokenStoreBalances {\r\n\r\n  // Fallback function, don't accept any ETH\r\n  function() public payable {\r\n    revert();\r\n  }\r\n\r\n /* Check the token balance of a wallet in a token contract\r\n    Avoids possible errors:\r\n    - returns 0 on invalid exchange contract\r\n    - return 0 on non-contract address\r\n\r\n    Mainly for internal use, but public for anyone who thinks it is useful    */\r\n  function tokenBalance(address user, address token) public constant returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n\r\n   // is it a contract and does it implement balanceOf\r\n    if(tokenCode > 0 && token.call(bytes4(0x70a08231), user)) {    // bytes4(keccak256(\"balanceOf(address)\")) == bytes4(0x70a08231)\r\n      return Token(token).balanceOf(user);\r\n    } else {\r\n      return 0; // not a valid token, return 0 instead of error\r\n    }\r\n  }\r\n\r\n /* get both exchange and wallet balances for multiple tokens\r\n    Possible error throws:\r\n        - extremely large arrays (gas cost too high)\r\n\r\n    Returns array of token balances in wei units, 2* input length.\r\n    even index [0] is exchange balance, odd [1] is wallet balance\r\n    [tok0ex, tok0, tok1ex, tok1, .. ] */\r\n  function allBalances(address exchange, address user, address[] tokens) external constant returns (uint[]) {\r\n    Exchange ex = Exchange(exchange);\r\n    uint[] memory balances = new uint[](tokens.length * 2);\r\n\r\n    for(uint i = 0; i < tokens.length; i++) {\r\n      uint j = i * 2;\r\n      balances[j] = ex.balanceOf(tokens[i], user);\r\n      if(tokens[i] != address(0x0)) {\r\n        balances[j + 1] = tokenBalance(user, tokens[i]);\r\n      } else {\r\n        balances[j + 1] = user.balance; // ETH balance\r\n      }\r\n    }\r\n    return balances;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TokenStoreBalances","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57661ff062e7eb45d4f69d8dea9ba86a1e38801bd7da0b2c2210855e0e2d436c"}]}