{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n///>[ Pre Sale ]>>>>\r\n\r\ncontract BrandContest {\r\n    address public ceoAddress;\r\n\r\n    function BrandContest() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    struct Contest {\r\n        bool open;\r\n        uint256 ticket_price;\r\n        uint8 tickets_sold;\r\n        address winner;\r\n        mapping (uint256 => address) tickets;\r\n    }\r\n    mapping (string => Contest) contests;\r\n\r\n    \r\n    struct Slot {\r\n        uint256 price;\r\n        address owner;\r\n    }\r\n    mapping (uint256 => Slot) slots;\r\n\r\n    modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n    \r\n    function buyTicket(string _key) public payable {\r\n        require(msg.sender != address(0));\r\n        Contest storage contest = contests[_key];\r\n        require(contest.open == true);\r\n        require(msg.value >= contest.ticket_price);\r\n        \r\n        contest.tickets[contest.tickets_sold] = msg.sender;\r\n        contest.tickets_sold++;\r\n        \r\n        if(msg.value > contest.ticket_price){\r\n            msg.sender.transfer(SafeMath.sub(msg.value, contest.ticket_price));\r\n        }\r\n    }\r\n    \r\n    function buySlot(uint256 _slot) public payable {\r\n        require(msg.sender != address(0));\r\n        Slot storage slot = slots[_slot];\r\n        require(slot.owner == address(0));\r\n        require(msg.value >= slot.price);\r\n    \r\n        slot.owner = msg.sender;\r\n\r\n        if(msg.value > slot.price){\r\n            msg.sender.transfer(SafeMath.sub(msg.value, slot.price));\r\n        }\r\n    }\r\n    \r\n    function getContest(string _key) public view returns (\r\n        string name,\r\n        bool open,\r\n        uint256 ticket_price,\r\n        uint8 tickets_sold,\r\n        address winner,\r\n        address[5] last_tickets\r\n    ) {\r\n        name = _key;\r\n        open = contests[_key].open;\r\n        ticket_price = contests[_key].ticket_price;\r\n        tickets_sold = contests[_key].tickets_sold;\r\n        winner = contests[_key].winner;\r\n    \r\n        for(uint8 i = 0; i < 5; i++){\r\n            last_tickets[i] = contests[_key].tickets[ contests[_key].tickets_sold-1-i ];\r\n        }\r\n    }\r\n    \r\n    function getSlot(uint256 _slot) public view returns (\r\n        uint256 slot,\r\n        bool open,\r\n        uint256 price,\r\n        address owner\r\n    ) {\r\n        slot = _slot;\r\n        open = (slots[_slot].owner == address(0));\r\n        price = slots[_slot].price;\r\n        owner = slots[_slot].owner;\r\n    }\r\n    \r\n    function getTickets(string _key) public view returns (\r\n        string name,\r\n        address[] tickets\r\n    ) {\r\n        name = _key;\r\n        for(uint8 i = 0; i < contests[_key].tickets_sold; i++){\r\n            tickets[i] = contests[_key].tickets[ i ];\r\n        }\r\n    }\r\n    \r\n    function getMyTickets(string _key, address _address) public view returns (\r\n        string name,\r\n        uint ticket_count\r\n    ) {\r\n        name = _key;\r\n        for(uint8 i = 0; i < contests[_key].tickets_sold; i++){\r\n            if(contests[_key].tickets[i] == _address){\r\n                ticket_count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function createContest(string _key, uint256 _ticket_price) public onlyCEO {\r\n        require(msg.sender != address(0));\r\n        contests[_key] = Contest(true, _ticket_price, 0, address(0));\r\n    }\r\n    \r\n    function createSlot(uint256 _slot, uint256 _price) public onlyCEO {\r\n        require(msg.sender != address(0));\r\n        slots[_slot] = Slot(_price, address(0));\r\n    }\r\n    \r\n    function closeContest(string _key) public onlyCEO {\r\n        require(msg.sender != address(0));\r\n        uint seed = (block.number + contests[_key].tickets_sold + contests[_key].ticket_price);\r\n        uint winner_num = uint(sha3(block.blockhash(block.number-1), seed ))%contests[_key].tickets_sold;\r\n        contests[_key].winner = contests[_key].tickets[winner_num];\r\n        contests[_key].open = false;\r\n    }\r\n    \r\n    function payout() public onlyCEO {\r\n        ceoAddress.transfer(this.balance);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"closeContest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"},{\"name\":\"_ticket_price\",\"type\":\"uint256\"}],\"name\":\"createContest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getTickets\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tickets\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"buySlot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getContest\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"ticket_price\",\"type\":\"uint256\"},{\"name\":\"tickets_sold\",\"type\":\"uint8\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"last_tickets\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMyTickets\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ticket_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BrandContest","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eee78d44f79914ac9dd3579ef36a53b8bc625e84af373d91f95e0a7d8aa76ac8"}]}