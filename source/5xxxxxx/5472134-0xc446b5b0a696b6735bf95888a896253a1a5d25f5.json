{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/*\r\nTwoXJackpot - A modification to TwoX that turns the 5% developer fee into a jackpot!\r\n- Double your ether.\r\n- 5% of purchase goes towards a jackpot.\r\n- Any purchase of 1% of the JackPot total qualifies you.\r\n- The last qualified address has a claim to the jackpot if no new qualified (1%) purchases in 6 hours.\r\n- Claim must be made, any new purchase resets the timer and invalidate the previous claim.\r\n- Admin can empty the jackpot if no new action and no claim in 30 days.\r\n*/\r\n\r\ncontract TwoXJackpot {\r\n  using SafeMath for uint256;\r\n\r\n  // Address of the contract creator\r\n  address public contractOwner;\r\n\r\n  // FIFO queue\r\n  BuyIn[] public buyIns;\r\n\r\n  // The current BuyIn queue index\r\n  uint256 public index;\r\n\r\n  // Total invested for entire contract\r\n  uint256 public contractTotalInvested;\r\n\r\n  // Dev Fee (1%)\r\n  uint256 public devFeeBalance;\r\n\r\n  // Total of Jackpot\r\n  uint256 public jackpotBalance;\r\n\r\n  // Track amount of seed money put into jackpot.\r\n  uint256 public seedAmount;\r\n\r\n  // The last qualified address to get into the jackpot.\r\n  address public jackpotLastQualified;\r\n\r\n  // Timestamp of the last action.\r\n  uint256 public lastAction;\r\n\r\n  // Timestamp of Game Start\r\n  uint256 public gameStartTime;\r\n\r\n  // Total invested for a given address\r\n  mapping (address => uint256) public totalInvested;\r\n\r\n  // Total value for a given address\r\n  mapping (address => uint256) public totalValue;\r\n\r\n  // Total paid out for a given address\r\n  mapping (address => uint256) public totalPaidOut;\r\n\r\n  struct BuyIn {\r\n    uint256 value;\r\n    address owner;\r\n  }\r\n\r\n  modifier onlyContractOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  modifier isStarted() {\r\n      require(now >= gameStartTime);\r\n      _;\r\n  }\r\n\r\n  function TwoXJackpot() public {\r\n    contractOwner = msg.sender;\r\n    gameStartTime = now + 24 hours;\r\n  }\r\n\r\n  //                 //\r\n  // ADMIN FUNCTIONS //\r\n  //                 //\r\n\r\n  // return jackpot to contract creator if no purchases or claims in 30 days.\r\n  function killme() public payable onlyContractOwner {\r\n    require(now > lastAction + 30 days);\r\n    seedAmount = 0;\r\n    jackpotBalance = 0;\r\n    contractOwner.transfer(jackpotBalance);\r\n  }\r\n\r\n  // Contract owner can seed the Jackpot, and get it back whenever Jackpot is paid. See claim() function\r\n  function seed() public payable onlyContractOwner {\r\n    seedAmount += msg.value;     // Amount owner gets back on payout.\r\n    jackpotBalance += msg.value; // Increase the value of the jackpot by this much.\r\n  }\r\n\r\n  // Change the start time.\r\n  function changeStartTime(uint256 _time) public payable onlyContractOwner {\r\n    require(now < _time); // only allow changing it to something in the future.\r\n    require(now < gameStartTime); // Only change a game that has not started, prevent abuse.\r\n    gameStartTime = _time;\r\n  }\r\n\r\n  //                //\r\n  // User Functions //\r\n  //                //\r\n\r\n  function purchase() public payable isStarted {\r\n\r\n    uint256 purchaseMin = SafeMath.mul(msg.value, 20); // 5% Jackpot Min Purchase\r\n    uint256 purchaseMax = SafeMath.mul(msg.value, 2); // 50% Jackpot Min Purchase\r\n\r\n    require(purchaseMin >= jackpotBalance);\r\n    require(purchaseMax <= jackpotBalance);\r\n\r\n    // Take a 5% fee\r\n    uint256 valueAfterTax = SafeMath.div(SafeMath.mul(msg.value, 95), 100);\r\n\r\n    // Calculate the absolute number to put into pot. (5% total purchase)\r\n    uint256 potFee = SafeMath.sub(msg.value, valueAfterTax);\r\n\r\n    // Add it to the jackpot\r\n    jackpotBalance += potFee;\r\n    jackpotLastQualified = msg.sender;\r\n    lastAction = now;\r\n\r\n    // HNNNNNNGGGGGG\r\n    uint256 valueMultiplied = SafeMath.mul(msg.value, 2);\r\n\r\n    contractTotalInvested += msg.value;\r\n    totalInvested[msg.sender] += msg.value;\r\n\r\n    while (index < buyIns.length && valueAfterTax > 0) {\r\n      BuyIn storage buyIn = buyIns[index];\r\n\r\n      if (valueAfterTax < buyIn.value) {\r\n        buyIn.owner.transfer(valueAfterTax);\r\n        totalPaidOut[buyIn.owner] += valueAfterTax;\r\n        totalValue[buyIn.owner] -= valueAfterTax;\r\n        buyIn.value -= valueAfterTax;\r\n        valueAfterTax = 0;\r\n      } else {\r\n        buyIn.owner.transfer(buyIn.value);\r\n        totalPaidOut[buyIn.owner] += buyIn.value;\r\n        totalValue[buyIn.owner] -= buyIn.value;\r\n        valueAfterTax -= buyIn.value;\r\n        buyIn.value = 0;\r\n        index++;\r\n      }\r\n    }\r\n\r\n    // if buyins have been exhausted, return the remaining\r\n    // funds back to the investor\r\n    if (valueAfterTax > 0) {\r\n      msg.sender.transfer(valueAfterTax);\r\n      valueMultiplied -= valueAfterTax;\r\n      totalPaidOut[msg.sender] += valueAfterTax;\r\n    }\r\n\r\n    totalValue[msg.sender] += valueMultiplied;\r\n\r\n    buyIns.push(BuyIn({\r\n      value: valueMultiplied,\r\n      owner: msg.sender\r\n    }));\r\n  }\r\n\r\n\r\n  // Send the jackpot if no activity in 24 hours and claimant was the last person to generate activity.\r\n  function claim() public payable isStarted {\r\n    require(now > lastAction + 6 hours);\r\n\trequire(jackpotLastQualified == msg.sender);\r\n\r\n    uint256 seedPay = seedAmount;\r\n    uint256 jpotPay = jackpotBalance - seedAmount;\r\n\r\n    seedAmount = 0;\r\n    contractOwner.transfer(seedPay); // Return the initial seed to owner.\r\n\r\n    jackpotBalance = 0;\r\n\tmsg.sender.transfer(jpotPay); // payout entire jackpot minus seed.\r\n  }\r\n\r\n  // Fallback, sending any ether will call purchase() while sending 0 will call claim()\r\n  function () public payable {\r\n    if(msg.value > 0) {\r\n      purchase();\r\n    } else {\r\n      claim();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gameStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLastQualified\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPaidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killme\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyIns\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFeeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTotalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TwoXJackpot","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bb2011ac49ca608c7e6d6feb6d2082355276bd5a496b79cc20833d5f5927b53b"}]}