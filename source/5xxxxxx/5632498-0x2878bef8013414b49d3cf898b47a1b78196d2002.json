{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\nlibrary Math {\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if(a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract QRC20 {\r\n\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n\r\n    address public owner_;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        \r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        \r\n        require(msg.sender == owner_);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        \r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner_, newOwner);\r\n        owner_ = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BasicToken is QRC20 {\r\n    \r\n\r\n    using Math for uint256;\r\n    \r\n    uint256 totalSupply_;    \r\n    mapping(address => uint256) balances_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        \r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n\r\n        require(to != address(0));\r\n        require(value <= balances_[msg.sender]);\r\n\r\n        balances_[msg.sender] = balances_[msg.sender].sub(value);\r\n        balances_[to] = balances_[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance) {\r\n\r\n        return balances_[owner];\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken {\r\n\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n    mapping (address => mapping (address => uint256)) internal allowed_;\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\r\n        require(to != address(0));\r\n        require(value <= balances_[from]);\r\n        require(value <= allowed_[from][msg.sender]);\r\n\r\n        balances_[from] = balances_[from].sub(value);\r\n        balances_[to] = balances_[to].add(value);\r\n        allowed_[from][msg.sender] = allowed_[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        \r\n        allowed_[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        \r\n        return allowed_[owner][spender];\r\n    }\r\n\r\n    function burn(uint256 value) public {\r\n\r\n        require(value <= balances_[msg.sender]);\r\n        address burner = msg.sender;\r\n        balances_[burner] = balances_[burner].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        emit Burn(burner, value);\r\n    }\r\n}\r\n\r\n\r\ncontract UUNIOToken is StandardToken, Ownable {\r\n\r\n    \r\n    using Math for uint;\r\n\r\n    string constant public name     = \"UUNIO Token\";\r\n    string constant public symbol   = \"UUNIO\";\r\n    uint8 constant public decimals  = 8;\r\n    uint256 constant INITIAL_SUPPLY = 900000000e8;\r\n\r\n    // MAINNET\r\n    address constant team      = 0x9c619FF74015bECc48D429755aA54435ba367e23;\r\n    address constant advisors  = 0xB4fca416727c92F5dBfC1d3C248F9A50B9f811fE;\r\n    address constant reserve   = 0x8E2c648f493323623C2a55010953aE2B98ec7675;\r\n    address constant system1   = 0x91c2ccf957C32A3F37125240942E97C1bD2aC394;\r\n    address constant system2   = 0xB9E51D549c2c0EE7976E354e8a33CD2F91Ef955C;\r\n    address constant angel     = 0x3f957Fc80cdf9ad2A9D78C3aFd13a75099A167B3;\r\n    address constant partners  = 0x8F3e215C76B312Fd28fBAaf16FE98d6e9357b8AB;\r\n    address constant preSale   = 0x39401cd3f45C682Bbb75eA4D3aDD4E268b19D0Fc;\r\n    address constant crowdSale = 0xB06DD470C23979f8331e790D47866130001e7492;\r\n    address constant benefit   = 0x0Ff19B60b84040019EA6B46E6314367484f66F8F;\r\n    \r\n    // TESTNET\r\n    // address constant team        = 0x08cF66b63c2995c7Cc611f58c3Df1305a1E46ba7;\r\n    // address constant advisors    = 0xCf456ED49752F0376aFd6d8Ed2CC6e959E57C086;\r\n    // address constant reserve     = 0x9F1046F1e85640256E2303AC807F895C5c0b862b;\r\n    // address constant system1     = 0xC97eFe0481964b344Df74e8Fa09b194010736A62;\r\n    // address constant system2     = 0xC97eFe0481964b344Df74e8Fa09b194010736A62;\r\n    // address constant angel       = 0xd03631463a266A749C666E6066D835bDAD307FB8;\r\n    // address constant partners    = 0xd03631463a266A749C666E6066D835bDAD307FB8;\r\n    // address constant preSale     = 0xd03631463a266A749C666E6066D835bDAD307FB8;\r\n    // address constant crowdSale   = 0xd03631463a266A749C666E6066D835bDAD307FB8;\r\n    // address constant benefit     = 0x08cF66b63c2995c7Cc611f58c3Df1305a1E46ba7;\r\n\r\n    // 10%\r\n    uint constant teamTokens      = 90000000e8;\r\n    // 10%    \r\n    uint constant advisorsTokens  = 90000000e8;\r\n    // 30%    \r\n    uint constant reserveTokens   = 270000000e8;\r\n    //// total 15.14, 136260000 ///////\r\n    // 15%\r\n    uint constant system1Tokens   = 135000000e8;\r\n    // 0.14%\r\n    uint constant system2Tokens   = 1260000e8;\r\n    ////////////////////////\r\n    // 5.556684%\r\n    uint constant angelTokens     = 50010156e8;\r\n    // 2.360022%\r\n    uint constant partnersTokens  = 21240198e8;\r\n    // 15.275652%\r\n    uint constant preSaleTokens   = 137480868e8;\r\n    // 11.667642%\r\n    uint constant crowdSaleTokens = 105008778e8;\r\n\r\n    constructor() public {\r\n\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\r\n        preFixed(team, teamTokens);\r\n        preFixed(advisors, advisorsTokens);\r\n        preFixed(reserve, reserveTokens);\r\n        preFixed(system1, system1Tokens);\r\n        preFixed(system2, system2Tokens);\r\n        preFixed(angel, angelTokens);\r\n        preFixed(partners, partnersTokens);\r\n        preFixed(preSale, preSaleTokens);\r\n        preFixed(crowdSale, crowdSaleTokens);\r\n    }\r\n\r\n    function preFixed(address addr, uint amount) internal returns (bool) {\r\n        \r\n        balances_[addr] = amount;\r\n        emit Transfer(address(0x0), addr, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function () public payable {\r\n\r\n        benefit.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UUNIOToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ccd263863fbde22196badc49dbf6d90a4306802c4e729788f92027372fca1fd0"}]}