{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract EthicHubStorageInterface {\r\n\r\n    //modifier for access in sets and deletes\r\n    modifier onlyEthicHubContracts() {_;}\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string);\r\n    function getBytes(bytes32 _key) external view returns (bytes);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n}\r\n\r\ncontract EthicHubBase {\r\n\r\n    uint8 public version;\r\n\r\n    EthicHubStorageInterface public ethicHubStorage = EthicHubStorageInterface(0);\r\n\r\n    constructor(address _storageAddress) public {\r\n        require(_storageAddress != address(0));\r\n        ethicHubStorage = EthicHubStorageInterface(_storageAddress);\r\n    }\r\n\r\n}\r\n\r\ncontract EthicHubReputationInterface {\r\n    modifier onlyUsersContract(){_;}\r\n    modifier onlyLendingContract(){_;}\r\n    function burnReputation(uint delayDays)  external;\r\n    function incrementReputation(uint completedProjectsByTier)  external;\r\n    function initLocalNodeReputation(address localNode)  external;\r\n    function initCommunityReputation(address community)  external;\r\n    function getCommunityReputation(address target) public view returns(uint256);\r\n    function getLocalNodeReputation(address target) public view returns(uint256);\r\n}\r\n\r\ncontract EthicHubReputation is EthicHubBase, EthicHubReputationInterface {\r\n\r\n    //10 with 2 decilmals\r\n    uint constant maxReputation = 1000;\r\n    uint constant reputationStep = 100;\r\n    //Tier 1 x 20 people\r\n    uint constant minProyect = 20;\r\n    uint constant public initReputation = 500;\r\n\r\n    //0.05\r\n    uint constant incrLocalNodeMultiplier = 5;\r\n\r\n    using SafeMath for uint;\r\n\r\n    event ReputationUpdated(address indexed affected, uint newValue);\r\n\r\n    /*** Modifiers ************/\r\n\r\n    /// @dev Only allow access from the latest version of a contract in the Rocket Pool network after deployment\r\n    modifier onlyUsersContract() {\r\n        require(ethicHubStorage.getAddress(keccak256(\"contract.name\", \"users\")) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyLendingContract() {\r\n        require(ethicHubStorage.getAddress(keccak256(\"contract.address\", msg.sender)) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev constructor\r\n    constructor(address _storageAddress) EthicHubBase(_storageAddress) public {\r\n      // Version\r\n      version = 1;\r\n    }\r\n\r\n    function burnReputation(uint delayDays) external onlyLendingContract {\r\n        address lendingContract = msg.sender;\r\n        //Get temporal parameters\r\n        uint maxDelayDays = ethicHubStorage.getUint(keccak256(\"lending.maxDelayDays\", lendingContract));\r\n        require(maxDelayDays != 0);\r\n        require(delayDays != 0);\r\n\r\n        //Affected players\r\n        address community = ethicHubStorage.getAddress(keccak256(\"lending.community\", lendingContract));\r\n        require(community != address(0));\r\n        //Affected local node\r\n        address localNode = ethicHubStorage.getAddress(keccak256(\"lending.localNode\", lendingContract));\r\n        require(localNode != address(0));\r\n\r\n        //***** Community\r\n        uint previousCommunityReputation = ethicHubStorage.getUint(keccak256(\"community.reputation\", community));\r\n        //Calculation and update\r\n        uint newCommunityReputation = burnCommunityReputation(delayDays, maxDelayDays, previousCommunityReputation);\r\n        ethicHubStorage.setUint(keccak256(\"community.reputation\", community), newCommunityReputation);\r\n        emit ReputationUpdated(community, newCommunityReputation);\r\n\r\n        //***** Local node\r\n        uint previousLocalNodeReputation = ethicHubStorage.getUint(keccak256(\"localNode.reputation\", localNode));\r\n        uint newLocalNodeReputation = burnLocalNodeReputation(delayDays, maxDelayDays, previousLocalNodeReputation);\r\n        ethicHubStorage.setUint(keccak256(\"localNode.reputation\", localNode), newLocalNodeReputation);\r\n        emit ReputationUpdated(localNode, newLocalNodeReputation);\r\n\r\n    }\r\n\r\n    function incrementReputation(uint completedProjectsByTier) external onlyLendingContract {\r\n        address lendingContract = msg.sender;\r\n        //Affected players\r\n        address community = ethicHubStorage.getAddress(keccak256(\"lending.community\", lendingContract));\r\n        require(community != address(0));\r\n        //Affected local node\r\n        address localNode = ethicHubStorage.getAddress(keccak256(\"lending.localNode\", lendingContract));\r\n        require(localNode != address(0));\r\n\r\n        //Tier\r\n        uint projectTier = ethicHubStorage.getUint(keccak256(\"lending.tier\", lendingContract));\r\n        require(projectTier > 0);\r\n        require(completedProjectsByTier > 0);\r\n\r\n        //***** Community\r\n        uint previousCommunityReputation = ethicHubStorage.getUint(keccak256(\"community.reputation\", community));\r\n        //Calculation and update\r\n        uint newCommunityReputation = incrementCommunityReputation(previousCommunityReputation, completedProjectsByTier);\r\n        ethicHubStorage.setUint(keccak256(\"community.reputation\", community), newCommunityReputation);\r\n        emit ReputationUpdated(community, newCommunityReputation);\r\n\r\n        //***** Local node\r\n        uint borrowers = ethicHubStorage.getUint(keccak256(\"lending.communityMembers\", lendingContract));\r\n        uint previousLocalNodeReputation = ethicHubStorage.getUint(keccak256(\"localNode.reputation\", localNode));\r\n        uint newLocalNodeReputation = incrementLocalNodeReputation(previousLocalNodeReputation, projectTier, borrowers);\r\n        ethicHubStorage.setUint(keccak256(\"localNode.reputation\", localNode), newLocalNodeReputation);\r\n        emit ReputationUpdated(localNode, newLocalNodeReputation);\r\n    }\r\n\r\n    function incrementCommunityReputation(uint previousReputation, uint completedProjectsByTier) public view returns(uint) {\r\n        require(completedProjectsByTier > 0);\r\n        uint nextRep = previousReputation.add(reputationStep.div(completedProjectsByTier));\r\n        if (nextRep >= maxReputation) {\r\n            return maxReputation;\r\n        } else {\r\n            return nextRep;\r\n        }\r\n    }\r\n\r\n    function incrementLocalNodeReputation(uint previousReputation, uint tier, uint borrowers) public view returns(uint) {\r\n        require(tier >= 1);\r\n        //this should 20 but since it's hardcoded in EthicHubLending, let's be safe.\r\n        //TODO store min borrowers in EthicHubStorage\r\n        require(borrowers > 0); \r\n        uint increment = (tier.mul(borrowers).div(minProyect)).mul(incrLocalNodeMultiplier);\r\n        uint nextRep = previousReputation.add(increment);\r\n        if (nextRep >= maxReputation) {\r\n            return maxReputation;\r\n        } else {\r\n            return nextRep;\r\n        }\r\n    }\r\n\r\n    function burnLocalNodeReputation(uint delayDays, uint maxDelayDays, uint prevReputation) public view returns(uint) {\r\n        if (delayDays >= maxDelayDays){\r\n            return 0;\r\n        }\r\n        uint decrement = prevReputation.mul(delayDays).div(maxDelayDays);\r\n        if (delayDays < maxDelayDays && decrement < reputationStep) {\r\n            return prevReputation.sub(decrement);\r\n        } else {\r\n            return prevReputation.sub(reputationStep);\r\n        }\r\n    }\r\n\r\n    function burnCommunityReputation(uint delayDays, uint maxDelayDays, uint prevReputation) public pure returns(uint) {\r\n        if (delayDays < maxDelayDays) {\r\n            return prevReputation.sub(prevReputation.mul(delayDays).div(maxDelayDays));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function initLocalNodeReputation(address localNode) onlyUsersContract external {\r\n        require(ethicHubStorage.getUint(keccak256(\"localNode.reputation\", localNode)) == 0);\r\n        ethicHubStorage.setUint(keccak256(\"localNode.reputation\", localNode), initReputation);\r\n    }\r\n\r\n    function initCommunityReputation(address community) onlyUsersContract external {\r\n        require(ethicHubStorage.getUint(keccak256(\"comunity.reputation\", community)) == 0);\r\n        ethicHubStorage.setUint(keccak256(\"community.reputation\", community), initReputation);\r\n    }\r\n\r\n    function getCommunityReputation(address target) public view returns(uint256) {\r\n        return ethicHubStorage.getUint(keccak256(\"community.reputation\", target));\r\n    }\r\n\r\n    function getLocalNodeReputation(address target) public view returns(uint256) {\r\n        return ethicHubStorage.getUint(keccak256(\"localNode.reputation\", target));\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"previousReputation\",\"type\":\"uint256\"},{\"name\":\"completedProjectsByTier\",\"type\":\"uint256\"}],\"name\":\"incrementCommunityReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"community\",\"type\":\"address\"}],\"name\":\"initCommunityReputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"completedProjectsByTier\",\"type\":\"uint256\"}],\"name\":\"incrementReputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"localNode\",\"type\":\"address\"}],\"name\":\"initLocalNodeReputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getLocalNodeReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"previousReputation\",\"type\":\"uint256\"},{\"name\":\"tier\",\"type\":\"uint256\"},{\"name\":\"borrowers\",\"type\":\"uint256\"}],\"name\":\"incrementLocalNodeReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delayDays\",\"type\":\"uint256\"}],\"name\":\"burnReputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getCommunityReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"delayDays\",\"type\":\"uint256\"},{\"name\":\"maxDelayDays\",\"type\":\"uint256\"},{\"name\":\"prevReputation\",\"type\":\"uint256\"}],\"name\":\"burnCommunityReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"delayDays\",\"type\":\"uint256\"},{\"name\":\"maxDelayDays\",\"type\":\"uint256\"},{\"name\":\"prevReputation\",\"type\":\"uint256\"}],\"name\":\"burnLocalNodeReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_storageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affected\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"}]","ContractName":"EthicHubReputation","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca","Library":"","SwarmSource":"bzzr://bcc50a11be6303eae5e513ec7fc80a78d0cca8891be14abda7b395fba7a14c99"}]}