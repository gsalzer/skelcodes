{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// copyright contact@etheremon.com\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\n\r\ncontract EtheremonEnergy is BasicAccessControl {\r\n    \r\n    struct Energy {\r\n        uint freeAmount;\r\n        uint paidAmount;\r\n        uint lastClaim;\r\n    }\r\n    \r\n    struct EnergyPackage {\r\n        uint ethPrice;\r\n        uint emontPrice;\r\n        uint energy;\r\n    }\r\n    \r\n    mapping(address => Energy) energyData;\r\n    mapping(uint => EnergyPackage) paidPackages;\r\n    uint public claimMaxAmount = 10;\r\n    uint public claimTime = 30 * 60; // in second\r\n    uint public claimAmount = 1;\r\n    \r\n    // address\r\n    address public paymentContract;\r\n    \r\n    // event\r\n    event EventEnergyUpdate(address indexed player, uint freeAmount, uint paidAmount, uint lastClaim);\r\n    \r\n    modifier requirePaymentContract {\r\n        require(paymentContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    function EtheremonEnergy(address _paymentContract) public {\r\n        paymentContract = _paymentContract;\r\n    }\r\n    \r\n    // moderator\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators public {\r\n        if (_amount > address(this).balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function setPaidPackage(uint _packId, uint _ethPrice, uint _emontPrice, uint _energy) onlyModerators external {\r\n        EnergyPackage storage pack = paidPackages[_packId];\r\n        pack.ethPrice = _ethPrice;\r\n        pack.emontPrice = _emontPrice;\r\n        pack.energy = _energy;\r\n    }\r\n    \r\n    function setConfig(address _paymentContract, uint _claimMaxAmount, uint _claimTime, uint _claimAmount) onlyModerators external {\r\n        paymentContract = _paymentContract;\r\n        claimMaxAmount = _claimMaxAmount;\r\n        claimTime = _claimTime;\r\n        claimAmount = _claimAmount;\r\n    }\r\n    \r\n    function topupEnergyByToken(address _player, uint _packId, uint _token) requirePaymentContract external {\r\n        if (msg.sender != paymentContract) revert();\r\n        EnergyPackage storage pack = paidPackages[_packId];\r\n        if (pack.energy == 0 || pack.emontPrice != _token)\r\n            revert();\r\n\r\n        Energy storage energy = energyData[_player];\r\n        energy.paidAmount += pack.energy;\r\n        \r\n        EventEnergyUpdate(_player, energy.freeAmount, energy.paidAmount, energy.lastClaim);\r\n    }\r\n    \r\n    // public update\r\n    \r\n    function safeDeduct(uint _a, uint _b) pure public returns(uint) {\r\n        if (_a < _b) return 0;\r\n        return (_a - _b);\r\n    }\r\n    \r\n    function topupEnergy(uint _packId) isActive payable external {\r\n        EnergyPackage storage pack = paidPackages[_packId];\r\n        if (pack.energy == 0 || pack.ethPrice != msg.value)\r\n            revert();\r\n\r\n        Energy storage energy = energyData[msg.sender];\r\n        energy.paidAmount += pack.energy;\r\n        \r\n        EventEnergyUpdate(msg.sender, energy.freeAmount, energy.paidAmount, energy.lastClaim);\r\n    }\r\n    \r\n    function claimEnergy() isActive external {\r\n        Energy storage energy = energyData[msg.sender];\r\n        uint period = safeDeduct(block.timestamp, energy.lastClaim);\r\n        uint energyAmount = (period / claimTime) * claimAmount;\r\n        \r\n        if (energyAmount == 0) revert();\r\n        if (energyAmount > claimMaxAmount) energyAmount = claimMaxAmount;\r\n        \r\n        energy.freeAmount += energyAmount;\r\n        energy.lastClaim = block.timestamp;\r\n        \r\n        EventEnergyUpdate(msg.sender, energy.freeAmount, energy.paidAmount, energy.lastClaim);\r\n    }\r\n    \r\n    // public get\r\n    function getPlayerEnergy(address _player) constant external returns(uint freeAmount, uint paidAmount, uint lastClaim) {\r\n        Energy storage energy = energyData[_player];\r\n        return (energy.freeAmount, energy.paidAmount, energy.lastClaim);\r\n    }\r\n    \r\n    function getClaimableAmount(address _trainer) constant external returns(uint) {\r\n        Energy storage energy = energyData[_trainer];\r\n        uint period = safeDeduct(block.timestamp, energy.lastClaim);\r\n        uint energyAmount = (period / claimTime) * claimAmount;\r\n        if (energyAmount > claimMaxAmount) energyAmount = claimMaxAmount;\r\n        return energyAmount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEnergy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"topupEnergy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerEnergy\",\"outputs\":[{\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"safeDeduct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_packId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_emontPrice\",\"type\":\"uint256\"},{\"name\":\"_energy\",\"type\":\"uint256\"}],\"name\":\"setPaidPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_packId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"topupEnergyByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentContract\",\"type\":\"address\"},{\"name\":\"_claimMaxAmount\",\"type\":\"uint256\"},{\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_paymentContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"name\":\"EventEnergyUpdate\",\"type\":\"event\"}]","ContractName":"EtheremonEnergy","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000eb0058ce60d753004b0efa2164f88b2a5b528e7d","Library":"","SwarmSource":"bzzr://408bec57a85329a57ec3828344fb169965c53a8d9a0ed268e98dfedb8c943c3e"}]}