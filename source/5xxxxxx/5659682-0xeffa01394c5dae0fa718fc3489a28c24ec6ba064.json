{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract AudigentSegment is Ownable {\r\n    mapping (uint256 => address[]) private _hashToSignatures;\r\n    mapping (address => address) private _signerToAgency;\r\n\r\n    modifier onlyAlreadyExistingSigner(address _signer) {\r\n        require(_signerToAgency[_signer] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNewSigner(address _signer) {\r\n        if (_signerToAgency[_signer] == msg.sender) {\r\n            revert('Signer already assigned to this agency');\r\n        }\r\n        require(_signer != owner);\r\n        require(_signerToAgency[_signer] != _signer);\r\n        require(_signerToAgency[_signer] == address(0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyAssociatedSigner() {\r\n        require(_signerToAgency[msg.sender] != address(0));\r\n        _;\r\n    }\r\n\r\n    function createHash(uint256 _hash) public onlyOwner {\r\n        if (_hashToSignatures[_hash].length > 0) {\r\n            revert('Hash already exists');\r\n        }\r\n        _hashToSignatures[_hash] = new address[](0);\r\n    }\r\n\r\n    function addSigner(address _signer) public onlyNewSigner(_signer) {\r\n        _signerToAgency[_signer] = msg.sender;\r\n    }\r\n\r\n    function removeSigner(address _signer) public onlyAlreadyExistingSigner(_signer) {\r\n        _signerToAgency[_signer] = address(0);\r\n    }\r\n\r\n    function signHash(uint256 _hash) public onlyAssociatedSigner {\r\n        address[] memory signatures = _hashToSignatures[_hash];\r\n\r\n        bool alreadySigned = false;\r\n        for (uint i = 0; i < signatures.length; i++) {\r\n            if (signatures[i] == msg.sender) {\r\n                alreadySigned = true;\r\n                break;\r\n            }\r\n        }\r\n        if (alreadySigned == true) {\r\n            revert('Hash already signed');\r\n        }\r\n\r\n        _hashToSignatures[_hash].push(msg.sender);\r\n    }\r\n\r\n    function isHashSigned(uint256 _hash) public view returns (bool isSigned) {\r\n        return _hashToSignatures[_hash].length > 0;\r\n    }\r\n\r\n    function getHashSignatures(uint256 _hash) public view returns (address[] signatures) {\r\n        return _hashToSignatures[_hash];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"getHashSignatures\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"createHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"isHashSigned\",\"outputs\":[{\"name\":\"isSigned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"signHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AudigentSegment","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d6aaa10f811c583967a1c59d20b9e69147feeea415f573b6e088381507fce62"}]}