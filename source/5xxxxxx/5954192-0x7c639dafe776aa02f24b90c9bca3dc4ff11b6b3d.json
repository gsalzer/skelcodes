{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev revert()s if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  \r\n  \r\n  function mul256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity automatically revert()s when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }  \r\n  \r\n  function mod256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\tuint256 c = a % b;\r\n\treturn c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint256);\r\n  function transfer(address to, uint256 value) public;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev ERC20 interface with allowances. \r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant public returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public;\r\n  function approve(address spender, uint256 value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public {\r\n    balances[msg.sender] = balances[msg.sender].sub256(_value);\r\n    balances[_to] = balances[_to].add256(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implemantation of the basic standart token.\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\r\n    // if (_value > _allowance) revert();\r\n\r\n    balances[_to] = balances[_to].add256(_value);\r\n    balances[_from] = balances[_from].sub256(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub256(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public {\r\n\r\n    //  To change the approve amount you first have to reduce the addresses\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title TeuToken\r\n * @dev The main TEU token contract\r\n * \r\n */\r\n \r\ncontract TeuToken is StandardToken, Ownable{\r\n  string public name = \"20-footEqvUnit\";\r\n  string public symbol = \"TEU\";\r\n  uint public decimals = 18;\r\n\r\n  event TokenBurned(uint256 value);\r\n  \r\n  function TeuToken() public {\r\n    totalSupply = (10 ** 8) * (10 ** decimals);\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to burn the token\r\n   * @param _value number of tokens to be burned.\r\n   */\r\n  function burn(uint _value) onlyOwner public {\r\n    require(balances[msg.sender] >= _value);\r\n    balances[msg.sender] = balances[msg.sender].sub256(_value);\r\n    totalSupply = totalSupply.sub256(_value);\r\n    TokenBurned(_value);\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Pausable\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n  \r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n}\r\n\r\n/**\r\n * @title teuBookingDeposit \r\n * @dev TEU Booking Deposit: A smart contract governing the entitlement of TEU token of two parties for a container shipping booking \r\n  */\r\ncontract TeuBookingDeposit is Ownable, Pausable {\r\n\tevent eAdjustClientAccountBalance(bytes32 indexed _PartnerID, bytes32 _ClientId, bytes32 _adjustedBy, string _CrDr, uint256 _tokenAmount, string CrDrR, uint256 _tokenRAmount);\r\n\tevent eAllocateRestrictedTokenTo(bytes32 indexed _PartnerID, bytes32 indexed _clientId, bytes32 _allocatedBy, uint256 _tokenAmount);\r\n\tevent eAllocateRestrictedTokenToPartner(bytes32 indexed _PartnerID, bytes32 _allocatedBy, uint256 _tokenAmount);\r\n\tevent eCancelTransactionEvent(bytes32 indexed _PartnerID, string _TxNum, bytes32 indexed _fromClientId, uint256 _tokenAmount, uint256 _rAmount, uint256 _grandTotal);\r\n\tevent eConfirmReturnToken(bytes32 indexed _PartnerID, string _TxNum, bytes32 indexed _fromClientId, uint256 _tokenAmount, uint256 _rAmount, uint256 _grandTotal);\r\n    event eConfirmTokenTransferToBooking(bytes32 indexed _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _amount1, uint256 _rAmount1, uint256 _amount2, uint256 _rAmount2);\r\n    event eKillTransactionEvent(bytes32 _PartnerID, bytes32 _killedBy, string TxHash, string _TxNum);\r\n\tevent ePartnerAllocateRestrictedTokenTo(bytes32 indexed _PartnerID, bytes32 indexed _clientId, uint256 _tokenAmount);\r\n\tevent eReceiveTokenByClientAccount(bytes32 indexed _clientId, uint256 _tokenAmount, address _transferFrom);\r\n\tevent eSetWalletToClientAccount(bytes32 _clientId, address _wallet, bytes32 _setBy);\r\n\tevent eTransactionFeeForBooking(bytes32 indexed _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _amount1, uint256 _rAmount1, uint256 _amount2, uint256 _rAmount2);\r\n\tevent eWithdrawTokenToClientAccount(bytes32 indexed _clientId, bytes32 _withdrawnBy, uint256 _tokenAmount, address _transferTo);\r\n\tevent eWithdrawUnallocatedRestrictedToken(uint256 _tokenAmount, bytes32 _withdrawnBy);\r\n\t\r\n\t\r\n\t\r\n    using SafeMath for uint256;\r\n\t\r\n\t\r\n    TeuToken    private token;\r\n\t/*  \r\n    * Failsafe drain\r\n    */\r\n    function drain() onlyOwner public {\r\n        if (!owner.send(this.balance)) revert();\r\n    }\r\n\t\r\n\tfunction () payable public {\r\n\t\tif (msg.value!=0) revert();\r\n\t}\r\n\t\r\n\tfunction stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n\t\tbytes memory tempEmptyStringTest = bytes(source);\r\n\t\tif (tempEmptyStringTest.length == 0) {\r\n\t\t\treturn 0x0;\r\n\t\t}\r\n\r\n\t\tassembly {\r\n\t\t\tresult := mload(add(source, 32))\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction killTransaction(bytes32 _PartnerID, bytes32 _killedBy, string _txHash, string _txNum) onlyOwner stopInEmergency public {\r\n\t\teKillTransactionEvent(_PartnerID, _killedBy, _txHash, _txNum);\r\n\t}\r\n\t\r\n\t\t\r\n\tfunction cancelTransaction(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _grandTotal) onlyOwner stopInEmergency public {\r\n        eCancelTransactionEvent(_PartnerID, _TxNum, _fromClientId1, _tokenAmount1, _rAmount1, _grandTotal);\r\n\t\teCancelTransactionEvent(_PartnerID, _TxNum, _toClientId2, _tokenAmount2, _rAmount2, _grandTotal);\r\n\t}\r\n\t\r\n\t\r\n\tfunction AdjustClientAccountBalance(bytes32 _PartnerID, bytes32 _ClientId, bytes32 _allocatedBy, string _CrDr, uint256 _tokenAmount, string CrDrR, uint256 _RtokenAmount) onlyOwner stopInEmergency public {\r\n\t\teAdjustClientAccountBalance(_PartnerID, _ClientId, _allocatedBy, _CrDr, _tokenAmount, CrDrR, _RtokenAmount);\r\n\t}\r\n\t\r\n\tfunction setWalletToClientAccount(bytes32 _clientId, address _wallet, bytes32 _setBy) onlyOwner public {\r\n        eSetWalletToClientAccount(_clientId, _wallet, _setBy);\r\n    }\r\n\t\r\n    function receiveTokenByClientAccount(string _clientId, uint256 _tokenAmount, address _transferFrom) stopInEmergency public {\r\n        require(_tokenAmount > 0);\r\n        bytes32 _clientId32 = stringToBytes32(_clientId);\r\n\t\ttoken.transferFrom(_transferFrom, this, _tokenAmount);   \r\n\t\teReceiveTokenByClientAccount(_clientId32, _tokenAmount, _transferFrom);\r\n    }\r\n\t\r\n\tfunction withdrawTokenToClientAccount(bytes32 _clientId, bytes32 _withdrawnBy, address _transferTo, uint256 _tokenAmount) onlyOwner stopInEmergency public {\r\n        require(_tokenAmount > 0);\r\n\r\n\t\ttoken.transfer(_transferTo, _tokenAmount);      \r\n\r\n\t\teWithdrawTokenToClientAccount(_clientId, _withdrawnBy, _tokenAmount, _transferTo);\r\n    }\r\n\t\r\n\r\n\t\r\n    // functions for restricted token management\r\n    function allocateRestrictedTokenTo(bytes32 _PartnerID, bytes32 _clientId, bytes32 _allocatedBy, uint256 _tokenAmount) onlyOwner stopInEmergency public {\r\n\t\teAllocateRestrictedTokenTo(_PartnerID, _clientId, _allocatedBy, _tokenAmount);\r\n    }\r\n    \r\n    function withdrawUnallocatedRestrictedToken(uint256 _tokenAmount, bytes32 _withdrawnBy) onlyOwner stopInEmergency public {\r\n        //require(_tokenAmount <= token.balanceOf(this).sub256(totalBookingClientToken).sub256(totalClientToken).sub256(totalRestrictedToken));\r\n        token.transfer(msg.sender, _tokenAmount);\r\n\t\teWithdrawUnallocatedRestrictedToken(_tokenAmount, _withdrawnBy);\r\n    } \r\n\r\n// functions for restricted token management Partner side\r\n    function allocateRestrictedTokenToPartner(bytes32 _PartnerID, bytes32 _allocatedBy, uint256 _tokenAmount) onlyOwner stopInEmergency public {\r\n\t\teAllocateRestrictedTokenToPartner(_PartnerID, _allocatedBy, _tokenAmount);\r\n    }\r\n\t\r\n    function partnerAllocateRestrictedTokenTo(bytes32 _PartnerID, bytes32 _clientId, uint256 _tokenAmount) onlyOwner stopInEmergency public {\r\n\t\tePartnerAllocateRestrictedTokenTo(_PartnerID, _clientId, _tokenAmount);\r\n    }\r\n\t\r\n// functions for transferring token to booking \t\r\n\tfunction confirmTokenTransferToBooking(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _txTokenAmount1, uint256 _txRAmount1, uint256 _txTokenAmount2, uint256 _txRAmount2) onlyOwner stopInEmergency public {\t\t\r\n\t\teConfirmTokenTransferToBooking(_PartnerID, _TxNum, _fromClientId1, _toClientId2, _tokenAmount1, _rAmount1, _tokenAmount2, _rAmount2);\r\n\t\teTransactionFeeForBooking(_PartnerID, _TxNum, _fromClientId1, _toClientId2, _txTokenAmount1, _txRAmount1, _txTokenAmount2, _txRAmount2);\r\n\t}\r\n\r\n \r\n// functions for returning tokens\t\r\n\tfunction confirmReturnToken(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _grandTotal) onlyOwner stopInEmergency public {\r\n        eConfirmReturnToken(_PartnerID, _TxNum, _fromClientId1, _tokenAmount1, _rAmount1, _grandTotal);\r\n\t\teConfirmReturnToken(_PartnerID, _TxNum, _toClientId2, _tokenAmount2, _rAmount2, _grandTotal);\r\n\t}\r\n\r\n\r\n// function for Admin\r\n    function getToken() constant public onlyOwner returns (address) {\r\n        return token;\r\n    }\r\n\t\r\n    function setToken(address _token) public onlyOwner stopInEmergency {\r\n        require(token == address(0));\r\n        token = TeuToken(_token);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_withdrawnBy\",\"type\":\"bytes32\"}],\"name\":\"withdrawUnallocatedRestrictedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_setBy\",\"type\":\"bytes32\"}],\"name\":\"setWalletToClientAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_TxNum\",\"type\":\"string\"},{\"name\":\"_fromClientId1\",\"type\":\"bytes32\"},{\"name\":\"_toClientId2\",\"type\":\"bytes32\"},{\"name\":\"_tokenAmount1\",\"type\":\"uint256\"},{\"name\":\"_rAmount1\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount2\",\"type\":\"uint256\"},{\"name\":\"_rAmount2\",\"type\":\"uint256\"},{\"name\":\"_grandTotal\",\"type\":\"uint256\"}],\"name\":\"cancelTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"name\":\"_allocatedBy\",\"type\":\"bytes32\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"allocateRestrictedTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"name\":\"_withdrawnBy\",\"type\":\"bytes32\"},{\"name\":\"_transferTo\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenToClientAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"partnerAllocateRestrictedTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_ClientId\",\"type\":\"bytes32\"},{\"name\":\"_allocatedBy\",\"type\":\"bytes32\"},{\"name\":\"_CrDr\",\"type\":\"string\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"CrDrR\",\"type\":\"string\"},{\"name\":\"_RtokenAmount\",\"type\":\"uint256\"}],\"name\":\"AdjustClientAccountBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_allocatedBy\",\"type\":\"bytes32\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"allocateRestrictedTokenToPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_TxNum\",\"type\":\"string\"},{\"name\":\"_fromClientId1\",\"type\":\"bytes32\"},{\"name\":\"_toClientId2\",\"type\":\"bytes32\"},{\"name\":\"_tokenAmount1\",\"type\":\"uint256\"},{\"name\":\"_rAmount1\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount2\",\"type\":\"uint256\"},{\"name\":\"_rAmount2\",\"type\":\"uint256\"},{\"name\":\"_txTokenAmount1\",\"type\":\"uint256\"},{\"name\":\"_txRAmount1\",\"type\":\"uint256\"},{\"name\":\"_txTokenAmount2\",\"type\":\"uint256\"},{\"name\":\"_txRAmount2\",\"type\":\"uint256\"}],\"name\":\"confirmTokenTransferToBooking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_TxNum\",\"type\":\"string\"},{\"name\":\"_fromClientId1\",\"type\":\"bytes32\"},{\"name\":\"_toClientId2\",\"type\":\"bytes32\"},{\"name\":\"_tokenAmount1\",\"type\":\"uint256\"},{\"name\":\"_rAmount1\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount2\",\"type\":\"uint256\"},{\"name\":\"_rAmount2\",\"type\":\"uint256\"},{\"name\":\"_grandTotal\",\"type\":\"uint256\"}],\"name\":\"confirmReturnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clientId\",\"type\":\"string\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_transferFrom\",\"type\":\"address\"}],\"name\":\"receiveTokenByClientAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"name\":\"_killedBy\",\"type\":\"bytes32\"},{\"name\":\"_txHash\",\"type\":\"string\"},{\"name\":\"_txNum\",\"type\":\"string\"}],\"name\":\"killTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_ClientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_adjustedBy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_CrDr\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"CrDrR\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_tokenRAmount\",\"type\":\"uint256\"}],\"name\":\"eAdjustClientAccountBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_allocatedBy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"eAllocateRestrictedTokenTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_allocatedBy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"eAllocateRestrictedTokenToPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_TxNum\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_fromClientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_grandTotal\",\"type\":\"uint256\"}],\"name\":\"eCancelTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_TxNum\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_fromClientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_grandTotal\",\"type\":\"uint256\"}],\"name\":\"eConfirmReturnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_TxNum\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_fromClientId1\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_toClientId2\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rAmount2\",\"type\":\"uint256\"}],\"name\":\"eConfirmTokenTransferToBooking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_killedBy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"TxHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_TxNum\",\"type\":\"string\"}],\"name\":\"eKillTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ePartnerAllocateRestrictedTokenTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_transferFrom\",\"type\":\"address\"}],\"name\":\"eReceiveTokenByClientAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_setBy\",\"type\":\"bytes32\"}],\"name\":\"eSetWalletToClientAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PartnerID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_TxNum\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_fromClientId1\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_toClientId2\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rAmount2\",\"type\":\"uint256\"}],\"name\":\"eTransactionFeeForBooking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_clientId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_withdrawnBy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_transferTo\",\"type\":\"address\"}],\"name\":\"eWithdrawTokenToClientAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_withdrawnBy\",\"type\":\"bytes32\"}],\"name\":\"eWithdrawUnallocatedRestrictedToken\",\"type\":\"event\"}]","ContractName":"TeuBookingDeposit","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad3d105a160fd7355e0755ff2f7d87b2c75408d3daa0869896b9e83137b5ab83"}]}