{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\ncontract OrganicumOrders {\r\n    struct order {\r\n    uint256 balance;\r\n    uint256 tokens;\r\n    }\r\n\r\n    mapping (address => order) public orders;\r\n    address[] public holders;\r\n\r\n    uint256 public supplyTokens;\r\n    uint256 public supplyTokensSaved;\r\n    uint256 public tokenDecimal = 18;\r\n\r\n    uint256 minAmount = 1000; // minAmount / 100 = 10 $\r\n    uint256 softCap = 5000000; // softCap / 100 = 50 000 $\r\n    uint256 supplyInvestmen = 0;\r\n\r\n    uint16 fee = 500; // fee / 10000 = 0.05 = 5%\r\n\r\n    uint256 public etherCost = 60000; // etherCost / 100 = 600 $\r\n\r\n    address public owner;\r\n\r\n    uint256 public startDate = 1521849600; // 24.03.2018\r\n    uint256 public firstPeriod = 1522540800; // 01.04.2018\r\n    uint256 public secondPeriod = 1525132800; // 01.05.2018\r\n    uint256 public thirdPeriod = 1527811200; // 01.06.2018\r\n    uint256 public endDate = 1530403200; // 01.07.2018\r\n\r\n    function OrganicumOrders()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier isOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address new_owner) isOwner\r\n    {\r\n        assert(new_owner != address(0x0));\r\n        assert(new_owner != address(this));\r\n        owner = new_owner;\r\n    }\r\n\r\n    function changeEtherCost(uint256 new_cost) isOwner external\r\n    {\r\n        assert(new_cost > 0);\r\n        etherCost = new_cost*100;\r\n    }\r\n\r\n    function getPrice() constant returns(uint256)\r\n    {\r\n        if(now < firstPeriod)\r\n        {\r\n            return 95; // 0.95 $\r\n        }\r\n        else if(now < secondPeriod)\r\n        {\r\n            return 100; // 1.00 $\r\n        }\r\n        else if(now < thirdPeriod)\r\n        {\r\n            return 110; // 1.10 $\r\n        }\r\n        else\r\n        {\r\n            return 120; // 1.20 $\r\n        }\r\n    }\r\n\r\n    function () payable\r\n    {\r\n        assert(now >= startDate && now < endDate);\r\n        assert((msg.value * etherCost)/10**18 >= minAmount);\r\n\r\n        if(orders[msg.sender].balance == 0 && orders[msg.sender].tokens == 0)\r\n        {\r\n            holders.push(msg.sender);\r\n        }\r\n\r\n        uint256 countTokens = (msg.value * etherCost) / getPrice();\r\n        orders[msg.sender].balance += msg.value;\r\n        orders[msg.sender].tokens += countTokens;\r\n\r\n        supplyTokens += countTokens;\r\n        supplyTokensSaved += countTokens;\r\n        supplyInvestmen += msg.value;\r\n    }\r\n\r\n    function orderFor(address to) payable\r\n    {\r\n        assert(now >= startDate && now < endDate);\r\n        assert((msg.value * etherCost)/10**18 >= minAmount);\r\n\r\n        if(orders[to].balance == 0 && orders[to].tokens == 0)\r\n        {\r\n            holders.push(to);\r\n            if (to.balance == 0)\r\n            {\r\n                to.transfer(0.001 ether);\r\n            }\r\n        }\r\n\r\n        uint256 countTokens = ((msg.value - 0.001 ether) * etherCost) / getPrice();\r\n        orders[to].balance += msg.value;\r\n        orders[to].tokens += countTokens;\r\n\r\n        supplyTokens += countTokens;\r\n        supplyTokensSaved += countTokens;\r\n        supplyInvestmen += msg.value;\r\n    }\r\n\r\n    mapping (address => bool) public voter;\r\n    uint256 public sumVote = 0;\r\n    uint256 public durationVoting = 24 hours;\r\n\r\n    function vote()\r\n    {\r\n        assert(!voter[msg.sender]);\r\n        assert(now >= endDate && now < endDate + durationVoting);\r\n        assert((supplyInvestmen * etherCost)/10**18 >= softCap);\r\n        assert(orders[msg.sender].tokens > 0);\r\n\r\n        voter[msg.sender] = true;\r\n        sumVote += orders[msg.sender].tokens;\r\n    }\r\n\r\n    function refund(address holder)\r\n    {\r\n        assert(orders[holder].balance > 0);\r\n\r\n        uint256 etherToSend = 0;\r\n        if ((supplyInvestmen * etherCost)/10**18 >= softCap)\r\n        {\r\n            assert(sumVote > supplyTokensSaved / 2); // > 50%\r\n            etherToSend = orders[holder].balance * 95 / 100;\r\n        }\r\n        else\r\n        {\r\n            etherToSend = orders[holder].balance;\r\n        }\r\n        assert(etherToSend > 0);\r\n\r\n        if (etherToSend > this.balance) etherToSend = this.balance;\r\n\r\n        holder.transfer(etherToSend);\r\n\r\n        supplyTokens -= orders[holder].tokens;\r\n        orders[holder].balance = 0;\r\n        orders[holder].tokens = 0;\r\n    }\r\n\r\n    function takeInvest() isOwner\r\n    {\r\n        assert(now >= endDate + durationVoting);\r\n        assert(this.balance > 0);\r\n\r\n        if(sumVote > supplyTokensSaved / 2)\r\n        {\r\n            assert(supplyTokens == 0);\r\n        }\r\n\r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyTokensSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_cost\",\"type\":\"uint256\"}],\"name\":\"changeEtherCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"orderFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"OrganicumOrders","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3befc5bfb18d3b7f8b63716e61fc95896ff930cc1cbcd20b3eb0e45750f55ce0"}]}