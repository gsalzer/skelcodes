{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract SafeMath {\r\n    function safeToAdd(uint a, uint b) pure internal returns (bool) {\r\n        return (a + b >= a);\r\n    }\r\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n        require(safeToAdd(a, b));\r\n        return a + b;\r\n    }\r\n\r\n    function safeToSubtract(uint a, uint b) pure internal returns (bool) {\r\n        return (b <= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure internal returns (uint) {\r\n        require(safeToSubtract(a, b));\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract DiceRoll is SafeMath {\r\n\r\n    address public owner;\r\n    uint8 constant public maxNumber = 99;\r\n    uint8 constant public minNumber = 1;\r\n\r\n    bool public gamePaused;\r\n    bool public recommendPaused;\r\n    bool public jackpotPaused;\r\n\r\n    uint256 public contractBalance;\r\n    uint16 public houseEdge;\r\n    uint256 public maxProfit;\r\n    uint16 public maxProfitAsPercentOfHouse;\r\n    uint256 public minBet;\r\n    uint256 public maxBet;\r\n    uint16 public jackpotOfHouseEdge;\r\n    uint256 public minJackpotBet;\r\n    uint256 public recommendProportion;\r\n    uint256 playerProfit;\r\n    \r\n    uint256 public jackpotBlance;\r\n    address[] public jackpotPlayer;\r\n    uint256 public JackpotPeriods = 1;\r\n    uint64 public nextJackpotTime;\r\n    uint16 public jackpotPersent = 100;\r\n    \r\n    uint256 public totalWeiWon;\r\n    uint256 public totalWeiWagered;\r\n\r\n    uint256 public betId;\r\n    uint256 seed;\r\n\r\n    modifier betIsValid(uint256 _betSize, uint8 _start, uint8 _end) {\r\n        require(_betSize >= minBet && _betSize <= maxBet && _start >= minNumber && _end <= maxNumber);\r\n        _;\r\n    }\r\n    \r\n    modifier oddEvenBetIsValid(uint256 _betSize, uint8 _oddeven) {\r\n        require(_betSize >= minBet && _betSize <= maxBet && (_oddeven == 1 || _oddeven == 0));\r\n        _;\r\n    }\r\n\r\n    modifier gameIsActive {\r\n        require(!gamePaused);\r\n        _;\r\n    }\r\n    \r\n    modifier recommendAreActive {\r\n        require(!recommendPaused);\r\n        _;\r\n    }\r\n\r\n    modifier jackpotAreActive {\r\n        require(!jackpotPaused);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    event LogResult(uint256 indexed BetID, address indexed PlayerAddress, uint8 DiceResult, uint256 Value, uint8 Status, uint8 Start, uint8 End, uint8 oddeven, uint256 BetValue);\r\n    event LogJackpot(uint indexed BetID, address indexed PlayerAddress, uint jackpotValue);\r\n    event LogRecommendProfit(uint indexed BetID, address indexed PlayerAddress, uint Profit);\r\n    event LogOwnerTransfer(address SentToAddress, uint AmountTransferred);\r\n    event SendJackpotSuccesss(address indexed winner, uint256 amount, uint256 JackpotPeriods);\r\n    \r\n\r\n    function() public payable{\r\n        contractBalance = safeAdd(contractBalance, msg.value);\r\n        setMaxProfit();\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        houseEdge = 20; //2%\r\n        maxProfitAsPercentOfHouse = 100; //10%\r\n        minBet = 0.1 ether;\r\n        maxBet = 1 ether;\r\n        jackpotOfHouseEdge = 500; //50%\r\n        recommendProportion = 100; //10%\r\n        minJackpotBet = 0.1 ether;\r\n        jackpotPersent = 100; //10%\r\n    }\r\n\r\n    function playerRoll(uint8 start, uint8 end, address inviter) public payable gameIsActive betIsValid(msg.value, start, end) {\r\n        betId += 1;\r\n        uint8 probability = end - start + 1;\r\n        playerProfit = ((msg.value * (100 - probability) / probability + msg.value) * (1000 - houseEdge) / 1000) - msg.value;\r\n        if(playerProfit > maxProfit) playerProfit = maxProfit;\r\n        uint8 random = uint8(rand() % 100 + 1);\r\n        totalWeiWagered += msg.value;\r\n        if(start <= random && random <= end){\r\n            totalWeiWon = safeAdd(totalWeiWon, playerProfit);\r\n            contractBalance = safeSub(contractBalance, playerProfit);\r\n            uint256 payout = safeAdd(playerProfit, msg.value);\r\n            setMaxProfit();\r\n            emit LogResult(betId, msg.sender, random, playerProfit, 1, start, end, 2, msg.value);\r\n\r\n            uint256 houseEdgeFee = getHouseEdgeFee(probability, msg.value);\r\n            increaseJackpot(houseEdgeFee * jackpotOfHouseEdge / 1000, betId);\r\n            \r\n            if(inviter != address(0)){\r\n                emit LogRecommendProfit(betId, msg.sender, playerProfit);\r\n                sendProportion(inviter, houseEdgeFee * recommendProportion / 1000);\r\n            }\r\n            \r\n            msg.sender.transfer(payout);\r\n            return;\r\n        }else{\r\n            emit LogResult(betId, msg.sender, random, 0, 0, start, end, 2, msg.value);    \r\n            contractBalance = safeAdd(contractBalance, (msg.value-1));                                                      \r\n            setMaxProfit();\r\n            msg.sender.transfer(1);\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    function oddEven(uint8 oddeven, address inviter) public payable gameIsActive oddEvenBetIsValid(msg.value, oddeven) {\r\n        betId += 1;\r\n        uint8 probability = 50;\r\n        playerProfit = ((msg.value * (100 - probability) / probability + msg.value) * (1000 - houseEdge) / 1000) - msg.value;\r\n        if(playerProfit > maxProfit) playerProfit = maxProfit;\r\n        uint8 random = uint8(rand() % 100 + 1);\r\n        totalWeiWagered += msg.value;\r\n        if(random % 2 == oddeven){\r\n            totalWeiWon = safeAdd(totalWeiWon, playerProfit);\r\n            contractBalance = safeSub(contractBalance, playerProfit);\r\n            uint256 payout = safeAdd(playerProfit, msg.value);\r\n            setMaxProfit();\r\n            emit LogResult(betId, msg.sender, random, playerProfit, 1, 0, 0, oddeven, msg.value);\r\n            \r\n            uint256 houseEdgeFee = getHouseEdgeFee(probability, msg.value);\r\n            increaseJackpot(houseEdgeFee * jackpotOfHouseEdge / 1000, betId);\r\n            \r\n            if(inviter != address(0)){\r\n                emit LogRecommendProfit(betId, msg.sender, playerProfit);\r\n                sendProportion(inviter, houseEdgeFee * recommendProportion / 1000);\r\n            }\r\n            \r\n            msg.sender.transfer(payout);  \r\n            return;\r\n        }else{\r\n            emit LogResult(betId, msg.sender, random, 0, 0, 0, 0, oddeven, msg.value); \r\n            contractBalance = safeAdd(contractBalance, (msg.value-1));\r\n            setMaxProfit();\r\n            msg.sender.transfer(1);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function sendProportion(address inviter, uint256 amount) internal {\r\n        require(amount < contractBalance);\r\n        contractBalance = safeSub(contractBalance, amount);\r\n        inviter.transfer(amount);\r\n    }\r\n\r\n\r\n    function increaseJackpot(uint256 increaseAmount, uint256 _betId) internal {\r\n        require(increaseAmount < maxProfit);\r\n        emit LogJackpot(_betId, msg.sender, increaseAmount);\r\n        jackpotBlance = safeAdd(jackpotBlance, increaseAmount);\r\n        contractBalance = safeSub(contractBalance, increaseAmount);\r\n        if(msg.value >= minJackpotBet){\r\n            jackpotPlayer.push(msg.sender);\r\n        }\r\n    }\r\n    \r\n    function createWinner() public onlyOwner jackpotAreActive {\r\n        uint64 tmNow = uint64(block.timestamp);\r\n        require(tmNow >= nextJackpotTime);\r\n        require(jackpotPlayer.length > 0);\r\n        nextJackpotTime = tmNow + 72000;\r\n        JackpotPeriods += 1;\r\n        uint random = rand() % jackpotPlayer.length;\r\n        address winner = jackpotPlayer[random - 1];\r\n        jackpotPlayer.length = 0;\r\n        sendJackpot(winner);\r\n    }\r\n    \r\n    function sendJackpot(address winner) public onlyOwner jackpotAreActive {\r\n        uint256 amount = jackpotBlance * jackpotPersent / 1000;\r\n        require(jackpotBlance > amount);\r\n        emit SendJackpotSuccesss(winner, amount, JackpotPeriods);\r\n        jackpotBlance = safeSub(jackpotBlance, amount);\r\n        winner.transfer(amount);\r\n    }\r\n    \r\n    function sendValueToJackpot() payable public jackpotAreActive {\r\n        jackpotBlance = safeAdd(jackpotBlance, msg.value);\r\n    }\r\n    \r\n    function getHouseEdgeFee(uint256 _probability, uint256 _betValue) view internal returns (uint256){\r\n        return (_betValue * (100 - _probability) / _probability + _betValue) * houseEdge / 1000;\r\n    }\r\n\r\n\r\n    function rand() internal returns (uint256) {\r\n        seed = uint256(keccak256(msg.sender, blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n        return seed;\r\n    }\r\n\r\n    function setMaxProfit() internal {\r\n        maxProfit = contractBalance * maxProfitAsPercentOfHouse / 1000;  \r\n    }\r\n\r\n    function ownerSetHouseEdge(uint16 newHouseEdge) public onlyOwner{\r\n        require(newHouseEdge <= 1000);\r\n        houseEdge = newHouseEdge;\r\n    }\r\n\r\n    function ownerSetMinJackpoBet(uint256 newVal) public onlyOwner{\r\n        require(newVal <= 1 ether);\r\n        minJackpotBet = newVal;\r\n    }\r\n\r\n    function ownerSetMaxProfitAsPercentOfHouse(uint8 newMaxProfitAsPercent) public onlyOwner{\r\n        require(newMaxProfitAsPercent <= 1000);\r\n        maxProfitAsPercentOfHouse = newMaxProfitAsPercent;\r\n        setMaxProfit();\r\n    }\r\n\r\n    function ownerSetMinBet(uint256 newMinimumBet) public onlyOwner{\r\n        minBet = newMinimumBet;\r\n    }\r\n\r\n    function ownerSetMaxBet(uint256 newMaxBet) public onlyOwner{\r\n        maxBet = newMaxBet;\r\n    }\r\n\r\n    function ownerSetJackpotOfHouseEdge(uint16 newProportion) public onlyOwner{\r\n        require(newProportion < 1000);\r\n        jackpotOfHouseEdge = newProportion;\r\n    }\r\n\r\n    function ownerSetRecommendProportion(uint16 newRecommendProportion) public onlyOwner{\r\n        require(newRecommendProportion < 1000);\r\n        recommendProportion = newRecommendProportion;\r\n    }\r\n\r\n    function ownerPauseGame(bool newStatus) public onlyOwner{\r\n        gamePaused = newStatus;\r\n    }\r\n\r\n    function ownerPauseJackpot(bool newStatus) public onlyOwner{\r\n        jackpotPaused = newStatus;\r\n    }\r\n\r\n    function ownerPauseRecommend(bool newStatus) public onlyOwner{\r\n        recommendPaused = newStatus;\r\n    }\r\n\r\n    function ownerTransferEther(address sendTo, uint256 amount) public onlyOwner{\t\r\n        contractBalance = safeSub(contractBalance, amount);\r\n        sendTo.transfer(amount);\r\n        setMaxProfit();\r\n        emit LogOwnerTransfer(sendTo, amount);\r\n    }\r\n\r\n    function ownerChangeOwner(address newOwner) public onlyOwner{\r\n        owner = newOwner;\r\n    }\r\n\r\n    function ownerkill() public onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"sendValueToJackpot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddeven\",\"type\":\"uint8\"},{\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"oddEven\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfitAsPercentOfHouse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBlance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpotPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProportion\",\"type\":\"uint16\"}],\"name\":\"ownerSetJackpotOfHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendProportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextJackpotTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minJackpotBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"ownerSetMinJackpoBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"end\",\"type\":\"uint8\"},{\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"playerRoll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"sendJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerTransferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotOfHouseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRecommendProportion\",\"type\":\"uint16\"}],\"name\":\"ownerSetRecommendProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxProfitAsPercent\",\"type\":\"uint8\"}],\"name\":\"ownerSetMaxProfitAsPercentOfHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouseEdge\",\"type\":\"uint16\"}],\"name\":\"ownerSetHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JackpotPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ownerPauseRecommend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"DiceResult\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Status\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"Start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"End\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"oddeven\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"BetValue\",\"type\":\"uint256\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpotValue\",\"type\":\"uint256\"}],\"name\":\"LogJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Profit\",\"type\":\"uint256\"}],\"name\":\"LogRecommendProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogOwnerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"JackpotPeriods\",\"type\":\"uint256\"}],\"name\":\"SendJackpotSuccesss\",\"type\":\"event\"}]","ContractName":"DiceRoll","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1b0a5f5a6254e16998b46d53fb4e36e0c3340f78b2fe8b3912e8d9780f1e0d13"}]}