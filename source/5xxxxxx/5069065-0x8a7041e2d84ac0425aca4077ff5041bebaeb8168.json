{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\tOwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\tuint256 totalSupply_;\r\n\r\n\t/**\r\n\t* @dev total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another\r\n\t * @param _from address The address which you want to send tokens from\r\n\t * @param _to address The address which you want to transfer to\r\n\t * @param _value uint256 the amount of tokens to be transferred\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t *\r\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _value The amount of tokens to be spent.\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t * @param _owner address The address which owns the funds.\r\n\t * @param _spender address The address which will spend the funds.\r\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t */\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t *\r\n\t * approve should be called when allowed[_spender] == 0. To increment\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _addedValue The amount of tokens to increase the allowance by.\r\n\t */\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t *\r\n\t * approve should be called when allowed[_spender] == 0. To decrement\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t */\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title Sebastian\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract SebastianToken is StandardToken, Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public name = \"Sebastian\";\r\n\tstring public symbol = \"SEB\";\r\n\tuint256 public decimals = 5;\r\n\r\n\tuint256 public totalSupply = 1000000000 * (10 ** uint256(decimals));\r\n\r\n\t/**\r\n\t * @dev Constructor that gives msg.sender all of existing tokens.\r\n\t */\r\n\tfunction SebastianToken(string _name, string _symbol, uint256 _decimals, uint256 _totalSupply) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t\ttotalSupply = _totalSupply;\r\n\r\n\t\ttotalSupply_ = _totalSupply;\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev if ether is sent to this address, send it back.\r\n\t */\r\n\tfunction () public payable {\r\n\t\trevert();\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SebastianTokenSale\r\n * @dev ICO Contract\r\n */\r\ncontract SebastianTokenSale is Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\t// The token being sold, this holds reference to main token contract\r\n\tSebastianToken public token;\r\n\r\n\t// timestamp when sale starts\r\n\tuint256 public startingTimestamp = 1518696000;\r\n\r\n\t// timestamp when sale ends\r\n\tuint256 public endingTimestamp = 1521115200;\r\n\r\n\t// how many token units a buyer gets per ether\r\n\tuint256 public tokenPriceInEth = 0.0001 ether;\r\n\r\n\t// amount of token to be sold on sale\r\n\tuint256 public tokensForSale = 400000000 * 1E5;\r\n\r\n\t// amount of token sold so far\r\n\tuint256 public totalTokenSold;\r\n\r\n\t// amount of ether raised in sale\r\n\tuint256 public totalEtherRaised;\r\n\r\n\t// ether raised per wallet\r\n\tmapping(address => uint256) public etherRaisedPerWallet;\r\n\r\n\t// wallet which will receive the ether funding\r\n\taddress public wallet;\r\n\r\n\t// is contract close and ended\r\n\tbool internal isClose = false;\r\n\r\n\t// wallet changed\r\n\tevent WalletChange(address _wallet, uint256 _timestamp);\r\n\r\n\t// token purchase event\r\n\tevent TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _timestamp);\r\n\r\n\t// manual transfer by owner for external purchase\r\n\tevent TransferManual(address indexed _from, address indexed _to, uint256 _value, string _message);\r\n\r\n\t/**\r\n\t * @dev Constructor that initializes token contract with token address in parameter\r\n\t *\r\n\t * @param _token Address of Token Contract\r\n\t * @param _startingTimestamp Start time of Sale in Timestamp.\r\n\t * @param _endingTimestamp End time of Sale in Timestamp.\r\n\t * @param _tokensPerEth Number of Tokens to convert per 1 ETH.\r\n\t * @param _tokensForSale Number of Tokens available for sale.\r\n\t * @param _wallet Backup Wallet Address where funds should be transfered when contract is closed or Owner wants to Withdraw.\r\n\t *\r\n\t */\r\n\tfunction SebastianTokenSale(address _token, uint256 _startingTimestamp, uint256 _endingTimestamp, uint256 _tokensPerEth, uint256 _tokensForSale, address _wallet) public {\r\n\t\t// set token\r\n\t\ttoken = SebastianToken(_token);\r\n\r\n\t\tstartingTimestamp = _startingTimestamp;\r\n\t\tendingTimestamp = _endingTimestamp;\r\n\t\ttokenPriceInEth =  1E18 / _tokensPerEth; // Calculating Price of 1 Token in ETH \r\n\t\ttokensForSale = _tokensForSale;\r\n\r\n\t\t// set wallet\r\n\t\twallet = _wallet;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function that validates if the purchase is valid by verifying the parameters\r\n\t *\r\n\t * @param value Amount of ethers sent\r\n\t * @param amount Total number of tokens user is trying to buy.\r\n\t *\r\n\t * @return checks various conditions and returns the bool result indicating validity.\r\n\t */\r\n\tfunction isValidPurchase(uint256 value, uint256 amount) internal constant returns (bool) {\r\n\t\t// check if timestamp is falling in the range\r\n\t\tbool validTimestamp = startingTimestamp <= block.timestamp && endingTimestamp >= block.timestamp;\r\n\r\n\t\t// check if value of the ether is valid\r\n\t\tbool validValue = value != 0;\r\n\r\n\t\t// check if rate of the token is clearly defined\r\n\t\tbool validRate = tokenPriceInEth > 0;\r\n\r\n\t\t// check if the tokens available in contract for sale\r\n\t\tbool validAmount = tokensForSale.sub(totalTokenSold) >= amount && amount > 0;\r\n\r\n\t\t// validate if all conditions are met\r\n\t\treturn validTimestamp && validValue && validRate && validAmount && !isClose;\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * @dev Function that accepts ether value and returns the token amount\r\n\t *\r\n\t * @param value Amount of ethers sent\r\n\t *\r\n\t * @return checks various conditions and returns the bool result indicating validity.\r\n\t */\r\n\tfunction calculate(uint256 value) public constant returns (uint256) {\r\n\t\tuint256 tokenDecimals = token.decimals();\r\n\t\tuint256 tokens = value.mul(10 ** tokenDecimals).div(tokenPriceInEth);\r\n\t\treturn tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Default fallback method which will be called when any ethers are sent to contract\r\n\t */\r\n\tfunction() public payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function that is called either externally or by default payable method\r\n\t *\r\n\t * @param beneficiary who should receive tokens\r\n\t */\r\n\tfunction buyTokens(address beneficiary) public payable {\r\n\t\trequire(beneficiary != address(0));\r\n\r\n\t\t// amount of ethers sent\r\n\t\tuint256 value = msg.value;\r\n\r\n\t\t// calculate token amount from the ethers sent\r\n\t\tuint256 tokens = calculate(value);\r\n\r\n\t\t// validate the purchase\r\n\t\trequire(isValidPurchase(value , tokens));\r\n\r\n\t\t// update the state to log the sold tokens and raised ethers.\r\n\t\ttotalTokenSold = totalTokenSold.add(tokens);\r\n\t\ttotalEtherRaised = totalEtherRaised.add(value);\r\n\t\tetherRaisedPerWallet[msg.sender] = etherRaisedPerWallet[msg.sender].add(value);\r\n\r\n\t\t// transfer tokens from contract balance to beneficiary account. calling ERC223 method\r\n\t\ttoken.transfer(beneficiary, tokens);\r\n\t\t\r\n\t\t// log event for token purchase\r\n\t\tTokenPurchase(msg.sender, beneficiary, value, tokens, now);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transmit token for a specified address. \r\n\t* This is owner only method and should be called using web3.js if someone is trying to buy token using bitcoin or any other altcoin.\r\n\t* \r\n\t* @param _to The address to transmit to.\r\n\t* @param _value The amount to be transferred.\r\n\t* @param _message message to log after transfer.\r\n\t*/\r\n\tfunction transferManual(address _to, uint256 _value, string _message) onlyOwner public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\r\n\t\t// transfer tokens manually from contract balance\r\n\t\ttoken.transfer(_to , _value);\r\n\t\tTransferManual(msg.sender, _to, _value, _message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev withdraw funds \r\n\t* This will set the withdrawal wallet\r\n\t* \r\n\t* @param _wallet The address to transmit to.\r\n\t*/\t\r\n\tfunction setWallet(address _wallet) onlyOwner public returns(bool) {\r\n\t\t// set wallet \r\n\t\twallet = _wallet;\r\n\t\tWalletChange(_wallet , now);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Method called by owner of contract to withdraw funds\r\n\t*/\r\n\tfunction withdraw() onlyOwner public {\r\n\t\twallet.transfer(this.balance);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev close contract \r\n\t* This will send remaining token balance to owner\r\n\t* This will distribute available funds across team members\r\n\t*/\t\r\n\tfunction close() onlyOwner public {\r\n\t\t// send remaining tokens back to owner.\r\n\t\tuint256 tokens = token.balanceOf(this); \r\n\t\ttoken.transfer(owner , tokens);\r\n\r\n\t\t// withdraw funds \r\n\t\twithdraw();\r\n\r\n\t\t// mark the flag to indicate closure of the contract\r\n\t\tisClose = true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SebastianToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000054b6f696f7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b4f490000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://cefc9824dacbf189846489c9129936b58b28bbec91a619bccfe352534cf8c014"}]}