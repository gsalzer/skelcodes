{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function totalSupply() external view returns (uint _supply);\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function decimals() external view returns (uint8 _decimals);\r\n    function balanceOf(address _owner) external view returns (uint _balance);\r\n    function transfer(address _to, uint _tokens) external returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint _tokens) external returns (bool _success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint _remaining);\r\n    function approve(address _spender, uint _tokens) external returns (bool _success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _tokens, bytes indexed _data);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _tokens);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    using SafeMath for uint;\r\n\r\n    function processTransfer(address _from, address _to, uint256 _value, bytes _data) internal returns (bool success) {\r\n        if (balances[_from] >= _value && _value > 0) {\r\n            balances[_from] = balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n\r\n            // ERC223 - ensure if we get told to transfer to a contract address\r\n            // it must support tokenFallback method and approve the transfer.\r\n            if (isContract(_to)) {\r\n                iReceiver receiver = iReceiver(_to);\r\n                receiver.tokenFallback(_from, _value, _data);\r\n            }\r\n\r\n            emit Transfer(_from, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender` with `_data`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @param _data Data to be logged and sent\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value, bytes _data) external returns (bool success) {\r\n        return processTransfer(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) external returns (bool success) {\r\n        bytes memory empty;\r\n        return processTransfer(msg.sender, _to, _value, empty);\r\n    }\r\n    \r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        if (allowed[_from][msg.sender] >= _value) {\r\n            bytes memory empty;\r\n            return processTransfer(_from, _to, _value, empty);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    string public name;                   \r\n    uint8 public decimals;                 \r\n    string public symbol;                  \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    \r\n    function totalSupply() external view returns (uint _supply) {\r\n        return totalSupply;\r\n    }\r\n    \r\n    function name() external view returns (string _name) {\r\n        return name;\r\n    }\r\n    \r\n    function symbol() external view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    \r\n    function decimals() external view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function isContract(address _addr) internal view returns (bool _is_contract) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n}\r\n\r\ncontract FLOCK is StandardToken { // CHANGE THIS. Update the contract name.\r\n    using SafeMath for uint;\r\n\r\n    /* Public variables of the token */\r\n\r\n    /*\r\n        NOTE:\r\n        The following variables are OPTIONAL vanities. One does not have to include them.\r\n        They allow one to customise the token contract & in no way influences the core functionality.\r\n        Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public version = \"H1.0\"; \r\n    uint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.  \r\n    address public fundsWallet;           // Where should the raised ETH go?\r\n\r\n    Round[] rounds;\r\n    struct Round {\r\n        uint start;\r\n        uint end;\r\n        uint price;\r\n    }\r\n\r\n    // This is a constructor function \r\n    // which means the following function name has to match the contract name declared above\r\n    function FLOCK() public {\r\n        totalSupply = 10000000000;          // Update total supply\r\n        balances[msg.sender] = totalSupply; // Give the creator all initial tokens.\r\n        name = \"FLOCK\";                     // Set the name for display purposes\r\n        decimals = 0;                       // Amount of decimals for display purposes\r\n        symbol = \"FLK\";                     // Set the symbol for display purposes\r\n        fundsWallet = msg.sender;           // The owner of the contract gets ETH\r\n\r\n        uint ts = 1523764800;\r\n        rounds.push(Round(ts, ts += 5 days, 500000)); // Round 1\r\n        rounds.push(Round(ts, ts += 5 days, 500000)); // Round 2\r\n        rounds.push(Round(ts, ts += 2 days, 250000)); // Round 3\r\n        rounds.push(Round(ts, ts += 2 days, 166667)); // Round 4\r\n        rounds.push(Round(ts, ts += 2 days, 125000)); // Round 5\r\n        rounds.push(Round(ts, ts += 2 days, 100000)); // Round 6\r\n        rounds.push(Round(ts, ts += 2 days, 83333)); // Round 7\r\n        rounds.push(Round(ts, ts += 2 days, 71429)); // Round 8\r\n        rounds.push(Round(ts, ts += 2 days, 62500)); // Round 9\r\n        rounds.push(Round(ts, ts += 2 days, 55556)); // Round 10\r\n        rounds.push(Round(ts, ts += 2 days, 50000)); // Round 11\r\n    }\r\n\r\n    /// @notice Gets the conversion rate for ETH purchases.\r\n    /// @return Amount of tokens per ETH paid.\r\n    function unitsOneEthCanBuy() public view returns (uint _units) {\r\n        for (uint i = 0; i < rounds.length; i++) {\r\n            Round memory round = rounds[i];\r\n            if (block.timestamp >= round.start && block.timestamp < round.end) {\r\n                return round.price;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @notice Accepts payment of eth in exchange for a variable amount of tokens, depending\r\n    /// upon the conversion rate of the current sale round.\r\n    function() external payable {\r\n        uint ethInWei = msg.value;\r\n        totalEthInWei = totalEthInWei + ethInWei;\r\n        uint perEth = unitsOneEthCanBuy();\r\n        \r\n        // The following division is necessary to convert the number of decimal places in\r\n        // eth(wei=`18`) and our number of `decimal` places, since we have `unitsPerEth`:\r\n        uint256 amount = ethInWei.mul(perEth).div(10**uint(18 - decimals));\r\n\r\n        require(amount > 0);\r\n        require(balances[fundsWallet] >= amount);\r\n\r\n        //Transfer ether to fundsWallet\r\n        fundsWallet.transfer(msg.value);                               \r\n\r\n        bytes memory empty;\r\n        processTransfer(fundsWallet, msg.sender, amount, empty);\r\n    }\r\n\r\n    /// @notice Approves and then calls the receiving contract\r\n    function approveAndCall(address _spender, uint256 _value, bytes _data) external returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        // Call the receiveApproval function on the contract you want to be notified.\r\n        iApprover(_spender).receiveApproval(msg.sender, _value, address(this), _data);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Safety function so any accidentally sent ERC20 compliant tokens can be recovered.\r\n    function reclaimERC20(address _token, uint _tokens) external returns (bool _success) {\r\n        require(msg.sender == fundsWallet);\r\n        return Token(_token).transfer(msg.sender, _tokens);\r\n    }\r\n}\r\n\r\ninterface iReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) external;\r\n}\r\n\r\ninterface iApprover {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _data) external;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"_units\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"reclaimERC20\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FLOCK","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a6c822e617619370cee084755cba09a71e03d8030e53917cf01006a49ddbc102"}]}