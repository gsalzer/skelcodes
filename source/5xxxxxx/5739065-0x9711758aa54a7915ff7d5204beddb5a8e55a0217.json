{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Erc20Wallet {\r\n  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n\r\n  event Deposit(address token, address user, uint amount, uint balance);\r\n  event Withdraw(address token, address user, uint amount, uint balance);\r\n\r\n  mapping (address => uint) public totalDeposited;\r\n\r\n  function() public {\r\n    revert();\r\n  }\r\n\r\n  modifier onlyToken (address token) {\r\n    require( token != 0);\r\n    _;\r\n  }\r\n\r\n  function commonDeposit(address token, uint value) internal {\r\n    tokens[token][msg.sender] += value;\r\n    totalDeposited[token] += value;\r\n    emit Deposit(\r\n      token,\r\n      msg.sender,\r\n      value,\r\n      tokens[token][msg.sender]);\r\n  }\r\n  function commonWithdraw(address token, uint value) internal {\r\n    require (tokens[token][msg.sender] >= value);\r\n    tokens[token][msg.sender] -= value;\r\n    totalDeposited[token] -= value;\r\n    require((token != 0)?\r\n      ERC20(token).transfer(msg.sender, value):\r\n      // solium-disable-next-line security/no-call-value\r\n      msg.sender.call.value(value)()\r\n    );\r\n    emit Withdraw(\r\n      token,\r\n      msg.sender,\r\n      value,\r\n      tokens[token][msg.sender]);\r\n  }\r\n\r\n  function deposit() public payable {\r\n    commonDeposit(0, msg.value);\r\n  }\r\n  function withdraw(uint amount) public {\r\n    commonWithdraw(0, amount);\r\n  }\r\n\r\n\r\n  function depositToken(address token, uint amount) public onlyToken(token){\r\n    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n    require (ERC20(token).transferFrom(msg.sender, this, amount));\r\n    commonDeposit(token, amount);\r\n  }\r\n  function withdrawToken(address token, uint amount) public {\r\n    commonWithdraw(token, amount);\r\n  }\r\n\r\n  function balanceOf(address token, address user) public constant returns (uint) {\r\n    return tokens[token][user];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SplitERC20Payment\r\n * @dev Base contract that supports multiple payees claiming funds sent to this contract\r\n * according to the proportion they own.\r\n */\r\ncontract SplitErc20Payment is Erc20Wallet{\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint) public totalShares;\r\n  mapping (address => uint) public totalReleased;\r\n\r\n  mapping (address => mapping (address => uint)) public shares; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n  mapping (address => mapping (address => uint)) public released; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n  address[] public payees;\r\n\r\n  function withdrawToken(address, uint) public{\r\n    revert();\r\n  }\r\n  function withdraw(uint) public {\r\n    revert();\r\n  }\r\n\r\n  function computePayeeBalance (address token, address payer, uint value) internal {\r\n    if (shares[token][payer] == 0)\r\n      addPayee(token, payer, value);\r\n    else\r\n      addToPayeeBalance(token, payer, value);\r\n  }\r\n\r\n  function deposit() public payable{\r\n    super.deposit();\r\n    computePayeeBalance(0, msg.sender, msg.value);\r\n  }\r\n\r\n  function depositToken(address token, uint amount) public{\r\n     super.depositToken(token, amount);\r\n     computePayeeBalance(token, msg.sender, amount);\r\n  }\r\n\r\n  function executeClaim(address token, address payee, uint payment) internal {\r\n    require(payment != 0);\r\n    require(totalDeposited[token] >= payment);\r\n\r\n    released[token][payee] += payment;\r\n    totalReleased[token] += payment;\r\n\r\n    super.withdrawToken(token, payment);\r\n  }\r\n\r\n  function calculateMaximumPayment(address token, address payee)view internal returns(uint){\r\n    require(shares[token][payee] > 0);\r\n    uint totalReceived = totalDeposited[token] + totalReleased[token];\r\n    return (totalReceived * shares[token][payee] / totalShares[token]) - released[token][payee];\r\n  }\r\n\r\n  /**\r\n   * @dev Claim your share of the balance.\r\n   */\r\n  function claim(address token) public {\r\n    executeClaim(token, msg.sender, calculateMaximumPayment(token, msg.sender));\r\n  }\r\n\r\n  /**\r\n   * @dev Claim part of your share of the balance.\r\n   */\r\n  function partialClaim(address token, uint payment) public {\r\n    uint maximumPayment = calculateMaximumPayment(token, msg.sender);\r\n\r\n    require (payment <= maximumPayment);\r\n\r\n    executeClaim(token, msg.sender, payment);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares owned by the payee.\r\n   */\r\n  function addPayee(address token, address _payee, uint256 _shares) internal {\r\n    require(_payee != address(0));\r\n    require(_shares > 0);\r\n    require(shares[token][_payee] == 0);\r\n\r\n    payees.push(_payee);\r\n    shares[token][_payee] = _shares;\r\n    totalShares[token] += _shares;\r\n  }\r\n  /**\r\n   * @dev Add to payee balance\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares to add to the payee.\r\n   */\r\n  function addToPayeeBalance(address token, address _payee, uint256 _shares) internal {\r\n    require(_payee != address(0));\r\n    require(_shares > 0);\r\n    require(shares[token][_payee] > 0);\r\n\r\n    shares[token][_payee] += _shares;\r\n    totalShares[token] += _shares;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract InvestmentRecordList is Ownable{\r\n    event NoRecordFound(InvestmentRecord _investmentRecord);\r\n\r\n    InvestmentRecord[] internal investmentRecords;\r\n\r\n    function getInvestmentRecord (uint index) public view returns (InvestmentRecord){\r\n        return investmentRecords[index];\r\n    }\r\n    function getInvestmentRecordListLength () public view returns (uint){\r\n        return investmentRecords.length;\r\n    }\r\n\r\n    function pushRecord (InvestmentRecord _investmentRecord) onlyOwner public{\r\n        investmentRecords.push(_investmentRecord);\r\n    }\r\n\r\n    function popRecord (InvestmentRecord _investmentRecord) onlyOwner public{\r\n        uint index;\r\n        bool foundRecord;\r\n        (index, foundRecord) = getIndex(_investmentRecord);\r\n        if (! foundRecord){\r\n            emit NoRecordFound(_investmentRecord);\r\n            revert();\r\n        }\r\n        InvestmentRecord recordToDelete = investmentRecords[investmentRecords.length-1];\r\n        investmentRecords[index] = recordToDelete;\r\n        delete recordToDelete;\r\n        investmentRecords.length--;\r\n    }\r\n\r\n    function getIndex (InvestmentRecord _investmentRecord) public view returns (uint index, bool foundRecord){\r\n        foundRecord = false;\r\n        for (index = 0; index < investmentRecords.length; index++){\r\n            if (investmentRecords[index] == _investmentRecord){\r\n                foundRecord = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract InvestmentRecord {\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    uint public timeStamp;\r\n    uint public lockPeriod;\r\n    uint public value;\r\n\r\n    constructor (address _token, uint _timeStamp, uint _lockPeriod, uint _value) public{\r\n        token = _token;\r\n        timeStamp = _timeStamp;\r\n        lockPeriod = _lockPeriod;\r\n        value = _value;\r\n    }\r\n\r\n    function expiredLockPeriod () public view returns (bool){\r\n        return now >= timeStamp + lockPeriod;\r\n    }\r\n\r\n    function getValue () public view returns (uint){\r\n        return value;\r\n    }\r\n    \r\n    function getToken () public view returns (address){\r\n        return token;\r\n    }    \r\n}\r\n\r\n\r\ncontract ERC20Vault is SplitErc20Payment{\r\n  using SafeMath for uint256;\r\n  mapping (address => InvestmentRecordList) public pendingInvestments;\r\n\r\n  function withdrawToken(address, uint) public {\r\n    revert();\r\n  }\r\n\r\n  function getLockedValue (address token) public returns (uint){\r\n    InvestmentRecordList investmentRecordList = pendingInvestments[msg.sender];\r\n    if (investmentRecordList == address(0x0))\r\n      return 0;\r\n\r\n    uint lockedValue = 0;\r\n    for(uint8 i = 0; i < investmentRecordList.getInvestmentRecordListLength(); i++){\r\n      InvestmentRecord investmentRecord = investmentRecordList.getInvestmentRecord(i);\r\n      if (investmentRecord.getToken() == token){\r\n        if (investmentRecord.expiredLockPeriod()){\r\n            investmentRecordList.popRecord(investmentRecord);\r\n        }else{\r\n          uint valueToAdd = investmentRecord.getValue();\r\n          lockedValue += valueToAdd;\r\n        }\r\n      }\r\n    }\r\n    return lockedValue;\r\n  }\r\n  function claim(address token) public{\r\n    uint lockedValue = getLockedValue(token);\r\n    uint actualBalance = this.balanceOf(token, msg.sender);\r\n    require(actualBalance > lockedValue);\r\n\r\n    super.partialClaim(token, actualBalance - lockedValue);\r\n  }\r\n\r\n  function partialClaim(address token, uint payment) public{\r\n    uint lockedValue = getLockedValue(token);\r\n    uint actualBalance = this.balanceOf(token, msg.sender);\r\n    require(actualBalance - lockedValue >= payment);\r\n\r\n    super.partialClaim(token, payment);\r\n  }\r\n\r\n  function depositTokenToVault(address token, uint amount, uint lockPeriod) public{\r\n    if (pendingInvestments[msg.sender] == address(0x0)){\r\n      pendingInvestments[msg.sender] = new InvestmentRecordList();\r\n    }\r\n    super.depositToken(token, amount);\r\n    pendingInvestments[msg.sender].pushRecord(new InvestmentRecord(token, now, lockPeriod, amount));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"depositTokenToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"partialClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"ERC20Vault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://34aaf39963f301e0edd58f6025076b4f959c8abb61f1ce556451580f7973c3e9"}]}