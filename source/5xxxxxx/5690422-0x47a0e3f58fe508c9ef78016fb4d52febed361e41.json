{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\nlibrary SafeMathMod { // Partial SafeMath Library\r\n\r\n    function mul(uint256 a, uint256 b) constant internal returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) constant internal returns(uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        require((c = a - b) < a);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        require((c = a + b) > a);\r\n    }\r\n}\r\n\r\ncontract Usdcoins { //is inherently ERC20\r\n    using SafeMathMod\r\n    for uint256;\r\n\r\n    /**\r\n     * @constant name The name of the token\r\n     * @constant symbol  The symbol used to display the currency\r\n     * @constant decimals  The number of decimals used to dispay a balance\r\n     * @constant totalSupply The total number of tokens times 10^ of the number of decimals\r\n     * @constant MAX_UINT256 Magic number for unlimited allowance\r\n     * @storage balanceOf Holds the balances of all token holders\r\n     * @storage allowed Holds the allowable balance to be transferable by another address.\r\n     */\r\n\r\n    address owner;\r\n\r\n\r\n\r\n    string constant public name = \"USDC\";\r\n\r\n    string constant public symbol = \"USDC\";\r\n\r\n    uint256 constant public decimals = 18;\r\n\r\n    uint256 constant public totalSupply = 100000000e18;\r\n\r\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event TransferFrom(address indexed _spender, address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function() payable {\r\n        revert();\r\n    }\r\n\r\n    function Usdcoins() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev function that sells available tokens\r\n     */\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool success) {\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Prevents sending tokens directly to contracts. */\r\n\r\n\r\n        /* SafeMathMOd.sub will throw if there is not enough balance and if the transfer value is 0. */\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Ensures tokens are not sent to this contract */\r\n\r\n\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        /* Ensures sender has enough available allowance OR sender is balance holder allowing single transsaction send to contracts*/\r\n        require(_value <= allowance || _from == msg.sender);\r\n\r\n        /* Use SafeMathMod to add and subtract from the _to and _from addresses respectively. Prevents under/overflow and 0 transfers */\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n\r\n        /* Only reduce allowance if not MAX_UINT256 in order to save gas on unlimited allowance */\r\n        /* Balance holder does not need allowance to send from self. */\r\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     *\r\n     * @param _toAddresses Receiver addresses.\r\n     * @param _amounts Amounts of tokens that will be transferred.\r\n     */\r\n    function multiPartyTransfer(address[] _toAddresses, uint256[] _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transfer(_toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _toAddresses The addresses of the recipients (MAX 255)\r\n     * @param _amounts The amounts of tokens to be transferred\r\n     */\r\n    function multiPartyTransferFrom(address _from, address[] _toAddresses, uint256[] _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        /* Ensures address \"0x0\" is not assigned allowance. */\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }\r\n\r\n    function isNotContract(address _addr) private view returns(bool) {\r\n        uint length;\r\n        assembly {\r\n            /* retrieve the size of the code on target address, this needs assembly */\r\n            length: = extcodesize(_addr)\r\n        }\r\n        return (length == 0);\r\n    }\r\n\r\n}\r\n\r\ncontract icocontract { //is inherently ERC20\r\n    using SafeMathMod\r\n    for uint256;\r\n\r\n    uint public raisedAmount = 0;\r\n    uint256 public RATE = 400;\r\n    bool public icostart = true;\r\n    address owner;\r\n\r\n    Usdcoins public token;\r\n\r\n    function icocontract() public {\r\n\r\n        owner = msg.sender;\r\n\r\n\r\n    }\r\n\r\n    modifier whenSaleIsActive() {\r\n        // Check if icostart is true\r\n        require(icostart == true);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setToken(Usdcoins _token) onlyOwner {\r\n\r\n        token = _token;\r\n\r\n    }\r\n\r\n    function setRate(uint256 rate) onlyOwner {\r\n\r\n        RATE = rate;\r\n\r\n    }\r\n\r\n\r\n    function setIcostart(bool newicostart) onlyOwner {\r\n\r\n        icostart = newicostart;\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() payable whenSaleIsActive {\r\n\r\n        // Calculate tokens to sell\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(RATE);\r\n\r\n\r\n        // Increment raised amount\r\n        raisedAmount = raisedAmount.add(msg.value);\r\n\r\n        token.transferFrom(owner, msg.sender, tokens);\r\n\r\n\r\n        // Send money to owner\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icostart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newicostart\",\"type\":\"bool\"}],\"name\":\"setIcostart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"icocontract","CompilerVersion":"v0.4.25-nightly.2018.5.23+commit.18c651b7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2116336539680740b2651f129cf7888abb59b955aefbf1f80d4547897e60dbd"}]}