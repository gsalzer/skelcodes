{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external; \r\n     function lockTokensForFs (address F1, address F2) external;\r\n     function lockTokensForAs( address A1, address A2, address A3, address A4, address A5, address A6, address A7, address A8, address A9) external;\r\n     function lockTokensForCs(address C1,address C2, address C3) external;\r\n     function lockTokensForTeamAndReserve(address team) external;\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract DayDayCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 50000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 TOKENS_SOLD;\r\n  \r\n  uint256 minimumContributionPrivate = 10 * 10 ** 18; //10 eth is the minimum contribution in private investment phase\r\n  uint256 maximumContributionPrivate = 200 * 10 ** 18; //200 eth is the maximum contribution in private investment phase\r\n  \r\n  uint256 minimumContributionPublic = 1 * 10 ** 18; //1 eth is the minimum contribution in public investment phase\r\n  uint256 maximumContributionPublic = 10 * 10 ** 18; //10 eth is the maximum contribution in public investment phase\r\n  \r\n  uint256 maxTokensToSaleInPrivateSeedPhase1;\r\n  uint256 maxTokensToSaleInPrivateSeedPhase2;\r\n  uint256 maxTokensToSaleInSyndicagteSeed; \r\n  uint256 maxTokensToSaleInPreITOPublic;\r\n  uint256 maxTokensToSaleInITOPublicPhase1;\r\n  uint256 maxTokensToSaleInITOPublicPhase2;\r\n  uint256 maxTokensToSaleInITOPublicPhase3;\r\n  uint256 maxTokensToSale;\r\n  \r\n  uint256 bonusInPrivateSeedPhase1;\r\n  uint256 bonusInPrivateSeedPhase2;\r\n  uint256 bonusInSyndicagteSeed; \r\n  uint256 bonusInPreITOPublic;\r\n  uint256 bonusInITOPublicPhase1;\r\n  uint256 bonusInITOPublicPhase2;\r\n  uint256 bonusInITOPublicPhase3;\r\n  \r\n  bool isCrowdsalePaused = false;\r\n  \r\n  uint256 softCap;\r\n  uint256 hardCap;\r\n  \r\n  mapping(address=>uint256) amountSentByBuyers; \r\n  bool refundToBuyers = false;\r\n  uint256 totalDurationInDays = 166 days;\r\n  uint256 decimals = 2;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function DayDayCrowdsale(uint256 _startTime, address _wallet, address _tokenAddress) public \r\n  {\r\n    require(_startTime >=now);\r\n    require(_wallet != 0x0);\r\n\r\n    startTime = _startTime;  \r\n    endTime = startTime + totalDurationInDays;\r\n    require(endTime >= startTime);\r\n   \r\n    owner = _wallet;\r\n    \r\n    softCap = 3860*10**18;\r\n    hardCap = 23000*10**18;\r\n    \r\n    maxTokensToSaleInPrivateSeedPhase1 = 199500000 * 10 ** uint256(decimals);\r\n    maxTokensToSaleInPrivateSeedPhase2 = 388500000 * 10 ** uint256(decimals);\r\n    maxTokensToSaleInSyndicagteSeed = 924000000 * 10 ** uint256(decimals); \r\n    maxTokensToSaleInPreITOPublic = 1396500000 * 10 ** uint256(decimals);\r\n    maxTokensToSaleInITOPublicPhase1 = 1790250000 * 10 ** uint256(decimals);\r\n    maxTokensToSaleInITOPublicPhase2 = 2294250000 * 10 ** uint256(decimals);\r\n    maxTokensToSaleInITOPublicPhase3 = 2898000000 * 10 ** uint256(decimals);\r\n    maxTokensToSale = 3000000000 * 10 ** uint256(decimals);\r\n\r\n    bonusInPrivateSeedPhase1 = 90;\r\n    bonusInPrivateSeedPhase2 = 80;\r\n    bonusInSyndicagteSeed = 70; \r\n    bonusInPreITOPublic = 50;\r\n    bonusInITOPublicPhase1 = 25;\r\n    bonusInITOPublicPhase2 = 20;\r\n    bonusInITOPublicPhase3 = 15;\r\n    \r\n    token = TokenInterface(_tokenAddress);\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n    function determineBonus(uint tokens) internal view returns (uint256 bonus) \r\n    {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        \r\n        //private seed phase 1 (5 days)\r\n        if (timeElapsedInDays <5)\r\n        {\r\n            //bonus application of private seed phase 1\r\n            if (TOKENS_SOLD <maxTokensToSaleInPrivateSeedPhase1)\r\n            {\r\n                bonus = tokens.mul(bonusInPrivateSeedPhase1); \r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSeedPhase1);\r\n            }\r\n            \r\n            //bonus application of private seed phase 2\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase1 && TOKENS_SOLD < maxTokensToSaleInPrivateSeedPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInPrivateSeedPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSeedPhase2);\r\n            } \r\n            \r\n            //bonus application of SyndicagteSeed\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase2 && TOKENS_SOLD < maxTokensToSaleInSyndicagteSeed)\r\n            {\r\n                bonus = tokens.mul(bonusInSyndicagteSeed);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInSyndicagteSeed);\r\n            }\r\n            \r\n            //bonus application of PreITOPublic phase\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\r\n            {\r\n                bonus = tokens.mul(bonusInPreITOPublic);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 1\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase1);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 2\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 3\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        //private seed phase 2 (10 days)\r\n        else if (timeElapsedInDays >= 5 && timeElapsedInDays <16)\r\n        {\r\n            //bonus application of private seed phase 2\r\n            if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase1 && TOKENS_SOLD < maxTokensToSaleInPrivateSeedPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInPrivateSeedPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSeedPhase2);\r\n            } \r\n            \r\n            //bonus application of SyndicagteSeed\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase2 && TOKENS_SOLD < maxTokensToSaleInSyndicagteSeed)\r\n            {\r\n                bonus = tokens.mul(bonusInSyndicagteSeed);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInSyndicagteSeed);\r\n            }\r\n            \r\n            //bonus application of PreITOPublic phase\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\r\n            {\r\n                bonus = tokens.mul(bonusInPreITOPublic);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 1\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase1);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 2\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 3\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        //Syndicagte phase (19 days) \r\n        else if (timeElapsedInDays >= 16 && timeElapsedInDays<36)\r\n        {\r\n            //bonus application of SyndicagteSeed\r\n            if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase2 && TOKENS_SOLD < maxTokensToSaleInSyndicagteSeed)\r\n            {\r\n                bonus = tokens.mul(bonusInSyndicagteSeed);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInSyndicagteSeed);\r\n            }\r\n            \r\n            //bonus application of PreITOPublic phase\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\r\n            {\r\n                bonus = tokens.mul(bonusInPreITOPublic);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 1\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase1);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 2\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 3\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        // Pause before the public phases\r\n        else if (timeElapsedInDays >= 36 && timeElapsedInDays<103)\r\n        {\r\n            //67 days break\r\n            revert();  //no sale during this time, so revert this transaction\r\n        }\r\n        \r\n        // Pre-ITO public phase (5 days)\r\n        else if (timeElapsedInDays >= 103 && timeElapsedInDays<109)\r\n        {\r\n            //bonus application of PreITOPublic phase\r\n            if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\r\n            {\r\n                bonus = tokens.mul(bonusInPreITOPublic);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 1\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase1);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 2\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 3\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        // Public ITO phase 1 (15 days)\r\n        else if (timeElapsedInDays >= 109 && timeElapsedInDays<125)\r\n        {\r\n            //bonus application of ITOPublic phase 1\r\n            if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase1);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 2\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 3\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        // Public ITO phase 2 (20 days)\r\n        else if (timeElapsedInDays >= 125 && timeElapsedInDays<146)\r\n        {\r\n            //bonus application of ITOPublic phase 2\r\n            if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase2);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\r\n            }\r\n            \r\n            //bonus application of ITOPublic phase 3\r\n            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        // Public ITO phase 3 (20 days)\r\n        else if (timeElapsedInDays >= 146 && timeElapsedInDays<167)\r\n        {\r\n            //bonus application of ITOPublic phase 3\r\n            if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\r\n            {\r\n                bonus = tokens.mul(bonusInITOPublicPhase3);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\r\n            }\r\n            else \r\n            {\r\n                bonus = 0;\r\n            }\r\n        }\r\n        \r\n        else \r\n        {\r\n            bonus = 0;\r\n        }\r\n    }\r\n\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(validPurchase());\r\n    \r\n    if (isPrivateInvestmentPhase())\r\n        require(msg.value>= minimumContributionPrivate && msg.value<=maximumContributionPrivate);\r\n    else\r\n        require(msg.value>= minimumContributionPublic && msg.value<=maximumContributionPublic);\r\n    \r\n    require(TOKENS_SOLD<maxTokensToSale);\r\n   \r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint weiAmountForTokens = weiAmount.div(10**16);\r\n    uint256 tokens = weiAmountForTokens.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens);\r\n    tokens = tokens.add(bonus);\r\n    require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    token.transfer(beneficiary,tokens);\r\n    amountSentByBuyers[beneficiary] = weiAmount;\r\n    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n   /**\r\n    * function to change the end timestamp of the ico\r\n    * can only be called by owner wallet\r\n    **/\r\n    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the start timestamp of the ico\r\n    * can only be called by owner wallet\r\n    **/\r\n    \r\n    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\r\n        startTime = startTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the rate of tokens\r\n    * can only be called by owner wallet\r\n    **/\r\n    function setPriceRate(uint256 newPrice) public onlyOwner {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n    function changeMinimumContributionForPrivatePhase(uint256 minContribution) public onlyOwner{\r\n        minimumContributionPrivate = minContribution.mul(10 ** 15);\r\n    }\r\n    \r\n    function changeMinimumContributionForPublicPhase(uint256 minContribution) public onlyOwner{\r\n        minimumContributionPublic = minContribution.mul(10 ** 15);\r\n    }\r\n    \r\n     function changeMaximumContributionForPrivatePhase(uint256 minContribution) public onlyOwner{\r\n        maximumContributionPrivate = minContribution.mul(10 ** 15);\r\n    }\r\n    \r\n     function changeMaximumContributionForPublicPhase(uint256 minContribution) public onlyOwner{\r\n        maximumContributionPublic = minContribution.mul(10 ** 15);\r\n    }\r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n    /**\r\n     * function to change the soft cap of the contract \r\n     **/\r\n    function changeSoftCap(uint256 softCapEthers) public onlyOwner\r\n    {\r\n        softCap = softCapEthers.mul(10**18);\r\n    }\r\n    \r\n    /**\r\n     * function to change the hard cap of the contract \r\n     **/\r\n    function changeHardCap(uint256 hardCapEthers) public onlyOwner\r\n    {\r\n        hardCap = hardCapEthers.mul(10**18);\r\n    }\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Remaining tokens for sale\r\n     // ------------------------------------------------------------------------\r\n     function remainingTokensForSale() public constant returns (uint) {\r\n         return maxTokensToSale.sub(TOKENS_SOLD);\r\n     }\r\n    \r\n     function isPrivateInvestmentPhase() internal constant returns (bool)\r\n     {\r\n         uint timePassed = now.sub(startTime);\r\n         if (timePassed<=30 days)\r\n            return true;\r\n        return false;\r\n     }\r\n     \r\n     function burnUnsoldTokens() public onlyOwner \r\n     {\r\n         require(hasEnded());\r\n         uint value = remainingTokensForSale();\r\n         token.burn(value);\r\n         TOKENS_SOLD = maxTokensToSale;\r\n     }\r\n    \r\n     function tokensAllocatedForFs(address F1, address F2) public onlyOwner\r\n     {\r\n         token.transfer(F1,90000000 * 10 ** uint256(decimals));\r\n         token.transfer(F2,60000000 * 10 ** uint256(decimals));\r\n         token.lockTokensForFs(F1,F2);\r\n         \r\n     }\r\n     function tokensAllocatedForAs( address A1, address A2, \r\n                                    address A3, address A4,\r\n                                    address A5, address A6,\r\n                                    address A7, address A8,\r\n                                    address A9) public onlyOwner\r\n     {\r\n         token.transfer(A1,90000000 * 10 ** uint256(decimals));\r\n         token.transfer(A2,60000000 * 10 ** uint256(decimals));\r\n         token.transfer(A3,30000000 * 10 ** uint256(decimals));\r\n         token.transfer(A4,60000000 * 10 ** uint256(decimals));\r\n         token.transfer(A5,60000000 * 10 ** uint256(decimals));\r\n         token.transfer(A6,15000000 * 10 ** uint256(decimals));\r\n         token.transfer(A7,15000000 * 10 ** uint256(decimals));\r\n         token.transfer(A8,15000000 * 10 ** uint256(decimals));\r\n         token.transfer(A9,15000000 * 10 ** uint256(decimals));\r\n         token.lockTokensForAs(A1,A2,A3,A4,A5,A6,A7,A8,A9);\r\n     }\r\n     function tokensAllocatedForCs(address C1, address C2, address C3) public onlyOwner\r\n     {\r\n         token.transfer(C1,2500000 * 10 ** uint256(decimals));\r\n         token.transfer(C2,1000000 * 10 ** uint256(decimals));\r\n         token.transfer(C3,1500000 * 10 ** uint256(decimals));\r\n         token.lockTokensForCs(C1,C2,C3);\r\n     }\r\n      function tokensAllocatedForTeamAndReserve(address team) public onlyOwner\r\n     {\r\n         token.transfer(team,63000000 * 10 ** uint256(decimals));\r\n         token.lockTokensForTeamAndReserve(team);\r\n     }\r\n     \r\n     function refundToBuyersIfSoftCapNotReached() public payable onlyOwner\r\n     {\r\n         require(hasEnded());\r\n         require(weiRaised<softCap);\r\n         require(msg.value>=weiRaised);\r\n         refundToBuyers = true;\r\n     }\r\n     \r\n     function getRefund() public \r\n     {\r\n         require(refundToBuyers == true);\r\n         if (amountSentByBuyers[msg.sender] > 0)\r\n            msg.sender.transfer(amountSentByBuyers[msg.sender]);\r\n     }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hardCapEthers\",\"type\":\"uint256\"}],\"name\":\"changeHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C1\",\"type\":\"address\"},{\"name\":\"C2\",\"type\":\"address\"},{\"name\":\"C3\",\"type\":\"address\"}],\"name\":\"tokensAllocatedForCs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundToBuyersIfSoftCapNotReached\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"softCapEthers\",\"type\":\"uint256\"}],\"name\":\"changeSoftCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMinimumContributionForPrivatePhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"F1\",\"type\":\"address\"},{\"name\":\"F2\",\"type\":\"address\"}],\"name\":\"tokensAllocatedForFs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMinimumContributionForPublicPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"address\"}],\"name\":\"tokensAllocatedForTeamAndReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"A1\",\"type\":\"address\"},{\"name\":\"A2\",\"type\":\"address\"},{\"name\":\"A3\",\"type\":\"address\"},{\"name\":\"A4\",\"type\":\"address\"},{\"name\":\"A5\",\"type\":\"address\"},{\"name\":\"A6\",\"type\":\"address\"},{\"name\":\"A7\",\"type\":\"address\"},{\"name\":\"A8\",\"type\":\"address\"},{\"name\":\"A9\",\"type\":\"address\"}],\"name\":\"tokensAllocatedForAs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMaximumContributionForPrivatePhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMaximumContributionForPublicPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DayDayCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ab8e0c0000000000000000000000000e05dd64204ad48076077266bb52093a427b92f93000000000000000000000000e2dcd10f43cd9229f253e5147a793e6f64283f2b","Library":"","SwarmSource":"bzzr://7f1951f6238f0a2b1ef4653353a2322e1f1434c1e82e8ef382e72b968a08fae6"}]}