{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 supply) {}\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract Gateway is Ownable{\r\n    using SafeMath for uint;\r\n    address public feeAccount1 = 0x703f9037088A93853163aEaaEd650f3e66aD7A4e; //the account1 that will receive fees\r\n    address public feeAccount2 = 0xc94cac4a4537865753ecdf2ad48F00112dC09ea8; //the account2 that will receive fees\r\n    address public feeAccountToken = 0x2EF9B82Ab8Bb8229B3D863A47B1188672274E1aC;//the account that will receive fees tokens\r\n    \r\n    struct BuyInfo {\r\n      address buyerAddress; \r\n      address sellerAddress;\r\n      uint value;\r\n      address currency;\r\n    }\r\n    \r\n    mapping(address => mapping(uint => BuyInfo)) public payment;\r\n   \r\n    mapping(address => uint) public balances;\r\n    uint balanceFee;\r\n    uint public feePercent;\r\n    uint public maxFee;\r\n    function Gateway() public{\r\n       feePercent = 1500000; // decimals 6. 1,5% fee by default\r\n       maxFee = 3000000; // fee can not exceed 3%\r\n    }\r\n    \r\n    \r\n    function getBuyerAddressPayment(address _sellerAddress, uint _orderId) public constant returns(address){\r\n      return  payment[_sellerAddress][_orderId].buyerAddress;\r\n    }    \r\n    function getSellerAddressPayment(address _sellerAddress, uint _orderId) public constant returns(address){\r\n      return  payment[_sellerAddress][_orderId].sellerAddress;\r\n    }    \r\n    \r\n    function getValuePayment(address _sellerAddress, uint _orderId) public constant returns(uint){\r\n      return  payment[_sellerAddress][_orderId].value;\r\n    }    \r\n    \r\n    function getCurrencyPayment(address _sellerAddress, uint _orderId) public constant returns(address){\r\n      return  payment[_sellerAddress][_orderId].currency;\r\n    }\r\n    \r\n    \r\n    function setFeeAccount1(address _feeAccount1) onlyOwner public{\r\n      feeAccount1 = _feeAccount1;  \r\n    }\r\n    function setFeeAccount2(address _feeAccount2) onlyOwner public{\r\n      feeAccount2 = _feeAccount2;  \r\n    }\r\n    function setFeeAccountToken(address _feeAccountToken) onlyOwner public{\r\n      feeAccountToken = _feeAccountToken;  \r\n    }    \r\n    function setFeePercent(uint _feePercent) onlyOwner public{\r\n      require(_feePercent <= maxFee);\r\n      feePercent = _feePercent;  \r\n    }    \r\n    function payToken(address _tokenAddress, address _sellerAddress, uint _orderId,  uint _value) public returns (bool success){\r\n      require(_tokenAddress != address(0));\r\n      require(_sellerAddress != address(0)); \r\n      require(_value > 0);\r\n      Token token = Token(_tokenAddress);\r\n      require(token.allowance(msg.sender, this) >= _value);\r\n      token.transferFrom(msg.sender, feeAccountToken, _value.mul(feePercent).div(100000000));\r\n      token.transferFrom(msg.sender, _sellerAddress, _value.sub(_value.mul(feePercent).div(100000000)));\r\n      payment[_sellerAddress][_orderId] = BuyInfo(msg.sender, _sellerAddress, _value, _tokenAddress);\r\n      success = true;\r\n    }\r\n    function payEth(address _sellerAddress, uint _orderId, uint _value) public returns  (bool success){\r\n      require(_sellerAddress != address(0)); \r\n      require(_value > 0);\r\n      require(balances[msg.sender] >= _value);\r\n      uint fee = _value.mul(feePercent).div(100000000);\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      _sellerAddress.transfer(_value.sub(fee));\r\n      balanceFee = balanceFee.add(fee);\r\n      payment[_sellerAddress][_orderId] = BuyInfo(msg.sender, _sellerAddress, _value, 0x0000000000000000000000000000000000000001);    \r\n      success = true;\r\n    }\r\n    function transferFee() onlyOwner public{\r\n      uint valfee1 = balanceFee.div(2);\r\n      feeAccount1.transfer(valfee1);\r\n      balanceFee = balanceFee.sub(valfee1);\r\n      feeAccount2.transfer(balanceFee);\r\n      balanceFee = 0;\r\n    }\r\n    function balanceOfToken(address _tokenAddress, address _Address) public constant returns (uint) {\r\n      Token token = Token(_tokenAddress);\r\n      return token.balanceOf(_Address);\r\n    }\r\n    function balanceOfEthFee() public constant returns (uint) {\r\n      return balanceFee;\r\n    }\r\n    function refund() public{\r\n      require(balances[msg.sender] > 0);\r\n      uint value = balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      msg.sender.transfer(value);\r\n    }\r\n    function getBalanceEth() public constant returns(uint){\r\n      return balances[msg.sender];    \r\n    }\r\n    function() external payable {\r\n      balances[msg.sender] = balances[msg.sender].add(msg.value);    \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getSellerAddressPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getBuyerAddressPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAccountToken\",\"type\":\"address\"}],\"name\":\"setFeeAccountToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getValuePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfEthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payment\",\"outputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payEth\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getCurrencyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAccount1\",\"type\":\"address\"}],\"name\":\"setFeeAccount1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAccount2\",\"type\":\"address\"}],\"name\":\"setFeeAccount2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccountToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Gateway","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de783d384d81ed52d93eacc08826f2aa12091a263eea8df47f7d196e3dde94f7"}]}