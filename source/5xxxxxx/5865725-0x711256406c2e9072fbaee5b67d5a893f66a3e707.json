{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// Continuous backing with ELIX\r\n\r\ncontract continuousBacking\t{\r\n\r\n// For events, creator and claimee are stored in the events themselves.\r\nevent CreatedReward(uint256 index,uint256 numAvailable);\r\nevent ClaimedReward(uint256 index,uint256 totalAmount,uint256 numUnitsDesired,uint256 hostCut,uint256 creatorCut,address backer);\r\nevent ModifiedNumAvailable(uint256 index,uint256 newNumAvailable);\r\n\r\naddress public ELIX_ADDRESS;\r\nuint256 public MAX_HOST_PERCENT;\r\nuint256 public HOST_CUT;\r\nuint256 public MAX_NUM_AVAIL;\r\n\r\nstruct Reward \t{\r\n    string title;\r\n\taddress host;\r\n\taddress creator;\r\n\tuint256 numTaken;\r\n\tuint256 numAvailable;\r\n\tuint256 spmPreventionAmt;\r\n}\r\n\r\nfunction continuousBacking() {\r\n    MAX_HOST_PERCENT=100000000000000000000;\r\n    HOST_CUT=5000000000000000000;\r\n    ELIX_ADDRESS=0xc8C6A31A4A806d3710A7B38b7B296D2fABCCDBA8; \r\n    MAX_NUM_AVAIL=10000000;\r\n}\r\n\r\nReward[] public rewards;\r\n\r\nfunction defineReward(string title,address creator,uint256 numAvailable,uint256 minBacking) public\t{\r\n    address host=msg.sender;\r\n    if (numAvailable>MAX_NUM_AVAIL) revert();\r\n\tReward memory newReward=Reward(title,host,creator,0,numAvailable,minBacking);\r\n\trewards.push(newReward);\r\n\temit CreatedReward(rewards.length-1,numAvailable);\r\n}\r\n\r\nfunction backAtIndex(uint256 index,uint256 totalAmount,uint256 numUnitsDesired) public\t{\r\n        if (msg.sender==rewards[index].host || msg.sender==rewards[index].creator) revert();\r\n        if (totalAmount<rewards[index].spmPreventionAmt) revert();\r\n        if (totalAmount==0) revert();\r\n        if (rewards[index].numTaken==rewards[index].numAvailable) revert();\r\n        rewards[index].numTaken+=1;\r\n        uint256 hostCut;\r\n\t    uint256 creatorCut;\r\n        (hostCut, creatorCut) = returnHostAndCreatorCut(totalAmount);\r\n        \r\n        if (!token(ELIX_ADDRESS).transferFrom(msg.sender,rewards[index].host,hostCut)) revert(); \r\n        if (!token(ELIX_ADDRESS).transferFrom(msg.sender,rewards[index].creator,creatorCut)) revert(); \r\n        \r\n        emit ClaimedReward(index,totalAmount,numUnitsDesired,hostCut,creatorCut,msg.sender);\r\n}\r\n\r\nfunction reviseNumAvailable(uint256 index,uint256 newNumAvailable) public\t{\r\n\tif (newNumAvailable>MAX_NUM_AVAIL) revert();\r\n\tif (newNumAvailable<rewards[index].numTaken) revert();\r\n\tif (msg.sender==rewards[index].creator || msg.sender==rewards[index].host)\t{\r\n\t\trewards[index].numAvailable=newNumAvailable;\r\n\t\temit ModifiedNumAvailable(index,newNumAvailable);\r\n\t}\r\n}\r\n\r\nfunction returnHostAndCreatorCut(uint256 totalAmount) private returns(uint256, uint256)\t{\r\n\tuint256 hostCut = SafeMath.div( SafeMath.mul(totalAmount, HOST_CUT), MAX_HOST_PERCENT);\r\n\tuint256 creatorCut = SafeMath.sub(totalAmount, hostCut );\r\n\treturn ( hostCut, creatorCut );\r\n}\r\n\r\n}\r\n\r\ncontract token\t{\r\n\tfunction transferFrom(address _from,address _to,uint256 _amount) returns (bool success);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"numUnitsDesired\",\"type\":\"uint256\"}],\"name\":\"backAtIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOST_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_NUM_AVAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"numAvailable\",\"type\":\"uint256\"},{\"name\":\"minBacking\",\"type\":\"uint256\"}],\"name\":\"defineReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOST_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"newNumAvailable\",\"type\":\"uint256\"}],\"name\":\"reviseNumAvailable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"address\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"numTaken\",\"type\":\"uint256\"},{\"name\":\"numAvailable\",\"type\":\"uint256\"},{\"name\":\"spmPreventionAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ELIX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numAvailable\",\"type\":\"uint256\"}],\"name\":\"CreatedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numUnitsDesired\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hostCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creatorCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newNumAvailable\",\"type\":\"uint256\"}],\"name\":\"ModifiedNumAvailable\",\"type\":\"event\"}]","ContractName":"continuousBacking","CompilerVersion":"v0.4.25-nightly.2018.6.27+commit.b67dfa15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6bb9b994e306c1495d6643b7f400cd0f01bf69cadb21821f1506be8daf247730"}]}