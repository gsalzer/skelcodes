{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization\r\n* control functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\naddress public owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n* @dev The Ownable constructor sets the original `owner` of the contract to the\r\n* sender account.\r\n*/\r\nfunction Ownable() public {\r\nowner = msg.sender;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n* @param newOwner The address to transfer ownership to.\r\n*/\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nrequire(newOwner != address(0));\r\nOwnershipTransferred(owner, newOwner);\r\nowner = newOwner;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title ERC223\r\n* @dev ERC223 contract interface with ERC20 functions and events\r\n* Fully backward compatible with ERC20\r\n* Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\r\n*/\r\ncontract ERC223 {\r\nuint public totalSupply;\r\n\r\n// ERC223 and ERC20 functions and events\r\nfunction balanceOf(address who) public view returns (uint);\r\nfunction totalSupply() public view returns (uint256 _supply);\r\nfunction transfer(address to, uint value) public returns (bool ok);\r\nfunction transfer(address to, uint value, bytes data) public returns (bool ok);\r\nfunction transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\r\nevent Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n\r\n// ERC223 functions\r\nfunction name() public view returns (string _name);\r\nfunction symbol() public view returns (string _symbol);\r\nfunction decimals() public view returns (uint8 _decimals);\r\n\r\n// ERC20 functions and events\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\nfunction approve(address _spender, uint256 _value) public returns (bool success);\r\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/**\r\n* @title ContractReceiver\r\n* @dev Contract that is working with ERC223 tokens\r\n*/\r\ncontract ContractReceiver {\r\n\r\nstruct TKN {\r\naddress sender;\r\nuint value;\r\nbytes data;\r\nbytes4 sig;\r\n}\r\n\r\nfunction tokenFallback(address _from, uint _value, bytes _data) public pure {\r\nTKN memory tkn;\r\ntkn.sender = _from;\r\ntkn.value = _value;\r\ntkn.data = _data;\r\nuint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\ntkn.sig = bytes4(u);\r\n\r\n/**\r\n* tkn variable is analogue of msg variable of Ether transaction\r\n* tkn.sender is person who initiated this token transaction (analogue of msg.sender)\r\n* tkn.value the number of tokens that were sent (analogue of msg.value)\r\n* tkn.data is data of token transaction (analogue of msg.data)\r\n* tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\r\n*/\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title COMETUBU\r\n* @author COMETUBU\r\n* @dev COMETUBU is an ERC223 Token with ERC20 functions and events\r\n* Fully backward compatible with ERC20\r\n*/\r\ncontract COMETUBU is ERC223, Ownable {\r\nusing SafeMath for uint256;\r\n\r\nstring public name = \"COMETUBU\";\r\nstring public symbol = \"TUBU\";\r\nuint8 public decimals = 0;\r\nuint256 public totalSupply = 88e8 * 1e0;\r\nuint256 public distributeAmount = 0;\r\nbool public mintingFinished = false;\r\n\r\nmapping(address => uint256) public balanceOf;\r\nmapping(address => mapping (address => uint256)) public allowance;\r\nmapping (address => bool) public frozenAccount;\r\nmapping (address => uint256) public unlockUnixTime;\r\n\r\nevent FrozenFunds(address indexed target, bool frozen);\r\nevent LockedFunds(address indexed target, uint256 locked);\r\nevent Burn(address indexed from, uint256 amount);\r\nevent Mint(address indexed to, uint256 amount);\r\nevent MintFinished();\r\n\r\n/** \r\n* @dev Constructor is called only once and can not be called again\r\n*/\r\nfunction COMETUBU() public {\r\nbalanceOf[msg.sender] = totalSupply;\r\n}\r\n\r\nfunction name() public view returns (string _name) {\r\nreturn name;\r\n}\r\n\r\nfunction symbol() public view returns (string _symbol) {\r\nreturn symbol;\r\n}\r\n\r\nfunction decimals() public view returns (uint8 _decimals) {\r\nreturn decimals;\r\n}\r\n\r\nfunction totalSupply() public view returns (uint256 _totalSupply) {\r\nreturn totalSupply;\r\n}\r\n\r\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\nreturn balanceOf[_owner];\r\n}\r\n\r\n/**\r\n* @dev Prevent targets from sending or receiving tokens\r\n* @param targets Addresses to be frozen\r\n* @param isFrozen either to freeze it or not\r\n*/\r\nfunction freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\nrequire(targets.length > 0);\r\n\r\nfor (uint j = 0; j < targets.length; j++) {\r\nrequire(targets[j] != 0x0);\r\nfrozenAccount[targets[j]] = isFrozen;\r\nFrozenFunds(targets[j], isFrozen);\r\n}\r\n}\r\n\r\n/**\r\n* @dev Prevent targets from sending or receiving tokens by setting Unix times\r\n* @param targets Addresses to be locked funds\r\n* @param unixTimes Unix times when locking up will be finished\r\n*/\r\nfunction lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\nrequire(targets.length > 0\r\n&& targets.length == unixTimes.length);\r\n\r\nfor(uint j = 0; j < targets.length; j++){\r\nrequire(unlockUnixTime[targets[j]] < unixTimes[j]);\r\nunlockUnixTime[targets[j]] = unixTimes[j];\r\nLockedFunds(targets[j], unixTimes[j]);\r\n}\r\n}\r\n\r\n/**\r\n* @dev Function that is called when a user or another contract wants to transfer funds\r\n*/\r\nfunction transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\nrequire(_value > 0\r\n&& frozenAccount[msg.sender] == false\r\n&& frozenAccount[_to] == false\r\n&& now > unlockUnixTime[msg.sender]\r\n&& now > unlockUnixTime[_to]);\r\n\r\nif (isContract(_to)) {\r\nrequire(balanceOf[msg.sender] >= _value);\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\nbalanceOf[_to] = balanceOf[_to].add(_value);\r\nassert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\nTransfer(msg.sender, _to, _value, _data);\r\nTransfer(msg.sender, _to, _value);\r\nreturn true;\r\n} else {\r\nreturn transferToAddress(_to, _value, _data);\r\n}\r\n}\r\n\r\nfunction transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\nrequire(_value > 0\r\n&& frozenAccount[msg.sender] == false\r\n&& frozenAccount[_to] == false\r\n&& now > unlockUnixTime[msg.sender]\r\n&& now > unlockUnixTime[_to]);\r\n\r\nif (isContract(_to)) {\r\nreturn transferToContract(_to, _value, _data);\r\n} else {\r\nreturn transferToAddress(_to, _value, _data);\r\n}\r\n}\r\n\r\n/**\r\n* @dev Standard function transfer similar to ERC20 transfer with no _data\r\n* Added due to backwards compatibility reasons\r\n*/\r\nfunction transfer(address _to, uint _value) public returns (bool success) {\r\nrequire(_value > 0\r\n&& frozenAccount[msg.sender] == false\r\n&& frozenAccount[_to] == false\r\n&& now > unlockUnixTime[msg.sender]\r\n&& now > unlockUnixTime[_to]);\r\n\r\nbytes memory empty;\r\nif (isContract(_to)) {\r\nreturn transferToContract(_to, _value, empty);\r\n} else {\r\nreturn transferToAddress(_to, _value, empty);\r\n}\r\n}\r\n\r\n// assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\nfunction isContract(address _addr) private view returns (bool is_contract) {\r\nuint length;\r\nassembly {\r\n//retrieve the size of the code on target address, this needs assembly\r\nlength := extcodesize(_addr)\r\n}\r\nreturn (length > 0);\r\n}\r\n\r\n// function that is called when transaction target is an address\r\nfunction transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value);\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\nbalanceOf[_to] = balanceOf[_to].add(_value);\r\nTransfer(msg.sender, _to, _value, _data);\r\nTransfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n// function that is called when transaction target is a contract\r\nfunction transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value);\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\nbalanceOf[_to] = balanceOf[_to].add(_value);\r\nContractReceiver receiver = ContractReceiver(_to);\r\nreceiver.tokenFallback(msg.sender, _value, _data);\r\nTransfer(msg.sender, _to, _value, _data);\r\nTransfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* Added due to backwards compatibility with ERC20\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\nrequire(_to != address(0)\r\n&& _value > 0\r\n&& balanceOf[_from] >= _value\r\n&& allowance[_from][msg.sender] >= _value\r\n&& frozenAccount[_from] == false\r\n&& frozenAccount[_to] == false\r\n&& now > unlockUnixTime[_from]\r\n&& now > unlockUnixTime[_to]);\r\n\r\nbalanceOf[_from] = balanceOf[_from].sub(_value);\r\nbalanceOf[_to] = balanceOf[_to].add(_value);\r\nallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\nTransfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Allows _spender to spend no more than _value tokens in your behalf\r\n* Added due to backwards compatibility with ERC20\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\nallowance[msg.sender][_spender] = _value;\r\nApproval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender\r\n* Added due to backwards compatibility with ERC20\r\n* @param _owner address The address which owns the funds\r\n* @param _spender address The address which will spend the funds\r\n*/\r\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\nreturn allowance[_owner][_spender];\r\n}\r\n\r\n/**\r\n* @dev Burns a specific amount of tokens.\r\n* @param _from The address that will burn the tokens.\r\n* @param _unitAmount The amount of token to be burned.\r\n*/\r\nfunction burn(address _from, uint256 _unitAmount) onlyOwner public {\r\nrequire(_unitAmount > 0\r\n&& balanceOf[_from] >= _unitAmount);\r\n\r\nbalanceOf[_from] = balanceOf[_from].sub(_unitAmount);\r\ntotalSupply = totalSupply.sub(_unitAmount);\r\nBurn(_from, _unitAmount);\r\n}\r\n\r\nmodifier canMint() {\r\nrequire(!mintingFinished);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Function to mint tokens\r\n* @param _to The address that will receive the minted tokens.\r\n* @param _unitAmount The amount of tokens to mint.\r\n*/\r\nfunction mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\r\nrequire(_unitAmount > 0);\r\n\r\ntotalSupply = totalSupply.add(_unitAmount);\r\nbalanceOf[_to] = balanceOf[_to].add(_unitAmount);\r\nMint(_to, _unitAmount);\r\nTransfer(address(0), _to, _unitAmount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to stop minting new tokens.\r\n*/\r\nfunction finishMinting() onlyOwner canMint public returns (bool) {\r\nmintingFinished = true;\r\nMintFinished();\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to distribute tokens to the list of addresses by the provided amount\r\n*/\r\nfunction distributeAirdrop(address[] addresses, uint256 amount) public returns (bool) {\r\nrequire(amount > 0 \r\n&& addresses.length > 0\r\n&& frozenAccount[msg.sender] == false\r\n&& now > unlockUnixTime[msg.sender]);\r\n\r\namount = amount.mul(1e0);\r\nuint256 totalAmount = amount.mul(addresses.length);\r\nrequire(balanceOf[msg.sender] >= totalAmount);\r\n\r\nfor (uint j = 0; j < addresses.length; j++) {\r\nrequire(addresses[j] != 0x0\r\n&& frozenAccount[addresses[j]] == false\r\n&& now > unlockUnixTime[addresses[j]]);\r\n\r\nbalanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\r\nTransfer(msg.sender, addresses[j], amount);\r\n}\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\nreturn true;\r\n}\r\n\r\nfunction distributeAirdrop(address[] addresses, uint[] amounts) public returns (bool) {\r\nrequire(addresses.length > 0\r\n&& addresses.length == amounts.length\r\n&& frozenAccount[msg.sender] == false\r\n&& now > unlockUnixTime[msg.sender]);\r\n\r\nuint256 totalAmount = 0;\r\n\r\nfor(uint j = 0; j < addresses.length; j++){\r\nrequire(amounts[j] > 0\r\n&& addresses[j] != 0x0\r\n&& frozenAccount[addresses[j]] == false\r\n&& now > unlockUnixTime[addresses[j]]);\r\n\r\namounts[j] = amounts[j].mul(1e0);\r\ntotalAmount = totalAmount.add(amounts[j]);\r\n}\r\nrequire(balanceOf[msg.sender] >= totalAmount);\r\n\r\nfor (j = 0; j < addresses.length; j++) {\r\nbalanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\r\nTransfer(msg.sender, addresses[j], amounts[j]);\r\n}\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to collect tokens from the list of addresses\r\n*/\r\nfunction collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\r\nrequire(addresses.length > 0\r\n&& addresses.length == amounts.length);\r\n\r\nuint256 totalAmount = 0;\r\n\r\nfor (uint j = 0; j < addresses.length; j++) {\r\nrequire(amounts[j] > 0\r\n&& addresses[j] != 0x0\r\n&& frozenAccount[addresses[j]] == false\r\n&& now > unlockUnixTime[addresses[j]]);\r\n\r\namounts[j] = amounts[j].mul(1e0);\r\nrequire(balanceOf[addresses[j]] >= amounts[j]);\r\nbalanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j]);\r\ntotalAmount = totalAmount.add(amounts[j]);\r\nTransfer(addresses[j], msg.sender, amounts[j]);\r\n}\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\r\nreturn true;\r\n}\r\n\r\nfunction setDistributeAmount(uint256 _unitAmount) onlyOwner public {\r\ndistributeAmount = _unitAmount;\r\n}\r\n\r\n/**\r\n* @dev Function to distribute tokens to the msg.sender automatically\r\n* If distributeAmount is 0, this function doesn't work\r\n*/\r\nfunction autoDistribute() payable public {\r\nrequire(distributeAmount > 0\r\n&& balanceOf[owner] >= distributeAmount\r\n&& frozenAccount[msg.sender] == false\r\n&& now > unlockUnixTime[msg.sender]);\r\nif(msg.value > 0) owner.transfer(msg.value);\r\n\r\nbalanceOf[owner] = balanceOf[owner].sub(distributeAmount);\r\nbalanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);\r\nTransfer(owner, msg.sender, distributeAmount);\r\n}\r\n\r\n/**\r\n* @dev fallback function\r\n*/\r\nfunction() payable public {\r\nautoDistribute();\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoDistribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"setDistributeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"COMETUBU","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1e8e8f0c80b4dcd5005bf694d973c0cd67b8af57c060d6c0aaceef6dc4e508c2"}]}