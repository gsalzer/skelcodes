{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary BPackedUtils {\r\n\r\n    // the uint16 ending at 128 bits should be 0s\r\n    uint256 constant sbMask        = 0xffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff;\r\n    uint256 constant startTimeMask = 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff;\r\n    uint256 constant endTimeMask   = 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000;\r\n\r\n    function packedToSubmissionBits(uint256 packed) internal pure returns (uint16) {\r\n        return uint16(packed >> 128);\r\n    }\r\n\r\n    function packedToStartTime(uint256 packed) internal pure returns (uint64) {\r\n        return uint64(packed >> 64);\r\n    }\r\n\r\n    function packedToEndTime(uint256 packed) internal pure returns (uint64) {\r\n        return uint64(packed);\r\n    }\r\n\r\n    function unpackAll(uint256 packed) internal pure returns (uint16 submissionBits, uint64 startTime, uint64 endTime) {\r\n        submissionBits = uint16(packed >> 128);\r\n        startTime = uint64(packed >> 64);\r\n        endTime = uint64(packed);\r\n    }\r\n\r\n    function pack(uint16 sb, uint64 st, uint64 et) internal pure returns (uint256 packed) {\r\n        return uint256(sb) << 128 | uint256(st) << 64 | uint256(et);\r\n    }\r\n\r\n    function setSB(uint256 packed, uint16 newSB) internal pure returns (uint256) {\r\n        return (packed & sbMask) | uint256(newSB) << 128;\r\n    }\r\n\r\n    // function setStartTime(uint256 packed, uint64 startTime) internal pure returns (uint256) {\r\n    //     return (packed & startTimeMask) | uint256(startTime) << 64;\r\n    // }\r\n\r\n    // function setEndTime(uint256 packed, uint64 endTime) internal pure returns (uint256) {\r\n    //     return (packed & endTimeMask) | uint256(endTime);\r\n    // }\r\n}\r\n\r\ncontract safeSend {\r\n    bool private txMutex3847834;\r\n\r\n    // we want to be able to call outside contracts (e.g. the admin proxy contract)\r\n    // but reentrency is bad, so here's a mutex.\r\n    function doSafeSend(address toAddr, uint amount) internal {\r\n        doSafeSendWData(toAddr, \"\", amount);\r\n    }\r\n\r\n    function doSafeSendWData(address toAddr, bytes data, uint amount) internal {\r\n        require(txMutex3847834 == false, \"ss-guard\");\r\n        txMutex3847834 = true;\r\n        // we need to use address.call.value(v)() because we want\r\n        // to be able to send to other contracts, even with no data,\r\n        // which might use more than 2300 gas in their fallback function.\r\n        require(toAddr.call.value(amount)(data), \"ss-failed\");\r\n        txMutex3847834 = false;\r\n    }\r\n}\r\n\r\ncontract payoutAllC is safeSend {\r\n    address private _payTo;\r\n\r\n    event PayoutAll(address payTo, uint value);\r\n\r\n    constructor(address initPayTo) public {\r\n        // DEV NOTE: you can overwrite _getPayTo if you want to reuse other storage vars\r\n        assert(initPayTo != address(0));\r\n        _payTo = initPayTo;\r\n    }\r\n\r\n    function _getPayTo() internal view returns (address) {\r\n        return _payTo;\r\n    }\r\n\r\n    function _setPayTo(address newPayTo) internal {\r\n        _payTo = newPayTo;\r\n    }\r\n\r\n    function payoutAll() external {\r\n        address a = _getPayTo();\r\n        uint bal = address(this).balance;\r\n        doSafeSend(a, bal);\r\n        emit PayoutAll(a, bal);\r\n    }\r\n}\r\n\r\ncontract payoutAllCSettable is payoutAllC {\r\n    constructor (address initPayTo) payoutAllC(initPayTo) public {\r\n    }\r\n\r\n    function setPayTo(address) external;\r\n    function getPayTo() external view returns (address) {\r\n        return _getPayTo();\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address newOwner);\r\n\r\n    modifier only_owner() {\r\n        require(msg.sender == owner, \"only_owner: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier owner_or(address addr) {\r\n        require(msg.sender == addr || msg.sender == owner, \"!owner-or\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address newOwner) only_owner() external {\r\n        owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n}\r\n\r\ncontract controlledIface {\r\n    function controller() external view returns (address);\r\n}\r\n\r\ncontract hasAdmins is owned {\r\n    mapping (uint => mapping (address => bool)) admins;\r\n    uint public currAdminEpoch = 0;\r\n    bool public adminsDisabledForever = false;\r\n    address[] adminLog;\r\n\r\n    event AdminAdded(address indexed newAdmin);\r\n    event AdminRemoved(address indexed oldAdmin);\r\n    event AdminEpochInc();\r\n    event AdminDisabledForever();\r\n\r\n    modifier only_admin() {\r\n        require(adminsDisabledForever == false, \"admins must not be disabled\");\r\n        require(isAdmin(msg.sender), \"only_admin: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _setAdmin(msg.sender, true);\r\n    }\r\n\r\n    function isAdmin(address a) view public returns (bool) {\r\n        return admins[currAdminEpoch][a];\r\n    }\r\n\r\n    function getAdminLogN() view external returns (uint) {\r\n        return adminLog.length;\r\n    }\r\n\r\n    function getAdminLog(uint n) view external returns (address) {\r\n        return adminLog[n];\r\n    }\r\n\r\n    function upgradeMeAdmin(address newAdmin) only_admin() external {\r\n        // note: already checked msg.sender has admin with `only_admin` modifier\r\n        require(msg.sender != owner, \"owner cannot upgrade self\");\r\n        _setAdmin(msg.sender, false);\r\n        _setAdmin(newAdmin, true);\r\n    }\r\n\r\n    function setAdmin(address a, bool _givePerms) only_admin() external {\r\n        require(a != msg.sender && a != owner, \"cannot change your own (or owner's) permissions\");\r\n        _setAdmin(a, _givePerms);\r\n    }\r\n\r\n    function _setAdmin(address a, bool _givePerms) internal {\r\n        admins[currAdminEpoch][a] = _givePerms;\r\n        if (_givePerms) {\r\n            emit AdminAdded(a);\r\n            adminLog.push(a);\r\n        } else {\r\n            emit AdminRemoved(a);\r\n        }\r\n    }\r\n\r\n    // safety feature if admins go bad or something\r\n    function incAdminEpoch() only_owner() external {\r\n        currAdminEpoch++;\r\n        admins[currAdminEpoch][msg.sender] = true;\r\n        emit AdminEpochInc();\r\n    }\r\n\r\n    // this is internal so contracts can all it, but not exposed anywhere in this\r\n    // contract.\r\n    function disableAdminForever() internal {\r\n        currAdminEpoch++;\r\n        adminsDisabledForever = true;\r\n        emit AdminDisabledForever();\r\n    }\r\n}\r\n\r\ncontract permissioned is owned, hasAdmins {\r\n    mapping (address => bool) editAllowed;\r\n    bool public adminLockdown = false;\r\n\r\n    event PermissionError(address editAddr);\r\n    event PermissionGranted(address editAddr);\r\n    event PermissionRevoked(address editAddr);\r\n    event PermissionsUpgraded(address oldSC, address newSC);\r\n    event SelfUpgrade(address oldSC, address newSC);\r\n    event AdminLockdown();\r\n\r\n    modifier only_editors() {\r\n        require(editAllowed[msg.sender], \"only_editors: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier no_lockdown() {\r\n        require(adminLockdown == false, \"no_lockdown: check failed\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() owned() hasAdmins() public {\r\n    }\r\n\r\n\r\n    function setPermissions(address e, bool _editPerms) no_lockdown() only_admin() external {\r\n        editAllowed[e] = _editPerms;\r\n        if (_editPerms)\r\n            emit PermissionGranted(e);\r\n        else\r\n            emit PermissionRevoked(e);\r\n    }\r\n\r\n    function upgradePermissionedSC(address oldSC, address newSC) no_lockdown() only_admin() external {\r\n        editAllowed[oldSC] = false;\r\n        editAllowed[newSC] = true;\r\n        emit PermissionsUpgraded(oldSC, newSC);\r\n    }\r\n\r\n    // always allow SCs to upgrade themselves, even after lockdown\r\n    function upgradeMe(address newSC) only_editors() external {\r\n        editAllowed[msg.sender] = false;\r\n        editAllowed[newSC] = true;\r\n        emit SelfUpgrade(msg.sender, newSC);\r\n    }\r\n\r\n    function hasPermissions(address a) public view returns (bool) {\r\n        return editAllowed[a];\r\n    }\r\n\r\n    function doLockdown() external only_owner() no_lockdown() {\r\n        disableAdminForever();\r\n        adminLockdown = true;\r\n        emit AdminLockdown();\r\n    }\r\n}\r\n\r\ncontract upgradePtr {\r\n    address ptr = address(0);\r\n\r\n    modifier not_upgraded() {\r\n        require(ptr == address(0), \"upgrade pointer is non-zero\");\r\n        _;\r\n    }\r\n\r\n    function getUpgradePointer() view external returns (address) {\r\n        return ptr;\r\n    }\r\n\r\n    function doUpgradeInternal(address nextSC) internal {\r\n        ptr = nextSC;\r\n    }\r\n}\r\n\r\ninterface ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() constant external returns (uint256 _totalSupply);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ixBackendEvents {\r\n    event NewDemoc(bytes32 democHash);\r\n    event ManuallyAddedDemoc(bytes32 democHash, address erc20);\r\n    event NewBallot(bytes32 indexed democHash, uint ballotN);\r\n    event DemocOwnerSet(bytes32 indexed democHash, address owner);\r\n    event DemocEditorSet(bytes32 indexed democHash, address editor, bool canEdit);\r\n    event DemocEditorsWiped(bytes32 indexed democHash);\r\n    event DemocErc20Set(bytes32 indexed democHash, address erc20);\r\n    event DemocDataSet(bytes32 indexed democHash, bytes32 keyHash);\r\n    event DemocCatAdded(bytes32 indexed democHash, uint catId);\r\n    event DemocCatDeprecated(bytes32 indexed democHash, uint catId);\r\n    event DemocCommunityBallotsEnabled(bytes32 indexed democHash, bool enabled);\r\n    event DemocErc20OwnerClaimDisabled(bytes32 indexed democHash);\r\n    event DemocClaimed(bytes32 indexed democHash);\r\n    event EmergencyDemocOwner(bytes32 indexed democHash, address newOwner);\r\n}\r\n\r\ninterface hasVersion {\r\n    function getVersion() external pure returns (uint);\r\n}\r\n\r\ncontract IxBackendIface is hasVersion, ixBackendEvents, permissioned, payoutAllC {\r\n    /* global getters */\r\n    function getGDemocsN() external view returns (uint);\r\n    function getGDemoc(uint id) external view returns (bytes32);\r\n    function getGErc20ToDemocs(address erc20) external view returns (bytes32[] democHashes);\r\n\r\n    /* owner functions */\r\n    function dAdd(bytes32 democHash, address erc20, bool disableErc20OwnerClaim) external;\r\n    function emergencySetDOwner(bytes32 democHash, address newOwner) external;\r\n\r\n    /* democ admin */\r\n    function dInit(address defaultErc20, address initOwner, bool disableErc20OwnerClaim) external returns (bytes32 democHash);\r\n    function setDOwner(bytes32 democHash, address newOwner) external;\r\n    function setDOwnerFromClaim(bytes32 democHash, address newOwner) external;\r\n    function setDEditor(bytes32 democHash, address editor, bool canEdit) external;\r\n    function setDNoEditors(bytes32 democHash) external;\r\n    function setDErc20(bytes32 democHash, address newErc20) external;\r\n    function dSetArbitraryData(bytes32 democHash, bytes key, bytes value) external;\r\n    function dSetEditorArbitraryData(bytes32 democHash, bytes key, bytes value) external;\r\n    function dAddCategory(bytes32 democHash, bytes32 categoryName, bool hasParent, uint parent) external;\r\n    function dDeprecateCategory(bytes32 democHash, uint catId) external;\r\n    function dSetCommunityBallotsEnabled(bytes32 democHash, bool enabled) external;\r\n    function dDisableErc20OwnerClaim(bytes32 democHash) external;\r\n\r\n    /* actually add a ballot */\r\n    function dAddBallot(bytes32 democHash, uint ballotId, uint256 packed, bool countTowardsLimit) external;\r\n\r\n    /* global democ getters */\r\n    function getDOwner(bytes32 democHash) external view returns (address);\r\n    function isDEditor(bytes32 democHash, address editor) external view returns (bool);\r\n    function getDHash(bytes13 prefix) external view returns (bytes32);\r\n    function getDInfo(bytes32 democHash) external view returns (address erc20, address owner, uint256 nBallots);\r\n    function getDErc20(bytes32 democHash) external view returns (address);\r\n    function getDArbitraryData(bytes32 democHash, bytes key) external view returns (bytes value);\r\n    function getDEditorArbitraryData(bytes32 democHash, bytes key) external view returns (bytes value);\r\n    function getDBallotsN(bytes32 democHash) external view returns (uint256);\r\n    function getDBallotID(bytes32 democHash, uint n) external view returns (uint ballotId);\r\n    function getDCountedBasicBallotsN(bytes32 democHash) external view returns (uint256);\r\n    function getDCountedBasicBallotID(bytes32 democHash, uint256 n) external view returns (uint256);\r\n    function getDCategoriesN(bytes32 democHash) external view returns (uint);\r\n    function getDCategory(bytes32 democHash, uint catId) external view returns (bool deprecated, bytes32 name, bool hasParent, uint parent);\r\n    function getDCommBallotsEnabled(bytes32 democHash) external view returns (bool);\r\n    function getDErc20OwnerClaimEnabled(bytes32 democHash) external view returns (bool);\r\n}\r\n\r\ncontract SVIndexBackend is IxBackendIface {\r\n    uint constant VERSION = 2;\r\n\r\n    struct Democ {\r\n        address erc20;\r\n        address owner;\r\n        bool communityBallotsDisabled;\r\n        bool erc20OwnerClaimDisabled;\r\n        uint editorEpoch;\r\n        mapping (uint => mapping (address => bool)) editors;\r\n        uint256[] allBallots;\r\n        uint256[] includedBasicBallots;  // the IDs of official ballots\r\n\r\n    }\r\n\r\n    struct BallotRef {\r\n        bytes32 democHash;\r\n        uint ballotId;\r\n    }\r\n\r\n    struct Category {\r\n        bool deprecated;\r\n        bytes32 name;\r\n        bool hasParent;\r\n        uint parent;\r\n    }\r\n\r\n    struct CategoriesIx {\r\n        uint nCategories;\r\n        mapping(uint => Category) categories;\r\n    }\r\n\r\n    mapping (bytes32 => Democ) democs;\r\n    mapping (bytes32 => CategoriesIx) democCategories;\r\n    mapping (bytes13 => bytes32) democPrefixToHash;\r\n    mapping (address => bytes32[]) erc20ToDemocs;\r\n    bytes32[] democList;\r\n\r\n    // allows democ admins to store arbitrary data\r\n    // this lets us (for example) set particular keys to signal cerain\r\n    // things to client apps s.t. the admin can turn them on and off.\r\n    // arbitraryData[democHash][key]\r\n    mapping (bytes32 => mapping (bytes32 => bytes)) arbitraryData;\r\n\r\n    /* constructor */\r\n\r\n    constructor() payoutAllC(msg.sender) public {\r\n        // do nothing\r\n    }\r\n\r\n    /* base contract overloads */\r\n\r\n    function _getPayTo() internal view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getVersion() external pure returns (uint) {\r\n        return VERSION;\r\n    }\r\n\r\n    /* GLOBAL INFO */\r\n\r\n    function getGDemocsN() external view returns (uint) {\r\n        return democList.length;\r\n    }\r\n\r\n    function getGDemoc(uint id) external view returns (bytes32) {\r\n        return democList[id];\r\n    }\r\n\r\n    function getGErc20ToDemocs(address erc20) external view returns (bytes32[] democHashes) {\r\n        return erc20ToDemocs[erc20];\r\n    }\r\n\r\n    /* DEMOCRACY ADMIN FUNCTIONS */\r\n\r\n    function _addDemoc(bytes32 democHash, address erc20, address initOwner, bool disableErc20OwnerClaim) internal {\r\n        democList.push(democHash);\r\n        Democ storage d = democs[democHash];\r\n        d.erc20 = erc20;\r\n        if (disableErc20OwnerClaim) {\r\n            d.erc20OwnerClaimDisabled = true;\r\n        }\r\n        // this should never trigger if we have a good security model - entropy for 13 bytes ~ 2^(8*13) ~ 10^31\r\n        assert(democPrefixToHash[bytes13(democHash)] == bytes32(0));\r\n        democPrefixToHash[bytes13(democHash)] = democHash;\r\n        erc20ToDemocs[erc20].push(democHash);\r\n        _setDOwner(democHash, initOwner);\r\n        emit NewDemoc(democHash);\r\n    }\r\n\r\n    /* owner democ admin functions */\r\n\r\n    function dAdd(bytes32 democHash, address erc20, bool disableErc20OwnerClaim) only_owner() external {\r\n        _addDemoc(democHash, erc20, msg.sender, disableErc20OwnerClaim);\r\n        emit ManuallyAddedDemoc(democHash, erc20);\r\n    }\r\n\r\n    /* Preferably for emergencies only */\r\n\r\n    function emergencySetDOwner(bytes32 democHash, address newOwner) only_owner() external {\r\n        _setDOwner(democHash, newOwner);\r\n        emit EmergencyDemocOwner(democHash, newOwner);\r\n    }\r\n\r\n    /* user democ admin functions */\r\n\r\n    function dInit(address defaultErc20, address initOwner, bool disableErc20OwnerClaim) only_editors() external returns (bytes32 democHash) {\r\n        // generating the democHash in this way guarentees it'll be unique/hard-to-brute-force\r\n        // (particularly because prevBlockHash and now are part of the hash)\r\n        democHash = keccak256(abi.encodePacked(democList.length, blockhash(block.number-1), defaultErc20, now));\r\n        _addDemoc(democHash, defaultErc20, initOwner, disableErc20OwnerClaim);\r\n    }\r\n\r\n    function _setDOwner(bytes32 democHash, address newOwner) internal {\r\n        Democ storage d = democs[democHash];\r\n        uint epoch = d.editorEpoch;\r\n        d.owner = newOwner;\r\n        // unset prev owner as editor - does little if one was not set\r\n        d.editors[epoch][d.owner] = false;\r\n        // make new owner an editor too\r\n        d.editors[epoch][newOwner] = true;\r\n        emit DemocOwnerSet(democHash, newOwner);\r\n    }\r\n\r\n    function setDOwner(bytes32 democHash, address newOwner) only_editors() external {\r\n        _setDOwner(democHash, newOwner);\r\n    }\r\n\r\n    function setDOwnerFromClaim(bytes32 democHash, address newOwner) only_editors() external {\r\n        Democ storage d = democs[democHash];\r\n        // make sure that the owner claim is enabled (i.e. the disabled flag is false)\r\n        require(d.erc20OwnerClaimDisabled == false, \"!erc20-claim\");\r\n        // set owner and editor\r\n        d.owner = newOwner;\r\n        d.editors[d.editorEpoch][newOwner] = true;\r\n        // disable the ability to claim now that it's done\r\n        d.erc20OwnerClaimDisabled = true;\r\n        emit DemocOwnerSet(democHash, newOwner);\r\n        emit DemocClaimed(democHash);\r\n    }\r\n\r\n    function setDEditor(bytes32 democHash, address editor, bool canEdit) only_editors() external {\r\n        Democ storage d = democs[democHash];\r\n        d.editors[d.editorEpoch][editor] = canEdit;\r\n        emit DemocEditorSet(democHash, editor, canEdit);\r\n    }\r\n\r\n    function setDNoEditors(bytes32 democHash) only_editors() external {\r\n        democs[democHash].editorEpoch += 1;\r\n        emit DemocEditorsWiped(democHash);\r\n    }\r\n\r\n    function setDErc20(bytes32 democHash, address newErc20) only_editors() external {\r\n        democs[democHash].erc20 = newErc20;\r\n        erc20ToDemocs[newErc20].push(democHash);\r\n        emit DemocErc20Set(democHash, newErc20);\r\n    }\r\n\r\n    function dSetArbitraryData(bytes32 democHash, bytes key, bytes value) only_editors() external {\r\n        bytes32 k = keccak256(key);\r\n        arbitraryData[democHash][k] = value;\r\n        emit DemocDataSet(democHash, k);\r\n    }\r\n\r\n    function dSetEditorArbitraryData(bytes32 democHash, bytes key, bytes value) only_editors() external {\r\n        bytes32 k = keccak256(_calcEditorKey(key));\r\n        arbitraryData[democHash][k] = value;\r\n        emit DemocDataSet(democHash, k);\r\n    }\r\n\r\n    function dAddCategory(bytes32 democHash, bytes32 name, bool hasParent, uint parent) only_editors() external {\r\n        uint catId = democCategories[democHash].nCategories;\r\n        democCategories[democHash].categories[catId].name = name;\r\n        if (hasParent) {\r\n            democCategories[democHash].categories[catId].hasParent = true;\r\n            democCategories[democHash].categories[catId].parent = parent;\r\n        }\r\n        democCategories[democHash].nCategories += 1;\r\n        emit DemocCatAdded(democHash, catId);\r\n    }\r\n\r\n    function dDeprecateCategory(bytes32 democHash, uint catId) only_editors() external {\r\n        democCategories[democHash].categories[catId].deprecated = true;\r\n        emit DemocCatDeprecated(democHash, catId);\r\n    }\r\n\r\n    function dSetCommunityBallotsEnabled(bytes32 democHash, bool enabled) only_editors() external {\r\n        democs[democHash].communityBallotsDisabled = !enabled;\r\n        emit DemocCommunityBallotsEnabled(democHash, enabled);\r\n    }\r\n\r\n    function dDisableErc20OwnerClaim(bytes32 democHash) only_editors() external {\r\n        democs[democHash].erc20OwnerClaimDisabled = true;\r\n        emit DemocErc20OwnerClaimDisabled(democHash);\r\n    }\r\n\r\n    //* ADD BALLOT TO RECORD */\r\n\r\n    function _commitBallot(bytes32 democHash, uint ballotId, uint256 packed, bool countTowardsLimit) internal {\r\n        uint16 subBits;\r\n        subBits = BPackedUtils.packedToSubmissionBits(packed);\r\n\r\n        uint localBallotId = democs[democHash].allBallots.length;\r\n        democs[democHash].allBallots.push(ballotId);\r\n\r\n        // do this for anything that doesn't qualify as a community ballot\r\n        if (countTowardsLimit) {\r\n            democs[democHash].includedBasicBallots.push(ballotId);\r\n        }\r\n\r\n        emit NewBallot(democHash, localBallotId);\r\n    }\r\n\r\n    // what SVIndex uses to add a ballot\r\n    function dAddBallot(bytes32 democHash, uint ballotId, uint256 packed, bool countTowardsLimit) only_editors() external {\r\n        _commitBallot(democHash, ballotId, packed, countTowardsLimit);\r\n    }\r\n\r\n    /* democ getters */\r\n\r\n    function getDOwner(bytes32 democHash) external view returns (address) {\r\n        return democs[democHash].owner;\r\n    }\r\n\r\n    function isDEditor(bytes32 democHash, address editor) external view returns (bool) {\r\n        Democ storage d = democs[democHash];\r\n        // allow either an editor or always the owner\r\n        return d.editors[d.editorEpoch][editor] || editor == d.owner;\r\n    }\r\n\r\n    function getDHash(bytes13 prefix) external view returns (bytes32) {\r\n        return democPrefixToHash[prefix];\r\n    }\r\n\r\n    function getDInfo(bytes32 democHash) external view returns (address erc20, address owner, uint256 nBallots) {\r\n        return (democs[democHash].erc20, democs[democHash].owner, democs[democHash].allBallots.length);\r\n    }\r\n\r\n    function getDErc20(bytes32 democHash) external view returns (address) {\r\n        return democs[democHash].erc20;\r\n    }\r\n\r\n    function getDArbitraryData(bytes32 democHash, bytes key) external view returns (bytes) {\r\n        return arbitraryData[democHash][keccak256(key)];\r\n    }\r\n\r\n    function getDEditorArbitraryData(bytes32 democHash, bytes key) external view returns (bytes) {\r\n        return arbitraryData[democHash][keccak256(_calcEditorKey(key))];\r\n    }\r\n\r\n    function getDBallotsN(bytes32 democHash) external view returns (uint256) {\r\n        return democs[democHash].allBallots.length;\r\n    }\r\n\r\n    function getDBallotID(bytes32 democHash, uint256 n) external view returns (uint ballotId) {\r\n        return democs[democHash].allBallots[n];\r\n    }\r\n\r\n    function getDCountedBasicBallotsN(bytes32 democHash) external view returns (uint256) {\r\n        return democs[democHash].includedBasicBallots.length;\r\n    }\r\n\r\n    function getDCountedBasicBallotID(bytes32 democHash, uint256 n) external view returns (uint256) {\r\n        return democs[democHash].includedBasicBallots[n];\r\n    }\r\n\r\n    function getDCategoriesN(bytes32 democHash) external view returns (uint) {\r\n        return democCategories[democHash].nCategories;\r\n    }\r\n\r\n    function getDCategory(bytes32 democHash, uint catId) external view returns (bool deprecated, bytes32 name, bool hasParent, uint256 parent) {\r\n        deprecated = democCategories[democHash].categories[catId].deprecated;\r\n        name = democCategories[democHash].categories[catId].name;\r\n        hasParent = democCategories[democHash].categories[catId].hasParent;\r\n        parent = democCategories[democHash].categories[catId].parent;\r\n    }\r\n\r\n    function getDCommBallotsEnabled(bytes32 democHash) external view returns (bool) {\r\n        return !democs[democHash].communityBallotsDisabled;\r\n    }\r\n\r\n    function getDErc20OwnerClaimEnabled(bytes32 democHash) external view returns (bool) {\r\n        return !democs[democHash].erc20OwnerClaimDisabled;\r\n    }\r\n\r\n    /* util for calculating editor key */\r\n\r\n    function _calcEditorKey(bytes key) internal pure returns (bytes) {\r\n        return abi.encodePacked(\"editor.\", key);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDCategoriesN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"dDeprecateCategory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"disableErc20OwnerClaim\",\"type\":\"bool\"}],\"name\":\"dAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doLockdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGDemoc\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"hasPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getAdminLog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"dSetCommunityBallotsEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"getDCategory\",\"outputs\":[{\"name\":\"deprecated\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"hasParent\",\"type\":\"bool\"},{\"name\":\"parent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"hasParent\",\"type\":\"bool\"},{\"name\":\"parent\",\"type\":\"uint256\"}],\"name\":\"dAddCategory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currAdminEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminLogN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incAdminEpoch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"_givePerms\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"setDNoEditors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"upgradeMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsDisabledForever\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDErc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes13\"}],\"name\":\"getDHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"_editPerms\",\"type\":\"bool\"}],\"name\":\"setPermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getDCountedBasicBallotID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDCommBallotsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getDEditorArbitraryData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"dDisableErc20OwnerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminLockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"upgradeMeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDErc20OwnerClaimEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDBallotsN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"dSetArbitraryData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"ballotId\",\"type\":\"uint256\"},{\"name\":\"packed\",\"type\":\"uint256\"},{\"name\":\"countTowardsLimit\",\"type\":\"bool\"}],\"name\":\"dAddBallot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"dSetEditorArbitraryData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldSC\",\"type\":\"address\"},{\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"upgradePermissionedSC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGDemocsN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"getGErc20ToDemocs\",\"outputs\":[{\"name\":\"democHashes\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"defaultErc20\",\"type\":\"address\"},{\"name\":\"initOwner\",\"type\":\"address\"},{\"name\":\"disableErc20OwnerClaim\",\"type\":\"bool\"}],\"name\":\"dInit\",\"outputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDInfo\",\"outputs\":[{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nBallots\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setDOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emergencySetDOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getDBallotID\",\"outputs\":[{\"name\":\"ballotId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"editor\",\"type\":\"address\"}],\"name\":\"isDEditor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"newErc20\",\"type\":\"address\"}],\"name\":\"setDErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDCountedBasicBallotsN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"editor\",\"type\":\"address\"},{\"name\":\"canEdit\",\"type\":\"bool\"}],\"name\":\"setDEditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getDArbitraryData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setDOwnerFromClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editAddr\",\"type\":\"address\"}],\"name\":\"PermissionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editAddr\",\"type\":\"address\"}],\"name\":\"PermissionGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editAddr\",\"type\":\"address\"}],\"name\":\"PermissionRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldSC\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"PermissionsUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldSC\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"SelfUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminLockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminEpochInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminDisabledForever\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"NewDemoc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"ManuallyAddedDemoc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ballotN\",\"type\":\"uint256\"}],\"name\":\"NewBallot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DemocOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"editor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"canEdit\",\"type\":\"bool\"}],\"name\":\"DemocEditorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"DemocEditorsWiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"DemocErc20Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"DemocDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"DemocCatAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"DemocCatDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DemocCommunityBallotsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"DemocErc20OwnerClaimDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"DemocClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"EmergencyDemocOwner\",\"type\":\"event\"}]","ContractName":"SVIndexBackend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a485661c5fc5413adce642da62f2b60c9b3d116fbb403a7148c4a0db7adada9"}]}