{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Timebomb {\r\n    using SafeMath for uint256;\r\n\r\n    event Deposit(address user, uint amount);\r\n    event Withdraw(address user, uint amount);\r\n    event Claim(address user, uint dividends);\r\n    event Reinvest(address user, uint dividends);\r\n    event Leader(address user, uint amount);\r\n    event Win(address user, uint amount);\r\n\r\n    uint constant depositTaxDivisor = 3;\r\n    uint constant withdrawalTaxDivisor = 3;\r\n    uint constant duration = 1 hours;\r\n    uint constant intervals = 12;\r\n    uint constant minimumPerInterval = 100 finney;\r\n\r\n    address owner;\r\n    mapping(address => bool) preauthorized;\r\n    bool gameStarted;\r\n\r\n    address public leader;\r\n    uint public deadline;\r\n    bool public prizeClaimed;\r\n\r\n    mapping(address => uint) public investment;\r\n    uint public totalInvestment;\r\n\r\n    mapping(address => uint) public stake;\r\n    uint public totalStake;\r\n    uint stakeValue;\r\n\r\n    mapping(address => uint) dividendCredit;\r\n    mapping(address => uint) dividendDebit;\r\n\r\n    function Timebomb() public {\r\n        owner = msg.sender;\r\n        preauthorized[owner] = true;\r\n        leader = msg.sender;\r\n        deadline = now + duration;\r\n    }\r\n\r\n    function preauthorize(address _user) public {\r\n        require(msg.sender == owner);\r\n        preauthorized[_user] = true;\r\n    }\r\n\r\n    function startGame() public {\r\n        require(msg.sender == owner);\r\n        gameStarted = true;\r\n    }\r\n\r\n    function threshold() public view returns (uint) {\r\n        if (now < deadline) {\r\n            uint _lastTimestamp = deadline.sub(duration);\r\n            uint _elapsed = now.sub(_lastTimestamp);\r\n            uint _interval = intervals.mul(_elapsed).div(duration).add(1);\r\n            return _interval.mul(minimumPerInterval);\r\n        } else {\r\n            return intervals.mul(minimumPerInterval);\r\n        }\r\n    }\r\n\r\n    function checkForNewLeader(uint _amount) private {\r\n        if (_amount >= threshold()) {\r\n            leader = msg.sender;\r\n            deadline = now + duration;\r\n            emit Leader(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function depositHelper(uint _amount) private {\r\n        checkForNewLeader(_amount);\r\n        uint _tax = _amount.div(depositTaxDivisor);\r\n        uint _amountAfterTax = _amount.sub(_tax);\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        uint _stakeIncrement = sqrt(totalStake.mul(totalStake).add(_amountAfterTax)).sub(totalStake);\r\n        investment[msg.sender] = investment[msg.sender].add(_amountAfterTax);\r\n        totalInvestment = totalInvestment.add(_amountAfterTax);\r\n        stake[msg.sender] = stake[msg.sender].add(_stakeIncrement);\r\n        totalStake = totalStake.add(_stakeIncrement);\r\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].add(_stakeIncrement.mul(stakeValue));\r\n    }\r\n\r\n    function deposit() public payable {\r\n        require(preauthorized[msg.sender] || gameStarted);\r\n        require(now < deadline);\r\n        depositHelper(msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint _amount) public {\r\n        require(now < deadline);\r\n        require(_amount > 0);\r\n        require(_amount <= investment[msg.sender]);\r\n        checkForNewLeader(_amount);\r\n        uint _tax = _amount.div(withdrawalTaxDivisor);\r\n        uint _amountAfterTax = _amount.sub(_tax);\r\n        uint _stakeDecrement = stake[msg.sender].mul(_amount).div(investment[msg.sender]);\r\n        uint _dividendCredit = _stakeDecrement.mul(stakeValue);\r\n        investment[msg.sender] = investment[msg.sender].sub(_amount);\r\n        totalInvestment = totalInvestment.sub(_amount);\r\n        stake[msg.sender] = stake[msg.sender].sub(_stakeDecrement);\r\n        totalStake = totalStake.sub(_stakeDecrement);\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].add(_dividendCredit);\r\n        uint _creditDebitCancellation = min(dividendCredit[msg.sender], dividendDebit[msg.sender]);\r\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].sub(_creditDebitCancellation);\r\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].sub(_creditDebitCancellation);\r\n        msg.sender.transfer(_amountAfterTax);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function claimHelper() private returns(uint) {\r\n        uint _dividendsForStake = stake[msg.sender].mul(stakeValue);\r\n        uint _dividends = _dividendsForStake.add(dividendCredit[msg.sender]).sub(dividendDebit[msg.sender]);\r\n        dividendCredit[msg.sender] = 0;\r\n        dividendDebit[msg.sender] = _dividendsForStake;\r\n        return _dividends;\r\n    }\r\n\r\n    function claim() public {\r\n        uint _dividends = claimHelper();\r\n        msg.sender.transfer(_dividends);\r\n        emit Claim(msg.sender, _dividends);\r\n    }\r\n\r\n    function reinvest() public {\r\n        require(now < deadline);\r\n        uint _dividends = claimHelper();\r\n        depositHelper(_dividends);\r\n        emit Reinvest(msg.sender, _dividends);\r\n    }\r\n\r\n    function win() public {\r\n        require(now >= deadline);\r\n        require(msg.sender == leader);\r\n        require(!prizeClaimed);\r\n        uint _amount = totalInvestment;\r\n        uint _tax = _amount.div(withdrawalTaxDivisor);\r\n        uint _amountAfterTax = _amount.sub(_tax);\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        prizeClaimed = true;\r\n        msg.sender.transfer(_amountAfterTax);\r\n        emit Win(msg.sender, _amount);\r\n    }\r\n\r\n    function dividendsForUser(address _user) public view returns (uint) {\r\n        return stake[_user].mul(stakeValue).add(dividendCredit[_user]).sub(dividendDebit[_user]);\r\n    }\r\n\r\n    function min(uint x, uint y) private pure returns (uint) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint x) private pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"win\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"preauthorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Leader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"}]","ContractName":"Timebomb","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cc41736d6c678e1f27ef3e5c31e3d1fbb7323632f9534cce12b8a10d5f7ef154"}]}