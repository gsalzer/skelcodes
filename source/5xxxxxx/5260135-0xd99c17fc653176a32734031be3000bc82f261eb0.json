{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n  *  Whitelist contract\r\n  */\r\ncontract Whitelist is Ownable {\r\n\r\n   mapping (address => bool) public whitelist;\r\n   event Registered(address indexed _addr);\r\n   event Unregistered(address indexed _addr);\r\n\r\n   modifier onlyWhitelisted(address _addr) {\r\n     require(whitelist[_addr]);\r\n     _;\r\n   }\r\n\r\n   function isWhitelist(address _addr) public view returns (bool listed) {\r\n     return whitelist[_addr];\r\n   }\r\n\r\n   function registerAddress(address _addr) public onlyOwner {\r\n     require(_addr != address(0) && whitelist[_addr] == false);\r\n     whitelist[_addr] = true;\r\n     Registered(_addr);\r\n   }\r\n\r\n   function registerAddresses(address[] _addrs) public onlyOwner {\r\n     for(uint256 i = 0; i < _addrs.length; i++) {\r\n       require(_addrs[i] != address(0) && whitelist[_addrs[i]] == false);\r\n       whitelist[_addrs[i]] = true;\r\n       Registered(_addrs[i]);\r\n     }\r\n   }\r\n\r\n   function unregisterAddress(address _addr) public onlyOwner onlyWhitelisted(_addr) {\r\n       whitelist[_addr] = false;\r\n       Unregistered(_addr);\r\n   }\r\n\r\n   function unregisterAddresses(address[] _addrs) public onlyOwner {\r\n     for(uint256 i = 0; i < _addrs.length; i++) {\r\n       require(whitelist[_addrs[i]]);\r\n       whitelist[_addrs[i]] = false;\r\n       Unregistered(_addrs[i]);\r\n     }\r\n   }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unregisterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"unregisterAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"registerAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"name\":\"listed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ee3c0431a4e0409cf2c8bd196273c9f6fb7bf600e4b5afdfb33545e6f143674b"}]}