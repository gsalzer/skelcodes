{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event NewOwner (address indexed owner);\r\n\r\n  function Ownable () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner () {\r\n    if (owner != msg.sender) revert();\r\n    _;\r\n  }\r\n\r\n  function setOwner (address candidate) public onlyOwner {\r\n    if (candidate == address(0)) revert();\r\n    owner = candidate;\r\n    emit NewOwner(owner);\r\n  }\r\n}\r\n\r\ncontract TokenAware is Ownable {\r\n  function withdrawToken (address addressOfToken, uint256 amount) onlyOwner public returns (bool) {\r\n    bytes4 hashOfTransfer = bytes4(keccak256('transfer(address,uint256)'));\r\n\r\n    return addressOfToken.call(hashOfTransfer, owner, amount);\r\n  }\r\n}\r\n\r\ncontract Destructible is TokenAware {\r\n  function kill () public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract Pausable is Destructible {\r\n  bool public paused;\r\n\r\n  event NewStatus (bool isPaused);\r\n\r\n  modifier whenNotPaused () {\r\n    if (paused) revert();\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused () {\r\n    if (!paused) revert();\r\n    _;\r\n  }\r\n\r\n  function setStatus (bool isPaused) public onlyOwner {\r\n    paused = isPaused;\r\n    emit NewStatus(isPaused);\r\n  }\r\n}\r\n\r\ncontract Operable is Pausable {\r\n  address[] public operators;\r\n\r\n  event NewOperator(address indexed operator);\r\n  event RemoveOperator(address indexed operator);\r\n\r\n  function Operable (address[] newOperators) public {\r\n    operators = newOperators;\r\n  }\r\n\r\n  modifier restricted () {\r\n    if (owner != msg.sender &&\r\n        !containsOperator(msg.sender)) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyOperator () {\r\n    if (!containsOperator(msg.sender)) revert();\r\n    _;\r\n  }\r\n\r\n  function containsOperator (address candidate) public constant returns (bool) {\r\n    for (uint256 x = 0; x < operators.length; x++) {\r\n      address operator = operators[x];\r\n      if (candidate == operator) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function indexOfOperator (address candidate) public constant returns (int256) {\r\n    for (uint256 x = 0; x < operators.length; x++) {\r\n      address operator = operators[x];\r\n      if (candidate == operator) {\r\n        return int256(x);\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  function addOperator (address candidate) public onlyOwner {\r\n    if (candidate == address(0) || containsOperator(candidate)) revert();\r\n    operators.push(candidate);\r\n    emit NewOperator(candidate);\r\n  }\r\n\r\n  function removeOperator (address operator) public onlyOwner {\r\n    int256 indexOf = indexOfOperator(operator);\r\n\r\n    if (indexOf < 0) revert();\r\n\r\n    // overwrite operator with last operator in the array\r\n    if (uint256(indexOf) != operators.length - 1) {\r\n      address lastOperator = operators[operators.length - 1];\r\n      operators[uint256(indexOf)] = lastOperator;\r\n    }\r\n\r\n    // delete the last element\r\n    delete operators[operators.length - 1];\r\n    emit RemoveOperator(operator);\r\n  }\r\n}\r\n\r\ncontract EtherShuffle is Operable {\r\n\r\n  uint256 public nextGameId = 1;\r\n  uint256 public lowestGameWithoutQuorum = 1;\r\n\r\n  uint256[5] public distributions = [300000000000000000, // 30%\r\n    250000000000000000,\r\n    225000000000000000,\r\n    212500000000000000,\r\n    0];\r\n    // 12500000000000000 == 1.25%\r\n\r\n  uint8 public constant countOfParticipants = 5;\r\n  uint256 public gamePrice = 100 finney;\r\n\r\n  mapping (uint256 => Shuffle) public games;\r\n  mapping (address => uint256[]) public gamesByPlayer;\r\n  mapping (uint256 => uint256) public gamesWithoutQuorum;\r\n  mapping (address => uint256) public balances;\r\n\r\n  struct Shuffle {\r\n    uint256 id;\r\n    address[] players;\r\n    bytes32 hash;\r\n    uint8[5] result;\r\n    bytes32 secret;\r\n    uint256 value;\r\n  }\r\n\r\n  event NewGame (uint256 indexed gameId);\r\n  event NewHash (uint256 indexed gameId);\r\n  event NewReveal (uint256 indexed gameId);\r\n  event NewPrice (uint256 price);\r\n  event NewDistribution (uint256[5]);\r\n  event Quorum (uint256 indexed gameId);\r\n\r\n  function EtherShuffle (address[] operators)\r\n    Operable(operators) public {\r\n  }\r\n\r\n  modifier onlyExternalAccount () {\r\n    uint size;\r\n    address addr = msg.sender;\r\n    assembly { size := extcodesize(addr) }\r\n    if (size > 0) revert();\r\n    _;\r\n  }\r\n\r\n  // send 0 ETH to withdraw, otherwise send enough to play\r\n  function () public payable {\r\n    if (msg.value == 0) {\r\n      withdrawTo(msg.sender);\r\n    } else {\r\n      play();\r\n    }\r\n  }\r\n\r\n  function play () public payable whenNotPaused onlyExternalAccount {\r\n    if (msg.value < gamePrice) revert();\r\n    joinGames(msg.sender, msg.value);\r\n  }\r\n\r\n  function playFromBalance () public whenNotPaused onlyExternalAccount {\r\n    uint256 balanceOf = balances[msg.sender];\r\n    if (balanceOf < gamePrice) revert();\r\n\r\n    balances[msg.sender] = 0;\r\n    joinGames(msg.sender, balanceOf);\r\n  }\r\n\r\n  \r\n\r\n  function joinGames (address player, uint256 value) private {\r\n\r\n    while (value >= gamePrice) {\r\n      uint256 id = findAvailableGame(player);\r\n      Shuffle storage game = games[id];\r\n\r\n      value -= gamePrice;\r\n      joinGame(game, player, gamePrice);\r\n    }\r\n    \r\n    balances[player] += value;\r\n    if (balances[player] < value) revert();\r\n  }\r\n\r\n  function joinGame (Shuffle storage game, address player, uint256 value) private {\r\n    if (game.id == 0) revert();\r\n\r\n    if (value != gamePrice) revert();\r\n    game.value += gamePrice;\r\n    if (game.value < gamePrice) revert();\r\n\r\n    game.players.push(player);\r\n    gamesByPlayer[player].push(game.id);\r\n\r\n    if (game.players.length == countOfParticipants) {\r\n      delete gamesWithoutQuorum[game.id];\r\n      lowestGameWithoutQuorum++;\r\n      emit Quorum(game.id);\r\n    }\r\n\r\n    if (game.players.length > countOfParticipants) revert();\r\n  }\r\n\r\n  function findAvailableGame (address player) private returns (uint256) {\r\n    for (uint256 x = lowestGameWithoutQuorum; x < nextGameId; x++) {\r\n      Shuffle storage game = games[x];\r\n\r\n      // games which have met quorum are removed from this mapping\r\n      if (game.id == 0) continue;\r\n\r\n      if (!contains(game, player)) {\r\n        return game.id;\r\n      }\r\n    }\r\n\r\n    // if a sender gets here, they've joined all available games,\r\n    // create a new one\r\n    return newGame();\r\n  }\r\n\r\n  function newGame () private returns (uint256) {\r\n    uint256 gameId = nextGameId;\r\n    nextGameId++;\r\n    Shuffle storage game = games[gameId];\r\n\r\n    // ensure this is a real uninitialized game\r\n    if (game.id != 0) revert();\r\n\r\n    game.id = gameId;\r\n    gamesWithoutQuorum[gameId] = gameId;\r\n    emit NewGame(gameId);\r\n    return gameId;\r\n  }\r\n\r\n  function gamesOf (address player) public constant returns (uint256[]) {\r\n    return gamesByPlayer[player];\r\n  }\r\n\r\n  function balanceOf (address player) public constant returns (uint256) {\r\n    return balances[player];\r\n  }\r\n\r\n  function getPlayers (uint256 gameId) public constant returns (address[]) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.players;\r\n  }\r\n\r\n  function hasHash (uint256 gameId) public constant returns (bool) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.hash != bytes32(0);\r\n  }\r\n\r\n  function getHash (uint256 gameId) public constant returns (bytes32) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.hash;\r\n  }\r\n\r\n  function getResult (uint256 gameId) public constant returns (uint8[5]) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.result;\r\n  }\r\n\r\n  function hasSecret (uint256 gameId) public constant returns (bool) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.secret != bytes32(0);\r\n  }\r\n\r\n  function getSecret (uint256 gameId) public constant returns (bytes32) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.secret;\r\n  }\r\n    \r\n  function getValue (uint256 gameId) public constant returns (uint256) {\r\n    Shuffle storage game = games[gameId];\r\n    return game.value;\r\n  }\r\n\r\n  function setHash (uint256 gameId, bytes32 hash) public whenNotPaused restricted {\r\n    Shuffle storage game = games[gameId];\r\n    if (game.id == 0) revert();\r\n    if (game.hash != bytes32(0)) revert();\r\n\r\n    game.hash = hash;\r\n    emit NewHash(game.id);\r\n  }\r\n\r\n  function reveal (uint256 gameId, uint8[5] result, bytes32 secret) public whenNotPaused restricted {\r\n    Shuffle storage game = games[gameId];\r\n    if (game.id == 0) revert();\r\n    if (game.players.length < uint256(countOfParticipants)) revert();\r\n    if (game.hash == bytes32(0)) revert();\r\n    if (game.secret != bytes32(0)) revert();\r\n\r\n    bytes32 hash = keccak256(result, secret);\r\n    if (game.hash != hash) revert();\r\n\r\n    game.secret = secret;\r\n    game.result = result;\r\n    disburse(game);\r\n    emit NewReveal(gameId);\r\n  }\r\n\r\n  function disburse (Shuffle storage game) private restricted {\r\n    if (game.players.length != countOfParticipants) revert();\r\n\r\n    uint256 totalValue = game.value;\r\n\r\n    for (uint8 x = 0; x < game.result.length; x++) {\r\n      uint256 indexOfDistribution = game.result[x];\r\n      address player = game.players[x];\r\n      uint256 playerDistribution = distributions[indexOfDistribution];\r\n      uint256 disbursement = totalValue * playerDistribution / (1 ether);\r\n      uint256 playerBalance = balances[player];\r\n\r\n      game.value -= disbursement;\r\n      playerBalance += disbursement;\r\n      if (playerBalance < disbursement) revert();\r\n      balances[player] = playerBalance;\r\n    }\r\n\r\n    balances[owner] += game.value;\r\n    game.value = 0;\r\n  }\r\n\r\n  function setPrice (uint256 price) public onlyOwner {\r\n    gamePrice = price;\r\n    emit NewPrice(price);\r\n  }\r\n\r\n  function setDistribution (uint256[5] winnings) public onlyOwner {\r\n    distributions = winnings;\r\n    emit NewDistribution(winnings);\r\n  }\r\n\r\n  // anyone can withdraw on behalf of someone (when the player lacks the gas, for instance)\r\n  function withdrawToMany (address[] players) public {\r\n    for (uint8 x = 0; x < players.length; x++) {\r\n      address player = players[x];\r\n\r\n      withdrawTo(player);\r\n    }\r\n  }\r\n\r\n  function withdraw () public {\r\n    withdrawTo(msg.sender);\r\n  }\r\n\r\n  function withdrawTo (address player) public {\r\n    uint256 playerBalance = balances[player];\r\n\r\n    if (playerBalance > 0) {\r\n      balances[player] = 0;\r\n\r\n      player.transfer(playerBalance);\r\n    }\r\n  }\r\n\r\n  function contains (uint256 gameId, address candidate) public constant returns (bool) {\r\n    Shuffle storage game = games[gameId];\r\n    return contains(game, candidate);\r\n  }\r\n\r\n  function contains (Shuffle storage game, address candidate) private constant returns (bool) {\r\n    for (uint256 x = 0; x < game.players.length; x++) {\r\n      address player = game.players[x];\r\n      if (candidate == player) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function createHash (uint8[5] result, bytes32 secret) public pure returns (bytes32) {\r\n    bytes32 hash = keccak256(result, secret);\r\n    return hash;\r\n  }\r\n\r\n  function verify (bytes32 hash, uint8[5] result, bytes32 secret) public pure returns (bool) {\r\n    return hash == createHash(result, secret);\r\n  }\r\n\r\n  function verifyGame (uint256 gameId) public constant returns (bool) {\r\n    Shuffle storage game = games[gameId];\r\n    return verify(game.hash, game.result, game.secret);\r\n  }\r\n\r\n  function verifySignature (address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\r\n    bytes memory prefix = '\\x19Ethereum Signed Message:\\n32';\r\n    bytes32 prefixedHash = keccak256(prefix, hash);\r\n    return ecrecover(prefixedHash, v, r, s) == signer;\r\n  }\r\n\r\n  function getNextGameId () public constant returns (uint256) {\r\n    return nextGameId;\r\n  }\r\n\r\n  function getLowestGameWithoutQuorum () public constant returns (uint256) {\r\n    return lowestGameWithoutQuorum;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifySignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"result\",\"type\":\"uint8[5]\"},{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"createHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"secret\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowestGameWithoutQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"indexOfOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"containsOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"hasSecret\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"players\",\"type\":\"address[]\"}],\"name\":\"withdrawToMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"verifyGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint8[5]\"},{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"setHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winnings\",\"type\":\"uint256[5]\"}],\"name\":\"setDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesWithoutQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getSecret\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressOfToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLowestGameWithoutQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"uint8[5]\"},{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesByPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"hasHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"gamesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"operators\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"NewHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"NewReveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256[5]\"}],\"name\":\"NewDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"Quorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RemoveOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"NewStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"EtherShuffle","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000009000000000000000000000000e57aa1ab6db9db972f67fa5ac69a7f0bd850fc940000000000000000000000008355b546a202ce6be74ba7d1a93e6db5d6bebbf400000000000000000000000002613ccff081b22cd614989200df7c0895e28be4000000000000000000000000e5f939385270f464f4fead848915c3a1f667f2300000000000000000000000005d4cfce485577e8578f57c55edf879d1f42c526d000000000000000000000000ba335bf0cb12b1d701bc43709985b69ff3e83499000000000000000000000000d950afdab5c509f51d8246866e6f4735f063f9b300000000000000000000000053bddb8f0767eb984d37f296e5b9b091f789ba48000000000000000000000000799119ad0a9bef2dbbea0e4f69bb1448575b6246","Library":"","SwarmSource":"bzzr://9182c775193e742334b63df77a56d1ca6816d6be7d40a203e746d9046bdcde9a"}]}