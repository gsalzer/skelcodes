{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/grapevine/crowdsale/GrapevineWhitelistInterface.sol\r\n\r\n/**\r\n * @title Grapevine Whitelist extends the zeppelin Whitelist and adding off-chain signing capabilities.\r\n * @dev Grapevine Crowdsale\r\n **/\r\ncontract GrapevineWhitelistInterface {\r\n\r\n  /**\r\n   * @dev Function to check if an address is whitelisted or not\r\n   * @param _address address The address to be checked.\r\n   */\r\n  function whitelist(address _address) view external returns (bool);\r\n\r\n \r\n  /**\r\n   * @dev Handles the off-chain whitelisting.\r\n   * @param _addr Address of the sender.\r\n   * @param _sig signed message provided by the sender.\r\n   */\r\n  function handleOffchainWhitelisted(address _addr, bytes _sig) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ECRecovery.sol\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * @dev and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      \"\\x19Ethereum Signed Message:\\n32\",\r\n      hash\r\n    );\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/SignatureBouncer.sol\r\n\r\n/**\r\n * @title SignatureBouncer\r\n * @author PhABC and Shrugs\r\n * @dev Bouncer allows users to submit a signature as a permission to do an action.\r\n * If the signature is from one of the authorized bouncer addresses, the signature\r\n * is valid. The owner of the contract adds/removes bouncers.\r\n * Bouncer addresses can be individual servers signing grants or different\r\n * users within a decentralized club that have permission to invite other members.\r\n * \r\n * This technique is useful for whitelists and airdrops; instead of putting all\r\n * valid addresses on-chain, simply sign a grant of the form\r\n * keccak256(`:contractAddress` + `:granteeAddress`) using a valid bouncer address.\r\n * Then restrict access to your crowdsale/whitelist/airdrop using the\r\n * `onlyValidSignature` modifier (or implement your own using isValidSignature).\r\n * \r\n * See the tests Bouncer.test.js for specific usage examples.\r\n */\r\ncontract SignatureBouncer is Ownable, RBAC {\r\n  using ECRecovery for bytes32;\r\n\r\n  string public constant ROLE_BOUNCER = \"bouncer\";\r\n\r\n  /**\r\n   * @dev requires that a valid signature of a bouncer was provided\r\n   */\r\n  modifier onlyValidSignature(bytes _sig)\r\n  {\r\n    require(isValidSignature(msg.sender, _sig));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev allows the owner to add additional bouncer addresses\r\n   */\r\n  function addBouncer(address _bouncer)\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_bouncer != address(0));\r\n    addRole(_bouncer, ROLE_BOUNCER);\r\n  }\r\n\r\n  /**\r\n   * @dev allows the owner to remove bouncer addresses\r\n   */\r\n  function removeBouncer(address _bouncer)\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_bouncer != address(0));\r\n    removeRole(_bouncer, ROLE_BOUNCER);\r\n  }\r\n\r\n  /**\r\n   * @dev is the signature of `this + sender` from a bouncer?\r\n   * @return bool\r\n   */\r\n  function isValidSignature(address _address, bytes _sig)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return isValidDataHash(\r\n      keccak256(address(this), _address),\r\n      _sig\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev internal function to convert a hash to an eth signed message\r\n   * @dev and then recover the signature and check it against the bouncer role\r\n   * @return bool\r\n   */\r\n  function isValidDataHash(bytes32 hash, bytes _sig)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address signer = hash\r\n      .toEthSignedMessageHash()\r\n      .recover(_sig);\r\n    return hasRole(signer, ROLE_BOUNCER);\r\n  }\r\n}\r\n\r\n// File: contracts/grapevine/crowdsale/GrapevineWhitelist.sol\r\n\r\n/**\r\n * @title Grapevine Whitelist extends the zeppelin Whitelist and adding off-chain signing capabilities.\r\n * @dev Grapevine Crowdsale\r\n **/\r\ncontract GrapevineWhitelist is SignatureBouncer, GrapevineWhitelistInterface {\r\n\r\n  event WhitelistedAddressAdded(address addr);\r\n  event WhitelistedAddressRemoved(address addr);\r\n  event UselessEvent(address addr, bytes sign, bool ret);\r\n\r\n  mapping(address => bool) public whitelist;\r\n\r\n  address crowdsale;\r\n\r\n  constructor(address _signer) public {\r\n    require(_signer != address(0));\r\n    addBouncer(_signer);\r\n  }\r\n\r\n  modifier onlyOwnerOrCrowdsale() {\r\n    require(msg.sender == owner || msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check if an address is whitelisted\r\n   * @param _address address The address to be checked.\r\n   */\r\n  function whitelist(address _address) view external returns (bool) {\r\n    return whitelist[_address];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to set the crowdsale address\r\n   * @param _crowdsale address The address of the crowdsale.\r\n   */\r\n  function setCrowdsale(address _crowdsale) external onlyOwner {\r\n    require(_crowdsale != address(0));\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n   * @param _beneficiaries Addresses to be added to the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _beneficiaries) external onlyOwnerOrCrowdsale {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      addAddressToWhitelist(_beneficiaries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes single address from whitelist.\r\n   * @param _beneficiary Address to be removed to the whitelist\r\n   */\r\n  function removeAddressFromWhitelist(address _beneficiary) external onlyOwnerOrCrowdsale {\r\n    whitelist[_beneficiary] = false;\r\n    emit WhitelistedAddressRemoved(_beneficiary);\r\n  }\r\n\r\n  /**\r\n   * @dev Handles the off-chain whitelisting.\r\n   * @param _addr Address of the sender.\r\n   * @param _sig signed message provided by the sender.\r\n   */\r\n  function handleOffchainWhitelisted(address _addr, bytes _sig) external onlyOwnerOrCrowdsale returns (bool) {\r\n    bool valid;\r\n    // no need for consuming gas when the address is already whitelisted \r\n    if (whitelist[_addr]) {\r\n      valid = true;\r\n    } else {\r\n      valid = isValidSignature(_addr, _sig);\r\n      if (valid) {\r\n        // no need for consuming gas again if the address calls the contract again. \r\n        addAddressToWhitelist(_addr);\r\n      }\r\n    }\r\n    return valid;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _beneficiary) public onlyOwnerOrCrowdsale {\r\n    whitelist[_beneficiary] = true;\r\n    emit WhitelistedAddressAdded(_beneficiary);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bouncer\",\"type\":\"address\"}],\"name\":\"removeBouncer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"handleOffchainWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bouncer\",\"type\":\"address\"}],\"name\":\"addBouncer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_BOUNCER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sign\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"}],\"name\":\"UselessEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GrapevineWhitelist","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008c59f844042ff2aca6ef05706b257fcace717c41","Library":"","SwarmSource":"bzzr://fc7b75a49812f3203cf068cd24fc54f0b073132de18f49394e949116833af57e"}]}