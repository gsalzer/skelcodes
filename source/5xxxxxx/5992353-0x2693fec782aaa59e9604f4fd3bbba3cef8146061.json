{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//設定管理者//\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public owner2;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    function change_owned(address new_owner2) onlyOwner {\r\n        owner2 =  new_owner2;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner || msg.sender == owner2);\r\n        _;\r\n    }\r\n}    \r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n    function tokenFallback(address _sender, uint256 _value, bytes _extraData) returns (bool);\r\n}\r\n\r\ncontract Leimen is owned{\r\n    \r\n//設定初始值//\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 2;\r\n    uint256 public totalSupply;\r\n    \r\n//初始化//\r\n\r\n    function Leimen() public {\r\n\t    totalSupply = 1000000000 * 100 ;\r\n    \tbalanceOf[msg.sender] = totalSupply ;\r\n        name = \"Leimen coin\";\r\n        symbol = \"XLEM\";         \r\n    }\r\n    \r\n//管理權限//\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    uint256 public eth_amount ;\r\n    bool public stoptransfer ;\r\n    bool public stopsell ;\r\n    \r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function set_prices(uint256 _eth_amount) onlyOwner {\r\n        eth_amount  = _eth_amount  ;\r\n    }\r\n\r\n    function withdraw_Leim(uint256 amount)  onlyOwner {\r\n        require(balanceOf[this] >= amount) ;\r\n        balanceOf[this] -= amount ;\r\n        balanceOf[msg.sender] += amount ;\r\n    }\r\n    \r\n    function withdraw_Eth(uint amount_wei) onlyOwner {\r\n        msg.sender.transfer(amount_wei) ;\r\n    }\r\n    \r\n    function set_Name(string _name) onlyOwner {\r\n        name = _name;\r\n    }\r\n    \r\n    function set_symbol(string _symbol) onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function set_stopsell(bool _stopsell) onlyOwner {\r\n        stopsell = _stopsell;\r\n    }\r\n    \r\n    function set_stoptransfer(bool _stoptransfer) onlyOwner {\r\n        stoptransfer = _stoptransfer;\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner {\r\n        require(_value > 0);\r\n        require(balanceOf[msg.sender] >= _value);   \r\n        balanceOf[msg.sender] -= _value;            \r\n        totalSupply -= _value;                      \r\n        emit Burn(msg.sender, _value);\r\n    }    \r\n\r\n//交易//\r\n\r\n    function _transfer(address _from, address _to, uint _value) \r\n        internal returns(bool success){\r\n\t    require(!frozenAccount[_from]);\r\n\t    require(!stoptransfer);\r\n        require(_to != 0x0);\r\n        \r\n        require(_value >= 0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        \r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        if(compare(_to) == true){\r\n            transferAndCall(_to, _value , \"\");\r\n        }\r\n        else{\r\n            require(_transfer(msg.sender, _to, _value));\r\n        }\r\n        return true;\r\n\t}\r\n\r\n// 服務合約\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]); \r\n        allowance[_from][msg.sender] -= _value;\r\n        require(_transfer(_from, _to, _value));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    function transferAndCall(address _recipient, uint256 _value, bytes _extraData) {\r\n        require(_transfer(msg.sender, _recipient, _value));\r\n        require(tokenRecipient(_recipient).tokenFallback(msg.sender, _value, _extraData));\r\n    }\r\n\r\n    address[]  public contract_address;\r\n    \r\n    function add_address(address _address){\r\n        contract_address.push(_address);\r\n    }\r\n\r\n    function change_address(uint256 _index, address _address){\r\n        contract_address[_index] = _address;\r\n    }\r\n\r\n    function compare(address _address) view public returns(bool){\r\n        uint i = 0;\r\n        for (i;i<contract_address.length;i++){\r\n            if (contract_address[i] == _address){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n//幣販售\r\n\r\n    function () payable {\r\n        buy();\r\n    }\r\n\r\n    function buy() payable returns (uint amount){\r\n\t    require(!stopsell);\r\n        amount = msg.value * eth_amount  / (10**16) ;\r\n        assert(amount*(10**16)/eth_amount == msg.value);\r\n        require(balanceOf[this] >= amount);           \r\n        balanceOf[msg.sender] += amount;           \r\n        balanceOf[this] -= amount; \r\n        Transfer(this, msg.sender, amount);         \r\n        return amount;    \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_eth_amount\",\"type\":\"uint256\"}],\"name\":\"set_prices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_Eth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contract_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"add_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopsell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stoptransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stopsell\",\"type\":\"bool\"}],\"name\":\"set_stopsell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"set_Name\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner2\",\"type\":\"address\"}],\"name\":\"change_owned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_Leim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"change_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"compare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stoptransfer\",\"type\":\"bool\"}],\"name\":\"set_stoptransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"set_symbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Leimen","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa9bef73b6f4fb05e730b0fedeca8ad7de7f59bc91afd955d752fa696682e675"}]}