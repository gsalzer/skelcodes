{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public { //This call only first time when contract deployed by person\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() { //This modifier is for checking owner is calling\r\n        if (owner == msg.sender) {\r\n            _;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}\r\ncontract Mortal is Ownable {\r\n    \r\n    function kill () public {\r\n        if (msg.sender == owner)\r\n            selfdestruct(owner);\r\n    }\r\n}\r\ncontract Token {\r\n    uint256 public etherRaised = 0;\r\n    uint256 public totalSupply;\r\n    uint256 public bountyReserveTokens;\r\n    uint256 public advisoryReserveTokens;\r\n    uint256 public teamReserveTokens;\r\n    uint256 public bountyReserveTokensDistributed = 0;\r\n    uint256 public advisoryReserveTokensDistributed = 0;\r\n    uint256 public teamReserveTokensDistributed = 0;\r\n    uint256 public deadLine = 0;\r\n    bool public isBurned = false;\r\n\r\n    function balanceOf(address _owner) public constant returns(uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _tokens) public returns(bool resultTransfer);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokens, uint256 deadLine_Locked) public returns(bool resultTransfer);\r\n\r\n    function approve(address _spender, uint _value) public returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\ncontract KirkeContract is Token, Mortal, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool success) {\r\n        require(_to != 0x0);\r\n        require(_value > 0);\r\n        uint256 bonus = 0;\r\n\r\n        uint256 totalTokensToTransfer = _value + bonus;\r\n\r\n        if (balances[msg.sender] >= totalTokensToTransfer) {\r\n            balances[msg.sender] -= totalTokensToTransfer;\r\n            balances[_to] += totalTokensToTransfer;\r\n            Transfer(msg.sender, _to, totalTokensToTransfer);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 totalTokensToTransfer, uint256 deadLine_Locked) public returns(bool success) {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(totalTokensToTransfer > 0);\r\n        require(now > deadLine_Locked || _from == owner);\r\n\r\n        if (balances[_from] >= totalTokensToTransfer && allowance(_from, _to) >= totalTokensToTransfer) {\r\n            balances[_to] += totalTokensToTransfer;\r\n            balances[_from] -= totalTokensToTransfer;\r\n            allowed[_from][msg.sender] -= totalTokensToTransfer;\r\n            Transfer(_from, _to, totalTokensToTransfer);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address _owner) public constant returns(uint256 balanceOfUser) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n}\r\ncontract Kirke is KirkeContract{\r\n    string public constant name = \"Kirke\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant symbol = \"KIK\";\r\n    uint256 rateForToken;\r\n    bool public isPaused;\r\n    uint256 firstBonusEstimate;\r\n    uint256 secondBonusEstimate;\r\n    uint256 thirdBonusEstimate;\r\n    uint256 fourthBonusEstimate;\r\n    uint256 firstBonusPriceRate;\r\n    uint256 secondBonusPriceRate;\r\n    uint256 thirdBonusPriceRate;\r\n    uint256 fourthBonusPriceRate;\r\n    uint256 tokensDistributed;\r\n    function Kirke() payable public {\r\n        owner = msg.sender;\r\n        totalSupply = 355800000 * (10 ** uint256(decimals));\r\n        bountyReserveTokens = 200000 * (10 ** uint256(decimals));\r\n        advisoryReserveTokens = 4000000 * (10 ** uint256(decimals));\r\n        teamReserveTokens = 40000000 * (10 ** uint256(decimals));\r\n        rateForToken = 85000 * (10 ** uint256(decimals));//( 1ETH = 700 ) * 100\r\n        balances[msg.sender] = totalSupply;\r\n        deadLine = (now) + 59 days;\r\n        firstBonusEstimate = 50000000 * (10 ** uint256(decimals));\r\n        firstBonusPriceRate = 5 * (10 ** uint256(decimals));//Dividing it with 100 0.05\r\n        secondBonusEstimate = 100000000 * (10 ** uint256(decimals));\r\n        secondBonusPriceRate = 6 * (10 ** uint256(decimals));//Dividing it with 100 0.06\r\n        thirdBonusEstimate = 150000000 * (10 ** uint256(decimals));\r\n        thirdBonusPriceRate = 7 * (10 ** uint256(decimals));//Dividing it with 100 0.07\r\n        fourthBonusEstimate = 400000000 * (10 ** uint256(decimals));\r\n        fourthBonusPriceRate = 8 * (10 ** uint256(decimals));//Dividing it with 100 0.08\r\n        isPaused = false;\r\n        tokensDistributed = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev directly send ether and transfer token to that account \r\n     */\r\n    function() payable public whenNotPaused{\r\n        require(msg.sender != 0x0);\r\n        require(now < deadLine);\r\n        if(isBurned){\r\n            revert();\r\n        }\r\n        uint tokensToTransfer = 0;\r\n        if(tokensDistributed >= 0 && tokensDistributed < firstBonusEstimate){\r\n            tokensToTransfer = (( msg.value * rateForToken ) / firstBonusPriceRate);\r\n        }\r\n        if(tokensDistributed >= firstBonusEstimate && tokensDistributed < secondBonusEstimate){\r\n            tokensToTransfer = (( msg.value * rateForToken ) / secondBonusPriceRate);\r\n        }\r\n        if(tokensDistributed >= secondBonusEstimate && tokensDistributed < thirdBonusEstimate){\r\n            tokensToTransfer = (( msg.value * rateForToken ) / thirdBonusPriceRate);\r\n        }\r\n        if(tokensDistributed >= thirdBonusEstimate && tokensDistributed < fourthBonusEstimate){\r\n            tokensToTransfer = (( msg.value * rateForToken ) / fourthBonusPriceRate);\r\n        }\r\n        \r\n        if(balances[owner] < tokensToTransfer) \r\n        {\r\n           revert();\r\n        }\r\n        \r\n        allowed[owner][msg.sender] += tokensToTransfer;\r\n        bool transferRes=transferFrom(owner, msg.sender, tokensToTransfer, deadLine);\r\n        if (!transferRes) {\r\n            revert();\r\n        }\r\n        else{\r\n            tokensDistributed += tokensToTransfer;\r\n            etherRaised += msg.value;\r\n        }\r\n    }\r\n    //Transfer All Balance to Address\r\n    function transferFundToAccount() public onlyOwner whenPaused returns(uint256 result){\r\n        require(etherRaised>0);\r\n        owner.transfer(etherRaised);\r\n        etherRaised=0;\r\n        return etherRaised;\r\n    }\r\n    //Transfer Bounty Reserve Tokens\r\n    function transferBountyReserveTokens(address _bountyAddress, uint256 tokensToTransfer) public onlyOwner {\r\n        tokensToTransfer = tokensToTransfer * (10 ** uint256(decimals));\r\n        if(bountyReserveTokensDistributed + tokensToTransfer > bountyReserveTokens){\r\n            revert();\r\n        }\r\n        allowed[owner][_bountyAddress] += tokensToTransfer;\r\n        bool transferRes=transferFrom(owner, _bountyAddress, tokensToTransfer, deadLine);\r\n        if (!transferRes) {\r\n            revert();\r\n        }\r\n        else{\r\n            bountyReserveTokensDistributed += tokensToTransfer;\r\n        }\r\n    }\r\n    //Transfer Bounty Reserve Tokens\r\n    function transferTeamReserveTokens(address _teamAddress, uint256 tokensToTransfer) public onlyOwner {\r\n        tokensToTransfer = tokensToTransfer * (10 ** uint256(decimals));\r\n        if(teamReserveTokensDistributed + tokensToTransfer > teamReserveTokens){\r\n            revert();\r\n        }\r\n        allowed[owner][_teamAddress] += tokensToTransfer;\r\n        bool transferRes=transferFrom(owner, _teamAddress, tokensToTransfer, deadLine);\r\n        if (!transferRes) {\r\n            revert();\r\n        }\r\n        else{\r\n            teamReserveTokensDistributed += tokensToTransfer;\r\n        }\r\n    }\r\n    //Transfer Bounty Reserve Tokens\r\n    function transferAdvisoryReserveTokens(address _advisoryAddress, uint256 tokensToTransfer) public onlyOwner {\r\n        tokensToTransfer = tokensToTransfer * (10 ** uint256(decimals));\r\n        if(advisoryReserveTokensDistributed + tokensToTransfer > advisoryReserveTokens){\r\n            revert();\r\n        }\r\n        allowed[owner][_advisoryAddress] += tokensToTransfer;\r\n        bool transferRes=transferFrom(owner, _advisoryAddress, tokensToTransfer, deadLine);\r\n        if (!transferRes) {\r\n            revert();\r\n        }\r\n        else{\r\n            advisoryReserveTokensDistributed += tokensToTransfer;\r\n        }\r\n    }\r\n    //Burning Of Tokens\r\n    function burn() public onlyOwner {\r\n        isBurned = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryReserveTokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"tokensToTransfer\",\"type\":\"uint256\"}],\"name\":\"transferBountyReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFundToAccount\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyReserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balanceOfUser\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyReserveTokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_advisoryAddress\",\"type\":\"address\"},{\"name\":\"tokensToTransfer\",\"type\":\"uint256\"}],\"name\":\"transferAdvisoryReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"tokensToTransfer\",\"type\":\"uint256\"}],\"name\":\"transferTeamReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryReserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveTokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"totalTokensToTransfer\",\"type\":\"uint256\"},{\"name\":\"deadLine_Locked\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Kirke","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fe8bc4af6803a4e3dc46cf4d324827487c8bb28cb6dadfb0cc6abfc1fa0f6e01"}]}