{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract Token {\r\n\r\n    function totalSupply() constant returns (uint supply) {}\r\n    function balanceOf(address _owner) constant returns (uint balance) {}\r\n    function transfer(address _to, uint _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\r\n    function approve(address _spender, uint _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Mooncat {\r\n        function giveCat(bytes5 catId, address to) public;\r\n        function catOwners(bytes5 catId) constant returns (address catOwner);\r\n\r\n}\r\ncontract MooncatListing is Ownable {\r\n    struct Listing {\r\n        address seller;\r\n        uint256 price;\r\n        uint256 dateStarts;\r\n        uint256 dateEnds;\r\n    }\r\n    Mooncat public sourceContract;\r\n    uint256 public ownerPercentage;\r\n    mapping (bytes5 => Listing) public tokenIdToListing;\r\n\r\n    string constant public VERSION = \"1.0.0\";\r\n    event ListingCreated(bytes5 indexed tokenId, uint256 price, uint256 dateStarts, uint256 dateEnds, address indexed seller);\r\n    event ListingCancelled(bytes5 indexed tokenId, uint256 dateCancelled);\r\n    event ListingBought(bytes5 indexed tokenId, uint256 price, uint256 dateBought, address buyer);\r\n\r\n    function MooncatListing(address targetContract, uint256 percentage) public {\r\n        ownerPercentage = percentage;\r\n        Mooncat contractPassed = Mooncat(targetContract);\r\n        sourceContract = contractPassed;\r\n    }\r\n\r\n    function updateOwnerPercentage(uint256 percentage) external onlyOwner {\r\n        ownerPercentage = percentage;\r\n    }\r\n\r\n    function withdrawBalance() onlyOwner external {\r\n        assert(owner.send(this.balance));\r\n    }\r\n    function approveToken(address token, uint256 amount) onlyOwner external {\r\n        assert(Token(token).approve(owner, amount));\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function createListing(bytes5 tokenId, uint256 price, uint256 dateEnds) external {\r\n        require(price > 0);\r\n        tokenIdToListing[tokenId] = Listing(msg.sender, price, now, dateEnds);\r\n        ListingCreated(tokenId, price, now, dateEnds, msg.sender);\r\n    }\r\n\r\n    function getListing(bytes5 tokenId) external view returns (address seller, uint256 price, uint256 dateStarts, uint256 dateEnds) {\r\n        Listing storage listing = tokenIdToListing[tokenId];\r\n        return (listing.seller, listing.price, listing.dateStarts, listing.dateEnds);\r\n    }\r\n\r\n    function buyListing(bytes5 tokenId) external payable {\r\n        Listing storage listing = tokenIdToListing[tokenId];\r\n        require(msg.value == listing.price);\r\n        require(now <= listing.dateEnds);\r\n        address seller = listing.seller;\r\n        uint256 currentPrice = listing.price;\r\n        delete tokenIdToListing[tokenId];\r\n        sourceContract.giveCat(tokenId, msg.sender);\r\n        seller.transfer(currentPrice - (currentPrice * ownerPercentage / 10000));\r\n        ListingBought(tokenId, listing.price, now, msg.sender);\r\n\r\n    }\r\n\r\n    function cancelListing(bytes5 tokenId) external {\r\n        Listing storage listing = tokenIdToListing[tokenId];\r\n        require(msg.sender == listing.seller || msg.sender == owner);\r\n        sourceContract.giveCat(tokenId, listing.seller);\r\n        delete tokenIdToListing[tokenId];\r\n        ListingCancelled(tokenId, now);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"bytes5\"}],\"name\":\"buyListing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"updateOwnerPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"name\":\"tokenIdToListing\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"dateStarts\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"bytes5\"}],\"name\":\"getListing\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"dateStarts\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"bytes5\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"bytes5\"}],\"name\":\"cancelListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"targetContract\",\"type\":\"address\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateEnds\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"dateCancelled\",\"type\":\"uint256\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ListingBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MooncatListing","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000060cd862c9c687a9de49aecdc3a99b74a4fc54ab600000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://1be1b29438b2e16c3151b2adf7ed726d2ebb3632debed9be0d9762b0a9fca1c5"}]}