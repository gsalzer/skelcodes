{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Bob {\r\n  using SafeMath for uint;\r\n\r\n  enum DepositState {\r\n    Uninitialized,\r\n    BobMadeDeposit,\r\n    AliceClaimedDeposit,\r\n    BobClaimedDeposit\r\n  }\r\n\r\n  enum PaymentState {\r\n    Uninitialized,\r\n    BobMadePayment,\r\n    AliceClaimedPayment,\r\n    BobClaimedPayment\r\n  }\r\n\r\n  struct BobDeposit {\r\n    bytes20 depositHash;\r\n    uint64 lockTime;\r\n    DepositState state;\r\n  }\r\n\r\n  struct BobPayment {\r\n    bytes20 paymentHash;\r\n    uint64 lockTime;\r\n    PaymentState state;\r\n  }\r\n\r\n  mapping (bytes32 => BobDeposit) public deposits;\r\n\r\n  mapping (bytes32 => BobPayment) public payments;\r\n\r\n  function Bob() {\r\n  }\r\n\r\n  function bobMakesEthDeposit(\r\n    bytes32 _txId,\r\n    address _alice,\r\n    bytes20 _secretHash,\r\n    uint64 _lockTime\r\n  ) external payable {\r\n    require(_alice != 0x0 && msg.value > 0 && deposits[_txId].state == DepositState.Uninitialized);\r\n    bytes20 depositHash = ripemd160(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      address(0),\r\n      msg.value\r\n    );\r\n    deposits[_txId] = BobDeposit(\r\n      depositHash,\r\n      _lockTime,\r\n      DepositState.BobMadeDeposit\r\n    );\r\n  }\r\n\r\n  function bobMakesErc20Deposit(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _alice,\r\n    bytes20 _secretHash,\r\n    address _tokenAddress,\r\n    uint64 _lockTime\r\n  ) external {\r\n    bytes20 depositHash = ripemd160(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      _tokenAddress,\r\n      _amount\r\n    );\r\n    deposits[_txId] = BobDeposit(\r\n      depositHash,\r\n      _lockTime,\r\n      DepositState.BobMadeDeposit\r\n    );\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    assert(token.transferFrom(msg.sender, address(this), _amount));\r\n  }\r\n\r\n  function bobClaimsDeposit(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    bytes32 _secret,\r\n    address _alice,\r\n    address _tokenAddress\r\n  ) external {\r\n    require(deposits[_txId].state == DepositState.BobMadeDeposit);\r\n    bytes20 depositHash = ripemd160(\r\n      _alice,\r\n      msg.sender,\r\n      ripemd160(sha256(_secret)),\r\n      _tokenAddress,\r\n      _amount\r\n    );\r\n    require(depositHash == deposits[_txId].depositHash && now < deposits[_txId].lockTime);\r\n    deposits[_txId].state = DepositState.BobClaimedDeposit;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function aliceClaimsDeposit(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _bob,\r\n    address _tokenAddress,\r\n    bytes20 _secretHash\r\n  ) external {\r\n    require(deposits[_txId].state == DepositState.BobMadeDeposit);\r\n    bytes20 depositHash = ripemd160(\r\n      msg.sender,\r\n      _bob,\r\n      _secretHash,\r\n      _tokenAddress,\r\n      _amount\r\n    );\r\n    require(depositHash == deposits[_txId].depositHash && now >= deposits[_txId].lockTime);\r\n    deposits[_txId].state = DepositState.AliceClaimedDeposit;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function bobMakesEthPayment(\r\n    bytes32 _txId,\r\n    address _alice,\r\n    bytes20 _secretHash,\r\n    uint64 _lockTime\r\n  ) external payable {\r\n    require(_alice != 0x0 && msg.value > 0 && payments[_txId].state == PaymentState.Uninitialized);\r\n    bytes20 paymentHash = ripemd160(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      address(0),\r\n      msg.value\r\n    );\r\n    payments[_txId] = BobPayment(\r\n      paymentHash,\r\n      _lockTime,\r\n      PaymentState.BobMadePayment\r\n    );\r\n  }\r\n\r\n  function bobMakesErc20Payment(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _alice,\r\n    bytes20 _secretHash,\r\n    address _tokenAddress,\r\n    uint64 _lockTime\r\n  ) external {\r\n    require(\r\n      _alice != 0x0 &&\r\n      _amount > 0 &&\r\n      payments[_txId].state == PaymentState.Uninitialized &&\r\n      _tokenAddress != 0x0\r\n    );\r\n    bytes20 paymentHash = ripemd160(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      _tokenAddress,\r\n      _amount\r\n    );\r\n    payments[_txId] = BobPayment(\r\n      paymentHash,\r\n      _lockTime,\r\n      PaymentState.BobMadePayment\r\n    );\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    assert(token.transferFrom(msg.sender, address(this), _amount));\r\n  }\r\n\r\n  function bobClaimsPayment(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _alice,\r\n    address _tokenAddress,\r\n    bytes20 _secretHash\r\n  ) external {\r\n    require(payments[_txId].state == PaymentState.BobMadePayment);\r\n    bytes20 paymentHash = ripemd160(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      _tokenAddress,\r\n      _amount\r\n    );\r\n    require(now >= payments[_txId].lockTime && paymentHash == payments[_txId].paymentHash);\r\n    payments[_txId].state = PaymentState.BobClaimedPayment;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function aliceClaimsPayment(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    bytes32 _secret,\r\n    address _bob,\r\n    address _tokenAddress\r\n  ) external {\r\n    require(payments[_txId].state == PaymentState.BobMadePayment);\r\n    bytes20 paymentHash = ripemd160(\r\n      msg.sender,\r\n      _bob,\r\n      ripemd160(sha256(_secret)),\r\n      _tokenAddress,\r\n      _amount\r\n    );\r\n    require(now < payments[_txId].lockTime && paymentHash == payments[_txId].paymentHash);\r\n    payments[_txId].state = PaymentState.AliceClaimedPayment;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"paymentHash\",\"type\":\"bytes20\"},{\"name\":\"lockTime\",\"type\":\"uint64\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"aliceClaimsPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"bobClaimsDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"depositHash\",\"type\":\"bytes20\"},{\"name\":\"lockTime\",\"type\":\"uint64\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"}],\"name\":\"aliceClaimsDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesEthPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesErc20Deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesErc20Payment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesEthDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"}],\"name\":\"bobClaimsPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bob","CompilerVersion":"v0.4.22-nightly.2018.3.14+commit.c3f07b52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a4c5ca3f359d962bbd845809ba6d9416b2d47f125f108722acbeb1d907264bcd"}]}