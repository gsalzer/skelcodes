{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// This is based on https://github.com/OpenZeppelin/openzeppelin-solidity.\r\n// We announced each .sol file and omitted the verbose comments.\r\n// Gas limit : 3,000,000\r\n\r\nlibrary SafeMath {                             //SafeMath.sol\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) { return 0; }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract QurozToken { // pulbic functions of Token\r\n  function transfer(address _to, uint256 _value) public returns (bool) {}\r\n}\r\n\r\ncontract QforaSale {\r\n  using SafeMath for uint256;                         //RefundableCrowdsale.sol\r\n  uint256 public goal;                                //RefundableCrowdsale.sol, goal of wei\r\n  uint256 public rate;                                //Crowdsale.sol, Token = wei * rate\r\n  uint256 public openingTime;                         //TimedCrowdsale.sol\r\n  uint256 public closingTime;                         //TimedCrowdsale.sol\r\n  uint256 public weiRaised;                           //Crowdsale.sol\r\n  uint256 public tokenSold;          //new\r\n  uint256 public threshold;          //new\r\n  uint256 public hardCap;            //new\r\n  uint256 public bonusRate;          // new, 20 means 20% \r\n  address public wallet;                              //RefundVault.sol\r\n  address public owner;                               //Ownable.sol\r\n  bool public isFinalized;                     //FinalizableCrowdsale.sol\r\n  mapping(address => uint256) public balances;       //PostDeliveryCrowdsale.sol, info for withdraw\r\n  mapping(address => uint256) public deposited;      //RefundVault.sol,           info for refund\r\n  mapping(address => bool) public whitelist;          //WhitelistedCrowdsale.sol\r\n  enum State { Active, Refunding, Closed }            //RefundVault.sol\r\n  State public state;                                 //RefundVault.sol\r\n  QurozToken public token;\r\n\r\n  event Closed();                                     //RefundVault.sol\r\n  event RefundsEnabled();                             //RefundVault.sol\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);   //RefundVault.sol\r\n  event Finalized();                                      //FinalizableCrowdsale.sol\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);  //Ownable.sol\r\n  event TokenPurchase(address indexed purchaser,address indexed beneficiary,uint256 value,uint256 amount); //Crowdsale\r\n\r\n  constructor(address _wallet, QurozToken _token) public {\r\n    require(_wallet != address(0) && _token != address(0));\r\n    owner = msg.sender;\r\n    wallet = _wallet;\r\n    token = _token;\r\n    goal = 5000e18;\r\n    rate = 10000;\r\n    threshold = 100e18;\r\n    hardCap = 50000e18;\r\n    bonusRate = 20;\r\n    openingTime = now.add(0 minutes);\r\n    closingTime = openingTime.add(22 days + 5 hours + 30 minutes);\r\n    require(block.timestamp <= openingTime && openingTime <= closingTime);\r\n  }\r\n\r\n  modifier onlyOwner() {require(msg.sender == owner); _;}            //Ownable.sol\r\n  modifier isWhitelisted(address _beneficiary) {require(whitelist[_beneficiary]); _;}  //WhitelistedCrowdsale.sol\r\n\r\n  function addToWhitelist(address _beneficiary) public onlyOwner {      //WhitelistedCrowdsale.sol (external to public)\r\n    whitelist[_beneficiary] = true;\r\n  }\r\n\r\n  function addManyToWhitelist(address[] _beneficiaries) public onlyOwner { //WhitelistedCrowdsale.sol (external to public)\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  function removeFromWhitelist(address _beneficiary) public onlyOwner { //WhitelistedCrowdsale.sol (external to public)\r\n    whitelist[_beneficiary] = false;\r\n  }\r\n\r\n  function () external payable {                                            //Crowdsale.sol\r\n    require(openingTime <= block.timestamp && block.timestamp <= closingTime);      // new\r\n    require(whitelist[msg.sender]);        // new\r\n    require(msg.value >= threshold );      // new\r\n    require(weiRaised.add(msg.value) <= hardCap );      // new\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address _beneficiary) public payable {                           //Crowdsale.sol\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n    uint256 totalTokens = tokens.mul(100 + bonusRate).div(100);\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokenSold = tokenSold.add(totalTokens);          // new\r\n    _processPurchase(_beneficiary, totalTokens);     // changed parameter to totalTokens\r\n    deposit(_beneficiary, msg.value);           // new\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n//    _updatePurchasingState(_beneficiary, weiAmount);\r\n//    _forwardFunds();                                // masking for refund\r\n//    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {    \r\n      //Crowdsale.sol, WhitelistedCrowdsale.sol\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {        //Crowdsale.sol\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {      //PostDeliveryCrowdsale.sol\r\n//    _deliverTokens(_beneficiary, _tokenAmount);  //Crowdsale.sol\r\n    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);  // new\r\n\r\n  }\r\n\r\n  function hasClosed() public view returns (bool) {               //TimedCrowdsale.sol\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  function deposit(address investor, uint256 value) internal {  //RefundVault.sol (liternal, no payable, add value)\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(value);\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {    //RefundableCrowdsale.sol\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n  function finalize() onlyOwner public {          //FinalizableCrowdsale.sol\r\n    require(!isFinalized);\r\n    require(hasClosed());   // finalizing after timeout\r\n    finalization();\r\n    emit Finalized();\r\n    isFinalized = true;\r\n  }\r\n\r\n  function finalization() internal {                     //RefundableCrowdsale.sol (change state)\r\n    if (goalReached()) { close(); } \r\n    else               { enableRefunds(); }\r\n    //super.finalization();\r\n  }\r\n\r\n  function close() onlyOwner public {   //RefundVault.sol (Active -> Closed if goal reached)\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public { //RefundVault.sol (Active -> Refunding if goal not reached)\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  function claimRefund() public {                         //RefundableCrowdsale.sol\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n    refund(msg.sender);\r\n  }\r\n\r\n  function refund(address investor) public {       //RefundVault.sol\r\n    require(state == State.Refunding);\r\n    require(deposited[investor] > 0);                                                                   // new     \r\n    uint256 depositedValue = deposited[investor];\r\n    balances[investor] = 0;                                                                             // new\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {       //Crowdsale.sol\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function withdrawTokens() public {                              //PostDeliveryCrowdsale.sol\r\n    require(hasClosed());\r\n    uint256 amount = balances[msg.sender];\r\n    require(amount > 0);\r\n    balances[msg.sender] = 0;\r\n    _deliverTokens(msg.sender, amount);\r\n    deposited[msg.sender] = 0;                        //new\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner { //Ownable.sol\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address _newOwner) internal {       //Ownable.sol\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n    \r\n  function destroyAndSend(address _recipient) onlyOwner public {   //Destructible.sol\r\n    selfdestruct(_recipient);\r\n  }\r\n\r\n/* new functions */\r\n  function transferToken(address to, uint256 value) onlyOwner public { \r\n    token.transfer(to, value);\r\n  }\r\n  \r\n  function setBonusRate(uint256 _bonusRate) public onlyOwner{\r\n    _setBonusRate(_bonusRate);\r\n  }\r\n\r\n  function _setBonusRate(uint256 _bonusRate) internal {\r\n    bonusRate = _bonusRate;\r\n  }\r\n  \r\n  function getBalanceOf(address investor) public view returns(uint256) {\r\n    return balances[investor];\r\n  }\r\n\r\n  function getDepositedOf(address investor) public view returns(uint256) {\r\n    return deposited[investor];\r\n  }\r\n\r\n  function getWeiRaised() public view returns(uint256) {\r\n    return weiRaised;\r\n  }\r\n\r\n  function getTokenSold() public view returns(uint256) {\r\n    return tokenSold;\r\n  }\r\n\r\n  function addSmallInvestor(address _beneficiary, uint256 weiAmount, uint256 totalTokens) public onlyOwner {\r\n    require(whitelist[_beneficiary]);\r\n    require(weiAmount >= 1 ether );\r\n    require(weiRaised.add(weiAmount) <= hardCap );\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokenSold = tokenSold.add(totalTokens);\r\n    _processPurchase(_beneficiary, totalTokens);\r\n    //deposit(_beneficiary, weiAmount);       // ether was input to wallet address, so no deposit\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusRate\",\"type\":\"uint256\"}],\"name\":\"setBonusRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getDepositedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"addSmallInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"QforaSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d536ec9ea92c2ac7c40c2e533e18fa3f5c3abe4600000000000000000000000090c93e7fe79fd0c9d1a437ac715ff8752e3eac88","Library":"","SwarmSource":"bzzr://d563c9ce609e86d79be5565c0b9a6d7f25018a3759c8e72a42af5245bfe4033f"}]}