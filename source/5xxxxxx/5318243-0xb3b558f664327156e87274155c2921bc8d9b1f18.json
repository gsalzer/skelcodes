{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract CHXToken is BurnableToken, Ownable {\r\n    string public constant name = \"Chainium\";\r\n    string public constant symbol = \"CHX\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    bool public isRestricted = true;\r\n    address public tokenSaleContractAddress;\r\n\r\n    function CHXToken()\r\n        public\r\n    {\r\n        totalSupply = 200000000e18;\r\n        balances[owner] = totalSupply;\r\n        Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n    function setTokenSaleContractAddress(address _tokenSaleContractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_tokenSaleContractAddress != address(0));\r\n        tokenSaleContractAddress = _tokenSaleContractAddress;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Transfer Restriction\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function setRestrictedState(bool _isRestricted)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isRestricted = _isRestricted;\r\n    }\r\n\r\n    modifier restricted() {\r\n        if (isRestricted) {\r\n            require(\r\n                msg.sender == owner ||\r\n                (msg.sender == tokenSaleContractAddress && tokenSaleContractAddress != address(0))\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Transfers\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        restricted\r\n        returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        restricted\r\n        returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value)\r\n        public\r\n        restricted\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        restricted\r\n        returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        restricted\r\n        returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Batch transfers\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function batchTransfer(address[] _recipients, uint[] _values)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_recipients.length == _values.length);\r\n\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            require(transfer(_recipients[i], _values[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function batchTransferFrom(address _from, address[] _recipients, uint[] _values)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_recipients.length == _values.length);\r\n\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            require(transferFrom(_from, _recipients[i], _values[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function batchTransferFromMany(address[] _senders, address _to, uint[] _values)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_senders.length == _values.length);\r\n\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            require(transferFrom(_senders[i], _to, _values[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function batchTransferFromManyToMany(address[] _senders, address[] _recipients, uint[] _values)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_senders.length == _recipients.length);\r\n        require(_senders.length == _values.length);\r\n\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            require(transferFrom(_senders[i], _recipients[i], _values[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function batchApprove(address[] _spenders, uint[] _values)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_spenders.length == _values.length);\r\n\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            require(approve(_spenders[i], _values[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function batchIncreaseApproval(address[] _spenders, uint[] _addedValues)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_spenders.length == _addedValues.length);\r\n\r\n        for (uint i = 0; i < _addedValues.length; i++) {\r\n            require(increaseApproval(_spenders[i], _addedValues[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function batchDecreaseApproval(address[] _spenders, uint[] _subtractedValues)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_spenders.length == _subtractedValues.length);\r\n\r\n        for (uint i = 0; i < _subtractedValues.length; i++) {\r\n            require(decreaseApproval(_spenders[i], _subtractedValues[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Miscellaneous\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function burn(uint _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        super.burn(_value);\r\n    }\r\n\r\n    // Enable recovery of ether sent by mistake to this contract's address.\r\n    function drainStrayEther(uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        owner.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    // Enable recovery of any ERC20 compatible token, sent by mistake to this contract's address.\r\n    function drainStrayTokens(ERC20Basic _token, uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return _token.transfer(owner, _amount);\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract Whitelistable is Ownable {\r\n\r\n    mapping (address => bool) whitelist;\r\n    address public whitelistAdmin;\r\n\r\n    function Whitelistable()\r\n        public\r\n    {\r\n        whitelistAdmin = owner; // Owner fulfils the role of the admin initially, until new admin is set.\r\n    }\r\n\r\n    modifier onlyOwnerOrWhitelistAdmin() {\r\n        require(msg.sender == owner || msg.sender == whitelistAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address _address)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return whitelist[_address];\r\n    }\r\n\r\n    function addToWhitelist(address[] _addresses)\r\n        external\r\n        onlyOwnerOrWhitelistAdmin\r\n    {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address[] _addresses)\r\n        external\r\n        onlyOwnerOrWhitelistAdmin\r\n    {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function setWhitelistAdmin(address _newAdmin)\r\n        public\r\n        onlyOwnerOrWhitelistAdmin\r\n    {\r\n        require(_newAdmin != address(0));\r\n        whitelistAdmin = _newAdmin;\r\n    }\r\n}\r\n\r\ncontract CHXTokenSale is Whitelistable {\r\n    using SafeMath for uint;\r\n\r\n    event TokenPurchased(address indexed investor, uint contribution, uint tokens);\r\n\r\n    uint public constant TOKEN_PRICE = 170 szabo; // Assumes token has 18 decimals\r\n\r\n    uint public saleStartTime;\r\n    uint public saleEndTime;\r\n    uint public maxGasPrice = 20e9 wei; // 20 GWEI - to prevent \"gas race\"\r\n    uint public minContribution = 100 finney; // 0.1 ETH\r\n    uint public maxContributionPhase1 = 500 finney; // 0.5 ETH\r\n    uint public maxContributionPhase2 = 10 ether;\r\n    uint public phase1DurationInHours = 24;\r\n\r\n    CHXToken public tokenContract;\r\n\r\n    mapping (address => uint) public etherContributions;\r\n    mapping (address => uint) public tokenAllocations;\r\n    uint public etherCollected;\r\n    uint public tokensSold;\r\n\r\n    function CHXTokenSale()\r\n        public\r\n    {\r\n    }\r\n\r\n    function setTokenContract(address _tokenContractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_tokenContractAddress != address(0));\r\n        tokenContract = CHXToken(_tokenContractAddress);\r\n        require(tokenContract.decimals() == 18); // Calculations assume 18 decimals (1 ETH = 10^18 WEI)\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != owner);\r\n\r\n        if (whitelistAdmin == owner) {\r\n            setWhitelistAdmin(newOwner);\r\n        }\r\n\r\n        super.transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Sale\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        address investor = msg.sender;\r\n        uint contribution = msg.value;\r\n\r\n        require(saleStartTime <= now && now <= saleEndTime);\r\n        require(tx.gasprice <= maxGasPrice);\r\n        require(whitelist[investor]);\r\n        require(contribution >= minContribution);\r\n        if (phase1DurationInHours.mul(1 hours).add(saleStartTime) >= now) {\r\n            require(etherContributions[investor].add(contribution) <= maxContributionPhase1);\r\n        } else {\r\n            require(etherContributions[investor].add(contribution) <= maxContributionPhase2);\r\n        }\r\n\r\n        etherContributions[investor] = etherContributions[investor].add(contribution);\r\n        etherCollected = etherCollected.add(contribution);\r\n\r\n        uint multiplier = 1e18; // 18 decimal places\r\n        uint tokens = contribution.mul(multiplier).div(TOKEN_PRICE);\r\n        tokenAllocations[investor] = tokenAllocations[investor].add(tokens);\r\n        tokensSold = tokensSold.add(tokens);\r\n\r\n        require(tokenContract.transfer(investor, tokens));\r\n        TokenPurchased(investor, contribution, tokens);\r\n    }\r\n\r\n    function sendCollectedEther(address _recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (this.balance > 0) {\r\n            _recipient.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function sendRemainingTokens(address _recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint unsoldTokens = tokenContract.balanceOf(this);\r\n        if (unsoldTokens > 0) {\r\n            require(tokenContract.transfer(_recipient, unsoldTokens));\r\n        }\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Configuration\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function setSaleTime(uint _newStartTime, uint _newEndTime)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_newStartTime <= _newEndTime);\r\n        saleStartTime = _newStartTime;\r\n        saleEndTime = _newEndTime;\r\n    }\r\n\r\n    function setMaxGasPrice(uint _newMaxGasPrice)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_newMaxGasPrice > 0);\r\n        maxGasPrice = _newMaxGasPrice;\r\n    }\r\n\r\n    function setMinContribution(uint _newMinContribution)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_newMinContribution > 0);\r\n        minContribution = _newMinContribution;\r\n    }\r\n\r\n    function setMaxContributionPhase1(uint _newMaxContributionPhase1)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_newMaxContributionPhase1 > minContribution);\r\n        maxContributionPhase1 = _newMaxContributionPhase1;\r\n    }\r\n\r\n    function setMaxContributionPhase2(uint _newMaxContributionPhase2)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_newMaxContributionPhase2 > minContribution);\r\n        maxContributionPhase2 = _newMaxContributionPhase2;\r\n    }\r\n\r\n    function setPhase1DurationInHours(uint _newPhase1DurationInHours)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_newPhase1DurationInHours > 0);\r\n        phase1DurationInHours = _newPhase1DurationInHours;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sendCollectedEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAllocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxContributionPhase2\",\"type\":\"uint256\"}],\"name\":\"setMaxContributionPhase2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase1DurationInHours\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinContribution\",\"type\":\"uint256\"}],\"name\":\"setMinContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxContributionPhase1\",\"type\":\"uint256\"}],\"name\":\"setMaxContributionPhase1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributionPhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sendRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributionPhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStartTime\",\"type\":\"uint256\"},{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setSaleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPhase1DurationInHours\",\"type\":\"uint256\"}],\"name\":\"setPhase1DurationInHours\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CHXTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb46f0a03116fd327a6cdbeaae12e252a3ea33577df9f7699ccf7d5544a20174"}]}