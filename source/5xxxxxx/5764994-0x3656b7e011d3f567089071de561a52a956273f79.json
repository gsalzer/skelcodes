{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n    event Ownership(address _prevOwner, address _newOwner, uint _timestamp);\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit Ownership(owner, newOwner, now);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint _totalSupply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract ERC20Token is ERC20 {\r\n    using SafeMath for uint;\r\n    uint public totalToken;\r\n\tbool public frozen;\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowances;\r\n\tmapping (address => bool) public frozenAccounts;\r\n\t\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\r\n\t\trequire(_from != 0x0 && _to != 0x0);\r\n        require(balances[_from] >= _value && _value > 0);\r\n\t\trequire(!frozen);\r\n\t\trequire(!frozenAccounts[_from]);\r\n        require(!frozenAccounts[_to]);\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\t\tassert(balances[_from] + balances[_to] == previousBalances);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        return _transfer(msg.sender, _to,  _value) ;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(allowances[_from][msg.sender] >= _value);     \r\n\t\tallowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return totalToken;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        require((_value == 0) || (allowances[msg.sender][_spender] == 0));\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract Lover is ERC20Token, Owned {\r\n\tstring public name = \"Lover\";\r\n    string public symbol = \"LOV\";\r\n    uint public constant decimals = 18;\r\n\tstring public note = \"(C) Loverchain.com all rights reserved.\";\r\n    uint public burnedToken;\r\n\tuint public fee;\r\n\tmapping (address => bool) public certifiedAccounts;\r\n\tmapping (address => string) public keys;\r\n\tmapping (address => string) public signatures;\r\n\tmapping (address => string) public identities;\r\n\tmapping (address => uint) public scores;\r\n\tmapping (address => uint) public levels;\r\n    mapping (address => uint) public stars;\r\n    mapping (address => string) public profiles;\r\n\tmapping (address => string) public properties;\r\n\tmapping (address => string) public rules;\r\n    mapping (address => string) public funds;\r\n\tmapping (address => uint) public nonces;\r\n\tevent Key(address indexed _user, string indexed _key, uint _timestamp);\r\n\tevent Sign(address indexed _user, string indexed _data, uint _timestamp);\r\n\tevent Register(address indexed _user, string indexed _identity, address _certifier, uint _timestamp);\r\n\tevent Rule(address indexed _user, string _rule, address indexed _certifier, uint _timestamp);\r\n\tevent Fund(address indexed _user, string _fund, address indexed _certifier, uint _timestamp);\r\n\tevent Save(address indexed _user, uint _score, uint _level, uint _star, address indexed _certifier, uint _nonce, uint _timestamp);\r\n\tevent Burn(address indexed _from, uint _burntAmount, uint _timestamp);\r\n    event FreezeAccount(address indexed _target, bool _frozen, uint _timestamp);\r\n\tevent CertifyAccount(address indexed _target, bool _certified, uint _timestamp);\r\n\r\n    constructor() public {\r\n\t\ttotalToken = 1000000000000000000000000000;\r\n\t\tbalances[msg.sender] = totalToken;\r\n\t\towner = msg.sender;\r\n\t    frozen = false;\r\n\t\tfee = 0;\r\n\t\tcertifiedAccounts[msg.sender] = true; \r\n    }\r\n\r\n    function burn(uint _burntAmount) public returns (bool success) {\r\n    \trequire(balances[msg.sender] >= _burntAmount && _burntAmount > 0);\r\n    \tbalances[msg.sender] = balances[msg.sender].sub(_burntAmount);\r\n    \ttotalToken = totalToken.sub(_burntAmount);\r\n    \tburnedToken = burnedToken.add(_burntAmount);\r\n    \temit Transfer(msg.sender, 0x0, _burntAmount);\r\n    \temit Burn(msg.sender, _burntAmount, now);\r\n    \treturn true;\r\n\t}\r\n\r\n    function setKey(string _key) public {\r\n        require(bytes(_key).length > 1);\r\n        keys[msg.sender] = _key;\r\n\t\temit Key(msg.sender, _key, now);\r\n    }\r\n\r\n    function sign(string _data) public {\r\n        require(bytes(_data).length > 1);\r\n        signatures[msg.sender] = _data;\r\n\t\temit Sign(msg.sender, _data, now);\r\n    }\r\n\r\n\tfunction register(address _user, string _identity) public {\r\n\t\trequire(bytes(_identity).length > 1);\r\n\t\trequire(certifiedAccounts[msg.sender]);\r\n\t\tidentities[_user] = _identity;\r\n\t\temit Register(_user, _identity, msg.sender, now);\r\n    }\r\n\r\n    function _save(address _user, uint _score, uint _level, uint _star, string _profile, string _property, address _certifier, uint _nonce, uint _timestamp) internal returns (bool success){\r\n\t\trequire(_nonce > nonces[_user]);\r\n\t\trequire(!frozen);\r\n\t\trequire(!frozenAccounts[_user]); \r\n\t    if(bytes(_profile).length > 1){\r\n\t\t\tprofiles[_user] = _profile;\r\n\t\t}\r\n\t    if(bytes(_property).length > 1){\r\n\t\t    properties[_user] = _property;\r\n\t\t}\r\n\t\tlevels[_user] = _level;\r\n\t\tscores[_user] = _score;\r\n        stars[_user] = _star;\r\n\t\tnonces[_user] = _nonce;\r\n\t\temit Save(_user, _score, _level, _star, _certifier, _nonce, _timestamp);\r\n\t\treturn true;\r\n    }\r\n\r\n    function save(address _user, uint _score, uint _level, uint _star, string _profile, string _property, uint _nonce) public returns (bool success){\r\n        require(certifiedAccounts[msg.sender]);  \r\n\t\treturn _save(_user, _score, _level, _star, _profile, _property, msg.sender, _nonce, now);\r\n    }\r\n\r\n\tfunction _assign(address _from, address _to, address _certifier) internal returns (bool success){\r\n\t\trequire(_from != 0x0 && _to != 0x0);\r\n\t\trequire(!frozen);\r\n\t\trequire(!frozenAccounts[_from]);\r\n        require(!frozenAccounts[_to]); \r\n\t\t_save(_to, scores[_from], levels[_from], stars[_from], profiles[_from], properties[_from], _certifier, nonces[_from], now);\r\n        profiles[_from] = \"\";\r\n        properties[_from] = \"\";\r\n\t\tscores[_from] = 0; \r\n\t\tlevels[_from] = 0;\r\n\t\tstars[_from] = 0;\r\n\t\treturn true;\r\n    }\r\n\r\n    function assign(address _to) public returns (bool success){\r\n        require(nonces[_to] == 0);\r\n\t\treturn _assign(msg.sender, _to, msg.sender);\r\n\t}\r\n\r\n\tfunction assignFrom(address _from, address _to) public returns (bool success){\r\n        require(certifiedAccounts[msg.sender]);\r\n\t    return _assign(_from, _to, msg.sender);\r\n    }\r\n\r\n    function setRule(address _user, string _rule) public {\r\n\t\trequire(certifiedAccounts[msg.sender]);\r\n        rules[_user] = _rule;\r\n\t\temit Rule(_user, _rule, msg.sender, now);\r\n    }\r\n\r\n\tfunction setFund(address _user, string _fund) public {\r\n\t\trequire(certifiedAccounts[msg.sender]);\r\n        funds[_user] = _fund;\r\n\t\temit Fund(_user, _fund, msg.sender, now);\r\n    }\r\n    \r\n  \tfunction freeze(bool _frozen) public onlyOwner {\r\n        frozen = _frozen;\r\n    }\r\n\r\n    function freezeAccount(address _user, bool _frozen) public onlyOwner {\r\n        frozenAccounts[_user] = _frozen;\r\n        emit FreezeAccount(_user, _frozen, now);\r\n    }\r\n    \r\n\tfunction certifyAccount(address _user, bool _certified) public onlyOwner {\r\n        certifiedAccounts[_user] = _certified;\r\n        emit CertifyAccount(_user, _certified, now);\r\n    }\r\n\r\n\tfunction transferToken(address _tokenAddress, address _recipient, uint _value) public onlyOwner returns (bool success) {\r\n        return ERC20(_tokenAddress).transfer(_recipient, _value);\r\n    }\r\n\r\n\tfunction setName(string _tokenName, string _tokenSymbol) public onlyOwner {\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol; \r\n\t}\r\n\r\n\tfunction setNote(string _tokenNote) public onlyOwner {\r\n        note = _tokenNote;\r\n\t}\r\n\r\n\tfunction setFee(uint _value) public onlyOwner {\r\n        fee = _value;\r\n\t}\r\n\r\n    function random(uint _range) public view returns(uint) {\r\n\t    if(_range == 0) {\r\n\t       return 0;  \r\n\t    }\r\n        uint ran = uint(keccak256(abi.encodePacked(block.difficulty, now)));\r\n        return ran % _range;\r\n    }\r\n    \r\n    function shuffle(uint[] _values) public view returns(uint[]) {\r\n        uint len = _values.length;\r\n        uint[] memory t = _values; \r\n        uint temp = 0;\r\n        uint ran = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n           ran = random(i + 1);\r\n          if (ran != i){\r\n              temp = t[i];\r\n              t[i] = t[ran];\r\n              t[ran] = temp;\r\n          }\r\n        }\r\n        return t;\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_rule\",\"type\":\"string\"}],\"name\":\"setRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_fund\",\"type\":\"string\"}],\"name\":\"setFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"properties\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenNote\",\"type\":\"string\"}],\"name\":\"setNote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_identity\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rules\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_score\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_star\",\"type\":\"uint256\"},{\"name\":\"_profile\",\"type\":\"string\"},{\"name\":\"_property\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"save\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burntAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"levels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"shuffle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"assignFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"scores\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"assign\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_certified\",\"type\":\"bool\"}],\"name\":\"certifyAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"setKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"profiles\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatures\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"identities\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"certifiedAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Key\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_data\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Sign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_identity\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_certifier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rule\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_certifier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Rule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fund\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_certifier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_score\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_star\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_certifier\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Save\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_burntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FreezeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_certified\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"CertifyAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Ownership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Lover","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ff20f8bff7ab70dabbcbf48041f331db47d7d030bc4ddcc36d177397c9d85ac"}]}