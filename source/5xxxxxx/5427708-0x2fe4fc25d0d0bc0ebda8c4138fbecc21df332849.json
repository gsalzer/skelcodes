{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedToken(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n} \r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n/*\r\n  HardcapToken is PausableToken and on the creation it is paused.\r\n  It is made so because you don't want token to be transferable etc,\r\n  while your ico is not over.\r\n*/\r\ncontract HardcapToken is CappedToken, PausableToken, BurnableToken {\r\n\r\n  uint256 private constant TOKEN_CAP = 100 * 10**24;\r\n\r\n  string public constant name = \"Welltrado token\";\r\n  string public constant symbol = \"WTL\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  function HardcapToken() public CappedToken(TOKEN_CAP) {\r\n    paused = true;\r\n  }\r\n}\r\n\r\ncontract HardcapCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct Phase {\r\n    uint256 capTo;\r\n    uint256 rate;\r\n  }\r\n\r\n  uint256 private constant TEAM_PERCENTAGE = 10;\r\n  uint256 private constant PLATFORM_PERCENTAGE = 25;\r\n  uint256 private constant CROWDSALE_PERCENTAGE = 65;\r\n\r\n  uint256 private constant MIN_TOKENS_TO_PURCHASE = 100 * 10**18;\r\n\r\n  uint256 private constant ICO_TOKENS_CAP = 65 * 10**24;\r\n\r\n  uint256 private constant FINAL_CLOSING_TIME = 1529928000;\r\n\r\n  uint256 private constant INITIAL_START_DATE = 1524484800;\r\n\r\n  uint256 public phase = 0;\r\n\r\n  HardcapToken public token;\r\n\r\n  address public wallet;\r\n  address public platform;\r\n  address public assigner;\r\n  address public teamTokenHolder;\r\n\r\n  uint256 public weiRaised;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  uint256 public openingTime = 1524484800;\r\n  uint256 public closingTime = 1525089600;\r\n  uint256 public finalizedTime;\r\n\r\n  mapping (uint256 => Phase) private phases;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event TokenAssigned(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n\r\n\r\n  event Finalized();\r\n\r\n  modifier onlyAssginer() {\r\n    require(msg.sender == assigner);\r\n    _;\r\n  }\r\n\r\n  function HardcapCrowdsale(address _wallet, address _platform, address _assigner, HardcapToken _token) public {\r\n      require(_wallet != address(0));\r\n      require(_assigner != address(0));\r\n      require(_platform != address(0));\r\n      require(_token != address(0));\r\n\r\n      wallet = _wallet;\r\n      platform = _platform;\r\n      assigner = _assigner;\r\n      token = _token;\r\n\r\n      // phases capTo means that totalSupply must reach it to change the phase\r\n      phases[0] = Phase(15 * 10**23, 1250);\r\n      phases[1] = Phase(10 * 10**24, 1200);\r\n      phases[2] = Phase(17 * 10**24, 1150);\r\n      phases[3] = Phase(24 * 10**24, 1100);\r\n      phases[4] = Phase(31 * 10**24, 1070);\r\n      phases[5] = Phase(38 * 10**24, 1050);\r\n      phases[6] = Phase(47 * 10**24, 1030);\r\n      phases[7] = Phase(56 * 10**24, 1000);\r\n      phases[8] = Phase(65 * 10**24, 1000);\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /*\r\n    contract for teams tokens lockup\r\n  */\r\n  function setTeamTokenHolder(address _teamTokenHolder) onlyOwner public {\r\n    require(_teamTokenHolder != address(0));\r\n    // should allow set only once\r\n    require(teamTokenHolder == address(0));\r\n    teamTokenHolder = _teamTokenHolder;\r\n  }\r\n\r\n  function buyTokens(address _beneficiary) public payable {\r\n    _processTokensPurchase(_beneficiary, msg.value);\r\n  }\r\n\r\n  /*\r\n    It may be needed to assign tokens in batches if multiple clients invested\r\n    in any other crypto currency.\r\n    NOTE: this will fail if there are not enough tokens left for at least one investor.\r\n        for this to work all investors must get all their tokens.\r\n  */\r\n  function assignTokensToMultipleInvestors(address[] _beneficiaries, uint256[] _tokensAmount) onlyAssginer public {\r\n    require(_beneficiaries.length == _tokensAmount.length);\r\n    for (uint i = 0; i < _tokensAmount.length; i++) {\r\n      _processTokensAssgin(_beneficiaries[i], _tokensAmount[i]);\r\n    }\r\n  }\r\n\r\n  /*\r\n    If investmend was made in bitcoins etc. owner can assign apropriate amount of\r\n    tokens to the investor.\r\n  */\r\n  function assignTokens(address _beneficiary, uint256 _tokensAmount) onlyAssginer public {\r\n    _processTokensAssgin(_beneficiary, _tokensAmount);\r\n  }\r\n\r\n  function finalize() onlyOwner public {\r\n    require(teamTokenHolder != address(0));\r\n    require(!isFinalized);\r\n    require(_hasClosed());\r\n    require(finalizedTime == 0);\r\n\r\n    HardcapToken _token = HardcapToken(token);\r\n\r\n    // assign each counterparty their share\r\n    uint256 _tokenCap = _token.totalSupply().mul(100).div(CROWDSALE_PERCENTAGE);\r\n    require(_token.mint(teamTokenHolder, _tokenCap.mul(TEAM_PERCENTAGE).div(100)));\r\n    require(_token.mint(platform, _tokenCap.mul(PLATFORM_PERCENTAGE).div(100)));\r\n\r\n    // mint and burn all leftovers\r\n    uint256 _tokensToBurn = _token.cap().sub(_token.totalSupply());\r\n    require(_token.mint(address(this), _tokensToBurn));\r\n    _token.burn(_tokensToBurn);\r\n\r\n    require(_token.finishMinting());\r\n    _token.transferOwnership(wallet);\r\n\r\n    Finalized();\r\n\r\n    finalizedTime = _getTime();\r\n    isFinalized = true;\r\n  }\r\n\r\n  function _hasClosed() internal view returns (bool) {\r\n    return _getTime() > FINAL_CLOSING_TIME || token.totalSupply() >= ICO_TOKENS_CAP;\r\n  }\r\n\r\n  function _processTokensAssgin(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _preValidateAssign(_beneficiary, _tokenAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 _leftowers = 0;\r\n    uint256 _tokens = 0;\r\n    uint256 _currentSupply = token.totalSupply();\r\n    bool _phaseChanged = false;\r\n    Phase memory _phase = phases[phase];\r\n\r\n    while (_tokenAmount > 0 && _currentSupply < ICO_TOKENS_CAP) {\r\n      _leftowers = _phase.capTo.sub(_currentSupply);\r\n      // check if it is possible to assign more than there is available in this phase\r\n      if (_leftowers < _tokenAmount) {\r\n         _tokens = _tokens.add(_leftowers);\r\n         _tokenAmount = _tokenAmount.sub(_leftowers);\r\n         phase = phase + 1;\r\n         _phaseChanged = true;\r\n      } else {\r\n         _tokens = _tokens.add(_tokenAmount);\r\n         _tokenAmount = 0;\r\n      }\r\n\r\n      _currentSupply = token.totalSupply().add(_tokens);\r\n      _phase = phases[phase];\r\n    }\r\n\r\n    require(_tokens >= MIN_TOKENS_TO_PURCHASE || _currentSupply == ICO_TOKENS_CAP);\r\n\r\n    // if phase changes forward the date of the next phase change by 7 days\r\n    if (_phaseChanged) {\r\n      _changeClosingTime();\r\n    }\r\n\r\n    require(HardcapToken(token).mint(_beneficiary, _tokens));\r\n    TokenAssigned(msg.sender, _beneficiary, _tokens);\r\n  }\r\n\r\n  function _processTokensPurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    _preValidatePurchase(_beneficiary, _weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 _leftowers = 0;\r\n    uint256 _weiReq = 0;\r\n    uint256 _weiSpent = 0;\r\n    uint256 _tokens = 0;\r\n    uint256 _currentSupply = token.totalSupply();\r\n    bool _phaseChanged = false;\r\n    Phase memory _phase = phases[phase];\r\n\r\n    while (_weiAmount > 0 && _currentSupply < ICO_TOKENS_CAP) {\r\n      _leftowers = _phase.capTo.sub(_currentSupply);\r\n      _weiReq = _leftowers.div(_phase.rate);\r\n      // check if it is possible to purchase more than there is available in this phase\r\n      if (_weiReq < _weiAmount) {\r\n         _tokens = _tokens.add(_leftowers);\r\n         _weiAmount = _weiAmount.sub(_weiReq);\r\n         _weiSpent = _weiSpent.add(_weiReq);\r\n         phase = phase + 1;\r\n         _phaseChanged = true;\r\n      } else {\r\n         _tokens = _tokens.add(_weiAmount.mul(_phase.rate));\r\n         _weiSpent = _weiSpent.add(_weiAmount);\r\n         _weiAmount = 0;\r\n      }\r\n\r\n      _currentSupply = token.totalSupply().add(_tokens);\r\n      _phase = phases[phase];\r\n    }\r\n\r\n    require(_tokens >= MIN_TOKENS_TO_PURCHASE || _currentSupply == ICO_TOKENS_CAP);\r\n\r\n    // if phase changes forward the date of the next phase change by 7 days\r\n    if (_phaseChanged) {\r\n      _changeClosingTime();\r\n    }\r\n\r\n    // return leftovers to investor if tokens are over but he sent more ehters.\r\n    if (msg.value > _weiSpent) {\r\n      uint256 _overflowAmount = msg.value.sub(_weiSpent);\r\n      _beneficiary.transfer(_overflowAmount);\r\n    }\r\n\r\n    weiRaised = weiRaised.add(_weiSpent);\r\n\r\n    require(HardcapToken(token).mint(_beneficiary, _tokens));\r\n    TokenPurchase(msg.sender, _beneficiary, _weiSpent, _tokens);\r\n\r\n    // You can access this method either buying tokens or assigning tokens to\r\n    // someone. In the previous case you won't be sending any ehter to contract\r\n    // so no need to forward any funds to wallet.\r\n    if (msg.value > 0) {\r\n      wallet.transfer(_weiSpent);\r\n    }\r\n  }\r\n\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    // if the phase time ended calculate next phase end time and set new phase\r\n    if (closingTime < _getTime() && closingTime < FINAL_CLOSING_TIME && phase < 8) {\r\n      phase = phase.add(_calcPhasesPassed());\r\n      _changeClosingTime();\r\n\r\n    }\r\n    require(_getTime() > INITIAL_START_DATE);\r\n    require(_getTime() >= openingTime && _getTime() <= closingTime);\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n    require(phase <= 8);\r\n\r\n    require(token.totalSupply() < ICO_TOKENS_CAP);\r\n    require(!isFinalized);\r\n  }\r\n\r\n  function _preValidateAssign(address _beneficiary, uint256 _tokenAmount) internal {\r\n    // if the phase time ended calculate next phase end time and set new phase\r\n    if (closingTime < _getTime() && closingTime < FINAL_CLOSING_TIME && phase < 8) {\r\n      phase = phase.add(_calcPhasesPassed());\r\n      _changeClosingTime();\r\n\r\n    }\r\n    // should not allow to assign tokens to team members\r\n    require(_beneficiary != assigner);\r\n    require(_beneficiary != platform);\r\n    require(_beneficiary != wallet);\r\n    require(_beneficiary != teamTokenHolder);\r\n\r\n    require(_getTime() >= openingTime && _getTime() <= closingTime);\r\n    require(_beneficiary != address(0));\r\n    require(_tokenAmount > 0);\r\n    require(phase <= 8);\r\n\r\n    require(token.totalSupply() < ICO_TOKENS_CAP);\r\n    require(!isFinalized);\r\n  }\r\n\r\n  function _changeClosingTime() internal {\r\n    closingTime = _getTime() + 7 days;\r\n    if (closingTime > FINAL_CLOSING_TIME) {\r\n      closingTime = FINAL_CLOSING_TIME;\r\n    }\r\n  }\r\n\r\n  function _calcPhasesPassed() internal view returns(uint256) {\r\n    return  _getTime().sub(closingTime).div(7 days).add(1);\r\n  }\r\n\r\n function _getTime() internal view returns (uint256) {\r\n   return now;\r\n }\r\n\r\n}\r\n\r\ncontract TeamTokenHolder is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private LOCKUP_TIME = 24; // in months\r\n\r\n  HardcapCrowdsale crowdsale;\r\n  HardcapToken token;\r\n  uint256 public collectedTokens;\r\n\r\n  function TeamTokenHolder(address _owner, address _crowdsale, address _token) public {\r\n    owner = _owner;\r\n    crowdsale = HardcapCrowdsale(_crowdsale);\r\n    token = HardcapToken(_token);\r\n  }\r\n\r\n  /*\r\n    @notice The Dev (Owner) will call this method to extract the tokens\r\n  */\r\n  function collectTokens() public onlyOwner {\r\n    uint256 balance = token.balanceOf(address(this));\r\n    uint256 total = collectedTokens.add(balance);\r\n\r\n    uint256 finalizedTime = crowdsale.finalizedTime();\r\n\r\n    require(finalizedTime > 0 && getTime() >= finalizedTime.add(months(3)));\r\n\r\n    uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(LOCKUP_TIME));\r\n\r\n    canExtract = canExtract.sub(collectedTokens);\r\n\r\n    if (canExtract > balance) {\r\n      canExtract = balance;\r\n    }\r\n\r\n    collectedTokens = collectedTokens.add(canExtract);\r\n    assert(token.transfer(owner, canExtract));\r\n\r\n    TokensWithdrawn(owner, canExtract);\r\n  }\r\n\r\n  function months(uint256 m) internal pure returns (uint256) {\r\n      return m.mul(30 days);\r\n  }\r\n\r\n  function getTime() internal view returns (uint256) {\r\n    return now;\r\n  }\r\n\r\n  /*\r\n     Safety Methods\r\n  */\r\n\r\n  /*\r\n     @notice This method can be used by the controller to extract mistakenly\r\n     sent tokens to this contract.\r\n     @param _token The address of the token contract that you want to recover\r\n     set to 0 in case you want to extract ether.\r\n  */\r\n  function claimTokens(address _token) public onlyOwner {\r\n    require(_token != address(token));\r\n    if (_token == 0x0) {\r\n      owner.transfer(this.balance);\r\n      return;\r\n    }\r\n\r\n    HardcapToken _hardcapToken = HardcapToken(_token);\r\n    uint256 balance = _hardcapToken.balanceOf(this);\r\n    _hardcapToken.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\r\n  event TokensWithdrawn(address indexed _holder, uint256 _amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"collectedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TeamTokenHolder","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008c5a5e27ae3937e0c07e5ac555d73f388a5fbd9c000000000000000000000000f51978050b69c1bb4b4734511fdfcc7bb63a94920000000000000000000000009a0587eae7ef64b2b38a10442a44cfa43edd7d2a","Library":"","SwarmSource":"bzzr://b7d6b46b18e26b000c876637fe85a433e2c3b248b5de7709d0e95a4db1c8381f"}]}