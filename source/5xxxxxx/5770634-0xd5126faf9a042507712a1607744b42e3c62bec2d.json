{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Control {\r\n    address public owner;\r\n    bool public pause;\r\n\r\n    event PAUSED();\r\n    event STARTED();\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(pause);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused {\r\n        require(!pause);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyOwner public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function setState(bool _pause) onlyOwner public {\r\n        pause = _pause;\r\n        if (pause) {\r\n            emit PAUSED();\r\n        } else {\r\n            emit STARTED();\r\n        }\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20Token {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    function symbol() public constant returns (string);\r\n    function decimals() public constant returns (uint256);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract token is Control, ERC20Token {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public totalSupply;\r\n    uint256 public forSell;\r\n    uint256 public decimals;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    string public symbol;\r\n    string public name;\r\n    \r\n    constructor(string _name) public {\r\n        owner = 0x60dc10E6b27b6c70B97d1F3370198d076F5A48D8;\r\n        decimals = 18;\r\n        totalSupply = 100000000000 * (10 ** decimals);\r\n        name = _name;\r\n        symbol = _name;\r\n        forSell = 50000000000 * (10 ** decimals);\r\n        balanceOf[owner] = totalSupply.sub(forSell);\r\n        \r\n        emit Transfer(0, owner, balanceOf[owner]);\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        require(balanceOf[msg.sender] >= amount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\r\n        balanceOf[to] = balanceOf[to].add(amount);\r\n        \r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        allowance[msg.sender][to] = amount;\r\n        \r\n        emit Approval(msg.sender, to , amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        require(allowance[from][msg.sender] >= amount);\r\n        require(balanceOf[from] >= amount);\r\n        \r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\r\n        balanceOf[from] = balanceOf[from].sub(amount);\r\n        balanceOf[to] = balanceOf[to].add(amount);\r\n        \r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balanceOf[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowance[tokenOwner][spender];\r\n    }\r\n    \r\n    function symbol() public constant returns (string) {\r\n        return symbol;\r\n    }\r\n    \r\n    function decimals() public constant returns (uint256){\r\n        return decimals;\r\n    }\r\n    \r\n    function sellToken() payable public {\r\n        require(msg.value >= 1000000000000000);\r\n        require(forSell >= 0);\r\n        uint256 amount = msg.value.mul(100000000);\r\n        forSell = forSell.sub(amount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n        \r\n        owner.transfer(msg.value);\r\n        emit Transfer(0, msg.sender, amount);\r\n    }\r\n    \r\n    function() payable public {\r\n        sellToken();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PAUSED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"STARTED\",\"type\":\"event\"}]","ContractName":"token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000ce5bf83e683b3e4ba8be688900000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://eca3a9e08d5ec08f0ef6772ec15dbae910f2949517b45e861d9e086d2e328894"}]}