{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, ownership can be transferred in 2 steps (transfer-accept).\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool isOwnershipTransferActive = false;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can do that.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(isOwnershipTransferActive);\r\n        require(msg.sender == pendingOwner, \"Only nominated pretender can do that.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        pendingOwner = _newOwner;\r\n        isOwnershipTransferActive = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function acceptOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        isOwnershipTransferActive = false;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 Token Standard Interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Aurum Services Presale Contract\r\n * @author Igor DÃ«min\r\n * @dev Presale accepting contributions only within a time frame and capped to specific amount.\r\n */\r\ncontract AurumPresale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // How many minimal token units a buyer gets per wei, presale rate (1:5000 x 1.5)\r\n    uint256 public constant RATE = 7500;\r\n\r\n    // presale cap, 7.5M tokens to be sold\r\n    uint256 public constant CAP = 1000 ether;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Crowdsale opening time\r\n    uint256 public openingTime;\r\n\r\n    // Crowdsale closing time\r\n    uint256 public closingTime;\r\n\r\n    // Amount of wei raised\r\n    uint256 public totalWeiRaised;\r\n\r\n    // address which can be specified by owner for service purposes\r\n    address controller;\r\n    bool isControllerSpecified = false;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value wei paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(ERC20 _token, uint256 _openingTime, uint256 _closingTime) public {\r\n        require(_token != address(0));\r\n        require(_openingTime >= now);\r\n        require(_closingTime > _openingTime);\r\n\r\n        token = _token;\r\n        openingTime = _openingTime;\r\n        closingTime = _closingTime;\r\n\r\n        require(token.balanceOf(msg.sender) >= RATE.mul(CAP));\r\n    }\r\n\r\n\r\n    modifier onlyWhileActive() {\r\n        require(isActive(), \"Presale has closed.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets minimal participation threshold\r\n     */\r\n    modifier minThreshold(uint256 _amount) {\r\n        require(msg.value >= _amount, \"Not enough Ether provided.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(isControllerSpecified);\r\n        require(msg.sender == controller, \"Only controller can do that.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Reclaim all ERC20 compatible tokens\r\n     * @param _token ERC20 The address of the token contract\r\n     */\r\n    function reclaimToken(ERC20 _token) external onlyOwner {\r\n        require(!isActive());\r\n        uint256 tokenBalance = _token.balanceOf(this);\r\n        require(_token.transfer(owner, tokenBalance));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer all Ether held by the contract to the owner.\r\n     */\r\n    function reclaimEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Specifies service account\r\n     */\r\n    function specifyController(address _controller) external onlyOwner {\r\n        controller = _controller;\r\n        isControllerSpecified = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Controller can mark the receipt of funds attracted in other cryptocurrencies,\r\n     * in equivalent of ether.\r\n     */\r\n    function markFunding(address _beneficiary, uint256 _weiRaised)\r\n        external\r\n        onlyController\r\n        onlyWhileActive\r\n    {\r\n        require(_beneficiary != address(0));\r\n        require(_weiRaised >= 20 finney);\r\n\r\n        enroll(controller, _beneficiary, _weiRaised);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the pre-sale is open has already elapsed and\r\n     * whether pre-sale cap has been reached.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return now >= openingTime && now <= closingTime && !capReached();\r\n    }\r\n\r\n    /**\r\n     * @dev Token purchase\r\n     * @param _beneficiary Address performing the token purchase\r\n     */\r\n    function buyTokens(address _beneficiary)\r\n        public\r\n        payable\r\n        onlyWhileActive\r\n        minThreshold(20 finney)\r\n    {\r\n        require(_beneficiary != address(0));\r\n\r\n        uint256 newWeiRaised = msg.value;\r\n        uint256 newTotalWeiRaised = totalWeiRaised.add(newWeiRaised);\r\n\r\n        uint256 refundValue = 0;\r\n        if (newTotalWeiRaised > CAP) {\r\n            newWeiRaised = CAP.sub(totalWeiRaised);\r\n            refundValue = newTotalWeiRaised.sub(CAP);\r\n        }\r\n\r\n        enroll(msg.sender, _beneficiary, newWeiRaised);\r\n\r\n        if (refundValue > 0) {\r\n            msg.sender.transfer(refundValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the cap has been reached.\r\n     * @return Whether the cap was reached\r\n     */\r\n    function capReached() internal view returns (bool) {\r\n        return totalWeiRaised >= CAP;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tokens.\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function getTokenAmount(uint256 _weiAmount) internal pure returns (uint256) {\r\n        return _weiAmount.mul(RATE);\r\n    }\r\n\r\n    /**\r\n     * @dev common logic for enroll funds\r\n     */\r\n    function enroll(address _purchaser, address _beneficiary, uint256 _value) private {\r\n        // update sale progress\r\n        totalWeiRaised = totalWeiRaised.add(_value);\r\n\r\n        // calculate token amount\r\n        uint256 tokenAmount = getTokenAmount(_value);\r\n\r\n        require(token.transfer(_beneficiary, tokenAmount));\r\n        emit TokenPurchase(_purchaser, _beneficiary, _value, tokenAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiRaised\",\"type\":\"uint256\"}],\"name\":\"markFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"specifyController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AurumPresale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009da7787f72b214589d4f49ebe4be80881c1d0105000000000000000000000000000000000000000000000000000000005b320090000000000000000000000000000000000000000000000000000000005b826c10","Library":"","SwarmSource":"bzzr://8ddb98374460ab041b62cf89bb3941b74455a038860d8d173a515905868d2f49"}]}