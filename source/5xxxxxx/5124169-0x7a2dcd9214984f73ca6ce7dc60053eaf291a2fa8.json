{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ninterface ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n}\r\n\r\ninterface TokenConfigInterface {\r\n    function admin() public returns(address);\r\n    function claimAdmin() public;\r\n    function transferAdminQuickly(address newAdmin) public;\r\n\r\n    // network\r\n    function listPairForReserve(address reserve, address src, address dest, bool add) public;\r\n\r\n    // reserve\r\n    function approveWithdrawAddress(address token, address addr, bool approve) public;\r\n    function withdrawToken(address token, uint amount, address sendTo) external;\r\n    function withdrawEther(uint amount, address sendTo) external;\r\n\r\n    // conversion rate\r\n    function addToken(address token) public;\r\n    function enableTokenTrade(address token) public;\r\n    function setTokenControlInfo(\r\n        address token,\r\n        uint minimalRecordResolution,\r\n        uint maxPerBlockImbalance,\r\n        uint maxTotalImbalance\r\n    ) public;\r\n    function setQtyStepFunction(\r\n        ERC20 token,\r\n        int[] xBuy,\r\n        int[] yBuy,\r\n        int[] xSell,\r\n        int[] ySell\r\n    ) public;\r\n\r\n    function setImbalanceStepFunction(\r\n        ERC20 token,\r\n        int[] xBuy,\r\n        int[] yBuy,\r\n        int[] xSell,\r\n        int[] ySell\r\n    ) public;\r\n}\r\n\r\n\r\ncontract TokenAdder {\r\n    TokenConfigInterface public network;\r\n    TokenConfigInterface public reserve;\r\n    TokenConfigInterface public conversionRate;\r\n    address public multisigAddress;\r\n    address public withdrawAddress;\r\n    address public ETH = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\r\n    ERC20 public ENG = ERC20(0xf0ee6b27b759c9893ce4f094b49ad28fd15a23e4);\r\n    ERC20 public SALT = ERC20(0x4156D3342D5c385a87D264F90653733592000581);\r\n    ERC20 public APPC = ERC20(0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db);\r\n    ERC20 public RDN = ERC20(0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6);\r\n    ERC20 public OMG = ERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\r\n    ERC20 public KNC = ERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\r\n    ERC20 public EOS = ERC20(0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0);\r\n    ERC20 public SNT = ERC20(0x744d70fdbe2ba4cf95131626614a1763df805b9e);\r\n    ERC20 public ELF = ERC20(0xbf2179859fc6d5bee9bf9158632dc51678a4100e);\r\n    ERC20 public POWR = ERC20(0x595832f8fc6bf59c85c527fec3740a1b7a361269);\r\n    ERC20 public MANA = ERC20(0x0f5d2fb29fb7d3cfee444a200298f468908cc942);\r\n    ERC20 public BAT = ERC20(0x0d8775f648430679a709e98d2b0cb6250d2887ef);\r\n    ERC20 public REQ = ERC20(0x8f8221afbb33998d8584a2b05749ba73c37a938a);\r\n    ERC20 public GTO = ERC20(0xc5bbae50781be1669306b9e001eff57a2957b09d);\r\n\r\n    address[] public newTokens = [\r\n        ENG,\r\n        SALT,\r\n        APPC,\r\n        RDN];\r\n    int[] zeroArray = [int(0)];\r\n\r\n    function TokenAdder(TokenConfigInterface _network,\r\n                        TokenConfigInterface _reserve,\r\n                        TokenConfigInterface _conversionRate,\r\n                        address              _withdrawAddress,\r\n                        address              _multisigAddress) public {\r\n\r\n        network = _network;\r\n        reserve = _reserve;\r\n        conversionRate = _conversionRate;\r\n        withdrawAddress = _withdrawAddress;\r\n        multisigAddress = _multisigAddress;\r\n    }\r\n\r\n    function listPairs() public {\r\n        address orgAdmin = network.admin();\r\n        network.claimAdmin();\r\n\r\n        for( uint i = 0 ; i < newTokens.length ; i++ ) {\r\n            network.listPairForReserve(reserve,ETH,newTokens[i],true);\r\n            network.listPairForReserve(reserve,newTokens[i],ETH,true);\r\n        }\r\n\r\n        network.transferAdminQuickly(orgAdmin);\r\n        require(orgAdmin == network.admin());\r\n    }\r\n\r\n    function approveWithdrawAddress() public {\r\n        address orgAdmin = reserve.admin();\r\n        reserve.claimAdmin();\r\n\r\n        for( uint i = 0 ; i < newTokens.length ; i++ ) {\r\n            reserve.approveWithdrawAddress(newTokens[i], withdrawAddress, true);\r\n        }\r\n\r\n\r\n        reserve.transferAdminQuickly(orgAdmin);\r\n        require(orgAdmin == reserve.admin());\r\n    }\r\n\r\n    function addTokens() public {\r\n        address orgAdmin = conversionRate.admin();\r\n        conversionRate.claimAdmin();\r\n\r\n        conversionRate.setTokenControlInfo(\r\n            RDN,\r\n            1000000000000000,\r\n            2191833834271476809728,\r\n            3001716436034787475456 );\r\n\r\n        conversionRate.setTokenControlInfo(\r\n            APPC,\r\n            1000000000000000,\r\n            8346369318913311768576,\r\n            11430352782251779948544 );\r\n\r\n        conversionRate.setTokenControlInfo(\r\n            ENG,\r\n            10000,\r\n            245309013986,\r\n            335950694654 );\r\n\r\n        conversionRate.setTokenControlInfo(\r\n            SALT,\r\n            10000,\r\n            117682709761,\r\n            117682709761 );\r\n\r\n\r\n        for( uint i = 0 ; i < newTokens.length ; i++ ) {\r\n            conversionRate.addToken(newTokens[i]);\r\n            conversionRate.enableTokenTrade(newTokens[i]);\r\n\r\n            conversionRate.setQtyStepFunction(ERC20(newTokens[i]),\r\n                                              zeroArray,\r\n                                              zeroArray,\r\n                                              zeroArray,\r\n                                              zeroArray);\r\n\r\n            conversionRate.setImbalanceStepFunction(ERC20(newTokens[i]),\r\n                                              zeroArray,\r\n                                              zeroArray,\r\n                                              zeroArray,\r\n                                              zeroArray);\r\n        }\r\n\r\n        conversionRate.transferAdminQuickly(orgAdmin);\r\n        require(orgAdmin == conversionRate.admin());\r\n    }\r\n\r\n    function tranferToReserve() public {\r\n        ENG.transferFrom(multisigAddress,reserve,790805150356);\r\n        RDN.transferFrom(multisigAddress,reserve,5991690723304920842240);\r\n        APPC.transferFrom(multisigAddress,reserve,28294946522551069704192);\r\n        SALT.transferFrom(multisigAddress,reserve,512404807997);\r\n    }\r\n\r\n    function withdrawToMultisig() public {\r\n        address orgAdmin = reserve.admin();\r\n        reserve.claimAdmin();\r\n\r\n        reserve.withdrawToken(OMG,579712353000204795904,multisigAddress);\r\n        //reserve.withdrawToken(KNC,0,multisigAddress);\r\n        reserve.withdrawToken(EOS,404333617684274479104,multisigAddress);\r\n        //reserve.withdrawToken(SNT,0,multisigAddress);\r\n        reserve.withdrawToken(ELF,2851672250969491505152,multisigAddress);\r\n        //reserve.withdrawToken(POWR,0,multisigAddress);\r\n        reserve.withdrawToken(MANA,18906283885644627312640,multisigAddress);\r\n        reserve.withdrawToken(BAT,5034264918417995726848,multisigAddress);\r\n        reserve.withdrawToken(REQ,6848892587322741096448,multisigAddress);\r\n        reserve.withdrawToken(GTO,3232686829,multisigAddress);\r\n\r\n\r\n        reserve.transferAdminQuickly(orgAdmin);\r\n        require(orgAdmin == reserve.admin());\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"listPairs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tranferToReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RDN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POWR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BAT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"network\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APPC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GTO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EOS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveWithdrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OMG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ELF\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KNC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_network\",\"type\":\"address\"},{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_conversionRate\",\"type\":\"address\"},{\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenAdder","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d2d21fdef0d054d2864ce328cc56d1238d6b239e0000000000000000000000002c5a182d280eeb5824377b98cd74871f78d6b8bc000000000000000000000000e3e415a7a6c287a95dc68a01ff036828073fd2e60000000000000000000000001ae659f93ba2fc0a1f379545cf9335adb75fa547000000000000000000000000fdf28bf25779ed4ca74e958d54653260af604c20","Library":"","SwarmSource":"bzzr://ca43dafd121293d02fafb26ffd2100e2bf7fe75738f1fb21d522b3798165a4c1"}]}