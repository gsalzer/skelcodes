{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract EthBird {\r\n    \r\n    address public owner;\r\n    address highScoreUser;\r\n    \r\n    uint currentHighScore = 0;\r\n    uint contestStartTime = now;\r\n    \r\n    mapping(address => bool) paidUsers;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function EthBird() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function payEntryFee() public payable  {\r\n        if (msg.value >= 0.001 ether) {\r\n            paidUsers[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function getCurrentHighscore() public constant returns (uint) {\r\n        return currentHighScore;\r\n    }\r\n    \r\n    function getCurrentHighscoreUser() public constant returns (address) {\r\n        return highScoreUser;\r\n    }\r\n    \r\n    function getCurrentJackpot() public constant returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getNextPayoutEstimation() public constant returns (uint) {\r\n        return (contestStartTime + 1 days) - now;\r\n    }\r\n    \r\n    function recordHighScore(uint score, address userToScore)  public onlyOwner returns (address) {\r\n        if(paidUsers[userToScore]){\r\n            if(score > 0 && score >= currentHighScore){\r\n                highScoreUser = userToScore;\r\n                currentHighScore = score;\r\n            }\r\n            if(now >= contestStartTime + 1 days){\r\n                awardHighScore();   \r\n            }\r\n        }\r\n        return userToScore;\r\n    }\r\n    \r\n    function awardHighScore() public onlyOwner {\r\n        uint256 ownerCommision = address(this).balance / 10;\r\n        address(owner).transfer(ownerCommision);\r\n        address(highScoreUser).transfer(address(this).balance);\r\n        contestStartTime = now;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"awardHighScore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentHighscoreUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payEntryFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"score\",\"type\":\"uint256\"},{\"name\":\"userToScore\",\"type\":\"address\"}],\"name\":\"recordHighScore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentHighscore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextPayoutEstimation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EthBird","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0528250a4d06c397f35c397641009fb28a44297f79a76c3532c40fb3d4b4de15"}]}