{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender; \r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _owner Address of the new owner\r\n    */\r\n    function setOwner(address _owner) public onlyOwner returns (bool) {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        return true;\r\n    } \r\n}\r\n\r\ninterface TokenHandler {\r\n    function handleTokens(Token _token) public returns (bool);\r\n}\r\n\r\ncontract HasWorkers is Ownable {\r\n    mapping(address => uint256) private workerToIndex;    \r\n    address[] private workers;\r\n\r\n    event AddedWorker(address _worker);\r\n    event RemovedWorker(address _worker);\r\n\r\n    constructor() public {\r\n        workers.length++;\r\n    }\r\n\r\n    modifier onlyWorker() {\r\n        require(isWorker(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier workerOrOwner() {\r\n        require(isWorker(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isWorker(address _worker) public view returns (bool) {\r\n        return workerToIndex[_worker] != 0;\r\n    }\r\n\r\n    function allWorkers() public view returns (address[] memory result) {\r\n        result = new address[](workers.length - 1);\r\n        for (uint256 i = 1; i < workers.length; i++) {\r\n            result[i - 1] = workers[i];\r\n        }\r\n    }\r\n\r\n    function addWorker(address _worker) public onlyOwner returns (bool) {\r\n        require(!isWorker(_worker));\r\n        uint256 index = workers.push(_worker) - 1;\r\n        workerToIndex[_worker] = index;\r\n        emit AddedWorker(_worker);\r\n        return true;\r\n    }\r\n\r\n    function removeWorker(address _worker) public onlyOwner returns (bool) {\r\n        require(isWorker(_worker));\r\n        uint256 index = workerToIndex[_worker];\r\n        address lastWorker = workers[workers.length - 1];\r\n        workerToIndex[lastWorker] = index;\r\n        workers[index] = lastWorker;\r\n        workers.length--;\r\n        delete workerToIndex[_worker];\r\n        emit RemovedWorker(_worker);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ControllerStorage {\r\n    address public walletsDelegate;\r\n    address public controllerDelegate;\r\n    address public forward;\r\n    uint256 public createdWallets;\r\n    mapping(bytes32 => bytes32) public gStorage;\r\n}\r\n\r\ncontract WalletStorage {\r\n    address public owner;\r\n}\r\n\r\ncontract DelegateProxy {\r\n  /**\r\n   * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\r\n   * @param _dst Destination address to perform the delegatecall\r\n   * @param _calldata Calldata for the delegatecall\r\n   */\r\n  function delegatedFwd(address _dst, bytes _calldata) internal {\r\n    assembly {\r\n      let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n      let size := returndatasize\r\n\r\n      let ptr := mload(0x40)\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n      // if the call returned error data, forward it\r\n      switch result case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\ncontract DelegateProvider {\r\n    function getDelegate() public view returns (address delegate);\r\n}\r\n\r\ncontract ControllerProxy is ControllerStorage, Ownable, HasWorkers, DelegateProvider, DelegateProxy {\r\n    function getDelegate() public view returns (address delegate) {\r\n        delegate = walletsDelegate;\r\n    }\r\n\r\n    function setWalletsDelegate(address _delegate) public onlyOwner returns (bool) {\r\n        walletsDelegate = _delegate;\r\n        return true;\r\n    }\r\n\r\n    function setControllerDelegate(address _delegate) public onlyOwner returns (bool) {\r\n        controllerDelegate = _delegate;\r\n        return true;\r\n    }\r\n\r\n    function() public payable {\r\n        if (gasleft() > 2400) {\r\n            delegatedFwd(controllerDelegate, msg.data);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}\r\n\r\ncontract WalletProxy is WalletStorage, DelegateProxy {\r\n    event ReceivedETH(address from, uint256 amount);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() public payable {\r\n        if (msg.value > 0) {\r\n            emit ReceivedETH(msg.sender, msg.value);\r\n        }\r\n        if (gasleft() > 2400) {\r\n            delegatedFwd(DelegateProvider(owner).getDelegate(), msg.data);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Wallet is WalletStorage {\r\n    function transferERC20Token(Token token, address to, uint256 amount) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        return token.transfer(to, amount);\r\n    }\r\n    \r\n    function transferEther(address to, uint256 amount) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        return to.call.value(amount)();\r\n    }\r\n\r\n    function() public payable {}\r\n}\r\n\r\ncontract Controller is ControllerStorage, Ownable, HasWorkers {\r\n    event CreatedUserWallet(address _wallet);\r\n\r\n    // Withdraw events\r\n    event WithdrawEth(address _wallet, address _to, uint256 _amount);\r\n    event WithdrawToken(address _token, address _wallet, address _to, uint256 _amount);\r\n    event ChangedForward(address _old, address _new, address _operator);\r\n\r\n    constructor() public {\r\n        setForward(msg.sender);\r\n    }\r\n\r\n    /*\r\n        @notice Executes any transaction\r\n    */\r\n    function executeTransaction(address destination, uint256 value, bytes memory _bytes) public onlyOwner returns (bool) {\r\n        return destination.call.value(value)(_bytes);\r\n    }\r\n\r\n    /*\r\n        @notice Changes the address to forward all the funds\r\n\r\n        @param _forward New forward address\r\n    */\r\n    function setForward(address _forward) public onlyOwner returns (bool) {\r\n        emit ChangedForward(forward, _forward, msg.sender);\r\n        forward = _forward;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Creates a number of user wallets\r\n\r\n        @param number Amount of user wallets\r\n    */\r\n    function createWallets(uint256 number) public onlyWorker returns (bool) {\r\n        for (uint256 i = 0; i < number; i++) {\r\n            emit CreatedUserWallet(new WalletProxy());\r\n        }\r\n\r\n        createdWallets += number;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Withdraws all ETH from a wallet and sends it to the\r\n            forward address\r\n\r\n        @param wallet Address of the wallet\r\n    */\r\n    function withdrawEth(Wallet wallet) public onlyWorker returns (bool result) {\r\n        uint256 balance = address(wallet).balance;\r\n        result = wallet.transferEther(forward, balance);\r\n        \r\n        if (result) {\r\n            emit WithdrawEth(wallet, forward, balance);\r\n        }\r\n    }\r\n\r\n    /*\r\n        @notice Withdraws all ETH from a list of wallets and sends \r\n            all the funds to the forward address\r\n\r\n        @param wallets Address list of the wallets\r\n    */\r\n    function withdrawEthBatch(Wallet[] wallets) public onlyWorker returns (bool) {\r\n        uint256 size = wallets.length;\r\n        uint256 balance;\r\n        \r\n        Wallet wallet;\r\n\r\n        for (uint256 i = 0; i < size; i++) {\r\n            wallet = wallets[i];\r\n            balance = wallet.balance;\r\n            \r\n            if (wallet.transferEther(this, balance)) {\r\n                emit WithdrawEth(wallet, forward, balance);\r\n            }  \r\n        }\r\n\r\n        forward.call.value(address(this).balance)();\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Withdraws all tokens from a wallet and sends it to the\r\n            forward address\r\n\r\n        @param token Token to withdraw\r\n        @param wallet Address of the wallet\r\n    */\r\n    function withdrawERC20(Token token, Wallet wallet) public onlyWorker returns (bool result) {\r\n        uint256 balance = token.balanceOf(wallet);\r\n        result = wallet.transferERC20Token(token, forward, balance);\r\n        \r\n        if (result) {\r\n            emit WithdrawToken(token, wallet, forward, balance);\r\n        }\r\n\r\n        TokenHandler(forward).handleTokens(token);\r\n    }\r\n\r\n    /*\r\n        @notice Withdraws all tokens from a list of wallets and sends \r\n            all the funds to the forward address\r\n\r\n        @param token Token to withdraw\r\n        @param wallets Address list of the wallets\r\n    */\r\n    function withdrawERC20Batch(Token token, Wallet[] wallets) public onlyWorker returns (bool) {\r\n        uint256 size = wallets.length;\r\n        uint256 balance;\r\n        Wallet wallet;\r\n\r\n        for (uint256 i = 0; i < size; i++) {\r\n            wallet = wallets[i];\r\n            balance = token.balanceOf(wallet);\r\n            \r\n            if (wallet.transferERC20Token(token, forward, balance)) {\r\n                emit WithdrawToken(token, wallet, forward, balance);\r\n            }\r\n        }\r\n\r\n        TokenHandler(forward).handleTokens(token);\r\n\r\n        return true;\r\n    }\r\n\r\n    function() public payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"withdrawEthBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_forward\",\"type\":\"address\"}],\"name\":\"setForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"createWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"withdrawERC20Batch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allWorkers\",\"outputs\":[{\"name\":\"result\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletsDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CreatedUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ChangedForward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"AddedWorker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"RemovedWorker\",\"type\":\"event\"}]","ContractName":"Controller","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7936cda2eb8d2aaebc6566c2f3b7946325d2f50db53078aa947260320956ab0c"}]}