{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// see: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n// Ponzi Token Minimal Interface\r\ncontract PonziTokenMinInterface {\r\n  function balanceOf(address owner) public view returns(uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\ncontract PonziSeller {\r\n  using SafeMath for uint256;\r\n  enum AccessRank {\r\n    None,\r\n    SetPrice,\r\n    Withdraw,\r\n    Full\r\n  }\r\n\r\n  address private constant PONZI_ADDRESS = 0xc2807533832807Bf15898778D8A108405e9edfb1;\r\n  PonziTokenMinInterface private m_ponzi;\r\n  uint256 private m_ponziPriceInWei;\r\n  uint256 private m_rewardNum;\r\n  uint256 private m_rewardDen;\r\n  mapping(address => AccessRank) private m_admins;\r\n\r\n  event PriceChanged(address indexed who, uint256 newPrice);\r\n  event RewardRef(address indexed refAddr, uint256 ponziAmount);\r\n  event Withdrawal(address indexed to, uint256 amountInWei);\r\n  event ProvidingAccess(address indexed addr, AccessRank rank);\r\n  event PonziSold(\r\n    address indexed purchasedBy, \r\n    uint256 indexed priceInWei, \r\n    uint256 ponziAmount, \r\n    uint256 weiAmount, \r\n    address indexed refAddr \r\n  );\r\n  event NotEnoughPonzi(\r\n    address indexed addr, \r\n    uint256 weiAmount, \r\n    uint256 ponziPriceInWei, \r\n    uint256 ponziBalance\r\n  );\r\n\r\n  modifier onlyAdmin(AccessRank  r) {\r\n    require(m_admins[msg.sender] == r || m_admins[msg.sender] == AccessRank.Full);\r\n    _;\r\n  }\r\n\r\n  function PonziSeller() public {\r\n    m_ponzi = PonziTokenMinInterface(PONZI_ADDRESS);\r\n    m_admins[msg.sender] = AccessRank.Full;\r\n    m_rewardNum = 1;\r\n    m_rewardDen = 1;\r\n  }\r\n\r\n  function() public payable {\r\n    byPonzi(address(0));\r\n  }\r\n\r\n  function setPonziAddress(address ponziAddr) public onlyAdmin(AccessRank.Full) {\r\n    m_ponzi = PonziTokenMinInterface(ponziAddr);\r\n  }\r\n\r\n  function ponziAddress() public view returns (address ponziAddr) {\r\n    return address(m_ponzi);\r\n  }\r\n\r\n  function ponziPriceInWei() public view returns (uint256) { \r\n    return m_ponziPriceInWei;\r\n  }\r\n\r\n  function setPonziPriceInWei(uint256 newPonziPriceInWei) public onlyAdmin(AccessRank.SetPrice) { \r\n    m_ponziPriceInWei = newPonziPriceInWei;\r\n    emit PriceChanged(msg.sender, m_ponziPriceInWei);\r\n  }\r\n\r\n  function rewardPercent() public view returns (uint256 numerator, uint256 denominator) {\r\n    numerator = m_rewardNum;\r\n    denominator = m_rewardDen;\r\n  }\r\n\r\n  function provideAccess(address adminAddr, uint8 rank) public onlyAdmin(AccessRank.Full) {\r\n    require(rank <= uint8(AccessRank.Full));\r\n    require(m_admins[adminAddr] != AccessRank.Full);\r\n    m_admins[adminAddr] = AccessRank(rank);\r\n  }\r\n\r\n  function setRewardPercent(uint256 newNumerator, uint256 newDenominator) public onlyAdmin(AccessRank.Full) {\r\n    require(newDenominator != 0);\r\n    m_rewardNum = newNumerator;\r\n    m_rewardDen = newDenominator;\r\n  }\r\n\r\n  function byPonzi(address refAddr) public payable {\r\n    require(m_ponziPriceInWei > 0 && msg.value > m_ponziPriceInWei);\r\n\r\n    uint256 refAmount = 0;\r\n    uint256 senderAmount = weiToPonzi(msg.value, m_ponziPriceInWei);\r\n\r\n    // check if ref addres is valid and calc reward\r\n    if (refAddr != msg.sender && refAddr != address(0) && refAddr != address(this)) {\r\n      refAmount = senderAmount.mul(m_rewardNum).div(m_rewardDen);\r\n    }\r\n    // check if we have enough ponzi on balance\r\n    if (availablePonzi() < senderAmount.add(refAmount)) {\r\n      emit NotEnoughPonzi(msg.sender, msg.value, m_ponziPriceInWei, availablePonzi());\r\n      revert();\r\n    }\r\n  \r\n    // transfer ponzi to sender\r\n    require(m_ponzi.transfer(msg.sender, senderAmount));\r\n    // transfer ponzi to ref if needed\r\n    if (refAmount > 0) {\r\n      require(m_ponzi.transfer(refAddr, refAmount));\r\n      emit RewardRef(refAddr, refAmount);\r\n    }\r\n    emit PonziSold(msg.sender, m_ponziPriceInWei, senderAmount, msg.value, refAddr);\r\n  }\r\n\r\n  function availablePonzi() public view returns (uint256) {\r\n    return m_ponzi.balanceOf(address(this));\r\n  }\r\n\r\n  function withdraw() public onlyAdmin(AccessRank.Withdraw) {\r\n    require(address(this).balance > 0);\r\n    uint256 b = address(this).balance;\r\n    msg.sender.transfer(b);\r\n    assert(address(this).balance < b);\r\n    emit Withdrawal(msg.sender, b);\r\n  }\r\n\r\n  function weiToPonzi(uint256 weiAmount, uint256 tokenPrice) \r\n    internal \r\n    pure \r\n    returns(uint256 tokensAmount) \r\n  {\r\n    tokensAmount = weiAmount.div(tokenPrice);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"availablePonzi\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ponziAddress\",\"outputs\":[{\"name\":\"ponziAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ponziPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPonziPriceInWei\",\"type\":\"uint256\"}],\"name\":\"setPonziPriceInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"},{\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAddr\",\"type\":\"address\"},{\"name\":\"rank\",\"type\":\"uint8\"}],\"name\":\"provideAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refAddr\",\"type\":\"address\"}],\"name\":\"byPonzi\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ponziAddr\",\"type\":\"address\"}],\"name\":\"setPonziAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ponziAmount\",\"type\":\"uint256\"}],\"name\":\"RewardRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rank\",\"type\":\"uint8\"}],\"name\":\"ProvidingAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchasedBy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ponziAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"refAddr\",\"type\":\"address\"}],\"name\":\"PonziSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ponziPriceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ponziBalance\",\"type\":\"uint256\"}],\"name\":\"NotEnoughPonzi\",\"type\":\"event\"}]","ContractName":"PonziSeller","CompilerVersion":"v0.4.24-nightly.2018.5.16+commit.7f965c86","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b059f7c6a708ee331a237d62a718a6cb15200f2a955931f92df8b59664446ae8"}]}