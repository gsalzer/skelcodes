{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract SealTokenSale is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n  * @dev Supporter struct to allow tracking supporters KYC status and referrer address\r\n  */\r\n  struct Supporter {\r\n    bool hasKYC;\r\n    address referrerAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev External Supporter struct to allow tracking reserved amounts by supporter\r\n  */\r\n  struct ExternalSupporter {\r\n    uint256 reservedAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Token Sale States\r\n   */\r\n  enum TokenSaleState {Private, Pre, Main, Finished}\r\n\r\n  // Variables\r\n  mapping(address => Supporter) public supportersMap; // Mapping with all the Token Sale participants (Private excluded)\r\n  mapping(address => ExternalSupporter) public externalSupportersMap; // Mapping with external supporters\r\n  SealToken public token; // ERC20 Token contract address\r\n  address public vaultWallet; // Wallet address to which ETH and Company Reserve Tokens get forwarded\r\n  address public airdropWallet; // Wallet address to which Unsold Tokens get forwarded\r\n  address public kycWallet; // Wallet address for the KYC server\r\n  uint256 public tokensSold; // How many tokens have been sold\r\n  uint256 public tokensReserved; // How many tokens have been reserved\r\n  uint256 public maxTxGasPrice; // Maximum transaction gas price allowed for fair-chance transactions\r\n  TokenSaleState public currentState; // current Sale state\r\n\r\n  uint256 public constant ONE_MILLION = 10 ** 6; // One million for token cap calculation reference\r\n  uint256 public constant PRE_SALE_TOKEN_CAP = 384 * ONE_MILLION * 10 ** 18; // Maximum amount that can be sold during the Pre Sale period\r\n  uint256 public constant TOKEN_SALE_CAP = 492 * ONE_MILLION * 10 ** 18; // Maximum amount of tokens that can be sold by this contract\r\n  uint256 public constant TOTAL_TOKENS_SUPPLY = 1200 * ONE_MILLION * 10 ** 18; // Total supply that will be minted\r\n  uint256 public constant MIN_ETHER = 0.1 ether; // Minimum ETH Contribution allowed during the crowd sale\r\n\r\n  /* Minimum PreSale Contributions in Ether */\r\n  uint256 public constant PRE_SALE_MIN_ETHER = 1 ether; // Minimum to get 10% Bonus Tokens\r\n  uint256 public constant PRE_SALE_15_BONUS_MIN = 60 ether; // Minimum to get 15% Bonus Tokens\r\n  uint256 public constant PRE_SALE_20_BONUS_MIN = 300 ether; // Minimum to get 20% Bonus Tokens\r\n  uint256 public constant PRE_SALE_30_BONUS_MIN = 1200 ether; // Minimum to get 30% Bonus Tokens\r\n\r\n  /* Rate */\r\n  uint256 public tokenBaseRate; // Base rate\r\n\r\n  uint256 public referrerBonusRate; // Referrer Bonus Rate with 2 decimals (250 for 2.5% bonus for example)\r\n  uint256 public referredBonusRate; // Referred Bonus Rate with 2 decimals (250 for 2.5% bonus for example)\r\n\r\n  /**\r\n    * @dev Modifier to only allow Owner or KYC Wallet to execute a function\r\n    */\r\n  modifier onlyOwnerOrKYCWallet() {\r\n    require(msg.sender == owner || msg.sender == kycWallet);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * Event for token purchase logging\r\n  * @param purchaser The wallet address that bought the tokens\r\n  * @param value How many Weis were paid for the purchase\r\n  * @param amount The amount of tokens purchased\r\n  */\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n  /**\r\n  * Event for token reservation \r\n  * @param wallet The beneficiary wallet address\r\n  * @param amount The amount of tokens\r\n  */\r\n  event TokenReservation(address indexed wallet, uint256 amount);\r\n\r\n  /**\r\n  * Event for token reservation confirmation\r\n  * @param wallet The beneficiary wallet address\r\n  * @param amount The amount of tokens\r\n  */\r\n  event TokenReservationConfirmation(address indexed wallet, uint256 amount);\r\n\r\n  /**\r\n  * Event for token reservation cancellation\r\n  * @param wallet The beneficiary wallet address\r\n  * @param amount The amount of tokens\r\n  */\r\n  event TokenReservationCancellation(address indexed wallet, uint256 amount);\r\n\r\n  /**\r\n   * Event for kyc status change logging\r\n   * @param user User address\r\n   * @param isApproved KYC approval state\r\n   */\r\n  event KYC(address indexed user, bool isApproved);\r\n\r\n  /**\r\n   * Event for referrer set\r\n   * @param user User address\r\n   * @param referrerAddress Referrer address\r\n   */\r\n  event ReferrerSet(address indexed user, address indexed referrerAddress);\r\n\r\n  /**\r\n   * Event for referral bonus incomplete\r\n   * @param userAddress User address\r\n   * @param missingAmount Missing Amount\r\n   */\r\n  event ReferralBonusIncomplete(address indexed userAddress, uint256 missingAmount);\r\n\r\n  /**\r\n   * Event for referral bonus minted\r\n   * @param userAddress User address\r\n   * @param amount Amount minted\r\n   */\r\n  event ReferralBonusMinted(address indexed userAddress, uint256 amount);\r\n\r\n  /**\r\n   * Constructor\r\n   * @param _vaultWallet Vault address\r\n   * @param _airdropWallet Airdrop wallet address\r\n   * @param _kycWallet KYC address\r\n   * @param _tokenBaseRate Token Base rate (Tokens/ETH)\r\n   * @param _referrerBonusRate Referrer Bonus rate (2 decimals, ex 250 for 2.5%)\r\n   * @param _referredBonusRate Referred Bonus rate (2 decimals, ex 250 for 2.5%)\r\n   * @param _maxTxGasPrice Maximum gas price allowed when buying tokens\r\n   */\r\n  function SealTokenSale(\r\n    address _vaultWallet,\r\n    address _airdropWallet,\r\n    address _kycWallet,\r\n    uint256 _tokenBaseRate,\r\n    uint256 _referrerBonusRate,\r\n    uint256 _referredBonusRate,\r\n    uint256 _maxTxGasPrice\r\n  )\r\n  public\r\n  {\r\n    require(_vaultWallet != address(0));\r\n    require(_airdropWallet != address(0));\r\n    require(_kycWallet != address(0));\r\n    require(_tokenBaseRate > 0);\r\n    require(_referrerBonusRate > 0);\r\n    require(_referredBonusRate > 0);\r\n    require(_maxTxGasPrice > 0);\r\n\r\n    vaultWallet = _vaultWallet;\r\n    airdropWallet = _airdropWallet;\r\n    kycWallet = _kycWallet;\r\n    tokenBaseRate = _tokenBaseRate;\r\n    referrerBonusRate = _referrerBonusRate;\r\n    referredBonusRate = _referredBonusRate;\r\n    maxTxGasPrice = _maxTxGasPrice;\r\n\r\n    tokensSold = 0;\r\n    tokensReserved = 0;\r\n\r\n    token = new SealToken();\r\n\r\n    // init sale state;\r\n    currentState = TokenSaleState.Private;\r\n  }\r\n\r\n  /* fallback function can be used to buy tokens */\r\n  function() public payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /* low level token purchase function */\r\n  function buyTokens() public payable whenNotPaused {\r\n    // Do not allow if gasprice is bigger than the maximum\r\n    // This is for fair-chance for all contributors, so no one can\r\n    // set a too-high transaction price and be able to buy earlier\r\n    require(tx.gasprice <= maxTxGasPrice);\r\n\r\n    // make sure we're in pre or main sale period\r\n    require(isPublicTokenSaleRunning());\r\n\r\n    // check if KYC ok\r\n    require(userHasKYC(msg.sender));\r\n\r\n    // check user is sending enough Wei for the stage's rules\r\n    require(aboveMinimumPurchase());\r\n\r\n    address sender = msg.sender;\r\n    uint256 weiAmountSent = msg.value;\r\n\r\n    // calculate token amount\r\n    uint256 bonusMultiplier = getBonusMultiplier(weiAmountSent);\r\n    uint256 newTokens = weiAmountSent.mul(tokenBaseRate).mul(bonusMultiplier).div(100);\r\n\r\n    // check totals and mint the tokens\r\n    checkTotalsAndMintTokens(sender, newTokens, false);\r\n\r\n    // Log Event\r\n    TokenPurchase(sender, weiAmountSent, newTokens);\r\n\r\n    // forward the funds to the vault wallet\r\n    vaultWallet.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n  * @dev Reserve Tokens\r\n  * @param _wallet Destination Address\r\n  * @param _amount Amount of tokens\r\n  */\r\n  function reserveTokens(address _wallet, uint256 _amount) public onlyOwner {\r\n    // check amount positive\r\n    require(_amount > 0);\r\n    // check destination address not null\r\n    require(_wallet != address(0));\r\n\r\n    // make sure that we're in private sale or presale\r\n    require(isPrivateSaleRunning() || isPreSaleRunning());\r\n\r\n    // check cap\r\n    uint256 totalTokensReserved = tokensReserved.add(_amount);\r\n    require(tokensSold + totalTokensReserved <= PRE_SALE_TOKEN_CAP);\r\n\r\n    // update total reserved\r\n    tokensReserved = totalTokensReserved;\r\n\r\n    // save user reservation\r\n    externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.add(_amount);\r\n\r\n    // Log Event\r\n    TokenReservation(_wallet, _amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Confirm Reserved Tokens\r\n  * @param _wallet Destination Address\r\n  * @param _amount Amount of tokens\r\n  */\r\n  function confirmReservedTokens(address _wallet, uint256 _amount) public onlyOwner {\r\n    // check amount positive\r\n    require(_amount > 0);\r\n    // check destination address not null\r\n    require(_wallet != address(0));\r\n\r\n    // make sure the sale hasn't ended yet\r\n    require(!hasEnded());\r\n\r\n    // check amount not more than reserved\r\n    require(_amount <= externalSupportersMap[_wallet].reservedAmount);\r\n\r\n    // check totals and mint the tokens\r\n    checkTotalsAndMintTokens(_wallet, _amount, true);\r\n\r\n    // Log Event\r\n    TokenReservationConfirmation(_wallet, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel Reserved Tokens\r\n   * @param _wallet Destination Address\r\n   * @param _amount Amount of tokens\r\n   */\r\n  function cancelReservedTokens(address _wallet, uint256 _amount) public onlyOwner {\r\n    // check amount positive\r\n    require(_amount > 0);\r\n    // check destination address not null\r\n    require(_wallet != address(0));\r\n\r\n    // make sure the sale hasn't ended yet\r\n    require(!hasEnded());\r\n\r\n    // check amount not more than reserved\r\n    require(_amount <= externalSupportersMap[_wallet].reservedAmount);\r\n\r\n    // update total reserved\r\n    tokensReserved = tokensReserved.sub(_amount);\r\n\r\n    // update user reservation\r\n    externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.sub(_amount);\r\n\r\n    // Log Event\r\n    TokenReservationCancellation(_wallet, _amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Check totals and Mint tokens\r\n  * @param _wallet Destination Address\r\n  * @param _amount Amount of tokens\r\n  */\r\n  function checkTotalsAndMintTokens(address _wallet, uint256 _amount, bool _fromReservation) private {\r\n    // check that we have not yet reached the cap\r\n    uint256 totalTokensSold = tokensSold.add(_amount);\r\n\r\n    uint256 totalTokensReserved = tokensReserved;\r\n    if (_fromReservation) {\r\n      totalTokensReserved = totalTokensReserved.sub(_amount);\r\n    }\r\n\r\n    if (isMainSaleRunning()) {\r\n      require(totalTokensSold + totalTokensReserved <= TOKEN_SALE_CAP);\r\n    } else {\r\n      require(totalTokensSold + totalTokensReserved <= PRE_SALE_TOKEN_CAP);\r\n    }\r\n\r\n    // update contract state\r\n    tokensSold = totalTokensSold;\r\n\r\n    if (_fromReservation) {\r\n      externalSupportersMap[_wallet].reservedAmount = externalSupportersMap[_wallet].reservedAmount.sub(_amount);\r\n      tokensReserved = totalTokensReserved;\r\n    }\r\n\r\n    // mint the tokens\r\n    token.mint(_wallet, _amount);\r\n\r\n    address userReferrer = getUserReferrer(_wallet);\r\n\r\n    if (userReferrer != address(0)) {\r\n      // Mint Referrer bonus\r\n      mintReferralShare(_amount, userReferrer, referrerBonusRate);\r\n\r\n      // Mint Referred bonus\r\n      mintReferralShare(_amount, _wallet, referredBonusRate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Mint Referral Share\r\n   * @param _amount Amount of tokens\r\n   * @param _userAddress User Address\r\n   * @param _bonusRate Bonus rate (2 decimals)\r\n   */\r\n  function mintReferralShare(uint256 _amount, address _userAddress, uint256 _bonusRate) private {\r\n    // calculate max tokens available\r\n    uint256 currentCap;\r\n\r\n    if (isMainSaleRunning()) {\r\n      currentCap = TOKEN_SALE_CAP;\r\n    } else {\r\n      currentCap = PRE_SALE_TOKEN_CAP;\r\n    }\r\n\r\n    uint256 maxTokensAvailable = currentCap - tokensSold - tokensReserved;\r\n\r\n    // check if we have enough tokens\r\n    uint256 fullShare = _amount.mul(_bonusRate).div(10000);\r\n    if (fullShare <= maxTokensAvailable) {\r\n      // mint the tokens\r\n      token.mint(_userAddress, fullShare);\r\n\r\n      // update state\r\n      tokensSold = tokensSold.add(fullShare);\r\n\r\n      // log event\r\n      ReferralBonusMinted(_userAddress, fullShare);\r\n    }\r\n    else {\r\n      // mint the available tokens\r\n      token.mint(_userAddress, maxTokensAvailable);\r\n\r\n      // update state\r\n      tokensSold = tokensSold.add(maxTokensAvailable);\r\n\r\n      // log events\r\n\r\n      ReferralBonusMinted(_userAddress, maxTokensAvailable);\r\n      ReferralBonusIncomplete(_userAddress, fullShare - maxTokensAvailable);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Start Presale\r\n  */\r\n  function startPreSale() public onlyOwner {\r\n    // make sure we're in the private sale state\r\n    require(currentState == TokenSaleState.Private);\r\n\r\n    // move to presale\r\n    currentState = TokenSaleState.Pre;\r\n  }\r\n\r\n  /**\r\n  * @dev Go back to private sale\r\n  */\r\n  function goBackToPrivateSale() public onlyOwner {\r\n    // make sure we're in the pre sale\r\n    require(currentState == TokenSaleState.Pre);\r\n\r\n    // go back to private\r\n    currentState = TokenSaleState.Private;\r\n  }\r\n\r\n  /**\r\n  * @dev Start Main sale\r\n  */\r\n  function startMainSale() public onlyOwner {\r\n    // make sure we're in the presale state\r\n    require(currentState == TokenSaleState.Pre);\r\n\r\n    // move to main sale\r\n    currentState = TokenSaleState.Main;\r\n  }\r\n\r\n  /**\r\n  * @dev Go back to Presale\r\n  */\r\n  function goBackToPreSale() public onlyOwner {\r\n    // make sure we're in the main sale\r\n    require(currentState == TokenSaleState.Main);\r\n\r\n    // go back to presale\r\n    currentState = TokenSaleState.Pre;\r\n  }\r\n\r\n  /**\r\n  * @dev Ends the operation of the contract\r\n  */\r\n  function finishContract() public onlyOwner {\r\n    // make sure we're in the main sale\r\n    require(currentState == TokenSaleState.Main);\r\n\r\n    // make sure there are no pending reservations\r\n    require(tokensReserved == 0);\r\n\r\n    // mark sale as finished\r\n    currentState = TokenSaleState.Finished;\r\n\r\n    // send the unsold tokens to the airdrop wallet\r\n    uint256 unsoldTokens = TOKEN_SALE_CAP.sub(tokensSold);\r\n    token.mint(airdropWallet, unsoldTokens);\r\n\r\n    // send the company reserve tokens to the vault wallet\r\n    uint256 notForSaleTokens = TOTAL_TOKENS_SUPPLY.sub(TOKEN_SALE_CAP);\r\n    token.mint(vaultWallet, notForSaleTokens);\r\n\r\n    // finish the minting of the token, so that transfers are allowed\r\n    token.finishMinting();\r\n\r\n    // transfer ownership of the token contract to the owner,\r\n    // so it isn't locked to be a child of the crowd sale contract\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n  /**\r\n  * @dev Updates the maximum allowed gas price that can be used when calling buyTokens()\r\n  * @param _newMaxTxGasPrice The new maximum gas price\r\n  */\r\n  function updateMaxTxGasPrice(uint256 _newMaxTxGasPrice) public onlyOwner {\r\n    require(_newMaxTxGasPrice > 0);\r\n    maxTxGasPrice = _newMaxTxGasPrice;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the token baserate\r\n   * @param _tokenBaseRate The new token baserate in tokens/eth\r\n   */\r\n  function updateTokenBaseRate(uint256 _tokenBaseRate) public onlyOwner {\r\n    require(_tokenBaseRate > 0);\r\n    tokenBaseRate = _tokenBaseRate;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the Vault Wallet address\r\n   * @param _vaultWallet The new vault wallet\r\n   */\r\n  function updateVaultWallet(address _vaultWallet) public onlyOwner {\r\n    require(_vaultWallet != address(0));\r\n    vaultWallet = _vaultWallet;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the KYC Wallet address\r\n   * @param _kycWallet The new kyc wallet\r\n   */\r\n  function updateKYCWallet(address _kycWallet) public onlyOwner {\r\n    require(_kycWallet != address(0));\r\n    kycWallet = _kycWallet;\r\n  }\r\n\r\n  /**\r\n  * @dev Approve user's KYC\r\n  * @param _user User Address\r\n  */\r\n  function approveUserKYC(address _user) onlyOwnerOrKYCWallet public {\r\n    require(_user != address(0));\r\n\r\n    Supporter storage sup = supportersMap[_user];\r\n    sup.hasKYC = true;\r\n    KYC(_user, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Disapprove user's KYC\r\n   * @param _user User Address\r\n   */\r\n  function disapproveUserKYC(address _user) onlyOwnerOrKYCWallet public {\r\n    require(_user != address(0));\r\n\r\n    Supporter storage sup = supportersMap[_user];\r\n    sup.hasKYC = false;\r\n    KYC(_user, false);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve user's KYC and sets referrer\r\n   * @param _user User Address\r\n   * @param _referrerAddress Referrer Address\r\n   */\r\n  function approveUserKYCAndSetReferrer(address _user, address _referrerAddress) onlyOwnerOrKYCWallet public {\r\n    require(_user != address(0));\r\n\r\n    Supporter storage sup = supportersMap[_user];\r\n    sup.hasKYC = true;\r\n    sup.referrerAddress = _referrerAddress;\r\n\r\n    // log events\r\n    KYC(_user, true);\r\n    ReferrerSet(_user, _referrerAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev check if private sale is running\r\n  */\r\n  function isPrivateSaleRunning() public view returns (bool) {\r\n    return (currentState == TokenSaleState.Private);\r\n  }\r\n\r\n  /**\r\n  * @dev check if pre sale or main sale are running\r\n  */\r\n  function isPublicTokenSaleRunning() public view returns (bool) {\r\n    return (isPreSaleRunning() || isMainSaleRunning());\r\n  }\r\n\r\n  /**\r\n  * @dev check if pre sale is running\r\n  */\r\n  function isPreSaleRunning() public view returns (bool) {\r\n    return (currentState == TokenSaleState.Pre);\r\n  }\r\n\r\n  /**\r\n  * @dev check if main sale is running\r\n  */\r\n  function isMainSaleRunning() public view returns (bool) {\r\n    return (currentState == TokenSaleState.Main);\r\n  }\r\n\r\n  /**\r\n  * @dev check if sale has ended\r\n  */\r\n  function hasEnded() public view returns (bool) {\r\n    return (currentState == TokenSaleState.Finished);\r\n  }\r\n\r\n  /**\r\n  * @dev Check if user has passed KYC\r\n  * @param _user User Address\r\n  */\r\n  function userHasKYC(address _user) public view returns (bool) {\r\n    return supportersMap[_user].hasKYC;\r\n  }\r\n\r\n  /**\r\n  * @dev Get User's referrer address\r\n  * @param _user User Address\r\n  */\r\n  function getUserReferrer(address _user) public view returns (address) {\r\n    return supportersMap[_user].referrerAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Get User's reserved amount\r\n  * @param _user User Address\r\n  */\r\n  function getReservedAmount(address _user) public view returns (uint256) {\r\n    return externalSupportersMap[_user].reservedAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bonus multiplier to calculate the purchase rate\r\n   * @param _weiAmount Purchase amount\r\n   */\r\n  function getBonusMultiplier(uint256 _weiAmount) internal view returns (uint256) {\r\n    if (isMainSaleRunning()) {\r\n      return 100;\r\n    }\r\n    else if (isPreSaleRunning()) {\r\n      if (_weiAmount >= PRE_SALE_30_BONUS_MIN) {\r\n        // 30% bonus\r\n        return 130;\r\n      }\r\n      else if (_weiAmount >= PRE_SALE_20_BONUS_MIN) {\r\n        // 20% bonus\r\n        return 120;\r\n      }\r\n      else if (_weiAmount >= PRE_SALE_15_BONUS_MIN) {\r\n        // 15% bonus\r\n        return 115;\r\n      }\r\n      else if (_weiAmount >= PRE_SALE_MIN_ETHER) {\r\n        // 10% bonus\r\n        return 110;\r\n      }\r\n      else {\r\n        // Safeguard but this should never happen as aboveMinimumPurchase checks the minimum\r\n        revert();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Check if the user is buying above the required minimum\r\n   */\r\n  function aboveMinimumPurchase() internal view returns (bool) {\r\n    if (isMainSaleRunning()) {\r\n      return msg.value >= MIN_ETHER;\r\n    }\r\n    else if (isPreSaleRunning()) {\r\n      return msg.value >= PRE_SALE_MIN_ETHER;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SealToken is MintableToken {\r\n    // Constants\r\n    string public constant name = \"SealToken\";\r\n    string public constant symbol = \"SEAL\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Modifier to only allow transfers after the minting has been done\r\n    */\r\n    modifier onlyWhenTransferEnabled() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    function SealToken() public {\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public        \r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)         \r\n        returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        onlyWhenTransferEnabled         \r\n        returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n        onlyWhenTransferEnabled         \r\n        returns (bool) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n        onlyWhenTransferEnabled         \r\n        returns (bool) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyWhenTransferEnabled\r\n        validDestination(_to)         \r\n        returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"referrerBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goBackToPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPrivateSaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainSaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goBackToPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userHasKYC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalSupportersMap\",\"outputs\":[{\"name\":\"reservedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMainSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycWallet\",\"type\":\"address\"}],\"name\":\"updateKYCWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"confirmReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_TOKEN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxTxGasPrice\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenBaseRate\",\"type\":\"uint256\"}],\"name\":\"updateTokenBaseRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"disapproveUserKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"approveUserKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPublicTokenSaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_15_BONUS_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referredBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_20_BONUS_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_MIN_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReservedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vaultWallet\",\"type\":\"address\"}],\"name\":\"updateVaultWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_30_BONUS_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_referrerAddress\",\"type\":\"address\"}],\"name\":\"approveUserKYCAndSetReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportersMap\",\"outputs\":[{\"name\":\"hasKYC\",\"type\":\"bool\"},{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vaultWallet\",\"type\":\"address\"},{\"name\":\"_airdropWallet\",\"type\":\"address\"},{\"name\":\"_kycWallet\",\"type\":\"address\"},{\"name\":\"_tokenBaseRate\",\"type\":\"uint256\"},{\"name\":\"_referrerBonusRate\",\"type\":\"uint256\"},{\"name\":\"_referredBonusRate\",\"type\":\"uint256\"},{\"name\":\"_maxTxGasPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReservation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReservationConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReservationCancellation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"KYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"ReferrerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"missingAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralBonusIncomplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralBonusMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SealTokenSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000025410e0157905623b05e71ed74fa2952c5bb756500000000000000000000000036e0267ba928f87c4d770ec9c17c0c98fa16b6090000000000000000000000007ef8a9162e8d1a38a07d8dac57c918241db5d754000000000000000000000000000000000000000000000000000000000000196400000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000ba43b7400","Library":"","SwarmSource":"bzzr://657e8a809d575b063e8abd4009c449b59db082c9d9c3f9d9395491637ffc5490"}]}