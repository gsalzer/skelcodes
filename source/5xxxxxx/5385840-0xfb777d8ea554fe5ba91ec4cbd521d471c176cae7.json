{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\r\n */\r\ncontract Ownable {\r\n    modifier onlyOwner() {\r\n        checkOwner();\r\n        _;\r\n    }\r\n\r\n    function checkOwner() internal;\r\n}\r\n\r\n/**\r\n * @title OwnableImpl\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableImpl is Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function OwnableImpl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function checkOwner() internal {\r\n        require(msg.sender == owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Secured\r\n * @dev Adds only(role) modifier. Subcontracts should implement checkRole to check if caller is allowed to do action.\r\n */\r\ncontract Secured {\r\n    modifier only(string role) {\r\n        require(msg.sender == getRole(role));\r\n        _;\r\n    }\r\n\r\n    function getRole(string role) constant public returns (address);\r\n}\r\n\r\ncontract SecuredImpl is Ownable, Secured {\r\n\tmapping(string => address) users;\r\n\tevent RoleTransferred(address indexed previousUser, address indexed newUser, string role);\r\n\r\n\tfunction getRole(string role) constant public returns (address) {\r\n\t\treturn users[role];\r\n\t}\r\n\r\n\tfunction transferRole(string role, address to) onlyOwner public {\r\n\t\trequire(to != address(0));\r\n\t\temit RoleTransferred(users[role], to, role);\r\n\t\tusers[role] = to;\r\n\t}\r\n}\r\n\r\ncontract Factory {\r\n    event TokenCreated(address addr);\r\n    event SaleCreated(address addr);\r\n\r\n    function createICO(bytes token, bytes sale) public {\r\n        address tokenAddress = create(token);\r\n        emit TokenCreated(tokenAddress);\r\n        address saleAddress = create(sale);\r\n        emit SaleCreated(saleAddress);\r\n        SecuredImpl(tokenAddress).transferRole(\"minter\", saleAddress);\r\n        OwnableImpl(tokenAddress).transferOwnership(msg.sender);\r\n        OwnableImpl(saleAddress).transferOwnership(msg.sender);\r\n    }\r\n\r\n    function create(bytes code) internal returns (address addr) {\r\n        assembly {\r\n            addr := create(0, add(code,0x20), mload(code))\r\n            switch extcodesize(addr) case 0 {revert(0, 0)} default {}\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"bytes\"},{\"name\":\"sale\",\"type\":\"bytes\"}],\"name\":\"createICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SaleCreated\",\"type\":\"event\"}]","ContractName":"Factory","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://993af36dd71ceead7732f559f36787376768b4c6489aa937b3d9267b7f686f3d"}]}