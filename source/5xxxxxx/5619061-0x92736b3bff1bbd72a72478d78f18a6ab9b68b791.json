{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    // solium-disable-next-line security/no-send\r\n    assert(owner.send(address(this).balance));\r\n  }\r\n}\r\n\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC223 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract CheckpointStorage {\r\n\r\n  /**\r\n   * @dev `Checkpoint` is the structure that attaches a block number to a\r\n   * @dev given value, the block number attached is the one that last changed the\r\n   * @dev value\r\n   */\r\n  struct Checkpoint {\r\n    // `fromBlock` is the block number that the value was generated from\r\n    uint128 fromBlock;\r\n\r\n    // `value` is the amount of tokens at a specific block number\r\n    uint128 value;\r\n  }\r\n\r\n  // Tracks the history of the `totalSupply` of the token\r\n  Checkpoint[] public totalSupplyHistory;\r\n\r\n  /**\r\n   * @dev `getValueAt` retrieves the number of tokens at a given block number\r\n   *\r\n   * @param checkpoints The history of values being queried\r\n   * @param _block The block number to retrieve the value at\r\n   * @return The number of tokens being queried\r\n   */\r\n  function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\r\n    if (checkpoints.length == 0)\r\n      return 0;\r\n\r\n    // Shortcut for the actual value\r\n    if (_block >= checkpoints[checkpoints.length - 1].fromBlock)\r\n      return checkpoints[checkpoints.length - 1].value;\r\n    if (_block < checkpoints[0].fromBlock)\r\n      return 0;\r\n\r\n    // Binary search of the value in the array\r\n    uint min = 0;\r\n    uint max = checkpoints.length - 1;\r\n    while (max > min) {\r\n      uint mid = (max + min + 1) / 2;\r\n      if (checkpoints[mid].fromBlock <= _block) {\r\n        min = mid;\r\n      } else {\r\n        max = mid - 1;\r\n      }\r\n    }\r\n    return checkpoints[min].value;\r\n  }\r\n\r\n  /**\r\n   * @dev `updateValueAtNow` used to update the `balances` map and the\r\n   * @dev `totalSupplyHistory`\r\n   *\r\n   * @param checkpoints The history of data being updated\r\n   * @param _value The new number of tokens\r\n   */\r\n  function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n    if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n      Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n      newCheckPoint.fromBlock = uint128(block.number);\r\n      newCheckPoint.value = uint128(_value);\r\n    } else {\r\n      Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n      oldCheckPoint.value = uint128(_value);\r\n    }\r\n  }\r\n}\r\n\r\ncontract SatisfactionToken is ERC20, CheckpointStorage, NoOwner {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"Satisfaction Token\";\r\n  uint8 public decimals = 18;\r\n  string public symbol = \"SAT\";\r\n  string public version;\r\n\r\n  /**\r\n   * `parentToken` is the Token address that was cloned to produce this token;\r\n   *  it will be 0x0 for a token that was not cloned\r\n   */\r\n  SatisfactionToken public parentToken;\r\n\r\n  /**\r\n   * `parentSnapShotBlock` is the block number from the Parent Token that was\r\n   *  used to determine the initial distribution of the Clone Token\r\n   */\r\n  uint256 public parentSnapShotBlock;\r\n\r\n  // `creationBlock` is the block number that the Clone Token was created\r\n  uint256 public creationBlock;\r\n\r\n  /**\r\n   * `balances` is the map that tracks the balance of each address, in this\r\n   *  contract when the balance changes the block number that the change\r\n   *  occurred is also included in the map\r\n   */\r\n  mapping(address => Checkpoint[]) internal balances;\r\n\r\n  // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n  mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n  // Flag that determines if the token is transferable or not.\r\n  bool public transfersEnabled;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _parentToken,\r\n    uint256 _parentSnapShotBlock,\r\n    string _tokenVersion,\r\n    bool _transfersEnabled) public\r\n  {\r\n    version = _tokenVersion;\r\n    parentToken = SatisfactionToken(_parentToken);\r\n    parentSnapShotBlock = _parentSnapShotBlock;\r\n    transfersEnabled = _transfersEnabled;\r\n    creationBlock = block.number;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer token for a specified address\r\n   *\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(transfersEnabled);\r\n    require(parentSnapShotBlock < block.number);\r\n    require(_to != address(0));\r\n\r\n    uint256 lastBalance = balanceOfAt(msg.sender, block.number);\r\n    require(_value <= lastBalance);\r\n\r\n    return doTransfer(msg.sender, _to, _value, lastBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n   * @dev address and execute a call with the sent data on the same transaction\r\n   *\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\r\n    require(_to != address(this));\r\n\r\n    transfer(_to, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_to.call.value(msg.value)(_data));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   *\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(transfersEnabled);\r\n    require(parentSnapShotBlock < block.number);\r\n    require(_to != address(0));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    uint256 lastBalance = balanceOfAt(_from, block.number);\r\n    require(_value <= lastBalance);\r\n\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    return doTransfer(_from, _to, _value, lastBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\r\n   * @dev another and make a contract call on the same transaction\r\n   *\r\n   * @param _from The address which you want to send tokens from\r\n   * @param _to The address which you want to transfer to\r\n   * @param _value The amout of tokens to be transferred\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferFromAndCall(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n    public payable returns (bool)\r\n  {\r\n    require(_to != address(this));\r\n\r\n    transferFrom(_from, _to, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_to.call.value(msg.value)(_data));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To increment\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * t@dev he first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n   * @dev an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To increment\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n  function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\r\n    require(_spender != address(this));\r\n\r\n    increaseApproval(_spender, _addedValue);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n   * @dev an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n  function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\r\n    require(_spender != address(this));\r\n\r\n    decreaseApproval(_spender, _subtractedValue);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param _owner The address that's balance is being requested\r\n   * @return The balance of `_owner` at the current block\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balanceOfAt(_owner, block.number);\r\n  }\r\n\r\n  /**\r\n   * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n   *\r\n   * @param _owner The address from which the balance will be retrieved\r\n   * @param _blockNumber The block number when the balance is queried\r\n   * @return The balance at `_blockNumber`\r\n   */\r\n  function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\r\n    // These next few lines are used when the balance of the token is\r\n    //  requested before a check point was ever created for this token, it\r\n    //  requires that the `parentToken.balanceOfAt` be queried at the\r\n    //  genesis block for that token as this contains initial balance of\r\n    //  this token\r\n    if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n      if (address(parentToken) != address(0)) {\r\n        return parentToken.balanceOfAt(_owner, Math.min256(_blockNumber, parentSnapShotBlock));\r\n      } else {\r\n        // Has no parent\r\n        return 0;\r\n      }\r\n    // This will return the expected balance during normal situations\r\n    } else {\r\n      return getValueAt(balances[_owner], _blockNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev This function makes it easy to get the total number of tokens\r\n   *\r\n   * @return The total number of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupplyAt(block.number);\r\n  }\r\n\r\n  /**\r\n   * @dev Total amount of tokens at a specific `_blockNumber`.\r\n   *\r\n   * @param _blockNumber The block number when the totalSupply is queried\r\n   * @return The total amount of tokens at `_blockNumber`\r\n   */\r\n  function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n\r\n    // These next few lines are used when the totalSupply of the token is\r\n    //  requested before a check point was ever created for this token, it\r\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n    //  genesis block for this token as that contains totalSupply of this\r\n    //  token at this block number.\r\n    if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n      if (address(parentToken) != 0) {\r\n        return parentToken.totalSupplyAt(Math.min256(_blockNumber, parentSnapShotBlock));\r\n      } else {\r\n        return 0;\r\n      }\r\n    // This will return the expected totalSupply during normal situations\r\n    } else {\r\n      return getValueAt(totalSupplyHistory, _blockNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   *\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    uint256 curTotalSupply = totalSupply();\r\n    uint256 lastBalance = balanceOf(_to);\r\n\r\n    updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\r\n    updateValueAtNow(balances[_to], lastBalance.add(_amount));\r\n\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   *\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   *\r\n   * @param _value uint256 The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    uint256 lastBalance = balanceOf(msg.sender);\r\n    require(_value <= lastBalance);\r\n\r\n    address burner = msg.sender;\r\n    uint256 curTotalSupply = totalSupply();\r\n\r\n    updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_value));\r\n    updateValueAtNow(balances[burner], lastBalance.sub(_value));\r\n\r\n    emit Burn(burner, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from an address\r\n   *\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned.\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    uint256 lastBalance = balanceOfAt(_from, block.number);\r\n    require(_value <= lastBalance);\r\n\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    address burner = _from;\r\n    uint256 curTotalSupply = totalSupply();\r\n\r\n    updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_value));\r\n    updateValueAtNow(balances[burner], lastBalance.sub(_value));\r\n\r\n    emit Burn(burner, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Enables token holders to transfer their tokens freely if true\r\n   *\r\n   * @param _transfersEnabled True if transfers are allowed in the clone\r\n   */\r\n  function enableTransfers(bool _transfersEnabled) public onlyOwner canMint {\r\n    transfersEnabled = _transfersEnabled;\r\n  }\r\n\r\n  /**\r\n   * @dev This is the actual transfer function in the token contract, it can\r\n   * @dev only be called by other functions in this contract.\r\n   *\r\n   * @param _from The address holding the tokens being transferred\r\n   * @param _to The address of the recipient\r\n   * @param _value The amount of tokens to be transferred\r\n   * @param _lastBalance The last balance of from\r\n   * @return True if the transfer was successful\r\n   */\r\n  function doTransfer(address _from, address _to, uint256 _value, uint256 _lastBalance) internal returns (bool) {\r\n    if (_value == 0) {\r\n      return true;\r\n    }\r\n\r\n    updateValueAtNow(balances[_from], _lastBalance.sub(_value));\r\n\r\n    uint256 previousBalance = balanceOfAt(_to, block.number);\r\n    updateValueAtNow(balances[_to], previousBalance.add(_value));\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyHistory\",\"outputs\":[{\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"name\":\"value\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_parentSnapShotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenVersion\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SatisfactionToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005302e302e31000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9138210f7289043d28b25f453f7d1d05d20eafc759ba87cb4943b1331bce49de"}]}