{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}    \r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract x32323 is owned{\r\n\r\n//設定初始值//\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => bool) initialized;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 2;\r\n    uint256 public totalSupply;\r\n    uint256 public maxSupply = 2300000000;\r\n    uint256 totalairdrop = 600000000;\r\n    uint256 airdrop1 = 1700008000; //1900000000;\r\n    uint256 airdrop2 = 1700011000; //2100000000;\r\n    uint256 airdrop3 = 1700012500; //2300000000;\r\n    \r\n//初始化//\r\n\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n\tinitialSupply = maxSupply - totalairdrop;\r\n    balanceOf[msg.sender] = initialSupply;\r\n    totalSupply = initialSupply;\r\n        name = \"測試16\";\r\n        symbol = \"測試16\";         \r\n    }\r\n\r\n    function initialize(address _address) internal returns (bool success) {\r\n\r\n        if (!initialized[_address]) {\r\n            initialized[_address] = true ;\r\n            if(totalSupply < airdrop1){\r\n                balanceOf[_address] += 20;\r\n                totalSupply += 20;\r\n            }\r\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\r\n                balanceOf[_address] += 8;\r\n                totalSupply += 8;\r\n            }\r\n            if(airdrop2 <= totalSupply && totalSupply <= airdrop3-3){\r\n                balanceOf[_address] += 3;\r\n                totalSupply += 3;    \r\n            }\r\n\t    \r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function reward(address _address) internal returns (bool success) {\r\n\t    if (totalSupply < maxSupply) {\r\n\t        initialized[_address] = true ;\r\n            if(totalSupply < airdrop1){\r\n                balanceOf[_address] += 10;\r\n                totalSupply += 10;\r\n            }\r\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\r\n                balanceOf[_address] += 3;\r\n                totalSupply += 3;\r\n            }\r\n            if(airdrop2 <= totalSupply && totalSupply < airdrop3){\r\n                balanceOf[_address] += 1;\r\n                totalSupply += 1;    \r\n            }\r\n\t\t\r\n\t    }\r\n\t    return true;\r\n    }\r\n//交易//\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n    \trequire(!frozenAccount[_from]);\r\n        require(_to != 0x0);\r\n\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n\r\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t   \r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n\tinitialize(_from);\r\n\treward(_from);\r\n\tinitialize(_to);\r\n        \r\n        \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        \r\n\tif(msg.sender.balance < minBalanceForAccounts)\r\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n//販售//\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function buy() payable returns (uint amount){\r\n        amount = msg.value / buyPrice;                    // calculates the amount\r\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\r\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\r\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\r\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n        return amount;                                    // ends function and returns\r\n    }\r\n\r\n    function sell(uint amount) returns (uint revenue){\r\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\r\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\r\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\r\n        revenue = amount * sellPrice;\r\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\r\n        return revenue;                                   // ends function and returns\r\n    }\r\n\r\n\r\n    uint minBalanceForAccounts;\r\n    \r\n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\r\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"TokenERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumBalanceInFinney\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"x32323","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a61986375f51bcf00f595785aada72cf1227f36f5c36b6b9824841858d129749"}]}