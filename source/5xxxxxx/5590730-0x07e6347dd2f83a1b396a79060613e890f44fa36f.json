{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n /**\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function transferFromContract(address _to, uint256 _value) internal returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[address(this)]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[address(this)] = balances[address(this)].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(address(this), _to, _value);\r\n    return true;\r\n  }  \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) internal {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\ncontract MintableToken is BasicToken {\r\n /**\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */ \r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) internal returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n  \r\n} \r\n\r\ncontract EFToken is MintableToken, BurnableToken, Ownable {\r\n  string public constant name = \"EtherFactoryToken\"; \r\n  string public constant symbol = \"EFT\"; \r\n  uint8 public constant decimals = 0;  \r\n  \r\n  uint256 internal presellStart = now;\r\n  \r\n  mapping(uint256 => address) internal InviterAddress; \r\n  mapping(address => uint256) public InviterToID; \r\n \r\n  uint256 private InviterID = 0;\r\n  \r\n  function sellTokens(uint256 _value) public gameStarted {\r\n  \r\n    require (balances[msg.sender] >= _value && _value > 0);\r\n\tuint256 balance = address(this).balance;\r\n\trequire (balance > 0);\r\n\t\r\n    uint256 total = totalSupply();\r\n\tuint256 sellRate = uint256( balance.div( total ) );\r\n\tuint256 ethValue = sellRate.mul(_value);\r\n\tmsg.sender.transfer(ethValue);\r\n\tburn(_value);\r\n\t\r\n  } \r\n  \r\n  function buyTokens() public gameStarted payable {\r\n    \r\n\tuint256 eth = msg.value;\r\n    require ( msg.value>0 );\r\n\tuint256 tokensAmount = balances[address(this)];\r\n\tuint256 balance = uint256(SafeMath.sub(address(this).balance,msg.value));\r\n\tif (balance < 0.1 ether)\r\n\t\tbalance = 0.1 ether;\r\n    uint256 total = totalSupply();\r\n\tuint256 sellRate = uint256( balance.div( total ) );\r\n\tuint256 eftValue = uint256(eth.div(sellRate));\r\n\trequire ( eftValue <= tokensAmount && eftValue > 0 );\r\n\t\r\n\ttransferFromContract(msg.sender, eftValue);\r\n\r\n\tuint256 fee = uint256(SafeMath.div(msg.value, 10)); \r\n\t// dev fee 10%\r\n\towner.transfer(fee); \t\r\n  } \r\n\r\n  function inviterReg() public {\r\n\trequire (msg.sender != address(0) && InviterToID[msg.sender] == 0);\r\n\t\r\n\tInviterID++;\r\n\tInviterAddress[InviterID] = msg.sender;\r\n\tInviterToID[msg.sender] = InviterID;\r\n  }\r\n  \r\n  function tokensRate() public view returns (uint256 rate, uint256 yourEFT, uint256 totalEFT, uint256 ethBalance, uint256 eftBalance) {\r\n    yourEFT = balanceOf (msg.sender);\r\n    totalEFT = totalSupply();\r\n\tethBalance = address(this).balance;\r\n\trate = uint256(ethBalance.div(totalEFT));\r\n\teftBalance = balances[address(this)];\r\n  }\r\n  \r\n  //views\r\n  function presellTimer() public view returns (uint256 presellLeft) {\r\n\tpresellLeft = uint256(SafeMath.div(now.sub(presellStart), 60));\r\n  }\r\n  \r\n  //modifiers\r\n  modifier gameStarted() {\r\n    require(now - presellStart >= 604800); // 604800 sec = one  week\r\n    _;\r\n  }\r\n    \r\n}\r\n\r\ncontract EtherFactory is EFToken {\r\n\r\n  //FactoryID -> workers qualification (depends on factory level) -> workers amount\r\n  mapping(uint256 => mapping(uint8 => uint256)) internal FactoryPersonal; \r\n  \r\n  //FactoryID -> owner address\r\n  mapping(uint256 => address) internal FactoryOwner; \r\n  \r\n  //FactoryID -> start work date (timestamp). For profit calculate;\r\n  mapping(uint256 => uint256) internal FactoryWorkStart; \r\n  \r\n  //FactoryID -> factory level;\r\n  mapping(uint256 => uint8) internal FactoryLevel; \r\n  \r\n   //FactoryID -> factory eth price;\r\n  mapping(uint256 => uint256) internal FactoryPrice; \r\n\r\n   //FactoryID -> factory name;\r\n  mapping(uint256 => string) internal FactoryName; \r\n  \r\n  //Worker -> qualification\r\n  mapping(address => uint8) internal WorkerQualification; \r\n  \r\n  //Worker -> FactoryID\r\n  mapping(address => uint256) internal WorkerFactory; \r\n  \r\n  //Worker -> start work date (timestamp). For profit calculate;\r\n  mapping(address => uint256) internal WorkerWorkStart;   \r\n  \r\n  uint256 FactoryID = 0;\r\n  \r\n  //Factories core\r\n  \r\n  function setFactoryName(uint256 _FactoryID, string _Name) public {\r\n\trequire (FactoryOwner[_FactoryID] == msg.sender);\t\r\n\trequire(bytes(_Name).length <= 50);\r\n\tFactoryName[_FactoryID] = _Name; \r\n  }\r\n  \r\n  function getFactoryProfit(uint256 _FactoryID, address _FactoryOwner) public gameStarted {\r\n\trequire (FactoryOwner[_FactoryID] == _FactoryOwner);\r\n\t\r\n\t//Factory profit equal to the earnings of all workers.\r\n\tuint256 profitMinutes = uint256(SafeMath.div(SafeMath.sub(now, FactoryWorkStart[_FactoryID]), 60));\r\n\tif (profitMinutes > 0) {\r\n\t\tuint256 profit = 0;\r\n\t\t\r\n\t\tfor (uint8 level=1; level<=FactoryLevel[_FactoryID]; level++) {\r\n\t\t   profit += SafeMath.mul(SafeMath.mul(uint256(level),profitMinutes), FactoryPersonal[_FactoryID][level]);\r\n\t\t}\r\n\t\t\r\n\t\tif (profit > 0) {\r\n\t\t\tmint(_FactoryOwner,profit);\r\n\t\t\tFactoryWorkStart[_FactoryID] = now;\r\n\t\t}\r\n\t}\r\n\t\r\n  }\r\n\r\n  function buildFactory(uint8 _level, uint256 _inviterID) public payable {\r\n  \r\n    require (_level>0 && _level<=100);\r\n\t\r\n    uint256 buildCost = uint256(_level).mul( getFactoryPrice() );\r\n\trequire (msg.value == buildCost);\r\n\t\r\n\tFactoryID++;\r\n\tFactoryOwner[FactoryID] = msg.sender;\r\n\tFactoryLevel[FactoryID] = _level;\r\n\tFactoryPrice[FactoryID] = SafeMath.mul(0.15 ether, _level);\r\n\t\r\n\t//for EFT-ETH rate balance\r\n\tmint(address(this), SafeMath.mul(1000000, _level));\r\n\t\r\n\t\r\n\taddress Inviter = InviterAddress[_inviterID];\r\n\r\n\tuint256 fee = uint256(SafeMath.div(msg.value, 20)); \r\n\t\r\n\tif ( Inviter != address(0)) {\r\n\t\t//bounty for invite -> 5% from payment\r\n\t\tInviter.transfer(fee); \r\n\t} else {\r\n\t    //no inviter, dev fee - 10%\r\n\t\tfee = fee.mul(2);\r\n\t}\r\n\t\r\n\t// dev fee\r\n\towner.transfer(fee); \t\r\n  }  \r\n  \r\n  function upgradeFactory(uint256 _FactoryID) public payable {\r\n  \r\n    require (FactoryOwner[_FactoryID] == msg.sender);\r\n\trequire (FactoryLevel[_FactoryID] < 100);\r\n\t\r\n\trequire (msg.value == getFactoryPrice() );\r\n\r\n\tFactoryLevel[_FactoryID]++ ;\r\n\tFactoryPrice[FactoryID] += 0.15 ether;\r\n\t\r\n\t//for EFT-ETH rate balance\r\n\tmint(address(this), 1000000);\r\n\t\r\n\tuint256 fee = uint256(SafeMath.div(msg.value, 10)); \r\n\t// dev fee 10%\r\n\towner.transfer(fee); \r\n\t\r\n  }    \r\n  \r\n  function buyExistFactory(uint256 _FactoryID) public payable {\r\n  \r\n    address factoryOwner = FactoryOwner[_FactoryID];\r\n\t\r\n    require ( factoryOwner != address(0) && factoryOwner != msg.sender && msg.sender != address(0) );\r\n\r\n    uint256 factoryPrice = FactoryPrice[_FactoryID];\r\n    require(msg.value >= factoryPrice);\r\n\t\r\n\t//new owner\r\n\tFactoryOwner[_FactoryID] = msg.sender;\r\n\t\r\n\t//90% to previous factory owner\r\n\tuint256 Payment90percent = uint256(SafeMath.div(SafeMath.mul(factoryPrice, 9), 10)); \r\n\r\n\t//5% dev fee\r\n\tuint256 fee = uint256(SafeMath.div(SafeMath.mul(factoryPrice, 5), 100)); \r\n\t\r\n\t//new price +50%\r\n\tFactoryPrice[_FactoryID] = uint256(SafeMath.div(SafeMath.mul(factoryPrice, 3), 2)); \r\n\r\n\t\r\n    factoryOwner.transfer(Payment90percent); \r\n\towner.transfer(fee); \r\n\t\r\n\t//return excess pay\r\n    if (msg.value > factoryPrice) { \r\n\t\tmsg.sender.transfer(msg.value - factoryPrice);\r\n\t}\r\n  }   \r\n  \r\n  function increaseMarketValue(uint256 _FactoryID, uint256 _tokens) public gameStarted {\r\n  \r\n\tuint256 eftTOethRATE = 200000000000;\r\n\t\r\n\trequire (FactoryOwner[_FactoryID] == msg.sender);\r\n\trequire (balances[msg.sender] >= _tokens && _tokens>0);\r\n\t\r\n\tFactoryPrice[_FactoryID] = FactoryPrice[_FactoryID] + _tokens*eftTOethRATE;\r\n\tburn(_tokens);\r\n  }\r\n  \r\n  \r\n  \r\n  //workers core\r\n  \r\n  function findJob(uint256 _FactoryID) public gameStarted {\r\n    \r\n    require (WorkerFactory[msg.sender] != _FactoryID);\r\n  \r\n\tif (WorkerQualification[msg.sender] == 0) {\r\n\t\tWorkerQualification[msg.sender] = 1;\r\n\t}\r\n\r\n\tuint8 qualification = WorkerQualification[msg.sender];\r\n\t\t\r\n\trequire (FactoryLevel[_FactoryID] >= qualification);\r\n\t\r\n\t//100 is limit for each worker qualificationon on the factory\r\n\trequire (FactoryPersonal[_FactoryID][qualification] < 100);\r\n\t\r\n\t//reset factory and worker profit timer\r\n\tif (WorkerFactory[msg.sender]>0) {\r\n\t\tgetFactoryProfit(_FactoryID, FactoryOwner[_FactoryID]);\r\n\t\tgetWorkerProfit();\r\n\t} else {\r\n\t\tWorkerWorkStart[msg.sender] = now;\r\n\t}\r\n\t\r\n\t//previous factory lost worker\r\n\tif (WorkerFactory[msg.sender] > 0 ) {\r\n\t   FactoryPersonal[WorkerFactory[msg.sender]][qualification]--;\r\n\t}\r\n\t\r\n\tWorkerFactory[msg.sender] = _FactoryID;\r\n\t\r\n\tFactoryPersonal[_FactoryID][qualification]++;\r\n\t\r\n\tif (FactoryWorkStart[_FactoryID] ==0)\r\n\t\tFactoryWorkStart[_FactoryID] = now;\r\n\t\r\n  } \r\n  \r\n  function getWorkerProfit() public gameStarted {\r\n\trequire (WorkerFactory[msg.sender] > 0);\r\n\t\r\n\t//Worker with qualification \"ONE\" earn 1 token per minute, \"TWO\" earn 2 tokens, etc...\r\n\tuint256 profitMinutes = uint256(SafeMath.div(SafeMath.sub(now, WorkerWorkStart[msg.sender]), 60));\r\n\tif (profitMinutes > 0) {\r\n\t\tuint8 qualification = WorkerQualification[msg.sender];\r\n\t\t\r\n\t\tuint256 profitEFT = SafeMath.mul(uint256(qualification),profitMinutes);\r\n\t\t\r\n\t\trequire (profitEFT > 0);\r\n\t\t\r\n\t\tmint(msg.sender,profitEFT);\r\n\t\t\r\n\t\tWorkerWorkStart[msg.sender] = now;\r\n\t}\r\n\t\r\n  }  \r\n  \r\n  function upgradeQualificationByTokens() public gameStarted {\r\n\t\r\n\trequire (WorkerQualification[msg.sender]<100);\r\n\t\r\n    uint256 upgradeCost = 10000;\r\n\trequire (balances[msg.sender] >= upgradeCost);\r\n\t\r\n\tif (WorkerFactory[msg.sender] > 0)\r\n\t\tgetWorkerProfit();\r\n    \r\n\tuint8 oldQualification = WorkerQualification[msg.sender];\r\n\t\r\n\tuint256 WorkerFactoryID = WorkerFactory[msg.sender];\r\n\r\n\tif (WorkerQualification[msg.sender]==0) \r\n\t\tWorkerQualification[msg.sender]=2;\r\n\telse \r\n\t\tWorkerQualification[msg.sender]++;\r\n\t\r\n\tif (WorkerFactoryID > 0) {\r\n\t\tgetFactoryProfit(WorkerFactoryID, FactoryOwner[WorkerFactoryID]);\r\n\t\tFactoryPersonal[WorkerFactoryID][oldQualification]--;\r\n\t\r\n\t\tif (FactoryLevel[WorkerFactoryID] >= oldQualification+1) {\r\n\t\t\tFactoryPersonal[WorkerFactoryID][oldQualification+1]++;\r\n\t\t} else {\r\n\t\t\t//will unemployed\r\n\t\t\tWorkerFactory[msg.sender] = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// burn tokens\r\n\tburn(upgradeCost);\r\n\t\r\n  }   \r\n  \r\n  function upgradeQualificationByEther(uint256 _inviterID) public payable {\r\n\t\r\n\trequire (WorkerQualification[msg.sender]<100);\r\n\t\r\n\t//0.001 ether or 0.00075 presell\r\n\trequire ( msg.value == SafeMath.div(getFactoryPrice(),100) );\r\n\t\r\n\tuint256 fee = uint256(SafeMath.div(msg.value, 20)); //5%\r\n\t\r\n\taddress Inviter = InviterAddress[_inviterID];\r\n\r\n\tif ( Inviter != address(0)) {\r\n\t\t//bounty for invite -> 5% from payment\r\n\t\tInviter.transfer(fee); \r\n\t} else {\r\n\t    //no inviter, dev fee - 10%\r\n\t\tfee = fee.mul(2);\r\n\t}\r\n\t\r\n\t// dev fee\r\n\towner.transfer(fee); \r\n\t\r\n\tif (WorkerFactory[msg.sender] > 0)\r\n\t\tgetWorkerProfit();\r\n    \r\n\tuint8 oldQualification = WorkerQualification[msg.sender];\r\n\t\r\n\tuint256 WorkerFactoryID = WorkerFactory[msg.sender];\r\n\t\r\n\tif (WorkerQualification[msg.sender]==0) \r\n\t\tWorkerQualification[msg.sender]=2;\r\n\telse \r\n\t\tWorkerQualification[msg.sender]++;\r\n\t\r\n\t\r\n\t\r\n\tif (WorkerFactoryID > 0) {\r\n\t\tgetFactoryProfit(WorkerFactoryID, FactoryOwner[WorkerFactoryID]);\r\n\t\tFactoryPersonal[WorkerFactoryID][oldQualification]--;\r\n\t\r\n\t\tif (FactoryLevel[WorkerFactoryID] >= oldQualification+1) {\r\n\t\t\tFactoryPersonal[WorkerFactoryID][oldQualification+1]++;\r\n\t\t} else {\r\n\t\t\t//will unemployed\r\n\t\t\tWorkerFactory[msg.sender] = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n  }  \r\n  \r\n  function getFactoryPrice() internal view returns (uint256 price) {\r\n\tif (now - presellStart >= 604800)\r\n\t\tprice = 0.1 ether;\r\n\telse \r\n\t\tprice = 0.075 ether;\r\n  }\r\n  \r\n  \r\n  //views\r\n\r\n  function allFactories() public constant returns(address[] owner, uint256[] profitMinutes, uint256[] price, uint8[] level) {    \r\n\r\n    //FactoryID is count of factories\r\n\tprice = new uint256[](FactoryID);\r\n\tprofitMinutes = new uint256[](FactoryID);\r\n\towner = new address[](FactoryID);\r\n\tlevel = new uint8[](FactoryID);\r\n\r\n\tfor (uint256 index=1; index<=FactoryID; index++) {\r\n\t\tprice[index-1] = FactoryPrice[index];\r\n\t\tprofitMinutes[index-1] = uint256(SafeMath.div(now - FactoryWorkStart[index],60));\r\n\t\towner[index-1] = FactoryOwner[index];\r\n\t\tlevel[index-1] = FactoryLevel[index];\r\n\t}\r\n\t\r\n  }\r\n  \r\n  function aboutFactoryWorkers(uint256 _FactoryID)  public constant returns(uint256[] workers, string factoryName) {    \r\n\tuint8 factoryLevel = FactoryLevel[_FactoryID];\r\n\tfactoryName = FactoryName[_FactoryID];\r\n\t\r\n\tworkers = new uint256[](factoryLevel+1);\r\n\tfor (uint8 qualification=1; qualification<=factoryLevel; qualification++)\r\n\t\tworkers[qualification] = FactoryPersonal[_FactoryID][qualification];\r\n\t\r\n  }  \r\n  \r\n  function aboutWorker(address _worker) public constant returns(uint8 qualification, uint256 factoryId, uint256 profitMinutes, uint8 factoryLevel) {    \r\n\tqualification = WorkerQualification[_worker];\t\r\n\tif (qualification==0)\r\n\t\tqualification=1;\r\n\tfactoryId = WorkerFactory[_worker];\t\r\n\tfactoryLevel = FactoryLevel[factoryId];\r\n\tprofitMinutes = uint256(SafeMath.div(now - WorkerWorkStart[_worker],60));\r\n  }\r\n  \r\n  function contractBalance() public constant returns(uint256 ethBalance) {    \r\n\tethBalance = address(this).balance;\r\n  }  \r\n  \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allFactories\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address[]\"},{\"name\":\"profitMinutes\",\"type\":\"uint256[]\"},{\"name\":\"price\",\"type\":\"uint256[]\"},{\"name\":\"level\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"increaseMarketValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"},{\"name\":\"_FactoryOwner\",\"type\":\"address\"}],\"name\":\"getFactoryProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"InviterToID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presellTimer\",\"outputs\":[{\"name\":\"presellLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgradeQualificationByTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"}],\"name\":\"findJob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviterID\",\"type\":\"uint256\"}],\"name\":\"upgradeQualificationByEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"yourEFT\",\"type\":\"uint256\"},{\"name\":\"totalEFT\",\"type\":\"uint256\"},{\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"name\":\"eftBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"}],\"name\":\"buyExistFactory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getWorkerProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"},{\"name\":\"_Name\",\"type\":\"string\"}],\"name\":\"setFactoryName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_inviterID\",\"type\":\"uint256\"}],\"name\":\"buildFactory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"}],\"name\":\"aboutFactoryWorkers\",\"outputs\":[{\"name\":\"workers\",\"type\":\"uint256[]\"},{\"name\":\"factoryName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inviterReg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FactoryID\",\"type\":\"uint256\"}],\"name\":\"upgradeFactory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"aboutWorker\",\"outputs\":[{\"name\":\"qualification\",\"type\":\"uint8\"},{\"name\":\"factoryId\",\"type\":\"uint256\"},{\"name\":\"profitMinutes\",\"type\":\"uint256\"},{\"name\":\"factoryLevel\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EtherFactory","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57b769d259f4d8ead8071e2691a151c482152b557b32fea2900c2c2ac2fda58d"}]}