{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\ninterface CornFarm\r\n{\r\n    function buyObject(address _beneficiary) public payable;\r\n}\r\n\r\ninterface Corn\r\n{\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * Contract that will forward any incoming Ether to the creator of the contract\r\n */\r\ncontract howbadlycouldthisgowrong {\r\n  // Address to which any funds sent to this contract will be forwarded\r\n  address public parentAddress;\r\n  event ForwarderDeposited(address from, uint value, bytes data);\r\n\r\n  /**\r\n   * Create the contract, and sets the destination address to that of the creator\r\n   */\r\n  function Forwarder() public {\r\n    parentAddress = 0x3D14410609731Ec7924ea8B1f13De544BB46A9A6;\r\n  }\r\n\r\n  /**\r\n   * Modifier that will execute internal code block only if the sender is the parent address\r\n   */\r\n  modifier onlyParent {\r\n    if (msg.sender != parentAddress) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Default function; Gets called when Ether is deposited, and forwards it to the parent address\r\n   */\r\n  function() public payable {\r\n    // throws on failure\r\n    parentAddress.transfer(msg.value);\r\n    // Fire off the deposited event if we can forward it\r\n    ForwarderDeposited(msg.sender, msg.value, msg.data);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\naddress public farmer = 0xC4C6328405F00Fa4a93715D2349f76DF0c7E8b79;\r\n    \r\n    function sowCorn(address soil, uint8 seeds) external\r\n    {\r\n        for(uint8 i = 0; i < seeds; ++i)\r\n        {\r\n            CornFarm(soil).buyObject(this);\r\n        }\r\n    }\r\n    \r\n    function reap(address corn) external\r\n    {\r\n        Corn(corn).transfer(farmer, Corn(corn).balanceOf(this));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"soil\",\"type\":\"address\"},{\"name\":\"seeds\",\"type\":\"uint8\"}],\"name\":\"sowCorn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"corn\",\"type\":\"address\"}],\"name\":\"reap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Forwarder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ForwarderDeposited\",\"type\":\"event\"}]","ContractName":"howbadlycouldthisgowrong","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51999372f27109e1cc641253101abc3c2e5b2c8f2633bfb61791f043e8c49906"}]}