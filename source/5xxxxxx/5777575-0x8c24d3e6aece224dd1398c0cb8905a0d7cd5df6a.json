{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n\r\n   ____      _             _  __                                                    \r\n  / ___|___ (_)_ __  ___  | |/ /__ _ _ __ _ __ ___   __ _        ___ ___  _ __ ___  \r\n | |   / _ \\| | '_ \\/ __| | ' // _` | '__| '_ ` _ \\ / _` |      / __/ _ \\| '_ ` _ \\ \r\n | |__| (_) | | | | \\__ \\ | . \\ (_| | |  | | | | | | (_| |  _  | (_| (_) | | | | | |\r\n  \\____\\___/|_|_| |_|___/ |_|\\_\\__,_|_|  |_| |_| |_|\\__,_| (_)  \\___\\___/|_| |_| |_|\r\n                                                                                    \r\n\r\n*/\r\n\r\ncontract CoinsKarmaFactory is Ownable {\r\n\r\n    event NewCoinsKarma(uint coinsKarmaId, string name, string symbol, uint totalKarmaUp, uint totalKarmaDown, bool exists);\r\n    event NewKarmaVoter(uint karmaVoteId, uint coinsKarmaId, address voterAddress, uint up, uint down, uint voteTime, bool exists);\r\n\r\n    struct CoinsKarma {\r\n        string name;\r\n        string symbol;\r\n        uint totalKarmaUp;\r\n        uint totalKarmaDown;\r\n        bool exists;\r\n    }\r\n\r\n    struct KarmaVotes {\r\n        uint coinsKarmaId;\r\n        address voterAddress;\r\n        uint up;\r\n        uint down;\r\n        uint voteTime;\r\n        bool exists;\r\n    }\r\n\r\n    CoinsKarma[] public coinkarma;\r\n    mapping(string => uint) coinsKarmaCreated;\r\n    mapping(string => uint) coinsKarmaMap;\r\n\r\n    KarmaVotes[] public karmavoters;\r\n    mapping(address => mapping(uint => uint)) karmaVoterCreated;\r\n    mapping(address => mapping(uint => uint)) karmaVoterMap;\r\n\r\n    uint giveKarmaFee = 1800000000000000; // CoinsKarma tries to keep this around $1 and checks regularly to make sure of that. CoinsKarma can change this fee with the alterGiveKarmaFee funciton.\r\n\r\n    /********************************* */\r\n    // karma functions\r\n\r\n    function viewCoinsKarma(uint _coinsKarmaId) view public returns (uint, string, string, uint, uint, bool) {\r\n        CoinsKarma storage coinskarma = coinkarma[_coinsKarmaId];\r\n        return (_coinsKarmaId, coinskarma.name, coinskarma.symbol, coinskarma.totalKarmaUp, coinskarma.totalKarmaDown, coinskarma.exists);\r\n    }\r\n\r\n    function viewCoinsKarmaBySymbol(string _coinSymbol) view public returns (uint, string, string, uint, uint, bool) {\r\n        CoinsKarma storage coinskarma = coinkarma[coinsKarmaMap[_coinSymbol]];\r\n        if (coinskarma.exists == true) {\r\n            return (coinsKarmaMap[_coinSymbol], coinskarma.name, coinskarma.symbol, coinskarma.totalKarmaUp, coinskarma.totalKarmaDown, coinskarma.exists);\r\n        } else {\r\n            return (0, \"\", \"\", 0, 0, false);\r\n        }\r\n    }\r\n\r\n    function viewKarmaVotes(uint _karmaVoteId) view public returns (uint, uint, address, uint, uint, uint, bool) {\r\n        KarmaVotes storage karmavotes = karmavoters[_karmaVoteId];\r\n        return (_karmaVoteId, karmavotes.coinsKarmaId, karmavotes.voterAddress, karmavotes.up, karmavotes.down, karmavotes.voteTime, karmavotes.exists);\r\n    }\r\n\r\n    function viewKarmaVotesBySymbol(string _coinSymbol, address _userAddress) view public returns (uint, address, uint, uint, uint, string) {\r\n        uint getCoinsId = coinsKarmaMap[_coinSymbol];\r\n        if (karmavoters[karmaVoterMap[_userAddress][getCoinsId]].exists == true) {\r\n            return (karmavoters[karmaVoterMap[_userAddress][getCoinsId]].coinsKarmaId, karmavoters[karmaVoterMap[_userAddress][getCoinsId]].voterAddress, karmavoters[karmaVoterMap[_userAddress][getCoinsId]].up, karmavoters[karmaVoterMap[_userAddress][getCoinsId]].down, karmavoters[karmaVoterMap[_userAddress][getCoinsId]].voteTime, _coinSymbol);\r\n        } else {\r\n            return (0, 0x0, 0, 0, 0, \"\");\r\n        }\r\n    }\r\n\r\n    function giveKarma(uint _upOrDown, string _coinName, string _coinSymbol) payable public {\r\n        require(msg.value >= giveKarmaFee);\r\n\r\n        uint upVote = 0;\r\n        uint downVote = 0;\r\n        if(_upOrDown == 1){\r\n            downVote = 1;\r\n        } else if (_upOrDown == 2){\r\n            upVote = 1;\r\n        }\r\n\r\n        uint id;\r\n\r\n        // see if coinName is already created, if not, then create it\r\n        if (coinsKarmaCreated[_coinSymbol] == 0) {\r\n            // create it\r\n            id = coinkarma.push(CoinsKarma(_coinName, _coinSymbol, 0, 0, true)) - 1;\r\n            emit NewCoinsKarma(id, _coinName, _coinSymbol, 0, 0, true);\r\n\r\n            coinsKarmaMap[_coinSymbol] = id;\r\n            coinsKarmaCreated[_coinSymbol] = 1;\r\n\r\n        } else {\r\n            id = coinsKarmaMap[_coinSymbol];\r\n\r\n        }\r\n\r\n        // see if this user has already given karma for this coin\r\n        if (karmaVoterCreated[msg.sender][id] == 0) {\r\n            // hasent, create new KarmaVote\r\n            uint idd = karmavoters.push(KarmaVotes(id, msg.sender, upVote, downVote, now, true)) - 1;\r\n            emit NewKarmaVoter(idd, id, msg.sender, upVote, downVote, now, true);\r\n\r\n            karmaVoterCreated[msg.sender][id] = 1;\r\n            karmaVoterMap[msg.sender][id] = idd;\r\n\r\n            coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaUp = coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaUp + upVote;\r\n            coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaDown = coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaDown + downVote;\r\n\r\n        }else{\r\n            // has, update KarmaVote\r\n            if (karmavoters[karmaVoterMap[msg.sender][id]].up > 0){\r\n                coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaUp = coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaUp - 1;\r\n            } else if(karmavoters[karmaVoterMap[msg.sender][id]].down > 0) { \r\n                coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaDown = coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaDown - 1;\r\n            }\r\n            \r\n            karmavoters[karmaVoterMap[msg.sender][id]].up = upVote;\r\n            karmavoters[karmaVoterMap[msg.sender][id]].down = downVote;\r\n            karmavoters[karmaVoterMap[msg.sender][id]].voteTime = now;\r\n\r\n            coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaUp = coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaUp + upVote;\r\n            coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaDown = coinkarma[coinsKarmaMap[_coinSymbol]].totalKarmaDown + downVote;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /********************************* */\r\n    // admin functions\r\n\r\n    function viewGiveKarmaFee() public view returns(uint) {\r\n        return giveKarmaFee;\r\n    }\r\n\r\n    function alterGiveKarmaFee (uint _giveKarmaFee) public onlyOwner() {\r\n        giveKarmaFee = _giveKarmaFee;\r\n    }\r\n\r\n    function withdrawFromContract(address _to, uint _amount) payable external onlyOwner() {\r\n        _to.transfer(_amount);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_coinSymbol\",\"type\":\"string\"}],\"name\":\"viewCoinsKarmaBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_coinSymbol\",\"type\":\"string\"},{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"viewKarmaVotesBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_karmaVoteId\",\"type\":\"uint256\"}],\"name\":\"viewKarmaVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"karmavoters\",\"outputs\":[{\"name\":\"coinsKarmaId\",\"type\":\"uint256\"},{\"name\":\"voterAddress\",\"type\":\"address\"},{\"name\":\"up\",\"type\":\"uint256\"},{\"name\":\"down\",\"type\":\"uint256\"},{\"name\":\"voteTime\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_coinsKarmaId\",\"type\":\"uint256\"}],\"name\":\"viewCoinsKarma\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinkarma\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"totalKarmaUp\",\"type\":\"uint256\"},{\"name\":\"totalKarmaDown\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_giveKarmaFee\",\"type\":\"uint256\"}],\"name\":\"alterGiveKarmaFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upOrDown\",\"type\":\"uint256\"},{\"name\":\"_coinName\",\"type\":\"string\"},{\"name\":\"_coinSymbol\",\"type\":\"string\"}],\"name\":\"giveKarma\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewGiveKarmaFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coinsKarmaId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"totalKarmaUp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalKarmaDown\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exists\",\"type\":\"bool\"}],\"name\":\"NewCoinsKarma\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"karmaVoteId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinsKarmaId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"up\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"down\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voteTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exists\",\"type\":\"bool\"}],\"name\":\"NewKarmaVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinsKarmaFactory","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dfc2697a2a9d173d50862b07c7faa609233b2d5c0ef956676f82c33ae1be217b"}]}