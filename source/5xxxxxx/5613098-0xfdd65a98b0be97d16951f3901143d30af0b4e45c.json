{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract JECKAirdrop {\r\n    \r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    address public tokenAddress;\r\n    address public tokenSender;\r\n    uint256 public tokenApproves;\r\n\r\n\r\n    mapping (address => bool) public blacklist;\r\n    \r\n    uint256 public totalAirdrop = 4000e18;\r\n    uint256 public unitUserBalanceLimit = uint256(1e18).div(10);\r\n    uint256 public totalDistributed = 0;\r\n    uint256 public totalRemaining = totalAirdrop.sub(totalDistributed);\r\n    uint256 public value = uint256(5e18).div(10);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n    event DistrStarted();\r\n    \r\n    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData);\r\n    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\r\n    \r\n    bool public distributionFinished = false;\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier canNotDistr() {\r\n        require(distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhitelist() {\r\n        require(blacklist[msg.sender] == false);\r\n        _;\r\n    }\r\n    \r\n    function JECKAirdrop () public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function changeTokenAddress(address newTokenAddress) onlyOwner public {\r\n        if (newTokenAddress != address(0)) {\r\n            tokenAddress = newTokenAddress;\r\n        }\r\n    }\r\n    \r\n    function changeTokenSender(address newTokenSender) onlyOwner public {\r\n        if (newTokenSender != address(0)) {\r\n            tokenSender = newTokenSender;\r\n        }\r\n    }\r\n    \r\n    function changeValue(uint256 newValue) onlyOwner public {\r\n        value = newValue;\r\n    }\r\n    \r\n    function changeTotalAirdrop(uint256 newtotalAirdrop) onlyOwner public {\r\n        totalAirdrop = newtotalAirdrop;\r\n    }\r\n    \r\n    function changeUnitUserBalanceLimit(uint256 newUnitUserBalanceLimit) onlyOwner public {\r\n        unitUserBalanceLimit = newUnitUserBalanceLimit;\r\n    }\r\n    \r\n    function enableWhitelist(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        DistrFinished();\r\n        return true;\r\n    }\r\n    \r\n    function startDistribution() onlyOwner canNotDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        DistrStarted();\r\n        return true;\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        \r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n        \r\n        require(callTokenTransferFrom(_to, _amount));\r\n        \r\n        if (totalDistributed >= totalAirdrop) {\r\n            distributionFinished = true;\r\n        }\r\n        \r\n        Distr(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function airdrop(address[] addresses) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length <= 255);\r\n        require(value <= totalRemaining);\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(value <= totalRemaining);\r\n            distr(addresses[i], value);\r\n        }\r\n\t\r\n        if (totalDistributed >= totalAirdrop) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length <= 255);\r\n        require(amount <= totalRemaining);\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(amount <= totalRemaining);\r\n            distr(addresses[i], amount);\r\n        }\r\n\t\r\n        if (totalDistributed >= totalAirdrop) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amounts[i] <= totalRemaining);\r\n            distr(addresses[i], amounts[i]);\r\n            \r\n            if (totalDistributed >= totalAirdrop) {\r\n                distributionFinished = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function () external payable {\r\n            getTokens();\r\n     }\r\n    \r\n    function getTokens() payable canDistr onlyWhitelist public {\r\n        \r\n        if (value > totalRemaining) {\r\n            value = totalRemaining;\r\n        }\r\n        \r\n        require(value <= totalRemaining);\r\n        \r\n        require(msg.sender.balance.add(msg.value) >= unitUserBalanceLimit);\r\n        \r\n        address investor = msg.sender;\r\n        uint256 toGive = value;\r\n        \r\n        distr(investor, toGive);\r\n        \r\n        if (toGive > 0) {\r\n            blacklist[investor] = true;\r\n        }\r\n\r\n        if (totalDistributed >= totalAirdrop) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    function getTokenBalance(address _tokenAddress, address _who) constant public returns (uint){\r\n        ForeignToken t = ForeignToken(_tokenAddress);\r\n        uint bal = t.balanceOf(_who);\r\n        return bal;\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n    \r\n    function receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData) payable public returns (bool){\r\n        require(tokenAddress == _tokenAddress);\r\n        require(tokenSender == _sender);\r\n        require(totalAirdrop <= _tokenValue);\r\n        \r\n        tokenApproves = _tokenValue;\r\n        LOG_receiveApproval(_sender, _tokenValue ,_tokenAddress ,_extraData);\r\n        return true;\r\n    }\r\n    \r\n    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\r\n        \r\n        require(tokenSender != address(0));\r\n        require(tokenAddress.call(bytes4(bytes32(keccak256(\"transferFrom(address,address,uint256)\"))), tokenSender, _to, _value));\r\n        \r\n        LOG_callTokenTransferFrom(tokenSender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newtotalAirdrop\",\"type\":\"uint256\"}],\"name\":\"changeTotalAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSender\",\"type\":\"address\"}],\"name\":\"changeTokenSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitUserBalanceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUnitUserBalanceLimit\",\"type\":\"uint256\"}],\"name\":\"changeUnitUserBalanceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenApproves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"LOG_receiveApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LOG_callTokenTransferFrom\",\"type\":\"event\"}]","ContractName":"JECKAirdrop","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d2baf10a2dbd2f5ed4079c489f4b67bb35d4d324aaf80b01de8f67e16192b7d"}]}