{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to] && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract IAHCToken is StandardToken {\r\n\r\n    string public constant name   = \"IAHC\";\r\n    string public constant symbol = \"IAHC\";\r\n\r\n    uint8 public constant decimals = 8;\r\n    uint  public constant decimals_multiplier = 100000000;\r\n\r\n    address public constant ESCROW_WALLET = 0x3D7FaD8174dac0df6a0a3B473b9569f7618d07E2;\r\n\r\n    uint public constant icoSupply          = 500000000 * decimals_multiplier; //0,5 billion (500,000,000 IAHC coins will be available for purchase (25% of total IAHC)\r\n    uint public constant icoTokensPrice     = 142000;                          //wei / decimals, base price: 0.0000142 ETH per 1 IAHC\r\n    uint public constant icoMinCap          = 100   ether;\r\n    uint public constant icoMaxCap          = 7000  ether;\r\n\r\n    uint public constant whiteListMinAmount = 0.50  ether;\r\n    uint public constant preSaleMinAmount   = 0.25  ether;\r\n    uint public constant crowdSaleMinAmount = 0.10  ether;\r\n\r\n    address public icoOwner;\r\n    uint public icoLeftSupply  = icoSupply; //current left tokens to sell during ico\r\n    uint public icoSoldCap     = 0;         //current sold value in wei\r\n\r\n    uint public whiteListTime         = 1519084800; //20.02.2018 (40% discount)\r\n    uint public preSaleListTime       = 1521590400; //21.03.2018 (28% discount)\r\n    uint public crowdSaleTime         = 1524355200; //22.04.2018 (10% discount)\r\n    uint public crowdSaleEndTime      = 1526947200; //22.05.2018 (0% discount)\r\n    uint public icoEndTime            = 1529712000; //23.06.2018\r\n    uint public guarenteedPaybackTime = 1532304000; //23.07.2018\r\n\r\n    mapping(address => bool) public whiteList;\r\n    mapping(address => uint) public icoContributions;\r\n\r\n    function IAHCToken(){\r\n        icoOwner = msg.sender;\r\n        balances[icoOwner] = 2000000000 * decimals_multiplier - icoSupply; //froze ico tokens\r\n        totalSupply = 2000000000 * decimals_multiplier;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == icoOwner);\r\n        _;\r\n    }\r\n\r\n    //unfroze tokens if some left unsold from ico\r\n    function icoEndUnfrozeTokens() public onlyOwner() returns(bool) {\r\n        require(now >= icoEndTime && icoLeftSupply > 0);\r\n\r\n        balances[icoOwner] += icoLeftSupply;\r\n        icoLeftSupply = 0;\r\n    }\r\n\r\n    //if soft cap is not reached - participant can ask ethers back\r\n    function minCapFail() public {\r\n        require(now >= icoEndTime && icoSoldCap < icoMinCap);\r\n        require(icoContributions[msg.sender] > 0 && balances[msg.sender] > 0);\r\n\r\n        uint tokens = balances[msg.sender];\r\n        balances[icoOwner] += tokens;\r\n        balances[msg.sender] -= tokens;\r\n        uint contribution = icoContributions[msg.sender];\r\n        icoContributions[msg.sender] = 0;\r\n\r\n        Transfer(msg.sender, icoOwner, tokens);\r\n\r\n        msg.sender.transfer(contribution);\r\n    }\r\n\r\n    // for info\r\n    function getCurrentStageDiscount() public constant returns (uint) {\r\n        uint discount = 0;\r\n        if (now >= icoEndTime && now < preSaleListTime) {\r\n            discount = 40;\r\n        } else if (now < crowdSaleTime) {\r\n            discount = 28;\r\n        } else if (now < crowdSaleEndTime) {\r\n            discount = 10;\r\n        }\r\n        return discount;\r\n    }\r\n\r\n    function safePayback(address receiver, uint amount) public onlyOwner() {\r\n        require(now >= guarenteedPaybackTime);\r\n        require(icoSoldCap < icoMinCap);\r\n\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    // count tokens i could buy now\r\n    function countTokens(uint paid, address sender) public constant returns (uint) {\r\n        uint discount = 0;\r\n        if (now < preSaleListTime) {\r\n            require(whiteList[sender]);\r\n            require(paid >= whiteListMinAmount);\r\n            discount = 40;\r\n        } else if (now < crowdSaleTime) {\r\n            require(paid >= preSaleMinAmount);\r\n            discount = 28;\r\n        } else if (now < crowdSaleEndTime) {\r\n            require(paid >= crowdSaleMinAmount);\r\n            discount = 10;\r\n        }\r\n\r\n        uint tokens = paid / icoTokensPrice;\r\n        if (discount > 0) {\r\n            tokens = tokens / (100 - discount) * 100;\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    // buy tokens if you can\r\n    function () public payable {\r\n        contribute();\r\n    }\r\n\r\n    function contribute() public payable {\r\n        require(now >= whiteListTime && now < icoEndTime && icoLeftSupply > 0);\r\n\r\n        uint tokens = countTokens(msg.value, msg.sender);\r\n        uint payback = 0;\r\n        if (icoLeftSupply < tokens) {\r\n            //not enough tokens so we need to return some ethers back\r\n            payback = msg.value - (msg.value / tokens) * icoLeftSupply;\r\n            tokens = icoLeftSupply;\r\n        }\r\n        uint contribution = msg.value - payback;\r\n\r\n        icoLeftSupply                -= tokens;\r\n        balances[msg.sender]         += tokens;\r\n        icoSoldCap                   += contribution;\r\n        icoContributions[msg.sender] += contribution;\r\n\r\n        Transfer(icoOwner, msg.sender, tokens);\r\n\r\n        if (icoSoldCap >= icoMinCap) {\r\n            ESCROW_WALLET.transfer(this.balance);\r\n        }\r\n        if (payback > 0) {\r\n            msg.sender.transfer(payback);\r\n        }\r\n    }\r\n\r\n\r\n    //lists\r\n    function addToWhitelist(address _participant) public onlyOwner() returns(bool) {\r\n        if (whiteList[_participant]) {\r\n            return true;\r\n        }\r\n        whiteList[_participant] = true;\r\n        return true;\r\n    }\r\n    function removeFromWhitelist(address _participant) public onlyOwner() returns(bool) {\r\n        if (!whiteList[_participant]) {\r\n            return true;\r\n        }\r\n        whiteList[_participant] = false;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guarenteedPaybackTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoLeftSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"minCapFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ESCROW_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safePayback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStageDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoEndUnfrozeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleListTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"countTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokensPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals_multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSoldCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoMinCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IAHCToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9d05ee3a56c2457610bf70ffc5c0865d627bee1b2a150f9d25833b1359ba1aff"}]}