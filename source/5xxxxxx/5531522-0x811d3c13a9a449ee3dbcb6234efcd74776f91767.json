{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.3;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC677 is ERC20 {\r\n  function transferAndCall(address to, uint value, bytes data) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract PoolOwners is Ownable {\r\n\r\n    mapping(uint64 => address)  private ownerAddresses;\r\n    mapping(address => bool)    private whitelist;\r\n\r\n    mapping(address => uint256) public ownerPercentages;\r\n    mapping(address => uint256) public ownerShareTokens;\r\n    mapping(address => uint256) public tokenBalance;\r\n\r\n    mapping(address => mapping(address => uint256)) private balances;\r\n\r\n    uint64  public totalOwners = 0;\r\n    uint16  public distributionMinimum = 20;\r\n\r\n    bool   private contributionStarted = false;\r\n    bool   private distributionActive = false;\r\n\r\n    // Public Contribution Variables\r\n    uint256 private ethWei = 1000000000000000000; // 1 ether in wei\r\n    uint256 private valuation = ethWei * 4000; // 1 ether * 4000\r\n    uint256 private hardCap = ethWei * 1000; // 1 ether * 1000\r\n    address private wallet;\r\n    bool    private locked = false;\r\n\r\n    uint256 public totalContributed = 0;\r\n\r\n    // The contract hard-limit is 0.04 ETH due to the percentage precision, lowest % possible is 0.001%\r\n    // It's been set at 0.2 ETH to try and minimise the sheer number of contributors as that would up the distribution GAS cost\r\n    uint256 private minimumContribution = 200000000000000000; // 0.2 ETH\r\n\r\n    /**\r\n        Events\r\n     */\r\n\r\n    event Contribution(address indexed sender, uint256 share, uint256 amount);\r\n    event TokenDistribution(address indexed token, uint256 amount);\r\n    event TokenWithdrawal(address indexed token, address indexed owner, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner, uint256 amount);\r\n\r\n    /**\r\n        Modifiers\r\n     */\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        Constructor\r\n     */\r\n\r\n    constructor(address _wallet) public {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n        Contribution Methods\r\n     */\r\n\r\n    // Fallback, redirects to contribute\r\n    function() public payable { contribute(msg.sender); }\r\n\r\n    function contribute(address sender) internal {\r\n        // Make sure the shares aren't locked\r\n        require(!locked);\r\n\r\n        // Ensure the contribution phase has started\r\n        require(contributionStarted);\r\n\r\n        // Make sure they're in the whitelist\r\n        require(whitelist[sender]);\r\n\r\n        // Assert that the contribution is above or equal to the minimum contribution\r\n        require(msg.value >= minimumContribution);\r\n\r\n        // Make sure the contribution isn't above the hard cap\r\n        require(hardCap >= msg.value);\r\n\r\n        // Ensure the amount contributed is cleanly divisible by the minimum contribution\r\n        require((msg.value % minimumContribution) == 0);\r\n\r\n        // Make sure the contribution doesn't exceed the hardCap\r\n        require(hardCap >= SafeMath.add(totalContributed, msg.value));\r\n\r\n        // Increase the total contributed\r\n        totalContributed = SafeMath.add(totalContributed, msg.value);\r\n\r\n        // Calculated share\r\n        uint256 share = percent(msg.value, valuation, 5);\r\n\r\n        // Calculate and set the contributors % holding\r\n        if (ownerPercentages[sender] != 0) { // Existing contributor\r\n            ownerShareTokens[sender] = SafeMath.add(ownerShareTokens[sender], msg.value);\r\n            ownerPercentages[sender] = SafeMath.add(share, ownerPercentages[sender]);\r\n        } else { // New contributor\r\n            ownerAddresses[totalOwners] = sender;\r\n            totalOwners += 1;\r\n            ownerPercentages[sender] = share;\r\n            ownerShareTokens[sender] = msg.value;\r\n        }\r\n\r\n        // Transfer the ether to the wallet\r\n        wallet.transfer(msg.value);\r\n\r\n        // Fire event\r\n        emit Contribution(sender, share, msg.value);\r\n    }\r\n\r\n    // Add a wallet to the whitelist\r\n    function whitelistWallet(address contributor) external onlyOwner() {\r\n        // Is it actually an address?\r\n        require(contributor != address(0));\r\n\r\n        // Add address to whitelist\r\n        whitelist[contributor] = true;\r\n    }\r\n\r\n    // Start the contribution\r\n    function startContribution() external onlyOwner() {\r\n        require(!contributionStarted);\r\n        contributionStarted = true;\r\n    }\r\n\r\n    /**\r\n        Public Methods\r\n     */\r\n\r\n    // Set the owners share per owner, the balancing of shares is done externally\r\n    function setOwnerShare(address owner, uint256 value) public onlyOwner() {\r\n        // Make sure the shares aren't locked\r\n        require(!locked);\r\n\r\n        if (ownerShareTokens[owner] == 0) {\r\n            whitelist[owner] = true;\r\n            ownerAddresses[totalOwners] = owner;\r\n            totalOwners += 1;\r\n        }\r\n        ownerShareTokens[owner] = value;\r\n        ownerPercentages[owner] = percent(value, valuation, 5);\r\n    }\r\n\r\n    // Non-Standard token transfer, doesn't confine to any ERC\r\n    function sendOwnership(address receiver, uint256 amount) public onlyWhitelisted() {\r\n        // Require they have an actual balance\r\n        require(ownerShareTokens[msg.sender] > 0);\r\n\r\n        // Require the amount to be equal or less to their shares\r\n        require(ownerShareTokens[msg.sender] >= amount);\r\n\r\n        // Deduct the amount from the owner\r\n        ownerShareTokens[msg.sender] = SafeMath.sub(ownerShareTokens[msg.sender], amount);\r\n\r\n        // Remove the owner if the share is now 0\r\n        if (ownerShareTokens[msg.sender] == 0) {\r\n            ownerPercentages[msg.sender] = 0;\r\n            whitelist[receiver] = false; \r\n            \r\n        } else { // Recalculate percentage\r\n            ownerPercentages[msg.sender] = percent(ownerShareTokens[msg.sender], valuation, 5);\r\n        }\r\n\r\n        // Add the new share holder\r\n        if (ownerShareTokens[receiver] == 0) {\r\n            whitelist[receiver] = true;\r\n            ownerAddresses[totalOwners] = receiver;\r\n            totalOwners += 1;\r\n        }\r\n        ownerShareTokens[receiver] = SafeMath.add(ownerShareTokens[receiver], amount);\r\n        ownerPercentages[receiver] = SafeMath.add(ownerPercentages[receiver], percent(amount, valuation, 5));\r\n\r\n        emit OwnershipTransferred(msg.sender, receiver, amount);\r\n    }\r\n\r\n    // Lock the shares so contract owners cannot change them\r\n    function lockShares() public onlyOwner() {\r\n        require(!locked);\r\n        locked = true;\r\n    }\r\n\r\n    // Distribute the tokens in the contract to the contributors/creators\r\n    function distributeTokens(address token) public onlyWhitelisted() {\r\n        // Is this method already being called?\r\n        require(!distributionActive);\r\n        distributionActive = true;\r\n\r\n        // Get the token address\r\n        ERC677 erc677 = ERC677(token);\r\n\r\n        // Has the contract got a balance?\r\n        uint256 currentBalance = erc677.balanceOf(this) - tokenBalance[token];\r\n        require(currentBalance > ethWei * distributionMinimum);\r\n\r\n        // Add the current balance on to the total returned\r\n        tokenBalance[token] = SafeMath.add(tokenBalance[token], currentBalance);\r\n\r\n        // Loop through stakers and add the earned shares\r\n        // This is GAS expensive, but unless complex more bug prone logic was added there is no alternative\r\n        // This is due to the percentages needed to be calculated for all at once, or the amounts would differ\r\n        for (uint64 i = 0; i < totalOwners; i++) {\r\n            address owner = ownerAddresses[i];\r\n\r\n            // If the owner still has a share\r\n            if (ownerShareTokens[owner] > 0) {\r\n                // Calculate and transfer the ownership of shares with a precision of 5, for example: 12.345%\r\n                balances[owner][token] = SafeMath.add(SafeMath.div(SafeMath.mul(currentBalance, ownerPercentages[owner]), 100000), balances[owner][token]);\r\n            }\r\n        }\r\n        distributionActive = false;\r\n\r\n        // Emit the event\r\n        emit TokenDistribution(token, currentBalance);\r\n    }\r\n\r\n    // Withdraw tokens from the owners balance\r\n    function withdrawTokens(address token, uint256 amount) public {\r\n        // Can't withdraw nothing\r\n        require(amount > 0);\r\n\r\n        // Assert they're withdrawing what is in their balance\r\n        require(balances[msg.sender][token] >= amount);\r\n\r\n        // Substitute the amounts\r\n        balances[msg.sender][token] = SafeMath.sub(balances[msg.sender][token], amount);\r\n        tokenBalance[token] = SafeMath.sub(tokenBalance[token], amount);\r\n\r\n        // Transfer the tokens\r\n        ERC677 erc677 = ERC677(token);\r\n        require(erc677.transfer(msg.sender, amount) == true);\r\n\r\n        // Emit the event\r\n        emit TokenWithdrawal(token, msg.sender, amount);\r\n    }\r\n\r\n    // Sets the minimum balance needed for token distribution\r\n    function setDistributionMinimum(uint16 minimum) public onlyOwner() {\r\n        distributionMinimum = minimum;\r\n    }\r\n\r\n    // Is an account whitelisted?\r\n    function isWhitelisted(address contributor) public view returns (bool) {\r\n        return whitelist[contributor];\r\n    }\r\n\r\n    // Get the owners token balance\r\n    function getOwnerBalance(address token) public view returns (uint256) {\r\n        return balances[msg.sender][token];\r\n    }\r\n\r\n    /**\r\n        Private Methods\r\n    */\r\n\r\n    // Credit to Rob Hitchens: https://stackoverflow.com/a/42739843\r\n    function percent(uint numerator, uint denominator, uint precision) private pure returns (uint quotient) {\r\n        uint _numerator = numerator * 10 ** (precision+1);\r\n        uint _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return ( _quotient);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimum\",\"type\":\"uint16\"}],\"name\":\"setDistributionMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setOwnerShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerShareTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerPercentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PoolOwners","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://58d2709240b4119fe8903215b058807125a4ab21d92ae047024ff6afe6eae84e"}]}