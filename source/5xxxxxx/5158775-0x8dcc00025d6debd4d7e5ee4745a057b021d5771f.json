{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/BuildersCoin.sol\r\n\r\ncontract BuildersCoin is MintableToken {\r\n\r\n  string public constant name = 'Builders Coin';\r\n  string public constant symbol = 'BLD';\r\n  uint32 public constant decimals = 18;\r\n  address public saleAgent;\r\n  bool public transferLocked = true;\r\n\r\n  modifier notLocked() {\r\n    require(msg.sender == owner || msg.sender == saleAgent || !transferLocked);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrSaleAgent() {\r\n    require(msg.sender == owner || msg.sender == saleAgent);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == owner || msg.sender == saleAgent);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function unlockTransfer() onlyOwnerOrSaleAgent public {\r\n    if (transferLocked) {\r\n      transferLocked = false;\r\n    }\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwnerOrSaleAgent canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public onlyOwnerOrSaleAgent returns (bool) {\r\n    unlockTransfer();\r\n    return super.finishMinting();\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Presale.sol\r\n\r\ncontract Presale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public price;\r\n  uint public start;\r\n  uint public end;\r\n  uint public duration;\r\n  uint public softcap = 157000000000000000000; // 157 ETH\r\n  uint public hardcap;\r\n  uint public minInvestmentLimit;\r\n  uint public investedWei;\r\n  uint public directMintLimit;\r\n  uint public mintedDirectly;\r\n  uint public devLimit = 3500000000000000000; // 3.5 ETH\r\n  bool public softcapReached;\r\n  bool public hardcapReached;\r\n  bool public refundIsAvailable;\r\n  bool public devWithdrawn;\r\n  address public directMintAgent;\r\n  address public wallet;\r\n  address public devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\r\n  BuildersCoin public token;\r\n  mapping(address => uint) public balances;\r\n\r\n  event SoftcapReached();\r\n  event HardcapReached();\r\n  event RefundIsAvailable();\r\n\r\n  modifier onlyOwnerOrDirectMintAgent() {\r\n    require(msg.sender == owner || msg.sender == directMintAgent);\r\n    _;\r\n  }\r\n\r\n  //---------------------------------------------------------------------------\r\n  // Configuration setters\r\n  //---------------------------------------------------------------------------\r\n\r\n  function setDirectMintAgent(address _directMintAgent) public onlyOwner {\r\n    directMintAgent = _directMintAgent;\r\n  }\r\n\r\n  function setDirectMintLimit(uint _directMintLimit) public onlyOwner {\r\n    directMintLimit = _directMintLimit;\r\n  }\r\n\r\n  function setMinInvestmentLimit(uint _minInvestmentLimit) public onlyOwner {\r\n    minInvestmentLimit = _minInvestmentLimit;\r\n  }\r\n\r\n  function setPrice(uint _price) public onlyOwner {\r\n    price = _price;\r\n  }\r\n\r\n  function setToken(address _token) public onlyOwner {\r\n    token = BuildersCoin(_token);\r\n  }\r\n\r\n  function setWallet(address _wallet) public onlyOwner {\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function setStart(uint _start) public onlyOwner {\r\n    start = _start;\r\n  }\r\n\r\n  function setDuration(uint _duration) public onlyOwner {\r\n    duration = _duration;\r\n    end = start.add(_duration.mul(1 days));\r\n  }\r\n\r\n  function setHardcap(uint _hardcap) public onlyOwner {\r\n    hardcap = _hardcap;\r\n  }\r\n\r\n  //---------------------------------------------------------------------------\r\n  // Mint functions\r\n  //---------------------------------------------------------------------------\r\n\r\n  function mintAndTransfer(address _to, uint _tokens) internal {\r\n    token.mint(this, _tokens);\r\n    token.transfer(_to, _tokens);\r\n  }\r\n\r\n  function mint(address _to, uint _investedWei) internal {\r\n    require(_investedWei >= minInvestmentLimit && !hardcapReached && now >= start && now < end);\r\n    uint tokens = _investedWei.mul(price).div(1 ether);\r\n    mintAndTransfer(_to, tokens);\r\n    balances[_to] = balances[_to].add(_investedWei);\r\n    investedWei = investedWei.add(_investedWei);\r\n    if (investedWei >= softcap && ! softcapReached) {\r\n      SoftcapReached();\r\n      softcapReached = true;\r\n    }\r\n    if (investedWei >= hardcap) {\r\n      HardcapReached();\r\n      hardcapReached = true;\r\n    }\r\n  }\r\n\r\n  function directMint(address _to, uint _tokens) public onlyOwnerOrDirectMintAgent {\r\n    mintedDirectly = mintedDirectly.add(_tokens);\r\n    require(mintedDirectly <= directMintLimit);\r\n    mintAndTransfer(_to, _tokens);\r\n  }\r\n\r\n  //---------------------------------------------------------------------------\r\n  // Withdraw functions\r\n  //---------------------------------------------------------------------------\r\n\r\n  function refund() public {\r\n    require(refundIsAvailable && balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    require(softcapReached);\r\n    widthrawDev();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function widthrawDev() public {\r\n    require(softcapReached);\r\n    require(msg.sender == devWallet || msg.sender == owner);\r\n    if (!devWithdrawn) {\r\n      devWithdrawn = true;\r\n      devWallet.transfer(devLimit);\r\n    }\r\n  }\r\n\r\n  function retrieveTokens(address _to, address _anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(_anotherToken);\r\n    alienToken.transfer(_to, alienToken.balanceOf(this));\r\n  }\r\n\r\n  //---------------------------------------------------------------------------\r\n  // Service functions\r\n  //---------------------------------------------------------------------------\r\n\r\n  function finish() public onlyOwner {\r\n    if (investedWei < softcap) {\r\n      RefundIsAvailable();\r\n      refundIsAvailable = true;\r\n    } else {\r\n      withdraw();\r\n    }\r\n  }\r\n\r\n  //---------------------------------------------------------------------------\r\n  // Fallback function\r\n  //---------------------------------------------------------------------------\r\n\r\n  function () external payable {\r\n    mint(msg.sender, msg.value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Configurator.sol\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  BuildersCoin public token;\r\n  Presale public presale;\r\n\r\n  function deploy() public onlyOwner {\r\n\r\n    token = new BuildersCoin();\r\n    presale = new Presale();\r\n\r\n    presale.setPrice(1400000000000000000000); // 1 ETH = 1400 BLD\r\n    presale.setMinInvestmentLimit(100000000000000000); // 0.1 ETH\r\n    presale.setDirectMintLimit(1000000000000000000000000); // 1 000 000 BLD\r\n    presale.setHardcap(357142857000000000000); // 357.142857 ETH\r\n    presale.setStart(1521543600); // Mar 20 2018 14:00:00 GMT+0300\r\n    presale.setDuration(30); // 30 days\r\n    presale.setWallet(0x8617f1ba539d45dcefbb18c40141e861abf288b7);\r\n    presale.setToken(token);\r\n\r\n    token.setSaleAgent(presale);\r\n\r\n    address manager = 0x9DFF939e27e992Ac8635291263c3aa41654f3228;\r\n\r\n    token.transferOwnership(manager);\r\n    presale.transferOwnership(manager);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSaleAgnet\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BuildersCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3025507379bd72c818377837c85705c1bd23897b627b6d5cc43a9acd1a5a20f4"}]}