{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/* CONTRACT */\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n// END_OF_contract_SafeMath\r\n//_______________________________________________\r\n//\r\n/* INTERFACE */\r\ninterface token {\r\n\r\n    function buyCoinsCrowdSale(address buyer, uint payment, address crowdSaleContr) public returns(bool success, uint retPayment);\r\n}\r\n//_______________________________________________\r\n//\r\ninterface ICO {\r\n    \r\n    function getPrices() public returns(uint buyPrice_,  uint redeemPrice_, uint sellPrice_);\r\n}\r\n//________________________________________________\r\n//\r\n/* CONTRACT */\r\ncontract CrowdSaleMacroansyA is SafeMath {\r\n\r\n    address internal beneficiaryFunds;\r\n    address internal owner; \r\n    address internal tkn_addr;    \r\n    address internal ico_addr;\r\n    //\r\n    uint internal fundingGoal;\r\n    uint internal amountRaised;\r\n    uint internal deadline;\r\n    uint internal amountWithdrawn;\r\n    //\r\n    mapping(address => uint256) public balanceOf;\r\n    //\r\n    bool internal fundingGoalReached;\r\n    bool internal crowdsaleClosed; \r\n    bool internal crowdsaleStart;\r\n    bool internal unlockFundersBalance; \r\n    bool internal saleParamSet;\r\n    //\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    event FundOrPaymentTransfer(address beneficiary, uint amount);\r\n//________________________________________________________\r\n//\r\n    /**\r\n     * Constrctor function\r\n     */\r\n    function CrowdSaleMacroansyA() public {\r\n\r\n        owner = msg.sender;\r\n        beneficiaryFunds = owner;\r\n        saleParamSet = false;\r\n        fundingGoalReached = false;\r\n        crowdsaleStart = false;\r\n        crowdsaleClosed = false; \r\n        unlockFundersBalance = false; \r\n\r\n    }\r\n//_________________________________________________________\r\n//\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    } \r\n//_________________________________________________________\r\n//\r\n    function transferOr(address _Or) public onlyOwner {\r\n        owner = _Or;\r\n    }     \r\n//_________________________________________________________\r\n//\r\n    function setContrAddr(address tkn_ma_addr, address ico_ma_addr) public onlyOwner returns(bool success){\r\n       tkn_addr = tkn_ma_addr; ico_addr = ico_ma_addr;\r\n       return true;\r\n    } \r\n//_________________________________________________________\r\n//\r\n    function _getTknAddr() internal returns(address tkn_ma_addr){ return tkn_addr; }\r\n    function _getIcoAddr() internal returns(address ico_ma_addr){  return ico_addr; }\r\n//_________________________________________________________\r\n//    \r\n    function setFundingGoal(uint fundingGoalInEthers, bool resetForUnexpected) public onlyOwner returns(bool success){\r\n            \r\n            if(saleParamSet == false || resetForUnexpected == true ){\r\n\r\n                fundingGoal = fundingGoalInEthers * 1 ether;\r\n                saleParamSet = true;\r\n            }\r\n            return true;\r\n    } \r\n//_________________________________________________________\r\n//\r\n    function startOrHoldCrowdSale(bool setStartCrowdSale, bool crowdsaleStart_, bool setDuration, uint durationInMinutes, bool resetAmountRaisedAndWithdrawnToZero) public onlyOwner returns(bool success) {\r\n        \r\n        if( setDuration == true) deadline = now + durationInMinutes * 1 minutes;\r\n\r\n        if( setStartCrowdSale == true ) {\r\n            crowdsaleStart = crowdsaleStart_;\r\n            crowdsaleClosed = false;                 \r\n            unlockFundersBalance = false; \r\n        }\r\n\r\n        if(resetAmountRaisedAndWithdrawnToZero == true) { \r\n        \tamountRaised = 0;\r\n        \tamountWithdrawn = 0;\r\n        }\r\n        return true;\r\n    }\r\n//_________________________________________________________\r\n//\r\n    function viewAllControls(bool show) view onlyOwner public returns(bool saleParamSet_, bool crowdsaleStart_, bool crowdsaleClosed_, bool fundingGoalReached_, bool unlockFundersBalance_){\r\n        if(show == true) {\r\n            return ( saleParamSet, crowdsaleStart, crowdsaleClosed, fundingGoalReached, unlockFundersBalance);\r\n        }\r\n    }\r\n//_________________________________________________________\r\n//\r\n    function unlockFundrBal( bool unlockFundersBalance_) public onlyOwner afterDeadline returns(bool success){\r\n\r\n        unlockFundersBalance = unlockFundersBalance_ ;\r\n        return true;\r\n    }\r\n//_________________________________________________________\r\n//           \r\n    /**\r\n     * Fallback function\r\n     */\r\n    function() payable public {\r\n\r\n      if(msg.sender != owner){\r\n\r\n        require(crowdsaleClosed == false && crowdsaleStart == true);\r\n\r\n        token t = token( _getTknAddr() );\r\n\r\n        bool sucsBuyCoinAtToken; uint retPayment;\r\n        ( sucsBuyCoinAtToken, retPayment) = t.buyCoinsCrowdSale(msg.sender, msg.value, this);\r\n        require(sucsBuyCoinAtToken == true);\r\n\r\n        // return payment to buyer \r\n            if( retPayment > 0 ) {\r\n                    \r\n              bool sucsTrPaymnt;\r\n              sucsTrPaymnt = _safeTransferPaymnt( msg.sender, retPayment );\r\n              require(sucsTrPaymnt == true );\r\n            }\r\n\r\n        uint amount = safeSub( msg.value , retPayment);\r\n        balanceOf[msg.sender] = safeAdd( balanceOf[msg.sender] , amount);\r\n        amountRaised = safeAdd( amountRaised, amount);        \r\n\r\n        FundTransfer(msg.sender, amount, true);\r\n      }\r\n    }\r\n//________________________________________________\r\n//\r\n    function viewCrowdSaleLive(bool show, bool showFundsInWei) public view returns(uint fundingGoal_, uint fundRaised, uint fundWithDrawn, uint timeRemainingInMin, uint tokenPriceInWei, bool fundingGoalReached_ ){\r\n        \r\n        if(show == true && crowdsaleStart == true){\r\n            \r\n            if( deadline >= now ) timeRemainingInMin = safeSub( deadline, now) / 60;\r\n            if( now > deadline ) timeRemainingInMin == 0;\r\n            \r\n            ICO ico = ICO(_getIcoAddr());\r\n            uint buyPrice_; \r\n            (buyPrice_,) = ico.getPrices();\r\n\r\n            if(showFundsInWei == false){\r\n\t            return( safeDiv(fundingGoal,10**18), safeDiv(amountRaised,10**18), safeDiv(amountWithdrawn, 10**18) , timeRemainingInMin, buyPrice_, fundingGoalReached );\r\n            }\r\n            //\r\n            if(showFundsInWei == true){\r\n\t            return( fundingGoal, amountRaised, amountWithdrawn , timeRemainingInMin, buyPrice_, fundingGoalReached);\r\n            }            \r\n        }\r\n    }\r\n//_______________________________________________\r\n//\r\n    function viewMyContribution(bool show) public view returns(uint yourContributionInWEI){\r\n        if(show == true && crowdsaleStart == true){\r\n\r\n            return(balanceOf[msg.sender]);\r\n        }\r\n    }\r\n//________________________________________________\r\n//\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n//________________________________________________\r\n//\r\n    /**\r\n     * Check Crowdsale Goal and Dead Line\r\n     */\r\n    function checkGoalReached() afterDeadline public {\r\n\r\n       if(crowdsaleStart == true){\r\n\r\n            if (amountRaised >= fundingGoal){\r\n                fundingGoalReached = true;\r\n                GoalReached(beneficiaryFunds, amountRaised);\r\n                crowdsaleClosed = true;               \r\n            } \r\n            //\r\n             if (amountRaised < fundingGoal)  fundingGoalReached = false;             \r\n       }\r\n    }\r\n//________________________________________________\r\n//\r\n    /**\r\n     * Fund withdraw to backers if crowdsale not successful\r\n     *\r\n     */\r\n    function safeWithdrawal() afterDeadline public {\r\n\r\n        if ( (!fundingGoalReached || unlockFundersBalance == true) && msg.sender != owner) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                require(this.balance >= amount );\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                    amountWithdrawn = safeAdd( amountWithdrawn, amount); \r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                  }\r\n            }\r\n        }\r\n    }\r\n//________________________________________________\r\n//\r\n    /*\r\n    * @notice Withdraw Payments to beneficiary if crowdsale successful\r\n    * @param withdrawAmount the amount withdrawn in wei\r\n    */\r\n    function withdrawFund(uint withdrawAmount, bool withdrawTotalAmountBalance) onlyOwner public returns(bool success) {\r\n      \r\n        if (fundingGoalReached && beneficiaryFunds == msg.sender && unlockFundersBalance == false ) {\r\n                      \r\n            if( withdrawTotalAmountBalance == true ) withdrawAmount = safeSub( amountRaised, amountWithdrawn);\r\n            require(this.balance >= withdrawAmount );\r\n            amountWithdrawn = safeAdd( amountWithdrawn, withdrawAmount); \r\n            success = _withdraw(withdrawAmount);   \r\n            require(success == true); \r\n            \r\n        }\r\n      \r\n        return success;      \r\n    }   \r\n//_________________________________________________________\r\n     /*internal function can be called by this contract only\r\n     */\r\n    function _withdraw(uint _withdrawAmount) internal returns(bool success) {\r\n\r\n        bool sucsTrPaymnt = _safeTransferPaymnt( beneficiaryFunds, _withdrawAmount); \r\n        require(sucsTrPaymnt == true);         \r\n        return true;     \r\n    }  \r\n//________________________________________________\r\n//\r\n    function _safeTransferPaymnt( address paymentBenfcry, uint payment) internal returns(bool sucsTrPaymnt){\r\n              \r\n          uint pA = payment; \r\n          uint paymentTemp = pA;\r\n          pA = 0;\r\n          paymentBenfcry.transfer(paymentTemp); \r\n          FundOrPaymentTransfer(paymentBenfcry, paymentTemp);                       \r\n          paymentTemp = 0; \r\n          \r\n          return true;\r\n    }      \r\n//________________________________________________\r\n//              \r\n            bool private isEndOk;\r\n                function endOfRewards(bool isEndNow) public onlyOwner {\r\n\r\n                        isEndOk == isEndNow;\r\n                }\r\n                //\r\n                function endOfRewardsConfirmed(bool isEndNow) public onlyOwner{\r\n\r\n                    if(isEndOk == true && isEndNow == true) selfdestruct(owner);\r\n                }\r\n//________________________________________________\r\n}\r\n// END_OF_CONTRACT","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"show\",\"type\":\"bool\"}],\"name\":\"viewMyContribution\",\"outputs\":[{\"name\":\"yourContributionInWEI\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isEndNow\",\"type\":\"bool\"}],\"name\":\"endOfRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"resetForUnexpected\",\"type\":\"bool\"}],\"name\":\"setFundingGoal\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"show\",\"type\":\"bool\"}],\"name\":\"viewAllControls\",\"outputs\":[{\"name\":\"saleParamSet_\",\"type\":\"bool\"},{\"name\":\"crowdsaleStart_\",\"type\":\"bool\"},{\"name\":\"crowdsaleClosed_\",\"type\":\"bool\"},{\"name\":\"fundingGoalReached_\",\"type\":\"bool\"},{\"name\":\"unlockFundersBalance_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tkn_ma_addr\",\"type\":\"address\"},{\"name\":\"ico_ma_addr\",\"type\":\"address\"}],\"name\":\"setContrAddr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unlockFundersBalance_\",\"type\":\"bool\"}],\"name\":\"unlockFundrBal\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"name\":\"withdrawTotalAmountBalance\",\"type\":\"bool\"}],\"name\":\"withdrawFund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Or\",\"type\":\"address\"}],\"name\":\"transferOr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"setStartCrowdSale\",\"type\":\"bool\"},{\"name\":\"crowdsaleStart_\",\"type\":\"bool\"},{\"name\":\"setDuration\",\"type\":\"bool\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"resetAmountRaisedAndWithdrawnToZero\",\"type\":\"bool\"}],\"name\":\"startOrHoldCrowdSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isEndNow\",\"type\":\"bool\"}],\"name\":\"endOfRewardsConfirmed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"show\",\"type\":\"bool\"},{\"name\":\"showFundsInWei\",\"type\":\"bool\"}],\"name\":\"viewCrowdSaleLive\",\"outputs\":[{\"name\":\"fundingGoal_\",\"type\":\"uint256\"},{\"name\":\"fundRaised\",\"type\":\"uint256\"},{\"name\":\"fundWithDrawn\",\"type\":\"uint256\"},{\"name\":\"timeRemainingInMin\",\"type\":\"uint256\"},{\"name\":\"tokenPriceInWei\",\"type\":\"uint256\"},{\"name\":\"fundingGoalReached_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundOrPaymentTransfer\",\"type\":\"event\"}]","ContractName":"CrowdSaleMacroansyA","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b02973ed7a8fe2b388f5b31a8cddd6cdcb0cbe07334021e70a49e264aa142dfd"}]}