{"status":"1","message":"OK","result":[{"SourceCode":"//File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n//File: node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n//File: src/contracts/ico/DividendToken.sol\r\n/**\r\n * @title Dividend contract\r\n *\r\n * @version 1.0\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\ncontract DividendToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // time before dividendEndTime during which dividend cannot be claimed by token holders\r\n    // instead the unclaimed dividend can be claimed by treasury in that time span\r\n    uint256 public claimTimeout = 20 days;\r\n\r\n    uint256 public dividendCycleTime = 350 days;\r\n\r\n    uint256 public currentDividend;\r\n\r\n    mapping(address => uint256) unclaimedDividend;\r\n\r\n    // tracks when the dividend balance has been updated last time\r\n    mapping(address => uint256) public lastUpdate;\r\n\r\n    uint256 public lastDividendIncreaseDate;\r\n\r\n    // allow payment of dividend only by special treasury account (treasury can be set and altered by owner,\r\n    // multiple treasurer accounts are possible\r\n    mapping(address => bool) public isTreasurer;\r\n\r\n    uint256 public dividendEndTime = 0;\r\n\r\n    event Payin(address _owner, uint256 _value, uint256 _endTime);\r\n\r\n    event Payout(address _tokenHolder, uint256 _value);\r\n\r\n    event Reclaimed(uint256 remainingBalance, uint256 _endTime, uint256 _now);\r\n\r\n    event ChangedTreasurer(address treasurer, bool active);\r\n\r\n    /**\r\n     * @dev Deploy the DividendToken contract and set the owner of the contract\r\n     */\r\n    function DividendToken() public {\r\n        isTreasurer[owner] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Request payout dividend (claim) (requested by tokenHolder -> pull)\r\n     * dividends that have not been claimed within 330 days expire and cannot be claimed anymore by the token holder.\r\n     */\r\n    function claimDividend() public returns (bool) {\r\n        // unclaimed dividend fractions should expire after 330 days and the owner can reclaim that fraction\r\n        require(dividendEndTime > 0 && dividendEndTime.sub(claimTimeout) > now);\r\n\r\n        updateDividend(msg.sender);\r\n\r\n        uint256 payment = unclaimedDividend[msg.sender];\r\n        unclaimedDividend[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(payment);\r\n\r\n        // Trigger payout event\r\n        Payout(msg.sender, payment);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer dividend (fraction) to new token holder\r\n     * @param _from address The address of the old token holder\r\n     * @param _to address The address of the new token holder\r\n     * @param _value uint256 Number of tokens to transfer\r\n     */\r\n    function transferDividend(address _from, address _to, uint256 _value) internal {\r\n        updateDividend(_from);\r\n        updateDividend(_to);\r\n\r\n        uint256 transAmount = unclaimedDividend[_from].mul(_value).div(balanceOf(_from));\r\n\r\n        unclaimedDividend[_from] = unclaimedDividend[_from].sub(transAmount);\r\n        unclaimedDividend[_to] = unclaimedDividend[_to].add(transAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the dividend of hodler\r\n     * @param _hodler address The Address of the hodler\r\n     */\r\n    function updateDividend(address _hodler) internal {\r\n        // last update in previous period -> reset claimable dividend\r\n        if (lastUpdate[_hodler] < lastDividendIncreaseDate) {\r\n            unclaimedDividend[_hodler] = calcDividend(_hodler, totalSupply_);\r\n            lastUpdate[_hodler] = now;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get claimable dividend for the hodler\r\n     * @param _hodler address The Address of the hodler\r\n     */\r\n    function getClaimableDividend(address _hodler) public constant returns (uint256 claimableDividend) {\r\n        if (lastUpdate[_hodler] < lastDividendIncreaseDate) {\r\n            return calcDividend(_hodler, totalSupply_);\r\n        } else {\r\n            return (unclaimedDividend[_hodler]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides transfer method from BasicToken\r\n     * transfer token for a specified address\r\n     * @param _to address The address to transfer to.\r\n     * @param _value uint256 The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        transferDividend(msg.sender, _to, _value);\r\n\r\n        // Return from inherited transfer method\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        // Prevent dividend to be claimed twice\r\n        transferDividend(_from, _to, _value);\r\n\r\n        // Return from inherited transferFrom method\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Set / alter treasurer \"account\". This can be done from owner only\r\n     * @param _treasurer address Address of the treasurer to create/alter\r\n     * @param _active bool Flag that shows if the treasurer account is active\r\n     */\r\n    function setTreasurer(address _treasurer, bool _active) public onlyOwner {\r\n        isTreasurer[_treasurer] = _active;\r\n        ChangedTreasurer(_treasurer, _active);\r\n    }\r\n\r\n    /**\r\n     * @dev Request unclaimed ETH, payback to beneficiary (owner) wallet\r\n     * dividend payment is possible every 330 days at the earliest - can be later, this allows for some flexibility,\r\n     * e.g. board meeting had to happen a bit earlier this year than previous year.\r\n     */\r\n    function requestUnclaimed() public onlyOwner {\r\n        // Send remaining ETH to beneficiary (back to owner) if dividend round is over\r\n        require(now >= dividendEndTime.sub(claimTimeout));\r\n\r\n        msg.sender.transfer(this.balance);\r\n\r\n        Reclaimed(this.balance, dividendEndTime, now);\r\n    }\r\n\r\n    /**\r\n     * @dev ETH Payin for Treasurer\r\n     * Only owner or treasurer can do a payin for all token holder.\r\n     * Owner / treasurer can also increase dividend by calling fallback function multiple times.\r\n     */\r\n    function() public payable {\r\n        require(isTreasurer[msg.sender]);\r\n        require(dividendEndTime < now);\r\n\r\n        // pay back unclaimed dividend that might not have been claimed by owner yet\r\n        if (this.balance > msg.value) {\r\n            uint256 payout = this.balance.sub(msg.value);\r\n            owner.transfer(payout);\r\n            Reclaimed(payout, dividendEndTime, now);\r\n        }\r\n\r\n        currentDividend = this.balance;\r\n\r\n        // No active dividend cycle found, initialize new round\r\n        dividendEndTime = now.add(dividendCycleTime);\r\n\r\n        // Trigger payin event\r\n        Payin(msg.sender, msg.value, dividendEndTime);\r\n\r\n        lastDividendIncreaseDate = now;\r\n    }\r\n\r\n    /**\r\n     * @dev calculate the dividend\r\n     * @param _hodler address\r\n     * @param _totalSupply uint256\r\n     */\r\n    function calcDividend(address _hodler, uint256 _totalSupply) public view returns(uint256) {\r\n        return (currentDividend.mul(balanceOf(_hodler))).div(_totalSupply);\r\n    }\r\n}\r\n\r\n//File: src/contracts/ico/IcoToken.sol\r\n/**\r\n * @title ICO token\r\n * @version 1.0\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\ncontract IcoToken is MintableToken, PausableToken, DividendToken {\r\n    string public constant name = \"Tend Token\";\r\n    string public constant symbol = \"TND\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n     * @dev Constructor of IcoToken that instantiate a new DividendToken\r\n     */\r\n    function IcoToken() public DividendToken() {\r\n        // token should not be transferrable until after all tokens have been issued\r\n        paused = true;\r\n    }\r\n}\r\n\r\n//File: src/contracts/ico/IcoCrowdsale.sol\r\n/**\r\n * @title IcoCrowdsale\r\n * Simple time and capped based crowdsale.\r\n *\r\n * @version 1.0\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IcoCrowdsale is Crowdsale, Ownable {\r\n    /*** CONSTANTS ***/\r\n    // Different levels of caps per allotment\r\n    uint256 public constant MAX_TOKEN_CAP = 13e6 * 1e18;        // 13 million * 1e18\r\n\r\n    // // Bottom three should add to above\r\n    uint256 public constant ICO_ENABLERS_CAP = 15e5 * 1e18;     // 1.5 million * 1e18\r\n    uint256 public constant DEVELOPMENT_TEAM_CAP = 2e6 * 1e18;  // 2 million * 1e18\r\n    uint256 public constant ICO_TOKEN_CAP = 9.5e6 * 1e18;        // 9.5 million  * 1e18\r\n\r\n    uint256 public constant CHF_CENT_PER_TOKEN = 1000;          // standard CHF per token rate - in cents - 10 CHF => 1000 CHF cents\r\n    uint256 public constant MIN_CONTRIBUTION_CHF = 250;\r\n\r\n    uint256 public constant VESTING_CLIFF = 1 years;\r\n    uint256 public constant VESTING_DURATION = 3 years;\r\n\r\n    // Amount of discounted tokens per discount stage (2 stages total; each being the same amount)\r\n    uint256 public constant DISCOUNT_TOKEN_AMOUNT_T1 = 3e6 * 1e18; // 3 million * 1e18\r\n    uint256 public constant DISCOUNT_TOKEN_AMOUNT_T2 = DISCOUNT_TOKEN_AMOUNT_T1 * 2;\r\n\r\n    // Track tokens depending which stage that the ICO is in\r\n    uint256 public tokensToMint;            // tokens to be minted after confirmation\r\n    uint256 public tokensMinted;            // already minted tokens (maximally = cap)\r\n    uint256 public icoEnablersTokensMinted;\r\n    uint256 public developmentTeamTokensMinted;\r\n\r\n    uint256 public minContributionInWei;\r\n    uint256 public tokenPerWei;\r\n    uint256 public totalTokensPurchased;\r\n    bool public capReached;\r\n    bool public tier1Reached;\r\n    bool public tier2Reached;\r\n\r\n    address public underwriter;\r\n\r\n    // allow managers to blacklist and confirm contributions by manager accounts\r\n    // (managers can be set and altered by owner, multiple manager accounts are possible\r\n    mapping(address => bool) public isManager;\r\n\r\n    // true if addess is not allowed to invest\r\n    mapping(address => bool) public isBlacklisted;\r\n\r\n    uint256 public confirmationPeriod;\r\n    bool public confirmationPeriodOver;     // can be set by owner to finish confirmation in under 30 days\r\n\r\n    // for convenience we store vesting wallets\r\n    address[] public vestingWallets;\r\n\r\n    uint256 public investmentIdLastAttemptedToSettle;\r\n\r\n    struct Payment {\r\n        address investor;\r\n        address beneficiary;\r\n        uint256 weiAmount;\r\n        uint256 tokenAmount;\r\n        bool confirmed;\r\n        bool attemptedSettlement;\r\n        bool completedSettlement;\r\n    }\r\n\r\n    Payment[] public investments;\r\n\r\n    /*** EVENTS ***/\r\n    event ChangedInvestorBlacklisting(address investor, bool blacklisted);\r\n    event ChangedManager(address manager, bool active);\r\n    event ChangedInvestmentConfirmation(uint256 investmentId, address investor, bool confirmed);\r\n\r\n    /*** MODIFIERS ***/\r\n    modifier onlyUnderwriter() {\r\n        require(msg.sender == underwriter);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(isManager[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNoneZero(address _to, uint256 _amount) {\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyConfirmPayment() {\r\n        require(now > endTime && now <= endTime.add(confirmationPeriod));\r\n        require(!confirmationPeriodOver);\r\n        _;\r\n    }\r\n\r\n    modifier onlyConfirmationOver() {\r\n        require(confirmationPeriodOver || now > endTime.add(confirmationPeriod));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Deploy capped ico crowdsale contract\r\n     * @param _startTime uint256 Start time of the crowdsale\r\n     * @param _endTime uint256 End time of the crowdsale\r\n     * @param _rateChfPerEth uint256 CHF per ETH rate\r\n     * @param _wallet address Wallet address of the crowdsale\r\n     * @param _confirmationPeriodDays uint256 Confirmation period in days\r\n     * @param _underwriter address of the underwriter\r\n     */\r\n    function IcoCrowdsale(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rateChfPerEth,\r\n        address _wallet,\r\n        uint256 _confirmationPeriodDays,\r\n        address _underwriter\r\n    )\r\n        public\r\n        Crowdsale(_startTime, _endTime, _rateChfPerEth, _wallet)\r\n    {\r\n        require(MAX_TOKEN_CAP == ICO_ENABLERS_CAP.add(ICO_TOKEN_CAP).add(DEVELOPMENT_TEAM_CAP));\r\n        require(_underwriter != address(0));\r\n\r\n        setManager(msg.sender, true);\r\n\r\n        tokenPerWei = (_rateChfPerEth.mul(1e2)).div(CHF_CENT_PER_TOKEN);\r\n        minContributionInWei = (MIN_CONTRIBUTION_CHF.mul(1e18)).div(_rateChfPerEth);\r\n\r\n        confirmationPeriod = _confirmationPeriodDays * 1 days;\r\n        underwriter = _underwriter;\r\n    }\r\n\r\n    /**\r\n     * @dev Set / alter manager / blacklister account. This can be done from owner only\r\n     * @param _manager address address of the manager to create/alter\r\n     * @param _active bool flag that shows if the manager account is active\r\n     */\r\n    function setManager(address _manager, bool _active) public onlyOwner {\r\n        isManager[_manager] = _active;\r\n        ChangedManager(_manager, _active);\r\n    }\r\n\r\n    /**\r\n     * @dev blacklist investor from participating in the crowdsale\r\n     * @param _investor address address of the investor to disallowed participation\r\n     */\r\n    function blackListInvestor(address _investor, bool _active) public onlyManager {\r\n        isBlacklisted[_investor] = _active;\r\n        ChangedInvestorBlacklisting(_investor, _active);\r\n    }\r\n\r\n    /**\r\n     * @dev override (not extend! because we only issues tokens after final KYC confirm phase)\r\n     *      core functionality by blacklist check and registration of payment\r\n     * @param _beneficiary address address of the beneficiary to receive tokens after they have been confirmed\r\n     */\r\n    function buyTokens(address _beneficiary) public payable {\r\n        require(_beneficiary != address(0));\r\n        require(validPurchase());\r\n        require(!isBlacklisted[msg.sender]);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokenAmount;\r\n        uint256 purchasedTokens = weiAmount.mul(tokenPerWei);\r\n        uint256 tempTotalTokensPurchased = totalTokensPurchased.add(purchasedTokens);\r\n        uint256 overflowTokens;\r\n        uint256 overflowTokens2;\r\n        // 20% discount bonus amount\r\n        uint256 tier1BonusTokens;\r\n        // 10% discount bonus amount\r\n        uint256 tier2BonusTokens;\r\n\r\n        // tier 1 20% discount - 1st 3 million tokens purchased\r\n        if (!tier1Reached) {\r\n\r\n            // tx tokens overflowed into next tier 2 - 10% discount - mark tier1Reached! else all tokens are tier 1 discounted\r\n            if (tempTotalTokensPurchased > DISCOUNT_TOKEN_AMOUNT_T1) {\r\n                tier1Reached = true;\r\n                overflowTokens = tempTotalTokensPurchased.sub(DISCOUNT_TOKEN_AMOUNT_T1);\r\n                tier1BonusTokens = purchasedTokens.sub(overflowTokens);\r\n            // tx tokens did not overflow into next tier 2 (10% discount)\r\n            } else {\r\n                tier1BonusTokens = purchasedTokens;\r\n            }\r\n            //apply discount\r\n            tier1BonusTokens = tier1BonusTokens.mul(10).div(8);\r\n            tokenAmount = tokenAmount.add(tier1BonusTokens);\r\n        }\r\n\r\n        // tier 2 10% discount - 2nd 3 million tokens purchased\r\n        if (tier1Reached && !tier2Reached) {\r\n\r\n            // tx tokens overflowed into next tier 3 - 0% - marked tier2Reached! else all tokens are tier 2 discounted\r\n            if (tempTotalTokensPurchased > DISCOUNT_TOKEN_AMOUNT_T2) {\r\n                tier2Reached = true;\r\n                overflowTokens2 = tempTotalTokensPurchased.sub(DISCOUNT_TOKEN_AMOUNT_T2);\r\n                tier2BonusTokens = purchasedTokens.sub(overflowTokens2);\r\n            // tx tokens did not overflow into next tier 3 (tier 3 == no discount)\r\n            } else {\r\n                // tokens overflowed from tier1 else this tx started in tier2\r\n                if (overflowTokens > 0) {\r\n                    tier2BonusTokens = overflowTokens;\r\n                } else {\r\n                    tier2BonusTokens = purchasedTokens;\r\n                }\r\n            }\r\n            // apply discount for tier 2 tokens\r\n            tier2BonusTokens = tier2BonusTokens.mul(10).div(9);\r\n            tokenAmount = tokenAmount.add(tier2BonusTokens).add(overflowTokens2);\r\n        }\r\n\r\n        // this triggers when both tier 1 and tier 2 discounted tokens have be filled - but ONLY afterwards, not if the flags got set during the same tx\r\n        // aka this is tier 3\r\n        if (tier2Reached && tier1Reached && tier2BonusTokens == 0) {\r\n            tokenAmount = purchasedTokens;\r\n        }\r\n\r\n        /*** Record & update state variables  ***/\r\n        // Tracks purchased tokens for 2 tiers of discounts\r\n        totalTokensPurchased = totalTokensPurchased.add(purchasedTokens);\r\n        // Tracks total tokens pending to be minted - this includes presale tokens\r\n        tokensToMint = tokensToMint.add(tokenAmount);\r\n\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokenAmount);\r\n\r\n        // register payment so that later on it can be confirmed (and tokens issued and Ether paid out)\r\n        Payment memory newPayment = Payment(msg.sender, _beneficiary, weiAmount, tokenAmount, false, false, false);\r\n        investments.push(newPayment);\r\n    }\r\n\r\n    /**\r\n     * @dev confirms payment\r\n     * @param _investmentId uint256 uint256 of the investment id to confirm\r\n     */\r\n    function confirmPayment(uint256 _investmentId) public onlyManager onlyConfirmPayment {\r\n        investments[_investmentId].confirmed = true;\r\n        ChangedInvestmentConfirmation(_investmentId, investments[_investmentId].investor, true);\r\n    }\r\n\r\n    /**\r\n     * @dev confirms payments via a batch method\r\n     * @param _investmentIds uint256[] array of uint256 of the investment ids to confirm\r\n     */\r\n    function batchConfirmPayments(uint256[] _investmentIds) public onlyManager onlyConfirmPayment {\r\n        uint256 investmentId;\r\n\r\n        for (uint256 c; c < _investmentIds.length; c = c.add(1)) {\r\n            investmentId = _investmentIds[c]; // gas optimization\r\n            confirmPayment(investmentId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev unconfirms payment made via investment id\r\n     * @param _investmentId uint256 uint256 of the investment to unconfirm\r\n     */\r\n    function unConfirmPayment(uint256 _investmentId) public onlyManager onlyConfirmPayment {\r\n        investments[_investmentId].confirmed = false;\r\n        ChangedInvestmentConfirmation(_investmentId, investments[_investmentId].investor, false);\r\n    }\r\n\r\n   /**\r\n    * @dev allows contract owner to mint tokens for presale or non-ETH contributions in batches\r\n     * @param _toList address[] array of the beneficiaries to receive tokens\r\n     * @param _tokenList uint256[] array of the token amounts to mint for the corresponding users\r\n    */\r\n    function batchMintTokenDirect(address[] _toList, uint256[] _tokenList) public onlyOwner {\r\n        require(_toList.length == _tokenList.length);\r\n\r\n        for (uint256 i; i < _toList.length; i = i.add(1)) {\r\n            mintTokenDirect(_toList[i], _tokenList[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allows contract owner to mint tokens for presale or non-ETH contributions\r\n     * @param _to address of the beneficiary to receive tokens\r\n     * @param _tokens uint256 of the token amount to mint\r\n     */\r\n    function mintTokenDirect(address _to, uint256 _tokens) public onlyOwner {\r\n        require(tokensToMint.add(_tokens) <= ICO_TOKEN_CAP);\r\n\r\n        tokensToMint = tokensToMint.add(_tokens);\r\n\r\n        // register payment so that later on it can be confirmed (and tokens issued and Ether paid out)\r\n        Payment memory newPayment = Payment(address(0), _to, 0, _tokens, false, false, false);\r\n        investments.push(newPayment);\r\n        TokenPurchase(msg.sender, _to, 0, _tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev allows contract owner to mint tokens for ICO enablers respecting the ICO_ENABLERS_CAP (no vesting)\r\n     * @param _to address for beneficiary\r\n     * @param _tokens uint256 token amount to mint\r\n     */\r\n    function mintIcoEnablersTokens(address _to, uint256 _tokens) public onlyOwner onlyNoneZero(_to, _tokens) {\r\n        require(icoEnablersTokensMinted.add(_tokens) <= ICO_ENABLERS_CAP);\r\n\r\n        token.mint(_to, _tokens);\r\n        icoEnablersTokensMinted = icoEnablersTokensMinted.add(_tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev allows contract owner to mint team tokens per DEVELOPMENT_TEAM_CAP and transfer to the development team's wallet (yes vesting)\r\n     * @param _to address for beneficiary\r\n     * @param _tokens uint256 token amount to mint\r\n     */\r\n    function mintDevelopmentTeamTokens(address _to, uint256 _tokens) public onlyOwner onlyNoneZero(_to, _tokens) {\r\n        require(developmentTeamTokensMinted.add(_tokens) <= DEVELOPMENT_TEAM_CAP);\r\n\r\n        developmentTeamTokensMinted = developmentTeamTokensMinted.add(_tokens);\r\n        TokenVesting newVault = new TokenVesting(_to, now, VESTING_CLIFF, VESTING_DURATION, false);\r\n        vestingWallets.push(address(newVault)); // for convenience we keep them in storage so that they are easily accessible via MEW or etherscan\r\n        token.mint(address(newVault), _tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev returns number of elements in the vestinWallets array\r\n     */\r\n    function getVestingWalletLength() public view returns (uint256) {\r\n        return vestingWallets.length;\r\n    }\r\n\r\n    /**\r\n     * @dev set final the confirmation period\r\n     */\r\n    function finalizeConfirmationPeriod() public onlyOwner onlyConfirmPayment {\r\n        confirmationPeriodOver = true;\r\n    }\r\n\r\n    /**\r\n     * @dev settlement of investment made via investment id\r\n     * @param _investmentId uint256 uint256 being the investment id\r\n     */\r\n    function settleInvestment(uint256 _investmentId) public onlyConfirmationOver {\r\n        Payment storage p = investments[_investmentId];\r\n\r\n        // investment should not be settled already (prevent double token issueing or repayment)\r\n        require(!p.completedSettlement);\r\n\r\n        // investments have to be processed in right order\r\n        // unless we're at first investment, the previous has needs to have undergone an attempted settlement\r\n\r\n        require(_investmentId == 0 || investments[_investmentId.sub(1)].attemptedSettlement);\r\n\r\n        p.attemptedSettlement = true;\r\n\r\n        // just so that we can see which one we attempted last time and can continue with next\r\n        investmentIdLastAttemptedToSettle = _investmentId;\r\n\r\n        if (p.confirmed && !capReached) {\r\n            // if confirmed -> issue tokens, send ETH to wallet and complete settlement\r\n\r\n            // calculate number of tokens to be issued to investor\r\n            uint256 tokens = p.tokenAmount;\r\n\r\n            // check to see if this purchase sets it over the crowdsale token cap\r\n            // if so, refund\r\n            if (tokensMinted.add(tokens) > ICO_TOKEN_CAP) {\r\n                capReached = true;\r\n                if (p.weiAmount > 0) {\r\n                    p.investor.send(p.weiAmount); // does not throw (otherwise we'd block all further settlements)\r\n                }\r\n            } else {\r\n                tokensToMint = tokensToMint.sub(tokens);\r\n                tokensMinted = tokensMinted.add(tokens);\r\n\r\n                // mint tokens for beneficiary\r\n                token.mint(p.beneficiary, tokens);\r\n                if (p.weiAmount > 0) {\r\n                    // send Ether to project wallet (throws if wallet throws)\r\n                    wallet.transfer(p.weiAmount);\r\n                }\r\n            }\r\n\r\n            p.completedSettlement = true;\r\n        } else {\r\n            // if not confirmed -> reimburse ETH or if fiat (presale) investor: do nothing\r\n            // only complete settlement if investor got their money back\r\n            // (does not throw (as .transfer would)\r\n            // otherwise we would block settlement process of all following investments)\r\n            if (p.investor != address(0) && p.weiAmount > 0) {\r\n                if (p.investor.send(p.weiAmount)) {\r\n                    p.completedSettlement = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allows the batch settlement of investments made\r\n     * @param _investmentIds uint256[] array of uint256 of investment ids\r\n     */\r\n    function batchSettleInvestments(uint256[] _investmentIds) public {\r\n        for (uint256 c; c < _investmentIds.length; c = c.add(1)) {\r\n            settleInvestment(_investmentIds[c]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev allows contract owner to finalize the ICO, unpause tokens, set treasurer, finish minting, and transfer ownship of the token contract\r\n     */\r\n    function finalize() public onlyUnderwriter onlyConfirmationOver {\r\n        Pausable(token).unpause();\r\n\r\n        // this crowdsale also should not be treasurer of the token anymore\r\n        IcoToken(token).setTreasurer(this, false);\r\n\r\n        // do not allow new owner to mint further tokens\r\n        MintableToken(token).finishMinting();\r\n\r\n        // until now the owner of the token is this crowdsale contract\r\n        // in order for a human owner to make use of the tokens onlyOwner functions\r\n        // we need to transfer the ownership\r\n        // in the end the owner of this crowdsale will also be the owner of the token\r\n        Ownable(token).transferOwnership(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Create new instance of ico token contract\r\n     */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new IcoToken();\r\n    }\r\n\r\n    /**\r\n     * @dev extend base functionality with min investment amount\r\n     */\r\n    function validPurchase() internal view returns (bool) {\r\n        // minimal investment: 250 CHF (represented in wei)\r\n        require (msg.value >= minContributionInWei);\r\n        return super.validPurchase();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hodler\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"calcDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestUnclaimed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hodler\",\"type\":\"address\"}],\"name\":\"getClaimableDividend\",\"outputs\":[{\"name\":\"claimableDividend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDividendIncreaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendCycleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTreasurer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasurer\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setTreasurer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"Payin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"Reclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"treasurer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ChangedTreasurer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"IcoToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18fdb849b9fa21f51d67023d73641ed241973d766e2498507ba0c979a19a51ff"}]}