{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Admin {\r\n  address public owner;\r\n  mapping(address => bool) public isAdmin;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(isAdmin[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function Admin() public {\r\n    owner = msg.sender;\r\n    addAdmin(owner);\r\n  }\r\n\r\n  function addAdmin(address _admin) public onlyOwner {\r\n    isAdmin[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin(address _admin) public onlyOwner {\r\n    isAdmin[_admin] = false;\r\n  }\r\n}\r\n\r\n// To add a tree do the following:\r\n// - Create a new Tree with the ID, owner, treeValue and power to generate fruits\r\n// - Update the treeBalances and treeOwner mappings\r\ncontract Trees is Admin {\r\n  event LogWaterTree(uint256 indexed treeId, address indexed owner, uint256 date);\r\n  event LogRewardPicked(uint256 indexed treeId, address indexed owner, uint256 date, uint256 amount);\r\n\r\n  // Get the tree information given the id\r\n  mapping(uint256 => Tree) public treeDetails;\r\n  // A mapping with all the tree IDs of that owner\r\n  mapping(address => uint256[]) public ownerTreesIds;\r\n  // Tree id and the days the tree has been watered\r\n  // Tree id => day number => isWatered\r\n  mapping(uint256 => mapping(uint256 => bool)) public treeWater;\r\n\r\n  struct Tree {\r\n    uint256 ID;\r\n    address owner;\r\n    uint256 purchaseDate;\r\n    uint256 treePower; // How much ether that tree is generating from 0 to 100 where 100 is the total power combined of all the trees\r\n    uint256 salePrice;\r\n    uint256 timesExchanged;\r\n    uint256[] waterTreeDates;\r\n    bool onSale;\r\n    uint256 lastRewardPickedDate; // When did you take the last reward\r\n  }\r\n\r\n  uint256[] public trees;\r\n  uint256[] public treesOnSale;\r\n  uint256 public lastTreeId;\r\n  address public defaultTreesOwner = msg.sender;\r\n  uint256 public defaultTreesPower = 1; // 10% of the total power\r\n  uint256 public defaultSalePrice = 1 ether;\r\n  uint256 public totalTreePower;\r\n  uint256 public timeBetweenRewards = 1 days;\r\n\r\n  // This will be called automatically by the server\r\n  // The contract itself will hold the initial trees\r\n  function generateTrees(uint256 _amountToGenerate) public onlyAdmin {\r\n    for(uint256 i = 0; i < _amountToGenerate; i++) {\r\n        uint256 newTreeId = lastTreeId + 1;\r\n        lastTreeId += 1;\r\n        uint256[] memory emptyArray;\r\n        Tree memory newTree = Tree(newTreeId, defaultTreesOwner, now, defaultTreesPower, defaultSalePrice, 0, emptyArray, true, 0);\r\n\r\n        // Update the treeBalances and treeOwner mappings\r\n        // We add the tree to the same array position to find it easier\r\n        ownerTreesIds[defaultTreesOwner].push(newTreeId);\r\n        treeDetails[newTreeId] = newTree;\r\n        treesOnSale.push(newTreeId);\r\n        totalTreePower += defaultTreesPower;\r\n    }\r\n  }\r\n\r\n  // This is payable, the user will send the payment here\r\n  // We delete the tree from the owner first and we add that to the receiver\r\n  // When you sell you're actually putting the tree on the market, not losing it yet\r\n  function putTreeOnSale(uint256 _treeNumber, uint256 _salePrice) public {\r\n    require(msg.sender == treeDetails[_treeNumber].owner);\r\n    require(!treeDetails[_treeNumber].onSale);\r\n    require(_salePrice > 0);\r\n\r\n    treesOnSale.push(_treeNumber);\r\n    treeDetails[_treeNumber].salePrice = _salePrice;\r\n    treeDetails[_treeNumber].onSale = true;\r\n  }\r\n\r\n  // To buy a tree paying ether\r\n  function buyTree(uint256 _treeNumber, address _originalOwner) public payable {\r\n    require(msg.sender != treeDetails[_treeNumber].owner);\r\n    require(treeDetails[_treeNumber].onSale);\r\n    require(msg.value >= treeDetails[_treeNumber].salePrice);\r\n    address newOwner = msg.sender;\r\n    // Move id from old to new owner\r\n    // Find the tree of that user and delete it\r\n    for(uint256 i = 0; i < ownerTreesIds[_originalOwner].length; i++) {\r\n        if(ownerTreesIds[_originalOwner][i] == _treeNumber) delete ownerTreesIds[_originalOwner][i];\r\n    }\r\n    // Remove the tree from the array of trees on sale\r\n    for(uint256 a = 0; a < treesOnSale.length; a++) {\r\n        if(treesOnSale[a] == _treeNumber) {\r\n            delete treesOnSale[a];\r\n            break;\r\n        }\r\n    }\r\n    ownerTreesIds[newOwner].push(_treeNumber);\r\n    treeDetails[_treeNumber].onSale = false;\r\n    if(treeDetails[_treeNumber].timesExchanged == 0) {\r\n        // Reward the owner for the initial trees as a way of monetization. Keep half for the treasury\r\n        owner.transfer(msg.value / 2);\r\n    } else {\r\n        treeDetails[_treeNumber].owner.transfer(msg.value * 90 / 100); // Keep 0.1% in the treasury\r\n    }\r\n    treeDetails[_treeNumber].owner = newOwner;\r\n    treeDetails[_treeNumber].timesExchanged += 1;\r\n  }\r\n\r\n  // To take a tree out of the market without selling it\r\n  function cancelTreeSell(uint256 _treeId) public {\r\n    require(msg.sender == treeDetails[_treeId].owner);\r\n    require(treeDetails[_treeId].onSale);\r\n    // Remove the tree from the array of trees on sale\r\n    for(uint256 a = 0; a < treesOnSale.length; a++) {\r\n        if(treesOnSale[a] == _treeId) {\r\n            delete treesOnSale[a];\r\n            break;\r\n        }\r\n    }\r\n    treeDetails[_treeId].onSale = false;\r\n  }\r\n\r\n  // Improves the treePower\r\n  function waterTree(uint256 _treeId) public {\r\n    require(_treeId > 0);\r\n    require(msg.sender == treeDetails[_treeId].owner);\r\n    uint256[] memory waterDates = treeDetails[_treeId].waterTreeDates;\r\n    uint256 timeSinceLastWater;\r\n    // We want to store at what day the tree was watered\r\n    uint256 day;\r\n    if(waterDates.length > 0) {\r\n        timeSinceLastWater = now - waterDates[waterDates.length - 1];\r\n        day = waterDates[waterDates.length - 1] / 1 days;\r\n    }else {\r\n        timeSinceLastWater = timeBetweenRewards;\r\n        day = 1;\r\n    }\r\n    require(timeSinceLastWater >= timeBetweenRewards);\r\n    treeWater[_treeId][day] = true;\r\n    treeDetails[_treeId].waterTreeDates.push(now);\r\n    treeDetails[_treeId].treePower += 1;\r\n    totalTreePower += 1;\r\n    LogWaterTree(_treeId, msg.sender, now);\r\n  }\r\n\r\n  // To get the ether from the rewards\r\n  function pickReward(uint256 _treeId) public {\r\n    require(msg.sender == treeDetails[_treeId].owner);\r\n    require(now - treeDetails[_treeId].lastRewardPickedDate > timeBetweenRewards);\r\n\r\n    uint256[] memory formatedId = new uint256[](1);\r\n    formatedId[0] = _treeId;\r\n    uint256[] memory rewards = checkRewards(formatedId);\r\n    treeDetails[_treeId].lastRewardPickedDate = now;\r\n    msg.sender.transfer(rewards[0]);\r\n    LogRewardPicked(_treeId, msg.sender, now, rewards[0]);\r\n  }\r\n\r\n  // To see if a tree is already watered or not\r\n  function checkTreesWatered(uint256[] _treeIds) public constant returns(bool[]) {\r\n    bool[] memory results = new bool[](_treeIds.length);\r\n    uint256 timeSinceLastWater;\r\n    for(uint256 i = 0; i < _treeIds.length; i++) {\r\n        uint256[] memory waterDates = treeDetails[_treeIds[i]].waterTreeDates;\r\n        if(waterDates.length > 0) {\r\n            timeSinceLastWater = now - waterDates[waterDates.length - 1];\r\n            results[i] = timeSinceLastWater < timeBetweenRewards;\r\n        } else {\r\n            results[i] = false;\r\n        }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // Returns an array of how much ether all those trees have generated today\r\n  // All the tree power combiined for instance 10293\r\n  // The tree power for this tree for instance 298\r\n  // What percentage do you get: 2%\r\n  // Total money in the treasury: 102 ETH\r\n  // A 10% of the total is distributed daily across all the users\r\n  // For instance 10.2 ETH today\r\n  // So if you pick your rewards right now, you'll get a 2% of 10.2 ETH which is 0.204 ETH\r\n  function checkRewards(uint256[] _treeIds) public constant returns(uint256[]) {\r\n    uint256 amountInTreasuryToDistribute = this.balance / 10;\r\n    uint256[] memory results = new uint256[](_treeIds.length);\r\n    for(uint256 i = 0; i < _treeIds.length; i++) {\r\n        // Important to multiply by 100 to\r\n        uint256 yourPercentage = treeDetails[_treeIds[i]].treePower * 1 ether / totalTreePower;\r\n        uint256 amountYouGet = yourPercentage * amountInTreasuryToDistribute / 1 ether;\r\n        results[i] = amountYouGet;\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // To get all the tree IDs of one user\r\n  function getTreeIds(address _account) public constant returns(uint256[]) {\r\n    if(_account != address(0)) return ownerTreesIds[_account];\r\n    else return ownerTreesIds[msg.sender];\r\n  }\r\n\r\n  // To get all the trees on sale\r\n  function getTreesOnSale() public constant returns(uint256[]) {\r\n      return treesOnSale;\r\n  }\r\n\r\n  // To extract the ether in an emergency\r\n  function emergencyExtract() public onlyOwner {\r\n    owner.transfer(this.balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTreeIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeNumber\",\"type\":\"uint256\"},{\"name\":\"_originalOwner\",\"type\":\"address\"}],\"name\":\"buyTree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultTreesPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treeWater\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultTreesOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeId\",\"type\":\"uint256\"}],\"name\":\"pickReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyExtract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerTreesIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeNumber\",\"type\":\"uint256\"},{\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"putTreeOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTreesOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTreePower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_treeIds\",\"type\":\"uint256[]\"}],\"name\":\"checkRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeId\",\"type\":\"uint256\"}],\"name\":\"waterTree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeId\",\"type\":\"uint256\"}],\"name\":\"cancelTreeSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTreeId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToGenerate\",\"type\":\"uint256\"}],\"name\":\"generateTrees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeBetweenRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_treeIds\",\"type\":\"uint256[]\"}],\"name\":\"checkTreesWatered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treeDetails\",\"outputs\":[{\"name\":\"ID\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"name\":\"treePower\",\"type\":\"uint256\"},{\"name\":\"salePrice\",\"type\":\"uint256\"},{\"name\":\"timesExchanged\",\"type\":\"uint256\"},{\"name\":\"onSale\",\"type\":\"bool\"},{\"name\":\"lastRewardPickedDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treesOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"LogWaterTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRewardPicked\",\"type\":\"event\"}]","ContractName":"Trees","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ef70704358fdeb3c85010db4d4f0b5501196510b853dd63e57eea727ad89f676"}]}