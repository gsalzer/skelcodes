{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n  * Legenrich LeRT token \r\n  *\r\n  * More at https://legenrich.com\r\n  *\r\n  * Smart contract and payment gateway developed by https://smart2be.com, \r\n  * Premium ICO campaign managing company\r\n  *\r\n  **/\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n\r\ncontract TokenERC20 is owned {\r\n    using SafeMath for uint256;\r\n \r\n    bool public mintingFinished = false;\r\n\r\n     modifier canMint {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n     // List of Team and Founders account's frozen till 15 November 2018\r\n    mapping (address => uint256) public frozenAccount;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    event Frozen(address indexed from, uint256 till);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    // Minting \r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintStarted();\r\n    event MintFinished();\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);      // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                        // Give the creator all initial tokens\r\n        name = tokenName;                                           // Set the name for display purposes\r\n        symbol = tokenSymbol;                                       // Set the symbol for display purposes\r\n    }\r\n\r\n    /* Returns total supply of issued tokens */\r\n    function totalSupply() constant public returns (uint256 supply) {\r\n        return totalSupply;\r\n    }\r\n    /* Returns balance of  _owner \r\n     *   \r\n     * @param _owner Address to check balance   \r\n     *   \r\n     */\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n      * Transfer tokens\r\n      *\r\n      * Send `_value` tokens to `_to` from your account\r\n      *\r\n      * @param _to The address of the recipient\r\n      * @param _value the amount to send\r\n      */   \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balanceOf[msg.sender]);\r\n        require(frozenAccount[msg.sender] < now);                   // Check if sender is frozen\r\n        if (frozenAccount[msg.sender] < now) frozenAccount[msg.sender] = 0;\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n   \r\n    /**\r\n      * @dev Transfer tokens from one address to another\r\n      * @param _from address The address which you want to send tokens from\r\n      * @param _to address The address which you want to transfer to\r\n      * @param _value uint256 the amount of tokens to be transferred\r\n      */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(frozenAccount[_from] < now);                   // Check if sender is frozen\r\n        if (frozenAccount[_from] < now) frozenAccount[_from] = 0;\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowed for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * approve should be called when allowed[_spender] == 0. To increment\r\n      * allowed value is better to use this function to avoid 2 calls (and wait until\r\n      * the first transaction is mined)\r\n      * From MonolithDAO Token.sol\r\n      */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n              allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }   \r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Burns tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowed[_from][msg.sender]);    // Check allowed\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowed\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * Create new tokens\r\n     *\r\n     * Create `_value` tokens on behalf of Owner.\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function _mint(uint256 _value) canMint internal  {\r\n        totalSupply = totalSupply.add(_value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\r\n    }\r\n    \r\n    /**\r\n      * @dev Function to stop minting new tokens.\r\n      * @return True if the operation was successful.\r\n      */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    /**\r\n      * @dev Function to start minting new tokens.\r\n      * @return True if the operation was successful.\r\n      */\r\n    function startMinting() onlyOwner  public returns (bool) {\r\n        mintingFinished = false;\r\n        MintStarted();\r\n        return true;\r\n    }  \r\n\r\n    /**\r\n      * @notice Freezes from sending & receiving tokens. For users protection can't be used after 1542326399\r\n      * and will not allow corrections.\r\n      *           \r\n      * @param _from  Founders and Team account we are freezing from sending\r\n      * @param _till Timestamp till the end of freeze\r\n      *\r\n      */\r\n   function freezeAccount(address _from, uint256 _till) onlyOwner public {\r\n        require(frozenAccount[_from] == 0);\r\n        frozenAccount[_from] = _till;                  \r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LeRT is TokenERC20 {\r\n\r\n \r\n\r\n    // This is time for next Profit Equivalent\r\n    struct periodTerms { \r\n        uint256 periodTime;\r\n        uint periodBonus;   // In Procents\r\n    }\r\n    \r\n    uint256 public priceLeRT = 100000000000000; // Starting Price 1 ETH = 10000 LeRT\r\n\r\n    uint public currentPeriod = 0;\r\n    \r\n    mapping (uint => periodTerms) public periodTable;\r\n\r\n    // List of Team and Founders account's frozen till 01 May 2019\r\n    mapping (address => uint256) public frozenAccount;\r\n\r\n    \r\n    /* Handles incoming payments to contract's address */\r\n    function() payable canMint public {\r\n        if (now > periodTable[currentPeriod].periodTime) currentPeriod++;\r\n        require(currentPeriod != 7);\r\n        \r\n        uint256 newTokens;\r\n        require(priceLeRT > 0);\r\n        // calculate new tokens\r\n        newTokens = msg.value / priceLeRT * 10 ** uint256(decimals);\r\n        // calculate bonus tokens\r\n        newTokens += newTokens/100 * periodTable[currentPeriod].periodBonus; \r\n        _mint(newTokens);\r\n        owner.transfer(msg.value); \r\n    }\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function LeRT(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {\r\n        // set periods on startup\r\n        periodTable[0].periodTime = 1519084800;\r\n        periodTable[0].periodBonus = 50;\r\n        periodTable[1].periodTime = 1519343999;\r\n        periodTable[1].periodBonus = 45;\r\n        periodTable[2].periodTime = 1519689599;\r\n        periodTable[2].periodBonus = 40;\r\n        periodTable[3].periodTime = 1520294399;\r\n        periodTable[3].periodBonus = 35;\r\n        periodTable[4].periodTime = 1520899199;\r\n        periodTable[4].periodBonus = 30;\r\n        periodTable[5].periodTime = 1522108799;\r\n        periodTable[5].periodBonus = 20;\r\n        periodTable[6].periodTime = 1525132799;\r\n        periodTable[6].periodBonus = 15;\r\n        periodTable[7].periodTime = 1527811199;\r\n        periodTable[7].periodBonus = 0;}\r\n\r\n    function setPrice(uint256 _value) public onlyOwner {\r\n        priceLeRT = _value;\r\n    }\r\n    function setPeriod(uint _period, uint256 _periodTime, uint256 _periodBouns) public onlyOwner {\r\n        periodTable[_period].periodTime = _periodTime;\r\n        periodTable[_period].periodBonus = _periodBouns;\r\n    }\r\n    \r\n    function setCurrentPeriod(uint _period) public onlyOwner {\r\n        currentPeriod = _period;\r\n    }\r\n    \r\n    function mintOther(address _to, uint256 _value) public onlyOwner {\r\n        uint256 newTokens;\r\n        newTokens = _value + _value/100 * periodTable[currentPeriod].periodBonus; \r\n        balanceOf[_to] += newTokens;\r\n        totalSupply += newTokens;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_till\",\"type\":\"uint256\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setCurrentPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintOther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodTable\",\"outputs\":[{\"name\":\"periodTime\",\"type\":\"uint256\"},{\"name\":\"periodBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_periodTime\",\"type\":\"uint256\"},{\"name\":\"_periodBouns\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceLeRT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"}]","ContractName":"LeRT","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000f4c6567656e7269636820546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c65525400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a9d45896fb2584ae52c5b97f018557c51f523b52e53a07ea0343deee2caf11ad"}]}