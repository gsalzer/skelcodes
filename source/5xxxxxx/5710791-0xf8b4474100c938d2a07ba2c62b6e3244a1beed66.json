{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/TokenVesting.sol\r\n\r\n/**\r\n * @title Vesting contract for SDT\r\n * @dev see https://send.sd/token\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address public ico;\r\n  bool public initialized;\r\n  bool public active;\r\n  ERC20Basic public token;\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  uint256 public circulatingSupply = 0;\r\n\r\n  struct TokenGrant {\r\n    uint256 value;\r\n    uint256 claimed;\r\n    uint256 vesting;\r\n    uint256 start;\r\n  }\r\n\r\n  event NewTokenGrant (\r\n    address indexed to,\r\n    uint256 value,\r\n    uint256 start,\r\n    uint256 vesting\r\n  );\r\n\r\n  event NewTokenClaim (\r\n    address indexed holder,\r\n    uint256 value\r\n  );\r\n\r\n  modifier icoResticted() {\r\n    require(msg.sender == ico);\r\n    _;\r\n  }\r\n\r\n  modifier isActive() {\r\n    require(active);\r\n    _;\r\n  }\r\n\r\n  function TokenVesting() public {\r\n    active = false;\r\n  }\r\n\r\n  function init(address _token, address _ico) public onlyOwner {\r\n    token = ERC20Basic(_token);\r\n    ico = _ico;\r\n    initialized = true;\r\n    active = true;\r\n  }\r\n\r\n  function stop() public isActive onlyOwner {\r\n    active = false;\r\n  }\r\n\r\n  function resume() public onlyOwner {\r\n    require(!active);\r\n    require(initialized);\r\n    active = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Grant vested tokens.\r\n  * @notice Only for ICO contract address.\r\n  * @param _to Addres to grant tokens to.\r\n  * @param _value Number of tokens granted.\r\n  * @param _vesting Vesting finish timestamp.\r\n  * @param _start Vesting start timestamp.\r\n  */\r\n  function grantVestedTokens(\r\n      address _to,\r\n      uint256 _value,\r\n      uint256 _start,\r\n      uint256 _vesting\r\n  ) public icoResticted isActive {\r\n    require(_value > 0);\r\n    require(_vesting > _start);\r\n    require(grants[_to].length < 10);\r\n\r\n    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\r\n    grants[_to].push(grant);\r\n\r\n    NewTokenGrant(_to, _value, _start, _vesting);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim all vested tokens up to current date for myself\r\n  */\r\n  function claimTokens() public {\r\n    claim(msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim all vested tokens up to current date in behaviour of an user\r\n  * @param _to address Addres to claim tokens\r\n  */\r\n  function claimTokensFor(address _to) public onlyOwner {\r\n    claim(_to);\r\n  }\r\n\r\n  /**\r\n  * @dev Get claimable tokens\r\n  */\r\n  function claimableTokens() public constant returns (uint256) {\r\n    address _to = msg.sender;\r\n    uint256 numberOfGrants = grants[_to].length;\r\n\r\n    if (numberOfGrants == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 claimable = 0;\r\n    uint256 claimableFor = 0;\r\n    for (uint256 i = 0; i < numberOfGrants; i++) {\r\n      claimableFor = calculateVestedTokens(\r\n        grants[_to][i].value,\r\n        grants[_to][i].vesting,\r\n        grants[_to][i].start,\r\n        grants[_to][i].claimed\r\n      );\r\n      claimable = claimable.add(claimableFor);\r\n    }\r\n    return claimable;\r\n  }\r\n\r\n  /**\r\n  * @dev Get all veted tokens\r\n  */\r\n  function totalVestedTokens() public constant returns (uint256) {\r\n    address _to = msg.sender;\r\n    uint256 numberOfGrants = grants[_to].length;\r\n\r\n    if (numberOfGrants == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 claimable = 0;\r\n    for (uint256 i = 0; i < numberOfGrants; i++) {\r\n      claimable = claimable.add(\r\n        grants[_to][i].value.sub(grants[_to][i].claimed)\r\n      );\r\n    }\r\n    return claimable;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate vested claimable tokens on current time\r\n  * @param _tokens Number of tokens granted\r\n  * @param _vesting Vesting finish timestamp\r\n  * @param _start Vesting start timestamp\r\n  * @param _claimed Number of tokens already claimed\r\n  */\r\n  function calculateVestedTokens(\r\n      uint256 _tokens,\r\n      uint256 _vesting,\r\n      uint256 _start,\r\n      uint256 _claimed\r\n  ) internal constant returns (uint256) {\r\n    uint256 time = block.timestamp;\r\n\r\n    if (time < _start) {\r\n      return 0;\r\n    }\r\n\r\n    if (time >= _vesting) {\r\n      return _tokens.sub(_claimed);\r\n    }\r\n\r\n    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\r\n      _vesting.sub(_start)\r\n    );\r\n\r\n    return vestedTokens.sub(_claimed);\r\n  }\r\n\r\n  /**\r\n  * @dev Claim all vested tokens up to current date\r\n  */\r\n  function claim(address _to) internal {\r\n    uint256 numberOfGrants = grants[_to].length;\r\n\r\n    if (numberOfGrants == 0) {\r\n      return;\r\n    }\r\n\r\n    uint256 claimable = 0;\r\n    uint256 claimableFor = 0;\r\n    for (uint256 i = 0; i < numberOfGrants; i++) {\r\n      claimableFor = calculateVestedTokens(\r\n        grants[_to][i].value,\r\n        grants[_to][i].vesting,\r\n        grants[_to][i].start,\r\n        grants[_to][i].claimed\r\n      );\r\n      claimable = claimable.add(claimableFor);\r\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\r\n    }\r\n\r\n    token.transfer(_to, claimable);\r\n    circulatingSupply += claimable;\r\n\r\n    NewTokenClaim(_to, claimable);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenSale.sol\r\n\r\n/**\r\n * @title Crowdsale contract\r\n * @dev see https://send.sd/crowdsale\r\n */\r\ncontract TokenSale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  /* Leave 10 tokens margin error in order to succedd\r\n  with last pool allocation in case hard cap is reached */\r\n  uint256 constant public HARD_CAP = 70000000 ether;\r\n  uint256 constant public VESTING_TIME = 90 days;\r\n  uint256 public weiUsdRate = 1;\r\n  uint256 public btcUsdRate = 1;\r\n\r\n  uint256 public vestingEnds;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  address public wallet;\r\n\r\n  uint256 public vestingStarts;\r\n\r\n  uint256 public soldTokens;\r\n  uint256 public raised;\r\n\r\n  bool public activated = false;\r\n  bool public isStopped = false;\r\n  bool public isFinalized = false;\r\n\r\n  BurnableToken public token;\r\n  TokenVesting public vesting;\r\n\r\n  event NewBuyer(\r\n    address indexed holder,\r\n    uint256 sndAmount,\r\n    uint256 usdAmount,\r\n    uint256 ethAmount,\r\n    uint256 btcAmount\r\n  );\r\n\r\n  event ClaimedTokens(\r\n    address indexed _token,\r\n    address indexed _controller,\r\n    uint256 _amount\r\n  );\r\n\r\n  modifier validAddress(address _address) {\r\n    require(_address != address(0x0));\r\n    _;\r\n  }\r\n\r\n  modifier isActive() {\r\n    require(activated);\r\n    require(!isStopped);\r\n    require(!isFinalized);\r\n    require(block.timestamp >= startTime);\r\n    require(block.timestamp <= endTime);\r\n    _;\r\n  }\r\n\r\n  function TokenSale(\r\n      uint256 _startTime,\r\n      uint256 _endTime,\r\n      address _wallet,\r\n      uint256 _vestingStarts\r\n  ) public validAddress(_wallet) {\r\n    require(_startTime > block.timestamp - 60);\r\n    require(_endTime > startTime);\r\n    require(_vestingStarts > startTime);\r\n\r\n    vestingStarts = _vestingStarts;\r\n    vestingEnds = vestingStarts.add(VESTING_TIME);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  /**\r\n   * @dev set an exchange rate in wei\r\n   * @param _rate uint256 The new exchange rate\r\n   */\r\n  function setWeiUsdRate(uint256 _rate) public onlyOwner {\r\n    require(_rate > 0);\r\n    weiUsdRate = _rate;\r\n  }\r\n\r\n  /**\r\n   * @dev set an exchange rate in satoshis\r\n   * @param _rate uint256 The new exchange rate\r\n   */\r\n  function setBtcUsdRate(uint256 _rate) public onlyOwner {\r\n    require(_rate > 0);\r\n    btcUsdRate = _rate;\r\n  }\r\n\r\n  /**\r\n   * @dev initialize the contract and set token\r\n   */\r\n  function initialize(\r\n      address _sdt,\r\n      address _vestingContract,\r\n      address _icoCostsPool,\r\n      address _distributionContract\r\n  ) public validAddress(_sdt) validAddress(_vestingContract) onlyOwner {\r\n    require(!activated);\r\n    activated = true;\r\n\r\n    token = BurnableToken(_sdt);\r\n    vesting = TokenVesting(_vestingContract);\r\n\r\n    // 1% reserve is released on deploy\r\n    token.transfer(_icoCostsPool, 7000000 ether);\r\n    token.transfer(_distributionContract, 161000000 ether);\r\n\r\n    //early backers allocation\r\n    uint256 threeMonths = vestingStarts.add(90 days);\r\n\r\n    updateStats(0, 43387693 ether);\r\n    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\r\n    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\r\n  }\r\n\r\n  function finalize(\r\n      address _poolA,\r\n      address _poolB,\r\n      address _poolC,\r\n      address _poolD\r\n  )\r\n      public\r\n      validAddress(_poolA)\r\n      validAddress(_poolB)\r\n      validAddress(_poolC)\r\n      validAddress(_poolD)\r\n      onlyOwner\r\n  {\r\n    grantVestedTokens(_poolA, 175000000 ether, vestingStarts, vestingStarts.add(7 years));\r\n    grantVestedTokens(_poolB, 168000000 ether, vestingStarts, vestingStarts.add(7 years));\r\n    grantVestedTokens(_poolC, 70000000 ether, vestingStarts, vestingStarts.add(7 years));\r\n    grantVestedTokens(_poolD, 48999990 ether, vestingStarts, vestingStarts.add(4 years));\r\n\r\n    token.burn(token.balanceOf(this));\r\n  }\r\n\r\n  function stop() public onlyOwner isActive returns(bool) {\r\n    isStopped = true;\r\n    return true;\r\n  }\r\n\r\n  function resume() public onlyOwner returns(bool) {\r\n    require(isStopped);\r\n    isStopped = false;\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    uint256 usd = msg.value.div(weiUsdRate);\r\n    doPurchase(usd, msg.value, 0, msg.sender, vestingEnds);\r\n    forwardFunds();\r\n  }\r\n\r\n  function btcPurchase(\r\n      address _beneficiary,\r\n      uint256 _btcValue\r\n  ) public onlyOwner validAddress(_beneficiary) {\r\n    uint256 usd = _btcValue.div(btcUsdRate);\r\n    doPurchase(usd, 0, _btcValue, _beneficiary, vestingEnds);\r\n  }\r\n\r\n  /**\r\n  * @dev Number of tokens is given by:\r\n  * usd * 100 ether / 14\r\n  */\r\n  function computeTokens(uint256 _usd) public pure returns(uint256) {\r\n    return _usd.mul(100 ether).div(14);\r\n  }\r\n\r\n  //////////\r\n  // Safety Methods\r\n  //////////\r\n  /// @notice This method can be used by the controller to extract mistakenly\r\n  ///  sent tokens to this contract.\r\n  /// @param _token The address of the token contract that you want to recover\r\n  ///  set to 0 in case you want to extract ether.\r\n  function claimTokens(address _token) public onlyOwner {\r\n    require(_token != address(token));\r\n    if (_token == 0x0) {\r\n      owner.transfer(this.balance);\r\n      return;\r\n    }\r\n\r\n    ERC20Basic erc20token = ERC20Basic(_token);\r\n    uint256 balance = erc20token.balanceOf(this);\r\n    erc20token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice The owner of this contract is the owner of token's contract\r\n   * @param _usd amount invested in USD\r\n   * @param _eth amount invested in ETH y contribution was made in ETH, 0 otherwise\r\n   * @param _btc amount invested in BTC y contribution was made in BTC, 0 otherwise\r\n   * @param _address Address to send tokens to\r\n   * @param _vestingEnds vesting finish timestamp\r\n   */\r\n  function doPurchase(\r\n      uint256 _usd,\r\n      uint256 _eth,\r\n      uint256 _btc,\r\n      address _address,\r\n      uint256 _vestingEnds\r\n  )\r\n      internal\r\n      isActive\r\n      returns(uint256)\r\n  {\r\n    require(_usd >= 10);\r\n\r\n    uint256 soldAmount = computeTokens(_usd);\r\n\r\n    updateStats(_usd, soldAmount);\r\n    grantVestedTokens(_address, soldAmount, vestingStarts, _vestingEnds);\r\n    NewBuyer(_address, soldAmount, _usd, _eth, _btc);\r\n\r\n    return soldAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to update collected and allocated tokens stats\r\n   */\r\n  function updateStats(uint256 usd, uint256 tokens) internal {\r\n    raised = raised.add(usd);\r\n    soldTokens = soldTokens.add(tokens);\r\n\r\n    require(soldTokens <= HARD_CAP);\r\n  }\r\n\r\n  /**\r\n   * @dev grant vested tokens\r\n   * @param _to Adress to grant vested tokens\r\n   * @param _value number of tokens to grant\r\n   * @param _start vesting start timestamp\r\n   * @param _vesting vesting finish timestamp\r\n   */\r\n  function grantVestedTokens(\r\n      address _to,\r\n      uint256 _value,\r\n      uint256 _start,\r\n      uint256 _vesting\r\n  ) internal {\r\n    token.transfer(vesting, _value);\r\n    vesting.grantVestedTokens(_to, _value, _start, _vesting);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setBtcUsdRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_btcValue\",\"type\":\"uint256\"}],\"name\":\"btcPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_poolA\",\"type\":\"address\"},{\"name\":\"_poolB\",\"type\":\"address\"},{\"name\":\"_poolC\",\"type\":\"address\"},{\"name\":\"_poolD\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStarts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcUsdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiUsdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setWeiUsdRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_usd\",\"type\":\"uint256\"}],\"name\":\"computeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sdt\",\"type\":\"address\"},{\"name\":\"_vestingContract\",\"type\":\"address\"},{\"name\":\"_icoCostsPool\",\"type\":\"address\"},{\"name\":\"_distributionContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_vestingStarts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sndAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"btcAmount\",\"type\":\"uint256\"}],\"name\":\"NewBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b108796000000000000000000000000000000000000000000000000000000005c2aad7f0000000000000000000000001e2fdf652af6444aaf110840ac833bf726a398e2000000000000000000000000000000000000000000000000000000005b381980","Library":"","SwarmSource":"bzzr://3cb19ac6ee0a1df55a948adab61ef58464e17f05b756e9128cfb7ab2789de547"}]}