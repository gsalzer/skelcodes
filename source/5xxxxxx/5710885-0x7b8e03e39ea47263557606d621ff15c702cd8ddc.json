{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/Distribution.sol\r\n\r\n/**\r\n * @title Distribution contract\r\n * @dev see https://send.sd/distribution\r\n */\r\ncontract Distribution is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint16 public stages;\r\n  uint256 public stageDuration;\r\n  uint256 public startTime;\r\n\r\n  uint256 public soldTokens;\r\n  uint256 public bonusClaimedTokens;\r\n  uint256 public raisedETH;\r\n  uint256 public raisedUSD;\r\n\r\n  uint256 public weiUsdRate;\r\n\r\n  BurnableToken public token;\r\n\r\n  bool public isActive;\r\n  uint256 public cap;\r\n  uint256 public stageCap;\r\n\r\n  mapping (address => mapping (uint16 => uint256)) public contributions;\r\n  mapping (uint16 => uint256) public sold;\r\n  mapping (uint16 => bool) public burned;\r\n  mapping (address => mapping (uint16 => bool)) public claimed;\r\n\r\n  event NewPurchase(\r\n    address indexed purchaser,\r\n    uint256 sdtAmount,\r\n    uint256 usdAmount,\r\n    uint256 ethAmount\r\n  );\r\n\r\n  event NewBonusClaim(\r\n    address indexed purchaser,\r\n    uint256 sdtAmount\r\n  );\r\n\r\n  function Distribution(\r\n      uint16 _stages,\r\n      uint256 _stageDuration,\r\n      address _token\r\n  ) public {\r\n    stages = _stages;\r\n    stageDuration = _stageDuration;\r\n    isActive = false;\r\n    token = BurnableToken(_token);\r\n  }\r\n\r\n  /**\r\n   * @dev contribution function\r\n   */\r\n  function () external payable {\r\n    require(isActive);\r\n    require(weiUsdRate > 0);\r\n    require(getStage() < stages);\r\n\r\n    uint256 usd = msg.value / weiUsdRate;\r\n    uint256 tokens = computeTokens(usd);\r\n    uint16 stage = getStage();\r\n\r\n    sold[stage] = sold[stage].add(tokens);\r\n    require(sold[stage] < stageCap);\r\n\r\n    contributions[msg.sender][stage] = contributions[msg.sender][stage].add(tokens);\r\n    soldTokens = soldTokens.add(tokens);\r\n    raisedETH = raisedETH.add(msg.value);\r\n    raisedUSD = raisedUSD.add(usd);\r\n\r\n    NewPurchase(msg.sender, tokens, usd, msg.value);\r\n    token.transfer(msg.sender, tokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Initialize distribution\r\n   * @param _cap uint256 The amount of tokens for distribution\r\n   */\r\n  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\r\n    require(!isActive);\r\n    require(token.balanceOf(this) == _cap);\r\n    require(_startTime > block.timestamp);\r\n\r\n    startTime = _startTime;\r\n    cap = _cap;\r\n    stageCap = cap / stages;\r\n    isActive = true;\r\n  }\r\n\r\n  /**\r\n   * @dev retrieve bonus from specified stage\r\n   * @param _stage uint16 The stage\r\n   */\r\n  function claimBonus(uint16 _stage) public {\r\n    require(!claimed[msg.sender][_stage]);\r\n    require(getStage() > _stage);\r\n\r\n    if (!burned[_stage]) {\r\n      token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1 ether)));\r\n      burned[_stage] = true;\r\n    }\r\n\r\n    uint256 tokens = computeAddressBonus(_stage);\r\n    token.transfer(msg.sender, tokens);\r\n    bonusClaimedTokens = bonusClaimedTokens.add(tokens);\r\n    claimed[msg.sender][_stage] = true;\r\n\r\n    NewBonusClaim(msg.sender, tokens);\r\n  }\r\n\r\n  /**\r\n   * @dev set an exchange rate in wei\r\n   * @param _rate uint256 The new exchange rate\r\n   */\r\n  function setWeiUsdRate(uint256 _rate) public onlyOwner {\r\n    require(_rate > 0);\r\n    weiUsdRate = _rate;\r\n  }\r\n\r\n  /**\r\n   * @dev retrieve ETH\r\n   * @param _amount uint256 The new exchange rate\r\n   * @param _address address The address to receive ETH\r\n   */\r\n  function forwardFunds(uint256 _amount, address _address) public onlyOwner {\r\n    _address.transfer(_amount);\r\n  }\r\n\r\n  /**\r\n   * @dev compute tokens given a USD value\r\n   * @param _usd uint256 Value in USD\r\n   */\r\n  function computeTokens(uint256 _usd) public view returns(uint256) {\r\n    return _usd.mul(1000000000000000000 ether).div(\r\n      soldTokens.mul(19800000000000000000).div(cap).add(200000000000000000)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev current stage\r\n   */\r\n  function getStage() public view returns(uint16) {\r\n    require(block.timestamp >= startTime);\r\n    return uint16(uint256(block.timestamp).sub(startTime).div(stageDuration));\r\n  }\r\n\r\n  /**\r\n   * @dev compute bonus (%) for a specified stage\r\n   * @param _stage uint16 The stage\r\n   */\r\n  function computeBonus(uint16 _stage) public view returns(uint256) {\r\n    return uint256(100000000000000000).sub(sold[_stage].mul(100000).div(441095890411));\r\n  }\r\n\r\n  /**\r\n   * @dev compute for a specified stage\r\n   * @param _stage uint16 The stage\r\n   */\r\n  function computeAddressBonus(uint16 _stage) public view returns(uint256) {\r\n    return contributions[msg.sender][_stage].mul(computeBonus(_stage)).div(1 ether);\r\n  }\r\n\r\n  //////////\r\n  // Safety Methods\r\n  //////////\r\n  /// @notice This method can be used by the controller to extract mistakenly\r\n  ///  sent tokens to this contract.\r\n  /// @param _token The address of the token contract that you want to recover\r\n  ///  set to 0 in case you want to extract ether.\r\n  function claimTokens(address _token) public onlyOwner {\r\n    // owner can claim any token but SDT\r\n    require(_token != address(token));\r\n    if (_token == 0x0) {\r\n      owner.transfer(this.balance);\r\n      return;\r\n    }\r\n\r\n    ERC20Basic erc20token = ERC20Basic(_token);\r\n    uint256 balance = erc20token.balanceOf(this);\r\n    erc20token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  event ClaimedTokens(\r\n    address indexed _token,\r\n    address indexed _controller,\r\n    uint256 _amount\r\n  );\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint16\"}],\"name\":\"computeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiUsdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setWeiUsdRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusClaimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint16\"}],\"name\":\"claimBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_usd\",\"type\":\"uint256\"}],\"name\":\"computeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint16\"}],\"name\":\"computeAddressBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stages\",\"type\":\"uint16\"},{\"name\":\"_stageDuration\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"NewPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sdtAmount\",\"type\":\"uint256\"}],\"name\":\"NewBonusClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Distribution","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000016d00000000000000000000000000000000000000000000000000000000000151800000000000000000000000003452282f3b9d93f1f79cc168631fe98bb9673f77","Library":"","SwarmSource":"bzzr://f31ec59b9d615f4a8d6432bcbc2a2bfdfe9b571c438343f75624497dfff53400"}]}