{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19; //\r\n\r\n// MobSquads.io\r\n\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract MobSquads is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new mobster comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"MobSquads\"; //\r\n  string public constant SYMBOL = \"MOBS\"; //\r\n\r\n  uint256 public precision = 1000000000000; //0.000001 Eth\r\n\r\n  uint256 public hitPrice =  0.005 ether;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from mobster IDs to the address that owns them. All villians have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public mobsterIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from mobsters to an address that has been approved to call\r\n  ///  transferFrom(). Each mobster can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public mobsterIndexToApproved;\r\n\r\n  // @dev A mapping from mobsters to the price of the token.\r\n  mapping (uint256 => uint256) private mobsterIndexToPrice;\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  // minimum tokens before sales\r\n  uint256 public minimumTokensBeforeSale = 13;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Mobster {\r\n    uint256 id; // needed for gnarly front end\r\n    string name;\r\n    uint256 boss; // which gang member of\r\n    uint256 state; // 0 = normal , 1 = dazed\r\n    uint256 dazedExipryTime; // if this mobster was disarmed, when does it expire\r\n    uint256 buyPrice; // the price at which this mobster was bossd\r\n  }\r\n\r\n  Mobster[] private mobsters;\r\n  uint256 public leadingGang;\r\n  uint256 public leadingHitCount;\r\n  uint256[] public gangHits;  // number of hits a gang has done\r\n  uint256 public currentHitTotal;\r\n  uint256 public lethalBonusAtHits = 200;\r\n\r\n\r\n  // @dev A mapping from mobsters to the price of the token.\r\n  mapping (uint256 => uint256) private bossIndexToGang;\r\n\r\n  mapping (address => uint256) public mobsterBalances;\r\n\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function MobSquads() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    leadingHitCount = 0;\r\n     gangHits.length++;\r\n  //  _createMobster(\"The Godfather\",address(this),2000000000000000,0);\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    mobsterIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new mobster with the given name.\r\n  function createMobster(string _name, uint256 _startPrice, uint256 _boss) public onlyCLevel {\r\n    _createMobster(_name, address(this), _startPrice,_boss);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific mobster.\r\n  /// @param _tokenId The tokenId of the mobster of interest.\r\n  function getMobster(uint256 _tokenId) public view returns (\r\n    uint256 id,\r\n    string name,\r\n    uint256 boss,\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    uint256 state,\r\n    uint256 dazedExipryTime,\r\n    uint256 buyPrice,\r\n    uint256 nextPrice\r\n  ) {\r\n    id = _tokenId;\r\n    Mobster storage mobster = mobsters[_tokenId];\r\n    name = mobster.name;\r\n    boss = mobster.boss;\r\n    sellingPrice =mobsterIndexToPrice[_tokenId];\r\n    owner = mobsterIndexToOwner[_tokenId];\r\n    state = mobster.state;\r\n    if (mobster.state==1 && now>mobster.dazedExipryTime){\r\n        state=0; // time expired so say they are armed\r\n    }\r\n    dazedExipryTime=mobster.dazedExipryTime;\r\n    buyPrice=mobster.buyPrice;\r\n    nextPrice=calculateNewPrice(_tokenId);\r\n  }\r\n\r\n\r\n  function setLethalBonusAtHits (uint256 _count) public onlyCLevel {\r\n        lethalBonusAtHits = _count;\r\n    }\r\n\r\n    function setHitPrice (uint256 _price) public onlyCLevel {\r\n          hitPrice = _price;\r\n      }\r\n\r\n  /// hit a mobster\r\n  function hitMobster(uint256 _victim  , uint256 _hitter) public payable returns (bool){\r\n    address mobsterOwner = mobsterIndexToOwner[_victim];\r\n    require(msg.sender != mobsterOwner); // it doesn't make sense, but hey\r\n    require(msg.sender==mobsterIndexToOwner[_hitter]); // they must be a hitter owner\r\n\r\n    // Godfather cannot be hit\r\n    if (msg.value>=hitPrice && _victim!=0 && _hitter!=0){\r\n        // zap mobster\r\n        mobsters[_victim].state=1;\r\n        mobsters[_victim].dazedExipryTime = now + (2 * 1 minutes);\r\n\r\n        uint256 gangNumber=SafeMath.div(mobsters[_hitter].boss,6)+1;\r\n\r\n        gangHits[gangNumber]++; // increase the hit count for this gang\r\n        currentHitTotal++;\r\n\r\n        if  (gangHits[gangNumber]>leadingHitCount){\r\n            leadingHitCount=gangHits[gangNumber];\r\n            leadingGang=gangNumber;\r\n        }\r\n\r\n      // Lethal Bonus Time\r\n     if (currentHitTotal==lethalBonusAtHits){\r\n       uint256 lethalBonus = SafeMath.mul(SafeMath.div(currentHitTotal * hitPrice,100),15); // 15% = 90% for mobsters/bosses\r\n\r\n         // each of the 6 members of the gang with the most hits receives 10% of the Hit Pool\r\n         uint256 winningMobsterIndex  = (6*(leadingGang-1))+1; // include the boss\r\n         for (uint256 x = winningMobsterIndex;x<6+winningMobsterIndex;x++){\r\n             if(mobsterIndexToOwner[x]!=0 && mobsterIndexToOwner[x]!=address(this)){\r\n                         mobsterBalances[ mobsterIndexToOwner[x]]+=lethalBonus; // available for withdrawal\r\n              }\r\n         } // end for this gang\r\n\r\n         currentHitTotal=0; // reset the counter\r\n\r\n         // need to reset the gangHits\r\n         for (uint256 y = 0 ; y<gangHits.length;y++){\r\n           gangHits[y]=0;\r\n           leadingHitCount=0;\r\n           leadingGang=0;\r\n         }\r\n\r\n     } // end if bonus time\r\n\r\n\r\n   } // end if this is a hit\r\n\r\n}\r\n\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = mobsterIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = mobsterIndexToOwner[_tokenId];\r\n\r\n    uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\r\n    // no sales until we reach a minimum amount\r\n    require(totalSupply()>=minimumTokensBeforeSale);\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != msg.sender);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(msg.sender));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n// Godfather when sold will raise by 17% (10% previous owner , 3.5% to contract, 3,5% to pool for mobsters)\r\n// Bosses when sold will raise by 17% (10% previous owner , 3.5% to contract , 3.5% to Godfather owner)\r\n// Mobsters when sold will raise by 22% (10% previous owner, 3.5% to Godfather, 3.5% to contract, 5% to their boss owner)\r\n    uint256 contractFee = roundIt(uint256(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice,1000),35))); // 3.5%\r\n\r\n     // godfather is flipped\r\n    if (_tokenId==0){\r\n        uint256 poolPayment = roundIt(uint256(SafeMath.div(contractFee,5))); // 20%\r\n        // each of the 5 members of the gang with the most hits receives 20% of the mobsterPool\r\n\r\n        //leadingGang 0,1,2,3,4 = gangs\r\n        // leaders are  always 1,7,13,19,25 ,,,, so mobsters are (6*leadingGang)+2; -->\r\n        uint256 winningMobsterIndex  = (6*(leadingGang-1))+2; // boss not included in mobster payments\r\n        for (uint256 x = winningMobsterIndex;x<5+winningMobsterIndex;x++){\r\n            if(mobsterIndexToOwner[x]!=0 &&  mobsterIndexToOwner[x]!=address(this)){\r\n                        mobsterBalances[ mobsterIndexToOwner[x]]+=poolPayment; // available for withdrawal\r\n             }\r\n        }\r\n\r\n        // need to reset the gangHits\r\n        for (uint256 y = 0 ; y<gangHits.length;y++){\r\n          gangHits[y]=0;\r\n          leadingHitCount=0;\r\n          leadingGang=0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // boss\r\n    uint256 godFatherFee = 0;\r\n    if (_tokenId!=0){\r\n        godFatherFee = contractFee; // 3.5%\r\n    }\r\n    // mobster\r\n    uint256 bossFee = 0;\r\n    if (mobsters[_tokenId].boss!=_tokenId && _tokenId!=0){\r\n        bossFee =  roundIt(uint256(SafeMath.div(mobsters[_tokenId].buyPrice,20))); // 5%\r\n    }\r\n    // pay the godfather if not owned by contract\r\n    if (godFatherFee>0 && mobsterIndexToOwner[0]!=address(this)){\r\n        mobsterIndexToOwner[0].transfer(godFatherFee);\r\n    }\r\n\r\n     // pay the bossFee if not owned by the contract\r\n    if (_tokenId!=0 && bossFee>0 && mobsterIndexToOwner[mobsters[_tokenId].boss]!=address(this)){\r\n        mobsterIndexToOwner[mobsters[_tokenId].boss].transfer(bossFee);\r\n    }\r\n\r\n     uint256 previousOwnerPayout = roundIt(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice, 100), 110)); // 110% to previous owner\r\n\r\n     mobsterIndexToPrice[_tokenId]  = calculateNewPrice(_tokenId);\r\n     mobsters[_tokenId].state=0;\r\n     mobsters[_tokenId].buyPrice=sellingPrice;\r\n\r\n    _transfer(oldOwner, msg.sender, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(previousOwnerPayout); // 110% to previous owner\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, mobsterIndexToPrice[_tokenId], oldOwner, msg.sender);\r\n\r\n    if(SafeMath.sub(msg.value, sellingPrice)>0){\r\n             msg.sender.transfer(SafeMath.sub(msg.value, sellingPrice)); // return any additional amount\r\n    }\r\n\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return mobsterIndexToPrice[_tokenId];\r\n  }\r\n\r\n  function nextPrice(uint256 _tokenId) public view returns (uint256 nPrice) {\r\n    return calculateNewPrice(_tokenId);\r\n  }\r\n\r\n\r\n    function claimMobsterFunds() public {\r\n      if (mobsterBalances[msg.sender]==0) revert();\r\n      uint256 amount = mobsterBalances[msg.sender];\r\n      if (amount>0){\r\n        mobsterBalances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n      }\r\n    }\r\n\r\n\r\n function calculateNewPrice(uint256 _tokenId) internal view returns (uint256 price){\r\n   uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\r\n   uint256 newPrice;\r\n\r\n   // level 0\r\n   // Godfather when sold will raise by 17%\r\n   if (_tokenId==0){\r\n         newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\r\n   }\r\n   // level 1\r\n    //Bosses when sold will raise by 17%\r\n  if (mobsters[_tokenId].boss==_tokenId && _tokenId!=0){\r\n        newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\r\n   }\r\n   // level 2\r\n   // Mobsters when sold will raise by 22%\r\n  if (mobsters[_tokenId].boss!=_tokenId){\r\n        newPrice= roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 122), 100));\r\n   }\r\n   return newPrice;\r\n }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = mobsterIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose tokens we are interested in.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalmobsters = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 mobsterId;\r\n      for (mobsterId = 0; mobsterId <= totalmobsters; mobsterId++) {\r\n        if (mobsterIndexToOwner[mobsterId] == _owner) {\r\n          result[resultIndex] = mobsterId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return mobsters.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return mobsterIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n\r\n  /// For creating mobsters\r\n  function _createMobster(string _name, address _owner, uint256 _price, uint256 _boss) private {\r\n\r\n    Mobster memory _mobster = Mobster({\r\n      name: _name,\r\n      boss: _boss,\r\n      state: 0,\r\n      dazedExipryTime: 0,\r\n      buyPrice: _price,\r\n      id: mobsters.length-1\r\n    });\r\n    uint256 newMobsterId = mobsters.push(_mobster) - 1;\r\n    mobsters[newMobsterId].id=newMobsterId;\r\n\r\n\r\n    if (newMobsterId % 6 ==0 || newMobsterId==1)\r\n    {\r\n        gangHits.length++;\r\n    }\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newMobsterId == uint256(uint32(newMobsterId)));\r\n\r\n    Birth(newMobsterId, _name, _owner);\r\n\r\n    mobsterIndexToPrice[newMobsterId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newMobsterId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == mobsterIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific mobster to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of mobsters is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    mobsterIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new mobsters _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete mobsterIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n    // utility to round to the game precision\r\n    function roundIt(uint256 amount) internal constant returns (uint256)\r\n    {\r\n        // round down to correct preicision\r\n        uint256 result = (amount/precision)*precision;\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setHitPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lethalBonusAtHits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentHitTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"nPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMobster\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"boss\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"dazedExipryTime\",\"type\":\"uint256\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leadingGang\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hitPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mobsterIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_victim\",\"type\":\"uint256\"},{\"name\":\"_hitter\",\"type\":\"uint256\"}],\"name\":\"hitMobster\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gangHits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTokensBeforeSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setLethalBonusAtHits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_boss\",\"type\":\"uint256\"}],\"name\":\"createMobster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mobsterBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mobsterIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMobsterFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leadingHitCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MobSquads","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bfbe563236e760656176ce189d63464a0bf826caaf1741d27ca90bb0bea6e292"}]}