{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n   function totalSupply() public view returns (uint256 total);\r\n   function balanceOf(address _owner) public view returns (uint balance);\r\n   function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n   function approve(address _to, uint256 _tokenId) external;\r\n   function transfer(address _to, uint256 _tokenId) external;\r\n   function tokensOfOwner(address _owner) public view returns (uint256[] ownerTokens);\r\n   event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n   event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract FMWorldAccessControl {\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n    \r\n    bool public pause = false;\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyC() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notPause() {\r\n        require(!pause);\r\n        _;\r\n    }\r\n    \r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n    \r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n\r\n    function setPause(bool _pause) external onlyC {\r\n        pause = _pause;\r\n    }\r\n    \r\n\r\n}\r\ncontract PlayerToken is ERC721, FMWorldAccessControl {\r\n\r\n    struct Player {\r\n        uint32 talent;\r\n        uint32 tactics;\r\n        uint32 dribbling;\r\n        uint32 kick;\r\n        uint32 speed;\r\n        uint32 pass;\r\n        uint32 selection;\r\n        uint256 position;\r\n    }\r\n\r\n    string public name = \"Football Manager Player\";\r\n    string public symbol = \"FMP\";\r\n\r\n    Player[] public players;\r\n\r\n    mapping (address => uint256) ownerPlayersCount;\r\n    mapping (uint256 => address) playerOwners;\r\n    mapping (uint256 => address) public playerApproved;\r\n    \r\n    function PlayerToken() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownerPlayersCount[_owner];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return players.length;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = playerOwners[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) external {\r\n        require(msg.sender == ownerOf(_tokenId));\r\n        playerApproved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownerPlayersCount[_to]++;\r\n        playerOwners[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownerPlayersCount[_from]--;\r\n            delete playerApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) external {\r\n        require(_to != address(0));\r\n        require(msg.sender == ownerOf(_tokenId));\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        require(_to != address(0));\r\n        require(playerApproved[_tokenId] == msg.sender);\r\n        require(_from == ownerOf(_tokenId));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n        uint256 playersCount = balanceOf(_owner);\r\n        if (playersCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](playersCount);\r\n            uint256 totalPlayers = totalSupply();\r\n            uint256 playerId;\r\n            uint256 resultIndex = 0;\r\n            for (playerId = 1; playerId <= totalPlayers; playerId++) {\r\n                if (playerOwners[playerId] == _owner) {\r\n                    result[resultIndex] = playerId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getPlayer(uint256 _playerId) public view returns(\r\n        uint32 talent,\r\n        uint32 tactics,\r\n        uint32 dribbling,\r\n        uint32 kick,\r\n        uint32 speed,\r\n        uint32 pass,\r\n        uint32 selection,\r\n        uint256 position\r\n    ) {\r\n        Player memory player = players[_playerId];\r\n        talent = player.talent;\r\n        tactics = player.tactics;\r\n        dribbling = player.dribbling;\r\n        kick = player.kick;\r\n        speed = player.speed;\r\n        pass = player.pass;\r\n        selection = player.selection;\r\n        position = player.position;\r\n    }\r\n\r\n    function getPosition(uint256 _playerId) public view returns(uint256) {\r\n        Player memory player = players[_playerId];\r\n        return player.position;\r\n    }\r\n\r\n    function createPlayer(\r\n            uint32[7] _skills,\r\n            uint256 _position,\r\n            address _owner\r\n    )\r\n        public onlyCOO\r\n        returns (uint256)\r\n    {\r\n        Player memory player = Player(_skills[0], _skills[1], _skills[2], _skills[3], _skills[4], _skills[5], _skills[6], _position);\r\n        uint256 newPlayerId = players.push(player) - 1;\r\n         _transfer(0, _owner, newPlayerId);\r\n        return newPlayerId;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"name\":\"talent\",\"type\":\"uint32\"},{\"name\":\"tactics\",\"type\":\"uint32\"},{\"name\":\"dribbling\",\"type\":\"uint32\"},{\"name\":\"kick\",\"type\":\"uint32\"},{\"name\":\"speed\",\"type\":\"uint32\"},{\"name\":\"pass\",\"type\":\"uint32\"},{\"name\":\"selection\",\"type\":\"uint32\"},{\"name\":\"position\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_skills\",\"type\":\"uint32[7]\"},{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"talent\",\"type\":\"uint32\"},{\"name\":\"tactics\",\"type\":\"uint32\"},{\"name\":\"dribbling\",\"type\":\"uint32\"},{\"name\":\"kick\",\"type\":\"uint32\"},{\"name\":\"speed\",\"type\":\"uint32\"},{\"name\":\"pass\",\"type\":\"uint32\"},{\"name\":\"selection\",\"type\":\"uint32\"},{\"name\":\"position\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PlayerToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2278f0d1297649ced3a63a4473509d1bc406566958d64e4c9ec504216554e9da"}]}