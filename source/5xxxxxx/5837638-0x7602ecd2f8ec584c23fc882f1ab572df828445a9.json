{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract DigixConstants {\r\n  /// general constants\r\n  uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\r\n\r\n  /// asset events\r\n  uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\r\n  uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\r\n  uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\r\n  uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\r\n  uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\r\n  uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\r\n  uint256 constant ASSET_EVENT_MINTED = 7;\r\n  uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\r\n  uint256 constant ASSET_EVENT_RECASTED = 9;\r\n  uint256 constant ASSET_EVENT_REDEEMED = 10;\r\n  uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\r\n  uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\r\n  uint256 constant ASSET_EVENT_REMINTED = 13;\r\n\r\n  /// roles\r\n  uint256 constant ROLE_ZERO_ANYONE = 0;\r\n  uint256 constant ROLE_ROOT = 1;\r\n  uint256 constant ROLE_VENDOR = 2;\r\n  uint256 constant ROLE_XFERAUTH = 3;\r\n  uint256 constant ROLE_POPADMIN = 4;\r\n  uint256 constant ROLE_CUSTODIAN = 5;\r\n  uint256 constant ROLE_AUDITOR = 6;\r\n  uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\r\n  uint256 constant ROLE_KYC_ADMIN = 8;\r\n  uint256 constant ROLE_FEES_ADMIN = 9;\r\n  uint256 constant ROLE_DOCS_UPLOADER = 10;\r\n  uint256 constant ROLE_KYC_RECASTER = 11;\r\n  uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\r\n\r\n  /// states\r\n  uint256 constant STATE_ZERO_UNDEFINED = 0;\r\n  uint256 constant STATE_CREATED = 1;\r\n  uint256 constant STATE_VENDOR_ORDER = 2;\r\n  uint256 constant STATE_TRANSFER = 3;\r\n  uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\r\n  uint256 constant STATE_MINTED = 5;\r\n  uint256 constant STATE_AUDIT_FAILURE = 6;\r\n  uint256 constant STATE_REPLACEMENT_ORDER = 7;\r\n  uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\r\n  uint256 constant STATE_RECASTED = 9;\r\n  uint256 constant STATE_REDEEMED = 10;\r\n  uint256 constant STATE_ADMIN_FAILURE = 11;\r\n\r\n  /// interactive contracts\r\n  bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = \"i:asset:explorer\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = \"i:directory\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = \"i:mp\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = \"i:mpadmin\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = \"i:popadmin\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = \"i:products\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN = \"i:token\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = \"i:bulk-wrapper\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = \"i:token:config\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = \"i:token:information\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = \"i:mp:information\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = \"i:identity\";\r\n\r\n  /// controller contracts\r\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS = \"c:asset\";\r\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = \"c:asset:recast\";\r\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = \"c:explorer\";\r\n  bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = \"c:directory\";\r\n  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = \"c:mp\";\r\n  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = \"c:mpadmin\";\r\n  bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = \"c:products\";\r\n\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = \"c:token:approval\";\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = \"c:token:config\";\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = \"c:token:info\";\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = \"c:token:transfer\";\r\n\r\n  bytes32 constant CONTRACT_CONTROLLER_JOB_ID = \"c:jobid\";\r\n  bytes32 constant CONTRACT_CONTROLLER_IDENTITY = \"c:identity\";\r\n\r\n  /// storage contracts\r\n  bytes32 constant CONTRACT_STORAGE_ASSETS = \"s:asset\";\r\n  bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = \"s:asset:events\";\r\n  bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = \"s:directory\";\r\n  bytes32 constant CONTRACT_STORAGE_MARKETPLACE = \"s:mp\";\r\n  bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = \"s:products\";\r\n  bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = \"s:goldtoken\";\r\n  bytes32 constant CONTRACT_STORAGE_JOB_ID = \"s:jobid\";\r\n  bytes32 constant CONTRACT_STORAGE_IDENTITY = \"s:identity\";\r\n\r\n  /// service contracts\r\n  bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = \"sv:tdemurrage\";\r\n  bytes32 constant CONTRACT_SERVICE_MARKETPLACE = \"sv:mp\";\r\n  bytes32 constant CONTRACT_SERVICE_DIRECTORY = \"sv:directory\";\r\n\r\n  /// fees distributors\r\n  bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = \"fees:distributor:demurrage\";\r\n  bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = \"fees:distributor:recast\";\r\n  bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = \"fees:distributor:transfer\";\r\n}\r\n\r\ncontract ContractResolver {\r\n  address public owner;\r\n  bool public locked;\r\n  function init_register_contract(bytes32 _key, address _contract_address) public returns (bool _success);\r\n  function unregister_contract(bytes32 _key) public returns (bool _success);\r\n  function get_contract(bytes32 _key) public constant returns (address _contract);\r\n}\r\n\r\ncontract ResolverClient {\r\n\r\n  /// The address of the resolver contract for this project\r\n  address public resolver;\r\n  /// The key to identify this contract\r\n  bytes32 public key;\r\n\r\n  /// Make our own address available to us as a constant\r\n  address public CONTRACT_ADDRESS;\r\n\r\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\r\n  /// @param _contract The resolver key\r\n  modifier if_sender_is(bytes32 _contract) {\r\n    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\r\n    _;\r\n  }\r\n\r\n  /// Function modifier to check resolver's locking status.\r\n  modifier unless_resolver_is_locked() {\r\n    require(is_locked() == false);\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize new contract\r\n  /// @param _key the resolver key for this contract\r\n  /// @return _success if the initialization is successful\r\n  function init(bytes32 _key, address _resolver)\r\n           internal\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(_resolver).locked();\r\n    if (_is_locked == false) {\r\n      CONTRACT_ADDRESS = address(this);\r\n      resolver = _resolver;\r\n      key = _key;\r\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\r\n      _success = true;\r\n    }  else {\r\n      _success = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Destroy the contract and unregister self from the ContractResolver\r\n  /// @dev Can only be called by the owner of ContractResolver\r\n  function destroy()\r\n           public\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(resolver).locked();\r\n    require(!_is_locked);\r\n\r\n    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\r\n    require(msg.sender == _owner_of_contract_resolver);\r\n\r\n    _success = ContractResolver(resolver).unregister_contract(key);\r\n    require(_success);\r\n\r\n    selfdestruct(_owner_of_contract_resolver);\r\n  }\r\n\r\n  /// @dev Check if resolver is locked\r\n  /// @return _locked if the resolver is currently locked\r\n  function is_locked()\r\n           private\r\n           constant\r\n           returns (bool _locked)\r\n  {\r\n    _locked = ContractResolver(resolver).locked();\r\n  }\r\n\r\n  /// @dev Get the address of a contract\r\n  /// @param _key the resolver key to look up\r\n  /// @return _contract the address of the contract\r\n  function get_contract(bytes32 _key)\r\n           public\r\n           constant\r\n           returns (address _contract)\r\n  {\r\n    _contract = ContractResolver(resolver).get_contract(_key);\r\n  }\r\n}\r\n\r\ncontract Constants {\r\n  address constant NULL_ADDRESS = address(0x0);\r\n  uint256 constant ZERO = uint256(0);\r\n  bytes32 constant EMPTY = bytes32(0x0);\r\n}\r\n\r\ncontract ACConditions is Constants {\r\n\r\n  modifier not_null_address(address _item) {\r\n    require(_item != NULL_ADDRESS);\r\n    _;\r\n  }\r\n\r\n  modifier if_null_address(address _item) {\r\n    require(_item == NULL_ADDRESS);\r\n    _;\r\n  }\r\n\r\n  modifier not_null_uint(uint256 _item) {\r\n    require(_item != ZERO);\r\n    _;\r\n  }\r\n\r\n  modifier if_null_uint(uint256 _item) {\r\n    require(_item == ZERO);\r\n    _;\r\n  }\r\n\r\n  modifier not_empty_bytes(bytes32 _item) {\r\n    require(_item != EMPTY);\r\n    _;\r\n  }\r\n\r\n  modifier if_empty_bytes(bytes32 _item) {\r\n    require(_item == EMPTY);\r\n    _;\r\n  }\r\n\r\n  modifier not_null_string(string _item) {\r\n    bytes memory _i = bytes(_item);\r\n    require(_i.length > 0);\r\n    _;\r\n  }\r\n\r\n  modifier if_null_string(string _item) {\r\n    bytes memory _i = bytes(_item);\r\n    require(_i.length == 0);\r\n    _;\r\n  }\r\n\r\n  modifier require_gas(uint256 _requiredgas) {\r\n    require(msg.gas  >= (_requiredgas - 22000));\r\n    _;\r\n  }\r\n\r\n  function is_contract(address _contract)\r\n           public\r\n           constant\r\n           returns (bool _is_contract)\r\n  {\r\n    uint32 _code_length;\r\n\r\n    assembly {\r\n      _code_length := extcodesize(_contract)\r\n    }\r\n\r\n    if(_code_length > 1) {\r\n      _is_contract = true;\r\n    } else {\r\n      _is_contract = false;\r\n    }\r\n  }\r\n\r\n  modifier if_contract(address _contract) {\r\n    require(is_contract(_contract) == true);\r\n    _;\r\n  }\r\n\r\n  modifier unless_contract(address _contract) {\r\n    require(is_contract(_contract) == false);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract MarketplaceStorage {\r\n}\r\n\r\ncontract MarketplaceControllerCommon {\r\n}\r\n\r\ncontract MarketplaceController {\r\n}\r\n\r\ncontract MarketplaceAdminController {\r\n}\r\n\r\ncontract MarketplaceCommon is ResolverClient, ACConditions, DigixConstants {\r\n\r\n  function marketplace_admin_controller()\r\n           internal\r\n           constant\r\n           returns (MarketplaceAdminController _contract)\r\n  {\r\n    _contract = MarketplaceAdminController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE_ADMIN));\r\n  }\r\n\r\n  function marketplace_storage()\r\n           internal\r\n           constant\r\n           returns (MarketplaceStorage _contract)\r\n  {\r\n    _contract = MarketplaceStorage(get_contract(CONTRACT_STORAGE_MARKETPLACE));\r\n  }\r\n\r\n  function marketplace_controller()\r\n           internal\r\n           constant\r\n           returns (MarketplaceController _contract)\r\n  {\r\n    _contract = MarketplaceController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\r\n  }\r\n}\r\n\r\ncontract DigixConstantsExtras {\r\n    /// storage contracts\r\n    bytes32 constant CONTRACT_STORAGE_MARKETPLACE_EXTRAS = \"s:mp:extras\";\r\n    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN_EXTRAS = \"c:mpadmin:extras\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_V2 = \"i:mp:v2\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN_EXTRAS = \"i:mpadmin:extras\";\r\n}\r\n\r\ncontract MarketplaceControllerV2 {\r\n  function purchase_with_eth(\r\n    uint256 _wei_sent,\r\n    address _buyer,\r\n    uint256 _block_number,\r\n    uint256 _nonce,\r\n    uint256 _wei_per_dgx_mg,\r\n    address _signer,\r\n    bytes _signature\r\n  ) payable public returns (bool _success, uint256 _purchased_amount);\r\n\r\n  function purchase_with_dai(\r\n    uint256 _dai_sent,\r\n    address _buyer,\r\n    uint256 _block_number,\r\n    uint256 _nonce,\r\n    uint256 _dai_per_ton,\r\n    address _signer,\r\n    bytes _signature\r\n  ) public returns (bool _success, uint256 _purchased_amount);\r\n}\r\n\r\n/// @title Digix's Marketplace\r\n/// @author Digix Holdings Pte Ltd\r\n/// @notice This contract is for KYC-approved users to purchase DGX using ETH\r\ncontract MarketplaceV2 is MarketplaceCommon, DigixConstantsExtras {\r\n\r\n  function MarketplaceV2(address _resolver) public\r\n  {\r\n    require(init(CONTRACT_INTERACTIVE_MARKETPLACE_V2, _resolver));\r\n  }\r\n\r\n  function marketplace_controller_v2()\r\n           internal\r\n           constant\r\n           returns (MarketplaceControllerV2 _contract)\r\n  {\r\n    _contract = MarketplaceControllerV2(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\r\n  }\r\n\r\n  /// @dev purchase DGX gold using ETH\r\n  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\r\n  /// @param _nonce Nonce from DTPO\r\n  /// @param _wei_per_dgx_mg Price in wei for one milligram of DGX\r\n  /// @param _signer Address of the DTPO signer\r\n  /// @param _signature Signature of the payload\r\n  /// @return {\r\n  ///   \"_success\": \"returns true if operation is successful\",\r\n  ///   \"_purchased_amount\": \"DGX nanograms received\"\r\n  /// }\r\n  function purchaseWithEth(uint256 _block_number, uint256 _nonce, uint256 _wei_per_dgx_mg, address _signer, bytes _signature)\r\n           payable\r\n           public\r\n           returns (bool _success, uint256 _purchased_amount)\r\n  {\r\n    address _sender = msg.sender;\r\n\r\n    (_success, _purchased_amount) =\r\n      marketplace_controller_v2().purchase_with_eth.value(msg.value).gas(600000)(msg.value, _sender, _block_number,\r\n                                                                             _nonce, _wei_per_dgx_mg, _signer, _signature);\r\n    require(_success);\r\n  }\r\n\r\n  /// @dev purchase DGX gold using DAI\r\n  /// @param _dai_sent amount of DAI sent\r\n  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\r\n  /// @param _nonce Nonce from DTPO\r\n  /// @param _dai_per_ton Despite the variable name, this is actually the price in DAI for 1000 tonnes of DGXs\r\n  /// @param _signer Address of the DTPO signer\r\n  /// @param _signature Signature of the payload\r\n  /// @return {\r\n  ///   \"_success\": \"returns true if operation is successful\",\r\n  ///   \"_purchased_amount\": \"DGX nanograms received\"\r\n  /// }\r\n  function purchaseWithDai(uint256 _dai_sent, uint256 _block_number, uint256 _nonce, uint256 _dai_per_ton, address _signer, bytes _signature)\r\n           public\r\n           returns (bool _success, uint256 _purchased_amount)\r\n  {\r\n    address _sender = msg.sender;\r\n\r\n    (_success, _purchased_amount) =\r\n      marketplace_controller_v2().purchase_with_dai.gas(800000)(_dai_sent, _sender, _block_number,\r\n                                                                             _nonce, _dai_per_ton, _signer, _signature);\r\n    require(_success);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get_contract\",\"outputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"is_contract\",\"outputs\":[{\"name\":\"_is_contract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block_number\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_wei_per_dgx_mg\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"purchaseWithEth\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_purchased_amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dai_sent\",\"type\":\"uint256\"},{\"name\":\"_block_number\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_dai_per_ton\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"purchaseWithDai\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_purchased_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MarketplaceV2","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db2ddb220b8a55e0e4412130e6ae74d136c04ba2","Library":"","SwarmSource":"bzzr://0f12a98496226f41f085ef9d82a7c016ec91ad3016ca4185f976c978be06f255"}]}