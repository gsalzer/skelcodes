{"status":"1","message":"OK","result":[{"SourceCode":"// https://github.com/librasai/SaiContest_Gaia\r\npragma solidity ^0.4.21;\r\n\r\ncontract SaiContest_Gaia {\r\n\taddress public owner;\r\n\tuint public start;      // starting date\r\n\tuint public last_roll;  // starting date for week round (7 days)\r\n\tuint public last_jack;   // starting date for jackpot round (30 days)\r\n\taddress public week_winner; // current winner-of-week (wins the one has sent a biggest value in one transaction)\r\n\taddress public jack_winner; // current winner-of-jackpot (the one with most transactions wins)\r\n\tuint public week_max;   // biggest value has been sent in a current week round\r\n\tuint public jack_max;   // most number of transactions was made by one sender in a current jackpot round\r\n\tuint public jack_pot;   // size of current jackpot\r\n\tuint public jack_nonce; // current nonce (number of jackpot round)\r\n\tstruct JVal {\r\n        \tuint nonce;\r\n        \tuint64 count;\r\n\t}\r\n\tmapping (address => JVal) public jacks; // storing current jackpot participants (in this jackpot round) and their transactions count\r\n\r\n\tuint public constant min_payment= 1 finney; // size of minimal payment can be accepted\r\n\t\r\n\tfunction SaiContest_Gaia() public {\r\n\t\towner = msg.sender;\t\t\r\n\t\tstart = now;\r\n\t\tlast_roll = now;\r\n\t\tlast_jack = now;\r\n\t\tjack_nonce = 1;\r\n\t}\r\n\r\n\tfunction kill(address addr) public { \r\n\t    if (msg.sender == owner && now > start + 1 years){\r\n\t        selfdestruct(addr);\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction getBalance() public view returns (uint bal) {\r\n\t    bal = address(this).balance;\r\n\t}\r\n\r\n\tfunction () public payable{\r\n\t    Paid(msg.value);\r\n\t}\r\n\t\r\n\tfunction Paid(uint value) private {\r\n\t    uint WeekPay;\r\n\t    uint JackPay;\r\n\t    uint oPay;\r\n\t    uint CurBal;\r\n\t    uint JackPot;\r\n\t    uint CurNonce;\r\n\t    address WeekWinner;\r\n\t    address JackWinner;\r\n\t    uint64 JackValCount;\r\n\t    uint JackValNonce;\r\n\t    \r\n\t    require(value >= min_payment);\r\n\t    oPay = value * 5 / 100; // 5% to owner\r\n\t    CurBal = address(this).balance - oPay;\r\n\t    JackPot = jack_pot;\r\n\r\n\t    if (now > last_roll + 7 days) {\r\n\t        WeekPay = CurBal - JackPot;\r\n\t        WeekWinner = week_winner;\r\n\t        last_roll = now;\r\n\t        week_max = value;\r\n\t        week_winner = msg.sender;\r\n\t    } else {\r\n\t        if (value > week_max) {\r\n    \t        week_winner = msg.sender;\r\n\t            week_max = value;\r\n\t        }\r\n\t    }\r\n\t    if (now > last_jack + 30 days) {\r\n\t        JackWinner = jack_winner;\r\n\t        if (JackPot > CurBal) {\r\n\t            JackPay = CurBal;\r\n\t        } else {\r\n\t            JackPay = JackPot;\r\n\t        }\r\n    \t    jack_pot = value * 10 / 100; // 10% to jackpot\r\n\t        jack_winner = msg.sender;\r\n\t        jack_max = 1;\r\n\t        CurNonce = jack_nonce + 1; \r\n\t        jacks[msg.sender].nonce = CurNonce;\r\n\t        jacks[msg.sender].count = 1;\r\n\t        jack_nonce = CurNonce;\r\n\t    } else {\r\n    \t    jack_pot = JackPot + value * 10 / 100; // 10% to jackpot\r\n\t        CurNonce = jack_nonce; \r\n\t        JackValNonce = jacks[msg.sender].nonce;\r\n\t        JackValCount = jacks[msg.sender].count;\r\n\t        if (JackValNonce < CurNonce) {\r\n\t            jacks[msg.sender].nonce = CurNonce;\r\n\t            jacks[msg.sender].count = 1;\r\n    \t        if (jack_max == 0) {\r\n        \t        jack_winner = msg.sender;\r\n    \t            jack_max = 1;\r\n    \t        }\r\n\t        } else {\r\n\t            JackValCount = JackValCount + 1;\r\n\t            jacks[msg.sender].count = JackValCount;\r\n    \t        if (JackValCount > jack_max) {\r\n        \t        jack_winner = msg.sender;\r\n    \t            jack_max = JackValCount;\r\n    \t        }\r\n\t        }\r\n\t        \r\n\t    }\r\n\r\n\t    owner.transfer(oPay);\r\n\t    if (WeekPay > 0) {\r\n\t        WeekWinner.transfer(WeekPay);\r\n\t    }\r\n\t    if (JackPay > 0) {\r\n\t        JackWinner.transfer(JackPay);\r\n\t    }\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"week_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_jack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jack_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_roll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jacks\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"week_winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jack_nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jack_winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jack_pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_payment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SaiContest_Gaia","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb178ef54316419db6c1af0afaf6cd4f37b90063a09e1155d33582dc7a740d2c"}]}