{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract ThinkCoin is MintableToken {\r\n  string public name = \"ThinkCoin\";\r\n  string public symbol = \"TCO\";\r\n  uint8 public decimals = 18;\r\n  uint256 public cap;\r\n\r\n  function ThinkCoin(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // override\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n  // override\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(mintingFinished == true);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  // override\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(mintingFinished == true);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function() public payable {\r\n    revert();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LockingContract is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event NotedTokens(address indexed _beneficiary, uint256 _tokenAmount);\r\n  event ReleasedTokens(address indexed _beneficiary);\r\n  event ReducedLockingTime(uint256 _newUnlockTime);\r\n\r\n  ERC20 public tokenContract;\r\n  mapping(address => uint256) public tokens;\r\n  uint256 public totalTokens;\r\n  uint256 public unlockTime;\r\n\r\n  function isLocked() public view returns(bool) {\r\n    return now < unlockTime;\r\n  }\r\n\r\n  modifier onlyWhenUnlocked() {\r\n    require(!isLocked());\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenLocked() {\r\n    require(isLocked());\r\n    _;\r\n  }\r\n\r\n  function LockingContract(ERC20 _tokenContract, uint256 _lockingDuration) public {\r\n    require(_lockingDuration > 0);\r\n    unlockTime = now.add(_lockingDuration);\r\n    tokenContract = _tokenContract;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return tokens[_owner];\r\n  }\r\n\r\n  // Should only be done from another contract.\r\n  // To ensure that the LockingContract can release all noted tokens later,\r\n  // one should mint/transfer tokens to the LockingContract's account prior to noting\r\n  function noteTokens(address _beneficiary, uint256 _tokenAmount) external onlyOwner onlyWhenLocked {\r\n    uint256 tokenBalance = tokenContract.balanceOf(this);\r\n    require(tokenBalance == totalTokens.add(_tokenAmount));\r\n\r\n    tokens[_beneficiary] = tokens[_beneficiary].add(_tokenAmount);\r\n    totalTokens = totalTokens.add(_tokenAmount);\r\n    NotedTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function releaseTokens(address _beneficiary) public onlyWhenUnlocked {\r\n    uint256 amount = tokens[_beneficiary];\r\n    tokens[_beneficiary] = 0;\r\n    require(tokenContract.transfer(_beneficiary, amount)); \r\n    totalTokens = totalTokens.sub(amount);\r\n    ReleasedTokens(_beneficiary);\r\n  }\r\n\r\n  function reduceLockingTime(uint256 _newUnlockTime) public onlyOwner onlyWhenLocked {\r\n    require(_newUnlockTime >= now);\r\n    require(_newUnlockTime < unlockTime);\r\n    unlockTime = _newUnlockTime;\r\n    ReducedLockingTime(_newUnlockTime);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Crowdsale is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  event MintProposed(address indexed _beneficiary, uint256 _tokenAmount);\r\n  event MintLockedProposed(address indexed _beneficiary, uint256 _tokenAmount);\r\n  event MintApproved(address indexed _beneficiary, uint256 _tokenAmount);\r\n  event MintLockedApproved(address indexed _beneficiary, uint256 _tokenAmount);\r\n  event MintedAllocation(address indexed _beneficiary, uint256 _tokenAmount);\r\n  event ProposerChanged(address _newProposer);\r\n  event ApproverChanged(address _newApprover);\r\n\r\n  ThinkCoin public token;\r\n  LockingContract public lockingContract;\r\n  address public proposer; // proposes mintages of tokens\r\n  address public approver; // approves proposed mintages\r\n  mapping(address => uint256) public mintProposals;\r\n  mapping(address => uint256) public mintLockedProposals;\r\n  uint256 public proposedTotal = 0;\r\n  uint256 public saleCap;\r\n  uint256 public saleStartTime;\r\n  uint256 public saleEndTime;\r\n\r\n  function Crowdsale(ThinkCoin _token,\r\n                     uint256 _lockingPeriod,\r\n                     address _proposer,\r\n                     address _approver,\r\n                     uint256 _saleCap,\r\n                     uint256 _saleStartTime,\r\n                     uint256 _saleEndTime\r\n                     ) public {\r\n    require(_saleCap > 0);\r\n    require(_saleStartTime < _saleEndTime);\r\n    require(_saleEndTime > now);\r\n    require(_lockingPeriod > 0);\r\n    require(_proposer != _approver);\r\n    require(_saleStartTime >= now);\r\n    require(_saleCap <= _token.cap());\r\n    require(address(_token) != 0x0);\r\n\r\n    token = _token;\r\n    lockingContract = new LockingContract(token, _lockingPeriod);    \r\n    proposer = _proposer;\r\n    approver = _approver;\r\n    saleCap = _saleCap;\r\n    saleStartTime = _saleStartTime;\r\n    saleEndTime = _saleEndTime;\r\n  }\r\n\r\n  modifier saleStarted() {\r\n    require(now >= saleStartTime);\r\n    _;\r\n  }\r\n\r\n  modifier saleNotEnded() {\r\n    require(now < saleEndTime);\r\n    _;\r\n  }\r\n\r\n  modifier saleEnded() {\r\n    require(now >= saleEndTime);\r\n    _;\r\n  }\r\n\r\n  modifier onlyProposer() {\r\n    require(msg.sender == proposer);\r\n    _;\r\n  }\r\n\r\n  modifier onlyApprover() {\r\n    require(msg.sender == approver);\r\n    _;\r\n  }\r\n\r\n  function exceedsSaleCap(uint256 _additionalAmount) internal view returns(bool) {\r\n    uint256 totalSupply = token.totalSupply();\r\n    return totalSupply.add(_additionalAmount) > saleCap;\r\n  }\r\n\r\n  modifier notExceedingSaleCap(uint256 _amount) {\r\n    require(!exceedsSaleCap(_amount));\r\n    _;\r\n  }\r\n\r\n  function proposeMint(address _beneficiary, uint256 _tokenAmount) public onlyProposer saleStarted saleNotEnded\r\n                                                                          notExceedingSaleCap(proposedTotal.add(_tokenAmount)) {\r\n    require(_tokenAmount > 0);\r\n    require(mintProposals[_beneficiary] == 0);\r\n    proposedTotal = proposedTotal.add(_tokenAmount);\r\n    mintProposals[_beneficiary] = _tokenAmount;\r\n    MintProposed(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function proposeMintLocked(address _beneficiary, uint256 _tokenAmount) public onlyProposer saleStarted saleNotEnded\r\n                                                                         notExceedingSaleCap(proposedTotal.add(_tokenAmount)) {\r\n    require(_tokenAmount > 0);\r\n    require(mintLockedProposals[_beneficiary] == 0);\r\n    proposedTotal = proposedTotal.add(_tokenAmount);\r\n    mintLockedProposals[_beneficiary] = _tokenAmount;\r\n    MintLockedProposed(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function clearProposal(address _beneficiary) public onlyApprover {\r\n    proposedTotal = proposedTotal.sub(mintProposals[_beneficiary]);\r\n    mintProposals[_beneficiary] = 0;\r\n  }\r\n\r\n  function clearProposalLocked(address _beneficiary) public onlyApprover {\r\n    proposedTotal = proposedTotal.sub(mintLockedProposals[_beneficiary]);\r\n    mintLockedProposals[_beneficiary] = 0;\r\n  }\r\n\r\n  function approveMint(address _beneficiary, uint256 _tokenAmount) public onlyApprover saleStarted\r\n                                                                   notExceedingSaleCap(_tokenAmount) {\r\n    require(_tokenAmount > 0);\r\n    require(mintProposals[_beneficiary] == _tokenAmount);\r\n    mintProposals[_beneficiary] = 0;\r\n    token.mint(_beneficiary, _tokenAmount);\r\n    MintApproved(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function approveMintLocked(address _beneficiary, uint256 _tokenAmount) public onlyApprover saleStarted\r\n                                                                         notExceedingSaleCap(_tokenAmount) {\r\n    require(_tokenAmount > 0);\r\n    require(mintLockedProposals[_beneficiary] == _tokenAmount);\r\n    mintLockedProposals[_beneficiary] = 0;\r\n    token.mint(lockingContract, _tokenAmount);\r\n    lockingContract.noteTokens(_beneficiary, _tokenAmount);\r\n    MintLockedApproved(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function mintAllocation(address _beneficiary, uint256 _tokenAmount) public onlyOwner saleEnded {\r\n    require(_tokenAmount > 0);\r\n    token.mint(_beneficiary, _tokenAmount);\r\n    MintedAllocation(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function finishMinting() public onlyOwner saleEnded {\r\n    require(proposedTotal == 0);\r\n    token.finishMinting();\r\n    transferTokenOwnership();\r\n  }\r\n\r\n  function transferTokenOwnership() public onlyOwner saleEnded {\r\n    token.transferOwnership(msg.sender);\r\n  }\r\n\r\n  function changeProposer(address _newProposer) public onlyOwner {\r\n    require(_newProposer != approver);\r\n    proposer = _newProposer;\r\n    ProposerChanged(_newProposer);\r\n  }\r\n\r\n  function changeApprover(address _newApprover) public onlyOwner {\r\n    require(_newApprover != proposer);\r\n    approver = _newApprover;\r\n    ApproverChanged(_newApprover);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approveMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"proposeMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"proposeMintLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintLockedProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newProposer\",\"type\":\"address\"}],\"name\":\"changeProposer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"clearProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newApprover\",\"type\":\"address\"}],\"name\":\"changeApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"clearProposalLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approveMintLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_lockingPeriod\",\"type\":\"uint256\"},{\"name\":\"_proposer\",\"type\":\"address\"},{\"name\":\"_approver\",\"type\":\"address\"},{\"name\":\"_saleCap\",\"type\":\"uint256\"},{\"name\":\"_saleStartTime\",\"type\":\"uint256\"},{\"name\":\"_saleEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MintProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MintLockedProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MintApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MintLockedApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MintedAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newProposer\",\"type\":\"address\"}],\"name\":\"ProposerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newApprover\",\"type\":\"address\"}],\"name\":\"ApproverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006288014d6ba425d71f5fdc1dbfb01378241d78db000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e5c9b9e42270aad0345a39e153c47393f498e000000000000000000000000000000000000000000f8277896582678ac000000000000000000000000000000000000000000000000000000000000005ac2c400000000000000000000000000000000000000000000000000000000005ae70540","Library":"","SwarmSource":"bzzr://86c227a241f7efe7e9c47dc0f9ef6c6d35399592b49a3ba89339e38585ac67b8"}]}