{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract QuickFlip {\r\n  using SafeMath for uint256;\r\n\r\n  address public owner;\r\n  address private cardOwner;\r\n  uint256 public cardPrice;\r\n  uint256 public startTime = 1520899200;\r\n\r\n  uint256 public constant PRIMARY_START_PRICE = 0.05 ether;\r\n  uint256 public constant STARTING_PRICE = 0.005 ether;\r\n\r\n  Card[] public cards;\r\n\r\n  struct Card {\r\n    address owner;\r\n    uint256 price;\r\n    uint256 purchaseRound;\r\n  }\r\n\r\n  function QuickFlip() public {\r\n    owner = msg.sender;\r\n    cards.push(Card({ owner: owner, price: PRIMARY_START_PRICE, purchaseRound: 0 }));\r\n    cards.push(Card({ owner: owner, price: STARTING_PRICE, purchaseRound: 0 }));\r\n    cards.push(Card({ owner: owner, price: STARTING_PRICE, purchaseRound: 0 }));\r\n    cards.push(Card({ owner: owner, price: STARTING_PRICE, purchaseRound: 0 }));\r\n  }\r\n\r\n  function buy(uint256 _cardId) public payable {\r\n    require(_cardId >= 0 && _cardId <= 3);\r\n\r\n    uint256 price;\r\n    address oldOwner;\r\n\r\n    (price, oldOwner) = getCard(_cardId);\r\n\r\n    require(msg.value >= price);\r\n\r\n    address newOwner = msg.sender;\r\n    uint256 purchaseExcess = msg.value - price;\r\n\r\n    Card storage card = cards[_cardId];\r\n    card.owner = msg.sender;\r\n    card.price = price.mul(13).div(10); // increase by 30%\r\n    card.purchaseRound = currentRound();\r\n\r\n    uint256 fee = price.mul(5).div(100);\r\n    uint256 profit = price.sub(fee);\r\n\r\n    cards[0].owner.transfer(fee);\r\n    oldOwner.transfer(profit);\r\n    newOwner.transfer(purchaseExcess);\r\n  }\r\n\r\n  function currentRound() public view returns (uint256) {\r\n    return now.sub(startTime).div(1 days);\r\n  }\r\n\r\n  function getCard(uint256 _cardId) public view returns (uint256 _price, address _owner) {\r\n    Card memory card = cards[_cardId];\r\n\r\n    if (currentRound() > card.purchaseRound) {\r\n      if (_cardId == 0) {\r\n        _price = PRIMARY_START_PRICE;\r\n        _owner = owner;\r\n      } else {\r\n        _price = STARTING_PRICE;\r\n        _owner = owner;\r\n      }\r\n    } else {\r\n      _price = card.price;\r\n      _owner = card.owner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRIMARY_START_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"purchaseRound\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"QuickFlip","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0f6a9b4ef8bb97fc29cb77831ec8ccbf7019fd9dcec1a2a7a8884f6d250abcc"}]}