{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// Developed by Phenom.Team <info@phenom.team>\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    function balanceOf(address _owner) view returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) view returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = tx.origin;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'ownership is required');\r\n        _;\r\n    }\r\n}\r\n\r\ncontract BaseTokenVesting is Ownable() {\r\n    using SafeMath for uint;\r\n\r\n    address public beneficiary;\r\n    ERC20 public token;\r\n\r\n    bool public vestingHasStarted;\r\n    uint public start;\r\n    uint public cliff;\r\n    uint public vestingPeriod;\r\n\r\n    uint public released;\r\n\r\n    event Released(uint _amount);\r\n\r\n    constructor(\r\n\t\taddress _benificiary,\r\n\t\tuint _cliff,\r\n\t\tuint _vestingPeriod,\r\n\t\taddress _token\r\n\t) internal \r\n\t{\r\n        require(_benificiary != address(0), 'can not send to zero-address');\r\n\r\n        beneficiary = _benificiary;\r\n        cliff = _cliff;\r\n        vestingPeriod = _vestingPeriod;\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    function startVesting() public onlyOwner {\r\n        vestingHasStarted = true;\r\n        start = now;\r\n        cliff = cliff.add(start);\r\n    }\r\n\r\n    function sendTokens(address _to, uint _amount) public onlyOwner {\r\n        require(vestingHasStarted == false, 'send tokens only if vesting has not been started');\r\n        require(token.transfer(_to, _amount), 'token.transfer has failed');\r\n    }\r\n\r\n    function release() public;\r\n\r\n    function releasableAmount() public view returns (uint _amount);\r\n\r\n    function vestedAmount() public view returns (uint _amount);\r\n}\r\n\r\ncontract TokenVestingWithConstantPercent is BaseTokenVesting {\r\n\r\n    uint public periodPercent;\r\n\r\n    constructor(\r\n        address _benificiary,\r\n        uint _cliff,\r\n        uint _vestingPeriod,\r\n        address _tokenAddress,\r\n        uint _periodPercent\r\n    ) \r\n        BaseTokenVesting(_benificiary, _cliff, _vestingPeriod, _tokenAddress)\r\n        public \r\n    {\r\n        periodPercent = _periodPercent;\r\n    }\r\n\r\n    function release() public {\r\n        require(vestingHasStarted, 'vesting has not started');\r\n        uint unreleased = releasableAmount();\r\n\r\n        require(unreleased > 0, 'released amount has to be greter than zero');\r\n        require(token.transfer(beneficiary, unreleased), 'revert on transfer failure');\r\n        released = released.add(unreleased);\r\n        emit Released(unreleased);\r\n    }\r\n\r\n\r\n    function releasableAmount() public view returns (uint _amount) {\r\n        _amount = vestedAmount().sub(released);\r\n    }\r\n\r\n    function vestedAmount() public view returns (uint _amount) {\r\n        uint currentBalance = token.balanceOf(this);\r\n        uint totalBalance = currentBalance.add(released);\r\n\r\n        if (now < cliff || !vestingHasStarted) {\r\n            _amount = 0;\r\n        }\r\n        else if (now.sub(cliff).div(vestingPeriod).mul(periodPercent) > 100) {\r\n            _amount = totalBalance;\r\n        }\r\n        else {\r\n            _amount = totalBalance.mul(now.sub(cliff).div(vestingPeriod).mul(periodPercent)).div(100);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\ncontract TokenVestingWithFloatingPercent is BaseTokenVesting {\r\n\t\r\n    uint[] public periodPercents;\r\n\r\n    constructor(\r\n        address _benificiary,\r\n        uint _cliff,\r\n        uint _vestingPeriod,\r\n        address _tokenAddress,\r\n        uint[] _periodPercents\r\n    ) \r\n        BaseTokenVesting(_benificiary, _cliff, _vestingPeriod, _tokenAddress)\r\n        public \r\n    {\r\n        uint sum = 0;\r\n        for (uint i = 0; i < _periodPercents.length; i++) {\r\n            sum = sum.add(_periodPercents[i]);\r\n        }\r\n        require(sum == 100, 'percentage sum must be equal to 100');\r\n\r\n        periodPercents = _periodPercents;\r\n    }\r\n\r\n    function release() public {\r\n        require(vestingHasStarted, 'vesting has not started');\r\n        uint unreleased = releasableAmount();\r\n\r\n        require(unreleased > 0, 'released amount has to be greter than zero');\r\n        require(token.transfer(beneficiary, unreleased), 'revert on transfer failure');\r\n        released = released.add(unreleased);\r\n        emit Released(unreleased);\t\r\n    }\r\n\r\n    function releasableAmount() public view returns (uint _amount) {\r\n        _amount = vestedAmount().sub(released);\r\n    }\r\n\r\n    function vestedAmount() public view returns (uint _amount) {\r\n        uint currentBalance = token.balanceOf(this);\r\n        uint totalBalance = currentBalance.add(released);\r\n\r\n        if (now < cliff || !vestingHasStarted) {\r\n            _amount = 0;\r\n        }\r\n        else {\r\n            uint _periodPercentsIndex = now.sub(cliff).div(vestingPeriod);\r\n            if (_periodPercentsIndex > periodPercents.length.sub(1)) {\r\n                _amount = totalBalance;\r\n            }\r\n            else {\r\n                if (_periodPercentsIndex >= 1) {\r\n                    uint totalPercent = 0;\r\n                    for (uint i = 0; i < _periodPercentsIndex - 1; i++) {\r\n                        totalPercent = totalPercent + periodPercents[i];\r\n                    }\r\n                    _amount = totalBalance.mul(totalPercent).div(100);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract TokenVestingFactory is Ownable() {\r\n    event VestingContractCreated(address indexed _creator, address indexed _contract);\r\n\r\n    mapping(address => address) public investorToVesting;\r\n\r\n    function createVestingContractWithConstantPercent(\r\n        address _benificiary,\r\n        uint _cliff,\r\n        uint _vestingPeriod,\r\n        address _tokenAddress,\r\n        uint _periodPercent\r\n\t)\r\n\tpublic\r\n    onlyOwner\r\n\treturns (address vestingContract)\r\n\t{\t\t\r\n        vestingContract = new TokenVestingWithConstantPercent(\r\n\t\t\t_benificiary,\r\n\t\t\t_cliff,\r\n\t\t\t_vestingPeriod,\r\n\t\t\t_tokenAddress,\r\n\t\t\t_periodPercent\r\n        );\r\n        investorToVesting[_benificiary] = vestingContract;\r\n        emit VestingContractCreated(tx.origin, vestingContract);\r\n    }\r\n\r\n    function createVestingContractWithFloatingPercent(\r\n        address _benificiary,\r\n        uint _cliff,\r\n        uint _vestingPeriod,\r\n        address _tokenAddress,\r\n        uint[] _periodPercents\t\r\n\t)\r\n\tpublic\r\n    onlyOwner\r\n\treturns (address vestingContract) \r\n\t{\r\n        vestingContract = new TokenVestingWithFloatingPercent(\r\n            _benificiary, \r\n            _cliff,\r\n            _vestingPeriod,\r\n            _tokenAddress,\r\n            _periodPercents\r\n        );\r\n        investorToVesting[_benificiary] = vestingContract;\r\n        emit VestingContractCreated(tx.origin, vestingContract);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorToVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_benificiary\",\"type\":\"address\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_periodPercents\",\"type\":\"uint256[]\"}],\"name\":\"createVestingContractWithFloatingPercent\",\"outputs\":[{\"name\":\"vestingContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_benificiary\",\"type\":\"address\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_periodPercent\",\"type\":\"uint256\"}],\"name\":\"createVestingContractWithConstantPercent\",\"outputs\":[{\"name\":\"vestingContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"VestingContractCreated\",\"type\":\"event\"}]","ContractName":"TokenVestingFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://740f513c3f5b06e28c7988f229958c4bf819619845f06c967bc735fb767d0ca2"}]}