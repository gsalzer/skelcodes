{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract FHFTokenInterface {\r\n    /* Public parameters of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name = 'Forever Has Fallen';\r\n    string public symbol = 'FC';\r\n    uint8 public decimals = 18;\r\n\r\n    function approveCrowdsale(address _crowdsaleAddress) external;\r\n    function balanceOf(address _address) public constant returns (uint256 balance);\r\n    function vestedBalanceOf(address _address) public constant returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _currentValue, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract CrowdsaleParameters {\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // Configuration Independent Parameters\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    struct AddressTokenAllocation {\r\n        address addr;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 public maximumICOCap = 350e6;\r\n\r\n    // ICO period timestamps:\r\n    // 1525777200 = May 8, 2018. 11am GMT\r\n    // 1529406000 = June 19, 2018. 11am GMT\r\n    uint256 public generalSaleStartDate = 1525777200;\r\n    uint256 public generalSaleEndDate = 1529406000;\r\n\r\n    // Vesting\r\n    // 1592564400 = June 19, 2020. 11am GMT\r\n    uint32 internal vestingTeam = 1592564400;\r\n    // 1529406000 = Bounty to ico end date - June 19, 2018. 11am GMT\r\n    uint32 internal vestingBounty = 1529406000;\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // Production Config\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // QA Config\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    AddressTokenAllocation internal generalSaleWallet = AddressTokenAllocation(0x265Fb686cdd2f9a853c519592078cC4d1718C15a, 350e6);\r\n    AddressTokenAllocation internal communityReserve =  AddressTokenAllocation(0x76d472C73681E3DF8a7fB3ca79E5f8915f9C5bA5, 450e6);\r\n    AddressTokenAllocation internal team =              AddressTokenAllocation(0x05d46150ceDF59ED60a86d5623baf522E0EB46a2, 170e6);\r\n    AddressTokenAllocation internal advisors =          AddressTokenAllocation(0x3d5fa25a3C0EB68690075eD810A10170e441413e, 48e5);\r\n    AddressTokenAllocation internal bounty =            AddressTokenAllocation(0xAc2099D2705434f75adA370420A8Dd397Bf7CCA1, 176e5);\r\n    AddressTokenAllocation internal administrative =    AddressTokenAllocation(0x438aB07D5EC30Dd9B0F370e0FE0455F93C95002e, 76e5);\r\n\r\n    address internal playersReserve = 0x8A40B0Cf87DaF12C689ADB5C74a1B2f23B3a33e1;\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    *  Constructor\r\n    *\r\n    *  Sets contract owner to address of constructor caller\r\n    */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    *  Change Owner\r\n    *\r\n    *  Changes ownership of this contract. Only owner can call this method.\r\n    *\r\n    * @param newOwner - new owner's address\r\n    */\r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        require(newOwner != owner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract FHFTokenCrowdsale is Owned, CrowdsaleParameters {\r\n    /* Token and records */\r\n    FHFTokenInterface private token;\r\n    address private saleWalletAddress;\r\n    uint private tokenMultiplier = 10;\r\n    uint public totalCollected = 0;\r\n    uint public saleGoal;\r\n    bool public goalReached = false;\r\n\r\n    /* Events */\r\n    event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther);\r\n    event FundTransfer(address indexed from, address indexed to, uint indexed amount);\r\n\r\n    /**\r\n    * Constructor\r\n    *\r\n    * @param _tokenAddress - address of token (deployed before this contract)\r\n    */\r\n    function FHFTokenCrowdsale(address _tokenAddress) public {\r\n        token = FHFTokenInterface(_tokenAddress);\r\n        tokenMultiplier = tokenMultiplier ** token.decimals();\r\n        saleWalletAddress = CrowdsaleParameters.generalSaleWallet.addr;\r\n\r\n        // Initialize sale goal\r\n        saleGoal = CrowdsaleParameters.generalSaleWallet.amount;\r\n    }\r\n\r\n    /**\r\n    * Is sale active\r\n    *\r\n    * @return active - True, if sale is active\r\n    */\r\n    function isICOActive() public constant returns (bool active) {\r\n        active = ((generalSaleStartDate <= now) && (now < generalSaleEndDate) && (!goalReached));\r\n        return active;\r\n    }\r\n\r\n    /**\r\n    *  Process received payment\r\n    *\r\n    *  Determine the integer number of tokens that was purchased considering current\r\n    *  stage, tier bonus, and remaining amount of tokens in the sale wallet.\r\n    *  Transfer purchased tokens to backerAddress and return unused portion of\r\n    *  ether (change)\r\n    *\r\n    * @param backerAddress - address that ether was sent from\r\n    * @param amount - amount of Wei received\r\n    */\r\n    function processPayment(address backerAddress, uint amount) internal {\r\n        require(isICOActive());\r\n\r\n        // Before Metropolis update require will not refund gas, but\r\n        // for some reason require statement around msg.value always throws\r\n        assert(msg.value > 0 finney);\r\n\r\n        // Tell everyone about the transfer\r\n        FundTransfer(backerAddress, address(this), amount);\r\n\r\n        // Calculate tokens per ETH for this tier\r\n        uint tokensPerEth = 10000;\r\n\r\n        // Calculate token amount that is purchased,\r\n        uint tokenAmount = amount * tokensPerEth;\r\n\r\n        // Check that stage wallet has enough tokens. If not, sell the rest and\r\n        // return change.\r\n        uint remainingTokenBalance = token.balanceOf(saleWalletAddress);\r\n        if (remainingTokenBalance <= tokenAmount) {\r\n            tokenAmount = remainingTokenBalance;\r\n            goalReached = true;\r\n        }\r\n\r\n        // Calculate Wei amount that was received in this transaction\r\n        // adjusted to rounding and remaining token amount\r\n        uint acceptedAmount = tokenAmount / tokensPerEth;\r\n\r\n        // Update crowdsale performance\r\n        totalCollected += acceptedAmount;\r\n\r\n        // Transfer tokens to baker and return ETH change\r\n        token.transferFrom(saleWalletAddress, backerAddress, tokenAmount);\r\n\r\n        TokenSale(backerAddress, amount, tokenAmount, tokensPerEth);\r\n\r\n        // Return change (in Wei)\r\n        uint change = amount - acceptedAmount;\r\n        if (change > 0) {\r\n            if (backerAddress.send(change)) {\r\n                FundTransfer(address(this), backerAddress, change);\r\n            }\r\n            else revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n    *  Transfer ETH amount from contract to owner's address.\r\n    *  Can only be used if ICO is closed\r\n    *\r\n    * @param amount - ETH amount to transfer in Wei\r\n    */\r\n    function safeWithdrawal(uint amount) external onlyOwner {\r\n        require(this.balance >= amount);\r\n        require(!isICOActive());\r\n\r\n        if (owner.send(amount)) {\r\n            FundTransfer(address(this), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    *  Default method\r\n    *\r\n    *  Processes all ETH that it receives and credits FHF tokens to sender\r\n    *  according to current stage bonus\r\n    */\r\n    function () external payable {\r\n        processPayment(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * Close main sale and move unsold tokens to playersReserve wallet\r\n    */\r\n    function closeMainSaleICO() external onlyOwner {\r\n        require(!isICOActive());\r\n        require(generalSaleStartDate < now);\r\n\r\n        var amountToMove = token.balanceOf(generalSaleWallet.addr);\r\n        token.transferFrom(generalSaleWallet.addr, playersReserve, amountToMove);\r\n        generalSaleEndDate = now;\r\n    }\r\n\r\n    /**\r\n    *  Kill method\r\n    *\r\n    *  Double-checks that unsold general sale tokens were moved off general sale wallet and\r\n    *  destructs this contract\r\n    */\r\n    function kill() external onlyOwner {\r\n        require(!isICOActive());\r\n        if (now < generalSaleStartDate) {\r\n            selfdestruct(owner);\r\n        } else if (token.balanceOf(generalSaleWallet.addr) == 0) {\r\n            FundTransfer(address(this), msg.sender, this.balance);\r\n            selfdestruct(owner);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"generalSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumICOCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeMainSaleICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generalSaleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensPerEther\",\"type\":\"uint256\"}],\"name\":\"TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FHFTokenCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fdb1d263112b0a668dce5748d961b4851cfca8ee","Library":"","SwarmSource":"bzzr://09e526066b08b0e412fce111b6cd2905a5eb247466ba3b3c5ec982023cc747f3"}]}