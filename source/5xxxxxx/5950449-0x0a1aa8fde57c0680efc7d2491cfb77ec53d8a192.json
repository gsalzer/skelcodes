{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) revert();\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x < y) revert();\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) revert();\r\n        return x * y;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Owned{\r\n  address public owner;\r\n  event TransferOwnerShip(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner{\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnerShip(address newOwner) onlyOwner public{\r\n      require(newOwner != address(0));\r\n      emit TransferOwnerShip(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Transferable\r\n * @dev The Transferable contract provides basic authorization control\r\n */\r\ncontract Transferable is Owned {\r\n  bool  public transferable = true;\r\n  event EnableTransfer();\r\n  event DisableTransfer();\r\n\r\n  modifier whenTransferable(){\r\n    require(transferable || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier whenNotTransferable() {\r\n      require(!transferable);\r\n      \r\n      _;\r\n  }\r\n\r\n  function enableTransfer() onlyOwner  public {\r\n    transferable = true;\r\n    emit EnableTransfer();\r\n  } \r\n\r\n  function disableTransfer() onlyOwner public\r\n  {\r\n      transferable = false;\r\n      emit DisableTransfer();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic{\r\n  function totalSupply()              public view returns (uint256);\r\n  function balanceOf(address _owner)  public view returns (uint256 balance);\r\n  function transfer(address _to,uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from,address _to,uint256 _value) public returns (bool success);\r\n  function approve(address _spender,uint _value) public returns (bool success);\r\n  function allowance(address _owner,address _spender) public view returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from,address indexed _to,uint256 _value);\r\n  event Approval(address indexed _owner,address indexed _spender,uint256 _value);\r\n}\r\n\r\n/**\r\n * @title ERC20 Standard Token\r\n * @dev Basic version of StandardToken, with transferable.\r\n */\r\ncontract ERC20StandardToken is ERC20Basic,Transferable{\r\n    using SafeMath for uint256;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping (address => uint256) public freezeOf;\r\n    \r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n      return balanceOf[_owner];\r\n    }\r\n\r\n   function _transfer(address _from,address _to, uint256 _value) internal {\r\n    require(_to != 0x0);\r\n    uint256 previousBalances = balanceOf[_from].safeAdd(balanceOf[_to]);\r\n    balanceOf[_from] = balanceOf[_from].safeSub(_value);\r\n    balanceOf[_to]   = balanceOf[_to].safeAdd(_value);\r\n\r\n    emit Transfer(_from,_to,_value);\r\n    assert(balanceOf[_from].safeAdd(balanceOf[_to]) == previousBalances);\r\n   }\r\n\r\n  /* Send coins */\r\n  function transfer(address _to, uint256 _value) public whenTransferable returns (bool success){\r\n    _transfer(msg.sender,_to,_value);\r\n    return true;\r\n  }\r\n\r\n   /* A contract attempts to get the coins */\r\n  function transferFrom(address _from,address _to,uint256 _value) public whenTransferable returns (bool success){\r\n    require(allowance[_from][msg.sender] >= _value);\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].safeSub(_value);\r\n    \r\n    _transfer(_from,_to,_value);\r\n    return true;  \r\n  }\r\n\r\n  /* Allow another contract to spend some tokens in your behalf */\r\n  function approve(address _spender,uint256 _value) public whenTransferable returns (bool success){\r\n    require(_value > 0);\r\n    require(_spender != 0x0);\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender,_spender,_value);\r\n    return true;\r\n  }\r\n  \r\n  function allowance(address _owner, address _spender) public whenTransferable view returns (uint256 remaining) {\r\n      return allowance[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract MyToken is ERC20StandardToken{\r\n  \r\n  string  public name;\r\n  string  public symbol;\r\n  uint8   public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed _from, uint256 _value);\r\n\r\n  /* This notifies clients about the amount frozen */\r\n  event Freeze(address indexed from, uint256 value);\r\n\r\n  /* This notifies clients about the amount unfrozen */\r\n  event Unfreeze(address indexed from, uint256 value);\r\n  \r\n  /* Initializes contract with initial supply tokens to the creator of the contract */  \r\n  constructor(string tokenName,string tokenSymbol,uint8 decimalUints,uint256 initialSupply) public{\r\n    totalSupply           = initialSupply * 10 ** uint256(decimalUints);  // Set total supply\r\n    balanceOf[msg.sender] = totalSupply;                                 // Give the creator all initial tokens\r\n    name                  = tokenName;                                  // Set the name for display purposes\r\n    symbol                = tokenSymbol;                               // Set the symbol for display purposes\r\n    decimals              = decimalUints;                             // Amount of decimals for display purposes\r\n  }\r\n\r\n  /* This return total supply token */\r\n  function totalSupply() public view returns (uint256){\r\n     return totalSupply;\r\n  }\r\n \r\n /* Burn token */\r\n  function burn(uint256 _value) onlyOwner public returns (bool success){\r\n    require(balanceOf[msg.sender] >= _value);\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].safeSub(_value);\r\n    totalSupply = totalSupply.safeSub(_value);\r\n    emit Burn(msg.sender,_value);\r\n    return true;\r\n  }\r\n\r\n /* Burn token from one address */\r\n  function burnFrom(address _from ,uint256 _value) onlyOwner public returns (bool success){\r\n    require(balanceOf[_from] >= _value);\r\n    balanceOf[_from] = balanceOf[_from].safeSub(_value);\r\n    totalSupply = totalSupply.safeSub(_value);\r\n    emit Burn(_from,_value);\r\n    return true;\r\n  }\r\n\r\n /* Mint token to one address */\r\n  function mintToken(address _to,uint256 mintedAmount) onlyOwner public returns(bool success){\r\n    require(_to != 0x0);\r\n    balanceOf[_to] = balanceOf[_to].safeAdd(mintedAmount);\r\n    totalSupply = totalSupply.safeAdd(mintedAmount);\r\n    emit Transfer(0,address(this),mintedAmount);\r\n    emit Transfer(address(this),_to,mintedAmount);\r\n    return true;\r\n  }\r\n  \r\n  /* Fress token from one address */\r\n  function freeze(address _from,uint256 _value) onlyOwner public returns (bool success) {\r\n    require(_value > 0);\r\n    require(balanceOf[_from] >= _value);\r\n    balanceOf[_from] = balanceOf[_from].safeSub( _value);                      \r\n    freezeOf[_from] = freezeOf[_from].safeAdd(_value);               \r\n    emit Freeze(_from, _value);\r\n    return true;\r\n  }\r\n  \r\n  /* UnFress token from one address */\r\n  function unfreeze(address _from,uint256 _value) onlyOwner public returns (bool success) {\r\n    require(_value > 0);\r\n    require(freezeOf[_from] >= _value);\r\n    freezeOf[_from] = freezeOf[_from].safeSub(_value);                      \r\n    balanceOf[_from] = balanceOf[_from].safeAdd(_value);\r\n    emit Unfreeze(_from, _value);\r\n    return true;\r\n  }\r\n\r\n  /* This notifies clients about the contract self destruct */\r\n  event LogSelfDestruct(address sender, uint amount);\r\n  /* contract self destruct */\r\n  function killThisContract() public onlyOwner {\r\n      emit LogSelfDestruct(msg.sender, address(this).balance);\r\n      selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killThisContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimalUints\",\"type\":\"uint8\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSelfDestruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerShip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000074b56546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b56430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://edfc0bc2fe1afdefe436af95288b49023d687a0b6cfb3ba76240abd7ed3c04bd"}]}