{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c>= a);\r\n        return c;\r\n    }\r\n}\r\ncontract ERC721 {\r\n    function approve( address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 supply);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n}\r\n\r\ncontract AthleteToken is ERC721 {\r\n    string public constant NAME = \"CryptoFantasy\";\r\n    string public constant SYMBOL = \"Athlete\";\r\n    uint256 private constant initPrice = 0.001 ether;\r\n    event Birth(uint256 tokenId, address owner);\r\n    event TokenSold(uint256 tokenId, uint256 sellPrice, address sellOwner, address buyOwner, string athleteId);\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    mapping (uint256 => address) public athleteIndexToOwner;\r\n\r\n    mapping (address => uint256) private ownershipTokenCount;\r\n\r\n    \r\n    mapping (uint256 => address) public athleteIndexToApproved;\r\n    mapping (uint256 => uint256) private athleteIndexToPrice;\r\n    mapping (uint256 => uint256) private athleteIndexToActualFee;\r\n    mapping (uint256 => uint256) private athleteIndexToSiteFee;\r\n    mapping (uint256 => address) private athleteIndexToActualWalletId;\r\n    mapping (uint256 => string) private athleteIndexToAthleteID;\r\n    mapping (uint256 => bool) private athleteIndexToAthleteVerificationState;\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n    uint256 public promoCreatedCount;\r\n\r\n    struct Athlete {\r\n        string  athleteId;\r\n        address actualAddress;\r\n        uint256 actualFee;\r\n        uint256 siteFee;\r\n        uint256 sellPrice;\r\n        bool    isVerified;\r\n    }\r\n    Athlete[] private athletes;\r\n    mapping (uint256 => Athlete) private athleteIndexToAthlete;\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n    modifier onlyCLevel() {\r\n        require(msg.sender == ceoAddress || msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    function AthleteToken() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    function approve( address _to, uint256 _tokenId ) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        athleteIndexToApproved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function createOfAthleteCard(string _athleteId, address _actualAddress, uint256 _actualFee, uint256 _siteFee, uint256 _sellPrice) public onlyCOO returns (uint256 _newAthleteId) {\r\n        \r\n        address _athleteOwner = address(this);\r\n        bool _verified = true;\r\n        if ( _sellPrice <= 0 ) {\r\n            _sellPrice = initPrice;\r\n        }\r\n        if ( _actualAddress == address(0) ){\r\n            _actualAddress = ceoAddress;\r\n            _verified = false;\r\n        }\r\n        \r\n        Athlete memory _athlete = Athlete({ athleteId: _athleteId, actualAddress: _actualAddress, actualFee: _actualFee,  siteFee: _siteFee, sellPrice: _sellPrice, isVerified: _verified });\r\n        uint256 newAthleteId = athletes.push(_athlete) - 1;\r\n        \r\n        require(newAthleteId == uint256(uint32(newAthleteId)));\r\n        Birth(newAthleteId, _athleteOwner);\r\n        \r\n        athleteIndexToPrice[newAthleteId] = _sellPrice;\r\n        athleteIndexToActualFee[newAthleteId] = _actualFee;\r\n        athleteIndexToSiteFee[newAthleteId] = _siteFee;\r\n        athleteIndexToActualWalletId[newAthleteId] = _actualAddress;\r\n        athleteIndexToAthleteID[newAthleteId] = _athleteId;\r\n        athleteIndexToAthlete[newAthleteId] = _athlete;\r\n        athleteIndexToAthleteVerificationState[newAthleteId] = _verified;\r\n        \r\n        _transfer(address(0), _athleteOwner, newAthleteId);\r\n        return newAthleteId;\r\n    }\r\n    \r\n    function changeOriginWalletIdForAthlete( uint256 _tokenId, address _oringinWalletId ) public onlyCOO returns( string athleteId, address actualAddress, uint256 actualFee, uint256 siteFee, uint256 sellPrice, address owner) {\r\n        athleteIndexToActualWalletId[_tokenId] = _oringinWalletId;\r\n        Athlete storage athlete = athletes[_tokenId];\r\n        athlete.actualAddress = _oringinWalletId;\r\n        athleteId     = athlete.athleteId;\r\n        actualAddress = athlete.actualAddress;\r\n        actualFee     = athlete.actualFee;\r\n        siteFee       = athlete.siteFee;\r\n        sellPrice     = priceOf(_tokenId);\r\n        owner         = ownerOf(_tokenId);\r\n    }\r\n    \r\n    function changeSellPriceForAthlete( uint256 _tokenId, uint256 _newSellPrice ) public onlyCOO returns( string athleteId, address actualAddress, uint256 actualFee, uint256 siteFee, uint256 sellPrice, address owner) {\r\n        athleteIndexToPrice[_tokenId] = _newSellPrice;\r\n        Athlete storage athlete = athletes[_tokenId];\r\n        athlete.sellPrice = _newSellPrice;\r\n        athleteId     = athlete.athleteId;\r\n        actualAddress = athlete.actualAddress;\r\n        actualFee     = athlete.actualFee;\r\n        siteFee       = athlete.siteFee;\r\n        sellPrice     = athlete.sellPrice;\r\n        owner         = ownerOf(_tokenId);\r\n    }\r\n    \r\n    function createContractOfAthlete(string _athleteId, address _actualAddress, uint256 _actualFee, uint256 _siteFee, uint256 _sellPrice) public onlyCOO{\r\n        _createOfAthlete(address(this), _athleteId, _actualAddress, _actualFee, _siteFee, _sellPrice);\r\n    }\r\n\r\n    function getAthlete(uint256 _tokenId) public view returns ( string athleteId, address actualAddress, uint256 actualFee, uint256 siteFee, uint256 sellPrice, address owner) {\r\n        Athlete storage athlete = athletes[_tokenId];\r\n        athleteId     = athlete.athleteId;\r\n        actualAddress = athlete.actualAddress;\r\n        actualFee     = athlete.actualFee;\r\n        siteFee       = athlete.siteFee;\r\n        sellPrice     = priceOf(_tokenId);\r\n        owner         = ownerOf(_tokenId);\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = athleteIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n    function payout(address _to) public onlyCLevel {\r\n        _payout(_to);\r\n    }\r\n    function purchase(uint256 _tokenId) public payable {\r\n        address sellOwner = athleteIndexToOwner[_tokenId];\r\n        address buyOwner = msg.sender;\r\n        uint256 sellPrice = msg.value;\r\n\r\n        //make sure token owner is not sending to self\r\n        require(sellOwner != buyOwner);\r\n        //safely check to prevent against an unexpected 0x0 default\r\n        require(_addressNotNull(buyOwner));\r\n        //make sure sent amount is greater than or equal to the sellPrice\r\n        require(msg.value >= sellPrice);\r\n        uint256 actualFee = uint256(SafeMath.div(SafeMath.mul(sellPrice, athleteIndexToActualFee[_tokenId]), 100)); // calculate actual fee\r\n        uint256 siteFee   = uint256(SafeMath.div(SafeMath.mul(sellPrice, athleteIndexToSiteFee[_tokenId]), 100));   // calculate site fee\r\n        uint256 payment   = uint256(SafeMath.sub(sellPrice, SafeMath.add(actualFee, siteFee)));   //payment for seller\r\n\r\n        _transfer(sellOwner, buyOwner, _tokenId);\r\n        //Pay previous tokenOwner if owner is not contract\r\n        if ( sellOwner != address(this) ) {\r\n            sellOwner.transfer(payment); // (1-(actual_fee+site_fee))*sellPrice\r\n        }\r\n        TokenSold(_tokenId, sellPrice, sellOwner, buyOwner, athletes[_tokenId].athleteId);\r\n        address actualWallet = athleteIndexToActualWalletId[_tokenId];\r\n        actualWallet.transfer(actualFee);\r\n            \r\n        ceoAddress.transfer(siteFee);\r\n\r\n    }\r\n\r\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n        return athleteIndexToPrice[_tokenId];\r\n    }\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n        cooAddress = _newCOO;\r\n    }\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = athleteIndexToOwner[_tokenId];\r\n        \r\n        require(_addressNotNull(newOwner));\r\n        require(_approved(newOwner, _tokenId));\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    function tokenOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if ( tokenCount == 0 ) {\r\n            return new uint256[](0);\r\n        }\r\n        else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalAthletes = totalSupply();\r\n            uint256 resultIndex = 0;\r\n            uint256 athleteId;\r\n\r\n            for(athleteId = 0; athleteId <= totalAthletes; athleteId++) {\r\n                if (athleteIndexToOwner[athleteId] == _owner) {\r\n                    result[resultIndex] = athleteId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return athletes.length;\r\n    }\r\n\r\n    function transfer( address _to, uint256 _tokenId ) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom( address _from, address _to, uint256 _tokenId ) public {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n        return athleteIndexToApproved[_tokenId] == _to;\r\n    }\r\n\r\n    function _createOfAthlete(address _athleteOwner, string _athleteId, address _actualAddress, uint256 _actualFee, uint256 _siteFee, uint256 _sellPrice) private {\r\n        \r\n        bool _verified = true;\r\n        // Check sell price and origin wallet id\r\n        if ( _sellPrice <= 0 ) {\r\n            _sellPrice = initPrice;\r\n        }\r\n        if ( _actualAddress == address(0) ){\r\n            _actualAddress = ceoAddress;\r\n            _verified = false;\r\n        }\r\n        \r\n        Athlete memory _athlete = Athlete({ athleteId: _athleteId, actualAddress: _actualAddress, actualFee: _actualFee,  siteFee: _siteFee, sellPrice: _sellPrice, isVerified: _verified });\r\n        uint256 newAthleteId = athletes.push(_athlete) - 1;\r\n        \r\n        require(newAthleteId == uint256(uint32(newAthleteId)));\r\n        Birth(newAthleteId, _athleteOwner);\r\n        \r\n        athleteIndexToPrice[newAthleteId] = _sellPrice;\r\n        athleteIndexToActualFee[newAthleteId] = _actualFee;\r\n        athleteIndexToSiteFee[newAthleteId] = _siteFee;\r\n        athleteIndexToActualWalletId[newAthleteId] = _actualAddress;\r\n        athleteIndexToAthleteID[newAthleteId] = _athleteId;\r\n        athleteIndexToAthlete[newAthleteId] = _athlete;\r\n        athleteIndexToAthleteVerificationState[newAthleteId] = _verified;\r\n        \r\n        _transfer(address(0), _athleteOwner, newAthleteId);\r\n\r\n    }\r\n\r\n    function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n        return claimant == athleteIndexToOwner[_tokenId];\r\n    }\r\n    function _payout(address _to) private {\r\n        if (_to == address(0)) {\r\n            ceoAddress.transfer(this.balance);\r\n        }\r\n        else {\r\n            _to.transfer(this.balance);\r\n        }\r\n    }\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        ownershipTokenCount[_to]++;\r\n        athleteIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete athleteIndexToApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"athleteIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_athleteId\",\"type\":\"string\"},{\"name\":\"_actualAddress\",\"type\":\"address\"},{\"name\":\"_actualFee\",\"type\":\"uint256\"},{\"name\":\"_siteFee\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"createContractOfAthlete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newSellPrice\",\"type\":\"uint256\"}],\"name\":\"changeSellPriceForAthlete\",\"outputs\":[{\"name\":\"athleteId\",\"type\":\"string\"},{\"name\":\"actualAddress\",\"type\":\"address\"},{\"name\":\"actualFee\",\"type\":\"uint256\"},{\"name\":\"siteFee\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAthlete\",\"outputs\":[{\"name\":\"athleteId\",\"type\":\"string\"},{\"name\":\"actualAddress\",\"type\":\"address\"},{\"name\":\"actualFee\",\"type\":\"uint256\"},{\"name\":\"siteFee\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_athleteId\",\"type\":\"string\"},{\"name\":\"_actualAddress\",\"type\":\"address\"},{\"name\":\"_actualFee\",\"type\":\"uint256\"},{\"name\":\"_siteFee\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"createOfAthleteCard\",\"outputs\":[{\"name\":\"_newAthleteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_oringinWalletId\",\"type\":\"address\"}],\"name\":\"changeOriginWalletIdForAthlete\",\"outputs\":[{\"name\":\"athleteId\",\"type\":\"string\"},{\"name\":\"actualAddress\",\"type\":\"address\"},{\"name\":\"actualFee\",\"type\":\"uint256\"},{\"name\":\"siteFee\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"athleteIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"athleteId\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AthleteToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15e6437dd4bc9095014d22c2a32aac432741f8e5428e31bb1a8d945958928f0c"}]}