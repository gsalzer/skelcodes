{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address _who) public constant returns (uint);\r\n  function allowance(address _owner, address _spender) public constant returns (uint);\r\n\r\n  function transfer(address _to, uint _value) public returns (bool ok);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\r\n  function approve(address _spender, uint _value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    // OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract DSTToken is ERC20, Ownable, SafeMath {\r\n\r\n    // Token related informations\r\n    string public constant name = \"Decentralize Silver Token\";\r\n    string public constant symbol = \"DST\";\r\n    uint256 public constant decimals = 18; // decimal places\r\n\r\n    uint256 public tokensPerEther = 1500;\r\n\r\n    // MultiSig Wallet Address\r\n    address public DSTMultisig;\r\n\r\n    // Wallet L,M,N and O address\r\n    address dstWalletLMNO;\r\n\r\n    bool public startStop = false;\r\n\r\n    mapping (address => uint256) public walletA;\r\n    mapping (address => uint256) public walletB; \r\n    mapping (address => uint256) public walletC;\r\n    mapping (address => uint256) public walletF;\r\n    mapping (address => uint256) public walletG;\r\n    mapping (address => uint256) public walletH;\r\n\r\n    mapping (address => uint256) public releasedA;\r\n    mapping (address => uint256) public releasedB; \r\n    mapping (address => uint256) public releasedC;\r\n    mapping (address => uint256) public releasedF;\r\n    mapping (address => uint256) public releasedG; \r\n    mapping (address => uint256) public releasedH;\r\n\r\n    // Mapping of token balance and allowed address for each address with transfer limit\r\n    mapping (address => uint256) balances;\r\n    //mapping of allowed address for each address with tranfer limit\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    struct WalletConfig{\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 duration;\r\n    }\r\n\r\n    mapping (uint => address) public walletAddresses;\r\n    mapping (uint => WalletConfig) public allWalletConfig;\r\n\r\n    // @param _dstWalletLMNO Ether Address for wallet L,M,N and O\r\n    // Only to be called by Owner of this contract\r\n    function setDSTWalletLMNO(address _dstWalletLMNO) onlyOwner external{\r\n        require(_dstWalletLMNO != address(0));\r\n        dstWalletLMNO = _dstWalletLMNO;\r\n    }\r\n\r\n    // Owner can Set Multisig wallet\r\n    // @param _dstMultisig address of Multisig wallet.\r\n    function setDSTMultiSig(address _dstMultisig) onlyOwner external{\r\n        require(_dstMultisig != address(0));\r\n        DSTMultisig = _dstMultisig;\r\n    }\r\n\r\n    function startStopICO(bool status) onlyOwner external{\r\n        startStop = status;\r\n    }\r\n\r\n    function addWalletAddressAndTokens(uint _id, address _walletAddress, uint256 _tokens) onlyOwner external{\r\n        require(_walletAddress != address(0));\r\n        walletAddresses[_id] = _walletAddress;\r\n        balances[_walletAddress] = safeAdd(balances[_walletAddress],_tokens); // wallet tokens initialize        \r\n    }\r\n\r\n    // function preAllocation(uint256 _walletId, uint256 _tokens) onlyOwner external{\r\n    //     require(_tokens > 0);\r\n    //     balances[walletAddresses[_walletId]] = safeAdd(balances[walletAddresses[_walletId]],_tokens); // wallet tokens initialize\r\n    // }\r\n\r\n    function addWalletConfig(uint256 _id, uint256 _start, uint256 _cliff, uint256 _duration) onlyOwner external{\r\n        uint256 start = safeAdd(_start,now);\r\n        uint256 cliff = safeAdd(start,_cliff);\r\n        allWalletConfig[_id] = WalletConfig(\r\n            start,\r\n            cliff,\r\n            _duration\r\n        );\r\n    }\r\n\r\n    function assignToken(address _investor,uint256 _tokens) external {\r\n        // Check investor address and tokens.Not allow 0 value\r\n        require(_investor != address(0) && _tokens > 0);\r\n        // Check wallet have enough token balance to assign\r\n        require(_tokens <= balances[msg.sender]);\r\n        \r\n        // Debit the tokens from the wallet\r\n        balances[msg.sender] = safeSub(balances[msg.sender],_tokens);\r\n        // Increasing the totalSupply\r\n        totalSupply = safeAdd(totalSupply, _tokens);\r\n\r\n        // Assign tokens to the investor\r\n        if(msg.sender == walletAddresses[0]){\r\n            walletA[_investor] = safeAdd(walletA[_investor],_tokens);\r\n        }\r\n        else if(msg.sender == walletAddresses[1]){\r\n            walletB[_investor] = safeAdd(walletB[_investor],_tokens);\r\n        }\r\n        else if(msg.sender == walletAddresses[2]){\r\n            walletC[_investor] = safeAdd(walletC[_investor],_tokens);\r\n        }\r\n        else if(msg.sender == walletAddresses[5]){\r\n            walletF[_investor] = safeAdd(walletF[_investor],_tokens);\r\n        }\r\n        else if(msg.sender == walletAddresses[6]){\r\n            walletG[_investor] = safeAdd(walletG[_investor],_tokens);\r\n        }\r\n        else if(msg.sender == walletAddresses[7]){\r\n            walletH[_investor] = safeAdd(walletH[_investor],_tokens);\r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function assignTokenIJK(address _userAddress,uint256 _tokens) external {\r\n        require(msg.sender == walletAddresses[8] || msg.sender == walletAddresses[9] || msg.sender == walletAddresses[10]);\r\n        // Check investor address and tokens.Not allow 0 value\r\n        require(_userAddress != address(0) && _tokens > 0);\r\n        // Assign tokens to the investor\r\n        assignTokensWallet(msg.sender,_userAddress, _tokens);\r\n    }\r\n\r\n    function withdrawToken() public {\r\n        //require(walletA[msg.sender] > 0 || walletB[msg.sender] > 0 || walletC[msg.sender] > 0);\r\n        uint256 currentBalance = 0;\r\n        if(walletA[msg.sender] > 0){\r\n            uint256 unreleasedA = getReleasableAmount(0,msg.sender);\r\n            walletA[msg.sender] = safeSub(walletA[msg.sender], unreleasedA);\r\n            currentBalance = safeAdd(currentBalance, unreleasedA);\r\n            releasedA[msg.sender] = safeAdd(releasedA[msg.sender], unreleasedA);\r\n        }\r\n        if(walletB[msg.sender] > 0){\r\n            uint256 unreleasedB = getReleasableAmount(1,msg.sender);\r\n            walletB[msg.sender] = safeSub(walletB[msg.sender], unreleasedB);\r\n            currentBalance = safeAdd(currentBalance, unreleasedB);\r\n            releasedB[msg.sender] = safeAdd(releasedB[msg.sender], unreleasedB);\r\n        }\r\n        if(walletC[msg.sender] > 0){\r\n            uint256 unreleasedC = getReleasableAmount(2,msg.sender);\r\n            walletC[msg.sender] = safeSub(walletC[msg.sender], unreleasedC);\r\n            currentBalance = safeAdd(currentBalance, unreleasedC);\r\n            releasedC[msg.sender] = safeAdd(releasedC[msg.sender], unreleasedC);\r\n        }\r\n        require(currentBalance > 0);\r\n        // Assign tokens to the sender\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], currentBalance);\r\n    }\r\n\r\n    function withdrawBonusToken() public {\r\n        //require(walletF[msg.sender] > 0 || walletG[msg.sender] > 0 || walletH[msg.sender] > 0);\r\n        uint256 currentBalance = 0;\r\n        if(walletF[msg.sender] > 0){\r\n            uint256 unreleasedF = getReleasableBonusAmount(5,msg.sender);\r\n            walletF[msg.sender] = safeSub(walletF[msg.sender], unreleasedF);\r\n            currentBalance = safeAdd(currentBalance, unreleasedF);\r\n            releasedF[msg.sender] = safeAdd(releasedF[msg.sender], unreleasedF);\r\n        }\r\n        if(walletG[msg.sender] > 0){\r\n            uint256 unreleasedG = getReleasableBonusAmount(6,msg.sender);\r\n            walletG[msg.sender] = safeSub(walletG[msg.sender], unreleasedG);\r\n            currentBalance = safeAdd(currentBalance, unreleasedG);\r\n            releasedG[msg.sender] = safeAdd(releasedG[msg.sender], unreleasedG);\r\n        }\r\n        if(walletH[msg.sender] > 0){\r\n            uint256 unreleasedH = getReleasableBonusAmount(7,msg.sender);\r\n            walletH[msg.sender] = safeSub(walletH[msg.sender], unreleasedH);\r\n            currentBalance = safeAdd(currentBalance, unreleasedH);\r\n            releasedH[msg.sender] = safeAdd(releasedH[msg.sender], unreleasedH);\r\n        }\r\n        require(currentBalance > 0);\r\n        // Assign tokens to the sender\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], currentBalance);\r\n    }\r\n\r\n    function getReleasableAmount(uint256 _walletId,address _beneficiary) public view returns (uint256){\r\n        uint256 totalBalance;\r\n\r\n        if(_walletId == 0){\r\n            totalBalance = safeAdd(walletA[_beneficiary], releasedA[_beneficiary]);    \r\n            return safeSub(getData(_walletId,totalBalance), releasedA[_beneficiary]);\r\n        }\r\n        else if(_walletId == 1){\r\n            totalBalance = safeAdd(walletB[_beneficiary], releasedB[_beneficiary]);\r\n            return safeSub(getData(_walletId,totalBalance), releasedB[_beneficiary]);\r\n        }\r\n        else if(_walletId == 2){\r\n            totalBalance = safeAdd(walletC[_beneficiary], releasedC[_beneficiary]);\r\n            return safeSub(getData(_walletId,totalBalance), releasedC[_beneficiary]);\r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function getReleasableBonusAmount(uint256 _walletId,address _beneficiary) public view returns (uint256){\r\n        uint256 totalBalance;\r\n\r\n        if(_walletId == 5){\r\n            totalBalance = safeAdd(walletF[_beneficiary], releasedF[_beneficiary]);    \r\n            return safeSub(getData(_walletId,totalBalance), releasedF[_beneficiary]);\r\n        }\r\n        else if(_walletId == 6){\r\n            totalBalance = safeAdd(walletG[_beneficiary], releasedG[_beneficiary]);\r\n            return safeSub(getData(_walletId,totalBalance), releasedG[_beneficiary]);\r\n        }\r\n        else if(_walletId == 7){\r\n            totalBalance = safeAdd(walletH[_beneficiary], releasedH[_beneficiary]);\r\n            return safeSub(getData(_walletId,totalBalance), releasedH[_beneficiary]);\r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function getData(uint256 _walletId,uint256 _totalBalance) public view returns (uint256) {\r\n        uint256 availableBalanceIn = safeDiv(safeMul(_totalBalance, safeSub(allWalletConfig[_walletId].cliff, allWalletConfig[_walletId].start)), allWalletConfig[_walletId].duration);\r\n        return safeMul(availableBalanceIn, safeDiv(getVestedAmount(_walletId,_totalBalance), availableBalanceIn));\r\n    }\r\n\r\n    function getVestedAmount(uint256 _walletId,uint256 _totalBalance) public view returns (uint256) {\r\n        uint256 cliff = allWalletConfig[_walletId].cliff;\r\n        uint256 start = allWalletConfig[_walletId].start;\r\n        uint256 duration = allWalletConfig[_walletId].duration;\r\n\r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= safeAdd(start,duration)) {\r\n            return _totalBalance;\r\n        } else {\r\n            return safeDiv(safeMul(_totalBalance,safeSub(now,start)),duration);\r\n        }\r\n    }\r\n\r\n    // Sale of the tokens. Investors can call this method to invest into DST Tokens\r\n    function() payable external {\r\n        // Allow only to invest in ICO stage\r\n        require(startStop);\r\n        // Sorry !! We only allow to invest with minimum 1 Ether as value\r\n        require(msg.value >= 1 ether);\r\n\r\n        // multiply by exchange rate to get newly created token amount\r\n        uint256 createdTokens = safeMul(msg.value, tokensPerEther);\r\n\r\n        // Call to Internal function to assign tokens\r\n        assignTokensWallet(walletAddresses[3],msg.sender, createdTokens);\r\n    }\r\n\r\n    // DST accepts Cash Investment through manual process in Fiat Currency\r\n    // DST Team will assign the tokens to investors manually through this function\r\n    //@ param cashInvestor address of investor\r\n    //@ param assignedTokens number of tokens to give to investor\r\n    function cashInvestment(address cashInvestor, uint256 assignedTokens) onlyOwner external {\r\n        // Check if cashInvestor address is set or not\r\n        // By mistake tokens mentioned as 0, save the cost of assigning tokens.\r\n        require(cashInvestor != address(0) && assignedTokens > 0);\r\n\r\n        // Call to Internal function to assign tokens\r\n        assignTokensWallet(walletAddresses[4],cashInvestor, assignedTokens);\r\n    }\r\n\r\n    // // Function will transfer the tokens to investor's address\r\n    // // Common function code for Crowdsale Investor And Cash Investor \r\n    // function assignTokens(address investor, uint256 tokens) internal {\r\n    //     // Creating tokens and  increasing the totalSupply\r\n    //     totalSupply = safeAdd(totalSupply, tokens);\r\n\r\n    //     // Assign new tokens to the sender\r\n    //     balances[investor] = safeAdd(balances[investor], tokens);\r\n\r\n    //     // Finally token created for sender, log the creation event\r\n    //     Transfer(0, investor, tokens);\r\n    // }\r\n\r\n    // Function will transfer the tokens to investor's address\r\n    // Common function code for Crowdsale Investor And Cash Investor \r\n    function assignTokensWallet(address walletAddress,address investor, uint256 tokens) internal {\r\n        // Check wallet have enough token balance to assign\r\n        require(tokens <= balances[walletAddress]);\r\n        // Creating tokens and  increasing the totalSupply\r\n        totalSupply = safeAdd(totalSupply, tokens);\r\n\r\n        // Debit the tokens from wallet\r\n        balances[walletAddress] = safeSub(balances[walletAddress],tokens);\r\n        // Assign new tokens to the sender\r\n        balances[investor] = safeAdd(balances[investor], tokens);\r\n\r\n        // Finally token created for sender, log the creation event\r\n        Transfer(0, investor, tokens);\r\n    }\r\n\r\n    function finalizeCrowdSale() external{\r\n        // Check DST Multisig wallet set or not\r\n        require(DSTMultisig != address(0));\r\n        // Send fund to multisig wallet\r\n        require(DSTMultisig.send(address(this).balance));\r\n    }\r\n\r\n    // @param _who The address of the investor to check balance\r\n    // @return balance tokens of investor address\r\n    function balanceOf(address _who) public constant returns (uint) {\r\n        return balances[_who];\r\n    }\r\n\r\n    // @param _owner The address of the account owning tokens\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //  Transfer `value` DST tokens from sender's account\r\n    // `msg.sender` to provided account address `to`.\r\n    // @param _to The address of the recipient\r\n    // @param _value The number of DST tokens to transfer\r\n    // @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool ok) {\r\n        //validate receiver address and value.Not allow 0 value\r\n        require(_to != 0 && _value > 0);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        //Check sender have enough balance\r\n        require(senderBalance >= _value);\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[msg.sender] = senderBalance;\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Transfer `value` DST tokens from sender 'from'\r\n    // to provided account address `to`.\r\n    // @param from The address of the sender\r\n    // @param to The address of the recipient\r\n    // @param value The number of miBoodle to transfer\r\n    // @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\r\n        //validate _from,_to address and _value(Now allow with 0)\r\n        require(_from != 0 && _to != 0 && _value > 0);\r\n        //Check amount is approved by the owner for spender to spent and owner have enough balances\r\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\r\n        balances[_from] = safeSub(balances[_from],_value);\r\n        balances[_to] = safeAdd(balances[_to],_value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //  `msg.sender` approves `spender` to spend `value` tokens\r\n    // @param spender The address of the account able to transfer the tokens\r\n    // @param value The amount of wei to be approved for transfer\r\n    // @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool ok) {\r\n        //validate _spender address\r\n        require(_spender != 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // This method is only use for debit DSTToken from DST wallet L,M,N and O\r\n    // @dev Required state: is dstWalletLMNO set\r\n    // @param _walletAddress The address of the wallet from tokens debit\r\n    // @param token The number of DST tokens to debit\r\n    // @return Whether the debit was successful or not\r\n    function debitWalletLMNO(address _walletAddress,uint256 token) external onlyDSTWalletLMNO returns (bool){\r\n        // Check if DST wallet LMNO is set or not\r\n        require(dstWalletLMNO != address(0));\r\n        // Check wallet have enough token and token is valid\r\n        require(balances[_walletAddress] >= token && token > 0);\r\n        // Increasing the totalSupply\r\n        totalSupply = safeAdd(totalSupply, token);\r\n        // Debit tokens from wallet balance\r\n        balances[_walletAddress] = safeSub(balances[_walletAddress],token);\r\n        return true;\r\n    }\r\n\r\n    // This method is only use for credit DSTToken to DST wallet L,M,N and O users\r\n    // @dev Required state: is dstWalletLMNO set\r\n    // @param claimAddress The address of the wallet user to credit tokens\r\n    // @param token The number of DST tokens to credit\r\n    // @return Whether the credit was successful or not\r\n    function creditWalletUserLMNO(address claimAddress,uint256 token) external onlyDSTWalletLMNO returns (bool){\r\n        // Check if DST wallet LMNO is set or not\r\n        require(dstWalletLMNO != address(0));\r\n        // Check claiment address and token is valid or not\r\n        require(claimAddress != address(0) && token > 0);\r\n        // Assign tokens to user\r\n        balances[claimAddress] = safeAdd(balances[claimAddress], token);\r\n        // balances[_walletAddress] = safeSub(balances[_walletAddress],token);\r\n        return true;\r\n    }\r\n\r\n    // DSTWalletLMNO related modifer\r\n    // @dev Throws if called by any account other than the DSTWalletLMNO owner\r\n    modifier onlyDSTWalletLMNO() {\r\n        require(msg.sender == dstWalletLMNO);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonusToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_walletAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"addWalletAddressAndTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cashInvestor\",\"type\":\"address\"},{\"name\":\"assignedTokens\",\"type\":\"uint256\"}],\"name\":\"cashInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addWalletConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"uint256\"},{\"name\":\"_totalBalance\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"assignTokenIJK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"startStopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getReleasableBonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startStop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dstMultisig\",\"type\":\"address\"}],\"name\":\"setDSTMultiSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"assignToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dstWalletLMNO\",\"type\":\"address\"}],\"name\":\"setDSTWalletLMNO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allWalletConfig\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"debitWalletLMNO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getReleasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSTMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimAddress\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"creditWalletUserLMNO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletId\",\"type\":\"uint256\"},{\"name\":\"_totalBalance\",\"type\":\"uint256\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DSTToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8144d0818eaf9b3524a6cb0e7e938e7d023ea6924bfecc3c627a546b3b11561e"}]}