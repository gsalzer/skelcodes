{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n/* @dev Specific contract details name , decimals */\r\n\r\ncontract CIDToken is MintableToken {\r\n    \r\n    string public constant name = \"CID\";\r\n    \r\n    string public constant symbol = \"CID\";\r\n    \r\n    uint32 public constant decimals = 18;\r\n    \r\n}\r\n\r\n\r\n\r\ncontract CIDCrowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public multisig;\r\n\r\n    CIDToken public token = new CIDToken();\r\n\r\n    uint start;\r\n    \r\n    uint endtime;\r\n\r\n    uint hardcap;\r\n\r\n    uint rate;\r\n    \r\n    uint softcap;\r\n    \r\n    address wal1;\r\n    address wal2;\r\n    address wal3;\r\n\r\n    mapping(address => uint) public balances;\r\n    /* Specific contract details: Start time, End time, Min.Cap, Max.Cap,\r\n    Rate of Token to ETH, Final owner wallet, Team's bonuses wallet*/\r\n    function CIDCrowdsale() {\r\n        /** Final owner wallet */\r\n        multisig = 0x2338801bA8aEe40d679364bcA4e69d8C1B7a101C;\r\n        rate = 1000000000000000000000; \r\n        start = 1517468400; /** 01.02.2018 in unix */\r\n        endtime = 1519776000;/** 28.02.2018in unix */\r\n        hardcap = 7000000 * (10 ** 18); /** 7 000 000 * 1e18 CID*/\r\n        softcap = 300000 * (10 ** 18); /** 300 000 1e18 */\r\n        \r\n        /*Team's bonuses wallet*/\r\n        wal1 = 0x35E0e717316E38052f6b74f144F2a7CE8318294b;\r\n        wal2 = 0xa9251f22203e34049aa5D4DbfE4638009A1586F5;\r\n        wal3 = 0xE9267a312B9Bc125557cff5146C8379cCEE3a33D;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n    require(now > start && now < endtime);\r\n        _;\r\n    }\r\n    \r\n    modifier isUnderHardCap() {\r\n        require(this.balance <= hardcap);\r\n        _;\r\n    }\r\n    /* refund option for investors*/\r\n    function refund() public {\r\n        require(this.balance < softcap && now > start && balances[msg.sender] > 0);\r\n        uint value = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(value);\r\n    }\r\n    \r\n    /* when softcap reached , finish of token minting could be implemented */\r\n   function finishMinting() public onlyOwner {\r\n      uint finCheckBalance = softcap.div(rate);\r\n      if(this.balance > finCheckBalance) {\r\n        multisig.transfer(this.balance);\r\n        token.finishMinting();\r\n      }\r\n    }\r\n    \r\n    \r\n   function createTokens() isUnderHardCap saleIsOn payable {\r\n       \r\n        \r\n        uint tokens = rate.mul(msg.value).div(1 ether);\r\n        uint CTS = token.totalSupply(); /** check total Supply */\r\n        uint bonusTokens = 0;\r\n        \r\n        /* bonus tokens calculation for ICO stages */\r\n        if(CTS <= (300000 * (10 ** 18))) {\r\n          bonusTokens = (tokens.mul(30)).div(100);    /* 30% bonus */\r\n        } else if(CTS > (300000 * (10 ** 18)) && CTS <= (400000 * (10 ** 18)))  {\r\n          bonusTokens = (tokens.mul(25)).div(100);       /* 25% bonus */\r\n        } else if(CTS > (400000 * (10 ** 18)) && CTS <= (500000 * (10 ** 18))) {\r\n          bonusTokens = (tokens.mul(20)).div(100);         /* 20% bonus */\r\n        } else if(CTS > (500000 * (10 ** 18)) && CTS <= (700000 * (10 ** 18))) {\r\n          bonusTokens = (tokens.mul(15)).div(100);       /* 15% bonus */\r\n        } else if(CTS > (700000 * (10 ** 18)) && CTS <= (1000000 * (10 ** 18))) {\r\n          bonusTokens = (tokens.mul(10)).div(100);          /* 10% bonus */\r\n        } else if(CTS > (1000000 * (10 ** 18))) {\r\n          bonusTokens = 0;      /* 0% */\r\n        }\r\n        \r\n        tokens += bonusTokens;\r\n        token.mint(msg.sender, tokens);\r\n        \r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        /** Team's bonus tokens calculation*/\r\n        uint wal1Tokens = (tokens.mul(25)).div(100);\r\n        token.mint(wal1, wal1Tokens);\r\n        \r\n        \r\n        uint wal2Tokens = (tokens.mul(10)).div(100);\r\n        token.mint(wal2, wal2Tokens);\r\n        \r\n        uint wal3Tokens = (tokens.mul(5)).div(100);\r\n        token.mint(wal3, wal3Tokens);\r\n        \r\n        \r\n       \r\n    }\r\n\r\n   \r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CIDCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ad7991c972e51015a9d699b74f0b566d40c40bedbfbe00f2575f46daa4d2518"}]}