{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract batchTransfer {\r\n    using SafeMath for uint256;\r\n    \r\n    uint public totalEther;\r\n    \r\n    function batchTransfer() public {\r\n        totalEther = 0;\r\n    }\r\n    \r\n    function distribute(address[] myAddresses) public payable {\r\n            require(myAddresses.length>0);\r\n            \r\n            uint256 value = msg.value;\r\n            uint256 length = myAddresses.length;\r\n            uint256 distr = value.div(length);\r\n            \r\n            if(length==1)\r\n            {\r\n               myAddresses[0].transfer(value);\r\n            }else\r\n            {\r\n                for(uint256 i=0;i<(length.sub(1));i++)\r\n                {\r\n                    myAddresses[i].transfer(distr);\r\n                    value = value.sub(distr);\r\n                }\r\n                myAddresses[myAddresses.length-1].transfer(value);\r\n            }\r\n            \r\n            totalEther = totalEther.add(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"myAddresses\",\"type\":\"address[]\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"batchTransfer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://88f47f15452822e67262da3534ca6fceecaf614b2697ea3cc34b9feb9fb29a40"}]}