{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract InvestorsList is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /* Investor */\r\n\r\n    enum WhiteListStatus  {Usual, WhiteList, PreWhiteList}\r\n\r\n    struct Investor {\r\n        bytes32 id;\r\n        uint tokensCount;\r\n        address walletForTokens;\r\n        WhiteListStatus whiteListStatus;\r\n        bool isVerified;\r\n    }\r\n\r\n    /*Investor's end*/\r\n\r\n    mapping (address => bool) manipulators;\r\n    mapping (address => bytes32) public nativeInvestorsIds;\r\n    mapping (bytes32 => Investor) public investorsList;\r\n\r\n    /*Manipulators*/\r\n\r\n    modifier allowedToManipulate(){\r\n        require(manipulators[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeManipulatorAddress(address saleAddress, bool isAllowedToManipulate) external onlyOwner{\r\n        require(saleAddress != 0x0);\r\n        manipulators[saleAddress] = isAllowedToManipulate;\r\n    }\r\n\r\n    /*Manipulators' end*/\r\n\r\n    function setInvestorId(address investorAddress, bytes32 id) external onlyOwner{\r\n        require(investorAddress != 0x0 && id != 0);\r\n        nativeInvestorsIds[investorAddress] = id;\r\n    }\r\n\r\n    function addInvestor(\r\n        bytes32 id,\r\n        WhiteListStatus status,\r\n        bool isVerified\r\n    ) external onlyOwner {\r\n        require(id != 0);\r\n        require(investorsList[id].id == 0);\r\n\r\n        investorsList[id].id = id;\r\n        investorsList[id].tokensCount = 0;\r\n        investorsList[id].whiteListStatus = status;\r\n        investorsList[id].isVerified = isVerified;\r\n    }\r\n\r\n    function removeInvestor(bytes32 id) external onlyOwner {\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].id = 0;\r\n    }\r\n\r\n    function isAllowedToBuyByAddress(address investor) external view returns(bool){\r\n        require(investor != 0x0);\r\n        bytes32 id = nativeInvestorsIds[investor];\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].isVerified;\r\n    }\r\n\r\n    function isAllowedToBuyByAddressWithoutVerification(address investor) external view returns(bool){\r\n        require(investor != 0x0);\r\n        bytes32 id = nativeInvestorsIds[investor];\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return true;\r\n    }\r\n\r\n    function isAllowedToBuy(bytes32 id) external view returns(bool){\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].isVerified;\r\n    }\r\n\r\n    function isPreWhiteListed(bytes32 id) external constant returns(bool){\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].whiteListStatus == WhiteListStatus.PreWhiteList;\r\n    }\r\n\r\n    function isWhiteListed(bytes32 id) external view returns(bool){\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        return investorsList[id].whiteListStatus == WhiteListStatus.WhiteList;\r\n    }\r\n\r\n    function setVerificationStatus(bytes32 id, bool status) external onlyOwner{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].isVerified = status;\r\n    }\r\n\r\n    function setWhiteListStatus(bytes32 id, WhiteListStatus status) external onlyOwner{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].whiteListStatus = status;\r\n    }\r\n\r\n    function addTokens(bytes32 id, uint tokens) external allowedToManipulate{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].tokensCount = investorsList[id].tokensCount.add(tokens);\r\n    }\r\n\r\n    function subTokens(bytes32 id, uint tokens) external allowedToManipulate{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].tokensCount = investorsList[id].tokensCount.sub(tokens);\r\n    }\r\n\r\n    function setWalletForTokens(bytes32 id, address wallet) external onlyOwner{\r\n        require(id != 0 && investorsList[id].id != 0);\r\n        investorsList[id].walletForTokens = wallet;\r\n    }\r\n}\r\n\r\ncontract BonumPreSale is Pausable{\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Bonum PreSale\";\r\n\r\n    uint public startDate;\r\n    uint public endDate;\r\n    uint public whiteListPreSaleDuration = 1 days;\r\n\r\n    function setWhiteListDuration(uint duration) external onlyOwner{\r\n        require(duration > 0);\r\n        whiteListPreSaleDuration = duration * 1 days;\r\n    }\r\n\r\n    uint public fiatValueMultiplier = 10**6;\r\n    uint public tokenDecimals = 10**18;\r\n\r\n    InvestorsList public investors;\r\n\r\n    address beneficiary;\r\n\r\n    uint public ethUsdRate;\r\n    uint public collected = 0;\r\n    uint public tokensSold = 0;\r\n    uint public tokensSoldWithBonus = 0;\r\n\r\n    uint[] firstColumn;\r\n    uint[] secondColumn;\r\n\r\n    event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\r\n\r\n    function BonumPreSale(\r\n        uint _startDate,\r\n        uint _endDate,\r\n        address _investors,\r\n        address _beneficiary,\r\n        uint _baseEthUsdRate\r\n    ) public {\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n\r\n        investors = InvestorsList(_investors);\r\n        beneficiary = _beneficiary;\r\n\r\n        ethUsdRate = _baseEthUsdRate;\r\n\r\n        initBonusSystem();\r\n    }\r\n\r\n\r\n    function initBonusSystem() private{\r\n        firstColumn.push(1750000);\r\n        firstColumn.push(10360000);\r\n        firstColumn.push(18980000);\r\n        firstColumn.push(25000000);\r\n\r\n        secondColumn.push(1560000);\r\n        secondColumn.push(9220000);\r\n        secondColumn.push(16880000);\r\n        secondColumn.push(22230000);\r\n    }\r\n\r\n    function setNewBeneficiary(address newBeneficiary) external onlyOwner {\r\n        require(newBeneficiary != 0x0);\r\n        beneficiary = newBeneficiary;\r\n    }\r\n\r\n    function setEthUsdRate(uint rate) external onlyOwner {\r\n        require(rate > 0);\r\n        ethUsdRate = rate;\r\n    }\r\n\r\n    function setNewStartDate(uint newStartDate) external onlyOwner{\r\n        require(newStartDate > 0);\r\n        startDate = newStartDate;\r\n    }\r\n\r\n    function setNewEndDate(uint newEndDate) external onlyOwner{\r\n        require(newEndDate > 0);\r\n        endDate = newEndDate;\r\n    }\r\n\r\n    function setNewInvestorsList(address investorsList) external onlyOwner {\r\n        require(investorsList != 0x0);\r\n        investors = InvestorsList(investorsList);\r\n    }\r\n\r\n    modifier activePreSale(){\r\n        require(now >= startDate && now < endDate);\r\n        _;\r\n    }\r\n\r\n    modifier underCap(){\r\n        require(tokensSold < uint(750000).mul(tokenDecimals));\r\n        _;\r\n    }\r\n\r\n    modifier isAllowedToBuy(){\r\n        require(investors.isAllowedToBuyByAddressWithoutVerification(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier minimumAmount(){\r\n        require(msg.value.mul(ethUsdRate).div(fiatValueMultiplier.mul(1 ether)) >= 100);\r\n        _;\r\n    }\r\n\r\n    mapping (address => uint) public nativeInvestors;\r\n\r\n    function() payable public whenNotPaused activePreSale minimumAmount underCap{\r\n        uint tokens = msg.value.mul(ethUsdRate).div(fiatValueMultiplier);\r\n        tokensSold = tokensSold.add(tokens);\r\n        \r\n        tokens = tokens.add(calculateBonus(tokens));\r\n        nativeInvestors[msg.sender] = tokens;\r\n        tokensSoldWithBonus =  tokensSoldWithBonus.add(tokens);\r\n        \r\n        nativeInvestors[msg.sender] = tokens;\r\n        NewContribution(msg.sender, tokens, msg.value);\r\n\r\n        collected = collected.add(msg.value);\r\n\r\n        beneficiary.transfer(msg.value);\r\n    }\r\n\r\n\r\n    //usd * 10^6\r\n    function otherCoinsPurchase(bytes32 id, uint amountInUsd) external whenNotPaused underCap activePreSale onlyOwner {\r\n        require(id.length > 0 && amountInUsd >= (uint(100).mul(fiatValueMultiplier)) && investors.isAllowedToBuy(id));\r\n\r\n        uint tokens = amountInUsd.mul(tokenDecimals).div(fiatValueMultiplier);\r\n\r\n        tokensSold = tokensSold.add(tokens);\r\n        tokens = tokens.add(calculateBonus(tokens));\r\n        tokensSoldWithBonus =  tokensSoldWithBonus.add(tokens);\r\n\r\n        investors.addTokens(id, tokens);\r\n    }\r\n\r\n\r\n    function calculateBonus(uint tokensCount) public constant returns (uint){\r\n        //+1 because needs whole days\r\n        uint day = ((now.sub(startDate.add(whiteListPreSaleDuration))).div(1 days)).add(1);\r\n        uint B1;\r\n        uint B2;\r\n\r\n        if (tokensCount < uint(1000).mul(tokenDecimals)) {\r\n            B1 = (((tokensCount - 100 * tokenDecimals) * (firstColumn[1] - firstColumn[0])) /  ((1000-100) * tokenDecimals)) + firstColumn[0];\r\n            B2 = (((tokensCount - 100 * tokenDecimals) * (secondColumn[1] - secondColumn[0])) /  ((1000-100) * tokenDecimals)) + secondColumn[0];\r\n        }\r\n\r\n        if (tokensCount >= uint(1000).mul(tokenDecimals) && tokensCount < uint(10000).mul(tokenDecimals)) {\r\n            B1 = (((tokensCount - 1000 * tokenDecimals) * (firstColumn[2] - firstColumn[1])) / ((10000-1000) * tokenDecimals)) + firstColumn[1];\r\n            B2 = (((tokensCount - 1000 * tokenDecimals) * (secondColumn[2] - secondColumn[1])) / ((10000-1000) * tokenDecimals)) + secondColumn[1];\r\n        }\r\n\r\n        if (tokensCount >= uint(10000).mul(tokenDecimals) && tokensCount < uint(50000).mul(tokenDecimals)) {\r\n            B1 = (((tokensCount - 10000 * tokenDecimals) * (firstColumn[3] - firstColumn[2])) / ((50000-10000) * tokenDecimals)) + firstColumn[2];\r\n            B2 = (((tokensCount - 10000 * tokenDecimals) * (secondColumn[3] - secondColumn[2])) / ((50000-10000) * tokenDecimals)) + secondColumn[2];\r\n        }\r\n\r\n        if (tokensCount >=  uint(50000).mul(tokenDecimals)) {\r\n            B1 = firstColumn[3];\r\n            B2 = secondColumn[3];\r\n        }\r\n\r\n        uint bonusPercent = B1.sub(((day - 1).mul(B1 - B2)).div(12));\r\n\r\n        return calculateBonusTokensAmount(tokensCount, bonusPercent);\r\n    }\r\n\r\n    function calculateBonusTokensAmount(uint tokensCount, uint bonusPercent) private constant returns(uint){\r\n        uint bonus = tokensCount.mul(bonusPercent);\r\n        bonus = bonus.div(100);\r\n        bonus = bonus.div(fiatValueMultiplier);\r\n        return bonus;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setWhiteListDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorsList\",\"type\":\"address\"}],\"name\":\"setNewInvestorsList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setNewBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUsdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListPreSaleDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensCount\",\"type\":\"uint256\"}],\"name\":\"calculateBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nativeInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatValueMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStartDate\",\"type\":\"uint256\"}],\"name\":\"setNewStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"amountInUsd\",\"type\":\"uint256\"}],\"name\":\"otherCoinsPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"setNewEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setEthUsdRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_investors\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_baseEthUsdRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BonumPreSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ab0f7c0000000000000000000000000000000000000000000000000000000005ac21b40000000000000000000000000af1357a05f06f194f1a41ae751280803b0b836a50000000000000000000000003ca01bd351e987bbb6ffb527185e43c1bcd297c7000000000000000000000000000000000000000000000000000000002228f6f0","Library":"","SwarmSource":"bzzr://b49f615d5361e3d0e99ee65372846eb5ff9723fb2ec4b039c665b4d9cf1a1ff3"}]}