{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\ncontract carnitaAsada{\r\n    address addressManager; // Oscar Angel Cardenas\r\n    address  bitsoAddress; //address to pay carnitaAsada\r\n    carnita [] carnitas; //array of carnitas\r\n    uint256 lastCarnita; //index of last carnita\r\n    bool public halted = false; // flag for emergency stop or start\r\n    uint256 currentPeople; // current max number of people who can participate\r\n    uint256 priceCarnita; // current price of carnita\r\n    uint toPaycarnita; // amount will pay to the carnita \r\n    \r\n    struct carnita{\r\n        uint256 maxPeople; //max quantity of participants\r\n        bool active; // flag to see if is still active\r\n        uint256 raised; //amount of eth raised\r\n        uint256 min; //minimun eth to participate\r\n        address[] participants; //list of participants\r\n        \r\n    }\r\n    \r\n    function carnitaAsada(address _manager, address _bitso) public{\r\n        addressManager= _manager;\r\n        bitsoAddress= _bitso;\r\n        lastCarnita=0;\r\n        priceCarnita= 0.015 ether;\r\n        currentPeople= 8;\r\n        toPaycarnita=0.012 ether;\r\n        \r\n        //first carnitaAsada\r\n        carnita memory temp;\r\n        temp.maxPeople=currentPeople;\r\n        temp.active=true;\r\n        temp.raised=0;\r\n        temp.min=priceCarnita;\r\n        carnitas.push(temp);\r\n       \r\n    }\r\n    \r\n    // only manager can do this action\r\n    modifier onlyManager() {\r\n        require(msg.sender ==  addressManager);\r\n        _;\r\n    }\r\n    // Checks if Contract is running and has not been stopped\r\n    modifier onContractRunning() {\r\n        require( halted == false);\r\n        _;\r\n    }\r\n    // Checks if Contract was stopped or deadline is reached\r\n    modifier onContractStopped() {\r\n      require( halted == true);\r\n        _;\r\n    }\r\n\r\n   \r\n    //generate a random number\r\n    function rand() internal constant returns (uint32 res){\r\n        return uint32(block.number^now)%uint32(carnitas[lastCarnita].participants.length);\r\n    }\r\n    \r\n    //recover funds in case of error\r\n    function recoverAllEth() onlyManager public {\r\n        addressManager.transfer(this.balance);\r\n    }\r\n    \r\n    /*\r\n    *   Emergency Stop or Contract.\r\n    *\r\n    */\r\n\r\n    function  halt() onlyManager  onContractRunning public{\r\n         halted = true;\r\n    }\r\n\r\n    function  unhalt() onlyManager onContractStopped public {\r\n        halted = false;\r\n    }\r\n    \r\n    //change manager\r\n    function newManager(address _newManager) onlyManager public{\r\n        addressManager= _newManager;\r\n    }\r\n    //see the current manager\r\n    function getManager() public constant returns (address _manager){\r\n        return addressManager;\r\n    }\r\n    //change bitsoAddress\r\n    function newBitsoAddress(address _newAddress) onlyManager public{\r\n        addressManager= _newAddress;\r\n    }\r\n    //see the current manager\r\n    function getBitsoAddress() public constant returns (address _bitsoAddress){\r\n        return bitsoAddress;\r\n    }\r\n    // see the current price of carnita\r\n    function getPrice() public constant returns(uint256 _price){\r\n        return priceCarnita;\r\n    }\r\n    \r\n   // Change current price of carnita\r\n    function setPrice(uint256 _newPriceCarnita) onlyManager public{\r\n        priceCarnita=_newPriceCarnita;\r\n        carnitas[lastCarnita].min=priceCarnita;\r\n    }\r\n    \r\n    // see the current price to Paycarnita\r\n    function getPaycarnita() public constant returns(uint256 _Paycarnita){\r\n        return toPaycarnita;\r\n    }\r\n    \r\n   // Change current price of Paycarnita\r\n    function setPaycarnita(uint256 _newPaycarnita) onlyManager public{\r\n        toPaycarnita=_newPaycarnita;\r\n    }\r\n    \r\n    // see the current max participants\r\n    function getMaxParticipants() public constant returns(uint256 _max){\r\n        return currentPeople;\r\n    }\r\n    // Change current minimun of max participants\r\n    function setMaxParticipants(uint256 _newMax) onlyManager public{\r\n        currentPeople=_newMax;\r\n        carnitas[lastCarnita].maxPeople=currentPeople;\r\n    }\r\n    \r\n   \r\n    //check the number of current participants\r\n    function seeCurrentParticipants()public constant returns(uint256 _participants){\r\n        return carnitas[lastCarnita].participants.length;\r\n    }\r\n    // add new participant\r\n    function addParticipant(address _buyer, uint256 _value) internal {\r\n        require(_value == priceCarnita || _buyer== addressManager);\r\n        /*if (carnitas[lastCarnita].maxPeople == carnitas[lastCarnita].participants.length){\r\n            newCarnita();\r\n        }*///this no works because is created when the payCarnita function is called\r\n        carnitas[lastCarnita].participants.push(_buyer);\r\n        carnitas[lastCarnita].raised+=_value;\r\n        if(carnitas[lastCarnita].maxPeople == carnitas[lastCarnita].participants.length){\r\n            halted = true;\r\n        }\r\n        \r\n    }\r\n    //generate new carnitaAsada\r\n    function newCarnita() internal{\r\n        carnitas[lastCarnita].active=false;\r\n        carnita memory temp;\r\n        temp.maxPeople=currentPeople;\r\n        temp.active=true;\r\n        temp.raised=0;\r\n        temp.min=priceCarnita;\r\n        carnitas.push(temp);\r\n        lastCarnita+=1;\r\n    }\r\n    \r\n    //pay the carnitaAsada\r\n    \r\n    function payCarnita(uint256 _gasUsed, uint256 _bill) onlyManager public{\r\n        uint256 winner = uint256(rand());// define a random winner\r\n        addressManager.transfer(_gasUsed); //pay the gas to the Manager\r\n        \r\n        //to pay the bill could be toPaycarnita variable or set by manager\r\n        if(_bill>0){\r\n            bitsoAddress.transfer(carnitas[lastCarnita].participants.length*_bill);\r\n        }else{\r\n        bitsoAddress.transfer(carnitas[lastCarnita].participants.length*toPaycarnita);\r\n        }\r\n        \r\n        carnitas[lastCarnita].participants[winner].transfer(this.balance);//send money to the winner\r\n        halted=false;//activate the Contract again\r\n        newCarnita(); //create new carnita\r\n        \r\n    }\r\n    \r\n    /*\r\n     *  default fall back function      \r\n     */\r\n    function () onContractRunning payable  public {\r\n                 addParticipant(msg.sender, msg.value);           \r\n            }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newPaycarnita\",\"type\":\"uint256\"}],\"name\":\"setPaycarnita\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverAllEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxParticipants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasUsed\",\"type\":\"uint256\"},{\"name\":\"_bill\",\"type\":\"uint256\"}],\"name\":\"payCarnita\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBitsoAddress\",\"outputs\":[{\"name\":\"_bitsoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxParticipants\",\"outputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"newBitsoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"newManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceCarnita\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaycarnita\",\"outputs\":[{\"name\":\"_Paycarnita\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeCurrentParticipants\",\"outputs\":[{\"name\":\"_participants\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_bitso\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"carnitaAsada","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004d9661994f96d70bc7425887a2ae820f176e8d4100000000000000000000000004ff2ba5884f8a52de19d0a76cb8f6f266754c6b","Library":"","SwarmSource":"bzzr://863e2e1dbd023606abc3efa4090d442f02dc842afb2ab44044399f53017c637d"}]}