{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity 0.4.19;\r\n/// @title Ethereum Address Register Contract\r\n/// @dev This contract maintains a name service for addresses and miner.\r\n/// @author Kongliang Zhong - <kongliang@loopring.org>,\r\n/// @author Daniel Wang - <daniel@loopring.org>,\r\ncontract NameRegistry {\r\n    uint public nextId = 0;\r\n    mapping (uint    => Participant) public participantMap;\r\n    mapping (address => NameInfo)    public nameInfoMap;\r\n    mapping (bytes12 => address)     public ownerMap;\r\n    mapping (address => string)      public nameMap;\r\n    struct NameInfo {\r\n        bytes12  name;\r\n        uint[]   participantIds;\r\n    }\r\n    struct Participant {\r\n        address feeRecipient;\r\n        address signer;\r\n        bytes12 name;\r\n        address owner;\r\n    }\r\n    event NameRegistered (\r\n        string            name,\r\n        address   indexed owner\r\n    );\r\n    event NameUnregistered (\r\n        string             name,\r\n        address    indexed owner\r\n    );\r\n    event OwnershipTransfered (\r\n        bytes12            name,\r\n        address            oldOwner,\r\n        address            newOwner\r\n    );\r\n    event ParticipantRegistered (\r\n        bytes12           name,\r\n        address   indexed owner,\r\n        uint      indexed participantId,\r\n        address           singer,\r\n        address           feeRecipient\r\n    );\r\n    event ParticipantUnregistered (\r\n        uint    participantId,\r\n        address owner\r\n    );\r\n    function registerName(string name)\r\n        external\r\n    {\r\n        require(isNameValid(name));\r\n        bytes12 nameBytes = stringToBytes12(name);\r\n        require(ownerMap[nameBytes] == 0x0);\r\n        require(stringToBytes12(nameMap[msg.sender]) == bytes12(0x0));\r\n        nameInfoMap[msg.sender] = NameInfo(nameBytes, new uint[](0));\r\n        ownerMap[nameBytes] = msg.sender;\r\n        nameMap[msg.sender] = name;\r\n        NameRegistered(name, msg.sender);\r\n    }\r\n    function unregisterName(string name)\r\n        external\r\n    {\r\n        NameInfo storage nameInfo = nameInfoMap[msg.sender];\r\n        uint[] storage participantIds = nameInfo.participantIds;\r\n        bytes12 nameBytes = stringToBytes12(name);\r\n        require(nameInfo.name == nameBytes);\r\n        for (uint i = participantIds.length - 1; i >= 0; i--) {\r\n            delete participantMap[participantIds[i]];\r\n        }\r\n        delete nameInfoMap[msg.sender];\r\n        delete nameMap[msg.sender];\r\n        delete ownerMap[nameBytes];\r\n        NameUnregistered(name, msg.sender);\r\n    }\r\n    function transferOwnership(address newOwner)\r\n        external\r\n    {\r\n        require(newOwner != 0x0);\r\n        require(nameInfoMap[newOwner].name.length == 0);\r\n        NameInfo storage nameInfo = nameInfoMap[msg.sender];\r\n        string storage name = nameMap[msg.sender];\r\n        uint[] memory participantIds = nameInfo.participantIds;\r\n        for (uint i = 0; i < participantIds.length; i ++) {\r\n            Participant storage p = participantMap[participantIds[i]];\r\n            p.owner = newOwner;\r\n        }\r\n        delete nameInfoMap[msg.sender];\r\n        delete nameMap[msg.sender];\r\n        nameInfoMap[newOwner] = nameInfo;\r\n        nameMap[newOwner] = name;\r\n        OwnershipTransfered(nameInfo.name, msg.sender, newOwner);\r\n    }\r\n    /* function addParticipant(address feeRecipient) */\r\n    /*     external */\r\n    /*     returns (uint) */\r\n    /* { */\r\n    /*     return addParticipant(feeRecipient, feeRecipient); */\r\n    /* } */\r\n    function addParticipant(\r\n        address feeRecipient,\r\n        address singer\r\n        )\r\n        external\r\n        returns (uint)\r\n    {\r\n        require(feeRecipient != 0x0 && singer != 0x0);\r\n        NameInfo storage nameInfo = nameInfoMap[msg.sender];\r\n        bytes12 name = nameInfo.name;\r\n        require(name.length > 0);\r\n        Participant memory participant = Participant(\r\n            feeRecipient,\r\n            singer,\r\n            name,\r\n            msg.sender\r\n        );\r\n        uint participantId = ++nextId;\r\n        participantMap[participantId] = participant;\r\n        nameInfo.participantIds.push(participantId);\r\n        ParticipantRegistered(\r\n            name,\r\n            msg.sender,\r\n            participantId,\r\n            singer,\r\n            feeRecipient\r\n        );\r\n        return participantId;\r\n    }\r\n    function removeParticipant(uint participantId)\r\n        external\r\n    {\r\n        require(msg.sender == participantMap[participantId].owner);\r\n        NameInfo storage nameInfo = nameInfoMap[msg.sender];\r\n        uint[] storage participantIds = nameInfo.participantIds;\r\n        delete participantMap[participantId];\r\n        uint len = participantIds.length;\r\n        for (uint i = 0; i < len; i ++) {\r\n            if (participantId == participantIds[i]) {\r\n                participantIds[i] = participantIds[len - 1];\r\n                participantIds.length -= 1;\r\n            }\r\n        }\r\n        ParticipantUnregistered(participantId, msg.sender);\r\n    }\r\n    function getParticipantById(uint id)\r\n        external\r\n        view\r\n        returns (address feeRecipient, address signer)\r\n    {\r\n        Participant storage addressSet = participantMap[id];\r\n        feeRecipient = addressSet.feeRecipient;\r\n        signer = addressSet.signer;\r\n    }\r\n    function getFeeRecipientById(uint id)\r\n        external\r\n        view\r\n        returns (address feeRecipient)\r\n    {\r\n        Participant storage addressSet = participantMap[id];\r\n        feeRecipient = addressSet.feeRecipient;\r\n    }\r\n    function getParticipantIds(string name, uint start, uint count)\r\n        external\r\n        view\r\n        returns (uint[] idList)\r\n    {\r\n        bytes12 nameBytes = stringToBytes12(name);\r\n        address owner = ownerMap[nameBytes];\r\n        require(owner != 0x0);\r\n        NameInfo storage nameInfo = nameInfoMap[owner];\r\n        uint[] storage pIds = nameInfo.participantIds;\r\n        uint len = pIds.length;\r\n        if (start >= len) {\r\n            return;\r\n        }\r\n        uint end = start + count;\r\n        if (end > len) {\r\n            end = len;\r\n        }\r\n        if (start == end) {\r\n            return;\r\n        }\r\n        idList = new uint[](end - start);\r\n        for (uint i = start; i < end; i ++) {\r\n            idList[i - start] = pIds[i];\r\n        }\r\n    }\r\n    function getOwner(string name)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes12 nameBytes = stringToBytes12(name);\r\n        return ownerMap[nameBytes];\r\n    }\r\n    function isNameValid(string name)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        bytes memory temp = bytes(name);\r\n        return temp.length >= 6 && temp.length <= 12;\r\n    }\r\n    function stringToBytes12(string str)\r\n        internal\r\n        pure\r\n        returns (bytes12 result)\r\n    {\r\n        assembly {\r\n            result := mload(add(str, 32))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"unregisterName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getParticipantIds\",\"outputs\":[{\"name\":\"idList\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getParticipantById\",\"outputs\":[{\"name\":\"feeRecipient\",\"type\":\"address\"},{\"name\":\"signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participantId\",\"type\":\"uint256\"}],\"name\":\"removeParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nameInfoMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes12\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes12\"}],\"name\":\"ownerMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nameMap\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRecipient\",\"type\":\"address\"},{\"name\":\"singer\",\"type\":\"address\"}],\"name\":\"addParticipant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantMap\",\"outputs\":[{\"name\":\"feeRecipient\",\"type\":\"address\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes12\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipientById\",\"outputs\":[{\"name\":\"feeRecipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes12\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes12\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"participantId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"singer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"ParticipantRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participantId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ParticipantUnregistered\",\"type\":\"event\"}]","ContractName":"NameRegistry","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f39b61cafe4101c20d1acbbdc8132ff0d9178d7340b6be330607e6cb23aa9302"}]}