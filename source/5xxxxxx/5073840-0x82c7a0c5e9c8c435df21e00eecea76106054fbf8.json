{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract KimAccessControl {\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cfoAddress;\r\n  address public cooAddress;\r\n\r\n\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n      require(msg.sender == ceoAddress);\r\n      _;\r\n  }\r\n\r\n  /// @dev Access modifier for CFO-only functionality\r\n  modifier onlyCFO() {\r\n      require(msg.sender == cfoAddress);\r\n      _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n      require(msg.sender == cooAddress);\r\n      _;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) external onlyCEO {\r\n      require(_newCEO != address(0));\r\n\r\n      ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n  /// @param _newCFO The address of the new CFO\r\n  function setCFO(address _newCFO) external onlyCEO {\r\n      require(_newCFO != address(0));\r\n\r\n      cfoAddress = _newCFO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) external onlyCEO {\r\n      require(_newCOO != address(0));\r\n\r\n      cooAddress = _newCOO;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract KimContract is KimAccessControl{\r\n\r\n  // DECLARING BASIC VARIABLES, TOKEN SYMBOLS, AND CONSTANTS\r\n  // Public variables of the token\r\n  string public name;\r\n  string public symbol;\r\n  // total supply of kims ever to be in circulation\r\n  uint256 public totalSupply;\r\n  // Total Kims \"released\" into the market\r\n  uint256 public kimsCreated;\r\n  // Total Kims on sale at any given time\r\n  uint256 public kimsOnAuction;\r\n  // This is the cut each seller will take on the sale of a KIM\r\n  uint256 public sellerCut;\r\n  // A variable to house mathematic function used in _computeCut function\r\n  uint constant feeDivisor = 100;\r\n\r\n  // Map an owners address to the total amount of KIMS that they own\r\n  mapping (address => uint256) public balanceOf;\r\n  // Map the KIM to the owner, \"Who owns this Kim?\"\r\n  mapping (uint => address) public tokenToOwner;\r\n  // This creates a mapping of the tokenId to an Auction\r\n  mapping (uint256 => TokenAuction) public tokenAuction;\r\n  // How much ether does this wallet have to withdraw?\r\n  mapping (address => uint) public pendingWithdrawals;\r\n\r\n  // This generates a public event on the blockchain that will notify clients\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event TokenAuctionCreated(uint256 tokenIndex, address seller, uint256 sellPrice);\r\n  event TokenAuctionCompleted(uint256 tokenIndex, address seller, address buyer, uint256 sellPrice);\r\n  event Withdrawal(address to, uint256 amount);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function KimContract() public {\r\n    // the creator of the contract is the initial CEO\r\n    ceoAddress = msg.sender;\r\n    // the creator of the contract is also the initial COO\r\n    cooAddress = msg.sender;\r\n    // Initiate the contract with inital supply of Kims\r\n    totalSupply = 5000;\r\n    // Give all initial kims to the contract itself\r\n    balanceOf[this] = totalSupply;              // Give the creator all initial tokens\r\n    // This is what we will call KIMs\r\n    name = \"KimJongCrypto\";\r\n    symbol = \"KJC\";\r\n    // Declaring seller cut on initalization of the contract\r\n    sellerCut = 95;\r\n  }\r\n\r\n  // contstruct the array struct\r\n  struct TokenAuction {\r\n    bool isForSale;\r\n    uint256 tokenIndex;\r\n    address seller;\r\n    uint256 sellPrice;\r\n    uint256 startedAt;\r\n  }\r\n\r\n\r\n  // Only the COO can release new KIMS into the market\r\n  // We do not have power over the MAXIMUM amount of KIMS that will exist in the future\r\n  // That was declared when we created the contract\r\n  // KIMJONGCRYPTO.COM will release KIMS periodically to maintain a healthy market flow\r\n  function releaseSomeKims(uint256 howMany) external onlyCOO {\r\n    // We promise not to manipulate the markets, so we take an\r\n    // average of all the KIMS on sale at any given time\r\n    uint256 marketAverage = averageKimSalePrice();\r\n    for(uint256 counter = 0; counter < howMany; counter++) {\r\n      // map the token to the tokenOwner\r\n      tokenToOwner[counter] = this;\r\n      // Put the KIM out on the market for sale\r\n      _tokenAuction(kimsCreated, this, marketAverage);\r\n      // Record the amount of KIMS released\r\n      kimsCreated++;\r\n    }\r\n  }\r\n\r\n\r\n  // Don't want to keep this KIM?\r\n  // Sell KIM then...\r\n  function sellToken(uint256 tokenIndex, uint256 sellPrice) public {\r\n    // Which KIM are you selling?\r\n    TokenAuction storage tokenOnAuction = tokenAuction[tokenIndex];\r\n    // Who's selling the KIM, stored into seller variable\r\n    address seller = msg.sender;\r\n    // Do you own this kim?\r\n    require(_owns(seller, tokenIndex));\r\n    // Is the KIM already on sale? Can't sell twice!\r\n    require(tokenOnAuction.isForSale == false);\r\n    // CLEAR! Send that KIM to Auction!\r\n    _tokenAuction(tokenIndex, seller, sellPrice);\r\n  }\r\n\r\n\r\n  // INTERNAL FUNCTION, USED ONLY FROM WITHIN THE CONTRACT\r\n  function _tokenAuction(uint256 tokenIndex, address seller, uint256 sellPrice) internal {\r\n    // Set the Auction Struct to ON SALE\r\n    tokenAuction[tokenIndex] = TokenAuction(true, tokenIndex, seller, sellPrice, now);\r\n    // Fire the Auction Created Event, tell the whole wide world!\r\n    TokenAuctionCreated(tokenIndex, seller, sellPrice);\r\n    // Increase the amount of KIMS being sold!\r\n    kimsOnAuction++;\r\n  }\r\n\r\n  // Like a KIM?\r\n  // BUY IT!\r\n  function buyKim(uint256 tokenIndex) public payable {\r\n    // Store the KIM in question into tokenOnAuction variable\r\n    TokenAuction storage tokenOnAuction = tokenAuction[tokenIndex];\r\n    // How much is this KIM on sale for?\r\n    uint256 sellPrice = tokenOnAuction.sellPrice;\r\n    // Is the KIM even on sale? No monkey business!\r\n    require(tokenOnAuction.isForSale == true);\r\n    // You are going to have to pay for this KIM! make sure you send enough ether!\r\n    require(msg.value >= sellPrice);\r\n    // Who's selling their KIM?\r\n    address seller = tokenOnAuction.seller;\r\n    // Who's trying to buy this KIM?\r\n    address buyer = msg.sender;\r\n    // CLEAR!\r\n    // Complete the auction! And transfer the KIM!\r\n    _completeAuction(tokenIndex, seller, buyer, sellPrice);\r\n  }\r\n\r\n\r\n\r\n  // INTERNAL FUNCTION, USED ONLY FROM WITHIN THE CONTRACT\r\n  function _completeAuction(uint256 tokenIndex, address seller, address buyer, uint256 sellPrice) internal {\r\n    // Store the contract address\r\n    address thisContract = this;\r\n    // How much commision will the Auction House take?\r\n    uint256 auctioneerCut = _computeCut(sellPrice);\r\n    // How much will the seller take home?\r\n    uint256 sellerProceeds = sellPrice - auctioneerCut;\r\n    // If the KIM is being sold by the Auction House, then do this...\r\n    if (seller == thisContract) {\r\n      // Give the funds to the House\r\n      pendingWithdrawals[seller] += sellerProceeds + auctioneerCut;\r\n      // Close the Auction\r\n      tokenAuction[tokenIndex] = TokenAuction(false, tokenIndex, 0, 0, 0);\r\n      // Anounce it to the world!\r\n      TokenAuctionCompleted(tokenIndex, seller, buyer, sellPrice);\r\n    } else { // If the KIM is being sold by an Individual, then do this...\r\n      // Give the funds to the seller\r\n      pendingWithdrawals[seller] += sellerProceeds;\r\n      // Give the funds to the House\r\n      pendingWithdrawals[this] += auctioneerCut;\r\n      // Close the Auction\r\n      tokenAuction[tokenIndex] = TokenAuction(false, tokenIndex, 0, 0, 0);\r\n      // Anounce it to the world!\r\n      TokenAuctionCompleted(tokenIndex, seller, buyer, sellPrice);\r\n    }\r\n    _transfer(seller, buyer, tokenIndex);\r\n    kimsOnAuction--;\r\n  }\r\n\r\n\r\n  // Don't want to sell KIM anymore?\r\n  // Cancel Auction\r\n  function cancelKimAuction(uint kimIndex) public {\r\n    require(_owns(msg.sender, kimIndex));\r\n    // Store the KIM in question into tokenOnAuction variable\r\n    TokenAuction storage tokenOnAuction = tokenAuction[kimIndex];\r\n    // Is the KIM even on sale? No monkey business!\r\n    require(tokenOnAuction.isForSale == true);\r\n    // Close the Auction\r\n    tokenAuction[kimIndex] = TokenAuction(false, kimIndex, 0, 0, 0);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // INTERNAL FUNCTION, USED ONLY FROM WITHIN THE CONTRACT\r\n  // Use this function to find out how much the AuctionHouse will take from this Transaction\r\n  // All funds go to KIMJONGCRYPTO BCD(BLOCKCHAIN DEVS)!\r\n  function _computeCut(uint256 sellPrice) internal view returns (uint) {\r\n    return sellPrice * sellerCut / 1000;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n// INTERNAL FUNCTION, USED ONLY FROM WITHIN THE CONTRACT\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      // Prevent transfer to 0x0 address. Use burn() instead\r\n      require(_to != 0x0);\r\n      // Subtract from the sender\r\n      balanceOf[_from]--;\r\n      // Add to the reciever\r\n      balanceOf[_to]++;\r\n      // map the token to the tokenOwner\r\n      tokenToOwner[_value] = _to;\r\n      Transfer(_from, _to, 1);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Transfer tokens\r\n   *\r\n   * Send `_value` tokens to `_to` from your account\r\n   *\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n   // Go ahead and give away a KIM as a gift!\r\n  function transfer(address _to, uint256 _value) public {\r\n      require(_owns(msg.sender, _value));\r\n      _transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n\r\n  // this function returns bool of owenrship over the token.\r\n  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return tokenToOwner[_tokenId] == _claimant;\r\n  }\r\n\r\n\r\n  // How much are KIMS really going for now a days?\r\n  // Run this function and find out!\r\n  function averageKimSalePrice() public view returns (uint256) {\r\n    uint256 sumOfAllKimAuctions = 0;\r\n    if (kimsOnAuction == 0){\r\n      return 0;\r\n      } else {\r\n        for (uint256 i = 0; i <= kimsOnAuction; i++) {\r\n          sumOfAllKimAuctions += tokenAuction[i].sellPrice;\r\n        }\r\n        return sumOfAllKimAuctions / kimsOnAuction;\r\n      }\r\n  }\r\n\r\n\r\n\r\n  // this function serves for users to withdraw their ethereum\r\n  function withdraw() {\r\n      uint amount = pendingWithdrawals[msg.sender];\r\n      require(amount > 0);\r\n      // Remember to zero the pending refund before\r\n      // sending to prevent re-entrancy attacks\r\n      pendingWithdrawals[msg.sender] = 0;\r\n      msg.sender.transfer(amount);\r\n      Withdrawal(msg.sender, amount);\r\n  }\r\n\r\n\r\n\r\n  // @dev Allows the CFO to capture the balance available to the contract.\r\n  function withdrawBalance() external onlyCFO {\r\n      uint balance = pendingWithdrawals[this];\r\n      pendingWithdrawals[this] = 0;\r\n      cfoAddress.transfer(balance);\r\n      Withdrawal(cfoAddress, balance);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kimsCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"releaseSomeKims\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kimIndex\",\"type\":\"uint256\"}],\"name\":\"cancelKimAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"buyKim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kimsOnAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"averageKimSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAuction\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"TokenAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"TokenAuctionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"KimContract","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71b88a1699907102d9ceec59b956ca3ca3ce594fb598dfbf28562d9d8f5c6682"}]}