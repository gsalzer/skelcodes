{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Cthulooo {\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    ////CONSTANTS\r\n      // Amount of winners\r\n    uint public constant WIN_CUTOFF = 10;\r\n    \r\n    // Minimum bid\r\n    uint public constant MIN_BID = 0.000001 ether; \r\n    \r\n    // Countdown duration\r\n    uint public constant DURATION = 60000 hours;\r\n    \r\n    //////////////////\r\n    \r\n    // Most recent WIN_CUTOFF bets, struct array not supported...\r\n    address[] public betAddressArray;\r\n    \r\n    // Current value of the pot\r\n    uint public pot;\r\n    \r\n   // Time at which the game expires\r\n    uint public deadline;\r\n    \r\n    //Current index of the bet array\r\n    uint public index;\r\n    \r\n    //Tells whether game is over\r\n    bool public gameIsOver;\r\n    \r\n    function Cthulooo() public payable {\r\n        require(msg.value >= MIN_BID);\r\n        betAddressArray = new address[](WIN_CUTOFF);\r\n        index = 0;\r\n        pot = 0;\r\n        gameIsOver = false;\r\n        deadline = computeDeadline();\r\n        newBet();\r\n       \r\n    }\r\n\r\n    \r\n    function win() public {\r\n        require(now > deadline);\r\n        uint amount = pot.div(WIN_CUTOFF);\r\n        address sendTo;\r\n        for (uint i = 0; i < WIN_CUTOFF; i++) {\r\n            sendTo = betAddressArray[i];\r\n            sendTo.transfer(amount);\r\n            pot = pot.sub(amount);\r\n        }\r\n        gameIsOver = true;\r\n    }\r\n    \r\n    function newBet() public payable {\r\n        require(msg.value >= MIN_BID && !gameIsOver && now <= deadline);\r\n        pot = pot.add(msg.value);\r\n        betAddressArray[index] = msg.sender;\r\n        index = (index + 1) % WIN_CUTOFF;\r\n        deadline = computeDeadline();\r\n    }\r\n    \r\n    function computeDeadline() internal view returns (uint) {\r\n        return now.add(DURATION);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameIsOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"win\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WIN_CUTOFF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betAddressArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"Cthulooo","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca6dcc31b740d7ba4417d77461caed8fa1140fe2202691e4a48978f1b89c9e5d"}]}