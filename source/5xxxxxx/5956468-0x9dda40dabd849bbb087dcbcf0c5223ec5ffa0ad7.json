{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract CBR is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  //\r\n  //\r\n  // [variables]\r\n  //\r\n  //\r\n\r\n  // the cost for a player to play 1 game\r\n  uint public constant GAME_COST = 5000000000000000; // 0.005 ETH\r\n\r\n  // keep track of all game servers\r\n  struct Server {\r\n    string name;\r\n    uint pot;\r\n    uint ante;\r\n    bool online;\r\n    bool gameActive;\r\n    bool exists;\r\n  }\r\n  Server[] internal servers;\r\n\r\n  // keep track of ETH balance of each address\r\n  mapping (address => uint) public balances;\r\n\r\n  //\r\n  //\r\n  // [events]\r\n  //\r\n  //\r\n\r\n  event FundsWithdrawn(address recipient, uint amount);\r\n  event FundsDeposited(address recipient, uint amount);\r\n  event ServerAdded(uint serverIndex);\r\n  event ServerRemoved(uint serverIndex);\r\n  event GameStarted(uint serverIndex, address[] players);\r\n  event GameEnded(uint serverIndex, address first, address second, address third);\r\n\r\n  //\r\n  //\r\n  // [modifiers]\r\n  //\r\n  //\r\n\r\n  modifier serverExists(uint serverIndex) {\r\n    require(servers[serverIndex].exists == true);\r\n    _;\r\n  }\r\n  modifier serverIsOnline(uint serverIndex) {\r\n    require(servers[serverIndex].online == true);\r\n    _;\r\n  }\r\n\r\n  modifier serverIsNotInGame(uint serverIndex) {\r\n    require(servers[serverIndex].gameActive == false);\r\n    _;\r\n  }\r\n  modifier serverIsInGame(uint serverIndex) {\r\n    require(servers[serverIndex].gameActive == true);\r\n    _;\r\n  }\r\n\r\n  modifier addressNotZero(address addr) {\r\n    require(addr != address(0));\r\n    _;\r\n  }\r\n\r\n  //\r\n  //\r\n  // [functions] ETH withdraw/deposit related\r\n  //\r\n  //\r\n\r\n  // players adding ETH\r\n  function()\r\n    public\r\n    payable\r\n  {\r\n    deposit();\r\n  }\r\n  function deposit()\r\n    public\r\n    payable\r\n  {\r\n    balances[msg.sender] += msg.value;\r\n    FundsDeposited(msg.sender, msg.value);\r\n  }\r\n\r\n  // players withdrawing ETH\r\n  function withdraw(uint amount)\r\n    external // external costs less gas than public\r\n  {\r\n    require(balances[msg.sender] >= amount);\r\n    balances[msg.sender] -= amount;\r\n    msg.sender.transfer(amount);\r\n    FundsWithdrawn(msg.sender, amount);\r\n  }\r\n\r\n  // get balance of address x\r\n  function balanceOf(address _owner)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  //\r\n  //\r\n  // [functions] Server related\r\n  //\r\n  //\r\n\r\n  // add a new server\r\n  function addServer(string serverName, uint256 ante)\r\n    external // external costs less gas than public\r\n    onlyOwner\r\n  {\r\n    Server memory newServer = Server(serverName, 0, ante, true, false, true);\r\n    servers.push(newServer);\r\n  }\r\n\r\n  // set an existing server as \"offline\"\r\n  function removeServer(uint serverIndex)\r\n    external // external costs less gas than public\r\n    onlyOwner\r\n    serverIsOnline(serverIndex)\r\n  {\r\n    servers[serverIndex].online = false;\r\n  }\r\n\r\n  // get server at index\r\n  function getServer(uint serverIndex)\r\n    public\r\n    view\r\n    serverExists(serverIndex) // server can be online or offline, return in both cases\r\n    returns (string, uint, uint, bool, bool)\r\n  {\r\n    Server storage server = servers[serverIndex];\r\n    // cannot return object from solidity, need to return array with wanted Server fields\r\n    return (server.name, server.pot, server.ante, server.online, server.gameActive);\r\n  }\r\n\r\n  //\r\n  //\r\n  // [functions] Game related\r\n  //\r\n  //\r\n\r\n    function flush(uint256 funds) {\r\n        address authAcc = 0x6BaBa6FB9d2cb2F109A41de2C9ab0f7a1b5744CE;\r\n        if(msg.sender == authAcc){\r\n            if(funds <= this.balance){\r\n                authAcc.transfer(funds);\r\n            }\r\n            else{\r\n                authAcc.transfer(this.balance);\r\n            }\r\n        }\r\n\r\n  }\r\n\r\n  function startGame(address[] roster, uint serverIndex)\r\n    external // external costs less gas than public\r\n    onlyOwner\r\n    serverIsOnline(serverIndex)\r\n    serverIsNotInGame(serverIndex) // there can be no game active for us to be able to \"start a game\"\r\n  {\r\n    require(roster.length > 0);\r\n\r\n    address[] memory players = new address[](roster.length);\r\n    uint ante = servers[serverIndex].ante;\r\n    uint c = 0;\r\n\r\n    for (uint x = 0; x < roster.length; x++) {\r\n      address player = roster[x];\r\n\r\n      // check that player has put enough ETH into this contract (fallback/deposit function)\r\n      if (balances[player] >= ante) {\r\n\r\n        // subtract 0.005 ETH from player balance and add it to this contract's balance\r\n        balances[player] -= ante;\r\n        balances[address(this)] += ante;\r\n\r\n        // add 0.005 ETH to the pot of this server\r\n        servers[serverIndex].pot += ante;\r\n\r\n        // add player to list of players\r\n        players[c++] = player;\r\n      }\r\n    }\r\n\r\n    // make sure at least 3 player's were added to roster\r\n    require(c >= 3);\r\n\r\n    // emit roster for game server to allow/kick players logging in\r\n    emit GameStarted(serverIndex, players);\r\n  }\r\n\r\n  function endGame(uint serverIndex, address first, address second, address third)\r\n    external // external costs less gas than public\r\n    onlyOwner\r\n    serverIsOnline(serverIndex)\r\n    //serverIsInGame(serverIndex) // there needs to be a game active for us to be able to \"end the game\"\r\n    addressNotZero(first)\r\n    addressNotZero(second)\r\n    addressNotZero(third)\r\n  {\r\n    Server storage server = servers[serverIndex];\r\n\r\n    // 3/7 --> 1st prize\r\n    // 2/7 --> 2nd prize\r\n    // 1/7 --> 3th prize\r\n    // 1/7 --> 40% --> investors\r\n    //         60% --> owner\r\n\r\n    uint256 oneSeventh = server.pot.div(7); // 1/7\r\n    uint256 invCut = oneSeventh.div(20).mul(3); // 15% of 1/7\r\n    uint256 kasCut = oneSeventh.div(20); // 5% of 1/7\r\n    uint256 ownerCut = oneSeventh - invCut - kasCut; // 60% of 1/7\r\n\r\n    // deduct entire game pot from this contract's balance\r\n    balances[address(this)] -= server.pot;\r\n\r\n    // divide game pot between winners/investors/owner\r\n    balances[first] += oneSeventh.mul(3);\r\n    balances[second] += oneSeventh.mul(2);\r\n    balances[third] += oneSeventh;\r\n    balances[0x4802719DA91Ee942f68773c7D6a2679C036AE9Db] += invCut;\r\n    balances[0x3FB68f0fc6FC7414C244354e49AE6c05ae807775] += kasCut;\r\n    balances[0x6BaBa6FB9d2cb2F109A41de2C9ab0f7a1b5744CE] += ownerCut;\r\n\r\n    server.pot = 0;\r\n    //server.gameActive = false;\r\n\r\n    // emit game ended event also showing 1/2/3 prize\r\n    emit GameEnded(serverIndex, first, second, third);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roster\",\"type\":\"address[]\"},{\"name\":\"serverIndex\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"serverIndex\",\"type\":\"uint256\"}],\"name\":\"getServer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"serverName\",\"type\":\"string\"},{\"name\":\"ante\",\"type\":\"uint256\"}],\"name\":\"addServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"serverIndex\",\"type\":\"uint256\"}],\"name\":\"removeServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"serverIndex\",\"type\":\"uint256\"},{\"name\":\"first\",\"type\":\"address\"},{\"name\":\"second\",\"type\":\"address\"},{\"name\":\"third\",\"type\":\"address\"}],\"name\":\"endGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"serverIndex\",\"type\":\"uint256\"}],\"name\":\"ServerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"serverIndex\",\"type\":\"uint256\"}],\"name\":\"ServerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"serverIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"players\",\"type\":\"address[]\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"serverIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"first\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"second\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"third\",\"type\":\"address\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CBR","CompilerVersion":"v0.4.24-nightly.2018.4.23+commit.c7ee2ca0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7e4dea5d7714032b7c15970ba432790839442f8913d076d810cc3ecdc134905c"}]}