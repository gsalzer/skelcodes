{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n\t    uint\t \t      wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public constant returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth\r\n    {\r\n        require(owner_ != address(0));\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        assert(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier authorized(bytes4 sig) {\r\n        assert(isAuthorized(msg.sender, sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract DSExec {\r\n    function tryExec( address target, bytes calldata, uint value)\r\n             internal\r\n             returns (bool call_ret)\r\n    {\r\n        return target.call.value(value)(calldata);\r\n    }\r\n    function exec( address target, bytes calldata, uint value)\r\n             internal\r\n    {\r\n        if(!tryExec(target, calldata, value)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    // Convenience aliases\r\n    function exec( address t, bytes c )\r\n        internal\r\n    {\r\n        exec(t, c, 0);\r\n    }\r\n    function exec( address t, uint256 v )\r\n        internal\r\n    {\r\n        bytes memory c; exec(t, c, v);\r\n    }\r\n    function tryExec( address t, bytes c )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return tryExec(t, c, 0);\r\n    }\r\n    function tryExec( address t, uint256 v )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes memory c; return tryExec(t, c, v);\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    \r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n\r\n    function hadd(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function hmax(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) pure internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) pure internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), y), WAD/2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), WAD), y/2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function wmax(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), y), RAY/2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), RAY), y/2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) pure internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function rmax(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) pure internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\ncontract DSStop is DSAuth, DSNote {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n    \r\n    constructor(uint256 supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public view returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n    \r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        emit Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n        \r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        emit Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n        \r\n        emit Approval(msg.sender, guy, wad);\r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n    bytes32  public  symbol;\r\n    bytes32  public  name;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n    uint256  public  MAX_MINT_NUMBER = 1000*10**26;\r\n\r\n    constructor(bytes32 symbol_, bytes32 name_) public {\r\n        symbol = symbol_;\r\n        name = name_;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) public stoppable note returns (bool) {\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function push(address dst, uint128 wad) public returns (bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n    function pull(address src, uint128 wad) public returns (bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function mint(uint128 wad) public auth stoppable note {\r\n        assert (add(_supply, wad) <= MAX_MINT_NUMBER);\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n    function burn(uint128 wad) public auth stoppable note {\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _supply = sub(_supply, wad);\r\n    }\r\n}\r\n\r\ncontract DSAuthList is DSAuth {\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => bool) public adminlist;\r\n\r\n    modifier onlyIfWhitelisted\r\n    {\r\n        assert(whitelist[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfAdmin\r\n    {\r\n        assert(adminlist[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function addAdminList(address[] addresses) public auth\r\n    {\r\n        for (uint256 i=0; i < addresses.length; i++)\r\n        {\r\n            adminlist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeAdminList(address[] addresses) public auth\r\n    {\r\n        for (uint256 i=0; i < addresses.length; i++)\r\n        {\r\n            adminlist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function addWhiteList(address[] addresses) public onlyIfAdmin\r\n    {\r\n        for (uint256 i=0; i < addresses.length; i++)\r\n        {\r\n            whitelist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeWhiteList(address[] addresses) public onlyIfAdmin\r\n    {\r\n        for (uint256 i=0; i < addresses.length; i++)\r\n        {\r\n            whitelist[addresses[i]] = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ONOSale is DSExec, DSMath, DSAuthList {\r\n    DSToken  public  ONO;                  // The ONO token itself\r\n    uint128  public  totalSupply;          // Total ONO amount created\r\n    uint128  public  foundersAllocation;   // Amount given to founders\r\n    string   public  foundersKey;          // Public key of founders\r\n\r\n    uint     public  openTime;             // Time of window 0 opening\r\n    uint     public  createFirstRound;       // Tokens sold in window 0\r\n\r\n    uint     public  startTime;            // Time of window 1 opening\r\n    uint     public  numberOfRounds;         // Number of windows after 0\r\n    uint     public  createPerRound;         // Tokens sold in each window\r\n\r\n    address  public  founderAddr = 0xF9BaaA91e617dF1dE6c2386b789B401c422E9AB1;\r\n    address  public  burnAddr    = 0xA3Ad4EFDd5719eAed1B0F2e12c0D7368a6D11037;\r\n\r\n    mapping (uint => uint)                       public  dailyTotals;\r\n    mapping (uint => mapping (address => uint))  public  userBuys;\r\n    mapping (uint => mapping (address => bool))  public  claimed;\r\n    mapping (address => string)                  public  keys;\r\n\r\n    mapping (uint => address[]) public userBuysArray;\r\n    mapping (uint => bool) public burned; //In one round, If the getted eth insufficient, the remain token will be burned\r\n\r\n    event LogBuy      (uint window, address user, uint amount);\r\n    event LogClaim    (uint window, address user, uint amount);\r\n    event LogMint     (address user, uint amount);\r\n    event LogBurn     (uint window, address user, uint amount);\r\n    event LogRegister (address user, string key);\r\n    event LogCollect  (uint amount);\r\n\r\n    constructor(\r\n        uint     _numberOfRounds,\r\n        uint128  _totalSupply,\r\n        uint128  _firstRoundSupply,\r\n        uint     _openTime,\r\n        uint     _startTime,\r\n        uint128  _foundersAllocation,\r\n        string   _foundersKey\r\n    ) public {\r\n        numberOfRounds     = _numberOfRounds;\r\n        totalSupply        = _totalSupply;\r\n        openTime           = _openTime;\r\n        startTime          = _startTime;\r\n        foundersAllocation = _foundersAllocation;\r\n        foundersKey        = _foundersKey;\r\n\r\n        createFirstRound = _firstRoundSupply;\r\n        createPerRound = div(\r\n            sub(sub(totalSupply, foundersAllocation), createFirstRound),\r\n            numberOfRounds\r\n        );\r\n\r\n        assert(numberOfRounds > 0);\r\n        assert(totalSupply > foundersAllocation);\r\n        assert(openTime < startTime);\r\n    }\r\n\r\n    function initialize(DSToken ono) public auth {\r\n        assert(address(ONO) == address(0));\r\n        assert(ono.owner() == address(this));\r\n        assert(ono.authority() == DSAuthority(0));\r\n        assert(ono.totalSupply() == 0);\r\n\r\n        ONO = ono;\r\n        ONO.mint(totalSupply);\r\n\r\n        ONO.push(founderAddr, foundersAllocation);\r\n        keys[founderAddr] = foundersKey;\r\n\r\n        emit LogRegister(founderAddr, foundersKey);\r\n    }\r\n\r\n    function time() public constant returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function currRound() public constant returns (uint) {\r\n        return roundFor(time());\r\n    }\r\n\r\n    function roundFor(uint timestamp) public constant returns (uint) {\r\n        return timestamp < startTime\r\n            ? 0\r\n            : sub(timestamp, startTime) / 71 hours + 1;\r\n    }\r\n\r\n    function createOnRound(uint round) public constant returns (uint) {\r\n        return round == 0 ? createFirstRound : createPerRound;\r\n    }\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n    function claim(uint round) public {\r\n        claimAddress(msg.sender, round);\r\n    }\r\n\r\n    function claimAll() public {\r\n        for (uint i = 0; i < currRound(); i++) {\r\n            claim(i);\r\n        }\r\n    }\r\n\r\n    // Value should be a public key.  Read full key import policy.\r\n    // Manually registering requires a base58\r\n    // encoded using the STEEM, BTS, or ONO public key format.\r\n    function register(string key) public {\r\n        assert(currRound() <=  numberOfRounds + 1);\r\n        assert(bytes(key).length <= 64);\r\n\r\n        keys[msg.sender] = key;\r\n\r\n        emit LogRegister(msg.sender, key);\r\n    }\r\n\r\n    function buy() public payable onlyIfWhitelisted{\r\n        \r\n        uint round = currRound();\r\n        \r\n        assert(time() >= openTime && round <= numberOfRounds);\r\n        assert(msg.value >= 1 ether);\r\n\r\n        userBuys[round][msg.sender] = add(userBuys[round][msg.sender], msg.value);\r\n        dailyTotals[round] = add(dailyTotals[round], msg.value);\r\n        \r\n        bool founded = false;\r\n        for (uint i = 0; i < userBuysArray[round].length; i++) {\r\n            address target = userBuysArray[round][i];\r\n            if (target == msg.sender) {\r\n                founded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (founded == false) {\r\n            userBuysArray[round].push(msg.sender);\r\n        }\r\n\r\n        emit LogBuy(round, msg.sender, msg.value);\r\n    }\r\n\r\n    function claimAddresses(address[] addresses, uint round) public onlyIfAdmin {\r\n        uint arrayLength = addresses.length;\r\n        for (uint i=0; i < arrayLength; i++) {\r\n            claimAddress(addresses[i], round);\r\n        }\r\n    }\r\n\r\n    function claimAddress(address addr, uint round) public {\r\n        assert(currRound() > round);\r\n\r\n        if (claimed[round][addr] || dailyTotals[round] == 0) {\r\n            return;\r\n        }\r\n\r\n        // This will have small rounding errors, but the token is\r\n        // going to be truncated to 8 decimal places or less anyway\r\n        // when launched on its own chain.\r\n\r\n        uint128 dailyTotal = cast(dailyTotals[round]);\r\n        uint128 userTotal  = cast(userBuys[round][addr]);\r\n        uint128 price      = wdiv(cast(createOnRound(round)), dailyTotal);\r\n        uint128 minPrice   = wdiv(600000, 1);//private sale price\r\n\r\n        //cannot lower than private sale price\r\n        if (price > minPrice) {\r\n            price = minPrice;\r\n        }\r\n        uint128 reward     = wmul(price, userTotal);\r\n\r\n        claimed[round][addr] = true;\r\n        ONO.push(addr, reward);\r\n\r\n        emit LogClaim(round, addr, reward);\r\n    }\r\n\r\n    function mint(uint128 deltaSupply) public auth {\r\n        ONO.mint(deltaSupply);\r\n        ONO.push(founderAddr, deltaSupply);\r\n\r\n        emit LogMint(founderAddr, deltaSupply);\r\n    }\r\n\r\n    function burn(uint round) public onlyIfAdmin {\r\n        assert(time() >= openTime && round <= numberOfRounds);\r\n\r\n        assert (currRound() > round);\r\n        assert (burned[round] == false);\r\n        \r\n        uint128 dailyTotalEth = cast(dailyTotals[round]);\r\n        uint128 dailyTotalToken = cast(createOnRound(round));\r\n\r\n        if (dailyTotalEth == 0) {\r\n            burned[round] = true;\r\n            ONO.push(burnAddr, dailyTotalToken);\r\n\r\n            emit LogBurn(round, burnAddr, dailyTotalToken);\r\n        }\r\n        else {\r\n            uint128 price      = wdiv(dailyTotalToken, dailyTotalEth);\r\n            uint128 minPrice   = wdiv(600000, 1);//private sale price\r\n\r\n            if (price > minPrice) {\r\n                price = minPrice;\r\n\r\n                uint128 totalReward = wmul(price, dailyTotalEth);\r\n                assert(dailyTotalToken > totalReward);\r\n\r\n                burned[round] = true;\r\n                ONO.push(burnAddr, wsub(dailyTotalToken, totalReward));\r\n                emit LogBurn(round, burnAddr, wsub(dailyTotalToken, totalReward));\r\n            } else {\r\n                burned[round] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Crowdsale owners can collect ETH any number of times\r\n    function collect() public auth {\r\n        assert(currRound() > 0); // Prevent recycling during window 0\r\n        exec(msg.sender, address(this).balance);\r\n        emit LogCollect(address(this).balance);\r\n    }\r\n\r\n    function start() public auth {\r\n        ONO.start();\r\n    }\r\n\r\n    function stop() public auth {\r\n        ONO.stop();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createPerRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBuysArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addAdminList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deltaSupply\",\"type\":\"uint128\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createFirstRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyTotals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"claimAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"claimAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ono\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdminList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"createOnRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"roundFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_numberOfRounds\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint128\"},{\"name\":\"_firstRoundSupply\",\"type\":\"uint128\"},{\"name\":\"_openTime\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_foundersAllocation\",\"type\":\"uint128\"},{\"name\":\"_foundersKey\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"window\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"ONOSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000f2568bc2d21591d7f800000000000000000000000000000000000000000000001027e72f1f12813088000000000000000000000000000000000000000000000000000000000000005b50b580000000000000000000000000000000000000000000000000000000005b5de480000000000000000000000000000000000000000094a24ee4b7770af1b000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a4f4e4f4163636f756e7400000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1d82a8609e0f0cdebb7d0a58437e5c4d20e03e0b59efb2dc1bef5be20251bda1"}]}