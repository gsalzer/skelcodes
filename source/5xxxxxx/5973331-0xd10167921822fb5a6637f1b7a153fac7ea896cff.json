{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Constructor */\r\n    constructor(address _owner) public {\r\n        if ( _owner == 0x00 ) {\r\n            _owner = msg.sender;\r\n        }\r\n        owner = _owner;\r\n    }\r\n    /* Externals */\r\n    function replaceOwner(address _owner) external returns(bool) {\r\n        require( isOwner() );\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier forOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    /* Internals */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert( c >= a );\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a - b;\r\n        assert( c <= a );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a * b;\r\n        assert( c == 0 || c / a == b );\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a ** b;\r\n        assert( c % a == 0 );\r\n        return a ** b;\r\n    }\r\n}\r\ncontract TokenDB is Owned {\r\n    /* Externals */\r\n    function transfer(address _from, address _to, uint256 _amount) external returns(bool _success) {}\r\n    function bulkTransfer(address _from, address[] _to, uint256[] _amount) external returns(bool _success) {}\r\n    function setAllowance(address _owner, address _spender, uint256 _amount) external returns(bool _success) {}\r\n    /* Constants */\r\n    function getAllowance(address _owner, address _spender) public view returns(bool _success, uint256 _remaining) {}\r\n    function balanceOf(address _owner) public view returns(bool _success, uint256 _balance) {}\r\n}\r\ncontract Ico {\r\n    /* Constants */\r\n    function allowTransfer(address _owner) public view returns (bool _success, bool _allow) {}\r\n}\r\ncontract Token is Owned {\r\n    /* Declarations */\r\n    using SafeMath for uint256;\r\n    /* Variables */\r\n    string  public name = \"Inlock token\";\r\n    string  public symbol = \"ILK\";\r\n    uint8   public decimals = 8;\r\n    uint256 public totalSupply = 44e16;\r\n    address public libAddress;\r\n    TokenDB public db;\r\n    Ico public ico;\r\n    /* Constructor */\r\n    constructor(address _owner, address _libAddress, address _dbAddress, address _icoAddress) Owned(_owner) public {\r\n        libAddress = _libAddress;\r\n        db = TokenDB(_dbAddress);\r\n        ico = Ico(_icoAddress);\r\n        emit Mint(_icoAddress, totalSupply);\r\n    }\r\n    /* Fallback */\r\n    function () public { revert(); }\r\n    /* Externals */\r\n    function changeLibAddress(address _libAddress) external forOwner {\r\n        libAddress = _libAddress;\r\n    }\r\n    function changeDBAddress(address _dbAddress) external forOwner {\r\n        db = TokenDB(_dbAddress);\r\n    }\r\n    function changeIcoAddress(address _icoAddress) external forOwner {\r\n        ico = Ico(_icoAddress);\r\n    }\r\n    function approve(address _spender, uint256 _value) external returns (bool _success) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function transfer(address _to, uint256 _amount) external returns (bool _success) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool _success) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    /* Constants */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        address _trg = libAddress;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            calldatacopy(m, 0, calldatasize)\r\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x20)\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            } default {\r\n                return(m, 0x20)\r\n            }\r\n        }\r\n    }\r\n    /* Events */\r\n    event AllowanceUsed(address indexed _spender, address indexed _owner, uint256 indexed _value);\r\n    event Mint(address indexed _addr, uint256 indexed _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\ncontract TokenLib is Token {\r\n    /* Constructor */\r\n    constructor(address _owner, address _libAddress, address _dbAddress, address _icoAddress) Token(_owner, _libAddress, _dbAddress, _icoAddress) public {}\r\n    /* Externals */\r\n    function approve(address _spender, uint256 _amount) external returns (bool _success) {\r\n        _approve(_spender, _amount);\r\n        return true;\r\n    }\r\n    function transfer(address _to, uint256 _amount) external returns (bool _success) {\r\n        _transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {\r\n        uint256 i;\r\n        bool    _subResult;\r\n        bool    _allowed;\r\n        require( _to.length == _amount.length );\r\n        ( _subResult, _allowed ) = ico.allowTransfer(msg.sender);\r\n        require( _subResult && _allowed );\r\n        require( db.bulkTransfer(msg.sender, _to, _amount) );\r\n        for ( i=0 ; i<_to.length ; i++ ) {\r\n            require( _amount[i] > 0 );\r\n            require( _to[i] != 0x00 );\r\n            require( msg.sender != _to[i] );\r\n            emit Transfer(msg.sender, _to[i], _amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool _success) {\r\n        bool    _subResult;\r\n        uint256 _reamining;\r\n        if ( _from != msg.sender ) {\r\n            (_subResult, _reamining) = db.getAllowance(_from, msg.sender);\r\n            require( _subResult );\r\n            _reamining = _reamining.sub(_amount);\r\n            require( db.setAllowance(_from, msg.sender, _reamining) );\r\n            emit AllowanceUsed(msg.sender, _from, _amount);\r\n        }\r\n        _transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    /* Constants */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {\r\n        bool _subResult;\r\n        (_subResult, _remaining) = db.getAllowance(_owner, _spender);\r\n        require( _subResult );\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        bool _subResult;\r\n        (_subResult, _balance) = db.balanceOf(_owner);\r\n        require( _subResult );\r\n    }\r\n    /* Internals */\r\n    function _transfer(address _from, address _to, uint256 _amount) internal {\r\n        bool _subResult;\r\n        bool _allowed;\r\n        require( _amount > 0 );\r\n        require( _from != 0x00 && _to != 0x00 );\r\n        ( _subResult, _allowed ) = ico.allowTransfer(_from);\r\n        require( _subResult && _allowed );\r\n        require( db.transfer(_from, _to, _amount) );\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n    function _approve(address _spender, uint256 _amount) internal {\r\n        require( msg.sender != _spender );\r\n        require( db.setAllowance(msg.sender, _spender, _amount) );\r\n        emit Approval(msg.sender, _spender, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_libAddress\",\"type\":\"address\"}],\"name\":\"changeLibAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dbAddress\",\"type\":\"address\"}],\"name\":\"changeDBAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"db\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"changeIcoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_libAddress\",\"type\":\"address\"},{\"name\":\"_dbAddress\",\"type\":\"address\"},{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TokenLib","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da8c0c6311ab6e43aa1c14967ad7abc6035b9596000000000000000000000000d10167921822fb5a6637f1b7a153fac7ea896cff000000000000000000000000ee467b4e21d501f301537c63b494e3f25a1ba5ce000000000000000000000000578fa4ab3b27a94fe97bd52167f1b02da20d31e8","Library":"","SwarmSource":"bzzr://9131edf9efa135ce908d441118998653ca7b50c99e0a54695534f3bb41cf7ae9"}]}