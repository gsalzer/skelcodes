{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Hypes {\r\n  event NewOne(address owner, uint256 cost, uint256 new_price);\r\n\r\n  struct Hype {\r\n    address owner;\r\n    uint256 cost;\r\n  }\r\n\r\n  mapping (uint256 => Hype) public hypes;\r\n  mapping (address => string) public msgs;\r\n\r\n  address public ceoAddress;\r\n  uint256 public seatPrice = 2500000000000000;\r\n\r\n  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\r\n\r\n  function Hypes() public {\r\n    ceoAddress = msg.sender;\r\n    hypes[1] = Hype(msg.sender, 0);\r\n    hypes[2] = Hype(msg.sender, 0);\r\n    hypes[3] = Hype(msg.sender, 0);\r\n    hypes[4] = Hype(msg.sender, 0);\r\n    hypes[5] = Hype(msg.sender, 0);\r\n    hypes[6] = Hype(msg.sender, 0);\r\n    hypes[7] = Hype(msg.sender, 0);\r\n    hypes[8] = Hype(msg.sender, 0);\r\n    hypes[9] = Hype(msg.sender, 0);\r\n    msgs[msg.sender] = \"Claim this spot!\";\r\n  }\r\n\r\n  function getHype(uint256 _slot) public view returns (\r\n    uint256 slot,\r\n    address owner,\r\n    uint256 cost,\r\n    string message\r\n  ) {\r\n    slot = _slot;\r\n    owner = hypes[_slot].owner;\r\n    cost = hypes[_slot].cost;\r\n    message = msgs[hypes[_slot].owner];\r\n  }\r\n\r\n  function purchase() public payable {\r\n    require(msg.sender != address(0));\r\n    require(msg.value >= seatPrice);\r\n    uint256 excess = SafeMath.sub(msg.value, seatPrice);\r\n    hypes[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\r\n    hypes[9] = hypes[8]; hypes[8] = hypes[7]; hypes[7] = hypes[6];\r\n    hypes[6] = hypes[5]; hypes[5] = hypes[4]; hypes[4] = hypes[3];\r\n    hypes[3] = hypes[2]; hypes[2] = hypes[1];\r\n    hypes[1] = Hype(msg.sender, seatPrice);\r\n    ceoAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 19)));\r\n    NewOne(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 109));\r\n    seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 109);\r\n    msg.sender.transfer(excess);\r\n  }\r\n\r\n  function setMessage(string message) public payable {\r\n    msgs[msg.sender] = message;\r\n  }\r\n\r\n  function payout() public onlyCEO {\r\n    ceoAddress.transfer(this.balance);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hypes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seatPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"msgs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getHype\",\"outputs\":[{\"name\":\"slot\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"NewOne\",\"type\":\"event\"}]","ContractName":"Hypes","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ece895832a631f70d551358e64d1260857b69cb14739b47d2218a5ae048f9c5"}]}