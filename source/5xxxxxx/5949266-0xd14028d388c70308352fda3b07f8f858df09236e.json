{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title AIHTeamLockContract\r\n * @dev AIHTeamLockContract is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given unlock time\r\n */\r\ncontract AIHTeamLockContract {\r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"AIHTeamLockContract\";\r\n    uint256 public constant RELEASE_TIME                   = 1594483200;  //2020/7/12 0:0:0\r\n    uint256 public constant RELEASE_PERIODS                = 90 days;  \r\n\r\n    ERC20 public AIHToken = ERC20(0xD22077bEBB2574E47C3d76656bEEa3FA80351Ea5);\r\n    address public beneficiary = 0xa0212B11CAd53eEF9372502B2Ca507E260a41dbA;\r\n    uint256 public numOfReleased = 0;\r\n    uint256 public amountOfPerRelease = 0;\r\n\r\n    function AIHTeamLockContract() public {}\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(now >= RELEASE_TIME);\r\n\r\n        uint256 num = (now - RELEASE_TIME) / RELEASE_PERIODS;\r\n        require(num + 1 > numOfReleased);\r\n\r\n        if (amountOfPerRelease == 0) { \r\n            amountOfPerRelease = AIHToken.balanceOf(this).mul(5).div(100);// 5years\r\n        }\r\n\r\n        uint256 amount = amountOfPerRelease;\r\n        if (amountOfPerRelease > AIHToken.balanceOf(this)) {\r\n            amount = AIHToken.balanceOf(this);\r\n        }\r\n\r\n        require(amount > 0);\r\n\r\n        AIHToken.safeTransfer(beneficiary, amount);\r\n        numOfReleased = numOfReleased.add(1);   \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_PERIODS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfPerRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIHToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AIHTeamLockContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b7b3994af7148e1fe2d0acd8819cf05a26915d6669153760ca47d49ab02dd19"}]}