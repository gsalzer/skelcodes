{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n  }\r\n\r\n  function square(uint256 a) internal pure returns (uint256) {\r\n    return mul(a, a);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _owner) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  function allowance( address _owner, address _spender) public view returns (uint256);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHStock\r\n * @author M.H. Kang\r\n */\r\ncontract CHStock is ERC20Interface {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* EVENT */\r\n\r\n  event RedeemShares(\r\n    address indexed user,\r\n    uint256 shares,\r\n    uint256 dividends\r\n  );\r\n\r\n  /* STORAGE */\r\n\r\n  string public name = \"ChickenHuntStock\";\r\n  string public symbol = \"CHS\";\r\n  uint8 public decimals = 18;\r\n  uint256 public totalShares;\r\n  uint256 public dividendsPerShare;\r\n  uint256 public constant CORRECTION = 1 << 64;\r\n  mapping (address => uint256) public ethereumBalance;\r\n  mapping (address => uint256) internal shares;\r\n  mapping (address => uint256) internal refund;\r\n  mapping (address => uint256) internal deduction;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /* FUNCTION */\r\n\r\n  function redeemShares() public {\r\n    uint256 _shares = shares[msg.sender];\r\n    uint256 _dividends = dividendsOf(msg.sender);\r\n\r\n    delete shares[msg.sender];\r\n    delete refund[msg.sender];\r\n    delete deduction[msg.sender];\r\n    totalShares = totalShares.sub(_shares);\r\n    ethereumBalance[msg.sender] = ethereumBalance[msg.sender].add(_dividends);\r\n\r\n    emit RedeemShares(msg.sender, _shares, _dividends);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    allowed[_from][msg.sender] -= _value;\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function dividendsOf(address _shareholder) public view returns (uint256) {\r\n    return dividendsPerShare.mul(shares[_shareholder]).add(refund[_shareholder]).sub(deduction[_shareholder]) / CORRECTION;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalShares;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return shares[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /* INTERNAL FUNCTION */\r\n\r\n  function _giveShares(address _user, uint256 _ethereum) internal {\r\n    if (_ethereum > 0) {\r\n      totalShares = totalShares.add(_ethereum);\r\n      deduction[_user] = deduction[_user].add(dividendsPerShare.mul(_ethereum));\r\n      shares[_user] = shares[_user].add(_ethereum);\r\n      dividendsPerShare = dividendsPerShare.add(_ethereum.mul(CORRECTION) / totalShares);\r\n\r\n      emit Transfer(address(0), _user, _ethereum);\r\n    }\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _value) internal {\r\n    require(_to != address(0));\r\n    require(_value <= shares[_from]);\r\n    uint256 _rawProfit = dividendsPerShare.mul(_value);\r\n\r\n    uint256 _refund = refund[_from].add(_rawProfit);\r\n    uint256 _min = _refund < deduction[_from] ? _refund : deduction[_from];\r\n    refund[_from] = _refund.sub(_min);\r\n    deduction[_from] = deduction[_from].sub(_min);\r\n    deduction[_to] = deduction[_to].add(_rawProfit);\r\n\r\n    shares[_from] = shares[_from].sub(_value);\r\n    shares[_to] = shares[_to].add(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHGameBase\r\n * @author M.H. Kang\r\n */\r\ncontract CHGameBase is CHStock {\r\n\r\n  /* DATA STRUCT */\r\n\r\n  struct House {\r\n    Hunter hunter;\r\n    uint256 huntingPower;\r\n    uint256 offensePower;\r\n    uint256 defensePower;\r\n    uint256 huntingMultiplier;\r\n    uint256 offenseMultiplier;\r\n    uint256 defenseMultiplier;\r\n    uint256 depots;\r\n    uint256[] pets;\r\n  }\r\n\r\n  struct Hunter {\r\n    uint256 strength;\r\n    uint256 dexterity;\r\n    uint256 constitution;\r\n    uint256 resistance;\r\n  }\r\n\r\n  struct Store {\r\n    address owner;\r\n    uint256 cut;\r\n    uint256 cost;\r\n    uint256 balance;\r\n  }\r\n\r\n  /* STORAGE */\r\n\r\n  Store public store;\r\n  uint256 public devCut;\r\n  uint256 public devFee;\r\n  uint256 public altarCut;\r\n  uint256 public altarFund;\r\n  uint256 public dividendRate;\r\n  uint256 public totalChicken;\r\n  address public chickenTokenDelegator;\r\n  mapping (address => uint256) public lastSaveTime;\r\n  mapping (address => uint256) public savedChickenOf;\r\n  mapping (address => House) internal houses;\r\n\r\n  /* FUNCTION */\r\n\r\n  function saveChickenOf(address _user) public returns (uint256) {\r\n    uint256 _unclaimedChicken = _unclaimedChickenOf(_user);\r\n    totalChicken = totalChicken.add(_unclaimedChicken);\r\n    uint256 _chicken = savedChickenOf[_user].add(_unclaimedChicken);\r\n    savedChickenOf[_user] = _chicken;\r\n    lastSaveTime[_user] = block.timestamp;\r\n    return _chicken;\r\n  }\r\n\r\n  function transferChickenFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(msg.sender == chickenTokenDelegator);\r\n    require(saveChickenOf(_from) >= _value);\r\n    savedChickenOf[_from] = savedChickenOf[_from] - _value;\r\n    savedChickenOf[_to] = savedChickenOf[_to].add(_value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function chickenOf(address _user) public view returns (uint256) {\r\n    return savedChickenOf[_user].add(_unclaimedChickenOf(_user));\r\n  }\r\n\r\n  /* INTERNAL FUNCTION */\r\n\r\n  function _payChicken(address _user, uint256 _chicken) internal {\r\n    uint256 _unclaimedChicken = _unclaimedChickenOf(_user);\r\n    uint256 _extraChicken;\r\n\r\n    if (_chicken > _unclaimedChicken) {\r\n      _extraChicken = _chicken - _unclaimedChicken;\r\n      require(savedChickenOf[_user] >= _extraChicken);\r\n      savedChickenOf[_user] -= _extraChicken;\r\n      totalChicken -= _extraChicken;\r\n    } else {\r\n      _extraChicken = _unclaimedChicken - _chicken;\r\n      totalChicken = totalChicken.add(_extraChicken);\r\n      savedChickenOf[_user] += _extraChicken;\r\n    }\r\n\r\n    lastSaveTime[_user] = block.timestamp;\r\n  }\r\n\r\n  function _payEthereumAndDistribute(uint256 _cost) internal {\r\n    require(_cost * 100 / 100 == _cost);\r\n    _payEthereum(_cost);\r\n\r\n    uint256 _toShareholders = _cost * dividendRate / 100;\r\n    uint256 _toAltar = _cost * altarCut / 100;\r\n    uint256 _toStore = _cost * store.cut / 100;\r\n    devFee = devFee.add(_cost - _toShareholders - _toAltar - _toStore);\r\n\r\n    _giveShares(msg.sender, _toShareholders);\r\n    altarFund = altarFund.add(_toAltar);\r\n    store.balance = store.balance.add(_toStore);\r\n  }\r\n\r\n  function _payEthereum(uint256 _cost) internal {\r\n    uint256 _extra;\r\n    if (_cost > msg.value) {\r\n      _extra = _cost - msg.value;\r\n      require(ethereumBalance[msg.sender] >= _extra);\r\n      ethereumBalance[msg.sender] -= _extra;\r\n    } else {\r\n      _extra = msg.value - _cost;\r\n      ethereumBalance[msg.sender] = ethereumBalance[msg.sender].add(_extra);\r\n    }\r\n  }\r\n\r\n  function _unclaimedChickenOf(address _user) internal view returns (uint256) {\r\n    uint256 _timestamp = lastSaveTime[_user];\r\n    if (_timestamp > 0 && _timestamp < block.timestamp) {\r\n      return houses[_user].huntingPower.mul(\r\n        houses[_user].huntingMultiplier\r\n      ).mul(block.timestamp - _timestamp) / 100;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function _houseOf(address _user)\r\n    internal\r\n    view\r\n    returns (House storage _house)\r\n  {\r\n    _house = houses[_user];\r\n    require(_house.depots > 0);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHHunter\r\n * @author M.H. Kang\r\n */\r\ncontract CHHunter is CHGameBase {\r\n\r\n  /* EVENT */\r\n\r\n  event UpgradeHunter(\r\n    address indexed user,\r\n    string attribute,\r\n    uint256 to\r\n  );\r\n\r\n  /* DATA STRUCT */\r\n\r\n  struct Config {\r\n    uint256 chicken;\r\n    uint256 ethereum;\r\n    uint256 max;\r\n  }\r\n\r\n  /* STORAGE */\r\n\r\n  Config public typeA;\r\n  Config public typeB;\r\n\r\n  /* FUNCTION */\r\n\r\n  function upgradeStrength(uint256 _to) external payable {\r\n    House storage _house = _houseOf(msg.sender);\r\n    uint256 _from = _house.hunter.strength;\r\n    require(typeA.max >= _to && _to > _from);\r\n    _payForUpgrade(_from, _to, typeA);\r\n\r\n    uint256 _increment = _house.hunter.dexterity.mul(2).add(8).mul(_to.square() - _from ** 2);\r\n    _house.hunter.strength = _to;\r\n    _house.huntingPower = _house.huntingPower.add(_increment);\r\n    _house.offensePower = _house.offensePower.add(_increment);\r\n\r\n    emit UpgradeHunter(msg.sender, \"strength\", _to);\r\n  }\r\n\r\n  function upgradeDexterity(uint256 _to) external payable {\r\n    House storage _house = _houseOf(msg.sender);\r\n    uint256 _from = _house.hunter.dexterity;\r\n    require(typeB.max >= _to && _to > _from);\r\n    _payForUpgrade(_from, _to, typeB);\r\n\r\n    uint256 _increment = _house.hunter.strength.square().mul((_to - _from).mul(2));\r\n    _house.hunter.dexterity = _to;\r\n    _house.huntingPower = _house.huntingPower.add(_increment);\r\n    _house.offensePower = _house.offensePower.add(_increment);\r\n\r\n    emit UpgradeHunter(msg.sender, \"dexterity\", _to);\r\n  }\r\n\r\n  function upgradeConstitution(uint256 _to) external payable {\r\n    House storage _house = _houseOf(msg.sender);\r\n    uint256 _from = _house.hunter.constitution;\r\n    require(typeA.max >= _to && _to > _from);\r\n    _payForUpgrade(_from, _to, typeA);\r\n\r\n    uint256 _increment = _house.hunter.resistance.mul(2).add(8).mul(_to.square() - _from ** 2);\r\n    _house.hunter.constitution = _to;\r\n    _house.defensePower = _house.defensePower.add(_increment);\r\n\r\n    emit UpgradeHunter(msg.sender, \"constitution\", _to);\r\n  }\r\n\r\n  function upgradeResistance(uint256 _to) external payable {\r\n    House storage _house = _houseOf(msg.sender);\r\n    uint256 _from = _house.hunter.resistance;\r\n    require(typeB.max >= _to && _to > _from);\r\n    _payForUpgrade(_from, _to, typeB);\r\n\r\n    uint256 _increment = _house.hunter.constitution.square().mul((_to - _from).mul(2));\r\n    _house.hunter.resistance = _to;\r\n    _house.defensePower = _house.defensePower.add(_increment);\r\n\r\n    emit UpgradeHunter(msg.sender, \"resistance\", _to);\r\n  }\r\n\r\n  /* INTERNAL FUNCTION */\r\n\r\n  function _payForUpgrade(uint256 _from, uint256 _to, Config _type) internal {\r\n    uint256 _chickenCost = _type.chicken.mul(_gapOfCubeSum(_from, _to));\r\n    _payChicken(msg.sender, _chickenCost);\r\n    uint256 _ethereumCost = _type.ethereum.mul(_gapOfSquareSum(_from, _to));\r\n    _payEthereumAndDistribute(_ethereumCost);\r\n  }\r\n\r\n  function _gapOfSquareSum(uint256 _before, uint256 _after)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // max value is capped to uint32\r\n    return (_after * (_after - 1) * (2 * _after - 1) - _before * (_before - 1) * (2 * _before - 1)) / 6;\r\n  }\r\n\r\n  function _gapOfCubeSum(uint256 _before, uint256 _after)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // max value is capped to uint32\r\n    return ((_after * (_after - 1)) ** 2 - (_before * (_before - 1)) ** 2) >> 2;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHHouse\r\n * @author M.H. Kang\r\n */\r\ncontract CHHouse is CHHunter {\r\n\r\n  /* EVENT */\r\n\r\n  event UpgradePet(\r\n    address indexed user,\r\n    uint256 id,\r\n    uint256 to\r\n  );\r\n\r\n  event UpgradeDepot(\r\n    address indexed user,\r\n    uint256 to\r\n  );\r\n\r\n  event BuyItem(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed id,\r\n    uint256 cost\r\n  );\r\n\r\n  event BuyStore(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 cost\r\n  );\r\n\r\n  /* DATA STRUCT */\r\n\r\n  struct Pet {\r\n    uint256 huntingPower;\r\n    uint256 offensePower;\r\n    uint256 defensePower;\r\n    uint256 chicken;\r\n    uint256 ethereum;\r\n    uint256 max;\r\n  }\r\n\r\n  struct Item {\r\n    address owner;\r\n    uint256 huntingMultiplier;\r\n    uint256 offenseMultiplier;\r\n    uint256 defenseMultiplier;\r\n    uint256 cost;\r\n  }\r\n\r\n  struct Depot {\r\n    uint256 ethereum;\r\n    uint256 max;\r\n  }\r\n\r\n  /* STORAGE */\r\n\r\n  uint256 public constant INCREMENT_RATE = 12; // 120% for Item and Store\r\n  Depot public depot;\r\n  Pet[] public pets;\r\n  Item[] public items;\r\n\r\n  /* FUNCTION */\r\n\r\n  function buyDepots(uint256 _amount) external payable {\r\n    House storage _house = _houseOf(msg.sender);\r\n    _house.depots = _house.depots.add(_amount);\r\n    require(_house.depots <= depot.max);\r\n    _payEthereumAndDistribute(_amount.mul(depot.ethereum));\r\n\r\n    emit UpgradeDepot(msg.sender, _house.depots);\r\n  }\r\n\r\n  function buyPets(uint256 _id, uint256 _amount) external payable {\r\n    require(_id < pets.length);\r\n    Pet memory _pet = pets[_id];\r\n    uint256 _chickenCost = _amount * _pet.chicken;\r\n    _payChicken(msg.sender, _chickenCost);\r\n    uint256 _ethereumCost = _amount * _pet.ethereum;\r\n    _payEthereumAndDistribute(_ethereumCost);\r\n\r\n    House storage _house = _houseOf(msg.sender);\r\n    if (_house.pets.length < _id + 1) {\r\n      _house.pets.length = _id + 1;\r\n    }\r\n    _house.pets[_id] = _house.pets[_id].add(_amount);\r\n    require(_house.pets[_id] <= _pet.max);\r\n\r\n    _house.huntingPower = _house.huntingPower.add(_pet.huntingPower * _amount);\r\n    _house.offensePower = _house.offensePower.add(_pet.offensePower * _amount);\r\n    _house.defensePower = _house.defensePower.add(_pet.defensePower * _amount);\r\n\r\n    emit UpgradePet(msg.sender, _id, _house.pets[_id]);\r\n  }\r\n\r\n  // This is independent of Stock and Altar.\r\n  function buyItem(uint256 _id) external payable {\r\n    Item storage _item = items[_id];\r\n    address _from = _item.owner;\r\n    uint256 _price = _item.cost.mul(INCREMENT_RATE) / 10;\r\n    _payEthereum(_price);\r\n\r\n    saveChickenOf(_from);\r\n    House storage _fromHouse = _houseOf(_from);\r\n    _fromHouse.huntingMultiplier = _fromHouse.huntingMultiplier.sub(_item.huntingMultiplier);\r\n    _fromHouse.offenseMultiplier = _fromHouse.offenseMultiplier.sub(_item.offenseMultiplier);\r\n    _fromHouse.defenseMultiplier = _fromHouse.defenseMultiplier.sub(_item.defenseMultiplier);\r\n\r\n    saveChickenOf(msg.sender);\r\n    House storage _toHouse = _houseOf(msg.sender);\r\n    _toHouse.huntingMultiplier = _toHouse.huntingMultiplier.add(_item.huntingMultiplier);\r\n    _toHouse.offenseMultiplier = _toHouse.offenseMultiplier.add(_item.offenseMultiplier);\r\n    _toHouse.defenseMultiplier = _toHouse.defenseMultiplier.add(_item.defenseMultiplier);\r\n\r\n    uint256 _halfMargin = _price.sub(_item.cost) / 2;\r\n    devFee = devFee.add(_halfMargin);\r\n    ethereumBalance[_from] = ethereumBalance[_from].add(_price - _halfMargin);\r\n\r\n    items[_id].cost = _price;\r\n    items[_id].owner = msg.sender;\r\n\r\n    emit BuyItem(_from, msg.sender, _id, _price);\r\n  }\r\n\r\n  // This is independent of Stock and Altar.\r\n  function buyStore() external payable {\r\n    address _from = store.owner;\r\n    uint256 _price = store.cost.mul(INCREMENT_RATE) / 10;\r\n    _payEthereum(_price);\r\n\r\n    uint256 _halfMargin = (_price - store.cost) / 2;\r\n    devFee = devFee.add(_halfMargin);\r\n    ethereumBalance[_from] = ethereumBalance[_from].add(_price - _halfMargin).add(store.balance);\r\n\r\n    store.cost = _price;\r\n    store.owner = msg.sender;\r\n    delete store.balance;\r\n\r\n    emit BuyStore(_from, msg.sender, _price);\r\n  }\r\n\r\n  function withdrawStoreBalance() public {\r\n    ethereumBalance[store.owner] = ethereumBalance[store.owner].add(store.balance);\r\n    delete store.balance;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHArena\r\n * @author M.H. Kang\r\n */\r\ncontract CHArena is CHHouse {\r\n\r\n  /* EVENT */\r\n\r\n  event Attack(\r\n    address indexed attacker,\r\n    address indexed defender,\r\n    uint256 booty\r\n  );\r\n\r\n  /* STORAGE */\r\n\r\n  mapping(address => uint256) public attackCooldown;\r\n  uint256 public cooldownTime;\r\n\r\n  /* FUNCTION */\r\n\r\n  function attack(address _target) external {\r\n    require(attackCooldown[msg.sender] < block.timestamp);\r\n    House storage _attacker = houses[msg.sender];\r\n    House storage _defender = houses[_target];\r\n    if (_attacker.offensePower.mul(_attacker.offenseMultiplier)\r\n        > _defender.defensePower.mul(_defender.defenseMultiplier)) {\r\n      uint256 _chicken = saveChickenOf(_target);\r\n      _chicken = _defender.depots > 0 ? _chicken / _defender.depots : _chicken;\r\n      savedChickenOf[_target] = savedChickenOf[_target] - _chicken;\r\n      savedChickenOf[msg.sender] = savedChickenOf[msg.sender].add(_chicken);\r\n      attackCooldown[msg.sender] = block.timestamp + cooldownTime;\r\n\r\n      emit Attack(msg.sender, _target, _chicken);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHAltar\r\n * @author M.H. Kang\r\n */\r\ncontract CHAltar is CHArena {\r\n\r\n  /* EVENT */\r\n\r\n  event NewAltarRecord(uint256 id, uint256 ethereum);\r\n  event ChickenToAltar(address indexed user, uint256 id, uint256 chicken);\r\n  event EthereumFromAltar(address indexed user, uint256 id, uint256 ethereum);\r\n\r\n  /* DATA STRUCT */\r\n\r\n  struct AltarRecord {\r\n    uint256 ethereum;\r\n    uint256 chicken;\r\n  }\r\n\r\n  struct TradeBook {\r\n    uint256 altarRecordId;\r\n    uint256 chicken;\r\n  }\r\n\r\n  /* STORAGE */\r\n\r\n  uint256 public genesis;\r\n  mapping (uint256 => AltarRecord) public altarRecords;\r\n  mapping (address => TradeBook) public tradeBooks;\r\n\r\n  /* FUNCTION */\r\n\r\n  function chickenToAltar(uint256 _chicken) external {\r\n    require(_chicken > 0);\r\n\r\n    _payChicken(msg.sender, _chicken);\r\n    uint256 _id = _getCurrentAltarRecordId();\r\n    AltarRecord storage _altarRecord = _getAltarRecord(_id);\r\n    require(_altarRecord.ethereum * _chicken / _chicken == _altarRecord.ethereum);\r\n    TradeBook storage _tradeBook = tradeBooks[msg.sender];\r\n    if (_tradeBook.altarRecordId < _id) {\r\n      _resolveTradeBook(_tradeBook);\r\n      _tradeBook.altarRecordId = _id;\r\n    }\r\n    _altarRecord.chicken = _altarRecord.chicken.add(_chicken);\r\n    _tradeBook.chicken += _chicken;\r\n\r\n    emit ChickenToAltar(msg.sender, _id, _chicken);\r\n  }\r\n\r\n  function ethereumFromAltar() external {\r\n    uint256 _id = _getCurrentAltarRecordId();\r\n    TradeBook storage _tradeBook = tradeBooks[msg.sender];\r\n    require(_tradeBook.altarRecordId < _id);\r\n    _resolveTradeBook(_tradeBook);\r\n  }\r\n\r\n  function tradeBookOf(address _user)\r\n    public\r\n    view\r\n    returns (\r\n      uint256 _id,\r\n      uint256 _ethereum,\r\n      uint256 _totalChicken,\r\n      uint256 _chicken,\r\n      uint256 _income\r\n    )\r\n  {\r\n    TradeBook memory _tradeBook = tradeBooks[_user];\r\n    _id = _tradeBook.altarRecordId;\r\n    _chicken = _tradeBook.chicken;\r\n    AltarRecord memory _altarRecord = altarRecords[_id];\r\n    _totalChicken = _altarRecord.chicken;\r\n    _ethereum = _altarRecord.ethereum;\r\n    _income = _totalChicken > 0 ? _ethereum.mul(_chicken) / _totalChicken : 0;\r\n  }\r\n\r\n  /* INTERNAL FUNCTION */\r\n\r\n  function _resolveTradeBook(TradeBook storage _tradeBook) internal {\r\n    if (_tradeBook.chicken > 0) {\r\n      AltarRecord memory _oldAltarRecord = altarRecords[_tradeBook.altarRecordId];\r\n      uint256 _ethereum = _oldAltarRecord.ethereum.mul(_tradeBook.chicken) / _oldAltarRecord.chicken;\r\n      delete _tradeBook.chicken;\r\n      ethereumBalance[msg.sender] = ethereumBalance[msg.sender].add(_ethereum);\r\n\r\n      emit EthereumFromAltar(msg.sender, _tradeBook.altarRecordId, _ethereum);\r\n    }\r\n  }\r\n\r\n  function _getCurrentAltarRecordId() internal view returns (uint256) {\r\n    return (block.timestamp - genesis) / 86400;\r\n  }\r\n\r\n  function _getAltarRecord(uint256 _id) internal returns (AltarRecord storage _altarRecord) {\r\n    _altarRecord = altarRecords[_id];\r\n    if (_altarRecord.ethereum == 0) {\r\n      uint256 _ethereum = altarFund / 10;\r\n      _altarRecord.ethereum = _ethereum;\r\n      altarFund -= _ethereum;\r\n\r\n      emit NewAltarRecord(_id, _ethereum);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CHCommittee\r\n * @author M.H. Kang\r\n */\r\ncontract CHCommittee is CHAltar {\r\n\r\n  /* EVENT */\r\n\r\n  event NewPet(\r\n    uint256 id,\r\n    uint256 huntingPower,\r\n    uint256 offensePower,\r\n    uint256 defense,\r\n    uint256 chicken,\r\n    uint256 ethereum,\r\n    uint256 max\r\n  );\r\n\r\n  event ChangePet(\r\n    uint256 id,\r\n    uint256 chicken,\r\n    uint256 ethereum,\r\n    uint256 max\r\n  );\r\n\r\n  event NewItem(\r\n    uint256 id,\r\n    uint256 huntingMultiplier,\r\n    uint256 offenseMultiplier,\r\n    uint256 defenseMultiplier,\r\n    uint256 ethereum\r\n  );\r\n\r\n  event SetDepot(uint256 ethereum, uint256 max);\r\n\r\n  event SetConfiguration(\r\n    uint256 chickenA,\r\n    uint256 ethereumA,\r\n    uint256 maxA,\r\n    uint256 chickenB,\r\n    uint256 ethereumB,\r\n    uint256 maxB\r\n  );\r\n\r\n  event SetDistribution(\r\n    uint256 dividendRate,\r\n    uint256 altarCut,\r\n    uint256 storeCut,\r\n    uint256 devCut\r\n  );\r\n\r\n  event SetCooldownTime(uint256 cooldownTime);\r\n  event SetNameAndSymbol(string name, string symbol);\r\n  event SetDeveloper(address developer);\r\n  event SetCommittee(address committee);\r\n\r\n  /* STORAGE */\r\n\r\n  address public committee;\r\n  address public developer;\r\n\r\n  /* FUNCTION */\r\n\r\n  function callFor(address _to, uint256 _value, uint256 _gas, bytes _code)\r\n    external\r\n    payable\r\n    onlyCommittee\r\n    returns (bool)\r\n  {\r\n    return _to.call.value(_value).gas(_gas)(_code);\r\n  }\r\n\r\n  function addPet(\r\n    uint256 _huntingPower,\r\n    uint256 _offensePower,\r\n    uint256 _defense,\r\n    uint256 _chicken,\r\n    uint256 _ethereum,\r\n    uint256 _max\r\n  )\r\n    public\r\n    onlyCommittee\r\n  {\r\n    require(_max > 0);\r\n    require(_max == uint256(uint32(_max)));\r\n    uint256 _newLength = pets.push(\r\n      Pet(_huntingPower, _offensePower, _defense, _chicken, _ethereum, _max)\r\n    );\r\n\r\n    emit NewPet(\r\n      _newLength - 1,\r\n      _huntingPower,\r\n      _offensePower,\r\n      _defense,\r\n      _chicken,\r\n      _ethereum,\r\n      _max\r\n    );\r\n  }\r\n\r\n  function changePet(\r\n    uint256 _id,\r\n    uint256 _chicken,\r\n    uint256 _ethereum,\r\n    uint256 _max\r\n  )\r\n    public\r\n    onlyCommittee\r\n  {\r\n    require(_id < pets.length);\r\n    Pet storage _pet = pets[_id];\r\n    require(_max >= _pet.max && _max == uint256(uint32(_max)));\r\n\r\n    _pet.chicken = _chicken;\r\n    _pet.ethereum = _ethereum;\r\n    _pet.max = _max;\r\n\r\n    emit ChangePet(_id, _chicken, _ethereum, _max);\r\n  }\r\n\r\n  function addItem(\r\n    uint256 _huntingMultiplier,\r\n    uint256 _offenseMultiplier,\r\n    uint256 _defenseMultiplier,\r\n    uint256 _price\r\n  )\r\n    public\r\n    onlyCommittee\r\n  {\r\n    uint256 _cap = 1 << 16;\r\n    require(\r\n      _huntingMultiplier < _cap &&\r\n      _offenseMultiplier < _cap &&\r\n      _defenseMultiplier < _cap\r\n    );\r\n    saveChickenOf(committee);\r\n    House storage _house = _houseOf(committee);\r\n    _house.huntingMultiplier = _house.huntingMultiplier.add(_huntingMultiplier);\r\n    _house.offenseMultiplier = _house.offenseMultiplier.add(_offenseMultiplier);\r\n    _house.defenseMultiplier = _house.defenseMultiplier.add(_defenseMultiplier);\r\n\r\n    uint256 _newLength = items.push(\r\n      Item(\r\n        committee,\r\n        _huntingMultiplier,\r\n        _offenseMultiplier,\r\n        _defenseMultiplier,\r\n        _price\r\n      )\r\n    );\r\n\r\n    emit NewItem(\r\n      _newLength - 1,\r\n      _huntingMultiplier,\r\n      _offenseMultiplier,\r\n      _defenseMultiplier,\r\n      _price\r\n    );\r\n  }\r\n\r\n  function setDepot(uint256 _price, uint256 _max) public onlyCommittee {\r\n    require(_max >= depot.max);\r\n\r\n    depot.ethereum = _price;\r\n    depot.max = _max;\r\n\r\n    emit SetDepot(_price, _max);\r\n  }\r\n\r\n  function setConfiguration(\r\n    uint256 _chickenA,\r\n    uint256 _ethereumA,\r\n    uint256 _maxA,\r\n    uint256 _chickenB,\r\n    uint256 _ethereumB,\r\n    uint256 _maxB\r\n  )\r\n    public\r\n    onlyCommittee\r\n  {\r\n    require(_maxA >= typeA.max && (_maxA == uint256(uint32(_maxA))));\r\n    require(_maxB >= typeB.max && (_maxB == uint256(uint32(_maxB))));\r\n\r\n    typeA.chicken = _chickenA;\r\n    typeA.ethereum = _ethereumA;\r\n    typeA.max = _maxA;\r\n\r\n    typeB.chicken = _chickenB;\r\n    typeB.ethereum = _ethereumB;\r\n    typeB.max = _maxB;\r\n\r\n    emit SetConfiguration(_chickenA, _ethereumA, _maxA, _chickenB, _ethereumB, _maxB);\r\n  }\r\n\r\n  function setDistribution(\r\n    uint256 _dividendRate,\r\n    uint256 _altarCut,\r\n    uint256 _storeCut,\r\n    uint256 _devCut\r\n  )\r\n    public\r\n    onlyCommittee\r\n  {\r\n    require(_storeCut > 0);\r\n    require(\r\n      _dividendRate.add(_altarCut).add(_storeCut).add(_devCut) == 100\r\n    );\r\n\r\n    dividendRate = _dividendRate;\r\n    altarCut = _altarCut;\r\n    store.cut = _storeCut;\r\n    devCut = _devCut;\r\n\r\n    emit SetDistribution(_dividendRate, _altarCut, _storeCut, _devCut);\r\n  }\r\n\r\n  function setCooldownTime(uint256 _cooldownTime) public onlyCommittee {\r\n    cooldownTime = _cooldownTime;\r\n\r\n    emit SetCooldownTime(_cooldownTime);\r\n  }\r\n\r\n  function setNameAndSymbol(string _name, string _symbol)\r\n    public\r\n    onlyCommittee\r\n  {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    emit SetNameAndSymbol(_name, _symbol);\r\n  }\r\n\r\n  function setDeveloper(address _developer) public onlyCommittee {\r\n    require(_developer != address(0));\r\n    withdrawDevFee();\r\n    developer = _developer;\r\n\r\n    emit SetDeveloper(_developer);\r\n  }\r\n\r\n  function setCommittee(address _committee) public onlyCommittee {\r\n    require(_committee != address(0));\r\n    committee = _committee;\r\n\r\n    emit SetCommittee(_committee);\r\n  }\r\n\r\n  function withdrawDevFee() public {\r\n    ethereumBalance[developer] = ethereumBalance[developer].add(devFee);\r\n    delete devFee;\r\n  }\r\n\r\n  /* MODIFIER */\r\n\r\n  modifier onlyCommittee {\r\n    require(msg.sender == committee);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ChickenHunt\r\n * @author M.H. Kang\r\n */\r\ncontract ChickenHunt is CHCommittee {\r\n\r\n  /* EVENT */\r\n\r\n  event Join(address user);\r\n\r\n  /* CONSTRUCTOR */\r\n\r\n  constructor() public {\r\n    committee = msg.sender;\r\n    developer = msg.sender;\r\n  }\r\n\r\n  /* FUNCTION */\r\n\r\n  function init(address _chickenTokenDelegator) external onlyCommittee {\r\n    require(chickenTokenDelegator == address(0));\r\n    chickenTokenDelegator = _chickenTokenDelegator;\r\n    genesis = 1525791600;\r\n    join();\r\n    store.owner = msg.sender;\r\n    store.cost = 0.1 ether;\r\n    setConfiguration(100, 0.00001 ether, 99, 100000, 0.001 ether, 9);\r\n    setDistribution(20, 75, 1, 4);\r\n    setCooldownTime(600);\r\n    setDepot(0.05 ether, 9);\r\n    addItem(5, 5, 0, 0.01 ether);\r\n    addItem(0, 0, 5, 0.01 ether);\r\n    addPet(1000, 0, 0, 100000, 0.01 ether, 9);\r\n    addPet(0, 1000, 0, 100000, 0.01 ether, 9);\r\n    addPet(0, 0, 1000, 202500, 0.01 ether, 9);\r\n  }\r\n\r\n  function withdraw() external {\r\n    uint256 _ethereum = ethereumBalance[msg.sender];\r\n    delete ethereumBalance[msg.sender];\r\n    msg.sender.transfer(_ethereum);\r\n  }\r\n\r\n  function join() public {\r\n    House storage _house = houses[msg.sender];\r\n    require(_house.depots == 0);\r\n    _house.hunter = Hunter(1, 1, 1, 1);\r\n    _house.depots = 1;\r\n    _house.huntingPower = 10;\r\n    _house.offensePower = 10;\r\n    _house.defensePower = 110;\r\n    _house.huntingMultiplier = 10;\r\n    _house.offenseMultiplier = 10;\r\n    _house.defenseMultiplier = 10;\r\n    lastSaveTime[msg.sender] = block.timestamp;\r\n\r\n    emit Join(msg.sender);\r\n  }\r\n\r\n  function hunterOf(address _user)\r\n    public\r\n    view\r\n    returns (\r\n      uint256 _strength,\r\n      uint256 _dexterity,\r\n      uint256 _constitution,\r\n      uint256 _resistance\r\n    )\r\n  {\r\n    Hunter memory _hunter = houses[_user].hunter;\r\n    return (\r\n      _hunter.strength,\r\n      _hunter.dexterity,\r\n      _hunter.constitution,\r\n      _hunter.resistance\r\n    );\r\n  }\r\n\r\n  function detailsOf(address _user)\r\n    public\r\n    view\r\n    returns (\r\n      uint256[2] _hunting,\r\n      uint256[2] _offense,\r\n      uint256[2] _defense,\r\n      uint256[4] _hunter,\r\n      uint256[] _pets,\r\n      uint256 _depots,\r\n      uint256 _savedChicken,\r\n      uint256 _lastSaveTime,\r\n      uint256 _cooldown\r\n    )\r\n  {\r\n    House memory _house = houses[_user];\r\n\r\n    _hunting = [_house.huntingPower, _house.huntingMultiplier];\r\n    _offense = [_house.offensePower, _house.offenseMultiplier];\r\n    _defense = [_house.defensePower, _house.defenseMultiplier];\r\n    _hunter = [\r\n      _house.hunter.strength,\r\n      _house.hunter.dexterity,\r\n      _house.hunter.constitution,\r\n      _house.hunter.resistance\r\n    ];\r\n    _pets = _house.pets;\r\n    _depots = _house.depots;\r\n    _savedChicken = savedChickenOf[_user];\r\n    _lastSaveTime = lastSaveTime[_user];\r\n    _cooldown = attackCooldown[_user];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_shareholder\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depot\",\"outputs\":[{\"name\":\"ethereum\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyPets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"detailsOf\",\"outputs\":[{\"name\":\"_hunting\",\"type\":\"uint256[2]\"},{\"name\":\"_offense\",\"type\":\"uint256[2]\"},{\"name\":\"_defense\",\"type\":\"uint256[2]\"},{\"name\":\"_hunter\",\"type\":\"uint256[4]\"},{\"name\":\"_pets\",\"type\":\"uint256[]\"},{\"name\":\"_depots\",\"type\":\"uint256\"},{\"name\":\"_savedChicken\",\"type\":\"uint256\"},{\"name\":\"_lastSaveTime\",\"type\":\"uint256\"},{\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendRate\",\"type\":\"uint256\"},{\"name\":\"_altarCut\",\"type\":\"uint256\"},{\"name\":\"_storeCut\",\"type\":\"uint256\"},{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"name\":\"setDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chickenTokenDelegator\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"upgradeDexterity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altarCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStoreBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typeB\",\"outputs\":[{\"name\":\"chicken\",\"type\":\"uint256\"},{\"name\":\"ethereum\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chicken\",\"type\":\"uint256\"}],\"name\":\"chickenToAltar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyStore\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"upgradeConstitution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_huntingMultiplier\",\"type\":\"uint256\"},{\"name\":\"_offenseMultiplier\",\"type\":\"uint256\"},{\"name\":\"_defenseMultiplier\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"upgradeResistance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INCREMENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"chickenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cooldownTime\",\"type\":\"uint256\"}],\"name\":\"setCooldownTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyDepots\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typeA\",\"outputs\":[{\"name\":\"chicken\",\"type\":\"uint256\"},{\"name\":\"ethereum\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setDepot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"savedChickenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_huntingPower\",\"type\":\"uint256\"},{\"name\":\"_offensePower\",\"type\":\"uint256\"},{\"name\":\"_defense\",\"type\":\"uint256\"},{\"name\":\"_chicken\",\"type\":\"uint256\"},{\"name\":\"_ethereum\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"addPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cut\",\"type\":\"uint256\"},{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethereumFromAltar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hunterOf\",\"outputs\":[{\"name\":\"_strength\",\"type\":\"uint256\"},{\"name\":\"_dexterity\",\"type\":\"uint256\"},{\"name\":\"_constitution\",\"type\":\"uint256\"},{\"name\":\"_resistance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"altarRecords\",\"outputs\":[{\"name\":\"ethereum\",\"type\":\"uint256\"},{\"name\":\"chicken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooldownTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chickenA\",\"type\":\"uint256\"},{\"name\":\"_ethereumA\",\"type\":\"uint256\"},{\"name\":\"_maxA\",\"type\":\"uint256\"},{\"name\":\"_chickenB\",\"type\":\"uint256\"},{\"name\":\"_ethereumB\",\"type\":\"uint256\"},{\"name\":\"_maxB\",\"type\":\"uint256\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeBooks\",\"outputs\":[{\"name\":\"altarRecordId\",\"type\":\"uint256\"},{\"name\":\"chicken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"setCommittee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"huntingMultiplier\",\"type\":\"uint256\"},{\"name\":\"offenseMultiplier\",\"type\":\"uint256\"},{\"name\":\"defenseMultiplier\",\"type\":\"uint256\"},{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalChicken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gas\",\"type\":\"uint256\"},{\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"callFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferChickenFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORRECTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pets\",\"outputs\":[{\"name\":\"huntingPower\",\"type\":\"uint256\"},{\"name\":\"offensePower\",\"type\":\"uint256\"},{\"name\":\"defensePower\",\"type\":\"uint256\"},{\"name\":\"chicken\",\"type\":\"uint256\"},{\"name\":\"ethereum\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tradeBookOf\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_ethereum\",\"type\":\"uint256\"},{\"name\":\"_totalChicken\",\"type\":\"uint256\"},{\"name\":\"_chicken\",\"type\":\"uint256\"},{\"name\":\"_income\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"upgradeStrength\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"committee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chickenTokenDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"saveChickenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altarFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSaveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"attackCooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_chicken\",\"type\":\"uint256\"},{\"name\":\"_ethereum\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"changePet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"setDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"huntingPower\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offensePower\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defense\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chicken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"NewPet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chicken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ChangePet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"huntingMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offenseMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defenseMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"}],\"name\":\"NewItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"SetDepot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"chickenA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chickenB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxB\",\"type\":\"uint256\"}],\"name\":\"SetConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"altarCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"storeCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"devCut\",\"type\":\"uint256\"}],\"name\":\"SetDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cooldownTime\",\"type\":\"uint256\"}],\"name\":\"SetCooldownTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetNameAndSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"SetDeveloper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"committee\",\"type\":\"address\"}],\"name\":\"SetCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"}],\"name\":\"NewAltarRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chicken\",\"type\":\"uint256\"}],\"name\":\"ChickenToAltar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereum\",\"type\":\"uint256\"}],\"name\":\"EthereumFromAltar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attacker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"defender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"booty\",\"type\":\"uint256\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"UpgradePet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"UpgradeDepot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"BuyItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"BuyStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"attribute\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"UpgradeHunter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"RedeemShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ChickenHunt","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6f087fe4031eb79d8bd609c9571aea4625e9f63c3da4813d397f2c390ef85cf"}]}