{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Moneda {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function burn() public;\r\n}\r\n\r\ncontract MonedaICO {\r\n    using SafeMath for uint256;\r\n    \r\n    struct DateRate {\r\n        uint256 date;\r\n        uint256 rate;\r\n    }\r\n\r\n    // PreICO\r\n    uint256 constant public preICOLimit = 20000000e18; // Pre-ICO limit 5%, 20mil\r\n    DateRate public preICO = DateRate(1525132799, 6750); // Monday, April 30, 2018 11:59:59 PM --- 35% Bonus\r\n    uint256 public pre_tokensSold = 0;\r\n    \r\n    // ICO\r\n    DateRate public icoStarts = DateRate(1526342400, 5750); // Tuesday, May 15, 2018 12:00:00 AM --- 15% Bonus\r\n    DateRate public icoEndOfStageA = DateRate(1529020800, 5500); // Friday, June 15, 2018 12:00:00 AM --- 10% Bonus\r\n    DateRate public icoEndOfStageB = DateRate(1530316800, 5250); // Saturday, June 30, 2018 12:00:00 AM --- 5% Bonus\r\n    DateRate public icoEnds = DateRate(1531699199, 5000); // Sunday, July 15, 2018 11:59:59 PM --- 0% Bonus\r\n    uint256 constant public icoLimit = 250000000e18; // ICO limit 62.5%, 250mil\r\n    uint256 public tokensSold = 0;\r\n\r\n    // If the funding goal is not reached, token holders may withdraw their funds\r\n    uint constant public fundingGoal = 10000000e18; // 10mil\r\n    // How much has been raised by crowdale (in ETH)\r\n    uint public amountRaised;\r\n    // The balances (in ETH) of all token holders\r\n    mapping(address => uint) public balances;\r\n    // Indicates if the crowdsale has been ended already\r\n    bool public crowdsaleEnded = false;\r\n    // Tokens will be transfered from this address\r\n    address public tokenOwner;\r\n    // The address of the token contract\r\n    Moneda public tokenReward;\r\n    // The wallet on which the funds will be stored\r\n    address public wallet;\r\n    // Notifying transfers and the success of the crowdsale\r\n    event GoalReached(address tokenOwner, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution, uint amountRaised);\r\n    \r\n    function MonedaICO(Moneda token, address walletAddr, address tokenOwnerAddr) public {\r\n        tokenReward = token;\r\n        wallet = walletAddr;\r\n        tokenOwner = tokenOwnerAddr;\r\n    }\r\n\r\n    function () external payable {\r\n        require(msg.sender != wallet);\r\n        exchange(msg.sender);\r\n    }\r\n\r\n    function exchange(address receiver) public payable {\r\n        uint256 amount = msg.value;\r\n        uint256 price = getRate();\r\n        uint256 numTokens = amount.mul(price);\r\n        \r\n        bool isPreICO = (now <= preICO.date);\r\n        bool isICO = (now >= icoStarts.date && now <= icoEnds.date);\r\n        \r\n        require(isPreICO || isICO);\r\n        require(numTokens > 500);\r\n        \r\n        if (isPreICO) {\r\n            require(!crowdsaleEnded && pre_tokensSold.add(numTokens) <= preICOLimit);\r\n            require(numTokens <= 5000000e18);\r\n        }\r\n        \r\n        if (isICO) {\r\n            require(!crowdsaleEnded && tokensSold.add(numTokens) <= icoLimit);\r\n        }\r\n\r\n        wallet.transfer(amount);\r\n        balances[receiver] = balances[receiver].add(amount);\r\n        amountRaised = amountRaised.add(amount);\r\n\r\n        if (isPreICO)\r\n            pre_tokensSold = pre_tokensSold.add(numTokens);\r\n        if (isICO)\r\n            tokensSold = tokensSold.add(numTokens);\r\n        \r\n        assert(tokenReward.transferFrom(tokenOwner, receiver, numTokens));\r\n        emit FundTransfer(receiver, amount, true, amountRaised);\r\n    }\r\n\r\n    function getRate() public view returns (uint256) {\r\n        if (now <= preICO.date)\r\n            return preICO.rate;\r\n            \r\n        if (now < icoEndOfStageA.date)\r\n            return icoStarts.rate;\r\n            \r\n        if (now < icoEndOfStageB.date)\r\n            return icoEndOfStageA.rate;\r\n            \r\n        if (now < icoEnds.date)\r\n            return icoEndOfStageB.rate;\r\n        \r\n        return icoEnds.rate;\r\n    }\r\n    \r\n    // Checks if the goal or time limit has been reached and ends the campaign\r\n    function checkGoalReached() public {\r\n        require(now >= icoEnds.date);\r\n        if (pre_tokensSold.add(tokensSold) >= fundingGoal){\r\n            tokenReward.burn(); // Burn remaining tokens but the reserved ones\r\n            emit GoalReached(tokenOwner, amountRaised);\r\n        }\r\n        crowdsaleEnded = true;\r\n    }\r\n    \r\n    // Allows the funders to withdraw their funds if the goal has not been reached.\r\n    // Only works after funds have been returned from the wallet.\r\n    function safeWithdrawal() public {\r\n        require(now >= icoEnds.date);\r\n        uint amount = balances[msg.sender];\r\n        if (address(this).balance >= amount) {\r\n            balances[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                msg.sender.transfer(amount);\r\n                emit FundTransfer(msg.sender, amount, false, amountRaised);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndOfStageA\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICO\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEnds\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStarts\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndOfStageB\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"walletAddr\",\"type\":\"address\"},{\"name\":\"tokenOwnerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"MonedaICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007c6f0f0bb581e479f72c31abb6a89013cbba5b7a00000000000000000000000029cb184d45895418d28e4eb1fc66aa84ff900a810000000000000000000000001387780788f8e42777075babdf7bf1c49515b130","Library":"","SwarmSource":"bzzr://8db8adfef0217283ed2df2ebad4cf7bb98a4a479f55e4336d88aedc68f923b97"}]}