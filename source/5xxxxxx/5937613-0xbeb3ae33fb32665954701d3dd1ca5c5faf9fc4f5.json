{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract ARPHoldingWallet {\r\n    using SafeERC20 for ERC20;\r\n\r\n    // Middle term holding\r\n    uint256 constant MID_TERM   = 1 finney; // = 0.001 ether\r\n    // Long term holding\r\n    uint256 constant LONG_TERM  = 2 finney; // = 0.002 ether\r\n\r\n    uint256 constant GAS_LIMIT  = 200000;\r\n\r\n    address owner;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20 arpToken;\r\n    address midTermHolding;\r\n    address longTermHolding;\r\n\r\n    /// Initialize the contract\r\n    constructor(address _owner, ERC20 _arpToken, address _midTermHolding, address _longTermHolding) public {\r\n        owner = _owner;\r\n        arpToken = _arpToken;\r\n        midTermHolding = _midTermHolding;\r\n        longTermHolding = _longTermHolding;\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    function() payable public {\r\n        require(msg.sender == owner);\r\n\r\n        if (msg.value == MID_TERM) {\r\n            depositOrWithdraw(midTermHolding);\r\n        } else if (msg.value == LONG_TERM) {\r\n            depositOrWithdraw(longTermHolding);\r\n        } else if (msg.value == 0) {\r\n            drain();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function depositOrWithdraw(address _holding) private {\r\n        uint256 amount = arpToken.balanceOf(address(this));\r\n        if (amount > 0) {\r\n            arpToken.safeApprove(_holding, amount);\r\n        }\r\n        require(_holding.call.gas(GAS_LIMIT)());\r\n        amount = arpToken.balanceOf(address(this));\r\n        if (amount > 0) {\r\n            arpToken.safeTransfer(msg.sender, amount);\r\n        }\r\n        msg.sender.transfer(msg.value);\r\n    }\r\n\r\n    /// Drains ARP.\r\n    function drain() private {\r\n        uint256 amount = arpToken.balanceOf(address(this));\r\n        require(amount > 0);\r\n\r\n        arpToken.safeTransfer(owner, amount);\r\n    }\r\n}\r\n\r\ncontract ARPHoldingWalletCreator {\r\n    /* \r\n     * EVENTS\r\n     */\r\n    event Created(address indexed _owner, address _wallet);\r\n\r\n    mapping (address => address) public wallets;\r\n    ERC20 public arpToken;\r\n    address public midTermHolding;\r\n    address public longTermHolding;\r\n\r\n    constructor(ERC20 _arpToken, address _midTermHolding, address _longTermHolding) public {\r\n        arpToken = _arpToken;\r\n        midTermHolding = _midTermHolding;\r\n        longTermHolding = _longTermHolding;\r\n    }\r\n\r\n    function() public {\r\n        require(wallets[msg.sender] == address(0x0));\r\n\r\n        address wallet = new ARPHoldingWallet(msg.sender, arpToken, midTermHolding, longTermHolding);\r\n        wallets[msg.sender] = wallet;\r\n\r\n        emit Created(msg.sender, wallet);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"midTermHolding\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arpToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"longTermHolding\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arpToken\",\"type\":\"address\"},{\"name\":\"_midTermHolding\",\"type\":\"address\"},{\"name\":\"_longTermHolding\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"}]","ContractName":"ARPHoldingWalletCreator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000beb6fdf4ef6ceb975157be43cbe0047b248a892200000000000000000000000001c91a1b352a2903bc8378e5f645c9bc8685029e000000000000000000000000d619188e50d9270a34b9c6860c82d83af3afe374","Library":"","SwarmSource":"bzzr://bb5e28fedfc51d396a5e3b299b67775563f0e585c687392b00c68276323a33ec"}]}