{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC223\r\n *\r\n * https://github.com/Dexaran/ERC223-token-standard\r\n */\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n\r\n    // ERC223 and ERC20 functions and events\r\n    function balanceOf(address who) public view returns (uint);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n\r\n    // ERC223 functions\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n\r\n    // ERC20 functions and events\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/*\r\n * @title ContractReceiver\r\n * Contract that is working with ERC223 tokens\r\n */\r\ncontract ContractReceiver {\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n\r\n        /* tkn variable is analogue of msg variable of Ether transaction\r\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n         * tkn.data is data of token transaction   (analogue of msg.data)\r\n         * tkn.sig is 4 bytes signature of function\r\n         * if data of token transaction is a function execution\r\n         */\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ExhaustionCoin\r\n */\r\ncontract ExhaustionCoin is ERC223, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"ExhaustionCoin\";\r\n    string public symbol = \"EXST\";\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply = 500e9 * 1e8;\r\n    uint256 public distributeAmount = 0;\r\n    bool public mintingFinished = false;\r\n\r\n    address public Addr1 = 0x68FF231F1AF6e982437a157db8DeddCf91878220;\r\n    address public Addr2 = 0x97D3b60C2266484F415B7549B8E8fd73a66BF5e7;\r\n    address public Addr3 = 0xaadA9D72f0b560f47B7e19eE26A6fBB78566CA24;\r\n    address public Addr4 = 0xE7A55Cf0642A497921b67893D5a7cDF51B389f46;\r\n    address public Addr5 = 0x55BA76b349669fF87367D98e7767C38396677aA3;\r\n    address public Addr6 = 0xedF3dC209d58f7C05b7f5dC807F28A2835bC987a;\r\n    address public Addr7 = 0x19839dC3b6981Fc511dc00fEc42C5aE549Eb51cD;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event LockedFunds(address indexed target, uint256 locked);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    function ExhaustionCoin() public {\r\n        owner = Addr1;\r\n\r\n        balanceOf[Addr1] = totalSupply.mul(20).div(100);\r\n        balanceOf[Addr2] = totalSupply.mul(10).div(100);\r\n        balanceOf[Addr3] = totalSupply.mul(10).div(100);\r\n        balanceOf[Addr4] = totalSupply.mul(20).div(100);\r\n        balanceOf[Addr5] = totalSupply.mul(20).div(100);\r\n        balanceOf[Addr6] = totalSupply.mul(10).div(100);\r\n        balanceOf[Addr7] = totalSupply.mul(10).div(100);\r\n\r\n    }\r\n\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for (uint j = 0; j < targets.length; j++) {\r\n            require(targets[j] != 0x0);\r\n            frozenAccount[targets[j]] = isFrozen;\r\n            FrozenFunds(targets[j], isFrozen);\r\n        }\r\n    }\r\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\n        require(targets.length > 0 && targets.length == unixTimes.length);\r\n\r\n        for(uint j = 0; j < targets.length; j++){\r\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\r\n            unlockUnixTime[targets[j]] = unixTimes[j];\r\n            LockedFunds(targets[j], unixTimes[j]);\r\n        }\r\n    }\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n        if (isContract(_to)) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balanceOf[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\r\n        require(_unitAmount > 0\r\n                && balanceOf[_from] >= _unitAmount);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\r\n        totalSupply = totalSupply.sub(_unitAmount);\r\n        Burn(_from, _unitAmount);\r\n    }\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\r\n        require(_unitAmount > 0);\r\n\r\n        totalSupply = totalSupply.add(_unitAmount);\r\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\r\n        Mint(_to, _unitAmount);\r\n        Transfer(address(0), _to, _unitAmount);\r\n        return true;\r\n    }\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    function distributeAirdrop(address[] addresses, uint256 amount) public returns (bool) {\r\n        require(amount > 0\r\n                && addresses.length > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        amount = amount.mul(1e8);\r\n        uint256 totalAmount = amount.mul(addresses.length);\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            require(addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\r\n            Transfer(msg.sender, addresses[j], amount);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n    function distributeAirdrop(address[] addresses, uint[] amounts) public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for(uint j = 0; j < addresses.length; j++){\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            amounts[j] = amounts[j].mul(1e8);\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n        }\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        for (j = 0; j < addresses.length; j++) {\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\r\n            Transfer(msg.sender, addresses[j], amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            amounts[j] = amounts[j].mul(1e8);\r\n            require(balanceOf[addresses[j]] >= amounts[j]);\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j]);\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n            Transfer(addresses[j], msg.sender, amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\r\n        return true;\r\n    }\r\n    function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\r\n        distributeAmount = _unitAmount;\r\n    }\r\n    function autoDistribute() payable public {\r\n        require(distributeAmount > 0\r\n                && balanceOf[Addr1] >= distributeAmount\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n        if(msg.value > 0) Addr1.transfer(msg.value);\r\n\r\n        balanceOf[Addr1] = balanceOf[Addr1].sub(distributeAmount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);\r\n        Transfer(Addr1, msg.sender, distributeAmount);\r\n    }\r\n    function() payable public {\r\n        autoDistribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr7\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr6\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Addr4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoDistribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"setDistributeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ExhaustionCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e3018f08bdfca605aaccfda0a5fd57b9a46ea4ccbfe344a790f21ff22596751b"}]}