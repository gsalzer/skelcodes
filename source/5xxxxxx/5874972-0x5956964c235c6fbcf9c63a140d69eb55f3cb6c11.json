{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract BSPMintable is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Mint(uint256 amount);\r\n  event DistributorChanged(address indexed previousDistributor, address indexed newDistributor);\r\n\r\n  address public distributor = 0x4F91C1f068E0dED2B7fF823289Add800E1c26Fc3;\r\n\r\n  // BSP contract address\r\n  ERC20Basic public BSPToken = ERC20Basic(0x5d551fA77ec2C7dd1387B626c4f33235c3885199);\r\n  // lock 30% total supply of BSP for mining\r\n  uint256 constant public rewardAmount = 630000000 * (10 ** 18);\r\n  // mining duration\r\n  uint256 constant public duration = 4 years;\r\n  // adjust mining rate every 1 year\r\n  uint256[4] public miningRate = [40,20,20,20];\r\n\r\n  bool public started = false;\r\n\r\n  uint256 public startTime;\r\n\r\n  uint256 public minted;\r\n\r\n  modifier whenStarted() {\r\n    require(started == true && startTime <= block.timestamp);\r\n    _;\r\n  }\r\n\r\n  function startMining(uint256 _startTime) public onlyOwner {\r\n\r\n      require(started == false && BSPToken.balanceOf(this) >= rewardAmount);\r\n\r\n      // cannot start from a historical time\r\n      require(_startTime >= block.timestamp);\r\n      // prevent input error\r\n      require(_startTime <= block.timestamp + 60 days);\r\n\r\n      startTime = _startTime;\r\n      started = true;\r\n  }\r\n\r\n  function changeDistributor(address _newDistributor) public onlyOwner {\r\n    emit DistributorChanged(distributor, _newDistributor);\r\n    distributor = _newDistributor;\r\n\r\n  }\r\n\r\n  function mint() public whenStarted {\r\n    uint256 unminted = mintableAmount();\r\n    require(unminted > 0);\r\n\r\n    minted = minted.add(unminted);\r\n    BSPToken.safeTransfer(distributor, unminted);\r\n\r\n    emit Mint(unminted);\r\n  }\r\n\r\n  function mintableAmount() public view returns (uint256) {\r\n\r\n    if(started == false || startTime >= block.timestamp){\r\n        return 0;\r\n    }\r\n\r\n    if (block.timestamp >= startTime.add(duration)){\r\n        return BSPToken.balanceOf(this);\r\n    }\r\n\r\n    uint currentYear = block.timestamp.sub(startTime).div(1 years);\r\n    uint currentDay = (block.timestamp.sub(startTime) % (1 years)).div(1 days);\r\n    uint currentMintable = 0;\r\n\r\n    for (uint i = 0; i < currentYear; i++){\r\n        currentMintable = currentMintable.add(rewardAmount.mul(miningRate[i]).div(100));\r\n    }\r\n    currentMintable = currentMintable.add(rewardAmount.mul(miningRate[currentYear]).div(36500).mul(currentDay));\r\n\r\n    return currentMintable.sub(minted);\r\n  }\r\n\r\n  function totalBspAmount() public view returns (uint256) {\r\n      return BSPToken.balanceOf(this).add(minted);\r\n  }\r\n\r\n  function () public payable {\r\n    revert ();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBspAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"startMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDistributor\",\"type\":\"address\"}],\"name\":\"changeDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BSPToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDistributor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"DistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BSPMintable","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4f5873024a6f6cb12d58f7465ca3a4556ccee298fa16c2c88a05aff1a403b3e"}]}