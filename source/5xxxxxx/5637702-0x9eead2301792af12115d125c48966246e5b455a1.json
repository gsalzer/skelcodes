{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\ncontract ENS is AbstractENS {\r\n    struct Record {\r\n        address owner;\r\n        address resolver;\r\n        uint64 ttl;\r\n    }\r\n\r\n    mapping(bytes32=>Record) records;\r\n\r\n    // Permits modifications only by the owner of the specified node.\r\n    modifier only_owner(bytes32 node) {\r\n        if(records[node].owner != msg.sender) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructs a new ENS registrar.\r\n     */\r\n    function ENS() {\r\n        records[0].owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Returns the address that owns the specified node.\r\n     */\r\n    function owner(bytes32 node) constant returns (address) {\r\n        return records[node].owner;\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the resolver for the specified node.\r\n     */\r\n    function resolver(bytes32 node) constant returns (address) {\r\n        return records[node].resolver;\r\n    }\r\n\r\n    /**\r\n     * Returns the TTL of a node, and any records associated with it.\r\n     */\r\n    function ttl(bytes32 node) constant returns (uint64) {\r\n        return records[node].ttl;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of a node to a new address. May only be called by the current\r\n     * owner of the node.\r\n     * @param node The node to transfer ownership of.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function setOwner(bytes32 node, address owner) only_owner(node) {\r\n        Transfer(node, owner);\r\n        records[node].owner = owner;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of a subnode sha3(node, label) to a new address. May only be\r\n     * called by the owner of the parent node.\r\n     * @param node The parent node.\r\n     * @param label The hash of the label specifying the subnode.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\r\n        var subnode = sha3(node, label);\r\n        NewOwner(node, label, owner);\r\n        records[subnode].owner = owner;\r\n    }\r\n\r\n    /**\r\n     * Sets the resolver address for the specified node.\r\n     * @param node The node to update.\r\n     * @param resolver The address of the resolver.\r\n     */\r\n    function setResolver(bytes32 node, address resolver) only_owner(node) {\r\n        NewResolver(node, resolver);\r\n        records[node].resolver = resolver;\r\n    }\r\n\r\n    /**\r\n     * Sets the TTL for the specified node.\r\n     * @param node The node to update.\r\n     * @param ttl The TTL in seconds.\r\n     */\r\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\r\n        NewTTL(node, ttl);\r\n        records[node].ttl = ttl;\r\n    }\r\n}\r\n\r\ncontract Deed {\r\n    address public registrar;\r\n    address constant burn = 0xdead;\r\n    uint public creationDate;\r\n    address public owner;\r\n    address public previousOwner;\r\n    uint public value;\r\n    event OwnerChanged(address newOwner);\r\n    event DeedClosed();\r\n    bool active;\r\n\r\n\r\n    modifier onlyRegistrar {\r\n        if (msg.sender != registrar) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive {\r\n        if (!active) throw;\r\n        _;\r\n    }\r\n\r\n    function Deed(address _owner) payable {\r\n        owner = _owner;\r\n        registrar = msg.sender;\r\n        creationDate = now;\r\n        active = true;\r\n        value = msg.value;\r\n    }\r\n\r\n    function setOwner(address newOwner) onlyRegistrar {\r\n        if (newOwner == 0) throw;\r\n        previousOwner = owner;  // This allows contracts to check who sent them the ownership\r\n        owner = newOwner;\r\n        OwnerChanged(newOwner);\r\n    }\r\n\r\n    function setRegistrar(address newRegistrar) onlyRegistrar {\r\n        registrar = newRegistrar;\r\n    }\r\n\r\n    function setBalance(uint newValue, bool throwOnFailure) onlyRegistrar onlyActive {\r\n        // Check if it has enough balance to set the value\r\n        if (value < newValue) throw;\r\n        value = newValue;\r\n        // Send the difference to the owner\r\n        if (!owner.send(this.balance - newValue) && throwOnFailure) throw;\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     * @param refundRatio The amount*1/1000 to refund\r\n     */\r\n    function closeDeed(uint refundRatio) onlyRegistrar onlyActive {\r\n        active = false;\r\n        if (! burn.send(((1000 - refundRatio) * this.balance)/1000)) throw;\r\n        DeedClosed();\r\n        destroyDeed();\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     */\r\n    function destroyDeed() {\r\n        if (active) throw;\r\n        \r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if(owner.send(this.balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Registrar {\r\n    AbstractENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    mapping (bytes32 => entry) _entries;\r\n    mapping (address => mapping(bytes32 => Deed)) public sealedBids;\r\n    \r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    uint32 constant totalAuctionLength = 5 seconds;\r\n    uint32 constant revealPeriod = 3 seconds;\r\n    uint32 public constant launchLength = 0 seconds;\r\n\r\n    uint constant minPrice = 0.01 ether;\r\n    uint public registryStarted;\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    struct entry {\r\n        Deed deed;\r\n        uint registrationDate;\r\n        uint value;\r\n        uint highestBid;\r\n    }\r\n\r\n    // State transitions for names:\r\n    //   Open -> Auction (startAuction)\r\n    //   Auction -> Reveal\r\n    //   Reveal -> Owned\r\n    //   Reveal -> Open (if nobody bid)\r\n    //   Owned -> Open (releaseDeed or invalidateName)\r\n    function state(bytes32 _hash) constant returns (Mode) {\r\n        var entry = _entries[_hash];\r\n        \r\n        if(!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if(now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier inState(bytes32 _hash, Mode _state) {\r\n        if(state(_hash) != _state) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(bytes32 _hash) {\r\n        if (state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()) throw;\r\n        _;\r\n    }\r\n\r\n    modifier registryOpen() {\r\n        if(now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)) throw;\r\n        _;\r\n    }\r\n\r\n    function entries(bytes32 _hash) constant returns (Mode, address, uint, uint, uint) {\r\n        entry h = _entries[_hash];\r\n        return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Constructs a new Registrar, with the provided address as the owner of the root node.\r\n     * @param _ens The address of the ENS\r\n     * @param _rootNode The hash of the rootnode.\r\n     */\r\n    function Registrar(AbstractENS _ens, bytes32 _rootNode, uint _startDate) {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the maximum of two unsigned integers\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The maximum of two unsigned integers\r\n     */\r\n    function max(uint a, uint b) internal constant returns (uint max) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum of two unsigned integers\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The minimum of two unsigned integers\r\n     */\r\n    function min(uint a, uint b) internal constant returns (uint min) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string s) internal constant returns (uint) {\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n    \r\n    /** \r\n     * @dev Determines if a name is available for registration yet\r\n     * \r\n     * Each name will be assigned a random date in which its auction \r\n     * can be started, from 0 to 13 weeks\r\n     * \r\n     * @param _hash The hash to start an auction on\r\n     * @param _timestamp The timestamp to query about\r\n     */\r\n     \r\n    function isAllowed(bytes32 _hash, uint _timestamp) constant returns (bool allowed){\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }\r\n\r\n    /** \r\n     * @dev Returns available date for hash\r\n     * \r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function getAllowedTime(bytes32 _hash) constant returns (uint timestamp) {\r\n        return registryStarted + (launchLength*(uint(_hash)>>128)>>128);\r\n        // right shift operator: a >> b == a / 2**b\r\n    }\r\n    /**\r\n     * @dev Assign the owner in ENS, if we're still the registrar\r\n     * @param _hash hash to change owner\r\n     * @param _newOwner new owner to transfer to\r\n     */\r\n    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\r\n        if(ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);        \r\n    }\r\n\r\n    /**\r\n     * @dev Start an auction for an available hash\r\n     *\r\n     * Anyone can start an auction by sending an array of hashes that they want to bid for.\r\n     * Arrays are sent so that someone can open up an auction for X dummy hashes when they\r\n     * are only really interested in bidding for one. This will increase the cost for an\r\n     * attacker to simply bid blindly on all new auctions. Dummy auctions that are\r\n     * open but not bid on are closed after a week.\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function startAuction(bytes32 _hash) registryOpen() {\r\n        var mode = state(_hash);\r\n        if(mode == Mode.Auction) return;\r\n        if(mode != Mode.Open) throw;\r\n\r\n        entry newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        AuctionStarted(_hash, newAuction.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev Start multiple auctions for better anonymity\r\n     * @param _hashes An array of hashes, at least one of which you presumably want to bid on\r\n     */\r\n    function startAuctions(bytes32[] _hashes)  {\r\n        for (uint i = 0; i < _hashes.length; i ++ ) {\r\n            startAuction(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hash the values required for a secret bid\r\n     * @param hash The node corresponding to the desired namehash\r\n     * @param value The bid amount\r\n     * @param salt A random value to ensure secrecy of the bid\r\n     * @return The hash of the bid values\r\n     */\r\n    function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) constant returns (bytes32 sealedBid) {\r\n        return sha3(hash, owner, value, salt);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a new sealed bid on a desired hash in a blind auction\r\n     *\r\n     * Bids are sent by sending a message to the main contract with a hash and an amount. The hash\r\n     * contains information about the bid, including the bidded hash, the bid amount, and a random\r\n     * salt. Bids are not tied to any one auction until they are revealed. The value of the bid\r\n     * itself can be masqueraded by sending more than the value of your actual bid. This is\r\n     * followed by a 48h reveal period. Bids revealed after this period will be burned and the ether unrecoverable.\r\n     * Since this is an auction, it is expected that most public hashes, like known domains and common dictionary\r\n     * words, will have multiple bidders pushing the price up.\r\n     *\r\n     * @param sealedBid A sealedBid, created by the shaBid function\r\n     */\r\n    function newBid(bytes32 sealedBid) payable {\r\n        if (address(sealedBids[msg.sender][sealedBid]) > 0 ) throw;\r\n        if (msg.value < minPrice) throw;\r\n        // creates a new hash contract with the owner\r\n        Deed newBid = (new Deed).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = newBid;\r\n        NewBid(sealedBid, msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Start a set of auctions and bid on one of them\r\n     *\r\n     * This method functions identically to calling `startAuctions` followed by `newBid`,\r\n     * but all in one transaction.\r\n     * @param hashes A list of hashes to start auctions on.\r\n     * @param sealedBid A sealed bid for one of the auctions.\r\n     */\r\n    function startAuctionsAndBid(bytes32[] hashes, bytes32 sealedBid) payable {\r\n        startAuctions(hashes);\r\n        newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit the properties of a bid to reveal them\r\n     * @param _hash The node in the sealedBid\r\n     * @param _value The bid amount in the sealedBid\r\n     * @param _salt The sale in the sealedBid\r\n     */\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) {\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        if (address(bid) == 0 ) throw;\r\n        sealedBids[msg.sender][seal] = Deed(0);\r\n        entry h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        var auctionState = state(_hash);\r\n        if(auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Get's 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if(auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            throw;\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a bid\r\n     * @param seal The value returned by the shaBid function\r\n     */\r\n    function cancelBid(address bidder, bytes32 seal) {\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        if (address(bid) == 0\r\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks) throw;\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        BidRevealed(seal, bidder, 0, 5);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize an auction after the registration date has passed\r\n     * @param _hash The hash of the name the auction is for\r\n     */\r\n    function finalizeAuction(bytes32 _hash) onlyOwner(_hash) {\r\n        entry h = _entries[_hash];\r\n        \r\n        // handles the case when there's only a single bidder (h.value is zero)\r\n        h.value =  max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner of a domain may transfer it to someone else at any time.\r\n     * @param _hash The node to transfer\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transfer(bytes32 _hash, address newOwner) onlyOwner(_hash) {\r\n        if (newOwner == 0) throw;\r\n\r\n        entry h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev After some time, or if we're no longer the registrar, the owner can release\r\n     *      the name and get their ether back.\r\n     * @param _hash The node to release\r\n     */\r\n    function releaseDeed(bytes32 _hash) onlyOwner(_hash) {\r\n        entry h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n        if(now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)) throw;\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        HashReleased(_hash, h.value);        \r\n    }\r\n\r\n    /**\r\n     * @dev Submit a name 6 characters long or less. If it has been registered,\r\n     * the submitter will earn 50% of the deed value. We are purposefully\r\n     * handicapping the simplified registrar as a way to force it into being restructured\r\n     * in a few years.\r\n     * @param unhashedName An invalid name to search for in the registry.\r\n     *\r\n     */\r\n    function invalidateName(string unhashedName) inState(sha3(unhashedName), Mode.Owned) {\r\n        if (strlen(unhashedName) > 6 ) throw;\r\n        bytes32 hash = sha3(unhashedName);\r\n\r\n        entry h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if(address(h.deed) != 0) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to delete the owner and resolver records for a (subdomain of) a\r\n     *      name that is not currently owned in the registrar. If passing, eg, 'foo.bar.eth',\r\n     *      the owner and resolver fields on 'foo.bar.eth' and 'bar.eth' will all be cleared.\r\n     * @param labels A series of label hashes identifying the name to zero out, rooted at the\r\n     *        registrar's root. Must contain at least one element. For instance, to zero \r\n     *        'foo.bar.eth' on a registrar that owns '.eth', pass an array containing\r\n     *        [sha3('foo'), sha3('bar')].\r\n     */\r\n    function eraseNode(bytes32[] labels) {\r\n        if(labels.length == 0) throw;\r\n        if(state(labels[labels.length - 1]) == Mode.Owned) throw;\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }\r\n\r\n    function _tryEraseSingleNode(bytes32 label) internal {\r\n        if(ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            var node = sha3(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }\r\n    }\r\n\r\n    function _eraseNodeHierarchy(uint idx, bytes32[] labels, bytes32 node) internal {\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = sha3(node, labels[idx]);\r\n        \r\n        // Recurse if there's more labels\r\n        if(idx > 0)\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, 0);\r\n        ens.setOwner(node, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the deed to the current registrar, if different from this one.\r\n     * Used during the upgrade process to a permanent registrar.\r\n     * @param _hash The name hash to transfer.\r\n     */\r\n    function transferRegistrars(bytes32 _hash) onlyOwner(_hash) {\r\n        var registrar = ens.owner(rootNode);\r\n        if(registrar == address(this))\r\n            throw;\r\n\r\n        // Migrate the deed\r\n        entry h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts a transfer from a previous registrar; stubbed out here since there\r\n     *      is no previous registrar implementing this interface.\r\n     * @param hash The sha3 hash of the label to transfer.\r\n     * @param deed The Deed object for the name being transferred in.\r\n     * @param registrationDate The date at which the name was originally registered.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) {}\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n  mapping(address => bool) public whitelist;\r\n  \r\n  event WhitelistedAddressAdded(address addr);\r\n  event WhitelistedAddressRemoved(address addr);\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n  modifier onlyWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist \r\n   */\r\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\r\n    if (!whitelist[addr]) {\r\n      whitelist[addr] = true;\r\n      WhitelistedAddressAdded(addr);\r\n      success = true; \r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was added to the whitelist, \r\n   * false if all addresses were already in the whitelist  \r\n   */\r\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      if (addAddressToWhitelist(addrs[i])) {\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param addr address\r\n   * @return true if the address was removed from the whitelist, \r\n   * false if the address wasn't in the whitelist in the first place \r\n   */\r\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n    if (whitelist[addr]) {\r\n      whitelist[addr] = false;\r\n      WhitelistedAddressRemoved(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was removed from the whitelist, \r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      if (removeAddressFromWhitelist(addrs[i])) {\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract BedOracleV1 is Whitelist {\r\n    struct Bid {\r\n        uint value;\r\n        uint reward;\r\n        bytes32 hash;\r\n        address owner;\r\n    }\r\n\r\n    Registrar internal registrar_;\r\n    uint internal balance_;\r\n    mapping (bytes32 => Bid) internal bids_;\r\n\r\n    event Added(address indexed owner, bytes32 indexed shaBid, bytes8 indexed gasPrices, bytes cypherBid);\r\n    event Finished(bytes32 indexed shaBid);\r\n    event Forfeited(bytes32 indexed shaBid);\r\n    event Withdrawn(address indexed to, uint value);\r\n\r\n    function() external payable {}\r\n    \r\n    constructor(address _registrar) public {\r\n        registrar_ = Registrar(_registrar);\r\n    }\r\n\r\n    // This function adds the bid to a map of bids for the oracle to bid on\r\n    function add(bytes32 _shaBid, uint reward, bytes _cypherBid, bytes8 _gasPrices)\r\n        external payable\r\n    {\r\n        // Validate that the bid doesn't exist\r\n        require(bids_[_shaBid].owner == 0);\r\n        require(msg.value > 0.01 ether + reward);\r\n\r\n        // MAYBE take a cut\r\n        // // we take 1 percent of the bid above the minimum.\r\n        // uint cut = msg.value - 10 finney - reward / 100;\r\n\r\n        // Create the bid\r\n        bids_[_shaBid] = Bid(\r\n            msg.value - reward,\r\n            reward,\r\n            bytes32(0),\r\n            msg.sender\r\n        );\r\n\r\n        // Emit an Added Event. We store the cypherBid inside the events because\r\n        // it isn't neccisarry for any of the other steps while bidding\r\n        emit Added(msg.sender, _shaBid, _gasPrices, _cypherBid);\r\n    }\r\n\r\n    // bid is responsable for calling the newBid function\r\n    // Note: bid is onlyWhitelisted to make sure that we don't preemptivly bid\r\n    // on a name.\r\n    function bid(bytes32 _shaBid) external onlyWhitelisted {\r\n        Bid storage b = bids_[_shaBid];\r\n\r\n        registrar_.newBid.value(b.value)(_shaBid);\r\n    }\r\n\r\n    // reveal is responsable for unsealing the bid. it also stores the hash\r\n    // for later use when finalizing or forfeiting the auction.\r\n    function reveal(bytes32 _hash, uint _value, bytes32 _salt) external {\r\n        bids_[keccak256(_hash, this, _value, _salt)].hash = _hash;\r\n\r\n        registrar_.unsealBid(_hash, _value, _salt);\r\n    }\r\n\r\n    // finalize claims the deed and transfers it back to the user.\r\n    function finalize(bytes32 _shaBid) external {\r\n        Bid storage b = bids_[_shaBid];\r\n        bytes32 node = keccak256(registrar_.rootNode(), b.hash);\r\n        \r\n        registrar_.finalizeAuction(b.hash);\r\n\r\n        // set the resolver to zero in order to make sure no dead data is read.\r\n        ENS(registrar_.ens()).setResolver(node, address(0));\r\n\r\n        registrar_.transfer(b.hash, b.owner);\r\n\r\n        // make sure subsequent calls to 'forfeit' don't affect us.\r\n        b.value = 0;\r\n\r\n        // add gas to balance\r\n        balance_ += b.reward;\r\n        b.reward = 0;\r\n\r\n        emit Finished(_shaBid);\r\n    }\r\n\r\n    function forfeit(bytes32 _shaBid) external onlyWhitelisted {\r\n        Bid storage b = bids_[_shaBid];\r\n\r\n        // this is here to make sure that we don't steal the customers money\r\n        // after they call 'add'.\r\n        require(registrar_.state(b.hash) == Registrar.Mode.Owned);\r\n\r\n        // give back the lost bid value.\r\n        b.owner.transfer(b.value);\r\n        b.value = 0;\r\n\r\n        // add gas to balance\r\n        balance_ += b.reward;\r\n        b.reward = 0;\r\n\r\n        emit Forfeited(_shaBid);\r\n    }\r\n\r\n    function getBid(bytes32 _shaBid)\r\n        external view returns (uint, uint, bytes32, address)\r\n    {\r\n        Bid storage b = bids_[_shaBid];\r\n        return (b.value, b.reward, b.hash, b.owner);\r\n    }\r\n\r\n    function setRegistrar(address _newRegistrar) external onlyOwner {\r\n        registrar_ = Registrar(_newRegistrar);\r\n    }\r\n\r\n    // withdraws from the reward pot\r\n    function withdraw() external onlyWhitelisted {\r\n        msg.sender.transfer(balance_);\r\n        emit Withdrawn(msg.sender, balance_);\r\n        balance_ = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shaBid\",\"type\":\"bytes32\"}],\"name\":\"getBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shaBid\",\"type\":\"bytes32\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shaBid\",\"type\":\"bytes32\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shaBid\",\"type\":\"bytes32\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"_cypherBid\",\"type\":\"bytes\"},{\"name\":\"_gasPrices\",\"type\":\"bytes8\"}],\"name\":\"add\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shaBid\",\"type\":\"bytes32\"}],\"name\":\"forfeit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegistrar\",\"type\":\"address\"}],\"name\":\"setRegistrar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registrar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"shaBid\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"gasPrices\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"cypherBid\",\"type\":\"bytes\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"shaBid\",\"type\":\"bytes32\"}],\"name\":\"Finished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"shaBid\",\"type\":\"bytes32\"}],\"name\":\"Forfeited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BedOracleV1","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006090a6e47849629b7245dfa1ca21d94cd15878ef","Library":"","SwarmSource":"bzzr://8c47de26bba82a7f20ce29f956b0307f461e2de4ed704e17998ba087ddc73b8b"}]}