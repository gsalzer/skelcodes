{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    constructor() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        emit AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ncontract AccessService is AccessAdmin {\r\n    address public addrService;\r\n    address public addrFinance;\r\n\r\n    modifier onlyService() {\r\n        require(msg.sender == addrService);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinance() {\r\n        require(msg.sender == addrFinance);\r\n        _;\r\n    }\r\n\r\n    function setService(address _newService) external {\r\n        require(msg.sender == addrService || msg.sender == addrAdmin);\r\n        require(_newService != address(0));\r\n        addrService = _newService;\r\n    }\r\n\r\n    function setFinance(address _newFinance) external {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_newFinance != address(0));\r\n        addrFinance = _newFinance;\r\n    }\r\n}\r\n\r\ncontract Random {\r\n    uint256 _seed;\r\n\r\n    function _rand() internal returns (uint256) {\r\n        _seed = uint256(keccak256(_seed, blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n        return _seed;\r\n    }\r\n\r\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\r\n        return uint256(keccak256(_outSeed, blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n    }\r\n}\r\n\r\n/// @dev Ether League Share Token\r\ncontract ELShareToken is AccessService, Random {\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply = 50;\r\n    uint256 public totalSold = 0;\r\n    string public name = \"Ether League Share Token\";\r\n    string public symbol = \"ELST\";\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping(address => uint256)) allowed;\r\n    address[] shareholders;\r\n    mapping (address => uint256) addressToIndex;\r\n    uint256 public jackpotBalance;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Jackpot(address indexed _winner, uint256 _value, uint16 _type);\r\n\r\n    constructor() public {\r\n        addrAdmin = msg.sender;\r\n        addrService = msg.sender;\r\n        addrFinance = msg.sender;\r\n\r\n        balances[this] = 50;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.value > 0);\r\n        jackpotBalance += msg.value;\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint256){\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] -= _value;\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        uint256 oldToVal = balances[_to];\r\n        uint256 oldFromVal = balances[_from];\r\n        require(_value > 0 && _value <= oldFromVal);\r\n        uint256 newToVal = oldToVal + _value;\r\n        assert(newToVal >= oldToVal);\r\n        uint256 newFromVal = oldFromVal - _value;\r\n        balances[_from] = newFromVal;\r\n        balances[_to] = newToVal;\r\n\r\n        if (newFromVal == 0 && _from != address(this)) {\r\n            uint256 index = addressToIndex[_from];\r\n            uint256 lastIndex = shareholders.length - 1;\r\n            if (index != lastIndex) {\r\n                shareholders[index] = shareholders[lastIndex];\r\n                addressToIndex[shareholders[index]] = index;\r\n                delete addressToIndex[_from];\r\n            }\r\n            shareholders.length -= 1; \r\n        }\r\n\r\n        if (oldToVal == 0) {\r\n            addressToIndex[_to] = shareholders.length;\r\n            shareholders.push(_to);\r\n        }\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function buy(uint256 _amount) external payable whenNotPaused {\r\n        require(_amount > 0 && _amount <= 10);\r\n        uint256 price = (1 ether) * _amount;\r\n        require(msg.value == price);\r\n        require(balances[this] > _amount);\r\n        _transfer(this, msg.sender, _amount);\r\n        totalSold += _amount;\r\n\r\n        jackpotBalance += price * 2 / 10;\r\n        addrFinance.transfer(address(this).balance - jackpotBalance);\r\n        //2%\r\n        uint256 seed = _rand();\r\n        if(seed % 100 == 66 || seed % 100 == 88){\r\n            emit Jackpot(msg.sender, jackpotBalance, 1);\r\n            msg.sender.transfer(jackpotBalance);\r\n        }\r\n    }\r\n\r\n    function getShareholders() external view returns(address[50] addrArray, uint256[50] amountArray, uint256 soldAmount) {\r\n        uint256 length = shareholders.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            addrArray[i] = shareholders[i];\r\n            amountArray[i] = balances[shareholders[i]];\r\n        }\r\n        soldAmount = totalSold;\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        addrFinance.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShareholders\",\"outputs\":[{\"name\":\"addrArray\",\"type\":\"address[50]\"},{\"name\":\"amountArray\",\"type\":\"uint256[50]\"},{\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFinance\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newService\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint16\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"ELShareToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://81d3aef810be6a7f3a1d42ea9dbfb1a9cb77aa850807be14793d03176ead7302"}]}