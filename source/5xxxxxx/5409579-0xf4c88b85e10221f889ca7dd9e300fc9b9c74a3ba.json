{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Four Leaf clover (FLC) Token interface \r\n// ----------------------------------------------------------------------------\r\ncontract FLC {\r\n    function create(uint units) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// contract WhiteListAccess\r\n// ----------------------------------------------------------------------------\r\ncontract WhiteListAccess {\r\n    \r\n    function WhiteListAccess() public {\r\n        owner = msg.sender;\r\n        whitelist[owner] = true;\r\n        whitelist[address(this)] = true;        \r\n    }\r\n    \r\n    address public owner;\r\n    mapping (address => bool) whitelist;\r\n\r\n    modifier onlyBy(address who) { require(msg.sender == who); _; }\r\n    modifier onlyOwner {require(msg.sender == owner); _;}\r\n    modifier onlyWhitelisted {require(whitelist[msg.sender]); _;}\r\n\r\n    function addToWhiteList(address trusted) public onlyOwner() {\r\n        whitelist[trusted] = true;\r\n    }\r\n\r\n    function removeFromWhiteList(address untrusted) public onlyOwner() {\r\n        whitelist[untrusted] = false;\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// NRB_Common contract\r\n// ----------------------------------------------------------------------------\r\ncontract NRB_Common is WhiteListAccess {\r\n    \r\n    string public name;             // contract's name\r\n    bool _init;\r\n    \r\n    function NRB_Common() public { ETH_address = 0x1; }\r\n\r\n    // Deployment\r\n    address public ETH_address;    // representation of Ether as Token (0x1)\r\n    address public FLC_address;\r\n    address public NRB_address;\r\n\r\n    function init(address _main, address _flc) public {\r\n        require(!_init);\r\n        FLC_address = _flc;\r\n        NRB_address = _main;\r\n        whitelist[NRB_address] = true;\r\n        _init = true;\r\n    }\r\n\r\n    // Debug\r\n    event Debug(string, bool);\r\n    event Debug(string, uint);\r\n    event Debug(string, uint, uint);\r\n    event Debug(string, uint, uint, uint);\r\n    event Debug(string, uint, uint, uint, uint);\r\n    event Debug(string, address);\r\n    event Debug(string, address, address);\r\n    event Debug(string, address, address, address);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// NRB_Tokens (main) contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract NRB_Tokens is NRB_Common {\r\n\r\n    // how much raised for each token\r\n    mapping(address => uint) raisedAmount;\r\n\r\n    mapping(address => Token) public tokens;\r\n    mapping(uint => address) public tokenlist;\r\n    uint public tokenlenth;\r\n    \r\n    struct Token {\r\n        bool registered;\r\n        bool validated;\r\n        uint index;\r\n        uint decimals;\r\n        uint nextRecord;\r\n        string name;\r\n        string symbol;\r\n        address addrs;\r\n    }\r\n\r\n    function NRB_Tokens() public {\r\n        name = \"NRB_Tokens\";\r\n        tokenlenth = 1;\r\n        registerAndValidateToken(ETH_address, \"Ethereum\", \"ETH\", 18, 7812500000000000);\r\n    }\r\n\r\n    function getTokenListLength() constant public returns (uint) {\r\n        return tokenlenth-1;\r\n    }\r\n\r\n    function getTokenByIndex(uint _index) constant public returns (bool, uint, uint, uint, string, string, address) {\r\n        return getTokenByAddress(tokenlist[_index]);\r\n    }\r\n\r\n    function getTokenByAddress(address _token) constant public returns (bool, uint, uint, uint, string, string, address) {\r\n        Token memory _t = tokens[_token];\r\n        return (_t.validated, _t.index, _t.decimals, _t.nextRecord, _t.name, _t.symbol, _t.addrs);\r\n    }\r\n\r\n    function getTokenAddressByIndex(uint _index) constant public returns (address) {\r\n        return tokens[tokenlist[_index]].addrs;\r\n    }\r\n\r\n    function isTokenRegistered(address _token) constant public returns (bool) {\r\n        return tokens[_token].registered;\r\n    }\r\n\r\n    function registerTokenPayment(address _token, uint _value) public onlyWhitelisted() {\r\n        raisedAmount[_token] = raisedAmount[_token] + _value;\r\n    }\r\n\r\n    function registerAndValidateToken(address _token, string _name, string _symbol, uint _decimals, uint _nextRecord) public onlyOwner() {\r\n        registerToken(_token, _name, _symbol, _decimals, _nextRecord);\r\n        tokens[_token].validated = true;\r\n    }\r\n\r\n    function registerToken(address _token, string _name, string _symbol, uint _decimals, uint _nextRecord) public onlyWhitelisted() {\r\n        require(!tokens[_token].validated);\r\n        if (_token != ETH_address) {\r\n            require(ERC20Interface(_token).totalSupply() > 0);\r\n            require(ERC20Interface(_token).balanceOf(address(this)) == 0);\r\n        }\r\n        tokens[_token].validated = false;\r\n        tokens[_token].registered = true;\r\n        tokens[_token].addrs = _token;\r\n        tokens[_token].name = _name;\r\n        tokens[_token].symbol = _symbol;\r\n        tokens[_token].decimals = _decimals;\r\n        tokens[_token].index = tokenlenth;\r\n        tokens[_token].nextRecord = _nextRecord;\r\n        tokenlist[tokenlenth] = _token;\r\n        tokenlenth++;\r\n    }\r\n\r\n    function validateToken(address _token, bool _valid) public onlyOwner() {\r\n        tokens[_token].validated = _valid;\r\n    }\r\n\r\n    function sendFLC(address user, address token, uint totalpaid) public onlyWhitelisted() returns (uint) {\r\n        uint flc = 0;\r\n        uint next = 0;\r\n        (flc, next) = calculateFLCCore(token, totalpaid);\r\n        if (flc > 0) {\r\n            tokens[token].nextRecord = next;\r\n            FLC(FLC_address).create(flc);\r\n            ERC20Interface(FLC_address).transfer(user, flc);\r\n        }\r\n        return flc;\r\n    }\r\n\r\n    function calculateFLC(address token, uint totalpaid) constant public returns (uint) {\r\n        uint flc = 0;\r\n        uint next = 0;\r\n        (flc, next) = calculateFLCCore(token, totalpaid);\r\n        return flc;\r\n    }\r\n\r\n    function calculateFLCCore(address token, uint totalpaid) constant public returns (uint, uint) {\r\n        uint next = tokens[token].nextRecord;\r\n        uint flc = 0;\r\n        while (next <= totalpaid) {\r\n            next = next * 2;\r\n            flc++;\r\n        }\r\n        return (flc, next);\r\n    }\r\n\r\n    // recover tokens sent accidentally\r\n    function _withdrawal(address _token) public {\r\n        uint _balance =  ERC20Interface(_token).balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            ERC20Interface(_token).transfer(owner, _balance);\r\n        }\r\n    }\r\n    \r\n    // Don't accept ETH\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"untrusted\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"totalpaid\",\"type\":\"uint256\"}],\"name\":\"calculateFLCCore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_nextRecord\",\"type\":\"uint256\"}],\"name\":\"registerAndValidateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trusted\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLC_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenlist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenAddressByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"registerTokenPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NRB_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"totalpaid\",\"type\":\"uint256\"}],\"name\":\"calculateFLC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"totalpaid\",\"type\":\"uint256\"}],\"name\":\"sendFLC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"_withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"registered\",\"type\":\"bool\"},{\"name\":\"validated\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"nextRecord\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"addrs\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"validateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenlenth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_nextRecord\",\"type\":\"uint256\"}],\"name\":\"registerToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_main\",\"type\":\"address\"},{\"name\":\"_flc\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"Debug\",\"type\":\"event\"}]","ContractName":"NRB_Tokens","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41247bb2068fc222f13c7dbcd322100da78fd57bef24b3be13d85373828b5618"}]}