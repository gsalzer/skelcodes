{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ETHMap {\r\n\r\n    /// Initial price zone (= LUX)\r\n    /// set at 0.001 Eth\r\n    uint initialZonePrice = 1000000000000000 wei;\r\n\r\n    /// contractOwner address\r\n    address contractOwner;\r\n\r\n    /// Users pending withdrawals\r\n    mapping(address => uint) pendingWithdrawals;\r\n\r\n    /// Zone structures mapping\r\n    mapping(uint => Zone) zoneStructs;\r\n    uint[] zoneList;\r\n\r\n    struct Zone {\r\n        uint id;\r\n        address owner;\r\n        uint sellPrice;\r\n    }\r\n\r\n    /// Constructor\r\n    function ETHMap() public {\r\n      contractOwner = msg.sender;\r\n    }\r\n\r\n    modifier onlyContractOwner()\r\n    {\r\n       // Throws if called by any account other than the contract owner\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidZone(uint zoneId)\r\n    {\r\n       // Throws if zone id is not valid\r\n        require(zoneId >= 1 && zoneId <= 178);\r\n        _;\r\n    }\r\n\r\n    modifier onlyZoneOwner(uint zoneId)\r\n    {\r\n       // Throws if called by any account other than the zone owner\r\n        require(msg.sender == zoneStructs[zoneId].owner);\r\n        _;\r\n    }\r\n\r\n    function buyZone(uint zoneId) public\r\n      onlyValidZone(zoneId)\r\n      payable\r\n    returns (bool success)\r\n    {\r\n        // Throw if zone is not on sale\r\n        if (zoneStructs[zoneId].owner != address(0)) {\r\n          require(zoneStructs[zoneId].sellPrice != 0);\r\n        }\r\n        // Throw if amount sent is not sufficient\r\n        uint minPrice = (zoneStructs[zoneId].owner == address(0)) ? computeInitialPrice(zoneId) : zoneStructs[zoneId].sellPrice;\r\n        require(msg.value >= minPrice);\r\n        // If initial sale\r\n        if (zoneStructs[zoneId].owner == address(0)) {\r\n            // No current owners, credit contract owner balance\r\n            pendingWithdrawals[contractOwner] += msg.value;\r\n            // Init zone\r\n            zoneStructs[zoneId].id = zoneId;\r\n        } else {\r\n          // Contract owner take 2% cut on transaction\r\n          uint256 contractOwnerCut = (msg.value * 200) / 10000;\r\n          uint256 ownersShare = msg.value - contractOwnerCut;\r\n          // Credit contract owner\r\n          pendingWithdrawals[contractOwner] += contractOwnerCut;\r\n          // Credit zone owner\r\n          address ownerAddress = zoneStructs[zoneId].owner;\r\n          pendingWithdrawals[ownerAddress] += ownersShare;\r\n        }\r\n\r\n        zoneStructs[zoneId].owner = msg.sender;\r\n        zoneStructs[zoneId].sellPrice = 0;\r\n        return true;\r\n    }\r\n\r\n    /// Allow owner to sell his zone\r\n    function sellZone(uint zoneId, uint amount) public\r\n        onlyValidZone(zoneId)\r\n        onlyZoneOwner(zoneId)\r\n        returns (bool success) \r\n    {\r\n        zoneStructs[zoneId].sellPrice = amount;\r\n        return true;\r\n    }\r\n\r\n    /// Allow owner to transfer his zone\r\n    function transferZone(uint zoneId, address recipient) public\r\n        onlyValidZone(zoneId)\r\n        onlyZoneOwner(zoneId)\r\n        returns (bool success) \r\n    {\r\n        zoneStructs[zoneId].owner = recipient;\r\n        return true;\r\n    }\r\n\r\n    /// Compute initial zone price\r\n    function computeInitialPrice(uint zoneId) public view\r\n        onlyValidZone(zoneId)\r\n        returns (uint price)\r\n    {\r\n        return initialZonePrice + ((zoneId - 1) * (initialZonePrice / 2));\r\n    }\r\n\r\n    /// Return zone details\r\n    function getZone(uint zoneId) public constant\r\n        onlyValidZone(zoneId)\r\n        returns(uint id, address owner, uint sellPrice)\r\n    {\r\n        return (\r\n          zoneStructs[zoneId].id,\r\n          zoneStructs[zoneId].owner,\r\n          zoneStructs[zoneId].sellPrice\r\n        );\r\n    }\r\n\r\n    /// Return balance from sender\r\n    function getBalance() public view\r\n      returns (uint amount)\r\n    {\r\n        return pendingWithdrawals[msg.sender];\r\n    }\r\n\r\n    /// Allow address to withdraw their balance\r\n    function withdraw() public\r\n        returns (bool success) \r\n    {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    /// Allow contract owner to change address\r\n    function transferContractOwnership(address newOwner) public\r\n        onlyContractOwner()\r\n        returns (bool success) \r\n    {\r\n        contractOwner = newOwner;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"zoneId\",\"type\":\"uint256\"}],\"name\":\"getZone\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zoneId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellZone\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zoneId\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferZone\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zoneId\",\"type\":\"uint256\"}],\"name\":\"buyZone\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"zoneId\",\"type\":\"uint256\"}],\"name\":\"computeInitialPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ETHMap","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36750c1f9becab4010bbdb3418bf1e9a13a07030ce15b7aa0c1a7f7ab50c7212"}]}