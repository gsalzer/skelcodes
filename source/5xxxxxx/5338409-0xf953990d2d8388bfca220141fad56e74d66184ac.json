{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract Admin {\r\n    address public godAddress;\r\n    address public managerAddress;\r\n    address public bursarAddress;\r\n\r\n    // God has more priviledges than other admins\r\n    modifier requireGod() {\r\n        require(msg.sender == godAddress);\r\n        _;\r\n    }\r\n\r\n    modifier requireManager() {\r\n        require(msg.sender == managerAddress);\r\n        _;\r\n    }\r\n\r\n    modifier requireAdmin() {\r\n        require(msg.sender == managerAddress || msg.sender == godAddress);\r\n        _;\r\n    }\r\n\r\n    modifier requireBursar() {\r\n        require(msg.sender == bursarAddress);\r\n      _;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the God. Only available to the current God.\r\n    /// @param _newGod The address of the new God\r\n    function setGod(address _newGod) external requireGod {\r\n        require(_newGod != address(0));\r\n\r\n        godAddress = _newGod;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the Manager. Only available to the current God.\r\n    /// @param _newManager The address of the new Manager\r\n    function setManager(address _newManager) external requireGod {\r\n        require(_newManager != address(0));\r\n\r\n        managerAddress = _newManager;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the Bursar. Only available to the current God.\r\n    /// @param _newBursar The address of the new Bursar\r\n    function setBursar(address _newBursar) external requireGod {\r\n        require(_newBursar != address(0));\r\n\r\n        bursarAddress = _newBursar;\r\n    }\r\n\r\n    /// @notice !!! COMPLETELY DESTROYS THE CONTRACT !!!\r\n    function destroy() external requireGod {\r\n        selfdestruct(godAddress);\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Admin {\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() external requireAdmin whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() external requireGod whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\ncontract CryptoFamousBase is Pausable {\r\n\r\n  // DATA TYPES\r\n  struct Card {\r\n        // Social network type id (1 - Twitter, others TBD)\r\n        uint8 socialNetworkType;\r\n        // The social network id of the social account backing this card.\r\n        uint64 socialId;\r\n        // The ethereum address that most recently claimed this card.\r\n        address claimer;\r\n        // Increased whenever the card is claimed by an address\r\n        uint16 claimNonce;\r\n        // Reserved for future use\r\n        uint8 reserved1;\r\n  }\r\n\r\n  struct SaleInfo {\r\n      uint128 timestamp;\r\n      uint128 price;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract CryptoFamousOwnership is CryptoFamousBase {\r\n  // EVENTS\r\n  /// @dev emitted when a new Card is created. Can happen when a social identity is claimed or stolen for the first time.\r\n  event CardCreated(uint256 indexed cardId, uint8 socialNetworkType, uint64 socialId, address claimer, address indexed owner);\r\n\r\n  // STORAGE\r\n  /// @dev contains all the Cards in the system. Card with ID 0 is invalid.\r\n  Card[] public allCards;\r\n\r\n  /// @dev SocialNetworkType -> (SocialId -> CardId)\r\n  mapping (uint8 => mapping (uint64 => uint256)) private socialIdentityMappings;\r\n\r\n  /// @dev getter for `socialIdentityMappings`\r\n  function socialIdentityToCardId(uint256 _socialNetworkType, uint256 _socialId) public view returns (uint256 cardId) {\r\n    uint8 _socialNetworkType8 = uint8(_socialNetworkType);\r\n    require(_socialNetworkType == uint256(_socialNetworkType8));\r\n\r\n    uint64 _socialId64 = uint64(_socialId);\r\n    require(_socialId == uint256(_socialId64));\r\n\r\n    cardId = socialIdentityMappings[_socialNetworkType8][_socialId64];\r\n    return cardId;\r\n  }\r\n\r\n  mapping (uint8 => mapping (address => uint256)) private claimerAddressToCardIdMappings;\r\n\r\n  /// @dev returns the last Card ID claimed by `_claimerAddress` in network with `_socialNetworkType`\r\n  function lookUpClaimerAddress(uint256 _socialNetworkType, address _claimerAddress) public view returns (uint256 cardId) {\r\n    uint8 _socialNetworkType8 = uint8(_socialNetworkType);\r\n    require(_socialNetworkType == uint256(_socialNetworkType8));\r\n\r\n    cardId = claimerAddressToCardIdMappings[_socialNetworkType8][_claimerAddress];\r\n    return cardId;\r\n  }\r\n\r\n  /// @dev A mapping from Card ID to the timestamp of the first completed Claim of that Card\r\n  mapping (uint256 => uint128) public cardIdToFirstClaimTimestamp;\r\n\r\n  /// @dev A mapping from Card ID to the current owner address of that Card\r\n  mapping (uint256 => address) public cardIdToOwner;\r\n\r\n  /// @dev A mapping from owner address to the number of Cards currently owned by it\r\n  mapping (address => uint256) internal ownerAddressToCardCount;\r\n\r\n  function _changeOwnership(address _from, address _to, uint256 _cardId) internal whenNotPaused {\r\n      ownerAddressToCardCount[_to]++;\r\n      cardIdToOwner[_cardId] = _to;\r\n\r\n      if (_from != address(0)) {\r\n          ownerAddressToCardCount[_from]--;\r\n      }\r\n  }\r\n\r\n  function _recordFirstClaimTimestamp(uint256 _cardId) internal {\r\n    cardIdToFirstClaimTimestamp[_cardId] = uint128(now); //solhint-disable-line not-rely-on-time\r\n  }\r\n\r\n  function _createCard(\r\n      uint256 _socialNetworkType,\r\n      uint256 _socialId,\r\n      address _owner,\r\n      address _claimer\r\n  )\r\n      internal\r\n      whenNotPaused\r\n      returns (uint256)\r\n  {\r\n      uint8 _socialNetworkType8 = uint8(_socialNetworkType);\r\n      require(_socialNetworkType == uint256(_socialNetworkType8));\r\n\r\n      uint64 _socialId64 = uint64(_socialId);\r\n      require(_socialId == uint256(_socialId64));\r\n\r\n      uint16 claimNonce = 0;\r\n      if (_claimer != address(0)) {\r\n        claimNonce = 1;\r\n      }\r\n\r\n      Card memory _card = Card({\r\n          socialNetworkType: _socialNetworkType8,\r\n          socialId: _socialId64,\r\n          claimer: _claimer,\r\n          claimNonce: claimNonce,\r\n          reserved1: 0\r\n      });\r\n      uint256 newCardId = allCards.push(_card) - 1;\r\n      socialIdentityMappings[_socialNetworkType8][_socialId64] = newCardId;\r\n\r\n      if (_claimer != address(0)) {\r\n        claimerAddressToCardIdMappings[_socialNetworkType8][_claimer] = newCardId;\r\n        _recordFirstClaimTimestamp(newCardId);\r\n      }\r\n\r\n      // event CardCreated(uint256 indexed cardId, uint8 socialNetworkType, uint64 socialId, address claimer, address indexed owner);\r\n      CardCreated(\r\n          newCardId,\r\n          _socialNetworkType8,\r\n          _socialId64,\r\n          _claimer,\r\n          _owner\r\n      );\r\n\r\n      _changeOwnership(0, _owner, newCardId);\r\n\r\n      return newCardId;\r\n  }\r\n\r\n  /// @dev Returns the toal number of Cards in existence\r\n  function totalNumberOfCards() public view returns (uint) {\r\n      return allCards.length - 1;\r\n  }\r\n\r\n  /// @notice Returns a list of all Card IDs currently owned by `_owner`\r\n  /// @dev (this thing iterates, don't call from smart contract code)\r\n  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n      uint256 tokenCount = ownerAddressToCardCount[_owner];\r\n\r\n      if (tokenCount == 0) {\r\n          return new uint256[](0);\r\n      }\r\n\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 total = totalNumberOfCards();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 cardId;\r\n\r\n      for (cardId = 1; cardId <= total; cardId++) {\r\n          if (cardIdToOwner[cardId] == _owner) {\r\n              result[resultIndex] = cardId;\r\n              resultIndex++;\r\n          }\r\n      }\r\n\r\n      return result;\r\n  }\r\n}\r\n\r\n\r\ncontract CryptoFamousStorage is CryptoFamousOwnership {\r\n  function CryptoFamousStorage() public {\r\n      godAddress = msg.sender;\r\n      managerAddress = msg.sender;\r\n      bursarAddress = msg.sender;\r\n\r\n      // avoid zero identifiers\r\n      _createCard(0, 0, address(0), address(0));\r\n  }\r\n\r\n  function() external payable {\r\n      // just let msg.value be added to this.balance\r\n      FallbackEtherReceived(msg.sender, msg.value);\r\n  }\r\n\r\n  event FallbackEtherReceived(address from, uint256 value);\r\n\r\n  /// @dev Only this address will be allowed to call functions marked with `requireAuthorizedLogicContract`\r\n  address public authorizedLogicContractAddress;\r\n  modifier requireAuthorizedLogicContract() {\r\n      require(msg.sender == authorizedLogicContractAddress);\r\n      _;\r\n  }\r\n\r\n  /// @dev mapping from Card ID to information about that card's last trade\r\n  mapping (uint256 => SaleInfo) public cardIdToSaleInfo;\r\n\r\n  /// @dev mapping from Card ID to the current value stashed away for a future claimer\r\n  mapping (uint256 => uint256) public cardIdToStashedPayout;\r\n  /// @dev total amount of stashed payouts\r\n  uint256 public totalStashedPayouts;\r\n\r\n  /// @dev if we fail to send any value to a Card's previous owner as part of the\r\n  /// invite/steal transaction we'll hold it in this contract. This mapping records the amount\r\n  /// owed to that \"previous owner\".\r\n  mapping (address => uint256) public addressToFailedOldOwnerTransferAmount;\r\n  /// @dev total amount of failed old owner transfers\r\n  uint256 public totalFailedOldOwnerTransferAmounts;\r\n\r\n  /// @dev mapping from Card ID to that card's current perk text\r\n  mapping (uint256 => string) public cardIdToPerkText;\r\n\r\n  function authorized_setCardPerkText(uint256 _cardId, string _perkText) external requireAuthorizedLogicContract {\r\n    cardIdToPerkText[_cardId] = _perkText;\r\n  }\r\n\r\n  function setAuthorizedLogicContractAddress(address _newAuthorizedLogicContractAddress) external requireGod {\r\n    authorizedLogicContractAddress = _newAuthorizedLogicContractAddress;\r\n  }\r\n\r\n  function authorized_changeOwnership(address _from, address _to, uint256 _cardId) external requireAuthorizedLogicContract {\r\n    _changeOwnership(_from, _to, _cardId);\r\n  }\r\n\r\n  function authorized_createCard(uint256 _socialNetworkType, uint256 _socialId, address _owner, address _claimer) external requireAuthorizedLogicContract returns (uint256) {\r\n    return _createCard(_socialNetworkType, _socialId, _owner, _claimer);\r\n  }\r\n\r\n  function authorized_updateSaleInfo(uint256 _cardId, uint256 _sentValue) external requireAuthorizedLogicContract {\r\n    cardIdToSaleInfo[_cardId] = SaleInfo(uint128(now), uint128(_sentValue)); // solhint-disable-line not-rely-on-time\r\n  }\r\n\r\n  function authorized_updateCardClaimerAddress(uint256 _cardId, address _claimerAddress) external requireAuthorizedLogicContract {\r\n    Card storage card = allCards[_cardId];\r\n    if (card.claimer == address(0)) {\r\n      _recordFirstClaimTimestamp(_cardId);\r\n    }\r\n    card.claimer = _claimerAddress;\r\n    card.claimNonce += 1;\r\n  }\r\n\r\n  function authorized_updateCardReserved1(uint256 _cardId, uint8 _reserved) external requireAuthorizedLogicContract {\r\n    uint8 _reserved8 = uint8(_reserved);\r\n    require(_reserved == uint256(_reserved8));\r\n\r\n    Card storage card = allCards[_cardId];\r\n    card.reserved1 = _reserved8;\r\n  }\r\n\r\n  function authorized_triggerStashedPayoutTransfer(uint256 _cardId) external requireAuthorizedLogicContract {\r\n    Card storage card = allCards[_cardId];\r\n    address claimerAddress = card.claimer;\r\n\r\n    require(claimerAddress != address(0));\r\n\r\n    uint256 stashedPayout = cardIdToStashedPayout[_cardId];\r\n\r\n    require(stashedPayout > 0);\r\n\r\n    cardIdToStashedPayout[_cardId] = 0;\r\n    totalStashedPayouts -= stashedPayout;\r\n\r\n    claimerAddress.transfer(stashedPayout);\r\n  }\r\n\r\n  function authorized_recordStashedPayout(uint256 _cardId) external payable requireAuthorizedLogicContract {\r\n      cardIdToStashedPayout[_cardId] += msg.value;\r\n      totalStashedPayouts += msg.value;\r\n  }\r\n\r\n  function authorized_recordFailedOldOwnerTransfer(address _oldOwner) external payable requireAuthorizedLogicContract {\r\n      addressToFailedOldOwnerTransferAmount[_oldOwner] += msg.value;\r\n      totalFailedOldOwnerTransferAmounts += msg.value;\r\n  }\r\n\r\n  // solhint-disable-next-line no-empty-blocks\r\n  function authorized_recordPlatformFee() external payable requireAuthorizedLogicContract {\r\n      // just let msg.value be added to this.balance\r\n  }\r\n\r\n  /// @dev returns the current contract balance after subtracting the amounts stashed away for others\r\n  function netContractBalance() public view returns (uint256 balance) {\r\n    balance = this.balance - totalStashedPayouts - totalFailedOldOwnerTransferAmounts;\r\n    return balance;\r\n  }\r\n\r\n  /// @dev the Bursar account can use this to withdraw the contract's net balance\r\n  function bursarPayOutNetContractBalance(address _to) external requireBursar {\r\n      uint256 payout = netContractBalance();\r\n\r\n      if (_to == address(0)) {\r\n          bursarAddress.transfer(payout);\r\n      } else {\r\n          _to.transfer(payout);\r\n      }\r\n  }\r\n\r\n  /// @dev Any wallet owed value that's recorded under `addressToFailedOldOwnerTransferAmount`\r\n  /// can use this function to withdraw that value.\r\n  function withdrawFailedOldOwnerTransferAmount() external whenNotPaused {\r\n      uint256 failedTransferAmount = addressToFailedOldOwnerTransferAmount[msg.sender];\r\n\r\n      require(failedTransferAmount > 0);\r\n\r\n      addressToFailedOldOwnerTransferAmount[msg.sender] = 0;\r\n      totalFailedOldOwnerTransferAmounts -= failedTransferAmount;\r\n\r\n      msg.sender.transfer(failedTransferAmount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"authorizedLogicContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"netContractBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"authorized_recordFailedOldOwnerTransfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberOfCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_perkText\",\"type\":\"string\"}],\"name\":\"authorized_setCardPerkText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"authorized_recordStashedPayout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBursar\",\"type\":\"address\"}],\"name\":\"setBursar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bursarAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"authorized_triggerStashedPayoutTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdToSaleInfo\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint128\"},{\"name\":\"price\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToFailedOldOwnerTransferAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"bursarPayOutNetContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdToFirstClaimTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_reserved\",\"type\":\"uint8\"}],\"name\":\"authorized_updateCardReserved1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_socialNetworkType\",\"type\":\"uint256\"},{\"name\":\"_claimerAddress\",\"type\":\"address\"}],\"name\":\"lookUpClaimerAddress\",\"outputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdToPerkText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFailedOldOwnerTransferAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCards\",\"outputs\":[{\"name\":\"socialNetworkType\",\"type\":\"uint8\"},{\"name\":\"socialId\",\"type\":\"uint64\"},{\"name\":\"claimer\",\"type\":\"address\"},{\"name\":\"claimNonce\",\"type\":\"uint16\"},{\"name\":\"reserved1\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"authorized_changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFailedOldOwnerTransferAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_sentValue\",\"type\":\"uint256\"}],\"name\":\"authorized_updateSaleInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStashedPayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"authorized_recordPlatformFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_claimerAddress\",\"type\":\"address\"}],\"name\":\"authorized_updateCardClaimerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_socialNetworkType\",\"type\":\"uint256\"},{\"name\":\"_socialId\",\"type\":\"uint256\"}],\"name\":\"socialIdentityToCardId\",\"outputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuthorizedLogicContractAddress\",\"type\":\"address\"}],\"name\":\"setAuthorizedLogicContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdToStashedPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_socialNetworkType\",\"type\":\"uint256\"},{\"name\":\"_socialId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"authorized_createCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGod\",\"type\":\"address\"}],\"name\":\"setGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FallbackEtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"socialNetworkType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"socialId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CardCreated\",\"type\":\"event\"}]","ContractName":"CryptoFamousStorage","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3717823f8487eb509ed84bb20e60b879786f1ad7796681aaa409183ab0aba647"}]}