{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract BIOBIT {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    uint256 public limitSupply;\r\n    address public owner;\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin(){\r\n        require(msg.sender == owner || administrators[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) private balanceOf;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => bool) public administrators;\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event TransferByAdmin(address indexed admin, address indexed from, address indexed to, uint256 value);\r\n    \r\n   /**\r\n    * Constrctor function\r\n    *\r\n    * Initializes contract with initial supply tokens to the creator of the contract\r\n    */\r\n    function BIOBIT() public{\r\n        owner = msg.sender;\r\n        limitSupply = 150000000;\r\n        uint256 initialSupply = 25000000;\r\n        totalSupply = initialSupply;              // Update total supply\r\n        balanceOf[owner] = initialSupply;       \r\n        name = \"BIOBIT\";                          // Set the name for display purposes\r\n        symbol = \"à¸¿\";                             // Set the symbol for display purposes\r\n    }\r\n\r\n   /** Get My Balance\r\n    *\r\n    * Get your Balance BIOBIT\r\n    * \r\n    */\r\n    function balance() public constant returns(uint){\r\n        return balanceOf[msg.sender];\r\n        \r\n    }\r\n    \r\n    /**\r\n    * Transfer tokens\r\n    *\r\n    * Send `_value` tokens to `_to` from your account\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transfer(address _to, uint256 _value)  public\r\n    {       // Add the same to the recipient\r\n            require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(balanceOf[msg.sender] >= _value);                // Check if the sender has enough\r\n            require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n            balanceOf[msg.sender] -= _value;                         // Subtract from the sender\r\n            balanceOf[_to] += _value;                           // Add the same to the recipient\r\n            Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n        \r\n    /**\r\n    *\r\n    * incremento de  existencias de tokens 5 millions\r\n    * \r\n    */\r\n    function incrementSupply() onlyOwner public returns(bool){\r\n            uint256 _value = 5000000;\r\n            require(totalSupply + _value <= limitSupply);\r\n            totalSupply += _value;\r\n            balanceOf[owner] += _value;\r\n    }\r\n    \r\n   /**\r\n    * Transfer tokens from other address\r\n    *\r\n    * Send `_value` tokens to `_to` in behalf of `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transferByAdmin(address _from, address _to, uint256 _value) onlyAdmin public returns (bool success) {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_from != 0x0);                             // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_from != owner);                           // Prevent transfer token from owner\r\n        require(administrators[_from] == false);           // prevent transfer from administrators\r\n        require(balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        TransferByAdmin(msg.sender,_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * Transfer tokens from other address\r\n    * @param from_ get address from\r\n    */\r\n    function balancefrom(address from_) onlyAdmin  public constant returns(uint){\r\n              return balanceOf[from_];\r\n    }\r\n\r\n    function setAdmin(address admin_, bool flag_) onlyOwner public returns (bool success){\r\n        administrators[admin_] = flag_;\r\n        return true;\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"}],\"name\":\"balancefrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"},{\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferByAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incrementSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferByAdmin\",\"type\":\"event\"}]","ContractName":"BIOBIT","CompilerVersion":"v0.4.21-nightly.2018.2.23+commit.cae6cc2c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18a61d1bb54e565d93539a1058889725b826c68a7aa6a5303bbfcace2b95c147"}]}