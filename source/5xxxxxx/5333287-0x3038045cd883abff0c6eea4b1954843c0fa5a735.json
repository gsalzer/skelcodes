{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    assert(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev SafeMath adapted for int256\r\n */\r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when multiplying INT256_MIN with -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    assert(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n    int256 c = a * b;\r\n    assert((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when dividing INT256_MIN by -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    assert(!(a == - 2**255 && b == -1));\r\n\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    int256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    assert((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    assert((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n\r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    assert(a>=0);\r\n    return uint256(a);\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev SafeMath adapted for uint8\r\n */\r\nlibrary SafeMathUint8 {\r\n  function mul(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    uint8 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint8 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    uint8 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev SafeMath adapted for uint96\r\n */\r\nlibrary SafeMathUint96 {\r\n  function mul(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    uint96 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint96 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    uint96 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Administrable\r\n * @dev Base contract for the administration of Core. Handles whitelisting of currency contracts\r\n */\r\ncontract Administrable is Pausable {\r\n\r\n    // mapping of address of trusted contract\r\n    mapping(address => uint8) public trustedCurrencyContracts;\r\n\r\n    // Events of the system\r\n    event NewTrustedContract(address newContract);\r\n    event RemoveTrustedContract(address oldContract);\r\n\r\n    /**\r\n     * @dev add a trusted currencyContract \r\n     *\r\n     * @param _newContractAddress The address of the currencyContract\r\n     */\r\n    function adminAddTrustedCurrencyContract(address _newContractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        trustedCurrencyContracts[_newContractAddress] = 1; //Using int instead of boolean in case we need several states in the future.\r\n        NewTrustedContract(_newContractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a trusted currencyContract \r\n     *\r\n     * @param _oldTrustedContractAddress The address of the currencyContract\r\n     */\r\n    function adminRemoveTrustedCurrencyContract(address _oldTrustedContractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(trustedCurrencyContracts[_oldTrustedContractAddress] != 0);\r\n        trustedCurrencyContracts[_oldTrustedContractAddress] = 0;\r\n        RemoveTrustedContract(_oldTrustedContractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev get the status of a trusted currencyContract \r\n     * @dev Not used today, useful if we have several states in the future.\r\n     *\r\n     * @param _contractAddress The address of the currencyContract\r\n     * @return The status of the currencyContract. If trusted 1, otherwise 0\r\n     */\r\n    function getStatusContract(address _contractAddress)\r\n        view\r\n        external\r\n        returns(uint8) \r\n    {\r\n        return trustedCurrencyContracts[_contractAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev check if a currencyContract is trusted\r\n     *\r\n     * @param _contractAddress The address of the currencyContract\r\n     * @return bool true if contract is trusted\r\n     */\r\n    function isTrustedContract(address _contractAddress)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return trustedCurrencyContracts[_contractAddress] == 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RequestCore\r\n *\r\n * @dev The Core is the main contract which stores all the requests.\r\n *\r\n * @dev The Core philosophy is to be as much flexible as possible to adapt in the future to any new system\r\n * @dev All the important conditions and an important part of the business logic takes place in the currency contracts.\r\n * @dev Requests can only be created in the currency contracts\r\n * @dev Currency contracts have to be allowed by the Core and respect the business logic.\r\n * @dev Request Network will develop one currency contracts per currency and anyone can creates its own currency contracts.\r\n */\r\ncontract RequestCore is Administrable {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint96 for uint96;\r\n    using SafeMathInt for int256;\r\n    using SafeMathUint8 for uint8;\r\n\r\n    enum State { Created, Accepted, Canceled }\r\n\r\n    struct Request {\r\n        // ID address of the payer\r\n        address payer;\r\n\r\n        // Address of the contract managing the request\r\n        address currencyContract;\r\n\r\n        // State of the request\r\n        State state;\r\n\r\n        // Main payee\r\n        Payee payee;\r\n    }\r\n\r\n    // Structure for the payees. A sub payee is an additional entity which will be paid during the processing of the invoice.\r\n    // ex: can be used for routing taxes or fees at the moment of the payment.\r\n    struct Payee {\r\n        // ID address of the payee\r\n        address addr;\r\n\r\n        // amount expected for the payee. \r\n        // Not uint for evolution (may need negative amounts one day), and simpler operations\r\n        int256 expectedAmount;\r\n\r\n        // balance of the payee\r\n        int256 balance;\r\n    }\r\n\r\n    // Count of request in the mapping. A maximum of 2^96 requests can be created per Core contract.\r\n    // Integer, incremented for each request of a Core contract, starting from 0\r\n    // RequestId (256bits) = contract address (160bits) + numRequest\r\n    uint96 public numRequests; \r\n    \r\n    // Mapping of all the Requests. The key is the request ID.\r\n    // not anymore public to avoid \"UnimplementedFeatureError: Only in-memory reference type can be stored.\"\r\n    // https://github.com/ethereum/solidity/issues/3577\r\n    mapping(bytes32 => Request) requests;\r\n\r\n    // Mapping of subPayees of the requests. The key is the request ID.\r\n    // This array is outside the Request structure to optimize the gas cost when there is only 1 payee.\r\n    mapping(bytes32 => Payee[256]) public subPayees;\r\n\r\n    /*\r\n     *  Events \r\n     */\r\n    event Created(bytes32 indexed requestId, address indexed payee, address indexed payer, address creator, string data);\r\n    event Accepted(bytes32 indexed requestId);\r\n    event Canceled(bytes32 indexed requestId);\r\n\r\n    // Event for Payee & subPayees\r\n    event NewSubPayee(bytes32 indexed requestId, address indexed payee); // Separated from the Created Event to allow a 4th indexed parameter (subpayees)\r\n    event UpdateExpectedAmount(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\r\n    event UpdateBalance(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\r\n\r\n    /*\r\n     * @dev Function used by currency contracts to create a request in the Core\r\n     *\r\n     * @dev _payees and _expectedAmounts must have the same size\r\n     *\r\n     * @param _creator Request creator. The creator is the one who initiated the request (create or sign) and not necessarily the one who broadcasted it\r\n     * @param _payees array of payees address (the index 0 will be the payee the others are subPayees). Size must be smaller than 256.\r\n     * @param _expectedAmounts array of Expected amount to be received by each payees. Must be in same order than the payees. Size must be smaller than 256.\r\n     * @param _payer Entity expected to pay\r\n     * @param _data data of the request\r\n     * @return Returns the id of the request\r\n     */\r\n    function createRequest(\r\n        address     _creator,\r\n        address[]   _payees,\r\n        int256[]    _expectedAmounts,\r\n        address     _payer,\r\n        string      _data)\r\n        external\r\n        whenNotPaused \r\n        returns (bytes32 requestId) \r\n    {\r\n        // creator must not be null\r\n        require(_creator!=0); // not as modifier to lighten the stack\r\n        // call must come from a trusted contract\r\n        require(isTrustedContract(msg.sender)); // not as modifier to lighten the stack\r\n\r\n        // Generate the requestId\r\n        requestId = generateRequestId();\r\n\r\n        address mainPayee;\r\n        int256 mainExpectedAmount;\r\n        // extract the main payee if filled\r\n        if(_payees.length!=0) {\r\n            mainPayee = _payees[0];\r\n            mainExpectedAmount = _expectedAmounts[0];\r\n        }\r\n\r\n        // Store the new request\r\n        requests[requestId] = Request(_payer, msg.sender, State.Created, Payee(mainPayee, mainExpectedAmount, 0));\r\n\r\n        // Declare the new request\r\n        Created(requestId, mainPayee, _payer, _creator, _data);\r\n        \r\n        // Store and declare the sub payees (needed in internal function to avoid \"stack too deep\")\r\n        initSubPayees(requestId, _payees, _expectedAmounts);\r\n\r\n        return requestId;\r\n    }\r\n\r\n    /*\r\n     * @dev Function used by currency contracts to create a request in the Core from bytes\r\n     * @dev Used to avoid receiving a stack too deep error when called from a currency contract with too many parameters.\r\n     * @audit Note that to optimize the stack size and the gas cost we do not extract the params and store them in the stack. As a result there is some code redundancy\r\n     * @param _data bytes containing all the data packed :\r\n            address(creator)\r\n            address(payer)\r\n            uint8(number_of_payees)\r\n            [\r\n                address(main_payee_address)\r\n                int256(main_payee_expected_amount)\r\n                address(second_payee_address)\r\n                int256(second_payee_expected_amount)\r\n                ...\r\n            ]\r\n            uint8(data_string_size)\r\n            size(data)\r\n     * @return Returns the id of the request \r\n     */ \r\n    function createRequestFromBytes(bytes _data) \r\n        external\r\n        whenNotPaused \r\n        returns (bytes32 requestId) \r\n    {\r\n        // call must come from a trusted contract\r\n        require(isTrustedContract(msg.sender)); // not as modifier to lighten the stack\r\n\r\n        // extract address creator & payer\r\n        address creator = extractAddress(_data, 0);\r\n\r\n        address payer = extractAddress(_data, 20);\r\n\r\n        // creator must not be null\r\n        require(creator!=0);\r\n        \r\n        // extract the number of payees\r\n        uint8 payeesCount = uint8(_data[40]);\r\n\r\n        // get the position of the dataSize in the byte (= number_of_payees * (address_payee_size + int256_payee_size) + address_creator_size + address_payer_size + payees_count_size\r\n        //                                              (= number_of_payees * (20+32) + 20 + 20 + 1 )\r\n        uint256 offsetDataSize = uint256(payeesCount).mul(52).add(41);\r\n\r\n        // extract the data size and then the data itself\r\n        uint8 dataSize = uint8(_data[offsetDataSize]);\r\n        string memory dataStr = extractString(_data, dataSize, offsetDataSize.add(1));\r\n\r\n        address mainPayee;\r\n        int256 mainExpectedAmount;\r\n        // extract the main payee if possible\r\n        if(payeesCount!=0) {\r\n            mainPayee = extractAddress(_data, 41);\r\n            mainExpectedAmount = int256(extractBytes32(_data, 61));\r\n        }\r\n\r\n        // Generate the requestId\r\n        requestId = generateRequestId();\r\n\r\n        // Store the new request\r\n        requests[requestId] = Request(payer, msg.sender, State.Created, Payee(mainPayee, mainExpectedAmount, 0));\r\n\r\n        // Declare the new request\r\n        Created(requestId, mainPayee, payer, creator, dataStr);\r\n\r\n        // Store and declare the sub payees\r\n        for(uint8 i = 1; i < payeesCount; i = i.add(1)) {\r\n            address subPayeeAddress = extractAddress(_data, uint256(i).mul(52).add(41));\r\n\r\n            // payees address cannot be 0x0\r\n            require(subPayeeAddress != 0);\r\n\r\n            subPayees[requestId][i-1] =  Payee(subPayeeAddress, int256(extractBytes32(_data, uint256(i).mul(52).add(61))), 0);\r\n            NewSubPayee(requestId, subPayeeAddress);\r\n        }\r\n\r\n        return requestId;\r\n    }\r\n\r\n    /*\r\n     * @dev Function used by currency contracts to accept a request in the Core.\r\n     * @dev callable only by the currency contract of the request\r\n     * @param _requestId Request id\r\n     */ \r\n    function accept(bytes32 _requestId) \r\n        external\r\n    {\r\n        Request storage r = requests[_requestId];\r\n        require(r.currencyContract==msg.sender); \r\n        r.state = State.Accepted;\r\n        Accepted(_requestId);\r\n    }\r\n\r\n    /*\r\n     * @dev Function used by currency contracts to cancel a request in the Core. Several reasons can lead to cancel a request, see request life cycle for more info.\r\n     * @dev callable only by the currency contract of the request\r\n     * @param _requestId Request id\r\n     */ \r\n    function cancel(bytes32 _requestId)\r\n        external\r\n    {\r\n        Request storage r = requests[_requestId];\r\n        require(r.currencyContract==msg.sender);\r\n        r.state = State.Canceled;\r\n        Canceled(_requestId);\r\n    }   \r\n\r\n    /*\r\n     * @dev Function used to update the balance\r\n     * @dev callable only by the currency contract of the request\r\n     * @param _requestId Request id\r\n     * @param _payeeIndex index of the payee (0 = main payee)\r\n     * @param _deltaAmount modifier amount\r\n     */ \r\n    function updateBalance(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\r\n        external\r\n    {   \r\n        Request storage r = requests[_requestId];\r\n        require(r.currencyContract==msg.sender);\r\n\r\n        if( _payeeIndex == 0 ) {\r\n            // modify the main payee\r\n            r.payee.balance = r.payee.balance.add(_deltaAmount);\r\n        } else {\r\n            // modify the sub payee\r\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\r\n            sp.balance = sp.balance.add(_deltaAmount);\r\n        }\r\n        UpdateBalance(_requestId, _payeeIndex, _deltaAmount);\r\n    }\r\n\r\n    /*\r\n     * @dev Function update the expectedAmount adding additional or subtract\r\n     * @dev callable only by the currency contract of the request\r\n     * @param _requestId Request id\r\n     * @param _payeeIndex index of the payee (0 = main payee)\r\n     * @param _deltaAmount modifier amount\r\n     */ \r\n    function updateExpectedAmount(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\r\n        external\r\n    {   \r\n        Request storage r = requests[_requestId];\r\n        require(r.currencyContract==msg.sender); \r\n\r\n        if( _payeeIndex == 0 ) {\r\n            // modify the main payee\r\n            r.payee.expectedAmount = r.payee.expectedAmount.add(_deltaAmount);    \r\n        } else {\r\n            // modify the sub payee\r\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\r\n            sp.expectedAmount = sp.expectedAmount.add(_deltaAmount);\r\n        }\r\n        UpdateExpectedAmount(_requestId, _payeeIndex, _deltaAmount);\r\n    }\r\n\r\n    /*\r\n     * @dev Internal: Init payees for a request (needed to avoid 'stack too deep' in createRequest())\r\n     * @param _requestId Request id\r\n     * @param _payees array of payees address\r\n     * @param _expectedAmounts array of payees initial expected amounts\r\n     */ \r\n    function initSubPayees(bytes32 _requestId, address[] _payees, int256[] _expectedAmounts)\r\n        internal\r\n    {\r\n        require(_payees.length == _expectedAmounts.length);\r\n     \r\n        for (uint8 i = 1; i < _payees.length; i = i.add(1))\r\n        {\r\n            // payees address cannot be 0x0\r\n            require(_payees[i] != 0);\r\n            subPayees[_requestId][i-1] = Payee(_payees[i], _expectedAmounts[i], 0);\r\n            NewSubPayee(_requestId, _payees[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /* GETTER */\r\n    /*\r\n     * @dev Get address of a payee\r\n     * @param _requestId Request id\r\n     * @param _payeeIndex payee index (0 = main payee)\r\n     * @return payee address\r\n     */ \r\n    function getPayeeAddress(bytes32 _requestId, uint8 _payeeIndex)\r\n        public\r\n        constant\r\n        returns(address)\r\n    {\r\n        if(_payeeIndex == 0) {\r\n            return requests[_requestId].payee.addr;\r\n        } else {\r\n            return subPayees[_requestId][_payeeIndex-1].addr;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Get payer of a request\r\n     * @param _requestId Request id\r\n     * @return payer address\r\n     */ \r\n    function getPayer(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(address)\r\n    {\r\n        return requests[_requestId].payer;\r\n    }\r\n\r\n    /*\r\n     * @dev Get amount expected of a payee\r\n     * @param _requestId Request id\r\n     * @param _payeeIndex payee index (0 = main payee)\r\n     * @return amount expected\r\n     */     \r\n    function getPayeeExpectedAmount(bytes32 _requestId, uint8 _payeeIndex)\r\n        public\r\n        constant\r\n        returns(int256)\r\n    {\r\n        if(_payeeIndex == 0) {\r\n            return requests[_requestId].payee.expectedAmount;\r\n        } else {\r\n            return subPayees[_requestId][_payeeIndex-1].expectedAmount;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Get number of subPayees for a request\r\n     * @param _requestId Request id\r\n     * @return number of subPayees\r\n     */     \r\n    function getSubPayeesCount(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(uint8)\r\n    {\r\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\r\n            // nothing to do\r\n        }\r\n        return i;\r\n    }\r\n\r\n    /*\r\n     * @dev Get currencyContract of a request\r\n     * @param _requestId Request id\r\n     * @return currencyContract address\r\n     */\r\n    function getCurrencyContract(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(address)\r\n    {\r\n        return requests[_requestId].currencyContract;\r\n    }\r\n\r\n    /*\r\n     * @dev Get balance of a payee\r\n     * @param _requestId Request id\r\n     * @param _payeeIndex payee index (0 = main payee)\r\n     * @return balance\r\n     */     \r\n    function getPayeeBalance(bytes32 _requestId, uint8 _payeeIndex)\r\n        public\r\n        constant\r\n        returns(int256)\r\n    {\r\n        if(_payeeIndex == 0) {\r\n            return requests[_requestId].payee.balance;    \r\n        } else {\r\n            return subPayees[_requestId][_payeeIndex-1].balance;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Get balance total of a request\r\n     * @param _requestId Request id\r\n     * @return balance\r\n     */     \r\n    function getBalance(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(int256)\r\n    {\r\n        int256 balance = requests[_requestId].payee.balance;\r\n\r\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\r\n        {\r\n            balance = balance.add(subPayees[_requestId][i].balance);\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev check if all the payees balances are null\r\n     * @param _requestId Request id\r\n     * @return true if all the payees balances are equals to 0\r\n     */     \r\n    function areAllBalanceNull(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(bool isNull)\r\n    {\r\n        isNull = requests[_requestId].payee.balance == 0;\r\n\r\n        for (uint8 i = 0; isNull && subPayees[_requestId][i].addr != address(0); i = i.add(1))\r\n        {\r\n            isNull = subPayees[_requestId][i].balance == 0;\r\n        }\r\n\r\n        return isNull;\r\n    }\r\n\r\n    /*\r\n     * @dev Get total expectedAmount of a request\r\n     * @param _requestId Request id\r\n     * @return balance\r\n     */     \r\n    function getExpectedAmount(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(int256)\r\n    {\r\n        int256 expectedAmount = requests[_requestId].payee.expectedAmount;\r\n\r\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\r\n        {\r\n            expectedAmount = expectedAmount.add(subPayees[_requestId][i].expectedAmount);\r\n        }\r\n\r\n        return expectedAmount;\r\n    }\r\n\r\n    /*\r\n     * @dev Get state of a request\r\n     * @param _requestId Request id\r\n     * @return state\r\n     */ \r\n    function getState(bytes32 _requestId)\r\n        public\r\n        constant\r\n        returns(State)\r\n    {\r\n        return requests[_requestId].state;\r\n    }\r\n\r\n    /*\r\n     * @dev Get address of a payee\r\n     * @param _requestId Request id\r\n     * @return payee index (0 = main payee) or -1 if not address not found\r\n     */\r\n    function getPayeeIndex(bytes32 _requestId, address _address)\r\n        public\r\n        constant\r\n        returns(int16)\r\n    {\r\n        // return 0 if main payee\r\n        if(requests[_requestId].payee.addr == _address) return 0;\r\n\r\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\r\n        {\r\n            if(subPayees[_requestId][i].addr == _address) {\r\n                // if found return subPayee index + 1 (0 is main payee)\r\n                return i+1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /*\r\n     * @dev getter of a request\r\n     * @param _requestId Request id\r\n     * @return request as a tuple : (address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\r\n     */ \r\n    function getRequest(bytes32 _requestId) \r\n        external\r\n        constant\r\n        returns(address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\r\n    {\r\n        Request storage r = requests[_requestId];\r\n        return ( r.payer, \r\n                 r.currencyContract, \r\n                 r.state, \r\n                 r.payee.addr, \r\n                 r.payee.expectedAmount, \r\n                 r.payee.balance );\r\n    }\r\n\r\n    /*\r\n     * @dev extract a string from a bytes. Extracts a sub-part from tha bytes and convert it to string\r\n     * @param data bytes from where the string will be extracted\r\n     * @param size string size to extract\r\n     * @param _offset position of the first byte of the string in bytes\r\n     * @return string\r\n     */ \r\n    function extractString(bytes data, uint8 size, uint _offset) \r\n        internal \r\n        pure \r\n        returns (string) \r\n    {\r\n        bytes memory bytesString = new bytes(size);\r\n        for (uint j = 0; j < size; j++) {\r\n            bytesString[j] = data[_offset+j];\r\n        }\r\n        return string(bytesString);\r\n    }\r\n\r\n    /*\r\n     * @dev generate a new unique requestId\r\n     * @return a bytes32 requestId \r\n     */ \r\n    function generateRequestId()\r\n        internal\r\n        returns (bytes32)\r\n    {\r\n        // Update numRequest\r\n        numRequests = numRequests.add(1);\r\n        // requestId = ADDRESS_CONTRACT_CORE + numRequests (0xADRRESSCONTRACT00000NUMREQUEST)\r\n        return bytes32((uint256(this) << 96).add(numRequests));\r\n    }\r\n\r\n    /*\r\n     * @dev extract an address from a bytes at a given position\r\n     * @param _data bytes from where the address will be extract\r\n     * @param _offset position of the first byte of the address\r\n     * @return address\r\n     */\r\n    function extractAddress(bytes _data, uint offset)\r\n        internal\r\n        pure\r\n        returns (address m)\r\n    {\r\n        require(offset >=0 && offset + 20 <= _data.length);\r\n        assembly {\r\n            m := and( mload(add(_data, add(20, offset))), \r\n                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev extract a bytes32 from a bytes\r\n     * @param data bytes from where the bytes32 will be extract\r\n     * @param offset position of the first byte of the bytes32\r\n     * @return address\r\n     */\r\n    function extractBytes32(bytes _data, uint offset)\r\n        public\r\n        pure\r\n        returns (bytes32 bs)\r\n    {\r\n        require(offset >=0 && offset + 32 <= _data.length);\r\n        assembly {\r\n            bs := mload(add(_data, add(32, offset)))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev transfer to owner any tokens send by mistake on this contracts\r\n     * @param token The address of the token to transfer.\r\n     * @param amount The amount to be transfered.\r\n     */\r\n    function emergencyERC20Drain(ERC20 token, uint amount )\r\n        public\r\n        onlyOwner \r\n    {\r\n        token.transfer(owner, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title RequestEthereumCollect\r\n *\r\n * @dev RequestEthereumCollect is a contract managing the fees for ethereum currency contract\r\n */\r\ncontract RequestEthereumCollect is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // fees percentage (per 10 000)\r\n    uint256 public feesPer10000;\r\n\r\n    // maximum fees in wei\r\n    uint256 public maxFees;\r\n\r\n    // address of the contract that will burn req token (probably through Kyber)\r\n    address public requestBurnerContract;\r\n\r\n    /*\r\n     * @dev Constructor\r\n     * @param _requestBurnerContract Address of the contract where to send the ethers. \r\n     * This burner contract will have a function that can be called by anyone and will exchange ethers to req via Kyber and burn the REQ\r\n     */  \r\n    function RequestEthereumCollect(address _requestBurnerContract) \r\n        public\r\n    {\r\n        requestBurnerContract = _requestBurnerContract;\r\n    }\r\n\r\n    /*\r\n     * @dev send fees to the request burning address\r\n     * @param _amount amount to send to the burning address\r\n     */  \r\n    function collectForREQBurning(uint256 _amount)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        return requestBurnerContract.send(_amount);\r\n    }\r\n\r\n    /*\r\n     * @dev compute the fees\r\n     * @param _expectedAmount amount expected for the request\r\n     * @return \r\n     */  \r\n    function collectEstimation(int256 _expectedAmount)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // Force potential negative number to 0\r\n        if (_expectedAmount <= 0) {\r\n            return 0;\r\n        }\r\n        uint256 computedCollect = uint256(_expectedAmount).mul(feesPer10000).div(10000);\r\n        return computedCollect < maxFees ? computedCollect : maxFees;\r\n    }\r\n\r\n    /*\r\n     * @dev set the fees rate (per 10 000)\r\n     * @param _newRate new rate\r\n     * @return \r\n     */  \r\n    function setFeesPerTenThousand(uint256 _newRate) \r\n        external\r\n        onlyOwner\r\n    {\r\n        feesPer10000=_newRate;\r\n    }\r\n\r\n    /*\r\n     * @dev set the maximum fees in wei\r\n     * @param _newMax new max\r\n     * @return \r\n     */  \r\n    function setMaxCollectable(uint256 _newMax) \r\n        external\r\n        onlyOwner\r\n    {\r\n        maxFees=_newMax;\r\n    }\r\n\r\n    /*\r\n     * @dev set the request burner address\r\n     * @param _requestBurnerContract address of the contract that will burn req token (probably through Kyber)\r\n     * @return \r\n     */  \r\n    function setRequestBurnerContract(address _requestBurnerContract) \r\n        external\r\n        onlyOwner\r\n    {\r\n        requestBurnerContract=_requestBurnerContract;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RequestEthereum\r\n *\r\n * @dev RequestEthereum is the currency contract managing the request in Ethereum\r\n * @dev The contract can be paused. In this case, nobody can create Requests anymore but people can still interact with them.\r\n *\r\n * @dev Requests can be created by the Payee with createRequestAsPayee(), by the payer with createRequestAsPayer() or by the payer from a request signed offchain by the payee with broadcastSignedRequestAsPayer()\r\n */\r\ncontract RequestEthereum is RequestEthereumCollect {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using SafeMathUint8 for uint8;\r\n\r\n    // RequestCore object\r\n    RequestCore public requestCore;\r\n\r\n    // payment addresses by requestId (optional). We separate the Identity of the payee/payer (in the core) and the wallet address in the currency contract\r\n    mapping(bytes32 => address[256]) public payeesPaymentAddress;\r\n    mapping(bytes32 => address) public payerRefundAddress;\r\n\r\n    /*\r\n     * @dev Constructor\r\n     * @param _requestCoreAddress Request Core address\r\n     * @param _requestBurnerAddress Request Burner contract address\r\n     */\r\n    function RequestEthereum(address _requestCoreAddress, address _requestBurnerAddress) RequestEthereumCollect(_requestBurnerAddress) public\r\n    {\r\n        requestCore=RequestCore(_requestCoreAddress);\r\n    }\r\n\r\n    /*\r\n     * @dev Function to create a request as payee\r\n     *\r\n     * @dev msg.sender will be the payee\r\n     * @dev if _payeesPaymentAddress.length > _payeesIdAddress.length, the extra addresses will be stored but never used\r\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\r\n     *\r\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee - must be msg.sender - the others are subPayees)\r\n     * @param _payeesPaymentAddress array of payees address for payment (optional)\r\n     * @param _expectedAmounts array of Expected amount to be received by each payees\r\n     * @param _payer Entity expected to pay\r\n     * @param _payerRefundAddress Address of refund for the payer (optional)\r\n     * @param _data Hash linking to additional data on the Request stored on IPFS\r\n     *\r\n     * @return Returns the id of the request\r\n     */\r\n    function createRequestAsPayee(\r\n        address[]   _payeesIdAddress,\r\n        address[]   _payeesPaymentAddress,\r\n        int256[]    _expectedAmounts,\r\n        address     _payer,\r\n        address     _payerRefundAddress,\r\n        string      _data)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        returns(bytes32 requestId)\r\n    {\r\n        require(msg.sender == _payeesIdAddress[0] && msg.sender != _payer && _payer != 0);\r\n\r\n        uint256 fees;\r\n        (requestId, fees) = createRequest(_payer, _payeesIdAddress, _payeesPaymentAddress, _expectedAmounts, _payerRefundAddress, _data);\r\n\r\n        // check if the value send match exactly the fees (no under or over payment allowed)\r\n        require(fees == msg.value);\r\n\r\n        return requestId;\r\n    }\r\n\r\n    /*\r\n     * @dev Function to create a request as payer. The request is payed if _payeeAmounts > 0.\r\n     *\r\n     * @dev msg.sender will be the payer\r\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\r\n     *\r\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee the others are subPayees)\r\n     * @param _expectedAmounts array of Expected amount to be received by each payees\r\n     * @param _payerRefundAddress Address of refund for the payer (optional)\r\n     * @param _payeeAmounts array of amount repartition for the payment\r\n     * @param _additionals array to increase the ExpectedAmount for payees\r\n     * @param _data Hash linking to additional data on the Request stored on IPFS\r\n     *\r\n     * @return Returns the id of the request\r\n     */\r\n    function createRequestAsPayer(\r\n        address[]   _payeesIdAddress,\r\n        int256[]    _expectedAmounts,\r\n        address     _payerRefundAddress,\r\n        uint256[]   _payeeAmounts,\r\n        uint256[]   _additionals,\r\n        string      _data)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        returns(bytes32 requestId)\r\n    {\r\n        require(msg.sender != _payeesIdAddress[0] && _payeesIdAddress[0] != 0);\r\n\r\n        // payeesPaymentAddress is not offered as argument here to avoid scam\r\n        address[] memory emptyPayeesPaymentAddress = new address[](0);\r\n        uint256 fees;\r\n        (requestId, fees) = createRequest(msg.sender, _payeesIdAddress, emptyPayeesPaymentAddress, _expectedAmounts, _payerRefundAddress, _data);\r\n\r\n        // accept and pay the request with the value remaining after the fee collect\r\n        acceptAndPay(requestId, _payeeAmounts, _additionals, msg.value.sub(fees));\r\n\r\n        return requestId;\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev Function to broadcast and accept an offchain signed request (can be paid and additionals also)\r\n     *\r\n     * @dev _payer will be set msg.sender\r\n     * @dev if _payeesPaymentAddress.length > _requestData.payeesIdAddress.length, the extra addresses will be stored but never used\r\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\r\n     *\r\n     * @param _requestData nested bytes containing : creator, payer, payees, expectedAmounts, data\r\n     * @param _payeesPaymentAddress array of payees address for payment (optional) \r\n     * @param _payeeAmounts array of amount repartition for the payment\r\n     * @param _additionals array to increase the ExpectedAmount for payees\r\n     * @param _expirationDate timestamp after that the signed request cannot be broadcasted\r\n     * @param _signature ECDSA signature in bytes\r\n     *\r\n     * @return Returns the id of the request\r\n     */\r\n    function broadcastSignedRequestAsPayer(\r\n        bytes       _requestData, // gather data to avoid \"stack too deep\"\r\n        address[]   _payeesPaymentAddress,\r\n        uint256[]   _payeeAmounts,\r\n        uint256[]   _additionals,\r\n        uint256     _expirationDate,\r\n        bytes       _signature)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        returns(bytes32)\r\n    {\r\n        // check expiration date\r\n        require(_expirationDate >= block.timestamp);\r\n\r\n        // check the signature\r\n        require(checkRequestSignature(_requestData, _payeesPaymentAddress, _expirationDate, _signature));\r\n\r\n        // create accept and pay the request\r\n        return createAcceptAndPayFromBytes(_requestData,  _payeesPaymentAddress, _payeeAmounts, _additionals);\r\n    }\r\n\r\n    /*\r\n     * @dev Internal function to create, accept, add additionals and pay a request as Payer\r\n     *\r\n     * @dev msg.sender must be _payer\r\n     *\r\n     * @param _requestData nasty bytes containing : creator, payer, payees|expectedAmounts, data\r\n     * @param _payeesPaymentAddress array of payees address for payment (optional)\r\n     * @param _payeeAmounts array of amount repartition for the payment\r\n     * @param _additionals Will increase the ExpectedAmount of the request right after its creation by adding additionals\r\n     *\r\n     * @return Returns the id of the request\r\n     */\r\n    function createAcceptAndPayFromBytes(\r\n        bytes       _requestData,\r\n        address[]   _payeesPaymentAddress,\r\n        uint256[]   _payeeAmounts,\r\n        uint256[]   _additionals)\r\n        internal\r\n        returns(bytes32 requestId)\r\n    {\r\n        // extract main payee\r\n        address mainPayee = extractAddress(_requestData, 41);\r\n        require(msg.sender != mainPayee && mainPayee != 0);\r\n        // creator must be the main payee\r\n        require(extractAddress(_requestData, 0) == mainPayee);\r\n\r\n        // extract the number of payees\r\n        uint8 payeesCount = uint8(_requestData[40]);\r\n        int256 totalExpectedAmounts = 0;\r\n        for(uint8 i = 0; i < payeesCount; i++) {\r\n            // extract the expectedAmount for the payee[i]\r\n            // NB: no need of SafeMath here because 0 < i < 256 (uint8)\r\n            int256 expectedAmountTemp = int256(extractBytes32(_requestData, 61 + 52 * uint256(i)));\r\n            // compute the total expected amount of the request\r\n            totalExpectedAmounts = totalExpectedAmounts.add(expectedAmountTemp);\r\n            // all expected amount must be positibe\r\n            require(expectedAmountTemp>0);\r\n        }\r\n\r\n        // collect the fees\r\n        uint256 fees = collectEstimation(totalExpectedAmounts);\r\n\r\n        // check fees has been well received\r\n        // do the action and assertion in one to save a variable\r\n        require(collectForREQBurning(fees));\r\n\r\n        // insert the msg.sender as the payer in the bytes\r\n        updateBytes20inBytes(_requestData, 20, bytes20(msg.sender));\r\n        // store request in the core,\r\n        requestId = requestCore.createRequestFromBytes(_requestData);\r\n\r\n        // set payment addresses for payees\r\n        for (uint8 j = 0; j < _payeesPaymentAddress.length; j = j.add(1)) {\r\n            payeesPaymentAddress[requestId][j] = _payeesPaymentAddress[j];\r\n        }\r\n\r\n        // accept and pay the request with the value remaining after the fee collect\r\n        acceptAndPay(requestId, _payeeAmounts, _additionals, msg.value.sub(fees));\r\n\r\n        return requestId;\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev Internal function to create a request\r\n     *\r\n     * @dev msg.sender is the creator of the request\r\n     *\r\n     * @param _payer Payer identity address\r\n     * @param _payees Payees identity address\r\n     * @param _payeesPaymentAddress Payees payment address\r\n     * @param _expectedAmounts Expected amounts to be received by payees\r\n     * @param _payerRefundAddress payer refund address\r\n     * @param _data Hash linking to additional data on the Request stored on IPFS\r\n     *\r\n     * @return Returns the id of the request\r\n     */\r\n    function createRequest(\r\n        address     _payer,\r\n        address[]   _payees,\r\n        address[]   _payeesPaymentAddress,\r\n        int256[]    _expectedAmounts,\r\n        address     _payerRefundAddress,\r\n        string      _data)\r\n        internal\r\n        returns(bytes32 requestId, uint256 fees)\r\n    {\r\n        int256 totalExpectedAmounts = 0;\r\n        for (uint8 i = 0; i < _expectedAmounts.length; i = i.add(1))\r\n        {\r\n            // all expected amount must be positive\r\n            require(_expectedAmounts[i]>=0);\r\n            // compute the total expected amount of the request\r\n            totalExpectedAmounts = totalExpectedAmounts.add(_expectedAmounts[i]);\r\n        }\r\n\r\n        // collect the fees\r\n        fees = collectEstimation(totalExpectedAmounts);\r\n        // check fees has been well received\r\n        require(collectForREQBurning(fees));\r\n\r\n        // store request in the core\r\n        requestId= requestCore.createRequest(msg.sender, _payees, _expectedAmounts, _payer, _data);\r\n\r\n        // set payment addresses for payees\r\n        for (uint8 j = 0; j < _payeesPaymentAddress.length; j = j.add(1)) {\r\n            payeesPaymentAddress[requestId][j] = _payeesPaymentAddress[j];\r\n        }\r\n        // set payment address for payer\r\n        if(_payerRefundAddress != 0) {\r\n            payerRefundAddress[requestId] = _payerRefundAddress;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Internal function to accept, add additionals and pay a request as Payer\r\n     *\r\n     * @param _requestId id of the request\r\n     * @param _payeesAmounts Amount to pay to payees (sum must be equals to _amountPaid)\r\n     * @param _additionals Will increase the ExpectedAmounts of payees\r\n     * @param _amountPaid amount in msg.value minus the fees\r\n     *\r\n     */ \r\n    function acceptAndPay(\r\n        bytes32 _requestId,\r\n        uint256[] _payeeAmounts,\r\n        uint256[] _additionals,\r\n        uint256 _amountPaid)\r\n        internal\r\n    {\r\n        requestCore.accept(_requestId);\r\n        \r\n        additionalInternal(_requestId, _additionals);\r\n\r\n        if(_amountPaid > 0) {\r\n            paymentInternal(_requestId, _payeeAmounts, _amountPaid);\r\n        }\r\n    }\r\n\r\n    // ---- INTERFACE FUNCTIONS ------------------------------------------------------------------------------------\r\n\r\n    /*\r\n     * @dev Function to accept a request\r\n     *\r\n     * @dev msg.sender must be _payer\r\n     * @dev A request can also be accepted by using directly the payment function on a request in the Created status\r\n     *\r\n     * @param _requestId id of the request\r\n     */\r\n    function accept(bytes32 _requestId)\r\n        external\r\n        whenNotPaused\r\n        condition(requestCore.getPayer(_requestId)==msg.sender)\r\n        condition(requestCore.getState(_requestId)==RequestCore.State.Created)\r\n    {\r\n        requestCore.accept(_requestId);\r\n    }\r\n\r\n    /*\r\n     * @dev Function to cancel a request\r\n     *\r\n     * @dev msg.sender must be the _payer or the _payee.\r\n     * @dev only request with balance equals to zero can be cancel\r\n     *\r\n     * @param _requestId id of the request\r\n     */\r\n    function cancel(bytes32 _requestId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // payer can cancel if request is just created\r\n        bool isPayerAndCreated = requestCore.getPayer(_requestId)==msg.sender && requestCore.getState(_requestId)==RequestCore.State.Created;\r\n\r\n        // payee can cancel when request is not canceled yet\r\n        bool isPayeeAndNotCanceled = requestCore.getPayeeAddress(_requestId,0)==msg.sender && requestCore.getState(_requestId)!=RequestCore.State.Canceled;\r\n\r\n        require(isPayerAndCreated || isPayeeAndNotCanceled);\r\n\r\n        // impossible to cancel a Request with any payees balance != 0\r\n        require(requestCore.areAllBalanceNull(_requestId));\r\n\r\n        requestCore.cancel(_requestId);\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n\r\n\r\n    // ---- CONTRACT FUNCTIONS ------------------------------------------------------------------------------------\r\n    /*\r\n     * @dev Function PAYABLE to pay a request in ether.\r\n     *\r\n     * @dev the request will be automatically accepted if msg.sender==payer.\r\n     *\r\n     * @param _requestId id of the request\r\n     * @param _payeesAmounts Amount to pay to payees (sum must be equal to msg.value) in wei\r\n     * @param _additionalsAmount amount of additionals per payee in wei to declare\r\n     */\r\n    function paymentAction(\r\n        bytes32 _requestId,\r\n        uint256[] _payeeAmounts,\r\n        uint256[] _additionalAmounts)\r\n        external\r\n        whenNotPaused\r\n        payable\r\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\r\n        condition(_additionalAmounts.length == 0 || msg.sender == requestCore.getPayer(_requestId))\r\n    {\r\n        // automatically accept request if request is created and msg.sender is payer\r\n        if(requestCore.getState(_requestId)==RequestCore.State.Created && msg.sender == requestCore.getPayer(_requestId)) {\r\n            requestCore.accept(_requestId);\r\n        }\r\n\r\n        additionalInternal(_requestId, _additionalAmounts);\r\n\r\n        paymentInternal(_requestId, _payeeAmounts, msg.value);\r\n    }\r\n\r\n    /*\r\n     * @dev Function PAYABLE to pay back in ether a request to the payer\r\n     *\r\n     * @dev msg.sender must be one of the payees\r\n     * @dev the request must be created or accepted\r\n     *\r\n     * @param _requestId id of the request\r\n     */\r\n    function refundAction(bytes32 _requestId)\r\n        external\r\n        whenNotPaused\r\n        payable\r\n    {\r\n        refundInternal(_requestId, msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * @dev Function to declare a subtract\r\n     *\r\n     * @dev msg.sender must be _payee\r\n     * @dev the request must be accepted or created\r\n     *\r\n     * @param _requestId id of the request\r\n     * @param _subtractAmounts amounts of subtract in wei to declare (index 0 is for main payee)\r\n     */\r\n    function subtractAction(bytes32 _requestId, uint256[] _subtractAmounts)\r\n        external\r\n        whenNotPaused\r\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\r\n        onlyRequestPayee(_requestId)\r\n    {\r\n        for(uint8 i = 0; i < _subtractAmounts.length; i = i.add(1)) {\r\n            if(_subtractAmounts[i] != 0) {\r\n                // subtract must be equal or lower than amount expected\r\n                require(requestCore.getPayeeExpectedAmount(_requestId,i) >= _subtractAmounts[i].toInt256Safe());\r\n                // store and declare the subtract in the core\r\n                requestCore.updateExpectedAmount(_requestId, i, -_subtractAmounts[i].toInt256Safe());\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Function to declare an additional\r\n     *\r\n     * @dev msg.sender must be _payer\r\n     * @dev the request must be accepted or created\r\n     *\r\n     * @param _requestId id of the request\r\n     * @param _additionalAmounts amounts of additional in wei to declare (index 0 is for main payee)\r\n     */\r\n    function additionalAction(bytes32 _requestId, uint256[] _additionalAmounts)\r\n        external\r\n        whenNotPaused\r\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\r\n        onlyRequestPayer(_requestId)\r\n    {\r\n        additionalInternal(_requestId, _additionalAmounts);\r\n    }\r\n    // ----------------------------------------------------------------------------------------\r\n\r\n\r\n    // ---- INTERNAL FUNCTIONS ------------------------------------------------------------------------------------\r\n    /*\r\n     * @dev Function internal to manage additional declaration\r\n     *\r\n     * @param _requestId id of the request\r\n     * @param _additionalAmounts amount of additional to declare\r\n     */\r\n    function additionalInternal(bytes32 _requestId, uint256[] _additionalAmounts)\r\n        internal\r\n    {\r\n        // we cannot have more additional amounts declared than actual payees but we can have fewer\r\n        require(_additionalAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1));\r\n\r\n        for(uint8 i = 0; i < _additionalAmounts.length; i = i.add(1)) {\r\n            if(_additionalAmounts[i] != 0) {\r\n                // Store and declare the additional in the core\r\n                requestCore.updateExpectedAmount(_requestId, i, _additionalAmounts[i].toInt256Safe());\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Function internal to manage payment declaration\r\n     *\r\n     * @param _requestId id of the request\r\n     * @param _payeesAmounts Amount to pay to payees (sum must be equals to msg.value)\r\n     * @param _value amount paid\r\n     */\r\n    function paymentInternal(\r\n        bytes32     _requestId,\r\n        uint256[]   _payeeAmounts,\r\n        uint256     _value)\r\n        internal\r\n    {\r\n        // we cannot have more amounts declared than actual payees\r\n        require(_payeeAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1));\r\n\r\n        uint256 totalPayeeAmounts = 0;\r\n\r\n        for(uint8 i = 0; i < _payeeAmounts.length; i = i.add(1)) {\r\n            if(_payeeAmounts[i] != 0) {\r\n                // compute the total amount declared\r\n                totalPayeeAmounts = totalPayeeAmounts.add(_payeeAmounts[i]);\r\n\r\n                // Store and declare the payment to the core\r\n                requestCore.updateBalance(_requestId, i, _payeeAmounts[i].toInt256Safe());\r\n\r\n                // pay the payment address if given, the id address otherwise\r\n                address addressToPay;\r\n                if(payeesPaymentAddress[_requestId][i] == 0) {\r\n                    addressToPay = requestCore.getPayeeAddress(_requestId, i);\r\n                } else {\r\n                    addressToPay = payeesPaymentAddress[_requestId][i];\r\n                }\r\n\r\n                //payment done, the money was sent\r\n                fundOrderInternal(addressToPay, _payeeAmounts[i]);\r\n            }\r\n        }\r\n\r\n        // check if payment repartition match the value paid\r\n        require(_value==totalPayeeAmounts);\r\n    }\r\n\r\n    /*\r\n     * @dev Function internal to manage refund declaration\r\n     *\r\n     * @param _requestId id of the request\r\n\r\n     * @param _fromAddress address from where the refund has been done\r\n     * @param _amount amount of the refund in wei to declare\r\n     *\r\n     * @return true if the refund is done, false otherwise\r\n     */\r\n    function refundInternal(\r\n        bytes32 _requestId,\r\n        address _fromAddress,\r\n        uint256 _amount)\r\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\r\n        internal\r\n    {\r\n        // Check if the _fromAddress is a payeesId\r\n        // int16 to allow -1 value\r\n        int16 payeeIndex = requestCore.getPayeeIndex(_requestId, _fromAddress);\r\n        if(payeeIndex < 0) {\r\n            uint8 payeesCount = requestCore.getSubPayeesCount(_requestId).add(1);\r\n\r\n            // if not ID addresses maybe in the payee payments addresses\r\n            for (uint8 i = 0; i < payeesCount && payeeIndex == -1; i = i.add(1)) {\r\n                if(payeesPaymentAddress[_requestId][i] == _fromAddress) {\r\n                    // get the payeeIndex\r\n                    payeeIndex = int16(i);\r\n                }\r\n            }\r\n        }\r\n        // the address must be found somewhere\r\n        require(payeeIndex >= 0); \r\n\r\n        // Casting to uin8 doesn't lose bits because payeeIndex < 256. payeeIndex was declared int16 to allow -1\r\n        requestCore.updateBalance(_requestId, uint8(payeeIndex), -_amount.toInt256Safe());\r\n\r\n        // refund to the payment address if given, the id address otherwise\r\n        address addressToPay = payerRefundAddress[_requestId];\r\n        if(addressToPay == 0) {\r\n            addressToPay = requestCore.getPayer(_requestId);\r\n        }\r\n\r\n        // refund declared, the money is ready to be sent to the payer\r\n        fundOrderInternal(addressToPay, _amount);\r\n    }\r\n\r\n    /*\r\n     * @dev Function internal to manage fund mouvement\r\n     * @dev We had to chose between a withdrawal pattern, a transfer pattern or a transfer+withdrawal pattern and chose the transfer pattern.\r\n     * @dev The withdrawal pattern would make UX difficult. The transfer+withdrawal pattern would make contracts interacting with the request protocol complex.\r\n     * @dev N.B.: The transfer pattern will have to be clearly explained to users. It enables a payee to create unpayable requests.\r\n     *\r\n     * @param _recipient address where the wei has to be sent to\r\n     * @param _amount amount in wei to send\r\n     *\r\n     */\r\n    function fundOrderInternal(\r\n        address _recipient,\r\n        uint256 _amount)\r\n        internal\r\n    {\r\n        _recipient.transfer(_amount);\r\n    }\r\n\r\n    /*\r\n     * @dev Function internal to calculate Keccak-256 hash of a request with specified parameters\r\n     *\r\n     * @param _data bytes containing all the data packed\r\n     * @param _payeesPaymentAddress array of payees payment addresses\r\n     * @param _expirationDate timestamp after what the signed request cannot be broadcasted\r\n     *\r\n     * @return Keccak-256 hash of (this,_requestData, _payeesPaymentAddress, _expirationDate)\r\n     */\r\n    function getRequestHash(\r\n        // _requestData is from the core\r\n        bytes       _requestData,\r\n\r\n        // _payeesPaymentAddress and _expirationDate are not from the core but needs to be signed\r\n        address[]   _payeesPaymentAddress,\r\n        uint256     _expirationDate)\r\n        internal\r\n        view\r\n        returns(bytes32)\r\n    {\r\n        return keccak256(this, _requestData, _payeesPaymentAddress, _expirationDate);\r\n    }\r\n\r\n    /*\r\n     * @dev Verifies that a hash signature is valid. 0x style\r\n     * @param signer address of signer.\r\n     * @param hash Signed Keccak-256 hash.\r\n     * @param v ECDSA signature parameter v.\r\n     * @param r ECDSA signature parameters r.\r\n     * @param s ECDSA signature parameters s.\r\n     * @return Validity of order signature.\r\n     */\r\n    function isValidSignature(\r\n        address signer,\r\n        bytes32 hash,\r\n        uint8   v,\r\n        bytes32 r,\r\n        bytes32 s)\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return signer == ecrecover(\r\n            keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @dev Check the validity of a signed request & the expiration date\r\n     * @param _data bytes containing all the data packed :\r\n            address(creator)\r\n            address(payer)\r\n            uint8(number_of_payees)\r\n            [\r\n                address(main_payee_address)\r\n                int256(main_payee_expected_amount)\r\n                address(second_payee_address)\r\n                int256(second_payee_expected_amount)\r\n                ...\r\n            ]\r\n            uint8(data_string_size)\r\n            size(data)\r\n     * @param _payeesPaymentAddress array of payees payment addresses (the index 0 will be the payee the others are subPayees)\r\n     * @param _expirationDate timestamp after that the signed request cannot be broadcasted\r\n     * @param _signature ECDSA signature containing v, r and s as bytes\r\n     *\r\n     * @return Validity of order signature.\r\n     */ \r\n    function checkRequestSignature(\r\n        bytes       _requestData,\r\n        address[]   _payeesPaymentAddress,\r\n        uint256     _expirationDate,\r\n        bytes       _signature)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 hash = getRequestHash(_requestData, _payeesPaymentAddress, _expirationDate);\r\n\r\n        // extract \"v, r, s\" from the signature\r\n        uint8 v = uint8(_signature[64]);\r\n        v = v < 27 ? v.add(27) : v;\r\n        bytes32 r = extractBytes32(_signature, 0);\r\n        bytes32 s = extractBytes32(_signature, 32);\r\n\r\n        // check signature of the hash with the creator address\r\n        return isValidSignature(extractAddress(_requestData, 0), hash, v, r, s);\r\n    }\r\n\r\n    //modifier\r\n    modifier condition(bool c)\r\n    {\r\n        require(c);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifier to check if msg.sender is payer\r\n     * @dev Revert if msg.sender is not payer\r\n     * @param _requestId id of the request\r\n     */ \r\n    modifier onlyRequestPayer(bytes32 _requestId)\r\n    {\r\n        require(requestCore.getPayer(_requestId)==msg.sender);\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * @dev Modifier to check if msg.sender is the main payee\r\n     * @dev Revert if msg.sender is not the main payee\r\n     * @param _requestId id of the request\r\n     */ \r\n    modifier onlyRequestPayee(bytes32 _requestId)\r\n    {\r\n        require(requestCore.getPayeeAddress(_requestId, 0)==msg.sender);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev modify 20 bytes in a bytes\r\n     * @param data bytes to modify\r\n     * @param offset position of the first byte to modify\r\n     * @param b bytes20 to insert\r\n     * @return address\r\n     */\r\n    function updateBytes20inBytes(bytes data, uint offset, bytes20 b)\r\n        internal\r\n        pure\r\n    {\r\n        require(offset >=0 && offset + 20 <= data.length);\r\n        assembly {\r\n            let m := mload(add(data, add(20, offset)))\r\n            m := and(m, 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000)\r\n            m := or(m, div(b, 0x1000000000000000000000000))\r\n            mstore(add(data, add(20, offset)), m)\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev extract an address in a bytes\r\n     * @param data bytes from where the address will be extract\r\n     * @param offset position of the first byte of the address\r\n     * @return address\r\n     */\r\n    function extractAddress(bytes _data, uint offset)\r\n        internal\r\n        pure\r\n        returns (address m) \r\n    {\r\n        require(offset >=0 && offset + 20 <= _data.length);\r\n        assembly {\r\n            m := and( mload(add(_data, add(20, offset))), \r\n                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev extract a bytes32 from a bytes\r\n     * @param data bytes from where the bytes32 will be extract\r\n     * @param offset position of the first byte of the bytes32\r\n     * @return address\r\n     */\r\n    function extractBytes32(bytes _data, uint offset)\r\n        public\r\n        pure\r\n        returns (bytes32 bs)\r\n    {\r\n        require(offset >=0 && offset + 32 <= _data.length);\r\n        assembly {\r\n            bs := mload(add(_data, add(32, offset)))\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev transfer to owner any tokens send by mistake on this contracts\r\n     * @param token The address of the token to transfer.\r\n     * @param amount The amount to be transfered.\r\n     */\r\n    function emergencyERC20Drain(ERC20 token, uint amount )\r\n        public\r\n        onlyOwner \r\n    {\r\n        token.transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_expectedAmount\",\"type\":\"int256\"}],\"name\":\"collectEstimation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payeesIdAddress\",\"type\":\"address[]\"},{\"name\":\"_expectedAmounts\",\"type\":\"int256[]\"},{\"name\":\"_payerRefundAddress\",\"type\":\"address\"},{\"name\":\"_payeeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_additionals\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"createRequestAsPayer\",\"outputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_payeeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_additionalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"paymentAction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_subtractAmounts\",\"type\":\"uint256[]\"}],\"name\":\"subtractAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setFeesPerTenThousand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestData\",\"type\":\"bytes\"},{\"name\":\"_payeesPaymentAddress\",\"type\":\"address[]\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkRequestSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestBurnerContract\",\"type\":\"address\"}],\"name\":\"setRequestBurnerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_additionalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"additionalAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestData\",\"type\":\"bytes\"},{\"name\":\"_payeesPaymentAddress\",\"type\":\"address[]\"},{\"name\":\"_payeeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_additionals\",\"type\":\"uint256[]\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"broadcastSignedRequestAsPayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payerRefundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payeesIdAddress\",\"type\":\"address[]\"},{\"name\":\"_payeesPaymentAddress\",\"type\":\"address[]\"},{\"name\":\"_expectedAmounts\",\"type\":\"int256[]\"},{\"name\":\"_payer\",\"type\":\"address\"},{\"name\":\"_payerRefundAddress\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"createRequestAsPayee\",\"outputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractBytes32\",\"outputs\":[{\"name\":\"bs\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesPer10000\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payeesPaymentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"refundAction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxCollectable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestBurnerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_requestCoreAddress\",\"type\":\"address\"},{\"name\":\"_requestBurnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RequestEthereum","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db600fda54568a35b78565b5257125bebc51eb27000000000000000000000000fcb4393e7faef06fab01c00d67c1895545aff3b8","Library":"","SwarmSource":"bzzr://b7b7de135c9eef2f859422958047d56a4552bfdcdc9c55e27c6ec758d24886ff"}]}