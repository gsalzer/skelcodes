{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n\r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n  function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\ncontract ERC223Token is ERC223 {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n\r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        if(length>0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract SaturnPresale is ContractReceiver {\r\n  using SafeMath for uint256;\r\n\r\n  bool public active = false;\r\n  mapping(address=>uint256) private purchased;\r\n  mapping(address=>uint256) private lockup;\r\n\r\n  address public tokenAddress;\r\n\r\n  uint256 private priceDiv;\r\n  uint256 private purchaseLimit;\r\n  uint256 public hardCap;\r\n  uint256 public sold;\r\n\r\n  address private owner;\r\n  address private treasury;\r\n\r\n  event Activated(uint256 time);\r\n  event Finished(uint256 time);\r\n  event Purchase(address indexed purchaser, uint256 amount, uint256 purchasedAt, uint256 redeemAt);\r\n\r\n  function SaturnPresale(address token, address ethRecepient, uint256 minPurchase, uint256 presaleHardCap, uint256 price) public {\r\n    tokenAddress  = token;\r\n    priceDiv      = price;\r\n    owner         = msg.sender;\r\n    purchaseLimit = minPurchase;\r\n    treasury      = ethRecepient;\r\n    hardCap       = presaleHardCap;\r\n  }\r\n\r\n  function tokenFallback(address /* _from */, uint _value, bytes /* _data */) public {\r\n    // Accept only SATURN ERC223 token\r\n    if (msg.sender != tokenAddress) { revert(); }\r\n    // If the Presale is active do not accept incoming transactions\r\n    if (active) { revert(); }\r\n    // Only accept one transaction in the amount of\r\n    if (_value != hardCap) { revert(); }\r\n\r\n    active = true;\r\n    Activated(now);\r\n  }\r\n\r\n  function balanceOf(address person) constant public returns (uint balance) {\r\n    return purchased[person];\r\n  }\r\n\r\n  function lockupOf(address person) constant public returns (uint timestamp) {\r\n    return lockup[person];\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens();\r\n  }\r\n\r\n  function buyTokens() payable public {\r\n    if (!active) { revert(); }\r\n    if (msg.value < purchaseLimit) { revert(); }\r\n\r\n    uint256 purchasedAmount = msg.value.div(priceDiv);\r\n    if (purchasedAmount == 0) { revert(); }\r\n    if (purchasedAmount > hardCap - sold) { revert(); }\r\n\r\n    if (lockup[msg.sender] == 0) {\r\n      lockup[msg.sender] = now + 1 years;\r\n    }\r\n    purchased[msg.sender] = purchased[msg.sender] + purchasedAmount;\r\n    sold = sold + purchasedAmount;\r\n    treasury.transfer(msg.value);\r\n    Purchase(msg.sender, purchasedAmount, now, lockup[msg.sender]);\r\n  }\r\n\r\n  function endPresale() public {\r\n    // only the creator of the smart contract\r\n    // can end the crowdsale prematurely\r\n    if (msg.sender != owner) { revert(); }\r\n    // can only stop an active crowdsale\r\n    if (!active) { revert(); }\r\n    _end();\r\n  }\r\n\r\n  function redeem() public {\r\n    if (purchased[msg.sender] == 0) { revert(); }\r\n    if (now < lockup[msg.sender]) { revert(); }\r\n\r\n    uint256 withdrawal = purchased[msg.sender];\r\n    purchased[msg.sender] = 0;\r\n\r\n    ERC223 token = ERC223(tokenAddress);\r\n    token.transfer(msg.sender, withdrawal);\r\n  }\r\n\r\n  function _end() private {\r\n    // if there are any tokens remaining - return them to the owner\r\n    if (sold < hardCap) {\r\n      ERC223 token = ERC223(tokenAddress);\r\n      token.transfer(treasury, hardCap.sub(sold));\r\n    }\r\n    active = false;\r\n    Finished(now);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"person\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"person\",\"type\":\"address\"}],\"name\":\"lockupOf\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"ethRecepient\",\"type\":\"address\"},{\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"name\":\"presaleHardCap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Finished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"redeemAt\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"}]","ContractName":"SaturnPresale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b9440022a095343b440d590fcd2d7a3794bd76c8000000000000000000000000d7537928b6ad4185c63f52050ab2f1d0068f8abc0000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000000000015d3ef79800000000000000000000000000000000000000000000000000000000003b9aca00","Library":"","SwarmSource":"bzzr://05ff84a13c435d783fcca4088d81bfbab306836774d8822b6a9009be6e23a027"}]}