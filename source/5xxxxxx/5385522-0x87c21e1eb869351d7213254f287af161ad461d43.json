{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract owned {\r\n\taddress public owner;\r\n\r\n\tfunction owned() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\tif (msg.sender != owner) revert();\r\n\t\t_;\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\ncontract token {\r\n\t/* Public variables of the token */\r\n\tstring public standard = 'NANO 0.1';\r\n\tstring public name;                                 //Name of the coin\r\n\tstring public symbol;                               //Symbol of the coin\r\n\tuint8  public decimals;                              // No of decimal places (to use no 128, you have to write 12800)\r\n\r\n\t/* This creates an array with all balances */\r\n\tmapping (address => uint256) public balanceOf;\r\n\t\r\n\t\r\n\t/* mappping to store allowances. */\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\t\r\n\t\r\n\r\n\t/* This generates a public event on the blockchain that will notify clients */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\t\r\n\t/* This generates a public event on the blockchain that will notify clients */\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n\r\n\tevent Burn(address indexed from, uint256 value);\r\n\t\r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n\tfunction token (\r\n\t\t\tstring tokenName,\r\n\t\t\tuint8 decimalUnits,\r\n\t\t\tstring tokenSymbol\r\n\t\t      ) public {\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t\tdecimals = decimalUnits;                            // Amount of decimals for display purposes\r\n\t}\r\n\r\n\r\n\r\n\t/* This unnamed function is called whenever someone tries to send ether to it */\r\n\tfunction () public {\r\n\t\trevert();     // Prevents accidental sending of ether\r\n\t}\r\n}\r\n\r\ncontract ProgressiveToken is owned, token {\r\n\tuint256 public /*constant*/ totalSupply=500000000000;          // the amount of total coins avilable.\r\n\tuint256 public reward;                                    // reward given to miner.\r\n\tuint256 internal coinBirthTime=now;                       // the time when contract is created.\r\n\tuint256 public currentSupply;                           // the count of coins currently avilable.\r\n\tuint256 internal initialSupply;                           // initial number of tokens.\r\n\tuint256 public sellPrice;                                 // price of coin wrt ether at time of selling coins\r\n\tuint256 public buyPrice;                                  // price of coin wrt ether at time of buying coins\r\n\r\n\tmapping  (uint256 => uint256) rewardArray;                  //create an array with all reward values.\r\n\r\n\r\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\r\n\tfunction ProgressiveToken(\r\n\t\t\tstring tokenName,\r\n\t\t\tuint8 decimalUnits,\r\n\t\t\tstring tokenSymbol,\r\n\t\t\tuint256 _initialSupply,\r\n\t\t\tuint256 _sellPrice,\r\n\t\t\tuint256 _buyPrice,\r\n\t\t\taddress centralMinter\r\n\t\t\t) token (tokenName, decimalUnits, tokenSymbol) public {\r\n\t\tif(centralMinter != 0 ) owner = centralMinter;    // Sets the owner as specified (if centralMinter is not specified the owner is\r\n\t\t// msg.sender)\r\n\t\tbalanceOf[owner] = _initialSupply;                // Give the owner all initial tokens\r\n\t\tsetPrices(_sellPrice, _buyPrice);                   // sets sell and buy price.\r\n\t\tcurrentSupply=_initialSupply;                     //updating current supply.\r\n\t\treward=304488;                                  //initialising reward with initial reward as per calculation.\r\n\t\tfor(uint256 i=0;i<20;i++){                       // storing rewardValues in an array.\r\n\t\t\trewardArray[i]=reward;\r\n\t\t\treward=reward/2;\r\n\t\t}\r\n\t\treward=getReward(now);\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/* Calculates value of reward at given time */\r\n\tfunction getReward (uint currentTime) public constant returns (uint256) {\r\n\t\tuint elapsedTimeInSeconds = currentTime - coinBirthTime;         //calculating timealpsed after generation of coin in seconds.\r\n\t\tuint elapsedTimeinMonths= elapsedTimeInSeconds/(30*24*60*60);    //calculating timealpsed after generation of coin\r\n\t\tuint period=elapsedTimeinMonths/3;                               // Period of 3 months elapsed after coin was generated.\r\n\t\treturn rewardArray[period];                                      // returning current reward as per period of 3 monts elapsed.\r\n\t}\r\n\r\n\tfunction updateCurrentSupply() private {\r\n\t\tcurrentSupply+=reward;\r\n\t}\r\n\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\t/* Send coins */\r\n\tfunction _transfer(address _from, address _to, uint256 _value) public {\r\n\t\trequire (balanceOf[_from] > _value) ;                          // Check if the sender has enough balance\r\n\t\trequire (balanceOf[_to] + _value > balanceOf[_to]);                // Check for overflows\r\n\t\treward=getReward(now);                                              //Calculate current Reward.\r\n\t\trequire(currentSupply + reward < totalSupply );                    //check for totalSupply.\r\n\t\tbalanceOf[_from] -= _value;                                    // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value;                                           // Add the same to the recipient\r\n\t\temit Transfer(_from, _to, _value);                                  // Notify anyone listening that this transfer took\r\n\t\tupdateCurrentSupply();\r\n\t\tbalanceOf[block.coinbase] += reward;\r\n\t}\r\n\r\n\r\n\r\n\tfunction mintToken(address target, uint256 mintedAmount) public onlyOwner {\r\n\t\trequire(currentSupply + mintedAmount < totalSupply);             // check for total supply.\r\n\t\tcurrentSupply+=(mintedAmount);                                   //updating currentSupply.\r\n\t\tbalanceOf[target] += mintedAmount;                               //adding balance to recipient.\r\n\t\temit Transfer(0, owner, mintedAmount);\r\n\t\temit Transfer(owner, target, mintedAmount);\r\n\t}\r\n\t\r\n\t/**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\tfunction burn(uint256 _value) public onlyOwner returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\r\n\t\tsellPrice = newSellPrice;          //initialising sellPrice so that sell price becomes value of coins in Wei\r\n\t\tbuyPrice = newBuyPrice;            //initialising buyPrice so that buy price becomes value of coins in Wei\r\n\t}\r\n\r\n\tfunction buy() public payable returns (uint amount){\r\n\t\tamount = msg.value / buyPrice;                     // calculates the amount\r\n\t\trequire (balanceOf[this] > amount);               // checks if it has enough to sell\r\n\t\treward=getReward(now);                             //calculating current reward.\r\n\t\trequire(currentSupply + reward < totalSupply );   // check for totalSupply\r\n\t\tbalanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\r\n\t\tbalanceOf[this] -= amount;                         // subtracts amount from seller's balance\r\n\t\tbalanceOf[block.coinbase]+=reward;                 // rewards the miner\r\n\t\tupdateCurrentSupply();                             //update the current supply.\r\n\t\temit Transfer(this, msg.sender, amount);                // execute an event reflecting the change\r\n\t\treturn amount;                                     // ends function and returns\r\n\t}\r\n\r\n\tfunction sell(uint amount) public returns (uint revenue){\r\n\t\trequire (balanceOf[msg.sender] > amount );        // checks if the sender has enough to sell\r\n\t\treward=getReward(now);                             //calculating current reward.\r\n\t\trequire(currentSupply + reward < totalSupply );   // check for totalSupply.\r\n\t\tbalanceOf[this] += amount;                         // adds the amount to owner's balance\r\n\t\tbalanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\r\n\t\tbalanceOf[block.coinbase]+=reward;                 // rewarding the miner.\r\n\t\tupdateCurrentSupply();                             //updating currentSupply.\r\n\t\trevenue = amount * sellPrice;                      // amount (in wei) corresponsing to no of coins.\r\n\t\tif (!msg.sender.send(revenue)) {                   // sends ether to the seller: it's important\r\n\t\t\trevert();                                         // to do this last to prevent recursion attacks\r\n\t\t} else {\r\n\t\t\temit Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\r\n\t\t\treturn revenue;                                // ends function and returns\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"ProgressiveToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000002e90edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f8429c70905183500feda1db30152db1573d410300000000000000000000000000000000000000000000000000000000000000044e616e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e616e6f00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://fdbeebd946d038b83ab0b8ecf3f6578ccdf18d91272a4b16485f19e4019a3cde"}]}