{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n    contract owned {\r\n        address public owner;\r\n\r\n        function owned() public {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract MyTestToken is owned {\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    bool private b_enableTransfer = true;\r\n    uint256 public creationDate;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;    \r\n    uint256 public totalSupply;\r\n    uint8 public tipoCongelamento = 0;\r\n        // 0 = unfreeze; 1 = frozen by 10 minutes; 2 = frozen by 30 minutes; 3 = frozen by 1 hour\r\n        // 4 = frozen by 2 hours; 5 = frozen by 1 day; 6 = frozen by 2 days\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function MyTestToken (\r\n                           uint256 initialSupply,\r\n                           string tokenName,\r\n                           string tokenSymbol\r\n        ) owned() public \r\n    {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;              // Give the creator all initial tokens\r\n        creationDate = now;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer2(address _to, uint256 _value) public\r\n    {\r\n        require(b_enableTransfer); \r\n        \r\n        \r\n        _transfer(_to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n    {\r\n        // testa periodos de congelamento\r\n        // 0 = unfreeze; 1 = frozen by 10 minutes; 2 = frozen by 30 minutes; 3 = frozen by 1 hour\r\n        // 4 = frozen by 2 hours; 5 = frozen by 1 day; 6 = frozen by 2 days\r\n        if(tipoCongelamento == 0) // unfrozen\r\n        {\r\n            _transfer(_to, _value);\r\n        }\r\n        if(tipoCongelamento == 1) // 10 minutes\r\n        {\r\n            if(now >= creationDate + 10 * 1 minutes) _transfer(_to, _value);\r\n        }\r\n        if(tipoCongelamento == 2) // 30 minutes\r\n        {\r\n            if(now >= creationDate + 30 * 1 minutes) _transfer(_to, _value);\r\n        }        \r\n        if(tipoCongelamento == 3) // 1 hour\r\n        {\r\n            if(now >= creationDate + 1 * 1 hours) _transfer(_to, _value);\r\n        }        \r\n        if(tipoCongelamento == 4) // 2 hours\r\n        {\r\n            if(now >= creationDate + 2 * 1 hours) _transfer(_to, _value);\r\n        }        \r\n        if(tipoCongelamento == 5) // 1 day\r\n        {\r\n            if(now >= creationDate + 1 * 1 days) _transfer(_to, _value);\r\n        }        \r\n        if(tipoCongelamento == 6) // 2 days\r\n        {\r\n            if(now >= creationDate + 2 * 1 days) _transfer(_to, _value);\r\n        }        \r\n    }\r\n\r\n    function freezingStatus() view public returns (string)\r\n    {\r\n        // 0 = unfreeze; 1 = frozen by 10 minutes; 2 = frozen by 30 minutes; 3 = frozen by 1 hour\r\n        // 4 = frozen by 2 hours; 5 = frozen by 1 day; 6 = frozen by 2 days\r\n        \r\n        if(tipoCongelamento == 0) return ( \"Tokens free to transfer!\");\r\n        if(tipoCongelamento == 1) return ( \"Tokens frozen by 10 minutes.\");\r\n        if(tipoCongelamento == 2) return ( \"Tokens frozen by 30 minutes.\");\r\n        if(tipoCongelamento == 3) return ( \"Tokens frozen by 1 hour.\");\r\n        if(tipoCongelamento == 4) return ( \"Tokens frozen by 2 hours.\");        \r\n        if(tipoCongelamento == 5) return ( \"Tokens frozen by 1 day.\");        \r\n        if(tipoCongelamento == 6) return ( \"Tokens frozen by 2 days.\");                \r\n\r\n    }\r\n\r\n    function setFreezingStatus(uint8 _mode) onlyOwner public\r\n    {\r\n        require(_mode>=0 && _mode <=6);\r\n        tipoCongelamento = _mode;\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _value) private \r\n    {\r\n        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n        balanceOf[msg.sender] -= _value;                    // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n    }\r\n    \r\n    function enableTransfer(bool _enableTransfer) onlyOwner public\r\n    {\r\n        b_enableTransfer = _enableTransfer;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creationDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tipoCongelamento\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"setFreezingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enableTransfer\",\"type\":\"bool\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MyTestToken","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000954657374746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6819918e77fd6388d554534bd7543aee9a8ee1e8550bbe97e05eb1e80bae9532"}]}