{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/*\r\n@title Address Handle Service aka AHS\r\n@author Ghilia Weldesselasie, founder of D-OZ and genius extraordinaire\r\n@twitter: @ghiliweld, my DMs are open so slide through if you trynna chat ;)\r\n\r\nThis is a simple alternative to ENS I made cause ENS was too complicated\r\nfor me to understand which seemed odd since it should be simple in my opinion.\r\n\r\nPlease donate if you like it, all the proceeds go towards funding D-OZ, my project.\r\n*/\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract HandleLogic is Ownable {\r\n\r\n    uint256 public price; // price in Wei\r\n\r\n    mapping (bytes32 => mapping (bytes32 => address)) public handleIndex; // base => handle => address\r\n    mapping (bytes32 => bool) public baseRegistred; // tracks if a base is registered or not\r\n    mapping (address => mapping (bytes32 => bool)) public ownsBase; // tracks who owns a base and returns a bool\r\n\r\n    event NewBase(bytes32 _base, address indexed _address);\r\n    event NewHandle(bytes32 _base, bytes32 _handle, address indexed _address);\r\n    event BaseTransfered(bytes32 _base, address indexed _to);\r\n\r\n    function registerBase(bytes32 _base) public payable {\r\n        require(msg.value >= price); // you have to pay the price\r\n        require(!baseRegistred[_base]); // the base can't already be registered\r\n        baseRegistred[_base] = true; // registers base\r\n        ownsBase[msg.sender][_base] = true; // you now own the base\r\n        NewBase(_base, msg.sender);\r\n    }\r\n\r\n    function registerHandle(bytes32 _base, bytes32 _handle, address _addr) public {\r\n        require(baseRegistred[_base]); // the base must exist\r\n        require(_addr != address(0)); // no uninitialized addresses\r\n        require(ownsBase[msg.sender][_base]); // msg.sender must own the base\r\n        handleIndex[_base][_handle] = _addr; // an address gets tied to your AHS handle\r\n        NewHandle(_base, _handle, msg.sender);\r\n    }\r\n\r\n    function transferBase(bytes32 _base, address _newAddress) public {\r\n        require(baseRegistred[_base]); // the base must exist\r\n        require(_newAddress != address(0)); // no uninitialized addresses\r\n        require(ownsBase[msg.sender][_base]); // .sender must own the base\r\n        ownsBase[msg.sender][_base] = false; // relinquish your ownership of the base...\r\n        ownsBase[_newAddress][_base] = true; // ... and give it to someone else\r\n        BaseTransfered(_base, msg.sender);\r\n    }\r\n\r\n    //get price of a base\r\n    function getPrice() public view returns(uint256) {\r\n        return price;\r\n    }\r\n\r\n    // search for an address in the handleIndex mapping\r\n    function findAddress(bytes32 _base, bytes32 _handle) public view returns(address) {\r\n        return handleIndex[_base][_handle];\r\n    }\r\n\r\n    // check if a base is registered\r\n    function isRegistered(bytes32 _base) public view returns(bool) {\r\n        return baseRegistred[_base];\r\n    }\r\n\r\n    // check if an address owns a base\r\n    function doesOwnBase(bytes32 _base, address _addr) public view returns(bool) {\r\n        return ownsBase[_addr][_base];\r\n    }\r\n}\r\n\r\n\r\ncontract AHS is HandleLogic {\r\n\r\n    function AHS(uint256 _price, bytes32 _ethBase, bytes32 _weldBase) public {\r\n        price = _price;\r\n        getBaseQuick(_ethBase);\r\n        getBaseQuick(_weldBase);\r\n    }\r\n\r\n    function () public payable {} // donations are optional\r\n\r\n    function getBaseQuick(bytes32 _base) public {\r\n        require(msg.sender == owner); // Only I can call this function\r\n        require(!baseRegistred[_base]); // the base can't be registered yet, stops me from snatching someone else's base\r\n        baseRegistred[_base] = true; // I register the base\r\n        ownsBase[owner][_base] = true; // the ownership gets passed on to me\r\n        NewBase(_base, msg.sender);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == owner); // Only I can call this function\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function changePrice(uint256 _price) public {\r\n        require(msg.sender == owner); // Only I can call this function\r\n        price = _price;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"}],\"name\":\"registerBase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"},{\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"findAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"doesOwnBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"},{\"name\":\"_handle\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"registerHandle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"handleIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownsBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"}],\"name\":\"getBaseQuick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"baseRegistred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"transferBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_ethBase\",\"type\":\"bytes32\"},{\"name\":\"_weldBase\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_base\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_base\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_handle\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewHandle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_base\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"BaseTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AHS","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000056bc75e2d63100000657468000000000000000000000000000000000000000000000000000000000077656c6400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://fa2395b5c988e9839976ab31271a9f44e93210f46bd1a7fdb41fc8195719af8d"}]}