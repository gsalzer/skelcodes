{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner==msg.sender);\r\n    _;\r\n }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n}\r\n  \r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BetleyToken is Ownable, ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Token properties\r\n    string public name = \"BetleyToken\";               //Token name\r\n    string public symbol = \"BETS\";                     //Token symbol\r\n    uint256 public decimals = 18;\r\n\r\n    uint256 public _totalSupply = 1000000000e18;       //100% Total Supply\r\n\t\r\n    uint256 public _mainsaleSupply = 350000000e18;     //35% Main Sale\r\n    uint256 public _presaleSupply = 650000000e18;      //65% Pre Sale\r\n\t\r\n    uint256 public _saleSupply = 390000000e18;         //60% Sale\r\n    uint256 public _teamSupply = 65000000e18;          //10% Team\r\n    uint256 public _advisorsSupply = 55250000e18;      //8.5% Advisors\r\n    uint256 public _platformSupply = 130000000e18;     //20% Platform\r\n    uint256 public _bountySupply = 9750000e18;         //1.5% Bounty\r\n\r\n    // Address of owners who will get distribution tokens\r\n    address private _teamAddress = 0x5cFDe81cF1ACa91Ff8b7fEa63cFBF81B713BBf00;\r\n    address private _advisorsAddress = 0xC9F2DE0826235767c95254E1887e607d9Af7aA81;\r\n    address private _platformAddress = 0x572eE1910DD287FCbB109320098B7EcC33CB7e51;\r\n    address private _bountyAddress = 0xb496FB1F0660CccA92D1B4B199eDcC4Eb8992bfA;\r\n    uint256 public isDistributionTransferred = 0;\r\n\r\n    // Balances for each account\r\n    mapping (address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping (address => mapping(address => uint256)) allowed;\r\n    \r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public preSaleStartTime; \r\n    uint256 public mainSaleStartTime;\r\n\r\n    // Wallet Address of Token\r\n    address public multisig;\r\n\r\n    // Wallet Adddress of Secured User\r\n    address public sec_addr;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public price;\r\n\r\n    uint256 public minContribAmount = 0.1 ether;\r\n    uint256 public maxContribAmount = 100 ether;\r\n\r\n    uint256 public hardCap = 30000 ether;\r\n    uint256 public softCap = 1200 ether;\r\n    \r\n    //number of total tokens sold \r\n    uint256 public presaleTotalNumberTokenSold=0;\r\n    uint256 public mainsaleTotalNumberTokenSold=0;\r\n\r\n    bool public tradable = false;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    modifier canTradable() {\r\n        require(tradable || ((now < mainSaleStartTime + 30 days) && (now > preSaleStartTime)));\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    // @notice BetleyToken Contract\r\n    // @return the transaction address\r\n    function BetleyToken() public{\r\n        // Initial Owner Wallet Address\r\n        multisig = 0x7BAD2a7C2c2E83f0a6E9Afbd3cC0029391F3B013;\r\n\r\n        balances[multisig] = _totalSupply;\r\n\r\n        preSaleStartTime = 1527811200; // June 1st 10:00 AEST\r\n        mainSaleStartTime = 1533081600; // August 1st 10:00 AEST\r\n\r\n        owner = msg.sender;\r\n\r\n        sendTeamSupplyToken(_teamAddress);\r\n        sendAdvisorsSupplyToken(_advisorsAddress);\r\n        sendPlatformSupplyToken(_platformAddress);\r\n        sendBountySupplyToken(_bountyAddress);\r\n        isDistributionTransferred = 1;\r\n    }\r\n\r\n    // Payable method\r\n    // @notice Anyone can buy the tokens on tokensale by paying ether\r\n    function () external payable {\r\n        tokensale(msg.sender);\r\n    }\r\n\r\n    // @notice tokensale\r\n    // @param recipient The address of the recipient\r\n    // @return the transaction address and send the event as Transfer\r\n    function tokensale(address recipient) public payable {\r\n        require(recipient != 0x0);\r\n        require(msg.value >= minContribAmount && msg.value <= maxContribAmount);\r\n        price = getPrice();\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokenToSend = weiAmount.mul(price);\r\n        \r\n        require(tokenToSend > 0);\r\n        if ((now > preSaleStartTime) && (now < preSaleStartTime + 60 days)) {\r\n\t\t\r\n\t\t\trequire(_presaleSupply >= tokenToSend);\r\n\t\t\r\n        } else if ((now > mainSaleStartTime) && (now < mainSaleStartTime + 30 days)) {\r\n            \t\r\n            require(_mainsaleSupply >= tokenToSend);\r\n        \r\n\t\t}\r\n        \r\n        balances[multisig] = balances[multisig].sub(tokenToSend);\r\n        balances[recipient] = balances[recipient].add(tokenToSend);\r\n        \r\n        if ((now > preSaleStartTime) && (now < preSaleStartTime + 60 days)) {\r\n            \r\n\t\t\tpresaleTotalNumberTokenSold = presaleTotalNumberTokenSold.add(tokenToSend);\r\n            _presaleSupply = _presaleSupply.sub(tokenToSend);\r\n        \r\n\t\t} else if ((now > mainSaleStartTime) && (now < mainSaleStartTime + 30 days)) {\r\n            \r\n\t\t\tmainsaleTotalNumberTokenSold = mainsaleTotalNumberTokenSold.add(tokenToSend);\r\n            _mainsaleSupply = _mainsaleSupply.sub(tokenToSend);\r\n        \r\n\t\t}\r\n\r\n        address tar_addr = multisig;\r\n        if (presaleTotalNumberTokenSold + mainsaleTotalNumberTokenSold > 10000000) { // Transfers ETHER to wallet after softcap is hit\r\n            tar_addr = sec_addr;\r\n        }\r\n        tar_addr.transfer(msg.value);\r\n        TokenPurchase(msg.sender, recipient, weiAmount, tokenToSend);\r\n    }\r\n\r\n    // Security Wallet address setting\r\n    function setSecurityWalletAddr(address addr) public onlyOwner {\r\n        sec_addr = addr;\r\n    }\r\n\r\n    // Token distribution to Team\r\n    function sendTeamSupplyToken(address to) public onlyOwner {\r\n        require ((to != 0x0) && (isDistributionTransferred == 0));\r\n\r\n        balances[multisig] = balances[multisig].sub(_teamSupply);\r\n        balances[to] = balances[to].add(_teamSupply);\r\n        Transfer(multisig, to, _teamSupply);\r\n    }\r\n\r\n    // Token distribution to Advisors\r\n    function sendAdvisorsSupplyToken(address to) public onlyOwner {\r\n        require ((to != 0x0) && (isDistributionTransferred == 0));\r\n\r\n        balances[multisig] = balances[multisig].sub(_advisorsSupply);\r\n        balances[to] = balances[to].add(_advisorsSupply);\r\n        Transfer(multisig, to, _advisorsSupply);\r\n    }\r\n    \r\n    // Token distribution to Platform\r\n    function sendPlatformSupplyToken(address to) public onlyOwner {\r\n        require ((to != 0x0) && (isDistributionTransferred == 0));\r\n\r\n        balances[multisig] = balances[multisig].sub(_platformSupply);\r\n        balances[to] = balances[to].add(_platformSupply);\r\n        Transfer(multisig, to, _platformSupply);\r\n    }\r\n    \r\n    // Token distribution to Bounty\r\n    function sendBountySupplyToken(address to) public onlyOwner {\r\n        require ((to != 0x0) && (isDistributionTransferred == 0));\r\n\r\n        balances[multisig] = balances[multisig].sub(_bountySupply);\r\n        balances[to] = balances[to].add(_bountySupply);\r\n        Transfer(multisig, to, _bountySupply);\r\n    }\r\n    \r\n    // Start or pause tradable to Transfer token\r\n    function startTradable(bool _tradable) public onlyOwner {\r\n        tradable = _tradable;\r\n    }\r\n\r\n    // @return total tokens supplied\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    // @return total tokens supplied\r\n    function presaleTotalNumberTokenSold() public view returns (uint256) {\r\n        return presaleTotalNumberTokenSold;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    // @param who The address of the particular account\r\n    // @return the balanace the particular account\r\n    function balanceOf(address who) public constant returns (uint256) {\r\n        return balances[who];\r\n    }\r\n\r\n    // @notice send `value` token to `to` from `msg.sender`\r\n    // @param to The address of the recipient\r\n    // @param value The amount of token to be transferred\r\n    // @return the transaction address and send the event as Transfer\r\n    function transfer(address to, uint256 value) public canTradable returns (bool success)  {\r\n        require (\r\n            balances[msg.sender] >= value && value > 0\r\n        );\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    // @notice send `value` token to `to` from `from`\r\n    // @param from The address of the sender\r\n    // @param to The address of the recipient\r\n    // @param value The amount of token to be transferred\r\n    // @return the transaction address and send the event as Transfer\r\n    function transferFrom(address from, address to, uint256 value) public canTradable returns (bool success)  {\r\n        require (\r\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\r\n        );\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\r\n    // If this function is called again it overwrites the current allowance with value.\r\n    // @param spender The address of the sender\r\n    // @param value The amount to be approved\r\n    // @return the transaction address and send the event as Approval\r\n    function approve(address spender, uint256 value) public returns (bool success)  {\r\n        require (\r\n            balances[msg.sender] >= value && value > 0\r\n        );\r\n        allowed[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Check the allowed value for the spender to withdraw from owner\r\n    // @param owner The address of the owner\r\n    // @param spender The address of the spender\r\n    // @return the amount which spender is still allowed to withdraw from owner\r\n    function allowance(address _owner, address spender) public constant returns (uint256) {\r\n        return allowed[_owner][spender];\r\n    }\r\n    \r\n    // Get current price of a Token\r\n    // @return the price or token value for a ether\r\n    function getPrice() public view returns (uint256 result) {\r\n        if ((now > preSaleStartTime) && (now < preSaleStartTime + 60 days) && (presaleTotalNumberTokenSold < _saleSupply)) {\r\n            \r\n\t\t\tif ((now > preSaleStartTime) && (now < preSaleStartTime + 14 days)) {\r\n                return 15000;\r\n            } else if ((now >= preSaleStartTime + 14 days) && (now < preSaleStartTime + 28 days)) {\r\n                return 13000;\r\n            } else if ((now >= preSaleStartTime + 28 days) && (now < preSaleStartTime + 42 days)) {\r\n                return 11000;\r\n            } else if ((now >= preSaleStartTime + 42 days)) {\r\n                return 10500;\r\n            }\r\n\t\t\t\r\n        } else if ((now > mainSaleStartTime) && (now < mainSaleStartTime + 30 days) && (mainsaleTotalNumberTokenSold < _mainsaleSupply)) {\r\n            if ((now > mainSaleStartTime) && (now < mainSaleStartTime + 30 days)) {\r\n                return 10000;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendPlatformSupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_platformSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDistributionTransferred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_saleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mainsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendTeamSupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleTotalNumberTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradable\",\"type\":\"bool\"}],\"name\":\"startTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTotalNumberTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"tokensale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendAdvisorsSupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendBountySupplyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_advisorsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSecurityWalletAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sec_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BetleyToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c065f8e295d6f3de87e85d231d222ff63b0d1c11c384b53ad766e646f4737e14"}]}