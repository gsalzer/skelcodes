{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\ncontract SafeMath {\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\ncontract owned {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n}\r\ncontract HermesBlockTechToken is SafeMath,owned {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply; \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Freeze(address indexed from, bool frozen);\r\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n      require(_to != 0x0);\r\n      require(_value > 0);\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      require(!frozenAccount[_from]);\r\n      require(!frozenAccount[_to]);\r\n      uint previousBalances = SafeMath.safeAdd(balanceOf[_from] , balanceOf[_to]);\r\n      balanceOf[_from] = SafeMath.safeSub( balanceOf[_from] , _value);\r\n      balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to] , _value);\r\n      emit Transfer(_from, _to, _value);\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      require(_to != 0x0);\r\n      require(_value > 0);\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      require(!frozenAccount[_from]);\r\n      require(!frozenAccount[_to]);\r\n      require(_value <= allowance[_from][msg.sender]); \r\n      uint previousBalances = SafeMath.safeAdd(balanceOf[_from] , balanceOf[_to]);\r\n      allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender] , _value);\r\n      balanceOf[_from] = SafeMath.safeSub( balanceOf[_from] , _value);\r\n      balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to] , _value);\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != 0x0);\r\n        require(_value > 0);\r\n        require(balanceOf[_spender] >= _value);\r\n        require(!frozenAccount[msg.sender]);\r\n        require(!frozenAccount[_spender]);\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    function freezeMethod(address target, bool frozen) onlyOwner public returns (bool success){\r\n        require(target != 0x0);\r\n        frozenAccount[target] = frozen;\r\n        emit Freeze(target, frozen);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"freezeMethod\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Freeze\",\"type\":\"event\"}]","ContractName":"HermesBlockTechToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000114865726d657320426c6f636b205465636800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044842543600000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://98c1a8691091c6a11492d3478955b98e8d24828644da80029ac49923b710c078"}]}