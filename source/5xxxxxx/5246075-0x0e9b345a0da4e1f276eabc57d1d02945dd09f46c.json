{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Token is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Invox\";\r\n    string public symbol = \"INVOX\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n\r\n    address private owner;\r\n\r\n    address internal constant FOUNDERS = 0x16368c58BDb7444C8b97cC91172315D99fB8dc81;\r\n    address internal constant OPERATIONAL_FUND = 0xc97E0F6AcCB18e3B3703c85c205509d02700aCAa;\r\n\r\n    uint256 private constant MAY_15_2018 = 1526342400;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function Token () public {\r\n        balances[msg.sender] = 0;\r\n    }\r\n\r\n    function balanceOf(address who) public constant returns (uint256) {\r\n        return balances[who];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(to != address(0));\r\n        require(balances[msg.sender] >= value);\r\n\r\n        require(now >= MAY_15_2018 + 14 days);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(balances[from] >= value && allowed[from][msg.sender] >= value && balances[to] + value >= balances[to]);\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n\r\n        Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        require(spender != address(0));\r\n        require(allowed[msg.sender][spender] == 0 || amount == 0);\r\n\r\n        allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ICO is Token {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant MARCH_15_2018 = 1521072000;\r\n    uint256 private constant MARCH_25_2018 = 1521936000;\r\n    uint256 private constant APRIL_15_2018 = 1523750400;\r\n    uint256 private constant APRIL_17_2018 = 1523923200;\r\n    uint256 private constant APRIL_20_2018 = 1524182400;\r\n    uint256 private constant APRIL_30_2018 = 1525046400;\r\n    uint256 private constant MAY_15_2018 = 1526342400;\r\n\r\n    uint256 private constant PRE_SALE_MIN = 1 ether;\r\n    uint256 private constant MAIN_SALE_MIN = 10 ** 17 wei;\r\n\r\n    uint256 private constant PRE_SALE_HARD_CAP = 2491 ether;\r\n    uint256 private constant MAX_CAP = 20000 ether;\r\n    uint256 private constant TOKEN_PRICE = 10 ** 14 wei;\r\n\r\n    uint256 private constant TIER_1_MIN = 10 ether;\r\n    uint256 private constant TIER_2_MIN = 50 ether;\r\n\r\n    uint8 private constant FOUNDERS_ADVISORS_ALLOCATION = 20; //Percent\r\n    uint8 private constant OPERATIONAL_FUND_ALLOCATION = 20; //Percent\r\n    uint8 private constant AIR_DROP_ALLOCATION = 5; //Percent\r\n\r\n    address private constant FOUNDERS_LOCKUP = 0x0000000000000000000000000000000000009999;\r\n    address private constant OPERATIONAL_FUND_LOCKUP = 0x0000000000000000000000000000000000008888;\r\n\r\n    address private constant WITHDRAW_ADDRESS = 0x8B7aa4103Ae75A7dDcac9d2E90aEaAe915f2C75E;\r\n    address private constant AIR_DROP = 0x1100784Cb330ae0BcAFEd061fa95f8aE093d7769;\r\n\r\n    mapping (address => bool) public whitelistAdmins;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => address) public tier1;\r\n    mapping (address => address) public tier2;\r\n\r\n    uint32 public whitelistCount;\r\n    uint32 public tier1Count;\r\n    uint32 public tier2Count;\r\n\r\n    uint256 public preICOwei = 0;\r\n    uint256 public ICOwei = 0;\r\n\r\n    function getCurrentBonus(address participant) public constant returns (uint256) {\r\n\r\n        if (isInTier2(participant)) {\r\n            return 60;\r\n        }\r\n\r\n        if (isInTier1(participant)) {\r\n            return 40;\r\n        }\r\n\r\n        if (inPublicPreSalePeriod()) {\r\n            return 30;\r\n        }\r\n\r\n        if (inAngelPeriod()) {\r\n            return 20;\r\n        }\r\n\r\n        if (now >= APRIL_17_2018 && now < APRIL_20_2018) {\r\n            return 10;\r\n        }\r\n\r\n        if (now >= APRIL_20_2018 && now < APRIL_30_2018) {\r\n            return 5;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function inPrivatePreSalePeriod() public constant returns (bool) {\r\n        if (now >= MARCH_15_2018 && now < APRIL_15_2018) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function inPublicPreSalePeriod() public constant returns (bool) {\r\n        if (now >= MARCH_15_2018 && now < MARCH_25_2018) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function inAngelPeriod() public constant returns (bool) {\r\n        if (now >= APRIL_15_2018 && now < APRIL_17_2018) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function inMainSalePeriod() public constant returns (bool) {\r\n        if (now >= APRIL_17_2018 && now < MAY_15_2018) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function addWhitelistAdmin(address newAdmin) public onlyOwner {\r\n        whitelistAdmins[newAdmin] = true;\r\n    }\r\n\r\n    function isInWhitelist(address participant) public constant returns (bool) {\r\n        require(participant != address(0));\r\n        return whitelist[participant];\r\n    }\r\n\r\n    function addToWhitelist(address participant) public onlyWhiteLister {\r\n        require(participant != address(0));\r\n        require(!isInWhitelist(participant));\r\n        whitelist[participant] = true;\r\n        whitelistCount += 1;\r\n\r\n        NewWhitelistParticipant(participant);\r\n    }\r\n\r\n    function addMultipleToWhitelist(address[] participants) public onlyWhiteLister {\r\n        require(participants.length != 0);\r\n        for (uint16 i = 0; i < participants.length; i++) {\r\n            addToWhitelist(participants[i]);\r\n        }\r\n    }\r\n\r\n    function isInTier1(address participant) public constant returns (bool) {\r\n        require(participant != address(0));\r\n        return !(tier1[participant] == address(0));\r\n    }\r\n\r\n    function addTier1Member(address participant) public onlyWhiteLister {\r\n        require(participant != address(0));\r\n        require(!isInTier1(participant)); // unless we require this, the count variable could get out of sync\r\n        tier1[participant] = participant;\r\n        tier1Count += 1;\r\n\r\n        NewTier1Participant(participant);\r\n    }\r\n\r\n    function addMultipleTier1Members(address[] participants) public onlyWhiteLister {\r\n        require(participants.length != 0);\r\n        for (uint16 i = 0; i < participants.length; i++) {\r\n            addTier1Member(participants[i]);\r\n        }\r\n    }\r\n\r\n    function isInTier2(address participant) public constant returns (bool) {\r\n        require(participant != address(0));\r\n        return !(tier2[participant] == address(0));\r\n    }\r\n\r\n    function addTier2Member(address participant) public onlyWhiteLister {\r\n        require(participant != address(0));\r\n        require(!isInTier2(participant)); // unless we require this, the count variable could get out of sync\r\n        tier2[participant] = participant;\r\n        tier2Count += 1;\r\n\r\n        NewTier2Participant(participant);\r\n    }\r\n\r\n    function addMultipleTier2Members(address[] participants) public onlyWhiteLister {\r\n        require(participants.length != 0);\r\n        for (uint16 i = 0; i < participants.length; i++) {\r\n            addTier2Member(participants[i]);\r\n        }\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n\r\n        require(msg.sender != address(0));\r\n        require(isInTier1(msg.sender) || isInTier2(msg.sender) || isInWhitelist(msg.sender));\r\n        \r\n        require(inPrivatePreSalePeriod() || inPublicPreSalePeriod() || inAngelPeriod() || inMainSalePeriod());\r\n\r\n        if (isInTier1(msg.sender)) {\r\n            require(msg.value >= TIER_1_MIN);\r\n        }\r\n\r\n        if (isInTier2(msg.sender)) {\r\n            require(msg.value >= TIER_2_MIN);\r\n        }\r\n\r\n        if (inPrivatePreSalePeriod() == true) {\r\n            require(msg.value >= PRE_SALE_MIN);\r\n\r\n            require(PRE_SALE_HARD_CAP >= preICOwei.add(msg.value));\r\n            preICOwei = preICOwei.add(msg.value);\r\n        }\r\n\r\n        if (inMainSalePeriod() == true) {\r\n            require(msg.value >= MAIN_SALE_MIN);\r\n\r\n            require(MAX_CAP >= preICOwei + ICOwei.add(msg.value));\r\n            ICOwei = ICOwei.add(msg.value);\r\n        }\r\n\r\n        uint256 deltaTokens = 0;\r\n\r\n        uint256 tokens = msg.value.div(TOKEN_PRICE);\r\n        uint256 bonusTokens = getCurrentBonus(msg.sender).mul(tokens.div(100));\r\n\r\n        tokens = tokens.add(bonusTokens);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n        deltaTokens = deltaTokens.add(tokens);\r\n\r\n        balances[FOUNDERS] += tokens.mul(100).div(FOUNDERS_ADVISORS_ALLOCATION).div(2);\r\n        balances[FOUNDERS_LOCKUP] += tokens.mul(100).div(FOUNDERS_ADVISORS_ALLOCATION).div(2);\r\n        deltaTokens += tokens.mul(100).div(FOUNDERS_ADVISORS_ALLOCATION);\r\n\r\n        balances[OPERATIONAL_FUND] += tokens.mul(100).div(OPERATIONAL_FUND_ALLOCATION).div(2);\r\n        balances[OPERATIONAL_FUND_LOCKUP] += tokens.mul(100).div(OPERATIONAL_FUND_ALLOCATION).div(2);\r\n        deltaTokens += tokens.mul(100).div(OPERATIONAL_FUND_ALLOCATION);\r\n\r\n        balances[AIR_DROP] += tokens.mul(100).div(AIR_DROP_ALLOCATION);\r\n        deltaTokens += tokens.mul(100).div(AIR_DROP_ALLOCATION);\r\n\r\n        totalSupply = totalSupply.add(deltaTokens);\r\n\r\n        TokenPurchase(msg.sender, msg.value, tokens);\r\n    }\r\n\r\n    function() public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function withdrawPreICOEth() public {\r\n        require(now > MARCH_25_2018);\r\n        WITHDRAW_ADDRESS.transfer(preICOwei);\r\n    }\r\n\r\n    function withdrawICOEth() public {\r\n        require(now > MAY_15_2018);\r\n        WITHDRAW_ADDRESS.transfer(ICOwei);\r\n    }\r\n\r\n    function withdrawAll() public {\r\n        require(now > MAY_15_2018);\r\n        WITHDRAW_ADDRESS.transfer(this.balance);\r\n    }\r\n\r\n    function unlockTokens() public {\r\n        require(now > (MAY_15_2018 + 180 days));\r\n        balances[FOUNDERS] += balances[FOUNDERS_LOCKUP];\r\n        balances[FOUNDERS_LOCKUP] = 0;\r\n        balances[OPERATIONAL_FUND] += balances[OPERATIONAL_FUND_LOCKUP];\r\n        balances[OPERATIONAL_FUND_LOCKUP] = 0;\r\n    }\r\n\r\n    event TokenPurchase(address indexed _purchaser, uint256 _value, uint256 _amount);\r\n\r\n    event NewWhitelistParticipant(address indexed _participant);\r\n    event NewTier1Participant(address indexed _participant);\r\n    event NewTier2Participant(address indexed _participant);\r\n\r\n    //\r\n    modifier onlyWhiteLister() {\r\n        require(whitelistAdmins[msg.sender]);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"inPrivatePreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"addTier1Member\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isInTier2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isInTier1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participants\",\"type\":\"address[]\"}],\"name\":\"addMultipleToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier2Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inPublicPreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier1Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"addTier2Member\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inAngelPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participants\",\"type\":\"address[]\"}],\"name\":\"addMultipleTier1Members\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOwei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPreICOEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inMainSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participants\",\"type\":\"address[]\"}],\"name\":\"addMultipleTier2Members\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOwei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawICOEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"NewWhitelistParticipant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"NewTier1Participant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"NewTier2Participant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://336a91892e9e0c3d17a0dfc8ae9acca162de9136dfccf9542a868f3052b0ae40"}]}