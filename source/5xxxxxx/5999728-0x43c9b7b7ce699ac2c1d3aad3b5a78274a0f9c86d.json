{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n        assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/acl.sol\r\n\r\n/**\r\n* This is the first version of a simple ACL / Permission Management System\r\n* It might differentiate from other Permission Management Systems and therefore be more restrictive in the following points:\r\n* Every User can just have one Role\r\n* No new Roles \"Positions\" can be generated\r\n* Therefore all possible Roles must be defined at the beginning\r\n */\r\n\r\n\r\ncontract acl{\r\n\r\n    enum Role {\r\n        USER,\r\n        ORACLE,\r\n        ADMIN\r\n    }\r\n\r\n    mapping (address=> Role) permissions;\r\n\r\n    constructor() public {\r\n        permissions[msg.sender] = Role(2);\r\n    }\r\n\r\n    function setRole(uint8 rolevalue,address entity)external check(2){\r\n        permissions[entity] = Role(rolevalue);\r\n    }\r\n\r\n    function getRole(address entity)public view returns(Role){\r\n        return permissions[entity];\r\n    }\r\n\r\n    modifier check(uint8 role) {\r\n        require(uint8(getRole(msg.sender)) == role);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev edited verison of Open Zepplin implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n * @dev edited _mint & isApprovedOrOwner modifiers\r\n */\r\ncontract ERC721BasicToken is ERC721Basic, acl {\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    uint public numTokensTotal;\r\n\r\n  // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n     /* require(owner != address(0)); */\r\n        return owner;\r\n    }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        address owner = tokenOwner[_tokenId];\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n\r\n        require(_to != ownerOf(_tokenId));\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n        emit Approval(owner, _to, _tokenId);\r\n    }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        require(_to != msg.sender);\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) public view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n    }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   * @dev _check(2) checks msg.sender == ADMIN\r\n   */\r\n    function _mint(address _to, uint256 _tokenId) external check(2) {\r\n        require(_to != address(0));\r\n        addTokenTo(_to, _tokenId);\r\n        numTokensTotal = numTokensTotal.add(1);\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n    function _burn(address _owner, uint256 _tokenId) external check(2) {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n        numTokensTotal = numTokensTotal.sub(1);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * @dev Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n            emit Approval(_owner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n    }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/testreg.sol\r\n\r\ncontract testreg is ERC721BasicToken  {\r\n\r\n\t// @param\r\n\r\n    struct TokenStruct {\r\n        string token_uri;\r\n    }\r\n\r\n    mapping (uint256 => TokenStruct) TokenId;\r\n\r\n}\r\n\r\n// File: contracts/update.sol\r\n\r\ncontract update is testreg {\r\n\r\n    event UpdateToken(uint256 _tokenId, string new_uri);\r\n\r\n    function updatetoken(uint256 _tokenId, string new_uri) external check(1){\r\n        TokenId[_tokenId].token_uri = new_uri;\r\n\r\n        emit UpdateToken(_tokenId, new_uri);\r\n    }\r\n\r\n    function _mint_with_uri(address _to, uint256 _tokenId, string new_uri) external check(2) {\r\n        require(_to != address(0));\r\n        addTokenTo(_to, _tokenId);\r\n        numTokensTotal = numTokensTotal.add(1);\r\n        TokenId[_tokenId].token_uri = new_uri;\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n}\r\n\r\n// File: contracts/bloomingPool.sol\r\n\r\n/// @dev altered version of Open Zepplin's 'SplitPayment' contract\r\n\r\ncontract bloomingPool is update {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalShares = 0;\r\n    uint256 public totalReleased = 0;\r\n    bool public freeze;\r\n\r\n    mapping(address => uint256) public shares;\r\n\r\n    constructor() public {\r\n        freeze = false;\r\n    }\r\n\r\n    function() public payable { }\r\n\r\n\r\n    function calculate_total_shares(uint256 _shares,uint256 unique_id )internal{\r\n        shares[tokenOwner[unique_id]] = shares[tokenOwner[unique_id]].add(_shares);\r\n        totalShares = totalShares.add(_shares);\r\n    }\r\n\r\n    function oracle_call(uint256 unique_id) external check(1){\r\n        calculate_total_shares(1,unique_id);\r\n    }\r\n\r\n    function get_shares() external view returns(uint256 individual_shares){\r\n        return shares[msg.sender];\r\n    }\r\n\r\n    function freeze_pool(bool _freeze) external check(2){\r\n        freeze = _freeze;\r\n    }\r\n\r\n    function reset_individual_shares(address payee)internal {\r\n        shares[payee] = 0;\r\n    }\r\n\r\n    function substract_individual_shares(uint256 _shares)internal {\r\n        totalShares = totalShares - _shares;\r\n    }\r\n\r\n    function claim()public{\r\n        payout(msg.sender);\r\n    }\r\n\r\n    function payout(address to) internal returns(bool){\r\n        require(freeze == false);\r\n        address payee = to;\r\n        require(shares[payee] > 0);\r\n\r\n        uint256 volume = address(this).balance;\r\n        uint256 payment = volume.mul(shares[payee]).div(totalShares);\r\n\r\n        require(payment != 0);\r\n        require(address(this).balance >= payment);\r\n\r\n        totalReleased = totalReleased.add(payment);\r\n        payee.transfer(payment);\r\n        substract_individual_shares(shares[payee]);\r\n        reset_individual_shares(payee);\r\n    }\r\n\r\n    function emergency_withdraw(uint amount) external check(2) {\r\n        require(amount <= this.balance);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/buyable.sol\r\n\r\ncontract buyable is bloomingPool {\r\n\r\n    address INFRASTRUCTURE_POOL_ADDRESS;\r\n    mapping (uint256 => uint256) TokenIdtosetprice;\r\n    mapping (uint256 => uint256) TokenIdtoprice;\r\n\r\n    event Set_price_and_sell(uint256 tokenId, uint256 Price);\r\n    event Stop_sell(uint256 tokenId);\r\n\r\n    constructor() public {}\r\n\r\n    function initialisation(address _infrastructure_address) public check(2){\r\n        INFRASTRUCTURE_POOL_ADDRESS = _infrastructure_address;\r\n    }\r\n\r\n    function set_price_and_sell(uint256 UniqueID,uint256 Price) external {\r\n        approve(address(this), UniqueID);\r\n        TokenIdtosetprice[UniqueID] = Price;\r\n        emit Set_price_and_sell(UniqueID, Price);\r\n    }\r\n\r\n    function stop_sell(uint256 UniqueID) external payable{\r\n        require(tokenOwner[UniqueID] == msg.sender);\r\n        clearApproval(tokenOwner[UniqueID],UniqueID);\r\n        emit Stop_sell(UniqueID);\r\n    }\r\n\r\n    function buy(uint256 UniqueID) external payable {\r\n        address _to = msg.sender;\r\n        require(TokenIdtosetprice[UniqueID] == msg.value);\r\n        TokenIdtoprice[UniqueID] = msg.value;\r\n        uint _blooming = msg.value.div(20);\r\n        uint _infrastructure = msg.value.div(20);\r\n        uint _combined = _blooming.add(_infrastructure);\r\n        uint _amount_for_seller = msg.value.sub(_combined);\r\n        require(tokenOwner[UniqueID].call.gas(99999).value(_amount_for_seller)());\r\n        this.transferFrom(tokenOwner[UniqueID], _to, UniqueID);\r\n        if(!INFRASTRUCTURE_POOL_ADDRESS.call.gas(99999).value(_infrastructure)()){\r\n            revert(\"transfer to infrastructurePool failed\");\r\n\t\t}\r\n    }\r\n\r\n    function get_token_data(uint256 _tokenId) external view returns(uint256 _price, uint256 _setprice, bool _buyable){\r\n        _price = TokenIdtoprice[_tokenId];\r\n        _setprice = TokenIdtosetprice[_tokenId];\r\n        if (tokenApprovals[_tokenId] != address(0)){\r\n            _buyable = true;\r\n        }\r\n    }\r\n\r\n    function get_token_data_buyable(uint256 _tokenId) external view returns(bool _buyable) {\r\n        if (tokenApprovals[_tokenId] != address(0)){\r\n            _buyable = true;\r\n        }\r\n    }\r\n\r\n    function get_all_sellable_token()external view returns(bool[101] list_of_available){\r\n        uint i;\r\n        for(i = 0;i<101;i++) {\r\n            if (tokenApprovals[i] != address(0)){\r\n                list_of_available[i] = true;\r\n          }else{\r\n                list_of_available[i] = false;\r\n          }\r\n        }\r\n    }\r\n    function get_my_tokens()external view returns(bool[101] list_of_my_tokens){\r\n        uint i;\r\n        address _owner = msg.sender;\r\n        for(i = 0;i<101;i++) {\r\n            if (tokenOwner[i] == _owner){\r\n                list_of_my_tokens[i] = true;\r\n          }else{\r\n                list_of_my_tokens[i] = false;\r\n          }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"new_uri\",\"type\":\"string\"}],\"name\":\"updatetoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_my_tokens\",\"outputs\":[{\"name\":\"list_of_my_tokens\",\"type\":\"bool[101]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_all_sellable_token\",\"outputs\":[{\"name\":\"list_of_available\",\"type\":\"bool[101]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"UniqueID\",\"type\":\"uint256\"}],\"name\":\"stop_sell\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get_token_data_buyable\",\"outputs\":[{\"name\":\"_buyable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get_token_data\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_setprice\",\"type\":\"uint256\"},{\"name\":\"_buyable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"UniqueID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_infrastructure_address\",\"type\":\"address\"}],\"name\":\"initialisation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergency_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rolevalue\",\"type\":\"uint8\"},{\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unique_id\",\"type\":\"uint256\"}],\"name\":\"oracle_call\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"new_uri\",\"type\":\"string\"}],\"name\":\"_mint_with_uri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"UniqueID\",\"type\":\"uint256\"},{\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"set_price_and_sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_shares\",\"outputs\":[{\"name\":\"individual_shares\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"Set_price_and_sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Stop_sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_uri\",\"type\":\"string\"}],\"name\":\"UpdateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"buyable","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35828a0ea1e3011c8ebecc873f50c4a1f57ab23a7e94fdefa5d1c08eb3d23280"}]}