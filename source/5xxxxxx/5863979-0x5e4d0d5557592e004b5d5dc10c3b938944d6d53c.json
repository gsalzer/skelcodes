{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {  owner = msg.sender;  }\r\n    modifier onlyOwner {  require (msg.sender == owner);    _;   }\r\n    function transferOwnership(address newOwner) onlyOwner public{  owner = newOwner;  }\r\n}\r\n\r\ncontract token is owned{\r\n    string public name; \r\n    string public symbol; \r\n    uint8 public decimals = 10;  \r\n    uint256 public totalSupply; \r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  \r\n    event Burn(address indexed from, uint256 value);  \r\n    \r\n    function token(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \r\n        \r\n        balanceOf[msg.sender] = totalSupply; \r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n      require(_to != 0x0); \r\n      require(balanceOf[_from] >= _value); \r\n      require(balanceOf[_to] + _value > balanceOf[_to]); \r\n      \r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to]; \r\n      balanceOf[_from] -= _value; \r\n      balanceOf[_to] += _value; \r\n      emit Transfer(_from, _to, _value); \r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances); \r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {   _transfer(msg.sender, _to, _value);   }\r\n\r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        \r\n        require(balanceOf[msg.sender] >= _value);   \r\n\r\n\t\tbalanceOf[msg.sender] -= _value; \r\n        totalSupply -= _value; \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MyAdvancedToken is token {\r\n\r\n    uint256 public buyPrice; \r\n    uint public amountTotal =0; \r\n\tuint public amountRaised=0;\r\n\tbool public crowdFunding = false;  \r\n    uint public deadline = 0; \r\n    uint public fundingGoal = 0;  \r\n\r\n\tmapping (address => bool) public frozenAccount; \r\n    \r\n    event FrozenFunds(address target, bool frozen); \r\n\tevent FundTransfer(address _backer, uint _amount, bool _isContribution); \r\n\r\n    function MyAdvancedToken(uint256 initialSupply, string tokenName, string tokenSymbol) public token (initialSupply, tokenName, tokenSymbol) {\r\n        buyPrice  = 10000; \r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0); \r\n        require (balanceOf[_from] > _value); \r\n        require (balanceOf[_to] + _value > balanceOf[_to]); \r\n        require(!frozenAccount[_from]); \r\n        require(!frozenAccount[_to]);\r\n        \r\n        balanceOf[_from] -= _value; \r\n        balanceOf[_to] += _value; \r\n        emit Transfer(_from, _to, _value); \r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newBuyPrice) public onlyOwner {\r\n        buyPrice = newBuyPrice;\r\n    }\r\n   function () payable public {\r\n\t  require (crowdFunding == true);\r\n\t  check_status();\r\n\t  require (crowdFunding == true);\r\n\t  uint amount = msg.value* buyPrice;\r\n\t  _transfer(owner, msg.sender, amount);\r\n\t  amountTotal += msg.value;\r\n\t  amountRaised += msg.value;\r\n      //emit FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n\tfunction check_status() internal {\r\n\t  if (deadline >0 && now >= deadline)\r\n\t\t  crowdFunding = false;\r\n\t  if( fundingGoal >0 && amountRaised > fundingGoal )\r\n\t\t  crowdFunding = false;\r\n\r\n\t  if( crowdFunding == false ){\r\n\t      deadline = 0;\r\n\t\t  fundingGoal = 0;\r\n\t\t  amountRaised = 0;\r\n\t  }\r\n\t}\r\n\r\n\tfunction openCrowdFunding(bool bOpen,uint totalEth, uint durationInMinutes) public  onlyOwner {\r\n\t    deadline = 0;\r\n\t    fundingGoal = 0;\r\n\t    amountRaised = 0;\r\n\t\t\r\n\t\tcrowdFunding = bOpen;\r\n\r\n\t\tif(totalEth >0){\r\n\t\t\tfundingGoal = totalEth;\r\n\t\t}\r\n\t\tif(durationInMinutes >0)\r\n\t\t\tdeadline = now + durationInMinutes * 1 minutes;\r\n\t}\r\n\t\r\n    function getEth() public  onlyOwner { //ok\r\n\t\trequire( amountTotal >= 100 );\r\n        uint256 amt = amountTotal-100;\r\n        owner.transfer(amt);\r\n        emit FundTransfer(owner, amt, false);\r\n\t\tamountTotal = 100;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bOpen\",\"type\":\"bool\"},{\"name\":\"totalEth\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"}],\"name\":\"openCrowdFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000090f560000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001342616e6b206f66204261726f646120436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424f430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://35742aca3d06714a7e9786723941b9c5d8227dbd404624e44a2b53bb6279d4bc"}]}