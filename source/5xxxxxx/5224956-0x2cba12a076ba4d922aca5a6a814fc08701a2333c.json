{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity\t^0.4.18;\r\n//\r\n// FogLink OS Token\r\n// Author: FNK\r\n// Contact: support@foglink.io\r\n// Telegram\tcommunity: https://t.me/fnkofficial\r\n//\r\ncontract FNKOSToken {\t\r\n\tstring public constant name\t\t\t= \"FNKOSToken\";\r\n\tstring public constant symbol\t\t= \"FNKOS\";\r\n\tuint public\tconstant decimals\t\t= 18;\r\n\t\r\n\tuint256 fnkEthRate\t\t\t\t\t= 10 ** decimals;\r\n\tuint256\tfnkSupply\t\t\t\t\t= 500000000;\r\n\tuint256\tpublic totalSupply\t\t\t= fnkSupply * fnkEthRate;\r\n    uint256 public minInvEth\t\t\t= 0.1 ether;\r\n\tuint256\tpublic maxInvEth\t\t\t= 5.0 ether;\r\n    uint256 public sellStartTime\t\t= 1521129600;\t\t\t// 2018/3/16\r\n    uint256 public sellDeadline1\t\t= sellStartTime + 5 days;\r\n    uint256 public sellDeadline2\t\t= sellDeadline1 + 5 days;\r\n\tuint256 public freezeDuration \t\t= 30 days;\r\n\tuint256\tpublic ethFnkRate1\t\t\t= 6000;\r\n\tuint256\tpublic ethFnkRate2\t\t\t= 6000;\r\n\r\n\tbool public\trunning\t\t\t\t\t= true;\r\n\tbool public\tbuyable\t\t\t\t\t= true;\r\n\t\r\n\taddress\towner;\r\n\tmapping\t(address =>\tmapping\t(address =>\tuint256)) allowed;\r\n\tmapping\t(address =>\tbool) public whitelist;\r\n\tmapping\t(address =>\t uint256) whitelistLimit;\r\n\r\n    struct BalanceInfo {\r\n        uint256 balance;\r\n        uint256[] freezeAmount;\r\n        uint256[] releaseTime;\r\n    }\r\n\tmapping\t(address =>\tBalanceInfo) balances;\r\n\t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent BeginRunning();\r\n\tevent PauseRunning();\r\n\tevent BeginSell();\r\n\tevent PauseSell();\r\n\tevent Burn(address indexed burner, uint256 val);\r\n    event Freeze(address indexed from, uint256 value);\r\n \t\r\n\tfunction FNKOSToken () public{\r\n\t\towner =\tmsg.sender;\r\n        balances[owner].balance = totalSupply;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier onlyWhitelist() {\r\n\t\trequire(whitelist[msg.sender] == true);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier isRunning(){\r\n\t\trequire(running);\r\n\t\t_;\r\n\t}\r\n\tmodifier isNotRunning(){\r\n\t\trequire(!running);\r\n\t\t_;\r\n\t}\r\n\tmodifier isBuyable(){\r\n\t\trequire(buyable && now >= sellStartTime && now <= sellDeadline2);\r\n\t\t_;\r\n\t}\r\n\tmodifier isNotBuyable(){\r\n\t\trequire(!buyable || now < sellStartTime || now > sellDeadline2);\r\n\t\t_;\r\n\t}\r\n\t// mitigates the ERC20 short address attack\r\n\tmodifier onlyPayloadSize(uint size)\t{\r\n\t\tassert(msg.data.length >= size + 4);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256\tc =\ta *\tb;\r\n\t\tassert(a ==\t0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <=\ta);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256\tc =\ta +\tb;\r\n\t\tassert(c >=\ta);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t// 1eth = newRate tokens\r\n\tfunction setPbulicOfferingPrice(uint256 _rate1, uint256 _rate2) onlyOwner public {\r\n\t\tethFnkRate1 = _rate1;\r\n\t\tethFnkRate2 = _rate2;\t\t\r\n\t}\r\n\r\n\t//\r\n\tfunction setPublicOfferingLimit(uint256 _minVal, uint256 _maxVal) onlyOwner public {\r\n\t\tminInvEth\t= _minVal;\r\n\t\tmaxInvEth\t= _maxVal;\r\n\t}\r\n\t\r\n\tfunction setPublicOfferingDate(uint256 _startTime, uint256 _deadLine1, uint256 _deadLine2) onlyOwner public {\r\n\t\tsellStartTime = _startTime;\r\n\t\tsellDeadline1\t= _deadLine1;\r\n\t\tsellDeadline2\t= _deadLine2;\r\n\t}\r\n\t\t\r\n\tfunction transferOwnership(address _newOwner) onlyOwner public {\r\n\t\tif (_newOwner !=\taddress(0))\t{\r\n\t\t\towner =\t_newOwner;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction pause() onlyOwner isRunning\tpublic\t {\r\n\t\trunning = false;\r\n\t\tPauseRunning();\r\n\t}\r\n\t\r\n\tfunction start() onlyOwner isNotRunning\tpublic\t {\r\n\t\trunning = true;\r\n\t\tBeginRunning();\r\n\t}\r\n\r\n\tfunction pauseSell() onlyOwner\tisBuyable isRunning public{\r\n\t\tbuyable = false;\r\n\t\tPauseSell();\r\n\t}\r\n\t\r\n\tfunction beginSell() onlyOwner\tisNotBuyable isRunning  public{\r\n\t\tbuyable = true;\r\n\t\tBeginSell();\r\n\t}\r\n\r\n\t//\r\n\t// _amount in FNK, \r\n\t//\r\n\tfunction airDeliver(address _to,\tuint256\t_amount)  onlyOwner public {\r\n\t\trequire(owner != _to);\r\n\t\trequire(_amount > 0);\r\n\t\trequire(balances[owner].balance >= _amount);\r\n\t\t\r\n\t\t// take big number as wei\r\n\t\tif(_amount < fnkSupply){\r\n\t\t\t_amount = _amount * fnkEthRate;\r\n\t\t}\r\n\t\tbalances[owner].balance = safeSub(balances[owner].balance, _amount);\r\n\t\tbalances[_to].balance =\tsafeAdd(balances[_to].balance, _amount);\r\n\t\tTransfer(owner, _to, _amount);\r\n\t}\r\n\t\r\n\t\r\n\tfunction airDeliverMulti(address[]\t_addrs, uint256 _amount) onlyOwner public {\r\n\t\trequire(_addrs.length <=  255);\r\n\t\t\r\n\t\tfor\t(uint8 i = 0; i < _addrs.length; i++)\t{\r\n\t\t\tairDeliver(_addrs[i],\t_amount);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction airDeliverStandalone(address[] _addrs,\tuint256[] _amounts) onlyOwner public {\r\n\t\trequire(_addrs.length <=  255);\r\n\t\trequire(_addrs.length ==\t _amounts.length);\r\n\t\t\r\n\t\tfor\t(uint8 i = 0; i\t< _addrs.length;\ti++) {\r\n\t\t\tairDeliver(_addrs[i],\t_amounts[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t//\r\n\t// _amount, _freezeAmount in FNK\r\n\t//\r\n\tfunction  freezeDeliver(address _to, uint _amount, uint _freezeAmount, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n\t\trequire(owner != _to);\r\n\t\trequire(_freezeMonth > 0);\r\n\t\t\r\n\t\tuint average = _freezeAmount / _freezeMonth;\r\n\t\tBalanceInfo storage bi = balances[_to];\r\n\t\tuint[] memory fa = new uint[](_freezeMonth);\r\n\t\tuint[] memory rt = new uint[](_freezeMonth);\r\n\r\n\t\tif(_amount < fnkSupply){\r\n\t\t\t_amount = _amount * fnkEthRate;\r\n\t\t\taverage = average * fnkEthRate;\r\n\t\t\t_freezeAmount = _freezeAmount * fnkEthRate;\r\n\t\t}\r\n\t\trequire(balances[owner].balance > _amount);\r\n\t\tuint remainAmount = _freezeAmount;\r\n\t\t\r\n\t\tif(_unfreezeBeginTime == 0)\r\n\t\t\t_unfreezeBeginTime = now + freezeDuration;\r\n\t\tfor(uint i=0;i<_freezeMonth-1;i++){\r\n\t\t\tfa[i] = average;\r\n\t\t\trt[i] = _unfreezeBeginTime;\r\n\t\t\t_unfreezeBeginTime += freezeDuration;\r\n\t\t\tremainAmount = safeSub(remainAmount, average);\r\n\t\t}\r\n\t\tfa[i] = remainAmount;\r\n\t\trt[i] = _unfreezeBeginTime;\r\n\t\t\r\n\t\tbi.balance = safeAdd(bi.balance, _amount);\r\n\t\tbi.freezeAmount = fa;\r\n\t\tbi.releaseTime = rt;\r\n\t\tbalances[owner].balance = safeSub(balances[owner].balance, _amount);\r\n\t\tTransfer(owner, _to, _amount);\r\n\t\tFreeze(_to, _freezeAmount);\r\n\t}\r\n\t\r\n\tfunction  freezeDeliverMuti(address[] _addrs, uint _deliverAmount, uint _freezeAmount, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n\t\trequire(_addrs.length <=  255);\r\n\t\t\r\n\t\tfor(uint i=0;i< _addrs.length;i++){\r\n\t\t\tfreezeDeliver(_addrs[i], _deliverAmount, _freezeAmount, _freezeMonth, _unfreezeBeginTime);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction  freezeDeliverMultiStandalone(address[] _addrs, uint[] _deliverAmounts, uint[] _freezeAmounts, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n\t\trequire(_addrs.length <=  255);\r\n\t\trequire(_addrs.length == _deliverAmounts.length);\r\n\t\trequire(_addrs.length == _freezeAmounts.length);\r\n\t\t\r\n\t\tfor(uint i=0;i< _addrs.length;i++){\r\n\t\t\tfreezeDeliver(_addrs[i], _deliverAmounts[i], _freezeAmounts[i], _freezeMonth, _unfreezeBeginTime);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// buy tokens directly\r\n\tfunction ()\texternal payable {\r\n\t\tbuyTokens();\r\n\t}\r\n\r\n\t//\r\n\tfunction buyTokens() payable isRunning isBuyable onlyWhitelist\tpublic {\r\n        uint256 weiVal = msg.value;\r\n\t\taddress\tinvestor\t= msg.sender;\r\n        require(investor != address(0) && weiVal >= minInvEth && weiVal <= maxInvEth);\r\n\t\trequire(safeAdd(weiVal,whitelistLimit[investor]) <= maxInvEth);\r\n\t\t\r\n\t\tuint256\tamount = 0;\r\n\t\tif(now > sellDeadline1)\r\n\t\t\tamount = safeMul(msg.value, ethFnkRate2);\r\n\t\telse\r\n\t\t\tamount = safeMul(msg.value, ethFnkRate1);\t\r\n\r\n\t\twhitelistLimit[investor] = safeAdd(weiVal, whitelistLimit[investor]);\r\n\t\tairDeliver(investor, amount);\t\t\r\n\t}\r\n\r\n\tfunction addWhitelist(address[] _addrs) public onlyOwner {\r\n\t\trequire(_addrs.length <=  255);\r\n\r\n\t\tfor (uint8 i = 0; i < _addrs.length; i++) {\r\n\t\t\tif (!whitelist[_addrs[i]]){\r\n\t\t\t\twhitelist[_addrs[i]] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) constant\tpublic returns (uint256) {\r\n\t\treturn balances[_owner].balance;\r\n\t}\r\n\t\r\n\tfunction freezeOf(address _owner) constant\tpublic returns (uint256) {\r\n        BalanceInfo storage bi = balances[_owner];\r\n\t    uint freezeAmount = 0;\r\n\t\tuint t = now;\r\n\t\t\r\n        for(uint i=0;i< bi.freezeAmount.length;i++){\r\n\t\t\tif(t < bi.releaseTime[i])\r\n            \tfreezeAmount += bi.freezeAmount[i];\r\n        }\r\n        return freezeAmount;\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _amount)\t isRunning onlyPayloadSize(2 *\t32)\tpublic returns (bool success) {\r\n\t\trequire(_to\t!= address(0));\r\n\t\tuint freezeAmount = freezeOf(msg.sender);\r\n\t\tuint256 _balance = safeSub(balances[msg.sender].balance, freezeAmount);\r\n\t\trequire(_amount\t<= _balance);\r\n\t\t\r\n\t\tbalances[msg.sender].balance = safeSub(balances[msg.sender].balance,_amount);\r\n\t\tbalances[_to].balance =\tsafeAdd(balances[_to].balance,_amount);\r\n\t\tTransfer(msg.sender, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _amount) isRunning onlyPayloadSize(3 * 32) public returns (bool\tsuccess) {\r\n\t\trequire(_to\t!= address(0));\r\n\t\trequire(_amount\t<= balances[_from].balance);\r\n\t\trequire(_amount\t<= allowed[_from][msg.sender]);\r\n\t\t\r\n\t\tbalances[_from].balance\t= safeSub(balances[_from].balance,_amount);\r\n\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\r\n\t\tbalances[_to].balance =\tsafeAdd(balances[_to].balance,_amount);\r\n\t\tTransfer(_from,\t_to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction approve(address _spender, uint256 _value) isRunning public returns (bool\tsuccess) {\r\n\t\tif (_value != 0\t&& allowed[msg.sender][_spender] !=\t0) { \r\n\t\t\treturn\tfalse; \r\n\t\t}\r\n\t\tallowed[msg.sender][_spender] =\t_value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction allowance(address _owner, address _spender) constant public returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\tfunction withdraw()\tonlyOwner public {\r\n        require(this.balance > 0);\r\n        owner.transfer(this.balance);\r\n\t\tTransfer(this, owner, this.balance);\t\r\n\t}\r\n\t\r\n\tfunction burn(uint256 _value) onlyOwner\tpublic {\r\n\t\trequire(_value <= balances[msg.sender].balance);\r\n\r\n\t\taddress\tburner = msg.sender;\r\n\t\tbalances[burner].balance = safeSub(balances[burner].balance, _value);\r\n\t\ttotalSupply\t= safeSub(totalSupply, _value);\r\n\t\tfnkSupply = totalSupply / fnkEthRate;\r\n\t\tBurn(burner, _value);\r\n\t}\r\n\t\r\n\tfunction mint(address _target, uint256 _amount) onlyOwner public {\r\n\t\tif(_target\t== address(0))\r\n\t\t\t_target = owner;\r\n\t\t\r\n\t\tbalances[_target].balance = safeAdd(balances[_target].balance, _amount);\r\n\t\ttotalSupply = safeAdd(totalSupply,_amount);\r\n\t\tTransfer(0, this, _amount);\r\n\t\tTransfer(this, _target, _amount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDeliverMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_deliverAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliverMuti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_freezeAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate1\",\"type\":\"uint256\"},{\"name\":\"_rate2\",\"type\":\"uint256\"}],\"name\":\"setPbulicOfferingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_deliverAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_freezeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliverMultiStandalone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFnkRate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minVal\",\"type\":\"uint256\"},{\"name\":\"_maxVal\",\"type\":\"uint256\"}],\"name\":\"setPublicOfferingLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDeadline2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDeliverStandalone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDeadline1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_deadLine1\",\"type\":\"uint256\"},{\"name\":\"_deadLine2\",\"type\":\"uint256\"}],\"name\":\"setPublicOfferingDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFnkRate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeginRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeginSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"}]","ContractName":"FNKOSToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4872511f7f7c8a4c6b1a3ed6fe5bf58ed87a2eb28d4e29b1a79a3abd754c4862"}]}