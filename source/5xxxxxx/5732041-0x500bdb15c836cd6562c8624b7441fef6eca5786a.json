{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract UnicornManagementInterface {\r\n\r\n    function ownerAddress() external view returns (address);\r\n    function managerAddress() external view returns (address);\r\n    function communityAddress() external view returns (address);\r\n    function dividendManagerAddress() external view returns (address);\r\n    function walletAddress() external view returns (address);\r\n    function blackBoxAddress() external view returns (address);\r\n    function unicornBreedingAddress() external view returns (address);\r\n    function geneLabAddress() external view returns (address);\r\n    function unicornTokenAddress() external view returns (address);\r\n    function candyToken() external view returns (address);\r\n    function candyPowerToken() external view returns (address);\r\n\r\n    function createDividendPercent() external view returns (uint);\r\n    function sellDividendPercent() external view returns (uint);\r\n    function subFreezingPrice() external view returns (uint);\r\n    function subFreezingTime() external view returns (uint64);\r\n    function subTourFreezingPrice() external view returns (uint);\r\n    function subTourFreezingTime() external view returns (uint64);\r\n    function createUnicornPrice() external view returns (uint);\r\n    function createUnicornPriceInCandy() external view returns (uint);\r\n    function oraclizeFee() external view returns (uint);\r\n\r\n    function paused() external view returns (bool);\r\n    function locked() external view returns (bool);\r\n\r\n    function isTournament(address _tournamentAddress) external view returns (bool);\r\n\r\n    function getCreateUnicornFullPrice() external view returns (uint);\r\n    function getHybridizationFullPrice(uint _price) external view returns (uint);\r\n    function getSellUnicornFullPrice(uint _price) external view returns (uint);\r\n    function getCreateUnicornFullPriceInCandy() external view returns (uint);\r\n\r\n\r\n    //service\r\n    function registerInit(address _contract) external;\r\n\r\n}\r\n\r\ncontract UnicornAccessControl {\r\n\r\n    UnicornManagementInterface public unicornManagement;\r\n\r\n\r\n    function UnicornAccessControl(address _unicornManagementAddress) public {\r\n        unicornManagement = UnicornManagementInterface(_unicornManagementAddress);\r\n        unicornManagement.registerInit(this);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == unicornManagement.ownerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == unicornManagement.managerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyCommunity() {\r\n        require(msg.sender == unicornManagement.communityAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyTournament() {\r\n        require(unicornManagement.isTournament(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!unicornManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(unicornManagement.paused());\r\n        _;\r\n    }\r\n\r\n//    modifier whenUnlocked() {\r\n//        require(!unicornManagement.locked());\r\n//        _;\r\n//    }\r\n\r\n    modifier onlyManagement() {\r\n        require(msg.sender == address(unicornManagement));\r\n        _;\r\n    }\r\n\r\n    modifier onlyBreeding() {\r\n        require(msg.sender == unicornManagement.unicornBreedingAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornContract() {\r\n        require(msg.sender == unicornManagement.unicornBreedingAddress() || unicornManagement.isTournament(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGeneLab() {\r\n        require(msg.sender == unicornManagement.geneLabAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyBlackBox() {\r\n        require(msg.sender == unicornManagement.blackBoxAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornToken() {\r\n        require(msg.sender == unicornManagement.unicornTokenAddress());\r\n        _;\r\n    }\r\n\r\n    function isGamePaused() external view returns (bool) {\r\n        return unicornManagement.paused();\r\n    }\r\n}\r\n\r\ncontract DividendManagerInterface {\r\n    function payDividend() external payable;\r\n}\r\n\r\ncontract UnicornTokenInterface {\r\n\r\n    //ERC721\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _unicornId) public view returns (address _owner);\r\n    function transfer(address _to, uint256 _unicornId) public;\r\n    function approve(address _to, uint256 _unicornId) public;\r\n    function takeOwnership(uint256 _unicornId) public;\r\n    function totalSupply() public constant returns (uint);\r\n    function owns(address _claimant, uint256 _unicornId) public view returns (bool);\r\n    function allowance(address _claimant, uint256 _unicornId) public view returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _unicornId) public;\r\n    function createUnicorn(address _owner) external returns (uint);\r\n    //    function burnUnicorn(uint256 _unicornId) external;\r\n    function getGen(uint _unicornId) external view returns (bytes);\r\n    function setGene(uint _unicornId, bytes _gene) external;\r\n    function updateGene(uint _unicornId, bytes _gene) external;\r\n    function getUnicornGenByte(uint _unicornId, uint _byteNo) external view returns (uint8);\r\n\r\n    function setName(uint256 _unicornId, string _name ) external returns (bool);\r\n    function plusFreezingTime(uint _unicornId) external;\r\n    function plusTourFreezingTime(uint _unicornId) external;\r\n    function minusFreezingTime(uint _unicornId, uint64 _time) external;\r\n    function minusTourFreezingTime(uint _unicornId, uint64 _time) external;\r\n    function isUnfreezed(uint _unicornId) external view returns (bool);\r\n    function isTourUnfreezed(uint _unicornId) external view returns (bool);\r\n\r\n    function marketTransfer(address _from, address _to, uint256 _unicornId) external;\r\n}\r\n\r\n\r\ninterface UnicornBalancesInterface {\r\n    //    function tokenPlus(address _token, address _user, uint _value) external returns (bool);\r\n    //    function tokenMinus(address _token, address _user, uint _value) external returns (bool);\r\n    function trustedTokens(address _token) external view returns (bool);\r\n    //    function balanceOf(address token, address user) external view returns (uint);\r\n    function transfer(address _token, address _from, address _to, uint _value) external returns (bool);\r\n    function transferWithFee(address _token, address _userFrom, uint _fullPrice, address _feeTaker, address _priceTaker, uint _price) external returns (bool);\r\n}\r\n\r\ncontract ERC20 {\r\n    //    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract TrustedTokenInterface is ERC20 {\r\n    function transferFromSystem(address _from, address _to, uint256 _value) public returns (bool);\r\n    function burn(address _from, uint256 _value) public returns (bool);\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n\r\n// contract UnicornBreedingInterface {\r\n//     function deleteOffer(uint _unicornId) external;\r\n//     function deleteHybridization(uint _unicornId) external;\r\n// }\r\n\r\ncontract BlackBoxInterface {\r\n    function createGen0(uint _unicornId) public payable;\r\n    function geneCore(uint _childUnicornId, uint _parent1UnicornId, uint _parent2UnicornId) public payable;\r\n}\r\n\r\n\r\ninterface BreedingDataBaseInterface {\r\n\r\n    function gen0Limit() external view returns (uint);\r\n    function gen0Count() external view returns (uint);\r\n    function gen0Step() external view returns (uint);\r\n\r\n    function gen0PresaleLimit() external view returns (uint);\r\n    function gen0PresaleCount() external view returns (uint);\r\n\r\n    function incGen0Count() external;\r\n    function incGen0PresaleCount() external;\r\n    function incGen0Limit() external;\r\n\r\n    function createHybridization(uint _unicornId, uint _price) external;\r\n    function hybridizationExists(uint _unicornId) external view returns (bool);\r\n    function hybridizationPrice(uint _unicornId) external view returns (uint);\r\n    function deleteHybridization(uint _unicornId) external returns (bool);\r\n\r\n    function freezeIndex(uint _unicornId) external view returns (uint);\r\n    function freezeHybridizationsCount(uint _unicornId) external view returns (uint);\r\n    function freezeStatsSumHours(uint _unicornId) external view returns (uint);\r\n    function freezeEndTime(uint _unicornId) external view returns (uint);\r\n    function freezeMustCalculate(uint _unicornId) external view returns (bool);\r\n    function freezeExists(uint _unicornId) external view returns (bool);\r\n\r\n    function createFreeze(uint _unicornId, uint _index) external;\r\n    function incFreezeHybridizationsCount(uint _unicornId) external;\r\n    function setFreezeHybridizationsCount(uint _unicornId, uint _count) external;\r\n\r\n    function incFreezeIndex(uint _unicornId) external;\r\n    function setFreezeEndTime(uint _unicornId, uint _time) external;\r\n    function minusFreezeEndTime(uint _unicornId, uint _time) external;\r\n    function setFreezeMustCalculate(uint _unicornId, bool _mustCalculate) external;\r\n    function setStatsSumHours(uint _unicornId, uint _statsSumHours) external;\r\n\r\n\r\n    function offerExists(uint _unicornId) external view returns (bool);\r\n    function offerPriceEth(uint _unicornId) external view returns (uint);\r\n    function offerPriceCandy(uint _unicornId) external view returns (uint);\r\n\r\n    function createOffer(uint _unicornId, uint _priceEth, uint _priceCandy) external;\r\n    function deleteOffer(uint _unicornId) external;\r\n\r\n}\r\n\r\ncontract UnicornBreeding is UnicornAccessControl {\r\n    using SafeMath for uint;\r\n\r\n    BlackBoxInterface public blackBox;\r\n    TrustedTokenInterface public megaCandyToken;\r\n    BreedingDataBaseInterface public breedingDB;\r\n    UnicornTokenInterface public unicornToken; //only on deploy\r\n    UnicornBalancesInterface public balances;\r\n\r\n    address public candyTokenAddress;\r\n\r\n    event HybridizationAdd(uint indexed unicornId, uint price);\r\n    event HybridizationAccept(uint indexed firstUnicornId, uint indexed secondUnicornId, uint newUnicornId, uint price);\r\n    event SelfHybridization(uint indexed firstUnicornId, uint indexed secondUnicornId, uint newUnicornId, uint price);\r\n    event HybridizationDelete(uint indexed unicornId);\r\n    event CreateUnicorn(address indexed owner, uint indexed unicornId, uint parent1, uint  parent2);\r\n    event NewGen0Limit(uint limit);\r\n    event NewGen0Step(uint step);\r\n\r\n    event FreeHybridization(uint256 indexed unicornId);\r\n    event NewSelfHybridizationPrice(uint percentCandy);\r\n\r\n    event UnicornFreezingTimeSet(uint indexed unicornId, uint time);\r\n    event MinusFreezingTime(uint indexed unicornId, uint count);\r\n\r\n    uint public selfHybridizationPrice = 0;\r\n\r\n    uint32[8] internal freezing = [\r\n    uint32(1 hours),    //1 hour\r\n    uint32(2 hours),    //2 - 4 hours\r\n    uint32(8 hours),    //8 - 12 hours\r\n    uint32(16 hours),   //16 - 24 hours\r\n    uint32(36 hours),   //36 - 48 hours\r\n    uint32(72 hours),   //72 - 96 hours\r\n    uint32(120 hours),  //120 - 144 hours\r\n    uint32(168 hours)   //168 hours\r\n    ];\r\n\r\n    //count for random plus from 0 to ..\r\n    uint32[8] internal freezingPlusCount = [\r\n    0, 3, 5, 9, 13, 25, 25, 0\r\n    ];\r\n\r\n\r\n    function makeHybridization(uint _unicornId, uint _price) whenNotPaused public {\r\n        require(unicornToken.owns(msg.sender, _unicornId));\r\n        require(isUnfreezed(_unicornId));\r\n        require(!breedingDB.hybridizationExists(_unicornId));\r\n        require(unicornToken.getUnicornGenByte(_unicornId, 10) > 0);\r\n\r\n        checkFreeze(_unicornId);\r\n        breedingDB.createHybridization(_unicornId, _price);\r\n        emit HybridizationAdd(_unicornId, _price);\r\n        //свободная касса)\r\n        if (_price == 0) {\r\n            emit FreeHybridization(_unicornId);\r\n        }\r\n    }\r\n\r\n    function acceptHybridization(uint _firstUnicornId, uint _secondUnicornId) whenNotPaused public payable {\r\n        require(unicornToken.owns(msg.sender, _secondUnicornId));\r\n        require(_secondUnicornId != _firstUnicornId);\r\n        require(isUnfreezed(_firstUnicornId) && isUnfreezed(_secondUnicornId));\r\n        require(breedingDB.hybridizationExists(_firstUnicornId));\r\n\r\n        require(unicornToken.getUnicornGenByte(_firstUnicornId, 10) > 0 && unicornToken.getUnicornGenByte(_secondUnicornId, 10) > 0);\r\n        require(msg.value == unicornManagement.oraclizeFee());\r\n\r\n        uint price = breedingDB.hybridizationPrice(_firstUnicornId);\r\n\r\n        if (price > 0) {\r\n            uint fullPrice = unicornManagement.getHybridizationFullPrice(price);\r\n\r\n            require(balances.transferWithFee(candyTokenAddress, msg.sender, fullPrice, balances, unicornToken.ownerOf(_firstUnicornId), price));\r\n\r\n        }\r\n\r\n        plusFreezingTime(_firstUnicornId);\r\n        plusFreezingTime(_secondUnicornId);\r\n        uint256 newUnicornId = unicornToken.createUnicorn(msg.sender);\r\n        blackBox.geneCore.value(unicornManagement.oraclizeFee())(newUnicornId, _firstUnicornId, _secondUnicornId);\r\n\r\n        emit HybridizationAccept(_firstUnicornId, _secondUnicornId, newUnicornId, price);\r\n        emit CreateUnicorn(msg.sender, newUnicornId, _firstUnicornId, _secondUnicornId);\r\n        _deleteHybridization(_firstUnicornId);\r\n    }\r\n\r\n    function selfHybridization(uint _firstUnicornId, uint _secondUnicornId) whenNotPaused public payable {\r\n        require(unicornToken.owns(msg.sender, _firstUnicornId) && unicornToken.owns(msg.sender, _secondUnicornId));\r\n        require(_secondUnicornId != _firstUnicornId);\r\n        require(isUnfreezed(_firstUnicornId) && isUnfreezed(_secondUnicornId));\r\n        require(unicornToken.getUnicornGenByte(_firstUnicornId, 10) > 0 && unicornToken.getUnicornGenByte(_secondUnicornId, 10) > 0);\r\n\r\n        require(msg.value == unicornManagement.oraclizeFee());\r\n\r\n        if (selfHybridizationPrice > 0) {\r\n            //            require(balances.balanceOf(candyTokenAddress,msg.sender) >= selfHybridizationPrice);\r\n            require(balances.transfer(candyTokenAddress, msg.sender, balances, selfHybridizationPrice));\r\n        }\r\n\r\n        plusFreezingTime(_firstUnicornId);\r\n        plusFreezingTime(_secondUnicornId);\r\n        uint256 newUnicornId = unicornToken.createUnicorn(msg.sender);\r\n        blackBox.geneCore.value(unicornManagement.oraclizeFee())(newUnicornId, _firstUnicornId, _secondUnicornId);\r\n        emit SelfHybridization(_firstUnicornId, _secondUnicornId, newUnicornId, selfHybridizationPrice);\r\n        emit CreateUnicorn(msg.sender, newUnicornId, _firstUnicornId, _secondUnicornId);\r\n    }\r\n\r\n    function cancelHybridization (uint _unicornId) whenNotPaused public {\r\n        require(unicornToken.owns(msg.sender,_unicornId));\r\n        //require(breedingDB.hybridizationExists(_unicornId));\r\n        _deleteHybridization(_unicornId);\r\n    }\r\n\r\n    function deleteHybridization(uint _unicornId) onlyUnicornToken external {\r\n        _deleteHybridization(_unicornId);\r\n    }\r\n\r\n    function _deleteHybridization(uint _unicornId) internal {\r\n        if (breedingDB.deleteHybridization(_unicornId)) {\r\n            emit HybridizationDelete(_unicornId);\r\n        }\r\n    }\r\n\r\n    //Create new 0 gen\r\n    function createUnicorn() public payable whenNotPaused returns(uint256)   {\r\n        require(msg.value == getCreateUnicornPrice());\r\n        return _createUnicorn(msg.sender);\r\n    }\r\n\r\n    function createUnicornForCandy() public payable whenNotPaused returns(uint256)   {\r\n        require(msg.value == unicornManagement.oraclizeFee());\r\n        uint price = getCreateUnicornPriceInCandy();\r\n        //        require(balances.balanceOf(candyTokenAddress,msg.sender) >= price);\r\n        require(balances.transfer(candyTokenAddress, msg.sender, balances, price));\r\n        return _createUnicorn(msg.sender);\r\n    }\r\n\r\n    function createPresaleUnicorns(uint _count, address _owner) public payable onlyManager whenPaused returns(bool) {\r\n        require(breedingDB.gen0PresaleCount().add(_count) <= breedingDB.gen0PresaleLimit());\r\n        uint256 newUnicornId;\r\n        address owner = _owner == address(0) ? msg.sender : _owner;\r\n        for (uint i = 0; i < _count; i++){\r\n            newUnicornId = unicornToken.createUnicorn(owner);\r\n            blackBox.createGen0(newUnicornId);\r\n            emit CreateUnicorn(owner, newUnicornId, 0, 0);\r\n            breedingDB.incGen0Count();\r\n            breedingDB.incGen0PresaleCount();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _createUnicorn(address _owner) private returns(uint256) {\r\n        require(breedingDB.gen0Count() < breedingDB.gen0Limit());\r\n        uint256 newUnicornId = unicornToken.createUnicorn(_owner);\r\n        blackBox.createGen0.value(unicornManagement.oraclizeFee())(newUnicornId);\r\n        emit CreateUnicorn(_owner, newUnicornId, 0, 0);\r\n        breedingDB.incGen0Count();\r\n        return newUnicornId;\r\n    }\r\n\r\n    function plusFreezingTime(uint _unicornId) private {\r\n        checkFreeze(_unicornId);\r\n        //если меньше 3 спарок увеличиваю просто спарки, если 3 тогда увеличиваю индекс\r\n        if (breedingDB.freezeHybridizationsCount(_unicornId) < 3) {\r\n            breedingDB.incFreezeHybridizationsCount(_unicornId);\r\n        } else {\r\n            if (breedingDB.freezeIndex(_unicornId) < freezing.length - 1) {\r\n                breedingDB.incFreezeIndex(_unicornId);\r\n                breedingDB.setFreezeHybridizationsCount(_unicornId,0);\r\n            }\r\n        }\r\n\r\n        uint _time = _getFreezeTime(breedingDB.freezeIndex(_unicornId)) + now;\r\n        breedingDB.setFreezeEndTime(_unicornId, _time);\r\n        emit UnicornFreezingTimeSet(_unicornId, _time);\r\n    }\r\n\r\n    function checkFreeze(uint _unicornId) internal {\r\n        if (!breedingDB.freezeExists(_unicornId)) {\r\n            breedingDB.createFreeze(_unicornId, unicornToken.getUnicornGenByte(_unicornId, 163));\r\n        }\r\n        if (breedingDB.freezeMustCalculate(_unicornId)) {\r\n            breedingDB.setFreezeMustCalculate(_unicornId, false);\r\n            breedingDB.setStatsSumHours(_unicornId, _getStatsSumHours(_unicornId));\r\n        }\r\n    }\r\n\r\n    function _getRarity(uint8 _b) internal pure returns (uint8) {\r\n        //        [1; 188] common\r\n        //        [189; 223] uncommon\r\n        //        [224; 243] rare\r\n        //        [244; 253] epic\r\n        //        [254; 255] legendary\r\n        return _b < 1 ? 0 : _b < 189 ? 1 : _b < 224 ? 2 : _b < 244 ? 3 : _b < 254 ? 4 : 5;\r\n    }\r\n\r\n    function _getStatsSumHours(uint _unicornId) internal view returns (uint) {\r\n        uint8[5] memory physStatBytes = [\r\n        //physical\r\n        112, //strength\r\n        117, //agility\r\n        122, //speed\r\n        127, //intellect\r\n        132 //charisma\r\n        ];\r\n        uint8[10] memory rarity1Bytes = [\r\n        //rarity old\r\n        13, //body-form\r\n        18, //wings-form\r\n        23, //hoofs-form\r\n        28, //horn-form\r\n        33, //eyes-form\r\n        38, //hair-form\r\n        43, //tail-form\r\n        48, //stone-form\r\n        53, //ears-form\r\n        58 //head-form\r\n        ];\r\n        uint8[10] memory rarity2Bytes = [\r\n        //rarity new\r\n        87, //body-form\r\n        92, //wings-form\r\n        97, //hoofs-form\r\n        102, //horn-form\r\n        107, //eyes-form\r\n        137, //hair-form\r\n        142, //tail-form\r\n        147, //stone-form\r\n        152, //ears-form\r\n        157 //head-form\r\n        ];\r\n\r\n        uint sum = 0;\r\n        uint i;\r\n        for(i = 0; i < 5; i++) {\r\n            sum += unicornToken.getUnicornGenByte(_unicornId, physStatBytes[i]);\r\n        }\r\n\r\n        for(i = 0; i < 10; i++) {\r\n            //get v.2 rarity\r\n            uint rarity = unicornToken.getUnicornGenByte(_unicornId, rarity2Bytes[i]);\r\n            if (rarity == 0) {\r\n                //get v.1 rarity\r\n                rarity = _getRarity(unicornToken.getUnicornGenByte(_unicornId, rarity1Bytes[i]));\r\n            }\r\n            sum += rarity;\r\n        }\r\n        return sum * 1 hours;\r\n    }\r\n\r\n    function isUnfreezed(uint _unicornId) public view returns (bool) {\r\n        return unicornToken.isUnfreezed(_unicornId) && breedingDB.freezeEndTime(_unicornId) <= now;\r\n    }\r\n\r\n    function enableFreezePriceRateRecalc(uint _unicornId) onlyGeneLab external {\r\n        breedingDB.setFreezeMustCalculate(_unicornId, true);\r\n    }\r\n\r\n    /*\r\n       (сумма генов + количество часов заморозки)/количество часов заморозки = стоимость снятия 1го часа заморозки в MegaCandy\r\n    */\r\n    function getUnfreezingPrice(uint _unicornId) public view returns (uint) {\r\n        uint32 freezeHours = freezing[breedingDB.freezeIndex(_unicornId)];\r\n        return unicornManagement.subFreezingPrice()\r\n        .mul(breedingDB.freezeStatsSumHours(_unicornId).add(freezeHours))\r\n        .div(freezeHours);\r\n    }\r\n\r\n    function _getFreezeTime(uint freezingIndex) internal view returns (uint time) {\r\n        time = freezing[freezingIndex];\r\n        if (freezingPlusCount[freezingIndex] != 0) {\r\n            time += (uint(block.blockhash(block.number - 1)) % freezingPlusCount[freezingIndex]) * 1 hours;\r\n        }\r\n    }\r\n\r\n    //change freezing time for megacandy\r\n    function minusFreezingTime(uint _unicornId, uint _count) public {\r\n        uint price = getUnfreezingPrice(_unicornId);\r\n        require(megaCandyToken.burn(msg.sender, price.mul(_count)));\r\n        //не минусуем на уже размороженных конях\r\n        require(breedingDB.freezeEndTime(_unicornId) > now);\r\n        //не используем safeMath, т.к. subFreezingTime в теории не должен быть больше now %)\r\n        breedingDB.minusFreezeEndTime(_unicornId, uint(unicornManagement.subFreezingTime()).mul(_count));\r\n        emit MinusFreezingTime(_unicornId,_count);\r\n    }\r\n\r\n    function getHybridizationPrice(uint _unicornId) public view returns (uint) {\r\n        return unicornManagement.getHybridizationFullPrice(breedingDB.hybridizationPrice(_unicornId));\r\n    }\r\n\r\n    function getEtherFeeForPriceInCandy() public view returns (uint) {\r\n        return unicornManagement.oraclizeFee();\r\n    }\r\n\r\n    function getCreateUnicornPriceInCandy() public view returns (uint) {\r\n        return unicornManagement.getCreateUnicornFullPriceInCandy();\r\n    }\r\n\r\n    function getCreateUnicornPrice() public view returns (uint) {\r\n        return unicornManagement.getCreateUnicornFullPrice();\r\n    }\r\n\r\n    function setGen0Limit() external onlyCommunity {\r\n        require(breedingDB.gen0Count() == breedingDB.gen0Limit());\r\n        breedingDB.incGen0Limit();\r\n        emit NewGen0Limit(breedingDB.gen0Limit());\r\n    }\r\n\r\n    function setSelfHybridizationPrice(uint _percentCandy) public onlyManager {\r\n        selfHybridizationPrice = _percentCandy;\r\n        emit NewSelfHybridizationPrice(_percentCandy);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract UnicornMarket is UnicornBreeding {\r\n    uint public sellDividendPercentCandy = 375; //OnlyManager 4 digits. 10.5% = 1050\r\n    uint public sellDividendPercentEth = 375; //OnlyManager 4 digits. 10.5% = 1050\r\n\r\n    event NewSellDividendPercent(uint percentCandy, uint percentCandyEth);\r\n    event OfferAdd(uint256 indexed unicornId, uint priceEth, uint priceCandy);\r\n    event OfferDelete(uint256 indexed unicornId);\r\n    event UnicornSold(uint256 indexed unicornId, uint priceEth, uint priceCandy);\r\n    event FreeOffer(uint256 indexed unicornId);\r\n\r\n\r\n    function sellUnicorn(uint _unicornId, uint _priceEth, uint _priceCandy) whenNotPaused public {\r\n        require(unicornToken.owns(msg.sender, _unicornId));\r\n        require(!breedingDB.offerExists(_unicornId));\r\n\r\n        breedingDB.createOffer(_unicornId, _priceEth, _priceCandy);\r\n\r\n        emit OfferAdd(_unicornId, _priceEth, _priceCandy);\r\n        //налетай)\r\n        if (_priceEth == 0 && _priceCandy == 0) {\r\n            emit FreeOffer(_unicornId);\r\n        }\r\n    }\r\n\r\n    function buyUnicornWithEth(uint _unicornId) whenNotPaused public payable {\r\n        require(breedingDB.offerExists(_unicornId));\r\n        uint price = breedingDB.offerPriceEth(_unicornId);\r\n        //Выставлять на продажу за 0 можно. Но нужно проверить чтобы и вторая цена также была 0\r\n        if (price == 0) {\r\n            require(breedingDB.offerPriceCandy(_unicornId) == 0);\r\n        }\r\n        require(msg.value == getOfferPriceEth(_unicornId));\r\n\r\n        address owner = unicornToken.ownerOf(_unicornId);\r\n\r\n        emit UnicornSold(_unicornId, price, 0);\r\n        //deleteoffer вызовется внутри transfer\r\n        unicornToken.marketTransfer(owner, msg.sender, _unicornId);\r\n        owner.transfer(price);\r\n    }\r\n\r\n    function buyUnicornWithCandy(uint _unicornId) whenNotPaused public {\r\n        require(breedingDB.offerExists(_unicornId));\r\n        uint price = breedingDB.offerPriceCandy(_unicornId);\r\n        //Выставлять на продажу за 0 можно. Но нужно проверить чтобы и вторая цена также была 0\r\n        if (price == 0) {\r\n            require(breedingDB.offerPriceEth(_unicornId) == 0);\r\n        }\r\n\r\n        address owner = unicornToken.ownerOf(_unicornId);\r\n\r\n        if (price > 0) {\r\n            uint fullPrice = getOfferPriceCandy(_unicornId);\r\n            require(balances.transferWithFee(candyTokenAddress, msg.sender, fullPrice, balances, owner, price));\r\n        }\r\n\r\n        emit UnicornSold(_unicornId, 0, price);\r\n        //deleteoffer вызовется внутри transfer\r\n        unicornToken.marketTransfer(owner, msg.sender, _unicornId);\r\n    }\r\n\r\n\r\n    function revokeUnicorn(uint _unicornId) whenNotPaused public {\r\n        require(unicornToken.owns(msg.sender, _unicornId));\r\n        //require(breedingDB.offerExists(_unicornId));\r\n        _deleteOffer(_unicornId);\r\n    }\r\n\r\n\r\n    function deleteOffer(uint _unicornId) onlyUnicornToken external {\r\n        _deleteOffer(_unicornId);\r\n    }\r\n\r\n\r\n    function _deleteOffer(uint _unicornId) internal {\r\n        if (breedingDB.offerExists(_unicornId)) {\r\n            breedingDB.deleteOffer(_unicornId);\r\n            emit OfferDelete(_unicornId);\r\n        }\r\n    }\r\n\r\n\r\n    function getOfferPriceEth(uint _unicornId) public view returns (uint) {\r\n        uint priceEth = breedingDB.offerPriceEth(_unicornId);\r\n        return priceEth.add(valueFromPercent(priceEth, sellDividendPercentEth));\r\n    }\r\n\r\n\r\n    function getOfferPriceCandy(uint _unicornId) public view returns (uint) {\r\n        uint priceCandy = breedingDB.offerPriceCandy(_unicornId);\r\n        return priceCandy.add(valueFromPercent(priceCandy, sellDividendPercentCandy));\r\n    }\r\n\r\n\r\n    function setSellDividendPercent(uint _percentCandy, uint _percentEth) public onlyManager {\r\n        //no more then 25%\r\n        require(_percentCandy < 2500 && _percentEth < 2500);\r\n\r\n        sellDividendPercentCandy = _percentCandy;\r\n        sellDividendPercentEth = _percentEth;\r\n        emit NewSellDividendPercent(_percentCandy, _percentEth);\r\n    }\r\n\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(10000);\r\n        return (_amount);\r\n    }\r\n}\r\n\r\n\r\ncontract UnicornCoinMarket is UnicornMarket {\r\n    uint public feeTake = 5000000000000000; // 0.5% percentage times (1 ether)\r\n    mapping (address => mapping (bytes32 => uint)) public orderFills; // mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\r\n    mapping (address => bool) public tokensWithoutFee;\r\n\r\n    /// Logging Events\r\n    event Trade(bytes32 indexed hash, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\r\n\r\n\r\n    /// Changes the fee on takes.\r\n    function changeFeeTake(uint feeTake_) external onlyOwner {\r\n        feeTake = feeTake_;\r\n    }\r\n\r\n\r\n    function setTokenWithoutFee(address _token, bool _takeFee) external onlyOwner {\r\n        tokensWithoutFee[_token] = _takeFee;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Trading\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n    * Facilitates a trade from one user to another.\r\n    * Requires that the transaction is signed properly, the trade isn't past its expiration, and all funds are present to fill the trade.\r\n    * Calls tradeBalances().\r\n    * Updates orderFills with the amount traded.\r\n    * Emits a Trade event.\r\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\r\n    * Note: amount is in amountGet / tokenGet terms.\r\n    * @param tokenGet Ethereum contract address of the token to receive\r\n    * @param amountGet uint amount of tokens being received\r\n    * @param tokenGive Ethereum contract address of the token to give\r\n    * @param amountGive uint amount of tokens being given\r\n    * @param expires uint of block number when this order should expire\r\n    * @param nonce arbitrary random number\r\n    * @param user Ethereum address of the user who placed the order\r\n    * @param v part of signature for the order hash as signed by user\r\n    * @param r part of signature for the order hash as signed by user\r\n    * @param s part of signature for the order hash as signed by user\r\n    * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\r\n    */\r\n    function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) external {\r\n        bytes32 hash = sha256(balances, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\r\n        require(\r\n            ecrecover(keccak256(keccak256(\"bytes32 Order hash\"), keccak256(hash)), v, r, s) == user &&\r\n            block.number <= expires &&\r\n            orderFills[user][hash].add(amount) <= amountGet\r\n        );\r\n        uint amount2 =  tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\r\n        orderFills[user][hash] = orderFills[user][hash].add(amount);\r\n        emit Trade(hash, tokenGet, amount, tokenGive, amount2, user, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * This is a private function and is only being called from trade().\r\n    * Handles the movement of funds when a trade occurs.\r\n    * Takes fees.\r\n    * Updates token balances for both buyer and seller.\r\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\r\n    * Note: amount is in amountGet / tokenGet terms.\r\n    * @param tokenGet Ethereum contract address of the token to receive\r\n    * @param amountGet uint amount of tokens being received\r\n    * @param tokenGive Ethereum contract address of the token to give\r\n    * @param amountGive uint amount of tokens being given\r\n    * @param user Ethereum address of the user who placed the order\r\n    * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\r\n    */\r\n    function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private returns(uint amount2){\r\n\r\n        uint _fee = 0;\r\n\r\n        if (!tokensWithoutFee[tokenGet]) {\r\n            _fee = amount.mul(feeTake).div(1 ether);\r\n        }\r\n\r\n\r\n        if (balances.trustedTokens(tokenGet)) {\r\n            TrustedTokenInterface t = TrustedTokenInterface(tokenGet);\r\n            require(t.transferFromSystem(msg.sender, user, amount));\r\n            require(t.transferFromSystem(msg.sender, this, _fee));\r\n        } else {\r\n            require(\r\n                balances.transferWithFee(tokenGet, msg.sender, amount, balances, user, amount.sub(_fee))\r\n            );\r\n            //            balances.tokenMinus(tokenGet, msg.sender, amount);\r\n            //            balances.tokenPlus(tokenGet, user, amount.sub(_fee));\r\n            //            balances.tokenPlus(tokenGet, this, _fee);\r\n        }\r\n\r\n        amount2 = amountGive.mul(amount).div(amountGet);\r\n        if (balances.trustedTokens(tokenGive)) {\r\n            require(TrustedTokenInterface(tokenGive).transferFromSystem(user, msg.sender, amount2));\r\n        } else {\r\n            require(balances.transfer(tokenGive, user, msg.sender, amount2));\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract UnicornContract is UnicornCoinMarket {\r\n    event FundsTransferred(address dividendManager, uint value);\r\n\r\n    function() public payable {\r\n\r\n    }\r\n\r\n    function UnicornContract(address _breedingDB, address _balances, address _unicornManagementAddress) UnicornAccessControl(_unicornManagementAddress) public {\r\n        candyTokenAddress = unicornManagement.candyToken();\r\n        breedingDB = BreedingDataBaseInterface(_breedingDB);\r\n        balances = UnicornBalancesInterface(_balances);\r\n    }\r\n\r\n    function init() onlyManagement whenPaused external {\r\n        unicornToken = UnicornTokenInterface(unicornManagement.unicornTokenAddress());\r\n        blackBox = BlackBoxInterface(unicornManagement.blackBoxAddress());\r\n        megaCandyToken = TrustedTokenInterface(unicornManagement.candyPowerToken());\r\n    }\r\n\r\n\r\n    function transferTokensToDividendManager(address _token) onlyManager public {\r\n        require(ERC20(_token).balanceOf(this) > 0);\r\n        ERC20(_token).transfer(unicornManagement.walletAddress(), ERC20(_token).balanceOf(this));\r\n    }\r\n\r\n\r\n    function transferEthersToDividendManager(uint _value) onlyManager public {\r\n        require(address(this).balance >= _value);\r\n        DividendManagerInterface dividendManager = DividendManagerInterface(unicornManagement.dividendManagerAddress());\r\n        dividendManager.payDividend.value(_value)();\r\n        emit FundsTransferred(unicornManagement.dividendManagerAddress(), _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_takeFee\",\"type\":\"bool\"}],\"name\":\"setTokenWithoutFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breedingDB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getHybridizationPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"makeHybridization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getOfferPriceCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_priceEth\",\"type\":\"uint256\"},{\"name\":\"_priceCandy\",\"type\":\"uint256\"}],\"name\":\"sellUnicorn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"cancelHybridization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreateUnicornPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstUnicornId\",\"type\":\"uint256\"},{\"name\":\"_secondUnicornId\",\"type\":\"uint256\"}],\"name\":\"selfHybridization\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"enableFreezePriceRateRecalc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"buyUnicornWithEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"minusFreezingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPresaleUnicorns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUnicornForCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getUnfreezingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"getOfferPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"deleteOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeTake_\",\"type\":\"uint256\"}],\"name\":\"changeFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUnicorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentCandy\",\"type\":\"uint256\"},{\"name\":\"_percentEth\",\"type\":\"uint256\"}],\"name\":\"setSellDividendPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentCandy\",\"type\":\"uint256\"}],\"name\":\"setSelfHybridizationPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"revokeUnicorn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDividendPercentCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blackBox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensWithoutFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"deleteHybridization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"isUnfreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornId\",\"type\":\"uint256\"}],\"name\":\"buyUnicornWithCandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstUnicornId\",\"type\":\"uint256\"},{\"name\":\"_secondUnicornId\",\"type\":\"uint256\"}],\"name\":\"acceptHybridization\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherFeeForPriceInCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfHybridizationPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDividendPercentEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setGen0Limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferTokensToDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreateUnicornPriceInCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candyTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEthersToDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megaCandyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_breedingDB\",\"type\":\"address\"},{\"name\":\"_balances\",\"type\":\"address\"},{\"name\":\"_unicornManagementAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"percentCandy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentCandyEth\",\"type\":\"uint256\"}],\"name\":\"NewSellDividendPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceCandy\",\"type\":\"uint256\"}],\"name\":\"OfferAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"OfferDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceCandy\",\"type\":\"uint256\"}],\"name\":\"UnicornSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"FreeOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"HybridizationAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"firstUnicornId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"secondUnicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUnicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"HybridizationAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"firstUnicornId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"secondUnicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUnicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SelfHybridization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"HybridizationDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parent1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parent2\",\"type\":\"uint256\"}],\"name\":\"CreateUnicorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"NewGen0Limit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"NewGen0Step\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"}],\"name\":\"FreeHybridization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"percentCandy\",\"type\":\"uint256\"}],\"name\":\"NewSelfHybridizationPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnicornFreezingTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unicornId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"MinusFreezingTime\",\"type\":\"event\"}]","ContractName":"UnicornContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cd3fa0487f41cc2fe73d3278f5356ffee0cbcc4b0000000000000000000000006cbd7992d39a106a64807125899b2dfc02a4369400000000000000000000000010cc060f6f9b2e5dcdb23f1361e4b368a7daec73","Library":"","SwarmSource":"bzzr://aa118b975d422de22dabc794fd0c9e187d7312f52af3d10fcb3c3fa797d785e1"}]}