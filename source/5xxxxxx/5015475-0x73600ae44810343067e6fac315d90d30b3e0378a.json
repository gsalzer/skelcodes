{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.17;\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Asset Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Any contract inheriting this will be usable as an Asset in the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\ncontract ABIApplicationAsset {\r\n\r\n    bytes32 public assetName;\r\n    uint8 public CurrentEntityState;\r\n    uint8 public RecordNum;\r\n    bool public _initialized;\r\n    bool public _settingsApplied;\r\n    address public owner;\r\n    address public deployerAddress;\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n    mapping (bytes32 => uint8) public RecordStates;\r\n\r\n    function setInitialApplicationAddress(address _ownerAddress) public;\r\n    function setInitialOwnerAndName(bytes32 _name) external returns (bool);\r\n    function getRecordState(bytes32 name) public view returns (uint8);\r\n    function getEntityState(bytes32 name) public view returns (uint8);\r\n    function applyAndLockSettings() public returns(bool);\r\n    function transferToNewOwner(address _newOwner) public returns (bool);\r\n    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);\r\n    function getApplicationState() public view returns (uint8);\r\n    function getApplicationEntityState(bytes32 name) public view returns (uint8);\r\n    function getAppBylawUint256(bytes32 name) public view returns (uint256);\r\n    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);\r\n    function getTimestamp() view public returns (uint256);\r\n\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Funding Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the Funding Contract code deployed and linked to the Application Entity\r\n\r\n\r\n    !!! Links directly to Milestones\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIFunding is ABIApplicationAsset {\r\n\r\n    address public multiSigOutputAddress;\r\n    address public DirectInput;\r\n    address public MilestoneInput;\r\n    address public TokenManagerEntity;\r\n    address public FundingManagerEntity;\r\n\r\n    struct FundingStage {\r\n        bytes32 name;\r\n        uint8   state;\r\n        uint256 time_start;\r\n        uint256 time_end;\r\n        uint256 amount_cap_soft;            // 0 = not enforced\r\n        uint256 amount_cap_hard;            // 0 = not enforced\r\n        uint256 amount_raised;              // 0 = not enforced\r\n        // funding method settings\r\n        uint256 minimum_entry;\r\n        uint8   methods;                    // FundingMethodIds\r\n        // token settings\r\n        uint256 fixed_tokens;\r\n        uint8   price_addition_percentage;  //\r\n        uint8   token_share_percentage;\r\n        uint8   index;\r\n    }\r\n\r\n    mapping (uint8 => FundingStage) public Collection;\r\n    uint8 public FundingStageNum;\r\n    uint8 public currentFundingStage;\r\n    uint256 public AmountRaised;\r\n    uint256 public MilestoneAmountRaised;\r\n    uint256 public GlobalAmountCapSoft;\r\n    uint256 public GlobalAmountCapHard;\r\n    uint8 public TokenSellPercentage;\r\n    uint256 public Funding_Setting_funding_time_start;\r\n    uint256 public Funding_Setting_funding_time_end;\r\n    uint256 public Funding_Setting_cashback_time_start;\r\n    uint256 public Funding_Setting_cashback_time_end;\r\n    uint256 public Funding_Setting_cashback_before_start_wait_duration;\r\n    uint256 public Funding_Setting_cashback_duration;\r\n\r\n\r\n    function addFundingStage(\r\n        bytes32 _name,\r\n        uint256 _time_start,\r\n        uint256 _time_end,\r\n        uint256 _amount_cap_soft,\r\n        uint256 _amount_cap_hard,   // required > 0\r\n        uint8   _methods,\r\n        uint256 _minimum_entry,\r\n        uint256 _fixed_tokens,\r\n        uint8   _price_addition_percentage,\r\n        uint8   _token_share_percentage\r\n    )\r\n    public;\r\n\r\n    function addSettings(address _outputAddress, uint256 soft_cap, uint256 hard_cap, uint8 sale_percentage, address _direct, address _milestone ) public;\r\n    function getStageAmount(uint8 StageId) public view returns ( uint256 );\r\n    function allowedPaymentMethod(uint8 _payment_method) public pure returns (bool);\r\n    function receivePayment(address _sender, uint8 _payment_method) payable public returns(bool);\r\n    function canAcceptPayment(uint256 _amount) public view returns (bool);\r\n    function getValueOverCurrentCap(uint256 _amount) public view returns (uint256);\r\n    function isFundingStageUpdateAllowed(uint8 _new_state ) public view returns (bool);\r\n    function getRecordStateRequiredChanges() public view returns (uint8);\r\n    function doStateChanges() public;\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8, uint8, uint8);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Funding Vault ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n each purchase creates a separate funding vault contract\r\n\r\n*/\r\n\r\n\r\ncontract ABIFundingVault {\r\n\r\n    bool public _initialized;\r\n    address public vaultOwner;\r\n    address public outputAddress;\r\n    address public managerAddress;\r\n    bool public allFundingProcessed;\r\n    bool public DirectFundingProcessed;\r\n    uint256 public amount_direct;\r\n    uint256 public amount_milestone;\r\n    bool public emergencyFundReleased;\r\n\r\n    struct PurchaseStruct {\r\n        uint256 unix_time;\r\n        uint8 payment_method;\r\n        uint256 amount;\r\n        uint8 funding_stage;\r\n        uint16 index;\r\n    }\r\n\r\n    bool public BalancesInitialised;\r\n    uint8 public BalanceNum;\r\n    uint16 public purchaseRecordsNum;\r\n    mapping(uint16 => PurchaseStruct) public purchaseRecords;\r\n    mapping (uint8 => uint256) public stageAmounts;\r\n    mapping (uint8 => uint256) public stageAmountsDirect;\r\n    mapping (uint8 => uint256) public etherBalances;\r\n    mapping (uint8 => uint256) public tokenBalances;\r\n\r\n    function initialize( address _owner, address _output, address _fundingAddress, address _milestoneAddress, address _proposalsAddress ) public returns(bool);\r\n    function addPayment(uint8 _payment_method, uint8 _funding_stage ) public payable returns (bool);\r\n    function getBoughtTokens() public view returns (uint256);\r\n    function getDirectBoughtTokens() public view returns (uint256);\r\n    function ReleaseFundsAndTokens() public returns (bool);\r\n    function releaseTokensAndEtherForEmergencyFund() public returns (bool);\r\n    function ReleaseFundsToInvestor() public;\r\n    function canCashBack() public view returns (bool);\r\n    function checkFundingStateFailed() public view returns (bool);\r\n    function checkMilestoneStateInvestorVotedNoVotingEndedNo() public view returns (bool);\r\n    function checkOwnerFailedToSetTimeOnMeeting() public view returns (bool);\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n * @name        Token Stake Calculation And Distribution Algorithm - Type 3 - Sell a variable amount of tokens for a fixed price\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n\r\n    Inputs:\r\n\r\n    Defined number of tokens per wei ( X Tokens = 1 wei )\r\n    Received amount of ETH\r\n    Generates:\r\n\r\n    Total Supply of tokens available in Funding Phase respectively Project\r\n    Observations:\r\n\r\n    Will sell the whole supply of Tokens available to Current Funding Phase\r\n    Use cases:\r\n\r\n    Any Funding Phase where you want the first Funding Phase to determine the token supply of the whole Project\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenSCADAVariable {\r\n\r\n    ABIFunding FundingEntity;\r\n\r\n    bool public SCADA_requires_hard_cap = true;\r\n    bool public initialized = false;\r\n    address public deployerAddress;\r\n\r\n    function TokenSCADAVariable() public {\r\n        deployerAddress = msg.sender;\r\n    }\r\n\r\n    function addSettings(address _fundingContract) onlyDeployer public {\r\n        require(initialized == false);\r\n        FundingEntity = ABIFunding(_fundingContract);\r\n        initialized = true;\r\n    }\r\n\r\n    function requiresHardCap() public view returns (bool) {\r\n        return SCADA_requires_hard_cap;\r\n    }\r\n\r\n    function getTokensForValueInCurrentStage(uint256 _value) public view returns (uint256) {\r\n        return getTokensForValueInStage(FundingEntity.currentFundingStage(), _value);\r\n    }\r\n\r\n    function getTokensForValueInStage(uint8 _stage, uint256 _value) public view returns (uint256) {\r\n        uint256 amount = FundingEntity.getStageAmount(_stage);\r\n        return _value * amount;\r\n    }\r\n\r\n    function getBoughtTokens( address _vaultAddress, bool _direct ) public view returns (uint256) {\r\n        ABIFundingVault vault = ABIFundingVault(_vaultAddress);\r\n\r\n        if(_direct) {\r\n            uint256 DirectTokens = getTokensForValueInStage(1, vault.stageAmountsDirect(1));\r\n            DirectTokens+= getTokensForValueInStage(2, vault.stageAmountsDirect(2));\r\n            return DirectTokens;\r\n        } else {\r\n            uint256 TotalTokens = getTokensForValueInStage(1, vault.stageAmounts(1));\r\n            TotalTokens+= getTokensForValueInStage(2, vault.stageAmounts(2));\r\n            return TotalTokens;\r\n        }\r\n    }\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployerAddress);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"requiresHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCADA_requires_hard_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getTokensForValueInCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"name\":\"_direct\",\"type\":\"bool\"}],\"name\":\"getBoughtTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getTokensForValueInStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingContract\",\"type\":\"address\"}],\"name\":\"addSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenSCADAVariable","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ebcbbabee361bdc29b30add2e0e62cc394f61b40a8337c9d6f8d787d682e8369"}]}