{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"msg.sender == owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(address(0) != _newOwner, \"address(0) != _newOwner\");\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner, \"msg.sender == newOwner\");\r\n\t\temit OwnershipTransferred(owner, msg.sender);\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\ncontract tokenInterface {\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\r\n\tstring public symbols;\r\n\tfunction originBurn(uint256 _value) public returns(bool);\r\n}\r\n\r\ncontract XribaSwap is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    tokenInterface public mtv;\r\n    tokenInterface public xra;\r\n    \r\n    uint256 public startRelease;\r\n    uint256 public endRelease;\r\n    \r\n    mapping (address => uint256) public xra_amount;\r\n    mapping (address => uint256) public xra_sent;\r\n    \r\n    constructor(address _mtv, address _xra, uint256 _startRelease) public {\r\n        mtv = tokenInterface(_mtv);\r\n        xra = tokenInterface(_xra);\r\n        //require(mtv.symbols() == \"MTV\", \"mtv.symbols() == \\\"MTV\\\"\");\r\n        //require(xra.symbols() == \"XRA\", \"mtv.symbols() == \\\"XRA\\\"\");\r\n        \r\n        startRelease = _startRelease;\r\n        endRelease = startRelease.add(7*30 days);\r\n        \r\n    } \r\n    \r\n\tfunction withdrawTokens(address tknAddr, address to, uint256 value) public onlyOwner returns (bool) {\r\n        return tokenInterface(tknAddr).transfer(to, value);\r\n    }\r\n    \r\n    function changeTime(uint256 _startRelease) onlyOwner public {\r\n        startRelease = _startRelease;\r\n        endRelease = startRelease.add(7*30 days);\r\n    }\r\n\t\r\n\tfunction () public {\r\n\t\trequire ( msg.sender == tx.origin, \"msg.sender == tx.orgin\" );\r\n\t\trequire ( now > startRelease.sub(1 days) );\r\n\t\t\r\n\t\tuint256 mtv_amount = mtv.balanceOf(msg.sender);\r\n\t\tuint256 tknToSend;\r\n\t\t\r\n\t\tif( mtv_amount > 0 ) {\r\n\t\t    mtv.originBurn(mtv_amount);\r\n\t\t    xra_amount[msg.sender] = xra_amount[msg.sender].add(mtv_amount.mul(5));\r\n\t\t    \r\n\t\t    tknToSend = xra_amount[msg.sender].mul(30).div(100).sub(xra_sent[msg.sender]);\r\n\t\t    xra_sent[msg.sender] = xra_sent[msg.sender].add(tknToSend);\r\n\t\t    \r\n\t\t    xra.transfer(msg.sender, tknToSend);\r\n\t\t}\r\n\t\t\r\n\t\trequire( xra_amount[msg.sender] > 0, \"xra_amount[msg.sender] > 0\");\r\n\t\t\r\n\t\tif ( now > startRelease ) {\r\n\t\t    uint256 timeframe = endRelease.sub(startRelease);\r\n\t\t    uint256 timeprogress = now.sub(startRelease);\r\n\t\t    uint256 rate = 0;\r\n\t\t    if( now > endRelease) { \r\n\t\t        rate = 1 ether;\r\n\t\t    } else {\r\n\t\t        rate =  timeprogress.mul(1 ether).div(timeframe);   \r\n\t\t    }\r\n\t\t    \r\n\t\t    uint256 alreadySent =  xra_amount[msg.sender].mul(0.3 ether).div(1 ether);\r\n\t\t    uint256 remainingToSend = xra_amount[msg.sender].mul(0.7 ether).div(1 ether);\r\n\t\t    \r\n\t\t    \r\n\t\t    tknToSend = alreadySent.add( remainingToSend.mul(rate).div(1 ether) ).sub( xra_sent[msg.sender] );\r\n\t\t    xra_sent[msg.sender] = xra_sent[msg.sender].add(tknToSend);\r\n\t\t    \r\n\t\t    require(tknToSend > 0,\"tknToSend > 0\");\r\n\t\t    xra.transfer(msg.sender, tknToSend);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"xra_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tknAddr\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startRelease\",\"type\":\"uint256\"}],\"name\":\"changeTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xra\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtv\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"xra_sent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mtv\",\"type\":\"address\"},{\"name\":\"_xra\",\"type\":\"address\"},{\"name\":\"_startRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"XribaSwap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000515818f6638ce8b0cd48d12244013290c3137f8c0000000000000000000000007025bab2ec90410de37f488d1298204cd4d6b29d000000000000000000000000000000000000000000000000000000005b2ace60","Library":"","SwarmSource":"bzzr://0bf169eb9ff3c6addad6c21ea88d82c55f0c90ce96c0898f0f4d688df9d7f066"}]}