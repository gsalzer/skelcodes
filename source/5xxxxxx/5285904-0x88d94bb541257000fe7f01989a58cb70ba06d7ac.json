{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract HireGoToken is MintableToken, BurnableToken {\r\n\r\n    string public constant name = \"HireGo\";\r\n    string public constant symbol = \"HGO\";\r\n    uint32 public constant decimals = 18;\r\n\r\n    function HireGoToken() public {\r\n        totalSupply = 100000000E18;  //100m\r\n        balances[owner] = totalSupply; // Add all tokens to issuer balance (crowdsale in this case)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * ICO Start time - 1520164800 - March 4, 2018 12:00:00 PM\r\n * Default ICO End time - 1527379199 - May 26, 2018 11:59:59 AM\r\n*/\r\ncontract HireGoCrowdsale is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    HireGoToken public token = new HireGoToken();\r\n    uint totalSupply = token.totalSupply();\r\n\r\n    bool public isRefundAllowed;\r\n\r\n    uint public presaleStartTime;\r\n    uint public presaleEndTime;\r\n    uint public icoStartTime;\r\n    uint public icoEndTime;\r\n\r\n    uint public totalWeiRaised;\r\n    uint internal weiRaised;\r\n    uint public hardCap; // amount of ETH collected, which marks end of crowd sale\r\n    uint public tokensDistributed; // amount of bought tokens\r\n    uint public foundersTokensUnlockTime;\r\n\r\n\r\n    /*         Bonus variables          */\r\n    uint internal presaleBonus = 135;\r\n    /* * * * * * * * * * * * * * * * * * */\r\n\r\n    uint public rate; // how many token units a buyer gets per wei\r\n    uint private icoMinPurchase; // In ETH\r\n\r\n    address[] public investors_number;\r\n    address private wallet; // address where funds are collected\r\n\r\n    mapping (address => uint) public orderedTokens;\r\n    mapping (address => uint) contributors;\r\n\r\n    event FundsWithdrawn(address _who, uint256 _amount);\r\n\r\n    modifier hardCapNotReached() {\r\n        require(totalWeiRaised < hardCap);\r\n        _;\r\n    }\r\n\r\n    modifier crowdsaleEnded() {\r\n        require(now > icoEndTime);\r\n        _;\r\n    }\r\n\r\n    modifier foundersTokensUnlocked() {\r\n        require(now > foundersTokensUnlockTime);\r\n        _;\r\n    }\r\n\r\n    modifier crowdsaleInProgress() {\r\n        bool withinPeriod = ((now >= presaleStartTime && now <=presaleEndTime) || (now >= icoStartTime && now <= icoEndTime));\r\n        require(withinPeriod);\r\n        _;\r\n    }\r\n\r\n    function HireGoCrowdsale(uint _presaleStartTime,  address _wallet) public {\r\n        require (\r\n          _presaleStartTime > now\r\n        );\r\n\r\n        presaleStartTime = _presaleStartTime;\r\n        presaleEndTime = presaleStartTime.add(4 weeks);\r\n        icoStartTime = presaleEndTime.add(1 minutes);\r\n        setIcoEndTime();\r\n\r\n        wallet = _wallet;\r\n\r\n        rate = 250 szabo; // wei per 1 token (0.00025ETH)\r\n\r\n        hardCap = 15000 ether;\r\n        icoMinPurchase = 50 finney; // 0.05 ETH\r\n        isRefundAllowed = false;\r\n    }\r\n\r\n    function setIcoEndTime() internal {\r\n          icoEndTime = icoStartTime.add(6 weeks);\r\n          foundersTokensUnlockTime = icoEndTime.add(180 days);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens() public payable crowdsaleInProgress hardCapNotReached {\r\n        require(msg.value > 0);\r\n\r\n        // check if the buyer exceeded the funding goal\r\n        calculatePurchaseAndBonuses(msg.sender, msg.value);\r\n    }\r\n\r\n    // Returns number of investors\r\n    function getInvestorCount() public view returns (uint) {\r\n        return investors_number.length;\r\n    }\r\n\r\n    // Owner can allow or disallow refunds even if soft cap is reached. Should be used in case KYC is not passed.\r\n    // WARNING: owner should transfer collected ETH back to contract before allowing to refund, if he already withdrawn ETH.\r\n    function toggleRefunds() public onlyOwner {\r\n        isRefundAllowed = !isRefundAllowed;\r\n    }\r\n\r\n    // Sends ordered tokens to investors after ICO end if soft cap is reached\r\n    // tokens can be send only if ico has ended\r\n    function sendOrderedTokens() public onlyOwner crowdsaleEnded {\r\n        address investor;\r\n        uint tokensCount;\r\n        for(uint i = 0; i < investors_number.length; i++) {\r\n            investor = investors_number[i];\r\n            tokensCount = orderedTokens[investor];\r\n            assert(tokensCount > 0);\r\n            orderedTokens[investor] = 0;\r\n            token.transfer(investor, tokensCount);\r\n        }\r\n    }\r\n\r\n    // Owner can send back collected ETH if soft cap is not reached or KYC is not passed\r\n    // WARNING: crowdsale contract should have all received funds to return them.\r\n    // If you have already withdrawn them, send them back to crowdsale contract\r\n    function refundInvestors() public onlyOwner {\r\n        require(now >= icoEndTime);\r\n        require(isRefundAllowed);\r\n        require(msg.sender.balance > 0);\r\n\r\n        address investor;\r\n        uint contributedWei;\r\n        uint tokens;\r\n        for(uint i = 0; i < investors_number.length; i++) {\r\n            investor = investors_number[i];\r\n            contributedWei = contributors[investor];\r\n            tokens = orderedTokens[investor];\r\n            if(contributedWei > 0) {\r\n                totalWeiRaised = totalWeiRaised.sub(contributedWei);\r\n                weiRaised = weiRaised.sub(contributedWei);\r\n                if(weiRaised<0){\r\n                  weiRaised = 0;\r\n                }\r\n                contributors[investor] = 0;\r\n                orderedTokens[investor] = 0;\r\n                tokensDistributed = tokensDistributed.sub(tokens);\r\n                investor.transfer(contributedWei); // return funds back to contributor\r\n            }\r\n        }\r\n    }\r\n\r\n    // Owner of contract can withdraw collected ETH by calling this function\r\n    function withdraw() public onlyOwner {\r\n        uint to_send = weiRaised;\r\n        weiRaised = 0;\r\n        FundsWithdrawn(msg.sender, to_send);\r\n        wallet.transfer(to_send);\r\n    }\r\n\r\n    function burnUnsold() public onlyOwner crowdsaleEnded {\r\n        uint tokensLeft = totalSupply.sub(tokensDistributed);\r\n        token.burn(tokensLeft);\r\n    }\r\n\r\n    function finishIco() public onlyOwner {\r\n        icoEndTime = now;\r\n        foundersTokensUnlockTime = icoEndTime.add(180 days);\r\n    }\r\n\r\n    function finishPresale() public onlyOwner {\r\n        presaleEndTime = now;\r\n    }\r\n\r\n    function distributeForFoundersAndTeam() public onlyOwner foundersTokensUnlocked {\r\n        uint to_send = 25000000E18; //25m\r\n        checkAndMint(to_send);\r\n        token.transfer(wallet, to_send);\r\n    }\r\n\r\n    function distributeForBountiesAndAdvisors() public onlyOwner {\r\n        uint to_send = 15000000E18; //15m\r\n        checkAndMint(to_send);\r\n        token.transfer(wallet, to_send);\r\n    }\r\n\r\n    // Used to delay start of ICO\r\n    function updateIcoStartTime(uint _startTime) public onlyOwner {\r\n      require (\r\n        icoStartTime > now &&\r\n        _startTime > now &&\r\n        presaleEndTime < _startTime\r\n      );\r\n\r\n      icoStartTime = _startTime;\r\n      setIcoEndTime();\r\n    }\r\n\r\n    // After pre-sale made need to reduced hard cap depending on tokens sold\r\n    function updateHardCap(uint _newHardCap) public onlyOwner hardCapNotReached {\r\n        require (\r\n          _newHardCap < hardCap\r\n        );\r\n\r\n        hardCap = _newHardCap;\r\n    }\r\n\r\n    function transferOwnershipToken(address _to) public onlyOwner {\r\n        token.transferOwnership(_to);\r\n    }\r\n\r\n    /***************************\r\n    **  Internal functions    **\r\n    ***************************/\r\n\r\n    // Calculates purchase conditions and token bonuses\r\n    function calculatePurchaseAndBonuses(address _beneficiary, uint _weiAmount) internal {\r\n        if (now >= icoStartTime && now < icoEndTime) require(_weiAmount >= icoMinPurchase);\r\n\r\n        uint cleanWei; // amount of wei to use for purchase excluding change and hardcap overflows\r\n        uint change;\r\n        uint _tokens;\r\n\r\n        //check for hardcap overflow\r\n        if (_weiAmount.add(totalWeiRaised) > hardCap) {\r\n            cleanWei = hardCap.sub(totalWeiRaised);\r\n            change = _weiAmount.sub(cleanWei);\r\n        }\r\n        else cleanWei = _weiAmount;\r\n\r\n        assert(cleanWei > 4); // 4 wei is a price of minimal fracture of token\r\n\r\n        _tokens = cleanWei.div(rate).mul(1 ether);\r\n\r\n        if (contributors[_beneficiary] == 0) investors_number.push(_beneficiary);\r\n\r\n        _tokens = calculateBonus(_tokens);\r\n        checkAndMint(_tokens);\r\n\r\n        contributors[_beneficiary] = contributors[_beneficiary].add(cleanWei);\r\n        weiRaised = weiRaised.add(cleanWei);\r\n        totalWeiRaised = totalWeiRaised.add(cleanWei);\r\n        tokensDistributed = tokensDistributed.add(_tokens);\r\n        orderedTokens[_beneficiary] = orderedTokens[_beneficiary].add(_tokens);\r\n\r\n        if (change > 0) _beneficiary.transfer(change);\r\n    }\r\n\r\n    // Calculates bonuses based on current stage\r\n    function calculateBonus(uint _baseAmount) internal returns (uint) {\r\n        require(_baseAmount > 0);\r\n\r\n        if (now >= presaleStartTime && now < presaleEndTime) {\r\n            return _baseAmount.mul(presaleBonus).div(100);\r\n        }\r\n        else return _baseAmount;\r\n    }\r\n\r\n    // Checks if more tokens should be minted based on amount of sold tokens, required additional tokens and total supply.\r\n    // If there are not enough tokens, mint missing tokens\r\n    function checkAndMint(uint _amount) internal {\r\n        uint required = tokensDistributed.add(_amount);\r\n        if(required > totalSupply) token.mint(this, required.sub(totalSupply));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orderedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateIcoStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensUnlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newHardCap\",\"type\":\"uint256\"}],\"name\":\"updateHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendOrderedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeForFoundersAndTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnershipToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors_number\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeForBountiesAndAdvisors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HireGoCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ae7ae000000000000000000000000002ce8a025f3a547d75d69bb9f6a55b279638e4b2e","Library":"","SwarmSource":"bzzr://2b9bc36848cd36f767bb0a0dd00e160e75a6ae0fd290ee266feb0d0e557d4dee"}]}