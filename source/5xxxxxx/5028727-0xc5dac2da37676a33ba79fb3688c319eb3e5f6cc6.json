{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract Beneficiary {\r\n    function payFee() public payable;\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    Beneficiary public beneficiary;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        beneficiary = Beneficiary(_newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Ownership is Owned {\r\n\r\n    event Engraved(address indexed _from, bytes32 _hash);\r\n\r\n    struct Entry {\r\n        uint256 timestamp;\r\n        bool isValid;\r\n        string author;\r\n        string text;\r\n        bytes32 license;\r\n    }\r\n\r\n    mapping(bytes32 => Entry) public registry;\r\n    bytes32[] public works;\r\n\r\n    struct License {\r\n        string title;\r\n        string text;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(bytes32 => License) public licenses;\r\n    bytes32[] public licenseIds;\r\n\r\n    uint256 public fee;\r\n\r\n    // Constructor\r\n    function Ownership(uint256 _fee) public {\r\n        owner = msg.sender;\r\n        beneficiary = Beneficiary(msg.sender);\r\n\r\n        fee = _fee;\r\n\r\n        License memory license = License({\r\n            text: \"All rights reserved. Predominance of the custom 'text' field in case of conflict.\",\r\n            title: \"All rights reserved\",\r\n            isValid: true\r\n        });\r\n\r\n        bytes32 licenseId = keccak256(license.text);\r\n        licenses[licenseId] = license;\r\n        licenseIds.push(licenseId);\r\n    }\r\n\r\n    function updateFee(uint256 _fee) public onlyOwner {\r\n        fee = _fee;\r\n    }\r\n\r\n    function engrave(bytes32 _hash,\r\n                     string _author,\r\n                     string _freeText,\r\n                     bytes32 _license) public payable {\r\n        require(!registry[_hash].isValid);\r\n        require(licenses[_license].isValid);\r\n\r\n        require(msg.value >= fee);\r\n\r\n        Entry memory entry = Entry({\r\n            author: _author,\r\n            isValid: true,\r\n            timestamp: block.timestamp,\r\n            text: _freeText,\r\n            license: _license\r\n        });\r\n\r\n        registry[_hash] = entry;\r\n        works.push(_hash);\r\n\r\n        beneficiary.payFee.value(msg.value)();\r\n\r\n        Engraved(msg.sender, _hash);\r\n    }\r\n\r\n    function engraveDefault(bytes32 _hash,\r\n                            string _author,\r\n                            string _freeText) public payable {\r\n        require(!registry[_hash].isValid);\r\n        require(licenses[licenseIds[0]].isValid);\r\n\r\n        require(msg.value >= fee);\r\n\r\n        Entry memory entry = Entry({\r\n            author: _author,\r\n            isValid: true,\r\n            timestamp: block.timestamp,\r\n            text: _freeText,\r\n            license: licenseIds[0]\r\n        });\r\n\r\n        registry[_hash] = entry;\r\n        works.push(_hash);\r\n\r\n        beneficiary.payFee.value(msg.value)();\r\n\r\n        Engraved(msg.sender, _hash);\r\n    }\r\n\r\n    function registerLicense(string _title, string _text)\r\n    public returns (bytes32 hash) {\r\n        bytes32 textHash = keccak256(_text);\r\n\r\n        require(!licenses[textHash].isValid);\r\n\r\n        License memory license = License({\r\n            text: _text,\r\n            title: _title,\r\n            isValid: true\r\n        });\r\n\r\n        licenses[textHash] = license;\r\n        licenseIds.push(textHash);\r\n\r\n        return textHash;\r\n    }\r\n\r\n    function getHash(string _input) public pure returns (bytes32 hash) {\r\n        return keccak256(_input);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_author\",\"type\":\"string\"},{\"name\":\"_freeText\",\"type\":\"string\"}],\"name\":\"engraveDefault\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"string\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registry\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"isValid\",\"type\":\"bool\"},{\"name\":\"author\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"license\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"registerLicense\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"works\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"licenses\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_author\",\"type\":\"string\"},{\"name\":\"_freeText\",\"type\":\"string\"},{\"name\":\"_license\",\"type\":\"bytes32\"}],\"name\":\"engrave\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"licenseIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"Engraved\",\"type\":\"event\"}]","ContractName":"Ownership","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000005af3107a4000","Library":"","SwarmSource":"bzzr://87c78d5b3ae485961c4857b4a2c214fb371de26c039b44956d43c674a88aa1d6"}]}