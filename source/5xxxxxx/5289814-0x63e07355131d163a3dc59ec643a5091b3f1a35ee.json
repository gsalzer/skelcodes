{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n\r\n    function transfer(address to, uint value) returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) returns (bool ok);\r\n    function approve(address spender, uint value) returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isOwner(address _owner) internal returns (bool){\r\n        if (_owner == owner){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * BP crowdsale contract\r\n*/\r\ncontract BPToken is SafeMath, Owned, ERC20 {\r\n    string public constant name = \"Backpack Travel Token\";\r\n    string public constant symbol = \"BP\";\r\n    uint256 public constant decimals = 18;  \r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function BPToken() {\r\n        totalSupply = 2000000000 * 10 ** uint256(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    event Issue(uint16 role, address indexed to, uint256 value);\r\n\r\n    /// roles\r\n    enum Roles { Default, Angel, PrivateSale, Partner, Fans, Team, Foundation, Backup }\r\n    mapping (address => uint256) addressHold;\r\n    mapping (address => uint16) addressRole;\r\n\r\n    uint perMonthSecond = 2592000;\r\n    \r\n    /// lock rule\r\n    struct LockRule {\r\n        uint baseLockPercent;\r\n        uint startLockTime;\r\n        uint stopLockTime;\r\n        uint linearRelease;\r\n    }\r\n    mapping (uint16 => LockRule) roleRule;\r\n\r\n    /// set the rule for special role\r\n    function setRule(uint16 _role, uint _baseLockPercent, uint _startLockTime, uint _stopLockTime,uint _linearRelease) onlyOwner {\r\n        assert(_startLockTime > block.timestamp);\r\n        assert(_stopLockTime > _startLockTime);\r\n        \r\n        roleRule[_role] = LockRule({\r\n            baseLockPercent: _baseLockPercent,\r\n            startLockTime: _startLockTime,\r\n            stopLockTime: _stopLockTime,\r\n            linearRelease: _linearRelease\r\n        });\r\n    }\r\n    \r\n    /// assign BP token to another address\r\n    function assign(uint16 role, address to, uint256 amount) onlyOwner returns (bool) {\r\n        assert(role <= uint16(Roles.Backup));\r\n        assert(balances[msg.sender] > amount);\r\n        \r\n        /// one address only belong to one role\r\n        if ((addressRole[to] != uint16(Roles.Default)) && (addressRole[to] != role)) throw;\r\n\r\n        if (role != uint16(Roles.Default)) {\r\n            addressRole[to] = role;\r\n            addressHold[to] = safeAdd(addressHold[to],amount);\r\n        }\r\n\r\n        if (transfer(to,amount)) {\r\n            Issue(role, to, amount);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isRole(address who) internal returns(uint16) {\r\n        uint16 role = addressRole[who];\r\n        if (role != 0) {\r\n            return role;\r\n        }\r\n        return 100;\r\n    }\r\n    \r\n    /// calc the balance that the user shuold hold\r\n    function shouldHadBalance(address who) internal returns (uint){\r\n        uint16 currentRole = isRole(who);\r\n        if (isOwner(who) || (currentRole == 100)) {\r\n            return 0;\r\n        }\r\n        \r\n        // base lock amount \r\n        uint256 baseLockAmount = safeDiv(safeMul(addressHold[who], roleRule[currentRole].baseLockPercent),100);\r\n        \r\n        /// will not linear release\r\n        if (roleRule[currentRole].linearRelease == 0) {\r\n            if (block.timestamp < roleRule[currentRole].stopLockTime) {\r\n                return baseLockAmount;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        /// will linear release \r\n\r\n        /// now timestamp before start lock time \r\n        if (block.timestamp < roleRule[currentRole].startLockTime + perMonthSecond) {\r\n            return baseLockAmount;\r\n        }\r\n        // total lock months\r\n        uint lockMonth = safeDiv(safeSub(roleRule[currentRole].stopLockTime,roleRule[currentRole].startLockTime),perMonthSecond);\r\n        // unlock amount of every month\r\n        uint256 monthUnlockAmount = safeDiv(baseLockAmount,lockMonth);\r\n        // current timestamp passed month \r\n        uint hadPassMonth = safeDiv(safeSub(block.timestamp,roleRule[currentRole].startLockTime),perMonthSecond);\r\n\r\n        return safeSub(baseLockAmount,safeMul(hadPassMonth,monthUnlockAmount));\r\n    }\r\n\r\n    /// get balance of the special address\r\n    function balanceOf(address who) constant returns (uint) {\r\n        return balances[who];\r\n    }\r\n\r\n    /// @notice Transfer `value` BP tokens from sender's account\r\n    /// `msg.sender` to provided account address `to`.\r\n    /// @notice This function is disabled during the funding.\r\n    /// @dev Required state: Success\r\n    /// @param to The address of the recipient\r\n    /// @param value The number of BPs to transfer\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address to, uint256 value) returns (bool) {\r\n        if (safeSub(balances[msg.sender],value) < shouldHadBalance(msg.sender)) throw;\r\n\r\n        uint256 senderBalance = balances[msg.sender];\r\n        if (senderBalance >= value && value > 0) {\r\n            senderBalance = safeSub(senderBalance, value);\r\n            balances[msg.sender] = senderBalance;\r\n            balances[to] = safeAdd(balances[to], value);\r\n            Transfer(msg.sender, to, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice Transfer `value` BP tokens from sender 'from'\r\n    /// to provided account address `to`.\r\n    /// @notice This function is disabled during the funding.\r\n    /// @dev Required state: Success\r\n    /// @param from The address of the sender\r\n    /// @param to The address of the recipient\r\n    /// @param value The number of BPs to transfer\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address from, address to, uint256 value) returns (bool) {\r\n        // Abort if not in Success state.\r\n        // protect against wrapping uints\r\n        if (balances[from] >= value &&\r\n        allowed[from][msg.sender] >= value &&\r\n        safeAdd(balances[to], value) > balances[to])\r\n        {\r\n            balances[to] = safeAdd(balances[to], value);\r\n            balances[from] = safeSub(balances[from], value);\r\n            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], value);\r\n            Transfer(from, to, value);\r\n            return true;\r\n        }\r\n        else {return false;}\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `spender` to spend `value` tokens\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @param value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address spender, uint256 value) returns (bool) {\r\n        if (safeSub(balances[msg.sender],value) < shouldHadBalance(msg.sender)) throw;\r\n        \r\n        // Abort if not in Success state.\r\n        allowed[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /// @param owner The address of the account owning tokens\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address owner, address spender) constant returns (uint) {\r\n        uint allow = allowed[owner][spender];\r\n        return allow;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"role\",\"type\":\"uint16\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_role\",\"type\":\"uint16\"},{\"name\":\"_baseLockPercent\",\"type\":\"uint256\"},{\"name\":\"_startLockTime\",\"type\":\"uint256\"},{\"name\":\"_stopLockTime\",\"type\":\"uint256\"},{\"name\":\"_linearRelease\",\"type\":\"uint256\"}],\"name\":\"setRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"role\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BPToken","CompilerVersion":"v0.4.22-nightly.2018.3.16+commit.2b2527f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ab848e6f56a9b2e35b704fb0d1db777bf60c718cffbb70248dad7f46e320749"}]}