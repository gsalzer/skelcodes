{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MainFabric.sol\r\n\r\n//import \"./tokens/ERC20StandardToken.sol\";\r\n//import \"./tokens/ERC20MintableToken.sol\";\r\n//import \"./crowdsale/RefundCrowdsale.sol\";\r\n\r\ncontract MainFabric is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Contract {\r\n        address addr;\r\n        address owner;\r\n        address fabric;\r\n        string contractType;\r\n        uint256 index;\r\n    }\r\n\r\n    struct Fabric {\r\n        address addr;\r\n        address owner;\r\n        bool isActive;\r\n        uint256 index;\r\n    }\r\n\r\n    struct Admin {\r\n        address addr;\r\n        address[] contratcs;\r\n        uint256 numContratcs;\r\n        uint256 index;\r\n    }\r\n\r\n    // ---====== CONTRACTS ======---\r\n    /**\r\n     * @dev Get contract object by address\r\n     */\r\n    mapping(address => Contract) public contracts;\r\n\r\n    /**\r\n     * @dev Contracts addresses list\r\n     */\r\n    address[] public contractsAddr;\r\n\r\n    /**\r\n     * @dev Count of contracts in list\r\n     */\r\n    function numContracts() public view returns (uint256)\r\n    { return contractsAddr.length; }\r\n\r\n\r\n    // ---====== ADMINS ======---\r\n    /**\r\n     * @dev Get contract object by address\r\n     */\r\n    mapping(address => Admin) public admins;\r\n\r\n    /**\r\n     * @dev Contracts addresses list\r\n     */\r\n    address[] public adminsAddr;\r\n\r\n    /**\r\n     * @dev Count of contracts in list\r\n     */\r\n    function numAdmins() public view returns (uint256)\r\n    { return adminsAddr.length; }\r\n\r\n    function getAdminContract(address _adminAddress, uint256 _index) public view returns (\r\n        address\r\n    ) {\r\n        return (\r\n            admins[_adminAddress].contratcs[_index]\r\n        );\r\n    }\r\n\r\n    // ---====== FABRICS ======---\r\n    /**\r\n     * @dev Get fabric object by address\r\n     */\r\n    mapping(address => Fabric) public fabrics;\r\n\r\n    /**\r\n     * @dev Fabrics addresses list\r\n     */\r\n    address[] public fabricsAddr;\r\n\r\n    /**\r\n     * @dev Count of fabrics in list\r\n     */\r\n    function numFabrics() public view returns (uint256)\r\n    { return fabricsAddr.length; }\r\n\r\n    /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyFabric() {\r\n        require(fabrics[msg.sender].isActive);\r\n        _;\r\n    }\r\n\r\n    // ---====== CONSTRUCTOR ======---\r\n\r\n    function MainFabric() public {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Add fabric\r\n     * @param _address Fabric address\r\n     */\r\n    function addFabric(\r\n        address _address\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        fabrics[_address].addr = _address;\r\n        fabrics[_address].owner = msg.sender;\r\n        fabrics[_address].isActive = true;\r\n        fabrics[_address].index = fabricsAddr.push(_address) - 1;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove fabric\r\n     * @param _address Fabric address\r\n     */\r\n    function removeFabric(\r\n        address _address\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        require(fabrics[_address].isActive);\r\n        fabrics[_address].isActive = false;\r\n\r\n        uint rowToDelete = fabrics[_address].index;\r\n        address keyToMove   = fabricsAddr[fabricsAddr.length-1];\r\n        fabricsAddr[rowToDelete] = keyToMove;\r\n        fabrics[keyToMove].index = rowToDelete;\r\n        fabricsAddr.length--;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Create refund crowdsale\r\n     * @param _address Fabric address\r\n     */\r\n    function addContract(\r\n        address _address,\r\n        address _owner,\r\n        string _contractType\r\n    )\r\n    public\r\n    onlyFabric\r\n    returns (bool)\r\n    {\r\n        contracts[_address].addr = _address;\r\n        contracts[_address].owner = _owner;\r\n        contracts[_address].fabric = msg.sender;\r\n        contracts[_address].contractType = _contractType;\r\n        contracts[_address].index = contractsAddr.push(_address) - 1;\r\n\r\n        if (admins[_owner].addr != _owner) {\r\n            admins[_owner].addr = _owner;\r\n            admins[_owner].index = adminsAddr.push(_owner) - 1;\r\n        }\r\n\r\n        admins[_owner].contratcs.push(contracts[_address].addr);\r\n        admins[_owner].numContratcs++;\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addFabric\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"numContratcs\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numFabrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"fabric\",\"type\":\"address\"},{\"name\":\"contractType\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fabricsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFabric\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAdminContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fabrics\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_contractType\",\"type\":\"string\"}],\"name\":\"addContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MainFabric","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ecb16d6dfce3b2344aa2e0d1ee91c966718c22fbd9ec68259257524cd10a976b"}]}