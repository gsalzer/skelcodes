{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external;\r\n     function addPrivateSaleBuyer(address buyer,uint value) external;\r\n     function addPreSaleBuyer(address buyer,uint value) external;\r\n     function addPrivateSaleEndDate(uint256 endDate) external;\r\n     function addPreSaleEndDate(uint256 endDate) external;\r\n     function addICOEndDate(uint256 endDate) external;\r\n     function addTeamAndAdvisoryMembers(address[] members) external;\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract FeedCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 11905;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  uint256 public weiRaisedInPreICO;\r\n\r\n  uint256 TOKENS_SOLD;\r\n\r\n  uint256 maxTokensToSaleInPrivateSale;\r\n  uint256 maxTokensToSaleInPreICO;\r\n  uint256 maxTokensToSale;\r\n  \r\n  uint256 bonusInPrivateSale;\r\n\r\n  bool isCrowdsalePaused = false;\r\n  \r\n  uint256 minimumContributionInPrivatePhase;\r\n  uint256 minimumContributionInPreICO;\r\n  uint256 maximumContributionInPreICO;\r\n  uint256 maximumContributionInMainICO;\r\n  \r\n  uint256 totalDurationInDays = 112 days;\r\n  uint256 decimals = 18;\r\n  \r\n  uint256 hardCap = 46200 ether;\r\n  uint256 softCapForPreICO = 1680 ether;\r\n  \r\n  address[] tokenBuyers;\r\n  \r\n  mapping(address=>uint256) EthersSentByBuyers; \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  constructor(uint256 _startTime, address _wallet, address _tokenAddress) public \r\n  {\r\n    require(_startTime >=now);\r\n    require(_wallet != 0x0);\r\n    startTime = _startTime;  \r\n    endTime = startTime + totalDurationInDays;\r\n    require(endTime >= startTime);\r\n    owner = _wallet;\r\n    maxTokensToSaleInPrivateSale = 100000000 * 10 ** uint256(decimals);\r\n    maxTokensToSaleInPreICO = 200000000 * 10 ** uint256(decimals);\r\n    maxTokensToSale = 550000000 * 10 ** uint256(decimals);\r\n    bonusInPrivateSale = 100;\r\n    \r\n    minimumContributionInPrivatePhase = 168 ether;\r\n    minimumContributionInPreICO = 1.68 ether;\r\n    maximumContributionInPreICO = 1680 ether;\r\n    maximumContributionInMainICO = 168 ether;\r\n    token = TokenInterface(_tokenAddress);\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n    function determineBonus(uint tokens, uint amountSent, address sender) internal returns (uint256 bonus) \r\n    {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        \r\n        //private sale (30 days)\r\n        if (timeElapsedInDays <30)\r\n        {\r\n            require(amountSent>=minimumContributionInPrivatePhase);\r\n            bonus = tokens.mul(bonusInPrivateSale);\r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSale);  \r\n            token.addPrivateSaleBuyer(sender,tokens.add(bonus));\r\n        }\r\n        //break\r\n        else if (timeElapsedInDays >=30 && timeElapsedInDays <51)\r\n        {\r\n            revert();\r\n        }\r\n        //pre-ico/presale\r\n        else if (timeElapsedInDays>=51 && timeElapsedInDays<72)\r\n        {\r\n            require(amountSent>=minimumContributionInPreICO && amountSent<=maximumContributionInPreICO);\r\n            if (amountSent>=1.68 ether && amountSent < 17 ether)\r\n            {\r\n                bonus = tokens.mul(5);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); \r\n            }\r\n            else if (amountSent>=17 ether && amountSent < 169 ether)\r\n            {\r\n                bonus = tokens.mul(10);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); \r\n            }\r\n            else if (amountSent>=169 ether && amountSent < 841 ether)\r\n            {\r\n                bonus = tokens.mul(15);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); \r\n            }\r\n            else if (amountSent>=841 ether && amountSent < 1680 ether)\r\n            {\r\n                bonus = tokens.mul(20);\r\n                bonus = bonus.div(100);\r\n                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); \r\n            }\r\n            //adding to pre ico sale for soft cap refunding\r\n            if (EthersSentByBuyers[sender] == 0)\r\n            {\r\n                EthersSentByBuyers[sender] = amountSent;\r\n                tokenBuyers.push(sender);\r\n            }\r\n            else \r\n            {\r\n                EthersSentByBuyers[sender] = EthersSentByBuyers[sender].add(amountSent);\r\n            }\r\n            weiRaisedInPreICO = weiRaisedInPreICO.add(amountSent);\r\n            token.addPreSaleBuyer(sender,tokens.add(bonus));\r\n        }\r\n        //break\r\n        else if (timeElapsedInDays>=72 && timeElapsedInDays<83)\r\n        {\r\n            revert();\r\n        }\r\n        //main ico\r\n        else if(timeElapsedInDays>=83)\r\n        {\r\n            require(amountSent<=maximumContributionInMainICO);\r\n            bonus = 0;\r\n        }\r\n    }\r\n\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(validPurchase());\r\n    require(TOKENS_SOLD<maxTokensToSale && weiRaised<hardCap);\r\n   \r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens,weiAmount,beneficiary);\r\n    tokens = tokens.add(bonus);\r\n    require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.transfer(beneficiary,tokens);\r\n    \r\n    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n    \r\n    /**\r\n    * function to change the rate of tokens\r\n    * can only be called by owner wallet\r\n    **/\r\n    function setPriceRate(uint256 newPrice) public onlyOwner {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n    /**\r\n     * Remaining tokens for sale\r\n    **/ \r\n      \r\n     function remainingTokensForSale() public constant returns (uint) {\r\n         return maxTokensToSale.sub(TOKENS_SOLD);\r\n     }\r\n     \r\n     function getUnsoldTokensBack() public onlyOwner\r\n     {\r\n        uint contractTokenBalance = token.balanceOf(address(this));\r\n        require(contractTokenBalance>0);\r\n        token.transfer(owner,contractTokenBalance);\r\n     }\r\n     \r\n     /**\r\n      * Refund the tokens to buyers of presale if soft cap not reached\r\n      **/ \r\n     function RefundToBuyers() public payable onlyOwner {\r\n         //require(now > startTime.add(72 days) );\r\n         require(weiRaised<softCapForPreICO);\r\n         require(msg.value>=weiRaisedInPreICO);\r\n         for (uint i=0;i<tokenBuyers.length;i++)\r\n         {\r\n             uint etherAmount = EthersSentByBuyers[tokenBuyers[i]];\r\n             if (etherAmount>0)\r\n             {\r\n                tokenBuyers[i].transfer(etherAmount);\r\n                EthersSentByBuyers[tokenBuyers[i]] = 0;\r\n             }\r\n         }\r\n     }\r\n     /**\r\n      * Add the team and advisory members\r\n      **/ \r\n     function addTeamAndAdvisoryMembers(address[] members) public onlyOwner {\r\n         token.addTeamAndAdvisoryMembers(members);\r\n     }\r\n     \r\n     /**\r\n      * view the private sale end date and time\r\n      **/\r\n     function getPrivateSaleEndDate() public view onlyOwner returns (uint) {\r\n         return startTime.add(30 days);\r\n     }\r\n     \r\n     /**\r\n      * view the presale end date and time\r\n      **/\r\n     function getPreSaleEndDate() public view onlyOwner returns (uint) {\r\n          return startTime.add(72 days);\r\n     }\r\n     \r\n     /**\r\n      * view the ICO end date and time\r\n      **/\r\n     function getICOEndDate() public view onlyOwner returns (uint) {\r\n          return startTime.add(112 days);\r\n     }\r\n     \r\n     /**\r\n      * set the private sale end date and time\r\n      **/\r\n      function setPrivateSaleEndDate(uint256 timestamp) public onlyOwner  {\r\n          token.addPrivateSaleEndDate(timestamp);\r\n      }\r\n      \r\n     /**\r\n      * set the pre sale end date and time\r\n      **/\r\n       function setPreSaleEndDate(uint256 timestamp) public onlyOwner {\r\n           token.addPreSaleEndDate(timestamp);\r\n       }\r\n       \r\n     /**\r\n      * set the ICO end date and time\r\n      **/\r\n        function setICOEndDate(uint timestamp) public onlyOwner {\r\n           token.addICOEndDate(timestamp);\r\n       }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUnsoldTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedInPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getICOEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPreSaleEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setICOEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrivateSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"addTeamAndAdvisoryMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPrivateSaleEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"RefundToBuyers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FeedCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b1c6a00000000000000000000000000ed64942a47ade01406854c6b2e010dd31c8d3a6f00000000000000000000000041f615e24fabd2b097a320e9e6c1f448cb40521c","Library":"","SwarmSource":"bzzr://91d95e32dce420ecf4608c7987c48a7fce660a8c737c8a652c481d814a96895a"}]}