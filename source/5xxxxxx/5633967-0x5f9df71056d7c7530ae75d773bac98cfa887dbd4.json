{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n//***********Pausible\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract Crowdsaleable is Pausable {\r\n  event PauseCrowdsale();\r\n  event UnpauseCrowdsale();\r\n\r\n  bool public crowdsalePaused = true;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenCrowdsaleNotPaused() {\r\n    require(!crowdsalePaused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenCrowdsalePaused {\r\n    require(crowdsalePaused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pauseCrowdsale() public onlyOwner whenCrowdsaleNotPaused returns (bool) {\r\n    crowdsalePaused = true;\r\n    PauseCrowdsale();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpauseCrowdsale() public onlyOwner whenCrowdsalePaused returns (bool) {\r\n    crowdsalePaused = false;\r\n    UnpauseCrowdsale();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Nihilum is Crowdsaleable {\r\n\r\n\r\n\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n    \r\n    \r\n    uint256 public _tokenPrice;\r\n    uint256 public _minimumTokens;\r\n    bool public _allowManualTokensGeneration;\r\n    uint256 public totalSupply;\r\n    uint public totalShareholders;\r\n\r\n    uint256 private lastUnpaidIteration;\r\n\r\n    mapping (address => bool) registeredShareholders;\r\n    mapping (uint => address) shareholders;\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n\r\n    uint256 public totalNihilum;\r\n    struct Account {\r\n        uint256 balance;\r\n        uint256 lastNihilum;\r\n        bool isClaiming;\r\n        bool blacklisted;\r\n        bool whitelisted;\r\n    }\r\n    mapping (address => Account) accounts;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function Nihilum() public {\r\n        balanceOf[msg.sender] = 0;\r\n        name = \"Nihilum\";\r\n        symbol = \"NH\";\r\n        decimals = 0;\r\n        _tokenPrice = 0.0024 ether;\r\n        _minimumTokens = 50;\r\n        _allowManualTokensGeneration = true;\r\n        wallet = owner;\r\n        owner = msg.sender;\r\n        totalShareholders = 0;\r\n        lastUnpaidIteration = 1;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        if (balanceOf[msg.sender] < _value) return false;              // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return false;    // Check for overflows\r\n        if (_to == owner || _to == address(this)) return false;         // makes it illegal to send tokens to owner or this contract\r\n        _transfer(msg.sender, _to, _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                        // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                               // Add the same to the recipient\r\n\r\n        /* Adding to shareholders count if tokens spent from owner to others */\r\n        if (msg.sender == owner && _to != owner) {\r\n            totalSupply += _value;\r\n        }\r\n        /* Remove from shareholders count if tokens spent from holder to owner */\r\n        if (msg.sender != owner && _to == owner) {\r\n            totalSupply = totalSupply.sub(_value);\r\n        }\r\n\r\n        if (owner == _to) {\r\n            // sender is owner\r\n        } else {\r\n            insertShareholder(_to);\r\n        }\r\n\r\n        /* Notify anyone listening that this transfer took place */\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(!accounts[_from].blacklisted);\r\n        require(!accounts[_to].blacklisted);\r\n        require(_to != address(0));\r\n        require(_value <= accounts[_from].balance);\r\n        require(accounts[_to].balance + _value > accounts[_to].balance);\r\n \r\n        var fromOwing = nihilumBalanceOf(_from);\r\n        var toOwing = nihilumBalanceOf(_to);\r\n        require(fromOwing <= 0 && toOwing <= 0);\r\n \r\n        accounts[_from].balance = accounts[_from].balance.sub(_value);\r\n        \r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n \r\n        accounts[_to].lastNihilum = totalNihilum;//accounts[_from].lastNihilum;\r\n \r\n        //Transfer(_from, _to, _value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function addTokens(uint256 numTokens) public onlyOwner {\r\n        if (_allowManualTokensGeneration) {\r\n            balanceOf[msg.sender] += numTokens;\r\n            accounts[msg.sender].balance = accounts[msg.sender].balance.add(numTokens);\r\n            Transfer(0, msg.sender, numTokens);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function blacklist(address person) public onlyOwner {\r\n        require(person != owner);\r\n        balanceOf[person] = 0;\r\n        accounts[person].balance = 0;\r\n        accounts[person].lastNihilum = totalNihilum;\r\n        accounts[person].blacklisted = true;\r\n    }\r\n\r\n    function () external payable {\r\n      if (!crowdsalePaused) {\r\n          buyTokens();\r\n          } else {\r\n              PayNihilumToContract();\r\n              }\r\n    }\r\n\r\n\r\n        function whitelist(address userAddress) onlyOwner {\r\n            accounts[userAddress].whitelisted = true;            \r\n    }\r\n\r\n    /* Buy Token 1 token for x ether */\r\n    function buyTokens() public whenCrowdsaleNotPaused payable {\r\n        require(!accounts[msg.sender].blacklisted);\r\n        require(msg.value > 0);\r\n        require(msg.value >= _tokenPrice);\r\n        require(msg.value % _tokenPrice == 0);\r\n        var numTokens = msg.value / _tokenPrice;\r\n        require(numTokens >= _minimumTokens);\r\n        balanceOf[msg.sender] += numTokens;\r\n        Transfer(0, msg.sender, numTokens);\r\n        wallet.transfer(msg.value);\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.add(numTokens);\r\n        insertShareholder(msg.sender);\r\n        if (msg.sender != owner) {\r\n            totalSupply += numTokens;\r\n        }\r\n    }\r\n\r\n    function payNihilum() public onlyOwner {\r\n        if (this.balance > 0 && totalShareholders > 0) {\r\n            for (uint i = lastUnpaidIteration; i <= totalShareholders; i++) {\r\n                uint256 currentBalance = balanceOf[shareholders[i]];\r\n                lastUnpaidIteration = i;\r\n                if (currentBalance > 0 && nihilumBalanceOf(shareholders[i]) > 0 && !accounts[shareholders[i]].isClaiming && msg.gas > 2000) {\r\n                    accounts[shareholders[i]].isClaiming = true;\r\n                    shareholders[i].transfer(nihilumBalanceOf(shareholders[i]));\r\n                    accounts[shareholders[i]].lastNihilum = totalNihilum;\r\n                    accounts[shareholders[i]].isClaiming = false;\r\n                }\r\n            }\r\n            lastUnpaidIteration = 1;\r\n        }\r\n    }\r\n\r\n    function nihilumBalanceOf(address account) public constant returns (uint256) {\r\n        var newNihilum = totalNihilum.sub(accounts[account].lastNihilum);\r\n        var product = accounts[account].balance.mul(newNihilum);\r\n        if (totalSupply <= 0) return 0;\r\n        if (account == owner) return 0;\r\n        return product.div(totalSupply);\r\n    }\r\n\r\n    function claimNihilum() public {\r\n        require(!accounts[msg.sender].blacklisted);\r\n        var owing = nihilumBalanceOf(msg.sender);\r\n        if (owing > 0 && !accounts[msg.sender].isClaiming) {\r\n            accounts[msg.sender].isClaiming = true;\r\n            accounts[msg.sender].lastNihilum = totalNihilum;\r\n            msg.sender.transfer(owing);\r\n            accounts[msg.sender].isClaiming = false;\r\n        }\r\n    }\r\n\r\n    function PayNihilumToContract() public onlyOwner payable {\r\n        totalNihilum = totalNihilum.add(msg.value);\r\n    }\r\n\r\n        function PayToContract() public onlyOwner payable {\r\n        \r\n    }\r\n\r\n    function ChangeTokenPrice(uint256 newPrice) public onlyOwner {\r\n        _tokenPrice = newPrice;\r\n    }\r\n\r\n    function insertShareholder(address _shareholder) internal returns (bool) {\r\n        if (registeredShareholders[_shareholder] == true) {\r\n\r\n        } else {\r\n            totalShareholders += 1;\r\n            shareholders[totalShareholders] = _shareholder;\r\n            registeredShareholders[_shareholder] = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_allowManualTokensGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ChangeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNihilum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayNihilumToContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayToContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimNihilum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payNihilum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nihilumBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"person\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseCrowdsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseCrowdsale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Nihilum","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff7d90f00fee8f069af4c4ca1c62d78527586965d79da97b284565b4ee876075"}]}