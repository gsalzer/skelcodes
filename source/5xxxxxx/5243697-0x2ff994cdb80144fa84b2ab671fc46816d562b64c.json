{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath for performing valid mathematics.\r\n */\r\nlibrary SafeMath {\r\n \r\n  function Mul(uint a, uint b) internal pure returns (uint) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function Div(uint a, uint b) internal pure returns (uint) {\r\n    //assert(b > 0); // Solidity automatically throws when Dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function Sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  } \r\n\r\n  function Add(uint a, uint b) internal pure returns (uint) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  } \r\n}\r\n\r\n/**\r\n* @title Contract that will work with ERC223 tokens.\r\n*/\r\ncontract ERC223ReceivingContract { \r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * Contract \"Ownable\"\r\n * Purpose: Defines Owner for contract and provide functionality to transfer ownership to another account\r\n */\r\ncontract Ownable {\r\n\r\n  //owner variable to store contract owner account\r\n  address public owner;\r\n  //add another owner\r\n  address deployer;\r\n\r\n  //Constructor for the contract to store owner's account on deployement\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n    deployer = msg.sender;\r\n  }\r\n\r\n  //modifier to check transaction initiator is only owner\r\n  modifier onlyOwner() {\r\n    require (msg.sender == owner || msg.sender == deployer);\r\n      _;\r\n  }\r\n\r\n  //ownership can be transferred to provided newOwner. Function can only be initiated by contract owner's account\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require (_newOwner != address(0));\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint256 private pauseTime;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    //Record the pausing time only if any startTime is defined\r\n    //in other cases, it will work as a toggle switch only\r\n    if(startTime > 0){\r\n        pauseTime = now;\r\n    }\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    //if endTime is defined, only then proceed with its updation\r\n    if(endTime > 0 && pauseTime > startTime){\r\n        uint256 pauseDuration = pauseTime - startTime;\r\n        endTime = endTime + pauseDuration;\r\n    }\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is Pausable {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public view returns (uint256 value);\r\n    function transfer(address _to, uint256 _value) public returns (bool _success);\r\n    function allowance(address owner, address spender) public view returns (uint256 _value);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool _success);\r\n    function approve(address spender, uint256 value) public returns (bool _success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\ncontract ECHO is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    //The name of the  token\r\n    string public constant name = \"ECHO token\";\r\n    //The token symbol\r\n    string public constant symbol = \"ECHO\";\r\n    //To denote the locking on transfer of tokens among token holders\r\n    bool public locked;\r\n    //The precision used in the calculations in contract\r\n    uint8 public constant decimals = 18;\r\n    //number of tokens available for 1 eth\r\n    uint256 public constant PRICE=4000;\r\n    //maximum number of tokens\r\n    uint256 constant MAXCAP = 322500000e18;\r\n    //maximum number of tokens available for Sale\r\n    uint256 constant HARD_CAP = 8e7*1e18;\r\n    //the account which will receive all balance\r\n    address ethCollector;\r\n    //to save total number of ethers received\r\n    uint256 public totalWeiReceived;\r\n    //type of sale: 1=presale, 2=ICO\r\n    uint256 public saleType;\r\n    \r\n\r\n    //Mapping to relate owner and spender to the tokens allowed to transfer from owner\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    //Mapping to relate number of token to the account\r\n    mapping(address => uint256) balances;\r\n    \r\n    function isSaleRunning() public view returns (bool){\r\n        bool status = false;\r\n        // 1522972800 = 6 april 2018\r\n        // 1525392000 = 4 may 2018\r\n        // 1527811200 = 1 june 2018\r\n        // 1531094400 = 9 july 2018\r\n        \r\n        //Presale is going on\r\n        if(now >= startTime  && now <= 1525392000){\r\n            //Aprill 6 to before 4 may\r\n            status = true;\r\n        }\r\n    \r\n        //ICO is going on\r\n        if(now >= 1527811200 && now <= endTime){\r\n            // june 1 to before july 9\r\n            status = true;\r\n        }\r\n        return status;\r\n    }\r\n\r\n    function countDownToEndCrowdsale() public view returns(uint256){\r\n        assert(isSaleRunning());\r\n        return endTime.Sub(now);\r\n    }\r\n    //events\r\n    event StateChanged(bool);\r\n\r\n    function ECHO() public{\r\n        totalSupply = 0;\r\n        startTime = 1522972800; //April 6, 2018 GMT\r\n        endTime = 1531094400; //9 july, 2018 GMT\r\n        locked = true;\r\n        setEthCollector(0xc8522E0444a94Ec9a5A08242765e1196DF1EC6B5);\r\n    }\r\n    //To handle ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnlocked() { \r\n        require (!locked); \r\n        _; \r\n    }\r\n\r\n    modifier validTimeframe(){\r\n        require(isSaleRunning());\r\n        _;\r\n    }\r\n    \r\n    function setEthCollector(address _ethCollector) public onlyOwner{\r\n        require(_ethCollector != address(0));\r\n        ethCollector = _ethCollector;\r\n    }\r\n\r\n    //To enable transfer of tokens\r\n    function unlockTransfer() external onlyOwner{\r\n        locked = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the address being passed belongs to a contract\r\n    *\r\n    * @param _address The address which you want to verify\r\n    * @return A bool specifying if the address is that of contract or not\r\n    */\r\n    function isContract(address _address) private view returns(bool _isContract){\r\n        assert(_address != address(0) );\r\n        uint length;\r\n        //inline assembly code to check the length of address\r\n        assembly{\r\n            length := extcodesize(_address)\r\n        }\r\n        if(length > 0){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Check balance of given account address\r\n    *\r\n    * @param _owner The address account whose balance you want to know\r\n    * @return balance of the account\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 _value){\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer sender's token to a given address\r\n    *\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @return A bool if the transfer was a success or not\r\n    */\r\n    function transfer(address _to, uint _value) onlyUnlocked onlyPayloadSize(2 * 32) public returns(bool _success) {\r\n        require( _to != address(0) );\r\n        bytes memory _empty;\r\n        assert((balances[msg.sender] >= _value) && _value > 0 && _to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].Sub(_value);\r\n        balances[_to] = balances[_to].Add(_value);\r\n        if(isContract(_to)){\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens to an address given by sender. To make ERC223 compliant\r\n    *\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @param _data additional information of account from where to transfer from\r\n    * @return A bool if the transfer was a success or not\r\n    */\r\n    function transfer(address _to, uint _value, bytes _data) onlyUnlocked onlyPayloadSize(3 * 32) public returns(bool _success) {\r\n        assert((balances[msg.sender] >= _value) && _value > 0 && _to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].Sub(_value);\r\n        balances[_to] = balances[_to].Add(_value);\r\n        if(isContract(_to)){\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n        \r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another, for ERC20.\r\n    *\r\n    * @param _from The address which you want to send tokens from\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value the amount of tokens to be transferred\r\n    * @return A bool if the transfer was a success or not \r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3*32) public onlyUnlocked returns (bool){\r\n        bytes memory _empty;\r\n        assert((_value > 0)\r\n           && (_to != address(0))\r\n           && (_from != address(0))\r\n           && (allowed[_from][msg.sender] >= _value ));\r\n       balances[_from] = balances[_from].Sub(_value);\r\n       balances[_to] = balances[_to].Add(_value);\r\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].Sub(_value);\r\n       if(isContract(_to)){\r\n           ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n           receiver.tokenFallback(msg.sender, _value, _empty);\r\n       }\r\n       emit Transfer(_from, _to, _value);\r\n       return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner has allowed a spender to recieve from owner.\r\n    *\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender to spend.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool){\r\n        if( _value > 0 && (balances[msg.sender] >= _value)){\r\n            allowed[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function mintAndTransfer(address beneficiary, uint256 tokensToBeTransferred) public validTimeframe onlyOwner {\r\n        require(totalSupply.Add(tokensToBeTransferred) <= MAXCAP);\r\n        totalSupply = totalSupply.Add(tokensToBeTransferred);\r\n        balances[beneficiary] = balances[beneficiary].Add(tokensToBeTransferred);\r\n        emit Transfer(0x0, beneficiary ,tokensToBeTransferred);\r\n    }\r\n\r\n    function getBonus(uint256 _tokensBought)public view returns(uint256){\r\n        uint256 bonus = 0;\r\n        /*April 6- April 13 -- 20% \r\n        April 14- April 21 -- 10% \r\n        April 22 - May 3-- 5% \r\n        \r\n        ICO BONUS WEEKS: \r\n        June 1 - June 9 -- 20% \r\n        June 10 - June 17 -- 10% \r\n        June 18 - June 30 -- 5% \r\n        July 1 - July 9 -- No bonus \r\n        */\r\n        // 1522972800 = 6 april 2018\r\n        // 1523577600 = 13 April 2018\r\n        // 1523664000 = 14 April 2018\r\n        // 1524268800 = 21 April 2018\r\n        // 1524355200 = 22 April 2018\r\n        // 1525305600 = 3 April 2018\r\n        // 1525392000 = 4 may 2018\r\n        // 1527811200 = 1 june 2018\r\n        // 1528502400 = 9 june 2018\r\n        // 1528588800 = 10 june 2018\r\n        // 1529193600 = 17 june 2018\r\n        // 1529280000 = 18 june 2018\r\n        // 1530316800 = 30 june 2018\r\n        // 1530403200 = 1 july 2018\r\n        // 1531094400 = 9 july 2018\r\n        if(saleType == 1){\r\n            //Presale is going on\r\n            if(now >= 1522972800 && now < 1523664000){\r\n                //6 april to before 14 april\r\n                bonus = _tokensBought*20/100;\r\n            }\r\n            else if(now >= 1523664000 && now < 1524355200){\r\n                //14 april to before 22 april\r\n                bonus = _tokensBought*10/100;\r\n            }\r\n            else if(now >= 1524355200 && now < 1525392000){\r\n                //Aprill 22 to before 4 may\r\n                bonus = _tokensBought*5/100;\r\n            }\r\n        }\r\n        if(saleType == 2){\r\n            //ICO is going on\r\n            if(now >= 1527811200 && now < 1528588800){\r\n                // 1 june to before 10 june\r\n                bonus = _tokensBought*20/100;\r\n            }\r\n            else if(now >= 1528588800 && now < 1529280000){\r\n                // june 10 to before june 18\r\n                bonus = _tokensBought*10/100;\r\n            }\r\n            else if(now >= 1529280000 && now < 1530403200){\r\n                // june 18 to before july 1\r\n                bonus = _tokensBought*5/100;\r\n            }\r\n        }\r\n        return bonus;\r\n    }\r\n    function buyTokens(address beneficiary) internal validTimeframe {\r\n        uint256 tokensBought = msg.value.Mul(PRICE);\r\n        tokensBought = tokensBought.Add(getBonus(tokensBought));\r\n        balances[beneficiary] = balances[beneficiary].Add(tokensBought);\r\n        totalSupply = totalSupply.Add(tokensBought);\r\n       \r\n        assert(totalSupply <= HARD_CAP);\r\n        totalWeiReceived = totalWeiReceived.Add(msg.value);\r\n        ethCollector.transfer(msg.value);\r\n        emit Transfer(0x0, beneficiary, tokensBought);\r\n    }\r\n\r\n    /**\r\n    * Finalize the crowdsale\r\n    */\r\n    function finalize() public onlyUnlocked onlyOwner {\r\n        //Make sure Sale is not running\r\n        //If sale is running, then check if the hard cap has been reached or not\r\n        assert(!isSaleRunning() || (HARD_CAP.Sub(totalSupply)) <= 1e18);\r\n        endTime = now;\r\n\r\n        //enable transferring of tokens among token holders\r\n        locked = false;\r\n        //Emit event when crowdsale state changes\r\n        emit StateChanged(true);\r\n    }\r\n\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Failsafe drain\r\n    */\r\n    function drain() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokensToBeTransferred\",\"type\":\"uint256\"}],\"name\":\"mintAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countDownToEndCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensBought\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethCollector\",\"type\":\"address\"}],\"name\":\"setEthCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"ECHO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://be0469570b4164ff3359b131945d2daf0490a541b77e993031e6e9954b74e93e"}]}