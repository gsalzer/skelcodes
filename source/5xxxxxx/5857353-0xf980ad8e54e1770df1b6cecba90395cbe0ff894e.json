{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n\r\n\r\n    // Tipbot, Crypto For Everyone\r\n\r\n\r\n\r\n    // Contract Owner - Tipbot - 0x72BA45c9e729f13CD2F6AA4B410f83bE1410E982\r\n\r\n\r\n\r\n    // Official Website - http://www.Tipbot.io\r\n\r\n    // Official Twitter - http://www.twitter.com/officialtipbot\r\n\r\n    // Official Reddit - http://www.reddit.com/r/officialtipbot\r\n\r\n    // Official Telegram - http://www.t.me/officialtipbot/\r\n\r\n\r\n\r\n    // Contract Developed By - Tipbot LTD\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // assert(b > 0); \r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); \r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n\r\n\r\n\r\n\r\n    function Ownable() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        require(newOwner != address(0));\r\n\r\n        owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract tipbotreg {\r\n\r\n    uint256 public stakeCommence;\r\n\r\n    uint256 public stakeMinAge;\r\n\r\n    uint256 public stakeMaxAge;\r\n\r\n    function mint() public returns (bool);\r\n\r\n    function coinAge() public payable returns (uint256);\r\n\r\n    function annualInterest() public view returns (uint256);\r\n\r\n    event Mint(address indexed _address, uint _reward);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // Initial Configuration\r\n\r\n \r\n\r\n \r\n\r\ncontract tipbot is ERC20,tipbotreg,Ownable {\r\n\r\n        using SafeMath for uint256;\r\n\r\n\r\n\r\n        string public name = \"tipbot\";\r\n\r\n        string public symbol = \"TIP\";\r\n\r\n        \r\n\r\n        uint public decimals = 18;\r\n\r\n\r\n\r\n        \r\n\r\n        uint public stakeCommence; //Proof Of Stake Start Timestamp\r\n\r\n        \r\n\r\n        uint public stakeMinAge = 3 days; // Minimum Age For Coin Age: 3 days\r\n\r\n        \r\n\r\n        uint public stakeMaxAge = 90 days; // Maximimum age for coin age: 90 days\r\n\r\n        \r\n\r\n        uint public maxMintPoS = 10**17; // Proof Of Stake default interest equates to 10% annually\r\n\r\n        \r\n\r\n        uint public chainStartTime; // The timestamp in which the chain starts\r\n\r\n        \r\n\r\n        uint public chainStartBlock; //The block number in which the chain starts\r\n\r\n\r\n\r\n        uint public totalSupply;\r\n\r\n        \r\n\r\n        uint public maxTIPSupply;\r\n\r\n        \r\n\r\n        uint public initialTIPsupply;\r\n\r\n\r\n\r\n        struct transferInStruct{\r\n\r\n        \r\n\r\n        uint256 amount;\r\n\r\n        \r\n\r\n        uint64 time;\r\n\r\n    }\r\n\r\n\r\n\r\n        mapping(address => uint256) balances;\r\n\r\n        \r\n\r\n        mapping(address => mapping (address => uint256)) allowed;\r\n\r\n        \r\n\r\n        mapping(address => transferInStruct[]) transferIns;\r\n\r\n\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n\r\n\r\n   \r\n\r\n   \r\n\r\n   modifier onlyPayloadSize(uint size) {\r\n\r\n        require(msg.data.length >= size + 4);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier canTIPMint() {\r\n\r\n        require(totalSupply < maxTIPSupply);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function tipbot() public {\r\n\r\n    \r\n\r\n    // 104 Billion Token Initial Supply\r\n\r\n        initialTIPsupply = 104000000000000000000000000000; \r\n\r\n        \r\n\r\n    // 375 Billion Maximum Token Supply.\r\n\r\n        maxTIPSupply = 375000000000000000000000000000; \r\n\r\n        \r\n\r\n        chainStartTime = block.timestamp;\r\n\r\n        chainStartBlock = block.number;\r\n\r\n\r\n\r\n        balances[msg.sender] = initialTIPsupply;\r\n\r\n        totalSupply = initialTIPsupply;\r\n\r\n    }\r\n\r\n    \r\n\r\n // Transfer Function\r\n\r\n \r\n\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n\r\n        if(msg.sender == _to) return mint();\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n\r\n        uint64 _now = uint64(block.timestamp);\r\n\r\n        transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),_now));\r\n\r\n        transferIns[_to].push(transferInStruct(uint256(_value),_now));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n // Balance Function\r\n\r\n \r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n\r\n        return balances[_owner];\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n // Transfer Function\r\n\r\n \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n\r\n        require(_to != address(0));\r\n\r\n\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        if(transferIns[_from].length > 0) delete transferIns[_from];\r\n\r\n        uint64 _now = uint64(block.timestamp);\r\n\r\n        transferIns[_from].push(transferInStruct(uint256(balances[_from]),_now));\r\n\r\n        transferIns[_to].push(transferInStruct(uint256(_value),_now));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n// PoS must be manually triggered by the contract creator using a UNIX timestamp. It is advisable to set the timestamp 15 minutes ahead of time to prevent failure\r\n\r\n\r\n\r\n    function ownerSetStakeCommence(uint timestamp) public onlyOwner {\r\n\r\n        require((stakeCommence <= 0) && (timestamp >= chainStartTime));\r\n\r\n        stakeCommence = timestamp;\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n//approve function\r\n\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\r\n        return allowed[_owner][_spender];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n // Mint Function\r\n\r\n \r\n\r\n \r\n\r\n    function mint() public canTIPMint returns (bool) {\r\n\r\n        if(balances[msg.sender] <= 0) return false;\r\n\r\n        if(transferIns[msg.sender].length <= 0) return false;\r\n\r\n\r\n\r\n        uint reward = getPoSReward(msg.sender);\r\n\r\n        if(reward <= 0) return false;\r\n\r\n\r\n\r\n        totalSupply = totalSupply.add(reward);\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n\r\n        delete transferIns[msg.sender];\r\n\r\n        transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),uint64(block.timestamp)));\r\n\r\n\r\n\r\n        emit Mint(msg.sender, reward);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getBlockNumber() public view returns (uint blockNumber) {\r\n\r\n        blockNumber = block.number.sub(chainStartBlock);\r\n\r\n    }\r\n\r\n    \r\n\r\n// Coin Age Function\r\n\r\n\r\n\r\n    function coinAge() public payable returns (uint myCoinAge) {\r\n\r\n        myCoinAge = getCoinAge(msg.sender,block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n// Annual Interest  Function\r\n\r\n    function annualInterest() public view returns(uint interest) {\r\n\r\n        uint _now = block.timestamp;\r\n\r\n        interest = maxMintPoS;\r\n\r\n        if((_now.sub(stakeCommence)).div(365 days) == 0) {\r\n\r\n            interest = (770 * maxMintPoS).div(100);\r\n\r\n        } else if((_now.sub(stakeCommence)).div(365 days) == 1){\r\n\r\n            interest = (435 * maxMintPoS).div(100);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n// Stake Reward Function\r\n\r\n\r\n\r\n    function getPoSReward(address _address) internal view returns (uint) {\r\n\r\n        require( (block.timestamp >= stakeCommence) && (stakeCommence > 0) );\r\n\r\n\r\n\r\n        uint _now = block.timestamp;\r\n\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n\r\n        if(_coinAge <= 0) return 0;\r\n\r\n\r\n\r\n        uint interest = maxMintPoS;\r\n\r\n       \r\n\r\n        if((_now.sub(stakeCommence)).div(365 days) == 0) {\r\n\r\n            interest = (770 * maxMintPoS).div(100);\r\n\r\n        } else if((_now.sub(stakeCommence)).div(365 days) == 1){\r\n\r\n            // 2nd year effective annual interest rate is 50%\r\n\r\n            interest = (435 * maxMintPoS).div(100);\r\n\r\n        }\r\n\r\n\r\n\r\n        return (_coinAge * interest).div(365 * (10**decimals));\r\n\r\n    }\r\n\r\n\r\n\r\n    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\r\n\r\n        if(transferIns[_address].length <= 0) return 0;\r\n\r\n\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++){\r\n\r\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\r\n\r\n\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n\r\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\r\n\r\n\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n // Batch Transfer Function\r\n\r\n \r\n\r\n    function batchTransfer(address[] _recipients, uint[] _values) public onlyOwner returns (bool) {\r\n\r\n        require( _recipients.length > 0 && _recipients.length == _values.length);\r\n\r\n\r\n\r\n        uint total = 0;\r\n\r\n        for(uint i = 0; i < _values.length; i++){\r\n\r\n            total = total.add(_values[i]);\r\n\r\n        }\r\n\r\n        require(total <= balances[msg.sender]);\r\n\r\n\r\n\r\n        uint64 _now = uint64(block.timestamp);\r\n\r\n        for(uint j = 0; j < _recipients.length; j++){\r\n\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n\r\n            transferIns[_recipients[j]].push(transferInStruct(uint256(_values[j]),_now));\r\n\r\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\r\n\r\n        }\r\n\r\n\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n\r\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n\r\n        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),_now));\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n// Batch Token Function\r\n\r\n\r\n\r\n        function TokenBurn(uint _value) public onlyOwner {\r\n\r\n        require(_value > 0);\r\n\r\n\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        delete transferIns[msg.sender];\r\n\r\n        transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),uint64(block.timestamp)));\r\n\r\n\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        initialTIPsupply = initialTIPsupply.sub(_value);\r\n\r\n        maxTIPSupply = maxTIPSupply.sub(_value*10);\r\n\r\n\r\n\r\n        emit Burn(msg.sender, _value);\r\n\r\n    }\r\n\r\n   \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintPoS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeCommence\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTIPSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTIPsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ownerSetStakeCommence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TokenBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"tipbot","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73fcd32d0d72da0ee87db00c0ee3a851e8006a9043a4ccb070b7154e768176c0"}]}