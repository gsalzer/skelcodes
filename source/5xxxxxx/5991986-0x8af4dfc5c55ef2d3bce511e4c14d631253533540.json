{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a && c >= b);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract EtherDEX {\r\n    using SafeMath for uint;\r\n\r\n    address public admin; //the admin address\r\n    address public feeAccount; //the account that will receive fees\r\n    uint public feeMake; //percentage times (1 ether)\r\n    uint public feeTake; //percentage times (1 ether)\r\n    mapping(address => mapping(address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    mapping(address => mapping(bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\r\n    mapping(address => mapping(bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\r\n\r\n    address public previousContract;\r\n    address public nextContract;\r\n    bool public isContractDeprecated;\r\n    uint public contractVersion;\r\n\r\n    event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user);\r\n    event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\r\n    event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\r\n    event Deposit(address token, address user, uint amount, uint balance);\r\n    event Withdraw(address token, address user, uint amount, uint balance);\r\n    event FundsMigrated(address user);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    constructor(address admin_, address feeAccount_, uint feeMake_, uint feeTake_, address _previousContract) public {\r\n        admin = admin_;\r\n        feeAccount = feeAccount_;\r\n        feeMake = feeMake_;\r\n        feeTake = feeTake_;\r\n        previousContract = _previousContract;\r\n        isContractDeprecated = false;\r\n\r\n        //count new contract version if it's not the first\r\n        if (previousContract != address(0)) {\r\n            contractVersion = EtherDEX(previousContract).contractVersion() + 1;\r\n        } else {\r\n            contractVersion = 1;\r\n        }\r\n    }\r\n\r\n    function() public payable {\r\n        revert(\"Cannot send ETH directly to the Contract\");\r\n    }\r\n\r\n    function changeAdmin(address admin_) public onlyAdmin {\r\n        admin = admin_;\r\n    }\r\n\r\n    function changeFeeAccount(address feeAccount_) public onlyAdmin {\r\n        require(feeAccount_ != address(0));\r\n        feeAccount = feeAccount_;\r\n    }\r\n\r\n    function changeFeeMake(uint feeMake_) public onlyAdmin {\r\n        if (feeMake_ > feeMake) revert(\"New fee cannot be higher than the old one\");\r\n        feeMake = feeMake_;\r\n    }\r\n\r\n    function changeFeeTake(uint feeTake_) public onlyAdmin {\r\n        if (feeTake_ > feeTake) revert(\"New fee cannot be higher than the old one\");\r\n        feeTake = feeTake_;\r\n    }\r\n\r\n    function deprecate(bool deprecated_, address nextContract_) public onlyAdmin {\r\n        isContractDeprecated = deprecated_;\r\n        nextContract = nextContract_;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        tokens[0][msg.sender] = SafeMath.add(tokens[0][msg.sender], msg.value);\r\n        emit Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\r\n    }\r\n\r\n    function withdraw(uint amount) public {\r\n        if (tokens[0][msg.sender] < amount) revert(\"Cannot withdraw more than you have\");\r\n        tokens[0][msg.sender] = SafeMath.sub(tokens[0][msg.sender], amount);\r\n        msg.sender.transfer(amount);\r\n        //or .send() and check if https://ethereum.stackexchange.com/a/38642\r\n        emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n    }\r\n\r\n    function depositToken(address token, uint amount) public {\r\n        //remember to call ERC20Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        if (token == 0) revert(\"Cannot deposit ETH with depositToken method\");\r\n        if (!ERC20(token).transferFrom(msg.sender, this, amount)) revert(\"You didn't call approve method on Token contract\");\r\n        tokens[token][msg.sender] = SafeMath.add(tokens[token][msg.sender], amount);\r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address token, uint amount) public {\r\n        if (token == 0) revert(\"Cannot withdraw ETH with withdrawToken method\");\r\n        if (tokens[token][msg.sender] < amount) revert(\"Cannot withdraw more than you have\");\r\n        tokens[token][msg.sender] = SafeMath.sub(tokens[token][msg.sender], amount);\r\n        if (!ERC20(token).transfer(msg.sender, amount)) revert(\"Error while transfering tokens\");\r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    function balanceOf(address token, address user) public view returns (uint) {\r\n        return tokens[token][user];\r\n    }\r\n\r\n    function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        orders[msg.sender][hash] = true;\r\n        emit Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\r\n    }\r\n\r\n    function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\r\n        //amount is in amountGet terms\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        if (!(\r\n        (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) == user) &&\r\n        block.number <= expires &&\r\n        SafeMath.add(orderFills[user][hash], amount) <= amountGet\r\n        ))  revert(\"Validation error or order expired or not enough volume to trade\");\r\n        tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\r\n        orderFills[user][hash] = SafeMath.add(orderFills[user][hash], amount);\r\n        emit Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\r\n    }\r\n\r\n    function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns (bool) {\r\n        return (tokens[tokenGet][sender] >= amount && availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount);\r\n    }\r\n\r\n    function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns (uint) {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        if (!((orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) == user) && block.number <= expires)) return 0;\r\n        uint available1 = SafeMath.sub(amountGet, orderFills[user][hash]);\r\n        uint available2 = SafeMath.mul(tokens[tokenGive][user], amountGet) / amountGive;\r\n        if (available1 < available2) return available1;\r\n        return available2;\r\n    }\r\n\r\n    function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns (uint) {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        return orderFills[user][hash];\r\n    }\r\n\r\n    function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        if (!(orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) == msg.sender)) revert(\"Validation error\");\r\n        orderFills[msg.sender][hash] = amountGet;\r\n        emit Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\r\n    }\r\n\r\n    function migrateFunds(address[] tokens_) public {\r\n        // Get the latest successor in the chain\r\n        require(nextContract != address(0));\r\n        EtherDEX newExchange = findNewExchangeContract();\r\n\r\n        // Ether\r\n        migrateEther(newExchange);\r\n\r\n        // Tokens\r\n        migrateTokens(newExchange, tokens_);\r\n\r\n        emit FundsMigrated(msg.sender);\r\n    }\r\n\r\n    function depositEtherForUser(address _user) public payable {\r\n        require(!isContractDeprecated);\r\n        require(_user != address(0));\r\n        require(msg.value > 0);\r\n        EtherDEX caller = EtherDEX(msg.sender);\r\n        require(caller.contractVersion() > 0); // Make sure it's an exchange account\r\n        tokens[0][_user] = tokens[0][_user].add(msg.value);\r\n    }\r\n\r\n    function depositTokenForUser(address _token, uint _amount, address _user) public {\r\n        require(!isContractDeprecated);\r\n        require(_token != address(0));\r\n        require(_user != address(0));\r\n        require(_amount > 0);\r\n        EtherDEX caller = EtherDEX(msg.sender);\r\n        require(caller.contractVersion() > 0); // Make sure it's an exchange account\r\n        if (!ERC20(_token).transferFrom(msg.sender, this, _amount)) {\r\n            revert();\r\n        }\r\n        tokens[_token][_user] = tokens[_token][_user].add(_amount);\r\n    }\r\n\r\n    function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\r\n        uint feeMakeXfer = SafeMath.mul(amount, feeMake) / (1 ether);\r\n        uint feeTakeXfer = SafeMath.mul(amount, feeTake) / (1 ether);\r\n\r\n        tokens[tokenGet][msg.sender] = SafeMath.sub(tokens[tokenGet][msg.sender], SafeMath.add(amount, feeTakeXfer));\r\n        tokens[tokenGet][user] = SafeMath.add(tokens[tokenGet][user], SafeMath.sub(amount, feeMakeXfer));\r\n        tokens[tokenGet][feeAccount] = SafeMath.add(tokens[tokenGet][feeAccount], SafeMath.add(feeMakeXfer, feeTakeXfer));\r\n        tokens[tokenGive][user] = SafeMath.sub(tokens[tokenGive][user], SafeMath.mul(amountGive, amount) / amountGet);\r\n        tokens[tokenGive][msg.sender] = SafeMath.add(tokens[tokenGive][msg.sender], SafeMath.mul(amountGive, amount) / amountGet);\r\n    }\r\n\r\n    function findNewExchangeContract() private view returns (EtherDEX) {\r\n        EtherDEX newExchange = EtherDEX(nextContract);\r\n        for (uint16 n = 0; n < 20; n++) {// We will look past 20 contracts in the future\r\n            address nextContract_ = newExchange.nextContract();\r\n            if (nextContract_ == address(this)) {// Circular succession\r\n                revert();\r\n            }\r\n            if (nextContract_ == address(0)) {// We reached the newest, stop\r\n                break;\r\n            }\r\n            newExchange = EtherDEX(nextContract_);\r\n        }\r\n        return newExchange;\r\n    }\r\n\r\n    function migrateEther(EtherDEX newExchange) private {\r\n        uint etherAmount = tokens[0][msg.sender];\r\n        if (etherAmount > 0) {\r\n            tokens[0][msg.sender] = 0;\r\n            newExchange.depositEtherForUser.value(etherAmount)(msg.sender);\r\n        }\r\n    }\r\n\r\n    function migrateTokens(EtherDEX newExchange, address[] tokens_) private {\r\n        for (uint16 n = 0; n < tokens_.length; n++) {\r\n            address token = tokens_[n];\r\n            require(token != address(0));\r\n            // 0 = Ether, we handle it above\r\n            uint tokenAmount = tokens[token][msg.sender];\r\n            if (tokenAmount == 0) {\r\n                continue;\r\n            }\r\n            if (!ERC20(token).approve(newExchange, tokenAmount)) {\r\n                revert();\r\n            }\r\n            tokens[token][msg.sender] = 0;\r\n            newExchange.depositTokenForUser(token, tokenAmount, msg.sender);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractDeprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositTokenForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeMake_\",\"type\":\"uint256\"}],\"name\":\"changeFeeMake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositEtherForUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeTake_\",\"type\":\"uint256\"}],\"name\":\"changeFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deprecated_\",\"type\":\"bool\"},{\"name\":\"nextContract_\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"},{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"feeMake_\",\"type\":\"uint256\"},{\"name\":\"feeTake_\",\"type\":\"uint256\"},{\"name\":\"_previousContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"FundsMigrated\",\"type\":\"event\"}]","ContractName":"EtherDEX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000097f1d54057e62e132f6cdd47569e685ca1746591000000000000000000000000d93b604fb3c07797f0dee3c68dd2d4c8768c87e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://78841aadf71db8abdd4c571906e6352d145475df5ab26f99b05efd3af7a2bc08"}]}