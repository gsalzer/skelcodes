{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nfile:   TestyTestTest.sol\r\nver:    0.0.1_deploy\r\nauthor: peter godbolt\r\ndate:   15-Mar-2018\r\nemail:  peter AT TestyTest.tech\r\n(c) Peter Godbolt, based on the fine work of Darryl Morris 2018, 2017\r\n\r\nTesting of an ERC20 Token, backed by a regulated financial product in Australia. Nice.\r\n\r\nLicense\r\n-------\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\nSee MIT Licence for further details.\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nRelease Notes\r\n-------------\r\n* way we go\r\n\r\nDedications\r\n-------------\r\n* to Tom Waits, Taylor Swift and Jo Jo Siwa\r\n*/\r\n\r\n\r\npragma solidity ^0.4.17;\r\n\r\n\r\ncontract TestyTestConfig\r\n{\r\n    // ERC20 token name\r\n    string  public constant name            = \"TESTY\";\r\n\r\n    // ERC20 trading symbol\r\n    string  public constant symbol          = \"TST\";\r\n\r\n    // Contract owner at time of deployment.\r\n    address public constant OWNER           = 0x8579A678Fc76cAe308ca280B58E2b8f2ddD41913;\r\n\r\n    // Opening Supply\r\n    uint    public constant TOTAL_TOKENS    = 100;\r\n\r\n    // ERC20 decimal places\r\n    uint8   public constant decimals        = 18;\r\n\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath\r\n{\r\n    // a add to b\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n    }\r\n\r\n    // a subtract b\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        c = a - b;\r\n        assert(c <= a);\r\n    }\r\n\r\n    // a multiplied by b\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n    }\r\n\r\n    // a divided by b\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        assert(b != 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract ReentryProtected\r\n{\r\n    // The reentry protection state mutex.\r\n    bool __reMutex;\r\n\r\n    // Sets and clears mutex in order to block function reentry\r\n    modifier preventReentry() {\r\n        require(!__reMutex);\r\n        __reMutex = true;\r\n        _;\r\n        delete __reMutex;\r\n    }\r\n\r\n    // Blocks function entry if mutex is set\r\n    modifier noReentry() {\r\n        require(!__reMutex);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Token\r\n{\r\n    using SafeMath for uint;\r\n\r\n/* Constants */\r\n\r\n    // none\r\n\r\n/* State variable */\r\n\r\n    /// @return The Total supply of tokens\r\n    uint public totalSupply;\r\n\r\n    /// @return Tokens owned by an address\r\n    mapping (address => uint) balances;\r\n\r\n    /// @return Tokens spendable by a thridparty\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n/* Events */\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _amount) is called.\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount);\r\n\r\n/* Modifiers */\r\n\r\n    // none\r\n\r\n/* Functions */\r\n\r\n    // Using an explicit getter allows for function overloading\r\n    function balanceOf(address _addr)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return balances[_addr];\r\n    }\r\n\r\n    // Quick checker on total supply\r\n    function currentSupply()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    // Using an explicit getter allows for function overloading\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return xfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        return xfer(_from, _to, _amount);\r\n    }\r\n\r\n    // Process a transfer internally.\r\n    function xfer(address _from, address _to, uint _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(_amount <= balances[_from]);\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n        // avoid wasting gas on 0 token transfers\r\n        if(_amount == 0) return true;\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to]   = balances[_to].add(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Approves a third-party spender\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract TestyTestAbstract\r\n{\r\n\r\n    /// @dev Logged when new owner accepts ownership\r\n    /// @param _from the old owner address\r\n    /// @param _to the new owner address\r\n    event ChangedOwner(address indexed _from, address indexed _to);\r\n\r\n    /// @dev Logged when owner initiates a change of ownership\r\n    /// @param _to the new owner address\r\n    event ChangeOwnerTo(address indexed _to);\r\n\r\n    /// @dev Logged KYC against an address\r\n    /// @param _addr Address to set or clear KYC flag\r\n    /// @param _kyc A boolean flag\r\n    event Kyc(address indexed _addr, bool _kyc);\r\n\r\n// State Variables\r\n//\r\n\r\n    /// @dev An address permissioned to enact owner restricted functions\r\n    /// @return owner\r\n    address public owner;\r\n\r\n    /// @dev An address permissioned to take ownership of the contract\r\n    /// @return new owner address\r\n    address public newOwner;\r\n\r\n    /// @returns KYC flag for an address\r\n    mapping (address => bool) public clearedKyc;\r\n\r\n//\r\n// Modifiers\r\n//\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n//\r\n// Function Abstracts\r\n//\r\n\r\n\r\n    /// @notice Clear the KYC flags for an array of addresses to allow tokens\r\n    /// transfers\r\n    function clearKyc(address[] _addrs) public returns (bool);\r\n\r\n    /// @notice Make bulk transfer of tokens to many addresses\r\n    /// @param _addrs An array of recipient addresses\r\n    /// @param _amounts An array of amounts to transfer to respective addresses\r\n    /// @return Boolean success value\r\n    function transferToMany(address[] _addrs, uint[] _amounts)\r\n        public returns (bool);\r\n\r\n    /// @notice Salvage `_amount` tokens at `_kaddr` and send them to `_to`\r\n    /// @param _kAddr An ERC20 contract address\r\n    /// @param _to and address to send tokens\r\n    /// @param _amount The number of tokens to transfer\r\n    /// @return Boolean success value\r\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\r\n        public returns (bool);\r\n}\r\n\r\n\r\n/*-----------------------------------------------------------------------------\\\r\n\r\nTestyTest implementation\r\n\r\n\\*----------------------------------------------------------------------------*/\r\n\r\ncontract TestyTest is\r\n    ReentryProtected,\r\n    ERC20Token,\r\n    TestyTestAbstract,\r\n    TestyTestConfig\r\n{\r\n    using SafeMath for uint;\r\n\r\n//\r\n// Constants\r\n//\r\n\r\n    // Token fixed point for decimal places\r\n    uint constant TOKEN = uint(10)**decimals;\r\n\r\n\r\n//\r\n// Functions\r\n//\r\n\r\n    function TestyTest()\r\n        public\r\n    {\r\n\r\n        owner = OWNER;\r\n        totalSupply = TOTAL_TOKENS.mul(TOKEN);\r\n\r\n    }\r\n\r\n    // Default function.\r\n    function ()\r\n        public\r\n        payable\r\n    {\r\n        // empty, could do stuff\r\n    }\r\n\r\n\r\n//\r\n// Manage supply\r\n//\r\n\r\nevent LowerSupply(address indexed burner, uint256 value);\r\nevent IncreaseSupply(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev lowers the supply by a specified amount of tokens.\r\n     * @param _value The amount of tokens to lower the supply by.\r\n     */\r\n\r\n    function lowerSupply(uint256 _value)\r\n        public\r\n        onlyOwner\r\n        preventReentry() {\r\n            require(_value > 0);\r\n            address burner = 0x41CaE184095c5DAEeC5B2b2901D156a029B3dAC6;\r\n            balances[burner] = balances[burner].sub(_value);\r\n            totalSupply = totalSupply.sub(_value);\r\n            emit LowerSupply(msg.sender, _value);\r\n    }\r\n\r\n    function increaseSupply(uint256 _value)\r\n        public\r\n        onlyOwner\r\n        preventReentry() {\r\n            require(_value > 0);\r\n            totalSupply = totalSupply.add(_value);\r\n            emit IncreaseSupply(msg.sender, _value);\r\n    }\r\n\r\n//\r\n//  clear KYC onchain\r\n//\r\n\r\n    function clearKyc(address[] _addrs)\r\n        public\r\n        noReentry\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint len = _addrs.length;\r\n        for(uint i; i < len; i++) {\r\n            clearedKyc[_addrs[i]] = true;\r\n            emit Kyc(_addrs[i], true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n//\r\n//  re-instate KYC onchain, should circumstances change\r\n//\r\n\r\n    function requireKyc(address[] _addrs)\r\n        public\r\n        noReentry\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint len = _addrs.length;\r\n        for(uint i; i < len; i++) {\r\n            delete clearedKyc[_addrs[i]];\r\n            emit Kyc(_addrs[i], false);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n//\r\n// ERC20 additional functions\r\n//\r\n\r\n    // Allows a sender to transfer tokens to an array of recipients\r\n    function transferToMany(address[] _addrs, uint[] _amounts)\r\n        public\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        require(_addrs.length == _amounts.length);\r\n        uint len = _addrs.length;\r\n        for(uint i = 0; i < len; i++) {\r\n            xfer(msg.sender, _addrs[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n   // Overload placeholder - could apply further logic\r\n    function xfer(address _from, address _to, uint _amount)\r\n        internal\r\n        noReentry\r\n        returns (bool)\r\n    {\r\n        super.xfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n//\r\n// Contract management functions\r\n//\r\n\r\n    // Initiate a change of owner to `_owner`\r\n    function changeOwner(address _owner)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        emit ChangeOwnerTo(_owner);\r\n        newOwner = _owner;\r\n        return true;\r\n    }\r\n\r\n    // Finalise change of ownership to newOwner\r\n    function acceptOwnership()\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == newOwner);\r\n        emit ChangedOwner(owner, msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    // Owner can salvage ERC20 tokens that may have been sent to the account\r\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\r\n        public\r\n        onlyOwner\r\n        preventReentry\r\n        returns (bool)\r\n    {\r\n        require(ERC20Token(_kAddr).transfer(_to, _amount));\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kAddr\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferExternalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferToMany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"requireKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"clearKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"clearedKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lowerSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LowerSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IncreaseSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ChangeOwnerTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_kyc\",\"type\":\"bool\"}],\"name\":\"Kyc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TestyTest","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://316ed01b5e537e45b398125f214e9b36a19bd6ae6b3ddd33c4f8eeb27d1c5893"}]}