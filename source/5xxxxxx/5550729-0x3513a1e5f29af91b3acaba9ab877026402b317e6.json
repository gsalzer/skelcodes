{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\ncontract owned {\r\n    address public owner;\r\n    event Log(string s);\r\n\r\n    constructor()payable public {\r\n        owner = msg.sender;\r\n    }\r\n    function fallback() public payable{\r\n        revert();\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n    function isOwner()public{\r\n        if(msg.sender==owner)emit Log(\"Owner\");\r\n        else{\r\n            emit Log(\"Not Owner\");\r\n        }\r\n    }\r\n}\r\ncontract verifier is owned{\r\n    struct action {\r\n        uint timestamp;\r\n        uint256 value;\r\n        address from;\r\n    }\r\n    mapping(string => mapping(uint => action))register;\r\n    mapping(string => uint256)transactionCount;\r\n    \r\n    event actionLog(uint timestamp, uint256 value,address from);\r\n    event Blog(string);\r\n    \r\n    constructor()public payable{\r\n    }\r\n    function registerTransaction(string neo,address ethA,uint256 value)internal{\r\n        register[neo][transactionCount[neo]]=action(now,value,ethA);\r\n        transactionCount[neo]+=1;\r\n    }\r\n    function verifyYourself(string neo, uint256 value)public payable{\r\n        registerTransaction(neo,msg.sender,value);\r\n    }\r\n    function viewAll(string neo)public onlyOwner{\r\n        uint i;\r\n        for(i=0;i<transactionCount[neo];i++){\r\n            emit actionLog(register[neo][i].timestamp,\r\n                        register[neo][i].value,\r\n                        register[neo][i].from);\r\n        }\r\n    }\r\n    function viewSpecific(string neo, uint256 index)public onlyOwner{\r\n        emit actionLog(register[neo][index].timestamp,\r\n                        register[neo][index].value,\r\n                        register[neo][index].from);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"neo\",\"type\":\"string\"}],\"name\":\"viewAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"neo\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"viewSpecific\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fallback\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"neo\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"verifyYourself\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"actionLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"Blog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"s\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"verifier","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa64f7381c531ed16c9b56d903d460b66f95fd787a40b905ef2472f220aee961"}]}