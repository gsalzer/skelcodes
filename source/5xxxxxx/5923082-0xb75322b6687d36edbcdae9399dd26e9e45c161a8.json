{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owned contract with safe ownership pass.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public contractOwner;\r\n\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public pendingContractOwner;\r\n\r\n    function Owned() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner check modifier\r\n    */\r\n    modifier onlyContractOwner() {\r\n        if (contractOwner == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only owner can call it\r\n     */\r\n    function destroy() onlyContractOwner {\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Prepares ownership pass.\r\n     *\r\n     * Can only be called by current owner.\r\n     *\r\n     * @param _to address of the next owner. 0x0 is not allowed.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\r\n        if (_to  == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize ownership pass.\r\n     *\r\n     * Can only be called by pending owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function claimContractOwnership() returns(bool) {\r\n        if (pendingContractOwner != msg.sender) {\r\n            return false;\r\n        }\r\n\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    string public symbol;\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned {\r\n    /**\r\n    *  Common result code. Means everything is fine.\r\n    */\r\n    uint constant OK = 1;\r\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\r\n\r\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\r\n        for(uint i=0;i<tokens.length;i++) {\r\n            address token = tokens[i];\r\n            uint balance = ERC20Interface(token).balanceOf(this);\r\n            if(balance != 0)\r\n                ERC20Interface(token).transfer(_to,balance);\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    function checkOnlyContractOwner() internal constant returns(uint) {\r\n        if (contractOwner == msg.sender) {\r\n            return OK;\r\n        }\r\n\r\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\r\n    }\r\n}\r\n\r\ncontract GroupsAccessManagerEmitter {\r\n\r\n    event UserCreated(address user);\r\n    event UserDeleted(address user);\r\n    event GroupCreated(bytes32 groupName);\r\n    event GroupActivated(bytes32 groupName);\r\n    event GroupDeactivated(bytes32 groupName);\r\n    event UserToGroupAdded(address user, bytes32 groupName);\r\n    event UserFromGroupRemoved(address user, bytes32 groupName);\r\n\r\n    event Error(uint errorCode);\r\n\r\n    function _emitError(uint _errorCode) internal returns (uint) {\r\n        Error(_errorCode);\r\n        return _errorCode;\r\n    }\r\n}\r\n\r\n/// @title Group Access Manager\r\n///\r\n/// Base implementation\r\n/// This contract serves as group manager\r\ncontract GroupsAccessManager is Object, GroupsAccessManagerEmitter {\r\n\r\n    uint constant USER_MANAGER_SCOPE = 111000;\r\n    uint constant USER_MANAGER_MEMBER_ALREADY_EXIST = USER_MANAGER_SCOPE + 1;\r\n    uint constant USER_MANAGER_GROUP_ALREADY_EXIST = USER_MANAGER_SCOPE + 2;\r\n    uint constant USER_MANAGER_OBJECT_ALREADY_SECURED = USER_MANAGER_SCOPE + 3;\r\n    uint constant USER_MANAGER_CONFIRMATION_HAS_COMPLETED = USER_MANAGER_SCOPE + 4;\r\n    uint constant USER_MANAGER_USER_HAS_CONFIRMED = USER_MANAGER_SCOPE + 5;\r\n    uint constant USER_MANAGER_NOT_ENOUGH_GAS = USER_MANAGER_SCOPE + 6;\r\n    uint constant USER_MANAGER_INVALID_INVOCATION = USER_MANAGER_SCOPE + 7;\r\n    uint constant USER_MANAGER_DONE = USER_MANAGER_SCOPE + 11;\r\n    uint constant USER_MANAGER_CANCELLED = USER_MANAGER_SCOPE + 12;\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct Member {\r\n        address addr;\r\n        uint groupsCount;\r\n        mapping(bytes32 => uint) groupName2index;\r\n        mapping(uint => uint) index2globalIndex;\r\n    }\r\n\r\n    struct Group {\r\n        bytes32 name;\r\n        uint priority;\r\n        uint membersCount;\r\n        mapping(address => uint) memberAddress2index;\r\n        mapping(uint => uint) index2globalIndex;\r\n    }\r\n\r\n    uint public membersCount;\r\n    mapping(uint => address) public index2memberAddress;\r\n    mapping(address => uint) public memberAddress2index;\r\n    mapping(address => Member) address2member;\r\n\r\n    uint public groupsCount;\r\n    mapping(uint => bytes32) public index2groupName;\r\n    mapping(bytes32 => uint) public groupName2index;\r\n    mapping(bytes32 => Group) groupName2group;\r\n    mapping(bytes32 => bool) public groupsBlocked; // if groupName => true, then couldn't be used for confirmation\r\n\r\n    function() payable public {\r\n        revert();\r\n    }\r\n\r\n    /// @notice Register user\r\n    /// Can be called only by contract owner\r\n    ///\r\n    /// @param _user user address\r\n    ///\r\n    /// @return code\r\n    function registerUser(address _user) external onlyContractOwner returns (uint) {\r\n        require(_user != 0x0);\r\n\r\n        if (isRegisteredUser(_user)) {\r\n            return _emitError(USER_MANAGER_MEMBER_ALREADY_EXIST);\r\n        }\r\n\r\n        uint _membersCount = membersCount.add(1);\r\n        membersCount = _membersCount;\r\n        memberAddress2index[_user] = _membersCount;\r\n        index2memberAddress[_membersCount] = _user;\r\n        address2member[_user] = Member(_user, 0);\r\n\r\n        UserCreated(_user);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Discard user registration\r\n    /// Can be called only by contract owner\r\n    ///\r\n    /// @param _user user address\r\n    ///\r\n    /// @return code\r\n    function unregisterUser(address _user) external onlyContractOwner returns (uint) {\r\n        require(_user != 0x0);\r\n\r\n        uint _memberIndex = memberAddress2index[_user];\r\n        if (_memberIndex == 0 || address2member[_user].groupsCount != 0) {\r\n            return _emitError(USER_MANAGER_INVALID_INVOCATION);\r\n        }\r\n\r\n        uint _membersCount = membersCount;\r\n        delete memberAddress2index[_user];\r\n        if (_memberIndex != _membersCount) {\r\n            address _lastUser = index2memberAddress[_membersCount];\r\n            index2memberAddress[_memberIndex] = _lastUser;\r\n            memberAddress2index[_lastUser] = _memberIndex;\r\n        }\r\n        delete address2member[_user];\r\n        delete index2memberAddress[_membersCount];\r\n        delete memberAddress2index[_user];\r\n        membersCount = _membersCount.sub(1);\r\n\r\n        UserDeleted(_user);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Create group\r\n    /// Can be called only by contract owner\r\n    ///\r\n    /// @param _groupName group name\r\n    /// @param _priority group priority\r\n    ///\r\n    /// @return code\r\n    function createGroup(bytes32 _groupName, uint _priority) external onlyContractOwner returns (uint) {\r\n        require(_groupName != bytes32(0));\r\n\r\n        if (isGroupExists(_groupName)) {\r\n            return _emitError(USER_MANAGER_GROUP_ALREADY_EXIST);\r\n        }\r\n\r\n        uint _groupsCount = groupsCount.add(1);\r\n        groupName2index[_groupName] = _groupsCount;\r\n        index2groupName[_groupsCount] = _groupName;\r\n        groupName2group[_groupName] = Group(_groupName, _priority, 0);\r\n        groupsCount = _groupsCount;\r\n\r\n        GroupCreated(_groupName);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Change group status\r\n    /// Can be called only by contract owner\r\n    ///\r\n    /// @param _groupName group name\r\n    /// @param _blocked block status\r\n    ///\r\n    /// @return code\r\n    function changeGroupActiveStatus(bytes32 _groupName, bool _blocked) external onlyContractOwner returns (uint) {\r\n        require(isGroupExists(_groupName));\r\n        groupsBlocked[_groupName] = _blocked;\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Add users in group\r\n    /// Can be called only by contract owner\r\n    ///\r\n    /// @param _groupName group name\r\n    /// @param _users user array\r\n    ///\r\n    /// @return code\r\n    function addUsersToGroup(bytes32 _groupName, address[] _users) external onlyContractOwner returns (uint) {\r\n        require(isGroupExists(_groupName));\r\n\r\n        Group storage _group = groupName2group[_groupName];\r\n        uint _groupMembersCount = _group.membersCount;\r\n\r\n        for (uint _userIdx = 0; _userIdx < _users.length; ++_userIdx) {\r\n            address _user = _users[_userIdx];\r\n            uint _memberIndex = memberAddress2index[_user];\r\n            require(_memberIndex != 0);\r\n\r\n            if (_group.memberAddress2index[_user] != 0) {\r\n                continue;\r\n            }\r\n\r\n            _groupMembersCount = _groupMembersCount.add(1);\r\n            _group.memberAddress2index[_user] = _groupMembersCount;\r\n            _group.index2globalIndex[_groupMembersCount] = _memberIndex;\r\n\r\n            _addGroupToMember(_user, _groupName);\r\n\r\n            UserToGroupAdded(_user, _groupName);\r\n        }\r\n        _group.membersCount = _groupMembersCount;\r\n\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Remove users in group\r\n    /// Can be called only by contract owner\r\n    ///\r\n    /// @param _groupName group name\r\n    /// @param _users user array\r\n    ///\r\n    /// @return code\r\n    function removeUsersFromGroup(bytes32 _groupName, address[] _users) external onlyContractOwner returns (uint) {\r\n        require(isGroupExists(_groupName));\r\n\r\n        Group storage _group = groupName2group[_groupName];\r\n        uint _groupMembersCount = _group.membersCount;\r\n\r\n        for (uint _userIdx = 0; _userIdx < _users.length; ++_userIdx) {\r\n            address _user = _users[_userIdx];\r\n            uint _memberIndex = memberAddress2index[_user];\r\n            uint _groupMemberIndex = _group.memberAddress2index[_user];\r\n\r\n            if (_memberIndex == 0 || _groupMemberIndex == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (_groupMemberIndex != _groupMembersCount) {\r\n                uint _lastUserGlobalIndex = _group.index2globalIndex[_groupMembersCount];\r\n                address _lastUser = index2memberAddress[_lastUserGlobalIndex];\r\n                _group.index2globalIndex[_groupMemberIndex] = _lastUserGlobalIndex;\r\n                _group.memberAddress2index[_lastUser] = _groupMemberIndex;\r\n            }\r\n            delete _group.memberAddress2index[_user];\r\n            delete _group.index2globalIndex[_groupMembersCount];\r\n            _groupMembersCount = _groupMembersCount.sub(1);\r\n\r\n            _removeGroupFromMember(_user, _groupName);\r\n\r\n            UserFromGroupRemoved(_user, _groupName);\r\n        }\r\n        _group.membersCount = _groupMembersCount;\r\n\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Check is user registered\r\n    ///\r\n    /// @param _user user address\r\n    ///\r\n    /// @return status\r\n    function isRegisteredUser(address _user) public view returns (bool) {\r\n        return memberAddress2index[_user] != 0;\r\n    }\r\n\r\n    /// @notice Check is user in group\r\n    ///\r\n    /// @param _groupName user array\r\n    /// @param _user user array\r\n    ///\r\n    /// @return status\r\n    function isUserInGroup(bytes32 _groupName, address _user) public view returns (bool) {\r\n        return isRegisteredUser(_user) && address2member[_user].groupName2index[_groupName] != 0;\r\n    }\r\n\r\n    /// @notice Check is group exist\r\n    ///\r\n    /// @param _groupName group name\r\n    ///\r\n    /// @return status\r\n    function isGroupExists(bytes32 _groupName) public view returns (bool) {\r\n        return groupName2index[_groupName] != 0;\r\n    }\r\n\r\n    /// @notice Get current group names\r\n    ///\r\n    /// @return group names\r\n    function getGroups() public view returns (bytes32[] _groups) {\r\n        uint _groupsCount = groupsCount;\r\n        _groups = new bytes32[](_groupsCount);\r\n        for (uint _groupIdx = 0; _groupIdx < _groupsCount; ++_groupIdx) {\r\n            _groups[_groupIdx] = index2groupName[_groupIdx + 1];\r\n        }\r\n    }\r\n\r\n    /// @notice Gets group members\r\n    function getGroupMembers(bytes32 _groupName) \r\n    public \r\n    view \r\n    returns (address[] _members) \r\n    {\r\n        if (!isGroupExists(_groupName)) {\r\n            return;\r\n        }\r\n\r\n        Group storage _group = groupName2group[_groupName];\r\n        uint _membersCount = _group.membersCount;\r\n        if (_membersCount == 0) {\r\n            return;\r\n        }\r\n\r\n        _members = new address[](_membersCount);\r\n        for (uint _userIdx = 0; _userIdx < _membersCount; ++_userIdx) {\r\n            uint _memberIdx = _group.index2globalIndex[_userIdx + 1];\r\n            _members[_userIdx] = index2memberAddress[_memberIdx];\r\n        }\r\n    }\r\n\r\n    /// @notice Gets a list of groups where passed user is a member\r\n    function getUserGroups(address _user)\r\n    public\r\n    view\r\n    returns (bytes32[] _groups)\r\n    {\r\n        if (!isRegisteredUser(_user)) {\r\n            return;\r\n        }\r\n\r\n        Member storage _member = address2member[_user];\r\n        uint _groupsCount = _member.groupsCount;\r\n        if (_groupsCount == 0) {\r\n            return;\r\n        }\r\n\r\n        _groups = new bytes32[](_groupsCount);\r\n        for (uint _groupIdx = 0; _groupIdx < _groupsCount; ++_groupIdx) {\r\n            uint _groupNameIdx = _member.index2globalIndex[_groupIdx + 1];\r\n            _groups[_groupIdx] = index2groupName[_groupNameIdx];\r\n        }\r\n\r\n    }\r\n\r\n    // PRIVATE\r\n\r\n    function _removeGroupFromMember(address _user, bytes32 _groupName) private {\r\n        Member storage _member = address2member[_user];\r\n        uint _memberGroupsCount = _member.groupsCount;\r\n        uint _memberGroupIndex = _member.groupName2index[_groupName];\r\n        if (_memberGroupIndex != _memberGroupsCount) {\r\n            uint _lastGroupGlobalIndex = _member.index2globalIndex[_memberGroupsCount];\r\n            bytes32 _lastGroupName = index2groupName[_lastGroupGlobalIndex];\r\n            _member.index2globalIndex[_memberGroupIndex] = _lastGroupGlobalIndex;\r\n            _member.groupName2index[_lastGroupName] = _memberGroupIndex;\r\n        }\r\n        delete _member.groupName2index[_groupName];\r\n        delete _member.index2globalIndex[_memberGroupsCount];\r\n        _member.groupsCount = _memberGroupsCount.sub(1);\r\n    }\r\n\r\n    function _addGroupToMember(address _user, bytes32 _groupName) private {\r\n        Member storage _member = address2member[_user];\r\n        uint _memberGroupsCount = _member.groupsCount.add(1);\r\n        _member.groupName2index[_groupName] = _memberGroupsCount;\r\n        _member.index2globalIndex[_memberGroupsCount] = groupName2index[_groupName];\r\n        _member.groupsCount = _memberGroupsCount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberAddress2index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"},{\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"changeGroupActiveStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"}],\"name\":\"isGroupExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isRegisteredUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unregisterUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"},{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeUsersFromGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserGroups\",\"outputs\":[{\"name\":\"_groups\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"},{\"name\":\"_priority\",\"type\":\"uint256\"}],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"index2groupName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"},{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addUsersToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"index2memberAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"}],\"name\":\"getGroupMembers\",\"outputs\":[{\"name\":\"_members\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGroups\",\"outputs\":[{\"name\":\"_groups\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"groupsBlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"groupName2index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupName\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserInGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupName\",\"type\":\"bytes32\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupName\",\"type\":\"bytes32\"}],\"name\":\"GroupActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupName\",\"type\":\"bytes32\"}],\"name\":\"GroupDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"groupName\",\"type\":\"bytes32\"}],\"name\":\"UserToGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"groupName\",\"type\":\"bytes32\"}],\"name\":\"UserFromGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"GroupsAccessManager","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://78d97f734cd83b1a0f1df28aded3a831fb8aefe1f6283c53636fee785c68fb92"}]}