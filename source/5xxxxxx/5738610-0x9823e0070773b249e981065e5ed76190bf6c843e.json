{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CopaMarket is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  CopaCore private copaCore;\r\n\r\n  uint256 private lockedEth;\r\n  uint256 public cut;\r\n  uint256 public tradingFee;\r\n  bool private secureFees;\r\n\r\n  struct Buy {\r\n    uint256 cardId;\r\n    uint256 count;\r\n    uint256 ethAmount;\r\n    bool open;\r\n  }\r\n\r\n  mapping(address => Buy[]) private buyers;\r\n\r\n  struct Sell {\r\n    uint256 cardId;\r\n    uint256 count;\r\n    uint256 ethAmount;\r\n    bool open;\r\n  }\r\n\r\n  mapping(address => Sell[]) private sellers;\r\n\r\n  struct Trade {\r\n    uint256[] offeredCardIds;\r\n    uint256[] offeredCardCounts;\r\n    uint256[] requestedCardIds;\r\n    uint256[] requestedCardCounts;\r\n    bool open;\r\n  }\r\n\r\n  mapping(address => Trade[]) private traders;\r\n\r\n  event NewBuy(address indexed buyer, uint256 indexed id, uint256 cardId, uint256 count, uint256 ethAmount);\r\n  event CardSold(address indexed buyer, uint256 indexed id, address indexed seller, uint256 cardId, uint256 count, uint256 ethAmount);\r\n  event CancelBuy(address indexed buyer, uint256 indexed id, uint256 cardId, uint256 count, uint256 ethAmount);\r\n\r\n  event NewSell(address indexed seller, uint256 indexed id, uint256 cardId, uint256 count, uint256 ethAmount);\r\n  event CardBought(address indexed seller, uint256 indexed id, address indexed buyer, uint256 cardId, uint256 count, uint256 ethAmount);\r\n  event CancelSell(address indexed seller, uint256 indexed id, uint256 cardId, uint256 count, uint256 ethAmount);\r\n\r\n  event NewTrade(address indexed seller, uint256 indexed id, uint256[] offeredCardIds, uint256[] offeredCardCounts, uint256[] requestedCardIds, uint256[] requestedCardCounts);\r\n  event CardsTraded(address indexed seller, uint256 indexed id, address indexed buyer, uint256[] offeredCardIds, uint256[] offeredCardCounts, uint256[] requestedCardIds, uint256[] requestedCardCounts);\r\n  event CancelTrade(address indexed seller, uint256 indexed id, uint256[] offeredCardIds, uint256[] offeredCardCounts, uint256[] requestedCardIds, uint256[] requestedCardCounts);\r\n\r\n  constructor(address _copaCoreAddress, uint256 _cut, uint256 _tradingFee, bool _secureFees) public {\r\n    copaCore = CopaCore(_copaCoreAddress);\r\n    cut = _cut;\r\n    tradingFee = _tradingFee;\r\n    secureFees = _secureFees;\r\n\r\n    lockedEth = 0;\r\n  }\r\n\r\n  function getCopaCoreAddress() view external onlyOwner returns (address) {\r\n    return address(copaCore);\r\n  }\r\n\r\n  function setCopaCoreAddress(address _copaCoreAddress) external onlyOwner {\r\n    copaCore = CopaCore(_copaCoreAddress);\r\n  }\r\n\r\n  function setCut(uint256 _cut) external onlyOwner {\r\n    require(_cut > 0);\r\n    require(_cut < 10000);\r\n\r\n    cut = _cut;\r\n  }\r\n\r\n  function setTradingFee(uint256 _tradingFee) external onlyOwner {\r\n    require(_tradingFee > 0);\r\n\r\n    tradingFee = _tradingFee;\r\n  }\r\n\r\n  function getSecureFees() view external onlyOwner returns (bool) {\r\n    return secureFees;\r\n  }\r\n\r\n  function setSecureFees(bool _secureFees) external onlyOwner {\r\n    secureFees = _secureFees;\r\n  }\r\n\r\n  function getLockedEth() view external onlyOwner returns (uint256) {\r\n    return lockedEth;\r\n  }\r\n\r\n  function getEthBalance() view external returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function withdrawEthBalanceSave() external onlyOwner {\r\n    uint256 _ethBalance = address(this).balance;\r\n    owner.transfer(_ethBalance - lockedEth);\r\n  }\r\n\r\n  function withdrawEthBalance() external onlyOwner {\r\n    uint256 _ethBalance = address(this).balance;\r\n    owner.transfer(_ethBalance);\r\n  }\r\n\r\n  function getBuy(uint256 _id, address _address) view external returns (uint256, uint256, uint256, bool){\r\n    return (buyers[_address][_id].cardId, buyers[_address][_id].count, buyers[_address][_id].ethAmount, buyers[_address][_id].open);\r\n  }\r\n\r\n  function getSell(uint256 _id, address _address) view external returns (uint256, uint256, uint256, bool){\r\n    return (sellers[_address][_id].cardId, sellers[_address][_id].count, sellers[_address][_id].ethAmount, sellers[_address][_id].open);\r\n  }\r\n\r\n  function getTrade(uint256 _id, address _address) view external returns (uint256[], uint256[], uint256[], uint256[], bool){\r\n    return (traders[_address][_id].offeredCardIds, traders[_address][_id].offeredCardCounts, traders[_address][_id].requestedCardIds, traders[_address][_id].requestedCardCounts, traders[_address][_id].open);\r\n  }\r\n\r\n  function addToBuyList(uint256 _cardId, uint256 _count) external payable whenNotPaused returns (bool) {\r\n    address _buyer = msg.sender;\r\n    uint256 _ethAmount = msg.value;\r\n\r\n    require(_ethAmount > 0);\r\n    require(_count > 0);\r\n\r\n    uint256 _id = buyers[_buyer].length;\r\n    buyers[_buyer].push(Buy(_cardId, _count, _ethAmount, true));\r\n\r\n    lockedEth += _ethAmount;\r\n\r\n    emit NewBuy(_buyer, _id, _cardId, _count, _ethAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function sellCard(address _buyer, uint256 _id, uint256 _cardId, uint256 _count, uint256 _ethAmount) external whenNotPaused returns (bool) {\r\n    address _seller = msg.sender;\r\n\r\n    uint256 _cut = 10000 - cut;\r\n    uint256 _ethAmountAfterCut = (_ethAmount * _cut) / 10000;\r\n    uint256 _fee = _ethAmount - _ethAmountAfterCut;\r\n\r\n    require(buyers[_buyer][_id].open == true);\r\n    require(buyers[_buyer][_id].cardId == _cardId);\r\n    require(buyers[_buyer][_id].count == _count);\r\n    require(buyers[_buyer][_id].ethAmount == _ethAmount);\r\n\r\n    buyers[_buyer][_id].open = false;\r\n    lockedEth -= _ethAmount;\r\n\r\n    copaCore.transferFrom(_seller, _buyer, _cardId, _count);\r\n    _seller.transfer(_ethAmountAfterCut);\r\n\r\n    if (secureFees) {\r\n      owner.transfer(_fee);\r\n    }\r\n\r\n    emit CardSold(_buyer, _id, _seller, _cardId, _count, _ethAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function cancelBuy(uint256 _id, uint256 _cardId, uint256 _count, uint256 _ethAmount) external whenNotPaused returns (bool) {\r\n    address _buyer = msg.sender;\r\n\r\n    require(buyers[_buyer][_id].open == true);\r\n    require(buyers[_buyer][_id].cardId == _cardId);\r\n    require(buyers[_buyer][_id].count == _count);\r\n    require(buyers[_buyer][_id].ethAmount == _ethAmount);\r\n\r\n    lockedEth -= _ethAmount;\r\n    buyers[_buyer][_id].open = false;\r\n\r\n    _buyer.transfer(_ethAmount);\r\n\r\n    emit CancelBuy(_buyer, _id, _cardId, _count, _ethAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function addToSellList(uint256 _cardId, uint256 _count, uint256 _ethAmount) external whenNotPaused returns (bool) {\r\n    address _seller = msg.sender;\r\n\r\n    require(_ethAmount > 0);\r\n    require(_count > 0);\r\n\r\n    uint256 _id = sellers[_seller].length;\r\n    sellers[_seller].push(Sell(_cardId, _count, _ethAmount, true));\r\n\r\n    copaCore.transferFrom(_seller, address(this), _cardId, _count);\r\n\r\n    emit NewSell(_seller, _id, _cardId, _count, _ethAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function buyCard(address _seller, uint256 _id, uint256 _cardId, uint256 _count) external payable whenNotPaused returns (bool) {\r\n    address _buyer = msg.sender;\r\n    uint256 _ethAmount = msg.value;\r\n\r\n    uint256 _cut = 10000 - cut;\r\n    uint256 _ethAmountAfterCut = (_ethAmount * _cut) / 10000;\r\n    uint256 _fee = _ethAmount - _ethAmountAfterCut;\r\n\r\n    require(sellers[_seller][_id].open == true);\r\n    require(sellers[_seller][_id].cardId == _cardId);\r\n    require(sellers[_seller][_id].count == _count);\r\n    require(sellers[_seller][_id].ethAmount <= _ethAmount);\r\n\r\n    sellers[_seller][_id].open = false;\r\n\r\n    copaCore.transfer(_buyer, _cardId, _count);\r\n    _seller.transfer(_ethAmountAfterCut);\r\n\r\n    if (secureFees) {\r\n      owner.transfer(_fee);\r\n    }\r\n\r\n    emit CardBought(_seller, _id, _buyer, _cardId, _count, _ethAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function cancelSell(uint256 _id, uint256 _cardId, uint256 _count, uint256 _ethAmount) external whenNotPaused returns (bool) {\r\n    address _seller = msg.sender;\r\n\r\n    require(sellers[_seller][_id].open == true);\r\n    require(sellers[_seller][_id].cardId == _cardId);\r\n    require(sellers[_seller][_id].count == _count);\r\n    require(sellers[_seller][_id].ethAmount == _ethAmount);\r\n\r\n    sellers[_seller][_id].open = false;\r\n\r\n    copaCore.transfer(_seller, _cardId, _count);\r\n\r\n    emit CancelSell(_seller, _id, _cardId, _count, _ethAmount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function addToTradeList(uint256[] _offeredCardIds, uint256[] _offeredCardCounts, uint256[] _requestedCardIds, uint256[] _requestedCardCounts) external whenNotPaused returns (bool) {\r\n    address _seller = msg.sender;\r\n\r\n    require(_offeredCardIds.length > 0);\r\n    require(_offeredCardCounts.length > 0);\r\n    require(_requestedCardIds.length > 0);\r\n    require(_requestedCardCounts.length > 0);\r\n\r\n    uint256 _id = traders[_seller].length;\r\n    traders[_seller].push(Trade(_offeredCardIds, _offeredCardCounts, _requestedCardIds, _requestedCardCounts, true));\r\n\r\n    for (uint256 i = 0; i < _offeredCardIds.length; i++) {\r\n      copaCore.transferFrom(_seller, address(this), _offeredCardIds[i], _offeredCardCounts[i]);\r\n    }\r\n\r\n    emit NewTrade(_seller, _id, _offeredCardIds, _offeredCardCounts, _requestedCardIds, _requestedCardCounts);\r\n\r\n    return true;\r\n  }\r\n\r\n  function tradeCards(address _seller, uint256 _id) external payable whenNotPaused returns (bool) {\r\n    address _buyer = msg.sender;\r\n    uint256 _ethAmount = msg.value;\r\n    uint256[] memory _offeredCardIds = traders[_seller][_id].offeredCardIds;\r\n    uint256[] memory _offeredCardCounts = traders[_seller][_id].offeredCardCounts;\r\n    uint256[] memory _requestedCardIds = traders[_seller][_id].requestedCardIds;\r\n    uint256[] memory _requestedCardCounts = traders[_seller][_id].requestedCardCounts;\r\n\r\n    require(traders[_seller][_id].open == true);\r\n    require(_ethAmount >= tradingFee);\r\n\r\n    traders[_seller][_id].open = false;\r\n\r\n    for (uint256 i = 0; i < _offeredCardIds.length; i++) {\r\n      copaCore.transfer(_buyer, _offeredCardIds[i], _offeredCardCounts[i]);\r\n    }\r\n    for (uint256 j = 0; j < _requestedCardIds.length; j++) {\r\n      copaCore.transferFrom(_buyer, _seller, _requestedCardIds[j], _requestedCardCounts[j]);\r\n    }\r\n\r\n    if (secureFees) {\r\n      owner.transfer(_ethAmount);\r\n    }\r\n\r\n    emit CardsTraded(_seller, _id, _buyer, _offeredCardIds, _offeredCardCounts, _requestedCardIds, _requestedCardCounts);\r\n\r\n    return true;\r\n  }\r\n\r\n  function cancelTrade(uint256 _id) external whenNotPaused returns (bool) {\r\n    address _seller = msg.sender;\r\n    uint256[] memory _offeredCardIds = traders[_seller][_id].offeredCardIds;\r\n    uint256[] memory _offeredCardCounts = traders[_seller][_id].offeredCardCounts;\r\n    uint256[] memory _requestedCardIds = traders[_seller][_id].requestedCardIds;\r\n    uint256[] memory _requestedCardCounts = traders[_seller][_id].requestedCardCounts;\r\n\r\n    require(traders[_seller][_id].open == true);\r\n\r\n    traders[_seller][_id].open = false;\r\n\r\n    for (uint256 i = 0; i < _offeredCardIds.length; i++) {\r\n      copaCore.transfer(_seller, _offeredCardIds[i], _offeredCardCounts[i]);\r\n    }\r\n\r\n    emit CancelTrade(_seller, _id, _offeredCardIds, _offeredCardCounts, _requestedCardIds, _requestedCardCounts);\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract CopaCore is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  CopaMarket private copaMarket;\r\n\r\n  uint256 public packSize;\r\n  uint256 public packPrice;\r\n  uint256 public totalCardCount;\r\n\r\n  mapping(address => uint256[1200]) public balances;\r\n\r\n  struct PackBuy {\r\n    uint256 packSize;\r\n    uint256 packPrice;\r\n    uint256[] cardIds;\r\n  }\r\n\r\n  mapping(address => PackBuy[]) private packBuys;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed cardId, uint256 count);\r\n  event TransferManual(address indexed from, address indexed to, uint256[] cardIds, uint256[] counts);\r\n  event BuyPack(uint256 indexed id, address indexed buyer, uint256 packSize, uint256 packPrice, uint256[] cardIds);\r\n  event BuyPacks(uint256 indexed id, address indexed buyer, uint256 packSize, uint256 packPrice, uint256 count);\r\n\r\n  constructor(uint256 _packSize, uint256 _packPrice, uint256 _totalCardCount) public {\r\n    packSize = _packSize;\r\n    packPrice = _packPrice;\r\n    totalCardCount = _totalCardCount;\r\n  }\r\n\r\n  function getCopaMarketAddress() view external onlyOwner returns (address) {\r\n    return address(copaMarket);\r\n  }\r\n\r\n  function setCopaMarketAddress(address _copaMarketAddress) external onlyOwner {\r\n    copaMarket = CopaMarket(_copaMarketAddress);\r\n  }\r\n  modifier onlyCopaMarket() {\r\n    require(msg.sender == address(copaMarket));\r\n    _;\r\n  }\r\n\r\n  function setPackSize(uint256 _packSize) external onlyOwner {\r\n    require(_packSize > 0);\r\n\r\n    packSize = _packSize;\r\n  }\r\n\r\n  function setPrice(uint256 _packPrice) external onlyOwner {\r\n    require(_packPrice > 0);\r\n\r\n    packPrice = _packPrice;\r\n  }\r\n\r\n  function setTotalCardCount(uint256 _totalCardCount) external onlyOwner {\r\n    require(_totalCardCount > 0);\r\n\r\n    totalCardCount = _totalCardCount;\r\n  }\r\n\r\n  function getEthBalance() view external returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function withdrawEthBalance() external onlyOwner {\r\n    uint256 _ethBalance = address(this).balance;\r\n    owner.transfer(_ethBalance);\r\n  }\r\n\r\n  function balanceOf(address _owner, uint256 _cardId) view external returns (uint256) {\r\n    return balances[_owner][_cardId];\r\n  }\r\n\r\n  function balancesOf(address _owner) view external returns (uint256[1200]) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function getPackBuy(address _address, uint256 _id) view external returns (uint256, uint256, uint256[]){\r\n    return (packBuys[_address][_id].packSize, packBuys[_address][_id].packPrice, packBuys[_address][_id].cardIds);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _cardId, uint256 _count) external whenNotPaused returns (bool) {\r\n    address _from = msg.sender;\r\n\r\n    require(_to != address(0));\r\n    require(_count > 0);\r\n    require(_count <= balances[_from][_cardId]);\r\n\r\n    balances[_from][_cardId] = balances[_from][_cardId].sub(_count);\r\n    balances[_to][_cardId] = balances[_to][_cardId].add(_count);\r\n\r\n    emit Transfer(_from, _to, _cardId, _count);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferMultiple(address _to, uint256[] _cardIds, uint256[] _counts) external whenNotPaused returns (bool) {\r\n    address _from = msg.sender;\r\n\r\n    require(_to != address(0));\r\n\r\n    for (uint256 i = 0; i < _cardIds.length; i++) {\r\n      uint256 _cardId = _cardIds[i];\r\n      uint256 _count = _counts[i];\r\n\r\n      require(_count > 0);\r\n      require(_count <= balances[_from][_cardId]);\r\n\r\n      balances[_from][_cardId] = balances[_from][_cardId].sub(_count);\r\n      balances[_to][_cardId] = balances[_to][_cardId].add(_count);\r\n\r\n      emit Transfer(_from, _to, _cardId, _count);\r\n    }\r\n\r\n    emit TransferManual(_from, _to, _cardIds, _counts);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _cardId, uint256 _count) external onlyCopaMarket returns (bool) {\r\n    require(_to != address(0));\r\n    require(_count > 0);\r\n    require(_count <= balances[_from][_cardId]);\r\n\r\n    balances[_from][_cardId] = balances[_from][_cardId].sub(_count);\r\n    balances[_to][_cardId] = balances[_to][_cardId].add(_count);\r\n\r\n    emit Transfer(_from, _to, _cardId, _count);\r\n\r\n    return true;\r\n  }\r\n\r\n  function buyPack(uint256 _count) external payable whenNotPaused returns (bool) {\r\n    address _buyer = msg.sender;\r\n    uint256 _ethAmount = msg.value;\r\n    uint256 _totalPrice = packPrice * _count;\r\n\r\n    require(_count > 0);\r\n    require(_ethAmount > 0);\r\n    require(_ethAmount >= _totalPrice);\r\n\r\n    for (uint256 i = 0; i < _count; i++) {\r\n      uint256[] memory _cardsList = new uint256[](packSize);\r\n\r\n      for (uint256 j = 0; j < packSize; j++) {\r\n        uint256 _cardId = dice(totalCardCount);\r\n\r\n        balances[_buyer][_cardId] = balances[_buyer][_cardId].add(1);\r\n\r\n        _cardsList[j] = _cardId;\r\n\r\n        emit Transfer(0x0, _buyer, _cardId, 1);\r\n      }\r\n\r\n      uint256 _id = packBuys[_buyer].length;\r\n      packBuys[_buyer].push(PackBuy(packSize, packPrice, _cardsList));\r\n\r\n      emit BuyPack(_id, _buyer, packSize, packPrice, _cardsList);\r\n    }\r\n\r\n    emit BuyPacks(_id, _buyer, packSize, packPrice, _count);\r\n\r\n    return true;\r\n  }\r\n\r\n  function getPack(uint256 _count) external onlyOwner whenNotPaused returns (bool) {\r\n    require(_count > 0);\r\n\r\n    for (uint256 i = 0; i < _count; i++) {\r\n      uint256[] memory _cardsList = new uint256[](packSize);\r\n\r\n      for (uint256 j = 0; j < packSize; j++) {\r\n        uint256 _cardId = dice(totalCardCount);\r\n\r\n        balances[owner][_cardId] = balances[owner][_cardId].add(1);\r\n\r\n        _cardsList[j] = _cardId;\r\n\r\n        emit Transfer(0x0, owner, _cardId, 1);\r\n      }\r\n\r\n      uint256 _id = packBuys[owner].length;\r\n      packBuys[owner].push(PackBuy(packSize, 0, _cardsList));\r\n\r\n      emit BuyPack(_id, owner, packSize, 0, _cardsList);\r\n    }\r\n\r\n    emit BuyPacks(_id, owner, packSize, 0, _count);\r\n\r\n    return true;\r\n  }\r\n\r\n  uint256 seed = 0;\r\n\r\n  function maxDice() private returns (uint256 diceNumber) {\r\n    seed = uint256(keccak256(keccak256(blockhash(block.number - 1), seed), now));\r\n    return seed;\r\n  }\r\n\r\n  function dice(uint256 upper) private returns (uint256 diceNumber) {\r\n    return maxDice() % upper;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_offeredCardIds\",\"type\":\"uint256[]\"},{\"name\":\"_offeredCardCounts\",\"type\":\"uint256[]\"},{\"name\":\"_requestedCardIds\",\"type\":\"uint256[]\"},{\"name\":\"_requestedCardCounts\",\"type\":\"uint256[]\"}],\"name\":\"addToTradeList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"cancelBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tradeCards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"addToSellList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthBalanceSave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_copaCoreAddress\",\"type\":\"address\"}],\"name\":\"setCopaCoreAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecureFees\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"buyCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secureFees\",\"type\":\"bool\"}],\"name\":\"setSecureFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingFee\",\"type\":\"uint256\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"addToBuyList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"cancelSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"sellCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCopaCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_copaCoreAddress\",\"type\":\"address\"},{\"name\":\"_cut\",\"type\":\"uint256\"},{\"name\":\"_tradingFee\",\"type\":\"uint256\"},{\"name\":\"_secureFees\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"NewBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"CardSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"CancelBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"NewSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"CardBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"CancelSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offeredCardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"offeredCardCounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"requestedCardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"requestedCardCounts\",\"type\":\"uint256[]\"}],\"name\":\"NewTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"offeredCardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"offeredCardCounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"requestedCardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"requestedCardCounts\",\"type\":\"uint256[]\"}],\"name\":\"CardsTraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offeredCardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"offeredCardCounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"requestedCardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"requestedCardCounts\",\"type\":\"uint256[]\"}],\"name\":\"CancelTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CopaMarket","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000211163a34fa7929b84ba47612ca5549183a1abbd00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://35b9cc908d56a36bcbfd6040e3602abaca735da18b1e3e0bb3c73ce82ecc608c"}]}