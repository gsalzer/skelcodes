{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n* @title LendingBlockToken\r\n* @dev LND or LendingBlock Token\r\n* Max supply of 1 billion\r\n* 18 decimals\r\n* not transferable before end of token generation event\r\n* transferable time can be set\r\n*/\r\ncontract LendingBlockToken is StandardToken, BurnableToken, Ownable {\r\n\tstring public constant name = \"Lendingblock\";\r\n\tstring public constant symbol = \"LND\";\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 public transferableTime = 1546300800;// 1/1/2019\r\n\taddress public tokenEventAddress;\r\n\r\n\t/**\r\n\t* @dev before transferableTime, only the token event contract and owner\r\n\t* can transfer tokens\r\n\t*/\r\n\tmodifier afterTransferableTime() {\r\n\t\tif (now <= transferableTime) {\r\n\t\t\trequire(msg.sender == tokenEventAddress || msg.sender == owner);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev constructor to initiate values\r\n\t* msg.sender is the token event contract\r\n\t* supply is 1 billion\r\n\t* @param _owner address that has can transfer tokens and access to change transferableTime\r\n\t*/\r\n\tfunction LendingBlockToken(address _owner) public {\r\n\t\ttokenEventAddress = msg.sender;\r\n\t\towner = _owner;\r\n\t\ttotalSupply = 1e9 * 1e18;\r\n\t\tbalances[_owner] = totalSupply;\r\n\t\tTransfer(address(0), _owner, totalSupply);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transferableTime restrictions on the parent function\r\n\t* @param _to address that will receive tokens\r\n\t* @param _value amount of tokens to transfer\r\n\t* @return boolean that indicates if the operation was successful\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tafterTransferableTime\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transferableTime restrictions on the parent function\r\n\t* @param _from address that is approving the tokens\r\n\t* @param _to address that will receive approval for the tokens\r\n\t* @param _value amount of tokens to approve\r\n\t* @return boolean that indicates if the operation was successful\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tafterTransferableTime\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev set transferableTime\r\n\t* transferableTime can only be set earlier, not later\r\n\t* once tokens are transferable, it cannot be paused\r\n\t* @param _transferableTime epoch time for transferableTime\r\n\t*/\r\n\tfunction setTransferableTime(uint256 _transferableTime)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(_transferableTime < transferableTime);\r\n\t\ttransferableTime = _transferableTime;\r\n\t}\r\n}\r\n\r\n/**\r\n* @title LendingBlockTokenEvent\r\n* @dev sale contract that accepts eth and sends LND tokens in return\r\n* only the owner can change parameters\r\n* deploys LND token when this contract is deployed\r\n* 2 separate list of participants, mainly pre sale and main sale\r\n* multiple rounds are possible for pre sale and main sale\r\n* within a round, all participants have the same contribution min, max and rate\r\n*/\r\ncontract LendingBlockTokenEvent is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tLendingBlockToken public token;\r\n\taddress public wallet;\r\n\tbool public eventEnded;\r\n\tuint256 public startTimePre;\r\n\tuint256 public startTimeMain;\r\n\tuint256 public endTimePre;\r\n\tuint256 public endTimeMain;\r\n\tuint256 public ratePre;\r\n\tuint256 public rateMain;\r\n\tuint256 public minCapPre;\r\n\tuint256 public minCapMain;\r\n\tuint256 public maxCapPre;\r\n\tuint256 public maxCapMain;\r\n\tuint256 public weiTotal;\r\n\tmapping(address => bool) public whitelistedAddressPre;\r\n\tmapping(address => bool) public whitelistedAddressMain;\r\n\tmapping(address => uint256) public contributedValue;\r\n\r\n\tevent TokenPre(address indexed participant, uint256 value, uint256 tokens);\r\n\tevent TokenMain(address indexed participant, uint256 value, uint256 tokens);\r\n\tevent SetPre(uint256 startTimePre, uint256 endTimePre, uint256 minCapPre, uint256 maxCapPre, uint256 ratePre);\r\n\tevent SetMain(uint256 startTimeMain, uint256 endTimeMain, uint256 minCapMain, uint256 maxCapMain, uint256 rateMain);\r\n\tevent WhitelistPre(address indexed whitelistedAddress, bool whitelistedStatus);\r\n\tevent WhitelistMain(address indexed whitelistedAddress, bool whitelistedStatus);\r\n\r\n\t/**\r\n\t* @dev all functions can only be called before event has ended\r\n\t*/\r\n\tmodifier eventNotEnded() {\r\n\t\trequire(eventEnded == false);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev constructor to initiate values\r\n\t* @param _wallet address that will receive the contributed eth\r\n\t*/\r\n\tfunction LendingBlockTokenEvent(address _wallet) public {\r\n\t\ttoken = new LendingBlockToken(msg.sender);\r\n\t\twallet = _wallet;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev function to join the pre sale\r\n\t* associated with variables, functions, events of suffix Pre\r\n\t*/\r\n\tfunction joinPre()\r\n\t\tpublic\r\n\t\tpayable\r\n\t\teventNotEnded\r\n\t{\r\n\t\trequire(now >= startTimePre);//after start time\r\n\t\trequire(now <= endTimePre);//before end time\r\n\t\trequire(msg.value >= minCapPre);//contribution is at least minimum\r\n\t\trequire(whitelistedAddressPre[msg.sender] == true);//sender is whitelisted\r\n\r\n\t\tuint256 weiValue = msg.value;\r\n\t\tcontributedValue[msg.sender] = contributedValue[msg.sender].add(weiValue);//store amount contributed\r\n\t\trequire(contributedValue[msg.sender] <= maxCapPre);//total contribution not above maximum\r\n\r\n\t\tuint256 tokens = weiValue.mul(ratePre);//find amount of tokens\r\n\t\tweiTotal = weiTotal.add(weiValue);//store total collected eth\r\n\r\n\t\ttoken.transfer(msg.sender, tokens);//send token to participant\r\n\t\tTokenPre(msg.sender, weiValue, tokens);//record contribution in logs\r\n\r\n\t\tforwardFunds();//send eth for safekeeping\r\n\t}\r\n\r\n\t/**\r\n\t* @dev function to join the main sale\r\n\t* associated with variables, functions, events of suffix Main\r\n\t*/\r\n\tfunction joinMain()\r\n\t\tpublic\r\n\t\tpayable\r\n\t\teventNotEnded\r\n\t{\r\n\t\trequire(now >= startTimeMain);//after start time\r\n\t\trequire(now <= endTimeMain);//before end time\r\n\t\trequire(msg.value >= minCapMain);//contribution is at least minimum\r\n\t\trequire(whitelistedAddressMain[msg.sender] == true);//sender is whitelisted\r\n\r\n\t\tuint256 weiValue = msg.value;\r\n\t\tcontributedValue[msg.sender] = contributedValue[msg.sender].add(weiValue);//store amount contributed\r\n\t\trequire(contributedValue[msg.sender] <= maxCapMain);//total contribution not above maximum\r\n\r\n\t\tuint256 tokens = weiValue.mul(rateMain);//find amount of tokens\r\n\t\tweiTotal = weiTotal.add(weiValue);//store total collected eth\r\n\r\n\t\ttoken.transfer(msg.sender, tokens);//send token to participant\r\n\t\tTokenMain(msg.sender, weiValue, tokens);//record contribution in logs\r\n\r\n\t\tforwardFunds();//send eth for safekeeping\r\n\t}\r\n\r\n\t/**\r\n\t* @dev send eth for safekeeping\r\n\t*/\r\n\tfunction forwardFunds() internal {\r\n\t\twallet.transfer(msg.value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev set the parameters for the contribution round\r\n\t* associated with variables, functions, events of suffix Pre\r\n\t* @param _startTimePre start time of contribution round\r\n\t* @param _endTimePre end time of contribution round\r\n\t* @param _minCapPre minimum contribution for this round\r\n\t* @param _maxCapPre maximum contribution for this round\r\n\t* @param _ratePre token exchange rate for this round\r\n\t*/\r\n\tfunction setPre(\r\n\t\tuint256 _startTimePre,\r\n\t\tuint256 _endTimePre,\r\n\t\tuint256 _minCapPre,\r\n\t\tuint256 _maxCapPre,\r\n\t\tuint256 _ratePre\r\n\t)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t\teventNotEnded\r\n\t{\r\n\t\trequire(now < _startTimePre);//start time must be in the future\r\n\t\trequire(_startTimePre < _endTimePre);//end time must be later than start time\r\n\t\trequire(_minCapPre <= _maxCapPre);//minimum must be smaller or equal to maximum\r\n\t\tstartTimePre = _startTimePre;\r\n\t\tendTimePre = _endTimePre;\r\n\t\tminCapPre = _minCapPre;\r\n\t\tmaxCapPre = _maxCapPre;\r\n\t\tratePre = _ratePre;\r\n\t\tSetPre(_startTimePre, _endTimePre, _minCapPre, _maxCapPre, _ratePre);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev set the parameters for the contribution round\r\n\t* associated with variables, functions, events of suffix Main\r\n\t* @param _startTimeMain start time of contribution round\r\n\t* @param _endTimeMain end time of contribution round\r\n\t* @param _minCapMain minimum contribution for this round\r\n\t* @param _maxCapMain maximum contribution for this round\r\n\t* @param _rateMain token exchange rate for this round\r\n\t*/\r\n\tfunction setMain(\r\n\t\tuint256 _startTimeMain,\r\n\t\tuint256 _endTimeMain,\r\n\t\tuint256 _minCapMain,\r\n\t\tuint256 _maxCapMain,\r\n\t\tuint256 _rateMain\r\n\t)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t\teventNotEnded\r\n\t{\r\n\t\trequire(now < _startTimeMain);//start time must be in the future\r\n\t\trequire(_startTimeMain < _endTimeMain);//end time must be later than start time\r\n\t\trequire(_minCapMain <= _maxCapMain);//minimum must be smaller or equal to maximum\r\n\t\trequire(_startTimeMain > endTimePre);//main round should be after pre round\r\n\t\tstartTimeMain = _startTimeMain;\r\n\t\tendTimeMain = _endTimeMain;\r\n\t\tminCapMain = _minCapMain;\r\n\t\tmaxCapMain = _maxCapMain;\r\n\t\trateMain = _rateMain;\r\n\t\tSetMain(_startTimeMain, _endTimeMain, _minCapMain, _maxCapMain, _rateMain);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev change the whitelist status of an address for pre sale\r\n\t* associated with variables, functions, events of suffix Pre\r\n\t* @param whitelistedAddress list of addresses for whitelist status change\r\n\t* @param whitelistedStatus set the address whitelist status to true or false\r\n\t*/\r\n\tfunction setWhitelistedAddressPre(address[] whitelistedAddress, bool whitelistedStatus)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t\teventNotEnded\r\n\t{\r\n\t\tfor (uint256 i = 0; i < whitelistedAddress.length; i++) {\r\n\t\t\twhitelistedAddressPre[whitelistedAddress[i]] = whitelistedStatus;\r\n\t\t\tWhitelistPre(whitelistedAddress[i], whitelistedStatus);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev change the whitelist status of an address for main sale\r\n\t* associated with variables, functions, events of suffix Main\r\n\t* @param whitelistedAddress list of addresses for whitelist status change\r\n\t* @param whitelistedStatus set the address whitelist status to true or false\r\n\t*/\r\n\tfunction setWhitelistedAddressMain(address[] whitelistedAddress, bool whitelistedStatus)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t\teventNotEnded\r\n\t{\r\n\t\tfor (uint256 i = 0; i < whitelistedAddress.length; i++) {\r\n\t\t\twhitelistedAddressMain[whitelistedAddress[i]] = whitelistedStatus;\r\n\t\t\tWhitelistMain(whitelistedAddress[i], whitelistedStatus);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev end the token generation event and deactivates all functions\r\n\t* can only be called after end time\r\n\t* burn all remaining tokens in this contract that are not exchanged\r\n\t*/\r\n\tfunction endEvent()\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t\teventNotEnded\r\n\t{\r\n\t\trequire(now > endTimeMain);//can only be called after end time\r\n\t\trequire(endTimeMain > 0);//can only be called after end time has been set\r\n\t\tuint256 leftTokens = token.balanceOf(this);//find if any tokens are left\r\n\t\tif (leftTokens > 0) {\r\n\t\t\ttoken.burn(leftTokens);//burn all remaining tokens\r\n\t\t}\r\n\t\teventEnded = true;//deactivates all functions\r\n\t}\r\n\r\n\t/**\r\n\t* @dev default function to call the right function for exchanging tokens\r\n\t* main sale should start only after pre sale\r\n\t*/\r\n\tfunction () external payable {\r\n\t\tif (now <= endTimePre) {//call pre function if before pre sale end time\r\n\t\t\tjoinPre();\r\n\t\t} else if (now <= endTimeMain) {//call main function if before main sale end time\r\n\t\t\tjoinMain();\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferableTime\",\"type\":\"uint256\"}],\"name\":\"setTransferableTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenEventAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LendingBlockToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000098745c739b0aB33814c1152707dbd92C06797Ec4","Library":"","SwarmSource":"bzzr://bc26e7dd4d2fffd48d4456ad8dc339f960ff8faa07410978affadfcb7103cae4"}]}