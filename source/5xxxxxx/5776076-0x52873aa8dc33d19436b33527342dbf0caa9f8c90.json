{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ERC721 {\r\n    // Required methods\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CountryJackpot is ERC721, Ownable{\r\n    using SafeMath for uint256;\r\n    /// @dev The TokenSold event is fired whenever a token is sold.\r\n    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant NAME = \"EtherCup2018\"; // solhint-disable-line\r\n    string public constant SYMBOL = \"EthCup\"; // solhint-disable-line\r\n\r\n    //starting price for country token\r\n    uint256 private startingPrice = 0.01 ether;\r\n\r\n    //step limits to increase purchase price of token effectively\r\n    uint256 private firstStepLimit =  1 ether;\r\n    uint256 private secondStepLimit = 3 ether;\r\n    uint256 private thirdStepLimit = 10 ether;\r\n\r\n    //Final Jackpot value, when all buying/betting closes\r\n    uint256 private finalJackpotValue = 0;\r\n\r\n    //Flag to show if the Jackpot has completed\r\n    bool public jackpotCompleted = false;\r\n\r\n    /*** DATATYPES ***/\r\n    struct Country {\r\n        string name;\r\n    }\r\n\r\n    Country[] private countries;\r\n\r\n    /// @dev A mapping from country IDs to the address that owns them. All countries have some valid owner address.\r\n    mapping (uint256 => address) public countryIndexToOwner;\r\n    // A mapping from country id to address to show if the Country approved for transfer\r\n    mapping (uint256 => address) public countryIndexToApproved;\r\n    // A mapping from country id to ranks to show what rank of the Country\r\n    mapping (uint256 => uint256) public countryToRank;\r\n    //A mapping from country id to price to store the last purchase price of a country\r\n    mapping (uint256 => uint256) private countryToLastPrice;\r\n    // A mapping from country id to boolean which checks if the user has claimed jackpot for his country token\r\n    mapping (uint256 => bool) public  jackpotClaimedForCountry;\r\n    // A mapping from ranks to the ether to be won from the jackpot.\r\n    mapping (uint256 => uint256) public rankShare;\r\n\r\n    // Counts how many tokens a user has.\r\n    mapping (address => uint256) private ownershipTokenCount;\r\n\r\n    // @dev A mapping from countryIds to the price of the token.\r\n    mapping (uint256 => uint256) private countryIndexToPrice;\r\n\r\n    //@notice Constructor that setups the share for each rank\r\n    function CountryJackpot() public{\r\n        rankShare[1] = 76;\r\n        rankShare[2] = 56;\r\n        rankShare[3] = 48;\r\n        rankShare[4] = 44;\r\n        rankShare[5] = 32;\r\n        rankShare[6] = 24;\r\n        rankShare[7] = 16;\r\n    }\r\n\r\n    //@notice Aprrove the transfer of token. A user must own the token to approve it\r\n    function approve( address _to, uint256 _tokenId) public {\r\n      // Caller must own token.\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        countryIndexToApproved[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    //@notice Get count of how many tokens an address has\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    //@notice Create a country with a name, called only by the owner\r\n    function createCountry(string _name) public onlyOwner{\r\n        _createCountry(_name, startingPrice);\r\n    }\r\n\r\n    //@notice An address can claim his win from the jackpot after the jackpot is completed\r\n    function getEther(uint256 _countryIndex) public {\r\n        require(countryIndexToOwner[_countryIndex] == msg.sender);\r\n        require(jackpotCompleted);\r\n        require(countryToRank[_countryIndex] != 0);\r\n        require(!jackpotClaimedForCountry[_countryIndex]);\r\n\r\n        jackpotClaimedForCountry[_countryIndex] = true;\r\n        uint256 _rankShare = rankShare[countryToRank[_countryIndex]];\r\n\r\n        uint256 amount = ((finalJackpotValue).mul(_rankShare)).div(1000);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    //@notice Get complete information about a country token\r\n    function getCountry(uint256 _tokenId) public view returns (\r\n        string ,\r\n        uint256 ,\r\n        address ,\r\n        uint256\r\n    ) {\r\n        Country storage country = countries[_tokenId];\r\n        string memory countryName = country.name;\r\n        uint256 sellingPrice = countryIndexToPrice[_tokenId];\r\n        uint256 rank = countryToRank[_tokenId];\r\n        address owner = countryIndexToOwner[_tokenId];\r\n        return (countryName, sellingPrice, owner, rank);\r\n    }\r\n\r\n    //@notice Get the current balance of the contract.\r\n    function getContractBalance() public view returns(uint256) {\r\n        return (address(this).balance);\r\n    }\r\n\r\n    //@notice Get the total jackpot value, which is contract balance if the jackpot is not completed.Else\r\n    //its retrieved from variable jackpotCompleted\r\n    function getJackpotTotalValue() public view returns(uint256) {\r\n        if(jackpotCompleted){\r\n            return finalJackpotValue;\r\n        } else{\r\n            return address(this).balance;\r\n        }\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n\r\n    //@notice Get the owner of a country token\r\n    /// For querying owner of token\r\n    /// @param _tokenId The tokenID for owner inquiry\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address owner = countryIndexToOwner[_tokenId];\r\n        return (owner);\r\n    }\r\n\r\n    //@dev this function is required to recieve funds\r\n    function () payable {\r\n    }\r\n\r\n\r\n    //@notice Allows someone to send ether and obtain a country token\r\n    function purchase(uint256 _tokenId) public payable {\r\n        require(!jackpotCompleted);\r\n        require(msg.sender != owner);\r\n        address oldOwner = countryIndexToOwner[_tokenId];\r\n        address newOwner = msg.sender;\r\n\r\n        // Making sure token owner is not sending to self\r\n        require(oldOwner != newOwner);\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Making sure sent amount is greater than or equal to the sellingPrice\r\n        require(msg.value >= sellingPrice);\r\n\r\n        uint256 sellingPrice = countryIndexToPrice[_tokenId];\r\n        uint256 lastSellingPrice = countryToLastPrice[_tokenId];\r\n\r\n        // Update prices\r\n        if (sellingPrice.mul(2) < firstStepLimit) {\r\n            // first stage\r\n            countryIndexToPrice[_tokenId] = sellingPrice.mul(2);\r\n        } else if (sellingPrice.mul(4).div(10) < secondStepLimit) {\r\n            // second stage\r\n            countryIndexToPrice[_tokenId] = sellingPrice.add(sellingPrice.mul(4).div(10));\r\n        } else if(sellingPrice.mul(2).div(10) < thirdStepLimit){\r\n            // third stage\r\n            countryIndexToPrice[_tokenId] = sellingPrice.add(sellingPrice.mul(2).div(10));\r\n        }else {\r\n            // fourth stage\r\n            countryIndexToPrice[_tokenId] = sellingPrice.add(sellingPrice.mul(15).div(100));\r\n        }\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n        //update last price to current selling price\r\n        countryToLastPrice[_tokenId] = sellingPrice;\r\n        // Pay previous tokenOwner if owner is not initial creator of country\r\n        if (oldOwner != owner) {\r\n            uint256 priceDifference = sellingPrice.sub(lastSellingPrice);\r\n            uint256 oldOwnerPayment = lastSellingPrice.add(priceDifference.sub(priceDifference.div(2)));\r\n            oldOwner.transfer(oldOwnerPayment);\r\n        }\r\n\r\n        emit TokenSold(_tokenId, sellingPrice, countryIndexToPrice[_tokenId], oldOwner, newOwner, countries[_tokenId].name);\r\n\r\n        uint256 purchaseExcess = msg.value.sub(sellingPrice);\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n\r\n    //@notice set country rank by providing index, country name and rank\r\n    function setCountryRank(uint256 _tokenId, string _name, uint256 _rank) public onlyOwner{\r\n        require(_compareStrings(countries[_tokenId].name, _name));\r\n        countryToRank[_tokenId] = _rank;\r\n    }\r\n\r\n    ///@notice set jackpotComplete to true and transfer 20 percent share of jackpot to owner\r\n    function setJackpotCompleted() public onlyOwner{\r\n        jackpotCompleted = true;\r\n        finalJackpotValue = address(this).balance;\r\n        uint256 jackpotShare = ((address(this).balance).mul(20)).div(100);\r\n        msg.sender.transfer(jackpotShare);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    /// @notice Allow pre-approved user to take ownership of a token\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = countryIndexToOwner[_tokenId];\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Making sure transfer is approved\r\n        require(_approved(newOwner, _tokenId));\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n\r\n    /// @notice Get all tokens of a particular address\r\n    function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalCountries = totalSupply();\r\n            uint256 resultIndex = 0;\r\n            uint256 countryId;\r\n\r\n            for (countryId = 0; countryId < totalCountries; countryId++) {\r\n                if (countryIndexToOwner[countryId] == _owner)\r\n                {\r\n                    result[resultIndex] = countryId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of country tokens.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return countries.length;\r\n    }\r\n\r\n    /// @notice Owner initates the transfer of the token to another account\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public {\r\n        require(!jackpotCompleted);\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Third-party initiates transfer of token from address _from to address _to\r\n    /// @param _from The address for the token to be transferred from.\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public {\r\n        require(!jackpotCompleted);\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /*** PRIVATE FUNCTIONS ***/\r\n    /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n\r\n    /// For checking approval of transfer for address _to\r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n        return countryIndexToApproved[_tokenId] == _to;\r\n    }\r\n\r\n\r\n    /// For creating Country\r\n    function _createCountry(string _name, uint256 _price) private {\r\n        Country memory country = Country({\r\n            name: _name\r\n        });\r\n\r\n        uint256 newCountryId = countries.push(country) - 1;\r\n\r\n        countryIndexToPrice[newCountryId] = _price;\r\n        countryIndexToOwner[newCountryId] = msg.sender;\r\n        ownershipTokenCount[msg.sender] = ownershipTokenCount[msg.sender].add(1);\r\n    }\r\n\r\n    /// Check for token ownership\r\n    function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n        return claimant == countryIndexToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Assigns ownership of a specific Country to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        // clear any previously approved ownership exchange\r\n        delete countryIndexToApproved[_tokenId];\r\n\r\n        // Since the number of countries is capped to 32 we can't overflow this\r\n        ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\r\n        //transfer ownership\r\n        countryIndexToOwner[_tokenId] = _to;\r\n\r\n        ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\r\n        // Emit the transfer event.\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _compareStrings(string a, string b) private pure returns (bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rankShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countryIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setJackpotCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpotTotalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createCountry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpotClaimedForCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_rank\",\"type\":\"uint256\"}],\"name\":\"setCountryRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countryToRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryIndex\",\"type\":\"uint256\"}],\"name\":\"getEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countryIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CountryJackpot","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e38a511a75903b44f05ac7a7fea44f2ceca457033833896cc8c8095fe76e9e8e"}]}