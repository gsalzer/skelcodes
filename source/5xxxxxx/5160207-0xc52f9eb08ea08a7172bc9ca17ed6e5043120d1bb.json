{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract CryptoElections {\r\n\r\n    /* Define variable owner of the type address */\r\n    address creator;\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCountryOwner(uint256 countryId) {\r\n        require(countries[countryId].president==msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyCityOwner(uint cityId) {\r\n        require(cities[cityId].mayor==msg.sender);\r\n        _;\r\n    }\r\n\r\n    struct Country {\r\n        address president;\r\n        string slogan;\r\n        string flagUrl;\r\n    }\r\n    struct City {\r\n        address mayor;\r\n        string slogan;\r\n        string picture;\r\n        uint purchases;\r\n    }\r\n    bool maintenance=false;\r\n    event withdrawalEvent(address user,uint value);\r\n    event pendingWithdrawalEvent(address user,uint value);\r\n    event assignCountryEvent(address user,uint countryId);\r\n    event buyCityEvent(address user,uint cityId);\r\n    mapping(uint => Country) public countries ;\r\n    mapping(uint =>  uint[]) public countriesCities ;\r\n    mapping(uint =>  uint) public citiesCountries ;\r\n\r\n    mapping(uint =>  uint) public cityPopulation ;\r\n    mapping(uint => City) public cities;\r\n    mapping(address => uint[]) public userCities;\r\n    mapping(address => uint) public userPendingWithdrawals;\r\n    mapping(address => string) public userNicknames;\r\n\r\n    function CryptoElections() public {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    /* This function is executed at initialization and sets the owner of the contract */\r\n    /* Function to recover the funds on the contract */\r\n    function kill() public\r\n    onlyCreator()\r\n    {\r\n        selfdestruct(creator);\r\n    }\r\n\r\n    function transfer(address newCreator) public\r\n    onlyCreator()\r\n    {\r\n        creator=newCreator;\r\n    }\r\n\r\n\r\n\r\n    // Contract initialisation\r\n    function addCountryCities(uint countryId,uint[] _cities)  public\r\n    onlyCreator()\r\n    {\r\n        countriesCities[countryId] = _cities;\r\n        for (uint i = 0;i<_cities.length;i++) {\r\n            citiesCountries[_cities[i]] = countryId;\r\n\r\n        }\r\n    }\r\n    function setMaintenanceMode(bool _maintenance) public\r\n    onlyCreator()\r\n    {\r\n        maintenance=_maintenance;\r\n    }\r\n\r\n\r\n    // Contract initialisation\r\n    function addCitiesPopulation(uint[] _cities,uint[]_populations)  public\r\n    onlyCreator()\r\n    {\r\n\r\n        for (uint i = 0;i<_cities.length;i++) {\r\n\r\n            cityPopulation[_cities[i]] = _populations[i];\r\n        }\r\n    }\r\n\r\n    function setCountrySlogan(uint countryId,string slogan) public\r\n    onlyCountryOwner(countryId)\r\n    {\r\n        countries[countryId].slogan = slogan;\r\n    }\r\n\r\n    function setCountryPicture(uint countryId,string _flagUrl) public\r\n    onlyCountryOwner(countryId)\r\n    {\r\n        countries[countryId].flagUrl = _flagUrl;\r\n    }\r\n\r\n    function setCitySlogan(uint256 cityId,string _slogan) public\r\n    onlyCityOwner(cityId)\r\n    {\r\n        cities[cityId].slogan = _slogan;\r\n    }\r\n\r\n    function setCityPicture(uint256 cityId,string _picture) public\r\n    onlyCityOwner(cityId)\r\n    {\r\n        cities[cityId].picture = _picture;\r\n    }\r\n\r\n\r\n    function withdraw() public {\r\n        if (maintenance) revert();\r\n        uint amount = userPendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n\r\n        userPendingWithdrawals[msg.sender] = 0;\r\n        withdrawalEvent(msg.sender,amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function getPrices(uint purchases) public pure returns (uint[4]) {\r\n        uint price = 20000000000000000; // 16x0\r\n        uint pricePrev = 20000000000000000;\r\n        uint systemCommission = 19000000000000000;\r\n        uint presidentCommission = 1000000000000000;\r\n        uint ownerCommission;\r\n\r\n        for (uint i = 1;i<=purchases;i++) {\r\n            if (i<=7)\r\n                price = price*2;\r\n            else\r\n                price = (price*12)/10;\r\n\r\n            presidentCommission = price/100;\r\n            systemCommission = (price-pricePrev)*2/10;\r\n            ownerCommission = price-presidentCommission-systemCommission;\r\n\r\n            pricePrev = price;\r\n        }\r\n        return [price,systemCommission,presidentCommission,ownerCommission];\r\n    }\r\n\r\n    function setNickname(string nickname) public {\r\n        if (maintenance) revert();\r\n        userNicknames[msg.sender] = nickname;\r\n    }\r\n\r\n    function _assignCountry(uint countryId)    private returns (bool) {\r\n        uint  totalPopulation;\r\n        uint  controlledPopulation;\r\n\r\n        uint  population;\r\n        for (uint i = 0;i<countriesCities[countryId].length;i++) {\r\n            population = cityPopulation[countriesCities[countryId][i]];\r\n            if (cities[countriesCities[countryId][i]].mayor==msg.sender) {\r\n                controlledPopulation += population;\r\n            }\r\n            totalPopulation += population;\r\n        }\r\n        if (controlledPopulation*2>(totalPopulation)) {\r\n            countries[countryId].president = msg.sender;\r\n            assignCountryEvent(msg.sender,countryId);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function buyCity(uint cityId) payable  public  {\r\n        if (maintenance) revert();\r\n        uint[4] memory prices = getPrices(cities[cityId].purchases);\r\n\r\n        if (cities[cityId].mayor==msg.sender) {\r\n            revert();\r\n        }\r\n        if (cityPopulation[cityId]==0) {\r\n            revert();\r\n        }\r\n\r\n        if ( msg.value+userPendingWithdrawals[msg.sender]>=prices[0]) {\r\n            // use user limit\r\n            userPendingWithdrawals[msg.sender] = userPendingWithdrawals[msg.sender]+msg.value-prices[0];\r\n            pendingWithdrawalEvent(msg.sender,userPendingWithdrawals[msg.sender]+msg.value-prices[0]);\r\n\r\n            cities[cityId].purchases = cities[cityId].purchases+1;\r\n\r\n            userPendingWithdrawals[cities[cityId].mayor] += prices[3];\r\n            pendingWithdrawalEvent(cities[cityId].mayor,prices[3]);\r\n\r\n            if (countries[citiesCountries[cityId]].president==0) {\r\n                userPendingWithdrawals[creator] += prices[2];\r\n                pendingWithdrawalEvent(creator,prices[2]);\r\n\r\n            } else {\r\n                userPendingWithdrawals[countries[citiesCountries[cityId]].president] += prices[2];\r\n                pendingWithdrawalEvent(countries[citiesCountries[cityId]].president,prices[2]);\r\n            }\r\n            // change mayor\r\n            if (cities[cityId].mayor>0) {\r\n                _removeUserCity(cities[cityId].mayor,cityId);\r\n            }\r\n\r\n\r\n\r\n            cities[cityId].mayor = msg.sender;\r\n            _addUserCity(msg.sender,cityId);\r\n\r\n            _assignCountry(citiesCountries[cityId]);\r\n\r\n            //send money to creator\r\n            creator.transfer(prices[1]);\r\n            buyCityEvent(msg.sender,cityId);\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    function getUserCities(address user) public view returns (uint[]) {\r\n        return userCities[user];\r\n    }\r\n\r\n    function _addUserCity(address user,uint cityId) private {\r\n        bool added = false;\r\n        for (uint i = 0; i<userCities[user].length; i++) {\r\n            if (userCities[user][i]==0) {\r\n                userCities[user][i] = cityId;\r\n                added = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!added)\r\n            userCities[user].push(cityId);\r\n    }\r\n\r\n    function _removeUserCity(address user,uint cityId) private {\r\n        for (uint i = 0; i<userCities[user].length; i++) {\r\n            if (userCities[user][i]==cityId) {\r\n                delete userCities[user][i];\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"},{\"name\":\"_cities\",\"type\":\"uint256[]\"}],\"name\":\"addCountryCities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citiesCountries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"_picture\",\"type\":\"string\"}],\"name\":\"setCityPicture\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countries\",\"outputs\":[{\"name\":\"president\",\"type\":\"address\"},{\"name\":\"slogan\",\"type\":\"string\"},{\"name\":\"flagUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"setNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"},{\"name\":\"slogan\",\"type\":\"string\"}],\"name\":\"setCountrySlogan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"_slogan\",\"type\":\"string\"}],\"name\":\"setCitySlogan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countriesCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cities\",\"type\":\"uint256[]\"},{\"name\":\"_populations\",\"type\":\"uint256[]\"}],\"name\":\"addCitiesPopulation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNicknames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cities\",\"outputs\":[{\"name\":\"mayor\",\"type\":\"address\"},{\"name\":\"slogan\",\"type\":\"string\"},{\"name\":\"picture\",\"type\":\"string\"},{\"name\":\"purchases\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cityId\",\"type\":\"uint256\"}],\"name\":\"buyCity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maintenance\",\"type\":\"bool\"}],\"name\":\"setMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchases\",\"type\":\"uint256\"}],\"name\":\"getPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"},{\"name\":\"_flagUrl\",\"type\":\"string\"}],\"name\":\"setCountryPicture\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cityPopulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"pendingWithdrawalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"assignCountryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint256\"}],\"name\":\"buyCityEvent\",\"type\":\"event\"}]","ContractName":"CryptoElections","CompilerVersion":"v0.4.20-nightly.2018.1.5+commit.bca01f8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a28c0de977c53b373c3378ba77c7671cd907de6978f07f65160579d53296da35"}]}