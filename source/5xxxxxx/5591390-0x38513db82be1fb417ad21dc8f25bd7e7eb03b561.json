{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\nlibrary strings {\r\n    \r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal pure returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private pure {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    \r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint cnt) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            cnt++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n     /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal pure returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n}\r\n\r\n/* Helper String Functions for Game Manager Contract\r\n * @title String Healpers\r\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\r\n */\r\ncontract StringHelpers {\r\n    using strings for *;\r\n    \r\n    function stringToBytes32(string memory source) internal returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) constant internal returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}\r\n\r\n\r\n/* Controls state and access rights for contract functions\r\n * @title Operational Control\r\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\r\n * Inspired and adapted from contract created by OpenZeppelin\r\n * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\r\n */\r\ncontract OperationalControl {\r\n    // Facilitates access & control for the game.\r\n    // Roles:\r\n    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\r\n    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\r\n    //  -otherManagers: Contracts that need access to functions for gameplay\r\n\r\n    /// @dev Emited when contract is upgraded\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public managerPrimary;\r\n    address public managerSecondary;\r\n    address public bankManager;\r\n\r\n    // Contracts that require access for gameplay\r\n    mapping(address => uint8) public otherManagers;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\r\n    bool public error = false;\r\n\r\n    /// @dev Operation modifiers for limiting access\r\n    modifier onlyManager() {\r\n        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBanker() {\r\n        require(msg.sender == bankManager);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOtherManagers() {\r\n        require(otherManagers[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier anyOperator() {\r\n        require(\r\n            msg.sender == managerPrimary ||\r\n            msg.sender == managerSecondary ||\r\n            msg.sender == bankManager ||\r\n            otherManagers[msg.sender] == 1\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\r\n    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\r\n        require(_newOp != address(0));\r\n\r\n        otherManagers[_newOp] = _state;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Primary Manager.\r\n    function setPrimaryManager(address _newGM) external onlyManager {\r\n        require(_newGM != address(0));\r\n\r\n        managerPrimary = _newGM;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Secondary Manager.\r\n    function setSecondaryManager(address _newGM) external onlyManager {\r\n        require(_newGM != address(0));\r\n\r\n        managerSecondary = _newGM;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Banker.\r\n    function setBanker(address _newBK) external onlyManager {\r\n        require(_newBK != address(0));\r\n\r\n        bankManager = _newBK;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract has Error\r\n    modifier whenError {\r\n        require(error);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any Operator role to pause the contract.\r\n    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\r\n    function pause() external onlyManager whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\r\n    /// @notice This is public rather than external so it can be called by derived contracts. \r\n    function unpause() public onlyManager whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\r\n    /// @notice This is public rather than external so it can be called by derived contracts. \r\n    function hasError() public onlyManager whenPaused {\r\n        error = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\r\n    /// @notice This is public rather than external so it can be called by derived contracts. \r\n    function noError() public onlyManager whenPaused {\r\n        error = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC827 interface, an extension of ERC20 token standard\r\n *\r\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\r\n * @dev methods to transfer value and data and execute calls in transfers and\r\n * @dev approvals.\r\n */\r\ncontract ERC827 is ERC20 {\r\n  function approveAndCall( address _spender, uint256 _value, bytes _data) public payable returns (bool);\r\n  function transferAndCall( address _to, uint256 _value, bytes _data) public payable returns (bool);\r\n  function transferFromAndCall(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n    public\r\n    payable\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/* solium-disable security/no-low-level-calls */\r\n/**\r\n * @title ERC827, an extension of ERC20 token standard\r\n *\r\n * @dev Implementation the ERC827, following the ERC20 standard with extra\r\n * @dev methods to transfer value and data and execute calls in transfers and\r\n * @dev approvals.\r\n *\r\n * @dev Uses OpenZeppelin StandardToken.\r\n */\r\ncontract ERC827Token is ERC827, StandardToken {\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. It allows to\r\n   * @dev approve the transfer of value and execute a call with the sent data.\r\n   *\r\n   * @dev Beware that changing an allowance with this method brings the risk that\r\n   * @dev someone may use both the old and the new allowance by unfortunate\r\n   * @dev transaction ordering. One possible solution to mitigate this race condition\r\n   * @dev is to first reduce the spender's allowance to 0 and set the desired value\r\n   * @dev afterwards:\r\n   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * @param _spender The address that will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\r\n    require(_spender != address(this));\r\n\r\n    super.approve(_spender, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n   * @dev address and execute a call with the sent data on the same transaction\r\n   *\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\r\n    require(_to != address(this));\r\n\r\n    super.transfer(_to, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_to.call.value(msg.value)(_data));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\r\n   * @dev another and make a contract call on the same transaction\r\n   *\r\n   * @param _from The address which you want to send tokens from\r\n   * @param _to The address which you want to transfer to\r\n   * @param _value The amout of tokens to be transferred\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferFromAndCall(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n    public payable returns (bool)\r\n  {\r\n    require(_to != address(this));\r\n\r\n    super.transferFrom(_from, _to, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_to.call.value(msg.value)(_data));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n   * @dev an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To increment\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n  function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\r\n    require(_spender != address(this));\r\n\r\n    super.increaseApproval(_spender, _addedValue);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n   * @dev an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n  function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\r\n    require(_spender != address(this));\r\n\r\n    super.decreaseApproval(_spender, _subtractedValue);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n /**\r\n * @title Mintable token\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract CSCResource is ERC827Token, OperationalControl {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  // Token Name\r\n  string public NAME;\r\n\r\n  // Token Symbol\r\n  string public SYMBOL;\r\n\r\n  // Token decimals\r\n  uint public constant DECIMALS = 0;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   */\r\n  function CSCResource(string _name, string _symbol, uint _initialSupply) public {\r\n\r\n    // Create any address, can be transferred\r\n    managerPrimary = msg.sender;\r\n    managerSecondary = msg.sender;\r\n    bankManager = msg.sender;\r\n\r\n    NAME = _name;\r\n    SYMBOL = _symbol;\r\n    \r\n    // Create initial supply\r\n    totalSupply_ = totalSupply_.add(_initialSupply);\r\n    balances[msg.sender] = balances[msg.sender].add(_initialSupply);\r\n\r\n    emit Mint(msg.sender, _initialSupply);\r\n    emit Transfer(address(0), msg.sender, _initialSupply);\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }  \r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(address _to, uint256 _amount)  public anyOperator returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract CSCResourceFactory is OperationalControl, StringHelpers {\r\n\r\n    event CSCResourceCreated(string resourceContract, address contractAddress, uint256 amount); \r\n\r\n    mapping(uint16 => address) public resourceIdToAddress; \r\n    mapping(bytes32 => address) public resourceNameToAddress; \r\n    mapping(uint16 => bytes32) public resourceIdToName; \r\n\r\n    uint16 resourceTypeCount;\r\n\r\n    function CSCResourceFactory() public {\r\n        managerPrimary = msg.sender;\r\n        managerSecondary = msg.sender;\r\n        bankManager = msg.sender;\r\n\r\n    }\r\n\r\n    function createNewCSCResource(string _name, string _symbol, uint _initialSupply) public anyOperator {\r\n\r\n        require(resourceNameToAddress[stringToBytes32(_name)] == 0x0);\r\n\r\n        address resourceContract = new CSCResource(_name, _symbol, _initialSupply);\r\n\r\n        \r\n        resourceIdToAddress[resourceTypeCount] = resourceContract;\r\n        resourceNameToAddress[stringToBytes32(_name)] = resourceContract;\r\n        resourceIdToName[resourceTypeCount] = stringToBytes32(_name);\r\n        \r\n        emit CSCResourceCreated(_name, resourceContract, _initialSupply);\r\n\r\n        //Inc. for next resource\r\n        resourceTypeCount += 1;\r\n\r\n    }\r\n\r\n    function setResourcesPrimaryManager(address _op) public onlyManager {\r\n        \r\n        require(_op != address(0));\r\n\r\n        uint16 totalResources = getResourceCount();\r\n\r\n        for(uint16 i = 0; i < totalResources; i++) {\r\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\r\n            resContract.setPrimaryManager(_op);\r\n        }\r\n\r\n    }\r\n\r\n    function setResourcesSecondaryManager(address _op) public onlyManager {\r\n\r\n        require(_op != address(0));\r\n\r\n        uint16 totalResources = getResourceCount();\r\n\r\n        for(uint16 i = 0; i < totalResources; i++) {\r\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\r\n            resContract.setSecondaryManager(_op);\r\n        }\r\n\r\n    }\r\n\r\n    function setResourcesBanker(address _op) public onlyManager {\r\n\r\n        require(_op != address(0));\r\n\r\n        uint16 totalResources = getResourceCount();\r\n\r\n        for(uint16 i = 0; i < totalResources; i++) {\r\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\r\n            resContract.setBanker(_op);\r\n        }\r\n\r\n    }\r\n\r\n    function setResourcesOtherManager(address _op, uint8 _state) public anyOperator {\r\n\r\n        require(_op != address(0));\r\n\r\n        uint16 totalResources = getResourceCount();\r\n\r\n        for(uint16 i = 0; i < totalResources; i++) {\r\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\r\n            resContract.setOtherManager(_op, _state);\r\n        }\r\n\r\n    }\r\n\r\n    function withdrawFactoryResourceBalance(uint16 _resId) public onlyBanker {\r\n\r\n        require(resourceIdToAddress[_resId] != 0);\r\n\r\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\r\n        uint256 resBalance = resContract.balanceOf(this);\r\n        resContract.transfer(bankManager, resBalance);\r\n\r\n    }\r\n\r\n    function transferFactoryResourceAmount(uint16 _resId, address _to, uint256 _amount) public onlyBanker {\r\n\r\n        require(resourceIdToAddress[_resId] != 0);\r\n        require(_to != address(0));\r\n\r\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\r\n        uint256 resBalance = resContract.balanceOf(this);\r\n        require(resBalance >= _amount);\r\n\r\n        resContract.transfer(_to, _amount);\r\n    }\r\n\r\n    function mintResource(uint16 _resId, uint256 _amount) public onlyBanker {\r\n\r\n        require(resourceIdToAddress[_resId] != 0);\r\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\r\n        resContract.mint(this, _amount);\r\n    }\r\n\r\n    function burnResource(uint16 _resId, uint256 _amount) public onlyBanker {\r\n\r\n        require(resourceIdToAddress[_resId] != 0);\r\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\r\n        resContract.burn(_amount);\r\n    }\r\n\r\n    function getResourceName(uint16 _resId) public view returns (bytes32 name) {\r\n        return resourceIdToName[_resId];\r\n    }\r\n\r\n    function getResourceCount() public view returns (uint16 resourceTotal) {\r\n        return resourceTypeCount;\r\n    }\r\n\r\n    function getResourceBalance(uint16 _resId, address _wallet) public view returns (uint256 amt) {\r\n\r\n        require(resourceIdToAddress[_resId] != 0);\r\n\r\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\r\n        return resContract.balanceOf(_wallet);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev helps in fetching the wallet resouce balance\r\n    * @param _wallet The wallet address\r\n    */\r\n    function getWalletResourceBalance(address _wallet) external view returns(uint256[] resourceBalance){\r\n        require(_wallet != address(0));\r\n        \r\n        uint16 totalResources = getResourceCount();\r\n        \r\n        uint256[] memory result = new uint256[](totalResources);\r\n        \r\n        for(uint16 i = 0; i < totalResources; i++) {\r\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\r\n            result[i] = resContract.balanceOf(_wallet);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"otherManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGM\",\"type\":\"address\"}],\"name\":\"setSecondaryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"noError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hasError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerPrimary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOp\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setOtherManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGM\",\"type\":\"address\"}],\"name\":\"setPrimaryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"error\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerSecondary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBK\",\"type\":\"address\"}],\"name\":\"setBanker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CSCResource","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000026bf961000000000000000000000000000000000000000000000000000000000000000449726f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064353432d49520000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://817ec102c5e476fd238656600cb6c88534196ae894806746d6b59682322f4dd5"}]}