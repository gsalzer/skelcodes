{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Commons {\r\n\r\n    int256 constant INT256_MIN = int256((uint256(1) << 255));\r\n    int256 constant INT256_MAX = int256(~((uint256(1) << 255)));\r\n    uint256 constant UINT256_MIN = 0;\r\n    uint256 constant UINT256_MAX = ~uint256(0);\r\n\r\n    struct IndexElem {\r\n        bytes32 mappingId;\r\n        int nOp;\r\n    }\r\n\r\n    function Commons() internal { }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address internal owner;\r\n\r\n    event LogTransferOwnership(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() internal\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier ownerOnly()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) external\r\n        ownerOnly\r\n    {\r\n        require(_newOwner != address(0));\r\n        emit LogTransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract Authorized is Ownable {\r\n\r\n    struct User {\r\n        string friendlyName;\r\n        string offChainIdentity;\r\n        bool isRegulator;\r\n        bool isProducer;\r\n        bool isWinery;\r\n    }\r\n\r\n    mapping (address => User) public onChainIdentities;    \r\n    mapping (bytes32 => address) public onChainAddresses;\r\n\r\n    event LogSetUser\r\n    (\r\n        address account, \r\n        string oldFriendlyName, \r\n        string oldOffChainIdentity, \r\n        bool oldIsProducer, \r\n        bool oldIsWinery, \r\n        bool oldIsRegulator, \r\n        address indexed operationSender\r\n    );\r\n\r\n    event LogSetWinery\r\n    (\r\n        address winery, \r\n        bool oldIsValid, \r\n        bool isValid, \r\n        address indexed operationSender\r\n    );\r\n\r\n    event LogSetRegulator\r\n    (\r\n        address regulator, \r\n        bool oldValue, \r\n        bool value, \r\n        address indexed operationSender\r\n    );\r\n\r\n    event LogSetProducer\r\n    (\r\n        address producer, \r\n        bool oldValue, \r\n        bool value, \r\n        address indexed operationSender\r\n    );\r\n\r\n    function Authorized() internal { }\r\n\r\n    modifier producersOnly() {\r\n        require(onChainIdentities[msg.sender].isProducer);\r\n        _;\r\n    }\r\n\r\n    modifier wineriesOnly() {\r\n        require(onChainIdentities[msg.sender].isWinery);\r\n        _;\r\n    }\r\n\r\n    modifier regulatorsOnly() {\r\n        require(onChainIdentities[msg.sender].isRegulator);\r\n        _;\r\n    }\r\n\r\n    function setUser(\r\n        address _address,\r\n        string _friendlyName,\r\n        string _offChainIdentity,\r\n        bool _isRegulator,\r\n        bool _isProducer,\r\n        bool _isWinery\r\n    ) \r\n        public\r\n        ownerOnly\r\n    {\r\n        emit LogSetUser (\r\n            _address, \r\n            onChainIdentities[_address].friendlyName, \r\n            onChainIdentities[_address].offChainIdentity, \r\n            onChainIdentities[_address].isProducer, \r\n            onChainIdentities[_address].isWinery, \r\n            onChainIdentities[_address].isRegulator, \r\n            msg.sender\r\n        );\r\n        onChainAddresses[keccak256(_offChainIdentity)] = _address;\r\n        onChainIdentities[_address].friendlyName = _friendlyName;\r\n        onChainIdentities[_address].offChainIdentity = _offChainIdentity;\r\n        onChainIdentities[_address].isRegulator = _isRegulator;\r\n        onChainIdentities[_address].isProducer = _isProducer;\r\n        onChainIdentities[_address].isWinery = _isWinery;\r\n    }\r\n\r\n    function getOffChainIdentity(address _address) internal view returns (string offChainIdentity)\r\n    {\r\n        return onChainIdentities[_address].offChainIdentity;\r\n    }\r\n\r\n    function getUser(address _address)\r\n        external view\r\n        returns (\r\n            string friendlyName, \r\n            string offChainIdentity, \r\n            bool isRegulator, \r\n            bool isProducer, \r\n            bool isWinery\r\n        ) \r\n    {\r\n        return (\r\n            onChainIdentities[_address].friendlyName,\r\n            onChainIdentities[_address].offChainIdentity,\r\n            onChainIdentities[_address].isRegulator,\r\n            onChainIdentities[_address].isProducer,\r\n            onChainIdentities[_address].isWinery\r\n        );\r\n    }\r\n\r\n    function getAddress(string _offChainIdentity) public view returns (address) {\r\n        return onChainAddresses[keccak256(_offChainIdentity)];\r\n    }\r\n\r\n    function setRegulator(address _address, bool _newValue) external ownerOnly {\r\n        emit LogSetRegulator(_address, onChainIdentities[_address].isRegulator, _newValue, msg.sender);\r\n        onChainIdentities[_address].isRegulator = _newValue;\r\n    }\r\n\r\n    function setProducer(address _address, bool _newValue) external ownerOnly {\r\n        emit LogSetProducer(_address, onChainIdentities[_address].isProducer, _newValue, msg.sender);\r\n        onChainIdentities[_address].isProducer = _newValue;\r\n    }\r\n\r\n    function setWinery(address _address, bool _newValue) external ownerOnly {\r\n        emit LogSetProducer(_address, onChainIdentities[_address].isWinery, _newValue, msg.sender);\r\n        onChainIdentities[_address].isWinery = _newValue;\r\n    }\r\n\r\n}\r\n\r\ncontract WineryOperations is Commons, Authorized {\r\n\r\n    uint256 constant OPERATION_SEARCH_MAX = uint(INT256_MAX);\r\n\r\n    struct WineryOperation {\r\n        address operationSender;\r\n        string offChainIdentity;   //cuaa\r\n        string operationID;        // hash (offChainIdentity, operationDate, operationCode)\r\n        string operationCode;      //Es. IMBO\r\n        uint operationDate;\r\n        uint16 areaCode;           // mapping\r\n        string codeICQRF;          // codice_icqrf_stabilimento\r\n        string attributes;\r\n        Product[] prods;\r\n        IndexElem[] parentList;\r\n        IndexElem[] childList;        \r\n    }\r\n\r\n    struct Product {\r\n        string productID;      // codice_primario + codice_secondario\r\n        string quantity;        // 1,345 kg\r\n        string attributes;      // dsda; dasd;; sadas;\r\n    }\r\n\r\n    mapping(bytes32 => WineryOperation[]) public wineries;\r\n\r\n    event LogAddWineryOperation(\r\n        string _trackID,\r\n        address operationSender,\r\n        address indexed onChainIdentity,\r\n        string operationID,      \r\n        uint index\r\n    );\r\n\r\n    event LogAddProduct(\r\n        string _trackID,\r\n        address operationSender,\r\n        address indexed onChainIdentity,\r\n        string indexed operationID,\r\n        string productID\r\n    );\r\n\r\n    function WineryOperations() internal { }\r\n    \r\n    // ============================================================================================\r\n    // External functions for wineries\r\n    // ============================================================================================\r\n\r\n    function addWineryOperation(\r\n        string _trackID,\r\n        string _operationID,\r\n        string _operationCode,\r\n        uint _operationDate,\r\n        uint16 _areaCode,\r\n        string _codeICQRF\r\n    )\r\n        external\r\n        wineriesOnly\r\n        returns (bool success)\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, msg.sender);\r\n        addWineryOperation(\r\n            _mappingID,\r\n            msg.sender,\r\n            onChainIdentities[msg.sender].offChainIdentity,\r\n            _operationID,\r\n            _operationCode,\r\n            _operationDate,\r\n            _areaCode,\r\n            _codeICQRF\r\n        );\r\n        emit LogAddWineryOperation(\r\n            _trackID,\r\n            msg.sender,\r\n            msg.sender,\r\n            _operationID,\r\n            wineries[_mappingID].length\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function addProduct(\r\n        string _trackID,\r\n        uint _index,\r\n        string _productID,\r\n        string _quantity,\r\n        string _attributes\r\n    )\r\n        external\r\n        wineriesOnly\r\n        returns (bool success)\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, msg.sender);\r\n        addProduct(\r\n            _mappingID,\r\n            _index,\r\n            _productID,\r\n            _quantity,\r\n            _attributes\r\n        );\r\n        emit LogAddProduct(\r\n            _trackID,\r\n            msg.sender,\r\n            msg.sender,\r\n            wineries[_mappingID][_index].operationID,\r\n            _productID\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function addReferenceParentWineryOperation(\r\n        string _trackID,\r\n        uint _numCurOperation,\r\n        string _parentTrackID,\r\n        address _parentWinery,\r\n        int _numParent        \r\n    )\r\n        external\r\n        wineriesOnly\r\n        returns (bool success)\r\n    {\r\n        addRelationshipBindingWineryOperation(\r\n            keccak256(_trackID, msg.sender),\r\n            _numCurOperation,\r\n            keccak256(_parentTrackID, _parentWinery),\r\n            _numParent\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setOperationAttributes(\r\n        string _trackID,\r\n        uint _operationIndex,\r\n        string attributes\r\n    )\r\n        external\r\n        wineriesOnly\r\n        returns (bool success)\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, msg.sender);\r\n        wineries[_mappingID][_operationIndex].attributes = attributes;\r\n        return true;\r\n    }\r\n\r\n    function setProductAttributes(\r\n        string _trackID,\r\n        uint _operationIndex,\r\n        uint _productIndex,\r\n        string attributes\r\n    )\r\n        external\r\n        wineriesOnly\r\n        returns (bool success)\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, msg.sender);\r\n        wineries[_mappingID][_operationIndex].prods[_productIndex].attributes = attributes;\r\n        return true;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // External functions for regulators\r\n    // ============================================================================================\r\n\r\n    function addWineryOperationByRegulator(\r\n        string _trackID,\r\n        string _offChainIdentity,\r\n        string _operationID,\r\n        string _operationCode,\r\n        uint _operationDate,\r\n        uint16 _areaCode,\r\n        string _codeICQRF\r\n    )\r\n        external\r\n        regulatorsOnly\r\n    {\r\n        address _winery = getAddress(_offChainIdentity);\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        addWineryOperation(\r\n            _mappingID,\r\n            msg.sender,\r\n            _offChainIdentity,\r\n            _operationID,\r\n            _operationCode,\r\n            _operationDate,\r\n            _areaCode,\r\n            _codeICQRF\r\n        );\r\n        emit LogAddWineryOperation(\r\n            _trackID,\r\n            msg.sender,\r\n            _winery,\r\n            _operationID,\r\n            wineries[_mappingID].length\r\n        );\r\n    }\r\n    \r\n    function addProductByRegulator(\r\n        string _trackID,\r\n        uint _index,\r\n        string _offChainIdentity,\r\n        string _productID,\r\n        string _quantity,\r\n        string _attributes\r\n    )\r\n        external\r\n        regulatorsOnly\r\n    {\r\n        address _winery = getAddress(_offChainIdentity);\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        addProduct(\r\n            _mappingID,\r\n            _index,\r\n            _productID,\r\n            _quantity,\r\n            _attributes\r\n        );\r\n        emit LogAddProduct(\r\n            _trackID,\r\n            msg.sender,\r\n            _winery,\r\n            wineries[_mappingID][_index].operationID,\r\n            _productID\r\n        );\r\n    }\r\n\r\n    function setOperationAttributesByRegulator(\r\n        string _trackID,\r\n        string _offChainIdentity,\r\n        uint _operationIndex,\r\n        string attributes\r\n    )\r\n        external\r\n        regulatorsOnly\r\n        returns (bool success)\r\n    {     \r\n        address _winery = getAddress(_offChainIdentity);\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        wineries[_mappingID][_operationIndex].attributes = attributes;\r\n        return true;\r\n    }\r\n\r\n    function setProductAttributesByRegulator(\r\n        string _trackID,\r\n        string _offChainIdentity,\r\n        uint _operationIndex,\r\n        uint _productIndex,\r\n        string attributes\r\n    )\r\n        external\r\n        regulatorsOnly\r\n        returns (bool success)\r\n    {\r\n        address _winery = getAddress(_offChainIdentity);\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        wineries[_mappingID][_operationIndex].prods[_productIndex].attributes = attributes;\r\n        return true;\r\n    }\r\n\r\n    function addReferenceParentWineryOperationByRegulator(\r\n        string _trackID,\r\n        string _offChainIdentity,\r\n        uint _numCurOperation,\r\n        string _parentTrackID,\r\n        string _parentOffChainIdentity,\r\n        int _numParent        \r\n    )\r\n        external\r\n        regulatorsOnly\r\n        returns (bool success)\r\n    {\r\n        address _winery = getAddress(_offChainIdentity);\r\n        address _parentWinery = getAddress(_parentOffChainIdentity);\r\n        addRelationshipBindingWineryOperation(\r\n            keccak256(_trackID, _winery),\r\n            _numCurOperation,\r\n            keccak256(_parentTrackID, _parentWinery),\r\n            _numParent\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Helpers for ÐApps\r\n    // ============================================================================================\r\n    \r\n    /// @notice ****\r\n    function getWineryOperation(string _trackID, address _winery, uint _index)\r\n        external view\r\n        returns (\r\n            address operationSender,\r\n            string offChainIdentity,\r\n            string operationID,\r\n            string operationCode,\r\n            uint operationDate,\r\n            uint16 areaCode,\r\n            string codeICQRF,\r\n            string attributes\r\n        )\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        operationSender = wineries[_mappingID][_index].operationSender;\r\n        offChainIdentity = wineries[_mappingID][_index].offChainIdentity;\r\n        operationID = wineries[_mappingID][_index].operationID;\r\n        operationCode = wineries[_mappingID][_index].operationCode;\r\n        operationDate = wineries[_mappingID][_index].operationDate;\r\n        areaCode = wineries[_mappingID][_index].areaCode;\r\n        codeICQRF = wineries[_mappingID][_index].codeICQRF;\r\n        attributes = wineries[_mappingID][_index].attributes;\r\n    }\r\n\r\n    function getProductOperation(string _trackID, address _winery, uint _index, uint _productIndex)\r\n        external view\r\n        returns (\r\n            string productID,\r\n            string quantity,\r\n            string attributes\r\n        )\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        productID = wineries[_mappingID][_index].prods[_productIndex].productID;\r\n        quantity = wineries[_mappingID][_index].prods[_productIndex].quantity;\r\n        attributes = wineries[_mappingID][_index].prods[_productIndex].attributes;\r\n    }\r\n\r\n    function getNumPositionOperation(string _trackID, address _winery, string _operationID)\r\n        external view\r\n        returns (int position)\r\n    {\r\n        bytes32 _mappingID = keccak256(_trackID, _winery);\r\n        for (uint i = 0; i < wineries[_mappingID].length && i < OPERATION_SEARCH_MAX; i++) {\r\n            if (keccak256(wineries[_mappingID][i].operationID) == keccak256(_operationID)) {\r\n                return int(i);\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Private functions\r\n    // ============================================================================================\r\n\r\n    /// @notice TODO Commenti\r\n    function addWineryOperation(\r\n        bytes32 _mappingID,\r\n        address _operationSender,\r\n        string _offChainIdentity,\r\n        string _operationID,\r\n        string _operationCode,\r\n        uint _operationDate,\r\n        uint16 _areaCode,\r\n        string _codeICQRF\r\n    )\r\n        private\r\n    {\r\n        uint size = wineries[_mappingID].length;\r\n        wineries[_mappingID].length++;\r\n        wineries[_mappingID][size].operationSender = _operationSender;\r\n        wineries[_mappingID][size].offChainIdentity = _offChainIdentity;\r\n        wineries[_mappingID][size].operationID = _operationID;\r\n        wineries[_mappingID][size].operationCode = _operationCode;\r\n        wineries[_mappingID][size].operationDate = _operationDate;\r\n        wineries[_mappingID][size].areaCode = _areaCode;\r\n        wineries[_mappingID][size].codeICQRF = _codeICQRF;\r\n    }\r\n\r\n    /// @notice TODO Commenti\r\n    function addProduct(\r\n        bytes32 _mappingID,\r\n        uint _index,\r\n        string _productID,\r\n        string _quantity,\r\n        string _attributes\r\n    )\r\n        private\r\n    {\r\n        wineries[_mappingID][_index].prods.push(\r\n            Product(\r\n                _productID,\r\n                _quantity,\r\n                _attributes\r\n            )\r\n        );\r\n    }\r\n\r\n    function addRelationshipBindingWineryOperation(\r\n        bytes32 _mappingID,\r\n        uint _numCurOperation,\r\n        bytes32 _parentMappingID,        \r\n        int _numParent        \r\n    )\r\n        private\r\n    {\r\n        require(_numCurOperation < OPERATION_SEARCH_MAX);\r\n        require(_numParent >= 0);\r\n        uint _parentIndex = uint(_numParent);\r\n        int _numCurOperationINT = int(_numCurOperation);\r\n        wineries[_mappingID][_numCurOperation].parentList.push(IndexElem(_parentMappingID, _numParent));\r\n        wineries[_parentMappingID][_parentIndex].childList.push(IndexElem(_mappingID, _numCurOperationINT));\r\n    }\r\n\r\n  /*\r\n    \r\n    // ======================================================================================\r\n    // ÐApps helpers\r\n    // ======================================================================================\r\n\r\n\r\n\r\n\r\n    function getParentOperation(bytes32 _mappingID, uint8 _index, uint8 _nParent) external view returns (bytes32 id, int num) {\r\n        id = wineries[_mappingID][_index].parentList[_nParent].mappingId;\r\n        num = wineries[_mappingID][_index].parentList[_nParent].nOp;\r\n    }\r\n\r\n    function getNumParentOperation(bytes32 _mappingID, uint8 _index) external view returns (uint num) {\r\n        num = wineries[_mappingID][_index].parentList.length;\r\n    }\r\n\r\n    function getChildOperation(bytes32 _mappingID, uint8 _index, uint8 _nParent) external view returns (bytes32 id, int num) {\r\n        id = wineries[_mappingID][_index].childList[_nParent].mappingId;\r\n        num = wineries[_mappingID][_index].childList[_nParent].nOp;\r\n    }\r\n\r\n    function getNumChildOperation(bytes32 _mappingID, uint8 _index) external view returns (uint num) {\r\n        num = wineries[_mappingID][_index].childList.length;\r\n    }\r\n    \r\n    function getNumPositionProduct(bytes32 _mappingID, uint8 _nPosOp, string _productId) external view returns (int position) {\r\n        position = -1;\r\n        for (uint8 i = 0; i < wineries[_mappingID][_nPosOp].prods.length; i++) {\r\n            if (keccak256(wineries[_mappingID][_nPosOp].prods[i].productID) == keccak256(_productId))\r\n                position = i;\r\n        }\r\n    }\r\n\r\n    function getNumWineryOperation(bytes32 _mappingID) external view returns (uint num) {\r\n        num = wineries[_mappingID].length;\r\n    }\r\n\r\n    */\r\n\r\n}\r\n\r\ncontract ProducerOperations is Commons, Authorized {\r\n\r\n    // ============================================================================================\r\n    // Producer operations\r\n    // ============================================================================================\r\n\r\n    struct HarvestOperation {\r\n        address operationSender;\r\n        string offChainIdentity;\r\n        string operationID;    // codice_allegato\r\n        uint32 quantity;        // uva_rivendicata (kg)\r\n        uint24 areaCode;        // cod_istat regione_provenienza_uve, mapping\r\n        uint16 year;            // anno raccolta\r\n        string attributes;      \r\n        IndexElem child;\r\n        Vineyard[] vineyards;\r\n    }\r\n\r\n    struct Vineyard {\r\n        uint16 variety;        // varietà mapping descrizione_varieta\r\n        uint24 areaCode;       // codice_istat_comune, mapping dal quale si ricaverà anche prov. e descrizione\r\n        uint32 usedSurface;    // vigneto utilizzato (superficie_utilizzata) mq2\r\n        uint16 plantingYear;\r\n    }\r\n\r\n    mapping(bytes32 => HarvestOperation) public harvests;\r\n    \r\n    event LogStoreHarvestOperation(\r\n        string trackIDs,\r\n        address operationSender,\r\n        address indexed onChainIdentity,\r\n        string operationID\r\n    );\r\n\r\n    event LogAddVineyard(\r\n        string trackIDs,\r\n        address operationSender,\r\n        address indexed onChainIdentity,\r\n        uint24 indexed areaCode       \r\n    );\r\n\r\n    function ProducerOperations() internal { }\r\n    \r\n    // ============================================================================================\r\n    // External functions for producers\r\n    // ============================================================================================\r\n\r\n    /// @notice ****\r\n    /// @dev ****\r\n    /// @param _trackIDs ****\r\n    /// @return true if operation is successful\r\n    function storeHarvestOperation(\r\n        string _trackIDs,\r\n        string _operationID,\r\n        uint32 _quantity,\r\n        uint16 _areaCode,\r\n        uint16 _year,\r\n        string _attributes\r\n    )\r\n        external\r\n        producersOnly\r\n        returns (bool success)\r\n    {\r\n        storeHarvestOperation(\r\n            keccak256(_trackIDs, msg.sender),\r\n            msg.sender,\r\n            getOffChainIdentity(msg.sender),\r\n            _operationID,            \r\n            _quantity,\r\n            _areaCode,\r\n            _year,\r\n            _attributes\r\n        );\r\n        emit LogStoreHarvestOperation(\r\n            _trackIDs,\r\n            msg.sender,\r\n            msg.sender,\r\n            _operationID\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @notice ****\r\n    /// @dev ****\r\n    /// @param _trackIDs ****\r\n    /// @return true if operation is successful\r\n    function addVineyard(\r\n        string _trackIDs,\r\n        uint16 _variety,\r\n        uint24 _areaCode,\r\n        uint32 _usedSurface,\r\n        uint16 _plantingYear\r\n    )\r\n        external\r\n        producersOnly\r\n        returns (bool success)\r\n    {\r\n        addVineyard(\r\n            keccak256(_trackIDs, msg.sender),\r\n            _variety,\r\n            _areaCode,            \r\n            _usedSurface,\r\n            _plantingYear\r\n        );\r\n        emit LogAddVineyard(_trackIDs, msg.sender, msg.sender, _areaCode);\r\n        return true;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // External functions for regulators\r\n    // ============================================================================================\r\n\r\n    function storeHarvestOperationByRegulator(\r\n        string _trackIDs,\r\n        string _offChainIdentity,\r\n        string _operationID,\r\n        uint32 _quantity,\r\n        uint16 _areaCode,\r\n        uint16 _year,\r\n        string _attributes\r\n    )\r\n        external\r\n        regulatorsOnly\r\n        returns (bool success)\r\n    {\r\n        address _producer = getAddress(_offChainIdentity);\r\n        storeHarvestOperation(\r\n            keccak256(_trackIDs,_producer),\r\n            msg.sender,\r\n            _offChainIdentity,\r\n            _operationID,\r\n            _quantity,\r\n            _areaCode,\r\n            _year,\r\n            _attributes\r\n        );\r\n        emit LogStoreHarvestOperation(\r\n            _trackIDs,\r\n            msg.sender,\r\n            _producer,\r\n            _operationID\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function addVineyardByRegulator(\r\n        string _trackIDs,\r\n        string _offChainIdentity,\r\n        uint16 _variety,\r\n        uint24 _areaCode,\r\n        uint32 _usedSurface,\r\n        uint16 _plantingYear\r\n    )\r\n        external\r\n        regulatorsOnly\r\n        returns (bool success)\r\n    {\r\n        address _producer = getAddress(_offChainIdentity);\r\n        require(_producer != address(0));\r\n        addVineyard(\r\n            keccak256(_trackIDs,_producer),\r\n            _variety,\r\n            _areaCode,\r\n            _usedSurface,\r\n            _plantingYear\r\n        );\r\n        emit LogAddVineyard(_trackIDs, msg.sender, _producer, _areaCode);\r\n        return true;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Helpers for ÐApps\r\n    // ============================================================================================\r\n\r\n    function getHarvestOperation(string _trackID, address _producer)\r\n        external view\r\n        returns (\r\n            address operationSender,\r\n            string offChainIdentity,\r\n            string operationID,\r\n            uint32 quantity,\r\n            uint24 areaCode,\r\n            uint16 year,\r\n            string attributes\r\n        )\r\n    {\r\n        bytes32 _mappingID32 = keccak256(_trackID, _producer);\r\n        operationSender = harvests[_mappingID32].operationSender;\r\n        offChainIdentity = harvests[_mappingID32].offChainIdentity;\r\n        operationID = harvests[_mappingID32].operationID;\r\n        quantity = harvests[_mappingID32].quantity;\r\n        areaCode = harvests[_mappingID32].areaCode;\r\n        year = harvests[_mappingID32].year;\r\n        attributes = harvests[_mappingID32].attributes;\r\n    }\r\n\r\n    function getVineyard(string _trackID, address _producer, uint _index)\r\n        external view\r\n        returns (\r\n            uint32 variety,\r\n            uint32 areaCode,\r\n            uint32 usedSurface,\r\n            uint16 plantingYear\r\n        )\r\n    {\r\n        bytes32 _mappingID32 = keccak256(_trackID, _producer);\r\n        variety = harvests[_mappingID32].vineyards[_index].variety;\r\n        areaCode = harvests[_mappingID32].vineyards[_index].areaCode;\r\n        usedSurface = harvests[_mappingID32].vineyards[_index].usedSurface;\r\n        plantingYear = harvests[_mappingID32].vineyards[_index].plantingYear;\r\n    }\r\n\r\n    function getVineyardCount(string _trackID, address _producer)\r\n        external view\r\n        returns (uint numberOfVineyards)\r\n    {\r\n        bytes32 _mappingID32 = keccak256(_trackID, _producer);\r\n        numberOfVineyards = harvests[_mappingID32].vineyards.length;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Private functions\r\n    // ============================================================================================\r\n\r\n    function storeHarvestOperation(\r\n        bytes32 _mappingID,\r\n        address _operationSender,\r\n        string _offChainIdentity,\r\n        string _operationID,\r\n        uint32 _quantity,\r\n        uint24 _areaCode,        \r\n        uint16 _year,\r\n        string _attributes\r\n    )\r\n        private\r\n    {\r\n        harvests[_mappingID].operationSender = _operationSender;\r\n        harvests[_mappingID].offChainIdentity = _offChainIdentity;\r\n        harvests[_mappingID].operationID = _operationID;\r\n        harvests[_mappingID].quantity = _quantity;\r\n        harvests[_mappingID].areaCode = _areaCode;\r\n        harvests[_mappingID].year = _year;\r\n        harvests[_mappingID].attributes = _attributes;\r\n    }\r\n\r\n    function addVineyard(\r\n        bytes32 _mappingID,\r\n        uint16 _variety,\r\n        uint24 _areaCode,\r\n        uint32 _usedSurface,\r\n        uint16 _plantingYear        \r\n    )\r\n        private\r\n    {\r\n        harvests[_mappingID].vineyards.push(\r\n            Vineyard(_variety, _areaCode, _usedSurface, _plantingYear)\r\n        );\r\n    }\r\n    \r\n}\r\n\r\ncontract Upgradable is Ownable {\r\n\r\n    address public newAddress;\r\n    uint    public deprecatedSince;\r\n    string  public version;\r\n    string  public newVersion;\r\n    string  public reason;\r\n\r\n    event LogSetDeprecated(address newAddress, string newVersion, string reason);\r\n\r\n    /**\r\n     *\r\n     */\r\n    function Upgradable(string _version) internal\r\n    {\r\n        version = _version;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function setDeprecated(address _newAddress, string _newVersion, string _reason) external\r\n        ownerOnly\r\n        returns (bool success)\r\n    {\r\n        require(!isDeprecated());\r\n        require(_newAddress != address(this));\r\n        require(!Upgradable(_newAddress).isDeprecated());\r\n        deprecatedSince = now;\r\n        newAddress = _newAddress;\r\n        newVersion = _newVersion;\r\n        reason = _reason;\r\n        emit LogSetDeprecated(_newAddress, _newVersion, _reason);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice check if the contract is deprecated\r\n     */\r\n    function isDeprecated() public view returns (bool deprecated)\r\n    {\r\n        return (deprecatedSince != 0);\r\n    }\r\n}\r\n\r\ncontract SmartBinding is Authorized {\r\n\r\n    mapping (bytes32 => bytes32) public bindingSmartIdentity;\r\n \r\n    event LogBindSmartIdentity (\r\n        string _trackIDs,\r\n        address operationSender,\r\n        address onChainIdentity,\r\n        string smartIdentity\r\n    );\r\n\r\n    function SmartBinding() internal { }\r\n\r\n    // ============================================================================================\r\n    // External functions for wineries\r\n    // ============================================================================================\r\n\r\n    /// @notice ****\r\n    /// @dev ****\r\n    /// @param _trackIDs ****\r\n    /// @return true if operation is successful\r\n    function bindSmartIdentity(string _trackIDs, string _smartIdentity)\r\n        external\r\n        wineriesOnly\r\n    {\r\n        bindingSmartIdentity[keccak256(_smartIdentity, msg.sender)] = keccak256(_trackIDs, msg.sender);\r\n        emit LogBindSmartIdentity(_trackIDs, msg.sender, msg.sender, _smartIdentity);\r\n    }\r\n\r\n    // ============================================================================================\r\n    // External functions for regulators\r\n    // ============================================================================================\r\n    \r\n    /// @notice ****\r\n    /// @dev ****\r\n    /// @param _trackIDs ****\r\n    /// @return true if operation is successful\r\n    function bindSmartIdentityByRegulator(\r\n        string _trackIDs,\r\n        string _offChainIdentity,  \r\n        string _smartIdentity\r\n    )\r\n        external\r\n        regulatorsOnly\r\n    {\r\n        address winery = getAddress(_offChainIdentity);\r\n        bindingSmartIdentity[keccak256(_smartIdentity, winery)] = keccak256(_trackIDs, winery);\r\n        emit LogBindSmartIdentity(_trackIDs, msg.sender, winery, _smartIdentity);\r\n    }\r\n\r\n    // ======================================================================================\r\n    // ÐApps helpers\r\n    // ======================================================================================\r\n\r\n    function getWineryMappingID(string _smartIdentity, string _offChainIdentity)\r\n        external view\r\n        returns (bytes32 wineryMappingID)\r\n    {\r\n        bytes32 index = keccak256(_smartIdentity, getAddress(_offChainIdentity));\r\n        wineryMappingID = bindingSmartIdentity[index];\r\n    }\r\n\r\n}\r\n\r\ncontract WineSupplyChain is\r\n    Commons,\r\n    Authorized,\r\n    Upgradable,\r\n    ProducerOperations,\r\n    WineryOperations,\r\n    SmartBinding\r\n{\r\n\r\n    address public endorsements;\r\n\r\n    function WineSupplyChain(address _endorsements) Upgradable(\"1.0.0\") public {\r\n        endorsements = _endorsements;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // External functions for regulators\r\n    // ============================================================================================\r\n\r\n    /// @notice TODO Inserire commenti\r\n    function startWineryProductByRegulator(\r\n        string _harvestTrackID,\r\n        string _producerOffChainIdentity,\r\n        string _wineryOperationTrackIDs,\r\n        string _wineryOffChainIdentity,\r\n        int _productIndex\r\n    )\r\n        external\r\n        regulatorsOnly\r\n        returns (bool success)\r\n    {\r\n        require(_productIndex >= 0);\r\n        address producer = getAddress(_producerOffChainIdentity);\r\n        bytes32 harvestMappingID = keccak256(_harvestTrackID, producer);\r\n        address winery = getAddress(_wineryOffChainIdentity);\r\n        bytes32 wineryOperationMappingID = keccak256(_wineryOperationTrackIDs, winery);\r\n        harvests[harvestMappingID].child = IndexElem(wineryOperationMappingID, _productIndex);\r\n        wineries[wineryOperationMappingID][uint(_productIndex)].parentList.push(\r\n            IndexElem(harvestMappingID, -1));\r\n        return true;\r\n    }\r\n\r\n    /// @notice TODO Commenti\r\n    // TOCHECK AGGIUNGERE REQUIRE SU TIPO_OPERAZIONE = 'CASD' ???\r\n    function startWinery(\r\n        string _harvestTrackID,\r\n        string _offChainProducerIdentity,\r\n        string _wineryTrackID,\r\n        uint _productIndex\r\n    )\r\n        external\r\n        wineriesOnly\r\n    {\r\n        require(_productIndex >= 0);\r\n        address producer = getAddress(_offChainProducerIdentity);\r\n        bytes32 harvestMappingID = keccak256(_harvestTrackID, producer);\r\n        bytes32 wineryOperationMappingID = keccak256(_wineryTrackID, msg.sender);\r\n        wineries[wineryOperationMappingID][_productIndex].parentList.push(\r\n            IndexElem(harvestMappingID, -1));\r\n    }\r\n\r\n    /// @notice TODO Commenti\r\n    // TOCHECK AGGIUNGERE REQUIRE SU TIPO_OPERAZIONE = 'CASD' ???\r\n    function startProduct(\r\n        string _harvestTrackID,\r\n        string _wineryTrackID,\r\n        string _offChainWineryIdentity,\r\n        int _productIndex\r\n    )\r\n        external\r\n        producersOnly\r\n    {\r\n        require(_productIndex > 0);\r\n        bytes32 harvestMappingID = keccak256(_harvestTrackID, msg.sender);\r\n        address winery = getAddress(_offChainWineryIdentity);\r\n        bytes32 wineryOperationMappingID = keccak256(_wineryTrackID, winery);\r\n        harvests[harvestMappingID].child = IndexElem(wineryOperationMappingID, _productIndex);\r\n    }\r\n\r\n    /// @notice ***\r\n    /// @dev ****\r\n    /// @param _trackIDs **\r\n    /// @param _address **\r\n    /// @return mappingID if ***\r\n    function getMappingID(string _trackIDs, address _address)\r\n        external pure\r\n        returns (bytes32 mappingID)\r\n    {\r\n        mappingID = keccak256(_trackIDs, _address);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_operationIndex\",\"type\":\"uint256\"},{\"name\":\"_productIndex\",\"type\":\"uint256\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"name\":\"setProductAttributes\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"harvests\",\"outputs\":[{\"name\":\"operationSender\",\"type\":\"address\"},{\"name\":\"offChainIdentity\",\"type\":\"string\"},{\"name\":\"operationID\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"uint32\"},{\"name\":\"areaCode\",\"type\":\"uint24\"},{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"attributes\",\"type\":\"string\"},{\"components\":[{\"name\":\"mappingId\",\"type\":\"bytes32\"},{\"name\":\"nOp\",\"type\":\"int256\"}],\"name\":\"child\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_productID\",\"type\":\"string\"},{\"name\":\"_quantity\",\"type\":\"string\"},{\"name\":\"_attributes\",\"type\":\"string\"}],\"name\":\"addProduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bindingSmartIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_operationID\",\"type\":\"string\"},{\"name\":\"_operationCode\",\"type\":\"string\"},{\"name\":\"_operationDate\",\"type\":\"uint256\"},{\"name\":\"_areaCode\",\"type\":\"uint16\"},{\"name\":\"_codeICQRF\",\"type\":\"string\"}],\"name\":\"addWineryOperationByRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_winery\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_productIndex\",\"type\":\"uint256\"}],\"name\":\"getProductOperation\",\"outputs\":[{\"name\":\"productID\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"string\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_smartIdentity\",\"type\":\"string\"}],\"name\":\"bindSmartIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_numCurOperation\",\"type\":\"uint256\"},{\"name\":\"_parentTrackID\",\"type\":\"string\"},{\"name\":\"_parentOffChainIdentity\",\"type\":\"string\"},{\"name\":\"_numParent\",\"type\":\"int256\"}],\"name\":\"addReferenceParentWineryOperationByRegulator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_operationIndex\",\"type\":\"uint256\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"name\":\"setOperationAttributes\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_operationIndex\",\"type\":\"uint256\"},{\"name\":\"_productIndex\",\"type\":\"uint256\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"name\":\"setProductAttributesByRegulator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_operationIndex\",\"type\":\"uint256\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"name\":\"setOperationAttributesByRegulator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wineries\",\"outputs\":[{\"name\":\"operationSender\",\"type\":\"address\"},{\"name\":\"offChainIdentity\",\"type\":\"string\"},{\"name\":\"operationID\",\"type\":\"string\"},{\"name\":\"operationCode\",\"type\":\"string\"},{\"name\":\"operationDate\",\"type\":\"uint256\"},{\"name\":\"areaCode\",\"type\":\"uint16\"},{\"name\":\"codeICQRF\",\"type\":\"string\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_newVersion\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"setDeprecated\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_winery\",\"type\":\"address\"},{\"name\":\"_operationID\",\"type\":\"string\"}],\"name\":\"getNumPositionOperation\",\"outputs\":[{\"name\":\"position\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMappingID\",\"outputs\":[{\"name\":\"mappingID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecatedSince\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_winery\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWineryOperation\",\"outputs\":[{\"name\":\"operationSender\",\"type\":\"address\"},{\"name\":\"offChainIdentity\",\"type\":\"string\"},{\"name\":\"operationID\",\"type\":\"string\"},{\"name\":\"operationCode\",\"type\":\"string\"},{\"name\":\"operationDate\",\"type\":\"uint256\"},{\"name\":\"areaCode\",\"type\":\"uint16\"},{\"name\":\"codeICQRF\",\"type\":\"string\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"friendlyName\",\"type\":\"string\"},{\"name\":\"offChainIdentity\",\"type\":\"string\"},{\"name\":\"isRegulator\",\"type\":\"bool\"},{\"name\":\"isProducer\",\"type\":\"bool\"},{\"name\":\"isWinery\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_variety\",\"type\":\"uint16\"},{\"name\":\"_areaCode\",\"type\":\"uint24\"},{\"name\":\"_usedSurface\",\"type\":\"uint32\"},{\"name\":\"_plantingYear\",\"type\":\"uint16\"}],\"name\":\"addVineyard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_variety\",\"type\":\"uint16\"},{\"name\":\"_areaCode\",\"type\":\"uint24\"},{\"name\":\"_usedSurface\",\"type\":\"uint32\"},{\"name\":\"_plantingYear\",\"type\":\"uint16\"}],\"name\":\"addVineyardByRegulator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_friendlyName\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_isRegulator\",\"type\":\"bool\"},{\"name\":\"_isProducer\",\"type\":\"bool\"},{\"name\":\"_isWinery\",\"type\":\"bool\"}],\"name\":\"setUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_smartIdentity\",\"type\":\"string\"}],\"name\":\"bindSmartIdentityByRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_smartIdentity\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"}],\"name\":\"getWineryMappingID\",\"outputs\":[{\"name\":\"wineryMappingID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_numCurOperation\",\"type\":\"uint256\"},{\"name\":\"_parentTrackID\",\"type\":\"string\"},{\"name\":\"_parentWinery\",\"type\":\"address\"},{\"name\":\"_numParent\",\"type\":\"int256\"}],\"name\":\"addReferenceParentWineryOperation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_producer\",\"type\":\"address\"}],\"name\":\"getVineyardCount\",\"outputs\":[{\"name\":\"numberOfVineyards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"onChainAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_harvestTrackID\",\"type\":\"string\"},{\"name\":\"_wineryTrackID\",\"type\":\"string\"},{\"name\":\"_offChainWineryIdentity\",\"type\":\"string\"},{\"name\":\"_productIndex\",\"type\":\"int256\"}],\"name\":\"startProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_producer\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVineyard\",\"outputs\":[{\"name\":\"variety\",\"type\":\"uint32\"},{\"name\":\"areaCode\",\"type\":\"uint32\"},{\"name\":\"usedSurface\",\"type\":\"uint32\"},{\"name\":\"plantingYear\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_harvestTrackID\",\"type\":\"string\"},{\"name\":\"_producerOffChainIdentity\",\"type\":\"string\"},{\"name\":\"_wineryOperationTrackIDs\",\"type\":\"string\"},{\"name\":\"_wineryOffChainIdentity\",\"type\":\"string\"},{\"name\":\"_productIndex\",\"type\":\"int256\"}],\"name\":\"startWineryProductByRegulator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_producer\",\"type\":\"address\"}],\"name\":\"getHarvestOperation\",\"outputs\":[{\"name\":\"operationSender\",\"type\":\"address\"},{\"name\":\"offChainIdentity\",\"type\":\"string\"},{\"name\":\"operationID\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"uint32\"},{\"name\":\"areaCode\",\"type\":\"uint24\"},{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"attributes\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endorsements\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offChainIdentity\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_operationID\",\"type\":\"string\"},{\"name\":\"_quantity\",\"type\":\"uint32\"},{\"name\":\"_areaCode\",\"type\":\"uint16\"},{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_attributes\",\"type\":\"string\"}],\"name\":\"storeHarvestOperationByRegulator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDeprecated\",\"outputs\":[{\"name\":\"deprecated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_harvestTrackID\",\"type\":\"string\"},{\"name\":\"_offChainProducerIdentity\",\"type\":\"string\"},{\"name\":\"_wineryTrackID\",\"type\":\"string\"},{\"name\":\"_productIndex\",\"type\":\"uint256\"}],\"name\":\"startWinery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_offChainIdentity\",\"type\":\"string\"},{\"name\":\"_productID\",\"type\":\"string\"},{\"name\":\"_quantity\",\"type\":\"string\"},{\"name\":\"_attributes\",\"type\":\"string\"}],\"name\":\"addProductByRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setProducer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackID\",\"type\":\"string\"},{\"name\":\"_operationID\",\"type\":\"string\"},{\"name\":\"_operationCode\",\"type\":\"string\"},{\"name\":\"_operationDate\",\"type\":\"uint256\"},{\"name\":\"_areaCode\",\"type\":\"uint16\"},{\"name\":\"_codeICQRF\",\"type\":\"string\"}],\"name\":\"addWineryOperation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setWinery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reason\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trackIDs\",\"type\":\"string\"},{\"name\":\"_operationID\",\"type\":\"string\"},{\"name\":\"_quantity\",\"type\":\"uint32\"},{\"name\":\"_areaCode\",\"type\":\"uint16\"},{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_attributes\",\"type\":\"string\"}],\"name\":\"storeHarvestOperation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"onChainIdentities\",\"outputs\":[{\"name\":\"friendlyName\",\"type\":\"string\"},{\"name\":\"offChainIdentity\",\"type\":\"string\"},{\"name\":\"isRegulator\",\"type\":\"bool\"},{\"name\":\"isProducer\",\"type\":\"bool\"},{\"name\":\"isWinery\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_endorsements\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_trackIDs\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"operationSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"onChainIdentity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"smartIdentity\",\"type\":\"string\"}],\"name\":\"LogBindSmartIdentity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_trackID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"operationSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"onChainIdentity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operationID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogAddWineryOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_trackID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"operationSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"onChainIdentity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operationID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"productID\",\"type\":\"string\"}],\"name\":\"LogAddProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trackIDs\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"operationSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"onChainIdentity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operationID\",\"type\":\"string\"}],\"name\":\"LogStoreHarvestOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trackIDs\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"operationSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"onChainIdentity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"areaCode\",\"type\":\"uint24\"}],\"name\":\"LogAddVineyard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"LogSetDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldFriendlyName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldOffChainIdentity\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldIsProducer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"oldIsWinery\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"oldIsRegulator\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"operationSender\",\"type\":\"address\"}],\"name\":\"LogSetUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winery\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldIsValid\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isValid\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"operationSender\",\"type\":\"address\"}],\"name\":\"LogSetWinery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"regulator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"operationSender\",\"type\":\"address\"}],\"name\":\"LogSetRegulator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"producer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"operationSender\",\"type\":\"address\"}],\"name\":\"LogSetProducer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogTransferOwnership\",\"type\":\"event\"}]","ContractName":"WineSupplyChain","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b817b127a5a72956919a9360f92727d1cf1dd52","Library":"","SwarmSource":"bzzr://15b751ca2cdc8d2e42688448fc5b1487eb75f59e3ff823656e5a5d4695b3af7c"}]}