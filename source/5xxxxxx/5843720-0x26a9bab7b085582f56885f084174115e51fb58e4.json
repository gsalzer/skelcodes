{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n \r\n\r\ncontract Lottery{\r\n\r\n     /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n   // Only owner allowed.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n   // The tokens can never be stolen.\r\n    modifier notPooh(address aContract)\r\n    {\r\n        require(aContract != address(poohContract));\r\n        _;\r\n    } \r\n\r\n    modifier isOpenToPublic()\r\n    {\r\n        require(openToPublic);\r\n        _;\r\n    }\r\n\r\n    modifier onlyHuman()\r\n    {\r\n       require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n\r\n    event Deposit(\r\n        uint256 amount,\r\n        address depositer\r\n    );\r\n\r\n   event WinnerPaid(\r\n        uint256 amount,\r\n        address winner\r\n    );\r\n\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n\r\n    POOH poohContract;  //a reference to the POOH contract\r\n    address owner;\r\n    bool openToPublic = false; //Is this lottery open for public use\r\n    uint256 ticketNumber = 0; //Starting ticket number\r\n    uint256 winningNumber; //The randomly generated winning ticket\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n\r\n    constructor() public\r\n    {\r\n        poohContract = POOH(0x4C29d75cc423E8Adaa3839892feb66977e295829);\r\n        openToPublic = false;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n  /* Fallback function allows anyone to send money for the cost of gas which\r\n     goes into the pool. Used by withdraw/dividend payouts.*/\r\n    function() payable public { }\r\n\r\n\r\n     function deposit()\r\n       isOpenToPublic()\r\n       onlyHuman()\r\n     payable public\r\n     {\r\n        //You have to send more than 0.001 ETH\r\n        require(msg.value >= 1000000000000000);\r\n        address customerAddress = msg.sender;\r\n\r\n        //Use deposit to purchase POOH tokens\r\n        poohContract.buy.value(msg.value)(customerAddress);\r\n        emit Deposit(msg.value, msg.sender);\r\n\r\n        //if entry more than 0.001 ETH\r\n        if(msg.value > 1000000000000000)\r\n        {\r\n            uint extraTickets = SafeMath.div(msg.value, 1000000000000000); //each additional entry is 0.001 ETH\r\n            \r\n            //Compute how many positions they get by how many POOH they transferred in.\r\n            ticketNumber += extraTickets;\r\n        }\r\n\r\n         //if when we have a winner...\r\n        if(ticketNumber >= winningNumber)\r\n        {\r\n            //sell all tokens and cash out earned dividends\r\n            poohContract.exit();\r\n\r\n            //lotteryFee\r\n            payDev(owner);\r\n\r\n            //payout winner\r\n            payWinner(customerAddress);\r\n            \r\n            //buy more POOH tokens with the remaining balance\r\n            poohContract.buy.value(address(this).balance)(customerAddress);\r\n\r\n           //rinse and repeat\r\n           resetLottery();\r\n        }\r\n        else\r\n        {\r\n           ticketNumber++;\r\n        }\r\n    }\r\n\r\n    //Number of POOH tokens currently in the Lottery pool\r\n    function myTokens() public view returns(uint256)\r\n    {\r\n        return poohContract.myTokens();\r\n    }\r\n\r\n     //Lottery's divs\r\n    function myDividends() public view returns(uint256)\r\n    {\r\n        return poohContract.myDividends(true);\r\n    }\r\n\r\n   //Lottery's ETH balance\r\n   function ethBalance() public view returns (uint256)\r\n   {\r\n       return address(this).balance;\r\n   }\r\n\r\n\r\n     /*======================================\r\n     =          OWNER ONLY FUNCTIONS        =\r\n     ======================================*/\r\n\r\n   //give the people access to play\r\n    function openToThePublic()\r\n       onlyOwner()\r\n        public\r\n    {\r\n        openToPublic = true;\r\n        resetLottery();\r\n    }\r\n\r\n\r\n     /* A trap door for when someone sends tokens other than the intended ones so the overseers\r\n      can decide where to send them. (credit: Doublr Contract) */\r\n    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\r\n    public\r\n    onlyOwner()\r\n    notPooh(tokenAddress)\r\n    returns (bool success)\r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n\r\n\r\n     /*======================================\r\n     =          INTERNAL FUNCTIONS          =\r\n     ======================================*/\r\n\r\n\r\n     //pay winner\r\n    function payWinner(address winner) internal\r\n    {\r\n        //need to have 0.05 ETH balance left over for the next round.\r\n        uint balance = SafeMath.sub(address(this).balance, 50000000000000000);\r\n        winner.transfer(balance);\r\n\r\n        emit WinnerPaid(balance, winner);\r\n    }\r\n\r\n    //donate to dev\r\n    function payDev(address dev) internal\r\n    {\r\n        uint balance = SafeMath.div(address(this).balance, 10);\r\n        dev.transfer(balance);\r\n    }\r\n\r\n   function resetLottery() internal\r\n   isOpenToPublic()\r\n   {\r\n       ticketNumber = 1;\r\n       winningNumber = uint256(keccak256(block.timestamp, block.difficulty))%300;\r\n   }\r\n}\r\n\r\n\r\n//Need to ensure this contract can send tokens to people\r\ncontract ERC20Interface\r\n{\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\n//Need to ensure the Lottery contract knows what a POOH token is\r\ncontract POOH\r\n{\r\n    function buy(address) public payable returns(uint256);\r\n    function exit() public;\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n     /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"openToThePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"returnAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd12e90f4386ce51de871847dd0cc6f54c6684fe00b9c2bc097252310be8e3ac"}]}