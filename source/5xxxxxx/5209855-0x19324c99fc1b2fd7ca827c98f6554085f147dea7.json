{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath Library\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title BlockMarketCore\r\n */\r\ncontract BlockMarket is Ownable {\r\n  struct Stock {\r\n    string  name;\r\n    uint256 priceIncrease;\r\n    uint256 dividendAmount;\r\n    uint256 lastAction;\r\n    uint256 dividendsPaid;\r\n  }\r\n\r\n  struct Share {\r\n    address holder;\r\n    uint256 purchasePrice;\r\n  }\r\n\r\n  Stock[] public stocks;\r\n  Share[] public shares;\r\n  mapping (uint256 => uint256[]) public stockShares;\r\n\r\n  event CompanyListed(string company, uint256 basePrice);\r\n  event DividendPaid(address shareholder, uint256 amount);\r\n  event ShareSold(\r\n    uint256 stockId,\r\n    uint256 shareId,\r\n    uint256 oldPrice,\r\n    uint256 newPrice,\r\n    address oldOwner,\r\n    address newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev A fallback function to catch, uh... let's call them gifts.\r\n   */\r\n  function () payable public { }\r\n\r\n  /**\r\n   * @dev Adds a new stock to the game\r\n   * @param _name the name of the stock (e.g. \"Kodak\")\r\n   * @param _initialPrice the original cost of the stock's shares (in Wei)\r\n   * @param _priceIncrease the amount by which the shares should increase upon sale (i.e. 120 = 20% increase)\r\n   * @param _dividendAmount the amount of each purchase that should be split among dividend recipients\r\n   * @param _numShares the number of shares of this stock available for purchase\r\n   */\r\n  function addStock(\r\n    string  _name,\r\n    uint256 _initialPrice,\r\n    uint256 _priceIncrease,\r\n    uint256 _dividendAmount,\r\n    uint8   _numShares\r\n  ) public onlyOwner returns (uint256 stockId) {\r\n    stockId = stocks.length;\r\n\r\n    stocks.push(\r\n      Stock(\r\n        _name,\r\n        _priceIncrease == 0 ? 130 : _priceIncrease, // 30% by default\r\n        _dividendAmount == 0 ? 110 : _dividendAmount, // 10% by default\r\n        block.timestamp,\r\n        0\r\n      )\r\n    );\r\n\r\n    for(uint8 i = 0; i < _numShares; i++) {\r\n      stockShares[stockId].push(shares.length);\r\n      shares.push(Share(owner, _initialPrice));\r\n    }\r\n\r\n    CompanyListed(_name, _initialPrice);\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase a share from its current owner\r\n   * @param _stockId the ID of the stock that owns the share\r\n   * @param _shareId the ID of the specific share to purchase\r\n   */\r\n  function purchase(uint256 _stockId, uint256 _shareId) public payable {\r\n    require(_stockId < stocks.length && _shareId < shares.length);\r\n\r\n    // look up the assets\r\n    Stock storage stock = stocks[_stockId];\r\n    uint256[] storage sharesForStock = stockShares[_stockId];\r\n    Share storage share = shares[sharesForStock[_shareId]];\r\n\r\n    // look up the share's current holder\r\n    address previousHolder = share.holder;\r\n\r\n    // determine the current price for the share\r\n    uint256 currentPrice = getPurchasePrice(\r\n      share.purchasePrice,\r\n      stock.priceIncrease\r\n    );\r\n    require(msg.value >= currentPrice);\r\n\r\n    // return any excess payment\r\n    if (msg.value > currentPrice) {\r\n      msg.sender.transfer(SafeMath.sub(msg.value, currentPrice));\r\n    }\r\n\r\n    // calculate dividend holders' shares\r\n    uint256 dividendPerRecipient = getDividendPayout(\r\n      currentPrice,\r\n      stock.dividendAmount,\r\n      sharesForStock.length - 1\r\n    );\r\n\r\n    // calculate the previous owner's share\r\n    uint256 previousHolderShare = SafeMath.sub(\r\n      currentPrice,\r\n      SafeMath.mul(dividendPerRecipient, sharesForStock.length - 1)\r\n    );\r\n\r\n    // calculate the transaction fee - 1/40 = 2.5% fee\r\n    uint256 fee = SafeMath.div(previousHolderShare, 40);\r\n    owner.transfer(fee);\r\n\r\n    // payout the previous shareholder\r\n    previousHolder.transfer(SafeMath.sub(previousHolderShare, fee));\r\n\r\n    // payout the dividends\r\n    for(uint8 i = 0; i < sharesForStock.length; i++) {\r\n      if (i != _shareId) {\r\n        shares[sharesForStock[i]].holder.transfer(dividendPerRecipient);\r\n        stock.dividendsPaid = SafeMath.add(stock.dividendsPaid, dividendPerRecipient);\r\n        DividendPaid(\r\n          shares[sharesForStock[i]].holder,\r\n          dividendPerRecipient\r\n        );\r\n      }\r\n    }\r\n\r\n    ShareSold(\r\n      _stockId,\r\n      _shareId,\r\n      share.purchasePrice,\r\n      currentPrice,\r\n      share.holder,\r\n      msg.sender\r\n    );\r\n\r\n    // update share information\r\n    share.holder = msg.sender;\r\n    share.purchasePrice = currentPrice;\r\n    stock.lastAction = block.timestamp;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the current purchase price for the given stock share\r\n   * @param _stockId the ID of the stock that owns the share\r\n   * @param _shareId the ID of the specific share to purchase\r\n   */\r\n  function getCurrentPrice(\r\n    uint256 _stockId,\r\n    uint256 _shareId\r\n  ) public view returns (uint256 currentPrice) {\r\n    require(_stockId < stocks.length && _shareId < shares.length);\r\n    currentPrice = SafeMath.div(\r\n      SafeMath.mul(stocks[_stockId].priceIncrease, shares[_shareId].purchasePrice),\r\n      100\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the current token owner's payout amount if the token sells\r\n   * @param _currentPrice the current total sale price of the asset\r\n   * @param _priceIncrease the percentage of price increase per sale\r\n   */\r\n  function getPurchasePrice(\r\n    uint256 _currentPrice,\r\n    uint256 _priceIncrease\r\n  ) internal pure returns (uint256 currentPrice) {\r\n    currentPrice = SafeMath.div(\r\n      SafeMath.mul(_currentPrice, _priceIncrease),\r\n      100\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the payout of each dividend recipient in the event of a share sale.\r\n   * @param _purchasePrice the current total sale price of the asset\r\n   * @param _stockDividend the percentage of the sale allocated for dividends\r\n   * @param _numDividends the number of dividend holders to share the total dividend amount\r\n   */\r\n  function getDividendPayout(\r\n    uint256 _purchasePrice,\r\n    uint256 _stockDividend,\r\n    uint256 _numDividends\r\n  ) public pure returns (uint256 dividend) {\r\n    uint256 dividendPerRecipient = SafeMath.sub(\r\n      SafeMath.div(SafeMath.mul(_purchasePrice, _stockDividend), 100),\r\n      _purchasePrice\r\n    );\r\n    dividend = SafeMath.div(dividendPerRecipient, _numDividends);\r\n  }\r\n\r\n  /**\r\n  * @dev Fetches the number of stocks available\r\n  */\r\n  function getStockCount() public view returns (uint256) {\r\n    return stocks.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Fetches the share IDs connected to the given stock\r\n  * @param _stockId the ID of the stock to count shares of\r\n  */\r\n  function getStockShares(uint256 _stockId) public view returns (uint256[]) {\r\n    return stockShares[_stockId];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers a set amount of ETH from the contract to the specified address\r\n   * @notice Proceeds are paid out right away, but the contract might receive unexpected funds\r\n   */\r\n  function withdraw(uint256 _amount, address _destination) public onlyOwner {\r\n    require(_destination != address(0));\r\n    require(_amount <= this.balance);\r\n    _destination.transfer(_amount == 0 ? this.balance : _amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stockId\",\"type\":\"uint256\"},{\"name\":\"_shareId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stocks\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"priceIncrease\",\"type\":\"uint256\"},{\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"name\":\"lastAction\",\"type\":\"uint256\"},{\"name\":\"dividendsPaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purchasePrice\",\"type\":\"uint256\"},{\"name\":\"_stockDividend\",\"type\":\"uint256\"},{\"name\":\"_numDividends\",\"type\":\"uint256\"}],\"name\":\"getDividendPayout\",\"outputs\":[{\"name\":\"dividend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stockId\",\"type\":\"uint256\"}],\"name\":\"getStockShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stockShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stockId\",\"type\":\"uint256\"},{\"name\":\"_shareId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"name\":\"_priceIncrease\",\"type\":\"uint256\"},{\"name\":\"_dividendAmount\",\"type\":\"uint256\"},{\"name\":\"_numShares\",\"type\":\"uint8\"}],\"name\":\"addStock\",\"outputs\":[{\"name\":\"stockId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"company\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"basePrice\",\"type\":\"uint256\"}],\"name\":\"CompanyListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stockId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"shareId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ShareSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BlockMarket","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://58b525b30937f9cd1f53276eb5e25c74ffebb3304047fba1a28b079490c8b2ca"}]}