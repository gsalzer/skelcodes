{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC223 {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract EtheraffleFreeLOT is ERC223 {\r\n    using SafeMath for uint;\r\n\r\n    string    public name;\r\n    string    public symbol;\r\n    address[] public minters;\r\n    uint      public redeemed;\r\n    uint8     public decimals;\r\n    address[] public destroyers;\r\n    address   public etheraffle;\r\n    uint      public totalSupply;\r\n\r\n    mapping (address => uint) public balances;\r\n    mapping (address => bool) public isMinter;\r\n    mapping (address => bool) public isDestroyer;\r\n\r\n\r\n    event LogMinterAddition(address newMinter, uint atTime);\r\n    event LogMinterRemoval(address minterRemoved, uint atTime);\r\n    event LogDestroyerAddition(address newDestroyer, uint atTime);\r\n    event LogDestroyerRemoval(address destroyerRemoved, uint atTime);\r\n    event LogMinting(address indexed toWhom, uint amountMinted, uint atTime);\r\n    event LogDestruction(address indexed toWhom, uint amountDestroyed, uint atTime);\r\n    event LogEtheraffleChange(address prevController, address newController, uint atTime);\r\n    event LogTransfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    /**\r\n     * @dev   Modifier function to prepend to methods rendering them only callable\r\n     *        by the Etheraffle MultiSig wallet.\r\n     */\r\n    modifier onlyEtheraffle() {\r\n        require(msg.sender == etheraffle);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev   Constructor: Sets the meta data & controller for the token.\r\n     *\r\n     * @param _etheraffle   The Etheraffle multisig wallet.\r\n     * @param _amt          Amount to mint on contract creation.\r\n     */\r\n    function EtheraffleFreeLOT(address _etheraffle, uint _amt) {\r\n        name       = \"Etheraffle FreeLOT\";\r\n        symbol     = \"FreeLOT\";\r\n        etheraffle = _etheraffle;\r\n        minters.push(_etheraffle);\r\n        destroyers.push(_etheraffle);\r\n        totalSupply              = _amt;\r\n        balances[_etheraffle]    = _amt;\r\n        isMinter[_etheraffle]    = true;\r\n        isDestroyer[_etheraffle] = true;\r\n    }\r\n    /**\r\n     * ERC223 Standard functions:\r\n     *\r\n     * @dev Transfer the specified amount of FreeLOT to the specified address.\r\n     *      Invokes the tokenFallback function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract but does not\r\n     *      implement the tokenFallback function.\r\n     *\r\n     * @param _to     Receiver address.\r\n     * @param _value  Amount of FreeLOT to be transferred.\r\n     * @param _data   Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) external {\r\n        uint codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to]        = balances[_to].add(_value);\r\n        if(codeLength > 0) {\r\n            ERC223 receiver = ERC223(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        LogTransfer(msg.sender, _to, _value, _data);\r\n    }\r\n    /**\r\n     * @dev     Transfer the specified amount of FreeLOT to the specified address.\r\n     *          Standard function transfer similar to ERC20 transfer with no\r\n     *          _data param. Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to     Receiver address.\r\n     * @param _value  Amount of FreeLOT to be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) external {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to]        = balances[_to].add(_value);\r\n        if(codeLength > 0) {\r\n            ERC223 receiver = ERC223(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        LogTransfer(msg.sender, _to, _value, empty);\r\n    }\r\n    /**\r\n     * @dev     Returns balance of a queried address.\r\n     * @param _owner    The address whose balance will be returned.\r\n     * @return balance  Balance of the of the queried address.\r\n     */\r\n    function balanceOf(address _owner) constant external returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n    /**\r\n     * @dev     Allow changing of contract ownership ready for future upgrades/\r\n     *          changes in management structure.\r\n     *\r\n     * @param _new  New owner/controller address.\r\n     */\r\n    function setEtheraffle(address _new) external onlyEtheraffle {\r\n        LogEtheraffleChange(etheraffle, _new, now);\r\n        etheraffle = _new;\r\n    }\r\n    /**\r\n     * @dev     Allow addition of minters to allow future contracts to\r\n     *          use the role.\r\n     *\r\n     * @param _new  New minter address.\r\n     */\r\n    function addMinter(address _new) external onlyEtheraffle {\r\n        minters.push(_new);\r\n        isMinter[_new] = true;\r\n        LogMinterAddition(_new, now);\r\n    }\r\n    /**\r\n     * @dev     Remove a minter should they no longer require or need the\r\n     *          the privilege.\r\n     *\r\n     * @param _minter    The desired address to be removed.\r\n     */\r\n    function removeMinter(address _minter) external onlyEtheraffle {\r\n        require(isMinter[_minter]);\r\n        isMinter[_minter] = false;\r\n        for(uint i = 0; i < minters.length - 1; i++)\r\n            if(minters[i] == _minter) {\r\n                minters[i] = minters[minters.length - 1];\r\n                break;\r\n            }\r\n        minters.length--;\r\n        LogMinterRemoval(_minter, now);\r\n    }\r\n    /**\r\n     * @dev     Allow addition of a destroyer to allow future contracts to\r\n     *          use the role.\r\n     *\r\n     * @param _new  New destroyer address.\r\n     */\r\n    function addDestroyer(address _new) external onlyEtheraffle {\r\n        destroyers.push(_new);\r\n        isDestroyer[_new] = true;\r\n        LogDestroyerAddition(_new, now);\r\n    }\r\n    /**\r\n     * @dev     Remove a destroyer should they no longer require or need the\r\n     *          the privilege.\r\n     *\r\n     * @param _destroyer    The desired address to be removed.\r\n     */\r\n    function removeDestroyer(address _destroyer) external onlyEtheraffle {\r\n        require(isDestroyer[_destroyer]);\r\n        isDestroyer[_destroyer] = false;\r\n        for(uint i = 0; i < destroyers.length - 1; i++)\r\n            if(destroyers[i] == _destroyer) {\r\n                destroyers[i] = destroyers[destroyers.length - 1];\r\n                break;\r\n            }\r\n        destroyers.length--;\r\n        LogDestroyerRemoval(_destroyer, now);\r\n    }\r\n    /**\r\n     * @dev    This function mints tokens by adding tokens to the total supply\r\n     *         and assigning them to the given address.\r\n     *\r\n     * @param _to      The address recipient of the minted tokens.\r\n     * @param _amt     The amount of tokens to mint & assign.\r\n     */\r\n    function mint(address _to, uint _amt) external {\r\n        require(isMinter[msg.sender]);\r\n        totalSupply   = totalSupply.add(_amt);\r\n        balances[_to] = balances[_to].add(_amt);\r\n        LogMinting(_to, _amt, now);\r\n    }\r\n    /**\r\n     * @dev    This function destroys tokens by subtracting them from the total\r\n     *         supply and removing them from the given address. Increments the\r\n     *         redeemed variable to track the number of \"used\" tokens. Only\r\n     *         callable by the Etheraffle multisig or a designated destroyer.\r\n     *\r\n     * @param _from    The address from whom the token is destroyed.\r\n     * @param _amt     The amount of tokens to destroy.\r\n     */\r\n    function destroy(address _from, uint _amt) external {\r\n        require(isDestroyer[msg.sender]);\r\n        totalSupply     = totalSupply.sub(_amt);\r\n        balances[_from] = balances[_from].sub(_amt);\r\n        redeemed++;\r\n        LogDestruction(_from, _amt, now);\r\n    }\r\n    /**\r\n     * @dev   Housekeeping- called in the event this contract is no\r\n     *        longer needed. Deletes the code from the blockchain.\r\n     *        Only callable by the Etheraffle address.\r\n     */\r\n    function selfDestruct() external onlyEtheraffle {\r\n        selfdestruct(etheraffle);\r\n    }\r\n    /**\r\n     * @dev   Fallback in case of accidental ether transfer\r\n     */\r\n    function () external payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDestroyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setEtheraffle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etheraffle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"addDestroyer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destroyer\",\"type\":\"address\"}],\"name\":\"removeDestroyer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"destroyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_etheraffle\",\"type\":\"address\"},{\"name\":\"_amt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogMinterAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minterRemoved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogMinterRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDestroyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogDestroyerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"destroyerRemoved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogDestroyerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toWhom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toWhom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountDestroyed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogDestruction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogEtheraffleChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogTransfer\",\"type\":\"event\"}]","ContractName":"EtheraffleFreeLOT","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000097f535e98cf250cdd7ff0cb9b29e4548b609a0bd0000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://6dae90e8c3a0be42be420e9f47ebdaa2a47d2aa0ccefbab130f5a0905358ef01"}]}