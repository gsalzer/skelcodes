{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface\r\n{\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address owner) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Additional desired wallet functionality\r\ncontract ERC20Burnable is ERC20Interface\r\n{\r\n    function burn(uint256 value) returns (bool);\r\n\r\n    event Burn(address indexed owner, uint256 value);\r\n}\r\n\r\n\r\n\r\n// Wallet implementation\r\ncontract VRFtoken is ERC20Burnable\r\n{\r\n    // Public data\r\n    string public constant name = \"VRF token\";\r\n    string public constant symbol = \"VRF\";\r\n    uint256 public constant decimals = 2; \r\n    address public owner;  \r\n\r\n    // Internal data\r\n    uint256 private constant initialSupply = 690000000; // 690,000,000\r\n    uint256 private currentSupply;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n\r\n    function VRFtoken()\r\n    {\r\n        // Increase initial supply by appropriate factor to allow\r\n        // for the desired number of decimals\r\n        currentSupply = initialSupply * (10 ** uint(decimals));\r\n\r\n        owner = msg.sender;\r\n        balances[owner] = currentSupply;\r\n      \r\n    }\r\n\r\n    function totalSupply() public constant \r\n        returns (uint256)\r\n    {\r\n        return currentSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant \r\n        returns (uint256)\r\n    {\r\n        return balances[tokenOwner];\r\n    }\r\n  \r\n    function transfer(address to, uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        if (balances[msg.sender] >= amount && // Sender has enough?\r\n            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\r\n        {\r\n            balances[msg.sender] -= amount;\r\n            balances[to] += amount;\r\n            Transfer(msg.sender, to, amount);\r\n            return true;\r\n        } \r\n        else // Invalid transfer\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n  \r\n    function transferFrom(address from, address to, uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        if (balances[from] >= amount && // Account has enough?\r\n            allowed[from][msg.sender] >= amount && // Sender can act for account for this amount?\r\n            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\r\n        {\r\n            balances[from] -= amount;\r\n            allowed[from][msg.sender] -= amount;\r\n            balances[to] += amount;\r\n            Transfer(from, to, amount);\r\n            return true;\r\n        }\r\n        else // Invalid transfer\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant \r\n        returns (uint256)\r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function burn(uint256 amount) public \r\n        returns (bool)\r\n    {\r\n        require(msg.sender == owner); // Only the owner can burn\r\n\r\n        if (balances[msg.sender] >= amount) // Account has enough?\r\n        {\r\n            balances[msg.sender] -= amount;\r\n            currentSupply -= amount;\r\n            Burn(msg.sender, amount);\r\n            return true;\r\n        }\r\n        else // Not enough to burn\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VRFtoken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://085c0786f765e35aa717d57246cb7b91a22cd6ee9c047c5a482a8d1258f8c723"}]}