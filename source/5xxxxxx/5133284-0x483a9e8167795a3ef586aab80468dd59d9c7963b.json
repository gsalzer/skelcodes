{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Lottery {\r\n    address public manager;\r\n    address[] public players;\r\n    address public lastWinner;\r\n    address[] public lastConsolationPrize;\r\n    uint[] consolationPrizeIndexes;\r\n    bool public lockGate = false;\r\n    \r\n    function Lottery() public {\r\n        manager = msg.sender;\r\n    }\r\n    modifier restricted(){\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    function compareByte(string _a, string _b) returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    /// @dev Compares two strings and returns true iff they are equal.\r\n    function equal(string _a, string _b) returns (bool) {\r\n        return compareByte(_a, _b) == 0;\r\n    }\r\n    function enter(string message) public payable {\r\n        require(lockGate == false);\r\n        require(msg.value == .05 ether && equal(message, \"lotto\") == true);\r\n        players.push(msg.sender);\r\n    }\r\n    function random() private restricted view returns (uint) {\r\n        return uint(keccak256(block.difficulty, now, players));\r\n    }\r\n    function pickWinner() public restricted {\r\n        lockGate = true;\r\n        uint indexWinner = random() % players.length;\r\n        uint authorPrize = this.balance / 100 * 15; // 12% for marketing 3% for developers\r\n        uint winnerPrize = this.balance / 2;\r\n\r\n        lastWinner = players[indexWinner];\r\n        players[indexWinner] = players[players.length - 1];\r\n        delete players[players.length - 1];\r\n\r\n        manager.transfer(authorPrize);\r\n        lastWinner.transfer(winnerPrize);\r\n    }\r\n    function getPlayers() public view returns (address[]) {\r\n        return players;\r\n    }\r\n    // Due to cost a lot of gas, Consolation Prize random numbers will be done on server side\r\n    function pickConsolationPrize(uint[] value) public restricted {\r\n        require(lockGate == true);\r\n        consolationPrizeIndexes = value;\r\n        lastConsolationPrize = new address[](0);\r\n        uint consolationLength = consolationPrizeIndexes.length;\r\n        uint consolationPrize = this.balance;\r\n        uint eachConsolationPrize = consolationPrize / consolationLength;\r\n        uint consolationPrizeIndex;\r\n        for (uint index = 0; index < consolationLength; index++) {\r\n            consolationPrizeIndex = consolationPrizeIndexes[index];\r\n            players[consolationPrizeIndex].transfer(eachConsolationPrize);\r\n            lastConsolationPrize.push(players[consolationPrizeIndex]);\r\n        }\r\n        lockGate = false;\r\n        consolationPrizeIndexes = new uint[](0);\r\n        players = new address[](0);\r\n    }\r\n    function getLastConsolationPrize() public view returns (address[]) {\r\n        return lastConsolationPrize;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockGate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"equal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastConsolationPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"pickConsolationPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastConsolationPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"compareByte\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://960a89d0bdeb6ea17f924e93e4ba77282eecb27bd55de7884ba40fc1b99c3cd5"}]}