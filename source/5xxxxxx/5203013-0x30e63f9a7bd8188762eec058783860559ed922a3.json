{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16; \r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address owner) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n}\r\n\r\n\r\n\r\ncontract VRCoinCrowdsale {\r\n    // Information about a single period\r\n    struct Period\r\n    {\r\n         uint start;\r\n         uint end;\r\n         uint priceInWei;\r\n         uint tokenToDistibute;\r\n    }\r\n\r\n    // Some constant about our expected token distribution\r\n    uint public constant VRCOIN_DECIMALS = 9;\r\n    uint public constant TOTAL_TOKENS_TO_DISTRIBUTE = 750000 * (10 ** VRCOIN_DECIMALS); // 750000 VRtokenc\r\n    \r\n    uint public exchangeRate = 853;\r\n    \r\n    address public owner; // The owner of the crowdsale\r\n    bool public hasStarted; // Has the crowdsale started?\r\n    Period public sale; // The configured periods for this crowdsale\r\n    ERC20Interface public tokenWallet; // The token wallet contract used for this crowdsale\r\n\r\n    // The multiplier necessary to change a coin amount to the token amount\r\n    uint coinToTokenFactor = 10 ** VRCOIN_DECIMALS;\r\n    \r\n    // Fired once the transfer tokens to contract was successfull\r\n    event Transfer(address to, uint amount);\r\n\r\n    // Fired once the sale starts\r\n    event Start(uint timestamp);\r\n\r\n    // Fired whenever a contribution is made\r\n    event Contribution(address indexed from, uint weiContributed, uint tokensReceived);\r\n\r\n    function VRCoinCrowdsale(address walletAddress)\r\n    {\r\n         // Setup the owner and wallet\r\n         owner = msg.sender;\r\n         tokenWallet = ERC20Interface(walletAddress);\r\n\r\n         // Make sure the provided token has the expected number of tokens to distribute\r\n         require(tokenWallet.totalSupply() >= TOTAL_TOKENS_TO_DISTRIBUTE);\r\n\r\n         // Make sure the owner actually controls all the tokens\r\n         require(tokenWallet.balanceOf(owner) >= TOTAL_TOKENS_TO_DISTRIBUTE);\r\n\r\n         // We haven't started yet\r\n         hasStarted = false;\r\n                 \r\n         sale.start = 1521234001; // 00:00:01, March 05, 2018 UTC\r\n         sale.end = 1525122001; // 00:00:01, Apl 30, 2018 UTC\r\n         sale.priceInWei = (1 ether) / (exchangeRate * coinToTokenFactor); // 1 ETH = 750 VRCoin\r\n         sale.tokenToDistibute = TOTAL_TOKENS_TO_DISTRIBUTE;\r\n    }\r\n    \r\n    function updatePrice() {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n        \r\n         // Update price\r\n         sale.priceInWei = (1 ether) / (exchangeRate * coinToTokenFactor);\r\n    }\r\n    \r\n    function setExchangeRate(uint256 _rate) {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);        \r\n        \r\n         // The ether in $ dollar \r\n         exchangeRate = _rate;\r\n    }\r\n\r\n    // Start the crowdsale\r\n    function startSale()\r\n    {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n         \r\n         // Cannot start if already started\r\n         require(hasStarted == false);\r\n\r\n         // Attempt to transfer all tokens to the crowdsale contract\r\n         // The owner needs to approve() the transfer of all tokens to this contract\r\n         if (!tokenWallet.transferFrom(owner, this, sale.tokenToDistibute))\r\n         {\r\n            // Something has gone wrong, the owner no longer controls all the tokens?\r\n            // We cannot proceed\r\n            revert();\r\n         }else{\r\n            Transfer(this, sale.tokenToDistibute);\r\n         }\r\n\r\n         // Sanity check: verify the crowdsale controls all tokens\r\n         require(tokenWallet.balanceOf(this) >= sale.tokenToDistibute);\r\n\r\n         // The sale can begin\r\n         hasStarted = true;\r\n\r\n         // Fire event that the sale has begun\r\n         Start(block.timestamp);\r\n    }\r\n\r\n    // Allow the current owner to change the owner of the crowdsale\r\n    function changeOwner(address newOwner) public\r\n    {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n\r\n         // Change the owner\r\n         owner = newOwner;\r\n    }\r\n\r\n    // Allow the owner to change the tokens for sale number\r\n    // But only if the sale has not begun yet\r\n    function changeTokenForSale(uint newAmount) public\r\n    {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n         \r\n         // We can change period details as long as the sale hasn't started yet\r\n         require(hasStarted == false);\r\n         \r\n         // Make sure the provided token has the expected number of tokens to distribute\r\n         require(tokenWallet.totalSupply() >= newAmount);\r\n\r\n         // Make sure the owner actually controls all the tokens\r\n         require(tokenWallet.balanceOf(owner) >= newAmount);\r\n\r\n\r\n         // Change the price for this period\r\n         sale.tokenToDistibute = newAmount;\r\n    }\r\n\r\n    // Allow the owner to change the start/end time for a period\r\n    // But only if the sale has not begun yet\r\n    function changePeriodTime(uint start, uint end) public\r\n    {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n\r\n         // We can change period details as long as the sale hasn't started yet\r\n         require(hasStarted == false);\r\n\r\n         // Make sure the input is valid\r\n         require(start < end);\r\n\r\n         // Everything checks out, update the period start/end time\r\n         sale.start = start;\r\n         sale.end = end;\r\n    }\r\n\r\n    // Allow the owner to withdraw all the tokens remaining after the\r\n    // crowdsale is over\r\n    function withdrawTokensRemaining() public\r\n         returns (bool)\r\n    {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n\r\n         // Get the ending timestamp of the crowdsale\r\n         uint crowdsaleEnd = sale.end;\r\n\r\n         // The crowsale must be over to perform this operation\r\n         require(block.timestamp > crowdsaleEnd);\r\n\r\n         // Get the remaining tokens owned by the crowdsale\r\n         uint tokensRemaining = getTokensRemaining();\r\n\r\n         // Transfer them all to the owner\r\n         return tokenWallet.transfer(owner, tokensRemaining);\r\n    }\r\n\r\n    // Allow the owner to withdraw all ether from the contract after the\r\n    // crowdsale is over\r\n    function withdrawEtherRemaining() public\r\n         returns (bool)\r\n    {\r\n         // Only the owner can do this\r\n         require(msg.sender == owner);\r\n\r\n         // Transfer them all to the owner\r\n         owner.transfer(this.balance);\r\n\r\n         return true;\r\n    }\r\n\r\n    // Check how many tokens are remaining for distribution\r\n    function getTokensRemaining() public constant\r\n         returns (uint256)\r\n    {\r\n         return tokenWallet.balanceOf(this);\r\n    }\r\n\r\n    // Calculate how many tokens can be distributed for the given contribution\r\n    function getTokensForContribution(uint weiContribution) public constant \r\n         returns(uint tokenAmount, uint weiRemainder)\r\n    {\r\n         // The bonus for contributor\r\n         uint256 bonus = 0;\r\n         \r\n         // Get the ending timestamp of the crowdsale\r\n         uint crowdsaleEnd = sale.end;\r\n        \r\n         // The crowsale must be going to perform this operation\r\n         require(block.timestamp <= crowdsaleEnd);\r\n\r\n         // Get the price for this current period\r\n         uint periodPriceInWei = sale.priceInWei;\r\n\r\n         // Return the amount of tokens that can be purchased\r\n         \r\n         tokenAmount = weiContribution / periodPriceInWei;\r\n         \r\n\t \t\r\n            if (block.timestamp < 1521234001) {\r\n                // bonus for contributor from 5.03.2018 to 16.03.2018 \r\n                bonus = tokenAmount * 20 / 100;\r\n            } else if (block.timestamp < 1521925201) {\r\n                // bonus for contributor from 17.03.2018 to 24.03.2018 \r\n                bonus = tokenAmount * 15 / 100;\r\n            } else {\r\n                // bonus for contributor\r\n                bonus = tokenAmount * 10 / 100;\r\n            }\r\n\t\t \r\n\r\n            \r\n        tokenAmount = tokenAmount + bonus;\r\n        \r\n         // Return the amount of wei that would be left over\r\n         weiRemainder = weiContribution % periodPriceInWei;\r\n    }\r\n    \r\n    // Allow a user to contribute to the crowdsale\r\n    function contribute() public payable\r\n    {\r\n         // Cannot contribute if the sale hasn't started\r\n         require(hasStarted == true);\r\n\r\n         // Calculate the tokens to be distributed based on the contribution amount\r\n         var (tokenAmount, weiRemainder) = getTokensForContribution(msg.value);\r\n\r\n         // Need to contribute enough for at least 1 token\r\n         require(tokenAmount > 0);\r\n         \r\n         // Sanity check: make sure the remainder is less or equal to what was sent to us\r\n         require(weiRemainder <= msg.value);\r\n\r\n         // Make sure there are enough tokens left to buy\r\n         uint tokensRemaining = getTokensRemaining();\r\n         require(tokensRemaining >= tokenAmount);\r\n\r\n         // Transfer the token amount from the crowd sale's token wallet to the\r\n         // sender's token wallet\r\n         if (!tokenWallet.transfer(msg.sender, tokenAmount))\r\n         {\r\n            // Unable to transfer funds, abort transaction\r\n            revert();\r\n         }\r\n\r\n         // Return the remainder to the sender\r\n         msg.sender.transfer(weiRemainder);\r\n\r\n         // Since we refunded the remainder, the actual contribution is the amount sent\r\n         // minus the remainder\r\n         uint actualContribution = msg.value - weiRemainder;\r\n\r\n         // Record the event\r\n         Contribution(msg.sender, actualContribution, tokenAmount);\r\n    }\r\n    \r\n    function() payable\r\n    {\r\n        contribute();\r\n    } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS_TO_DISTRIBUTE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VRCOIN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiContribution\",\"type\":\"uint256\"}],\"name\":\"getTokensForContribution\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiRemainder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"tokenToDistibute\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"changePeriodTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changeTokenForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiContributed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"}]","ContractName":"VRCoinCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002496477fb081a0ee9d62e7c32d897872f28ae86c","Library":"","SwarmSource":"bzzr://e2c48c82a74de88b503660918509d090543983fdefeae894d293370393f3afe1"}]}