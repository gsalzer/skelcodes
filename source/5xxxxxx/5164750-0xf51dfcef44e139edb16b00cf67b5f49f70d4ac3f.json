{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nGame Name: MyCryptoBuilding\r\nGame Link: https://mycryptobuilding.net/\r\n*/\r\n\r\ncontract MyCryptoBuilding {\r\n\r\n    address ownerAddress = 0x9aFbaA3003D9e75C35FdE2D1fd283b13d3335f00;\r\n    \r\n    modifier onlyOwner() {\r\n        require (msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n    address buildingOwnerAddress;\r\n    uint256 buildingPrice;\r\n    \r\n    struct Appartement {\r\n        address ownerAddress;\r\n        uint256 curPrice;\r\n    }\r\n    Appartement[] appartments;\r\n\r\n    /*\r\n    This function allows players to purchase the building. \r\n    The price is automatically multiplied by 1.5 after each purchase.\r\n    */\r\n    function purchaseBuilding() public payable {\r\n        require(msg.value == buildingPrice);\r\n\r\n        // Calculate the 2% & 5% value\r\n        uint256 commission2percent = ((msg.value / 100)*2);\r\n        uint256 commission5percent = ((msg.value / 10)/2);\r\n\r\n        // Calculate the owner commission on this sale & transfer the commission to the owner.      \r\n        uint256 commissionOwner = msg.value - (commission5percent * 3); // => 85%\r\n        buildingOwnerAddress.transfer(commissionOwner);\r\n\r\n        // Transfer 2% commission to the appartments owner\r\n        for (uint8 i = 0; i < 5; i++) {\r\n            appartments[i].ownerAddress.transfer(commission2percent);\r\n        }\r\n\r\n        // Transfer the 5% commission to the developer\r\n        ownerAddress.transfer(commission5percent); // => 5%                   \r\n\r\n        // Update the company owner and set the new price\r\n        buildingOwnerAddress = msg.sender;\r\n        buildingPrice = buildingPrice + (buildingPrice / 2);\r\n    }\r\n\r\n    // This function allows user to purchase an appartment\r\n    function purchaseAppartment(uint _appartmentId) public payable {\r\n        require(msg.value == appartments[_appartmentId].curPrice);\r\n\r\n        // Calculate the 10% & 5% value\r\n        uint256 commission10percent = (msg.value / 10);\r\n        uint256 commission5percent = ((msg.value / 10)/2);\r\n\r\n        // Calculate the owner commission on this sale & transfer the commission.      \r\n        uint256 commissionOwner = msg.value - (commission5percent + commission10percent); // => 85%\r\n        appartments[_appartmentId].ownerAddress.transfer(commissionOwner);\r\n\r\n        // Transfer 10% commission to the building owner\r\n        buildingOwnerAddress.transfer(commission10percent);\r\n\r\n        // Transfer the 5% commission to the developer\r\n        ownerAddress.transfer(commission5percent); // => 5%                   \r\n\r\n        // Update the company owner and set the new price\r\n        appartments[_appartmentId].ownerAddress = msg.sender;\r\n        appartments[_appartmentId].curPrice = appartments[_appartmentId].curPrice + (appartments[_appartmentId].curPrice / 2);\r\n    }\r\n    \r\n    \r\n    // These functions will return the details of a company and the building\r\n    function getAppartment(uint _appartmentId) public view returns (\r\n        address ownerAddress,\r\n        uint256 curPrice\r\n    ) {\r\n        Appartement storage _appartment = appartments[_appartmentId];\r\n\r\n        ownerAddress = _appartment.ownerAddress;\r\n        curPrice = _appartment.curPrice;\r\n    }\r\n    function getBuilding() public view returns (\r\n        address ownerAddress,\r\n        uint256 curPrice\r\n    ) {\r\n        ownerAddress = buildingOwnerAddress;\r\n        curPrice = buildingPrice;\r\n    }\r\n\r\n    /**\r\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    // Initiate functions that will create the companies\r\n    function InitiateGame() public onlyOwner {\r\n        buildingOwnerAddress = ownerAddress;\r\n        buildingPrice = 225000000000000000;\r\n        appartments.push(Appartement(ownerAddress, 75000000000000000));\r\n        appartments.push(Appartement(ownerAddress, 75000000000000000));\r\n        appartments.push(Appartement(ownerAddress, 75000000000000000));\r\n        appartments.push(Appartement(ownerAddress, 75000000000000000));\r\n        appartments.push(Appartement(ownerAddress, 75000000000000000));\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_appartmentId\",\"type\":\"uint256\"}],\"name\":\"getAppartment\",\"outputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_appartmentId\",\"type\":\"uint256\"}],\"name\":\"purchaseAppartment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiateGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseBuilding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuilding\",\"outputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyCryptoBuilding","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1c9acf594cb1559503be41e5b25155b820a93a72116a2dcd6b72bb56d036b3f4"}]}