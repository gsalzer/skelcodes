{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nGame Name: CryptoPlanets\r\nGame Link: https://cryptoplanets.com/\r\nRules: \r\n- Acquire planets\r\n- Steal resources (ETH) from other planets\r\n*/\r\n\r\ncontract CryptoPlanets {\r\n\r\n    address ceoAddress = 0x8e6DBF31540d2299a674b8240596ae85ebD21314;\r\n    \r\n    modifier onlyCeo() {\r\n        require (msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    \r\n    struct Planet {\r\n        string name;\r\n        address ownerAddress;\r\n        uint256 curPrice;\r\n        uint256 curResources;\r\n    }\r\n    Planet[] planets;\r\n\r\n\r\n    // How many shares an addres own\r\n    mapping (address => uint) public addressPlanetsCount;\r\n    mapping (address => uint) public addressAttackCount;\r\n    mapping (address => uint) public addressDefenseCount;\r\n    \r\n\r\n    uint256 attackCost = 10000000000000000;\r\n    uint256 defenseCost = 10000000000000000;\r\n    \r\n    uint randNonce = 0;\r\n    bool planetsAreInitiated;\r\n\r\n    /*\r\n    This function allows players to purchase planets from other players. \r\n    The price of the planets is automatically multiplied by 1.5 after each purchase.\r\n    */\r\n    function purchasePlanet(uint _planetId) public payable {\r\n        require(msg.value == planets[_planetId].curPrice);\r\n\r\n        // Calculate the 5% value\r\n        uint256 commission5percent = ((msg.value / 10)/2);\r\n\r\n        // Calculate the owner commission on this sale & transfer the commission to the owner.      \r\n        uint256 commissionOwner = msg.value - (commission5percent * 2); // => 95%\r\n        planets[_planetId].ownerAddress.transfer(commissionOwner);\r\n\r\n        // Reduce number of planets for previous owner\r\n        addressPlanetsCount[planets[_planetId].ownerAddress] = addressPlanetsCount[planets[_planetId].ownerAddress] - 1;\r\n\r\n        // Keep 5% in the resources of the planet\r\n        planets[_planetId].curResources =  planets[_planetId].curResources + commission5percent;\r\n\r\n        // Transfer the 5% commission to the developer\r\n        ceoAddress.transfer(commission5percent);                  \r\n\r\n        // Update the planet owner and set the new price\r\n        planets[_planetId].ownerAddress = msg.sender;\r\n        planets[_planetId].curPrice = planets[_planetId].curPrice + (planets[_planetId].curPrice / 2);\r\n\r\n        // Increment number of planets for new owner\r\n        addressPlanetsCount[msg.sender] = addressPlanetsCount[msg.sender] + 1;\r\n    }\r\n\r\n    //User is purchasing attack\r\n    function purchaseAttack() payable {\r\n\r\n        // Verify that user is paying the correct price\r\n        require(msg.value == attackCost);\r\n        \r\n        // We transfer the amount paid to the owner\r\n        ceoAddress.transfer(msg.value);\r\n\r\n        addressAttackCount[msg.sender]++;\r\n    }\r\n\r\n    //User is purchasing defense\r\n    function purchaseDefense() payable {\r\n        // Verify that user is paying the correct price\r\n        require(msg.value == defenseCost);\r\n        \r\n        // We transfer the amount paid to the owner\r\n        ceoAddress.transfer(msg.value);\r\n        \r\n        addressDefenseCount[msg.sender]++;\r\n    }\r\n\r\n    function StealResources(uint _planetId) {\r\n        // Verify that the address actually own a planet\r\n        require(addressPlanetsCount[msg.sender] > 0);\r\n\r\n        // We verify that this address doesn't own this planet\r\n        require(planets[_planetId].ownerAddress != msg.sender);\r\n\r\n        // We verify that this planet has resources\r\n        require(planets[_planetId].curResources > 0);\r\n\r\n        // Transfer a random amount of resources (between 1% and 90%) of the resources of the planet to the stealer if it's attack is better than the planet's owner defense\r\n        if(addressAttackCount[msg.sender] > addressDefenseCount[planets[_planetId].ownerAddress]) {\r\n            // Generate a random number between 1 and 49\r\n            uint random = uint(keccak256(now, msg.sender, randNonce)) % 49;\r\n            randNonce++;\r\n            \r\n            // Calculate and transfer the random amount of resources to the stealer\r\n            uint256 resourcesStealable = (planets[_planetId].curResources * (50 + random)) / 100;\r\n            msg.sender.transfer(resourcesStealable);\r\n            \r\n            // Save the new resources count\r\n            planets[_planetId].curResources = planets[_planetId].curResources - resourcesStealable;\r\n        }\r\n\r\n    }\r\n    \r\n    // This function will return the details for the connected user (planets count, attack count, defense count)\r\n    function getUserDetails(address _user) public view returns(uint, uint, uint) {\r\n        return(addressPlanetsCount[_user], addressAttackCount[_user], addressDefenseCount[_user]);\r\n    }\r\n    \r\n    // This function will return the details of a planet\r\n    function getPlanet(uint _planetId) public view returns (\r\n        string name,\r\n        address ownerAddress,\r\n        uint256 curPrice,\r\n        uint256 curResources,\r\n        uint ownerAttack,\r\n        uint ownerDefense\r\n    ) {\r\n        Planet storage _planet = planets[_planetId];\r\n\r\n        name = _planet.name;\r\n        ownerAddress = _planet.ownerAddress;\r\n        curPrice = _planet.curPrice;\r\n        curResources = _planet.curResources;\r\n        ownerAttack = addressAttackCount[_planet.ownerAddress];\r\n        ownerDefense = addressDefenseCount[_planet.ownerAddress];\r\n    }\r\n    \r\n    \r\n    // The dev can use this function to create new planets.\r\n    function createPlanet(string _planetName, uint256 _planetPrice) public onlyCeo {\r\n        uint planetId = planets.push(Planet(_planetName, ceoAddress, _planetPrice, 0)) - 1;\r\n    }\r\n    \r\n    // Initiate functions that will create the planets\r\n    function InitiatePlanets() public onlyCeo {\r\n        require(planetsAreInitiated == false);\r\n        createPlanet(\"Blue Lagoon\", 100000000000000000); \r\n        createPlanet(\"GreenPeace\", 100000000000000000); \r\n        createPlanet(\"Medusa\", 100000000000000000); \r\n        createPlanet(\"O'Ranger\", 100000000000000000); \r\n        createPlanet(\"Queen\", 90000000000000000); \r\n        createPlanet(\"Citrus\", 90000000000000000); \r\n        createPlanet(\"O'Ranger II\", 90000000000000000); \r\n        createPlanet(\"Craterion\", 50000000000000000);\r\n        createPlanet(\"Dark'Air\", 50000000000000000);\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_planetName\",\"type\":\"string\"},{\"name\":\"_planetPrice\",\"type\":\"uint256\"}],\"name\":\"createPlanet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressPlanetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"getPlanet\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"},{\"name\":\"curResources\",\"type\":\"uint256\"},{\"name\":\"ownerAttack\",\"type\":\"uint256\"},{\"name\":\"ownerDefense\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseAttack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"StealResources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiatePlanets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"purchasePlanet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseDefense\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressAttackCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressDefenseCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CryptoPlanets","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6c3f9913448f4d55eff00da0406d0d204bddbd504beb40c8dc8dcef047ce47c"}]}