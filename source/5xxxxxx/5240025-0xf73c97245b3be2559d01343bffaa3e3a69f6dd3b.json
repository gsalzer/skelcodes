{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ItemMarket{\r\n\taddress public owner;\r\n\r\n\t// 500 / 10000 = 5%\r\n\tuint16 public devFee = 500;\r\n\tuint256 public ItemCreatePrice = 0.02 ether;\r\n\r\n\tevent ItemCreated(uint256 id);\r\n\tevent ItemBought(uint256 id);\r\n\tevent ItemWon(uint256 id);\r\n\r\n\tstruct Item{\r\n\t\tuint32 timer;\r\n\t\tuint256 timestamp;\r\n\t\tuint16 priceIncrease;\r\n\t\tuint256 price;\r\n\t\tuint256 amount;\r\n\t\tuint256 minPrice;\r\n\t\tuint16 creatorFee;\r\n\t\tuint16 previousFee;\r\n\t\tuint16 potFee;\r\n\r\n\t\taddress creator;\r\n\t\taddress owner;\r\n\t\tstring quote;\r\n\t\tstring name;\r\n\t} \r\n\r\n\tmapping (uint256 => Item) public Items;\r\n\r\n\tuint256 public next_item_index = 0;\r\n\r\n    modifier onlyOwner(){\r\n        if (msg.sender == owner){\r\n            _;\r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function ItemMarket() public{\r\n    \towner = msg.sender;\r\n    \t// Add items \r\n\r\n    \tAddItem(600, 1500, 1 finney, 0, 3000, \"Battery\");\r\n\r\n\r\n    \tAddItem(600, 150, 4 finney, 0, 5000, \"Twig\");\r\n\r\n    \tAddItem(3600, 2000, 10 finney, 0, 4000, \"Solar Panel\");\r\n    \tAddItem(3600*24, 5000, 10 finney, 0, 5000, \"Moon\");\r\n    \tAddItem(3600*24*7, 7500, 50 finney, 0, 7000, \"Ethereum\");\r\n\r\n    }\r\n\r\n    function ChangeFee(uint16 _fee) public onlyOwner{\r\n    \trequire(_fee <= 500);\r\n    \tdevFee = _fee;\r\n    }\r\n\r\n    function ChangeItemPrice(uint256 _newPrice) public onlyOwner{\r\n    \tItemCreatePrice = _newPrice;\r\n    }\r\n\r\n    function AddItem(uint32 timer, uint16 priceIncrease, uint256 minPrice, uint16 creatorFee, uint16 potFee, string name) public payable {\r\n    \trequire (timer >= 300);\r\n    \trequire (timer < 31622400);\r\n\r\n    \trequire(priceIncrease <= 10000);\r\n    \trequire(minPrice >= (1 finney) && minPrice <= (1 ether));\r\n    \trequire(creatorFee <= 2500);\r\n    \trequire(potFee <= 10000);\r\n    \trequire(add(add(creatorFee, potFee), devFee) <= 10000);\r\n\r\n\r\n\r\n    \tif (msg.sender == owner){\r\n    \t\trequire(creatorFee == 0);\r\n    \t\tif (msg.value > 0){\r\n    \t\t\towner.transfer(msg.value);\r\n    \t\t}\r\n    \t}\r\n    \telse{\r\n    \t\tuint256 left = 0;\r\n    \t\tif (msg.value > ItemCreatePrice){\r\n    \t\t\tleft = sub(msg.value, ItemCreatePrice);\r\n    \t\t\tmsg.sender.transfer(left);\r\n    \t\t}\r\n    \t\telse{\r\n    \t\t\tif (msg.value < ItemCreatePrice){\r\n\r\n    \t\t\t\trevert();\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n    \t\towner.transfer(sub(msg.value, left));\r\n    \t}\r\n\r\n\r\n        require (devFee + potFee + creatorFee <= 10000);\r\n        \r\n    \tuint16 previousFee = 10000 - devFee - potFee - creatorFee;\r\n    \tvar NewItem = Item(timer, 0, priceIncrease, minPrice, 0, minPrice, creatorFee, previousFee, potFee, msg.sender, address(0), \"\", name);\r\n\r\n    \tItems[next_item_index] = NewItem;\r\n\r\n    \temit ItemCreated(next_item_index);\r\n\r\n    \tnext_item_index = add(next_item_index,1);\r\n    }\r\n\r\n    function Payout(uint256 id) internal {\r\n    \tvar UsedItem = Items[id];\r\n    \tuint256 Paid = UsedItem.amount;\r\n    \tUsedItem.amount = 0;\r\n\r\n    \tUsedItem.owner.transfer(Paid);\r\n\r\n    \t// reset game \r\n    \tUsedItem.owner = address(0);\r\n    \tUsedItem.price = UsedItem.minPrice;\r\n    \tUsedItem.timestamp = 0;\r\n\r\n    \temit ItemWon(id);\r\n\r\n    }\r\n\r\n\r\n    function TakePrize(uint256 id) public {\r\n    \trequire(id < next_item_index);\r\n    \tvar UsedItem = Items[id];\r\n    \trequire(UsedItem.owner != address(0));\r\n    \tuint256 TimingTarget = add(UsedItem.timer, UsedItem.timestamp);\r\n\r\n    \tif (block.timestamp > TimingTarget){\r\n    \t\tPayout(id);\r\n    \t\treturn;\r\n    \t}\r\n    \telse{\r\n    \t\trevert();\r\n    \t}\r\n    }\r\n\r\n\r\n\r\n\r\n    function BuyItem(uint256 id, string quote) public payable{\r\n    \trequire(id < next_item_index);\r\n    \tvar UsedItem = Items[id];\r\n\r\n\r\n    \tif (UsedItem.owner != address(0) && block.timestamp > (add(UsedItem.timestamp, UsedItem.timer))){\r\n    \t\tPayout(id);\r\n    \t\tif (msg.value > 0){\r\n    \t\t\tmsg.sender.transfer(msg.value);\r\n    \t\t}\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \trequire(msg.value >= UsedItem.price);\r\n    \trequire(msg.sender != owner);\r\n    \t//require(msg.sender != UsedItem.creator); \r\n    \trequire(msg.sender != UsedItem.owner);\r\n\r\n    \tuint256 devFee_used = mul(UsedItem.price, devFee) / 10000;\r\n    \tuint256 creatorFee_used = mul(UsedItem.price, UsedItem.creatorFee) / 10000;\r\n    \tuint256 prevFee_used;\r\n\r\n   \t\tif (UsedItem.owner == address(0)){\r\n   \t\t\t// game not started. \r\n   \t\t\tprevFee_used = 0;\r\n   \t\t}\r\n   \t\telse{\r\n   \t\t\tprevFee_used = (mul(UsedItem.price, UsedItem.previousFee)) / 10000;\r\n   \t\t\tUsedItem.owner.transfer(prevFee_used);\r\n   \t\t}\r\n\r\n   \t\tif (creatorFee_used != 0){\r\n   \t\t\tUsedItem.creator.transfer(creatorFee_used);\r\n   \t\t}\r\n\r\n   \t\tif (devFee_used != 0){\r\n   \t\t\towner.transfer(devFee_used);\r\n   \t\t}\r\n   \t\t\r\n   \t\tif (msg.value > UsedItem.price){\r\n   \t\t    msg.sender.transfer(sub(msg.value, UsedItem.price));\r\n   \t\t}\r\n\r\n   \t\tuint256 potFee_used = sub(sub(sub(UsedItem.price, devFee_used), creatorFee_used), prevFee_used);\r\n\r\n   \t\tUsedItem.amount = add(UsedItem.amount, potFee_used);\r\n   \t\tUsedItem.timestamp = block.timestamp;\r\n   \t\tUsedItem.owner = msg.sender;\r\n   \t\tUsedItem.quote = quote;\r\n   \t\tUsedItem.price = (UsedItem.price * (add(10000, UsedItem.priceIncrease)))/10000;\r\n\r\n   \t\temit ItemBought(id);\r\n    }\r\n    \r\n\tfunction () payable public {\r\n\t\t// msg.value is the amount of Ether sent by the transaction.\r\n\t\tif (msg.value > 0) {\r\n\t\t\tmsg.sender.transfer(msg.value);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t    \r\n    // Not interesting, safe math functions\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n         return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n   }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n   }\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n   }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Items\",\"outputs\":[{\"name\":\"timer\",\"type\":\"uint32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"priceIncrease\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"},{\"name\":\"creatorFee\",\"type\":\"uint16\"},{\"name\":\"previousFee\",\"type\":\"uint16\"},{\"name\":\"potFee\",\"type\":\"uint16\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TakePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"ChangeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"next_item_index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ItemCreatePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"quote\",\"type\":\"string\"}],\"name\":\"BuyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"ChangeItemPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timer\",\"type\":\"uint32\"},{\"name\":\"priceIncrease\",\"type\":\"uint16\"},{\"name\":\"minPrice\",\"type\":\"uint256\"},{\"name\":\"creatorFee\",\"type\":\"uint16\"},{\"name\":\"potFee\",\"type\":\"uint16\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ItemWon\",\"type\":\"event\"}]","ContractName":"ItemMarket","CompilerVersion":"v0.4.22-nightly.2018.3.8+commit.fbc29f6d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73773f2b0a03d8305638cfe568c4be8d1f3cc6bb88495e7d0b23f27899cb56a2"}]}