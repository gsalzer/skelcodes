{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * VNET Token Private Placement Contract\r\n * \r\n * Send ETH here, and you will receive the VNET Tokens immediately.\r\n * \r\n * https://vision.network\r\n */\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20Basic Token\r\n     *\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function rescueTokens(ERC20Basic _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        assert(_token.transfer(owner, balance));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     */\r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title VNET Token Private Placement\r\n */\r\ncontract VNETPrivatePlacement is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Basic public vnetToken;\r\n\r\n    string public description;\r\n    uint256 public rate;\r\n    uint256 public etherMinimum;\r\n    uint256 public etherMaximum;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(ERC20Basic _vnetToken, string _description, uint256 _rate, uint256 _min, uint256 _max) public {\r\n        vnetToken = _vnetToken;\r\n        rate = _rate;\r\n        etherMinimum = _min;\r\n        etherMaximum = _max;\r\n        description = _description;\r\n    }\r\n\r\n    /**\r\n     * @dev receive ETH and send tokens\r\n     */\r\n    function () public payable {\r\n        // Make sure balance > 0\r\n        uint256 balance = vnetToken.balanceOf(address(this));\r\n        require(balance > 0);\r\n        \r\n        // Minimum & Maximum Limit\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount >= etherMinimum.mul(10 ** 18));\r\n        require(weiAmount <= etherMaximum.mul(10 ** 18));\r\n\r\n        // VNET Token Amount to be send back\r\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** 12);\r\n\r\n        // Send VNET\r\n        if (balance >= tokenAmount) {\r\n            assert(vnetToken.transfer(msg.sender, tokenAmount));\r\n            owner.transfer(address(this).balance);\r\n        } else {\r\n            uint256 expend = balance.div(rate);\r\n            assert(vnetToken.transfer(msg.sender, balance));\r\n            msg.sender.transfer(weiAmount - expend.mul(10 ** 12));\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Send VNET Token\r\n     *\r\n     * @param _to address\r\n     * @param _amount uint256\r\n     */ \r\n    function sendVNET(address _to, uint256 _amount) external onlyOwner {\r\n        assert(vnetToken.transfer(_to, _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Set Description\r\n     * \r\n     * @param _description string\r\n     */\r\n    function setDescription(string _description) external onlyOwner {\r\n        description = _description;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set Rate\r\n     * \r\n     * @param _rate uint256\r\n     */\r\n    function setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\r\n        rate = _rate;\r\n        etherMinimum = _min;\r\n        etherMaximum = _max;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vnetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendVNET\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherMaximum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vnetToken\",\"type\":\"address\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VNETPrivatePlacement","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003f13a8039d33fbf19467183e3b4249e7a4c212f500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000222e0000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000235072697661746520506c6163656d656e74206f6620564953494f4e2e4e4554574f524b0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://62a9de334ee1c59e8a366340d26bc68a8889cb76e4a74c64fce30ae3d1396326"}]}