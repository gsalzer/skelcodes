{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TTTToken is ERC20, Ownable {\r\n\tusing SafeMath for uint;\r\n\r\n\tstring public constant name = \"The Tip Token\";\r\n\tstring public constant symbol = \"TTT\";\r\n\r\n\tuint8 public decimals = 18;\r\n\r\n\tmapping(address=>uint256) balances;\r\n\tmapping(address=>mapping(address=>uint256)) allowed;\r\n\r\n\t// Supply variables\r\n\tuint256 public totalSupply_;\r\n\tuint256 public presaleSupply;\r\n\tuint256 public crowdsaleSupply;\r\n\tuint256 public privatesaleSupply;\r\n\tuint256 public airdropSupply;\r\n\tuint256 public teamSupply;\r\n\tuint256 public ecoSupply;\r\n\r\n\t// Vest variables\r\n\tuint256 public firstVestStartsAt;\r\n\tuint256 public secondVestStartsAt;\r\n\tuint256 public firstVestAmount;\r\n\tuint256 public secondVestAmount;\r\n\tuint256 public currentVestedAmount;\r\n\r\n\tuint256 public crowdsaleBurnAmount;\r\n\r\n\t// Token sale addresses\r\n\taddress public privatesaleAddress;\r\n\taddress public presaleAddress;\r\n\taddress public crowdsaleAddress;\r\n\taddress public teamSupplyAddress;\r\n\taddress public ecoSupplyAddress;\r\n\taddress public crowdsaleAirdropAddress;\r\n\taddress public crowdsaleBurnAddress;\r\n\taddress public tokenSaleAddress;\r\n\r\n\t// Token sale state variables\r\n\tbool public privatesaleFinalized;\r\n\tbool public presaleFinalized;\r\n\tbool public crowdsaleFinalized;\r\n\r\n\tevent PrivatesaleFinalized(uint tokensRemaining);\r\n\tevent PresaleFinalized(uint tokensRemaining);\r\n\tevent CrowdsaleFinalized(uint tokensRemaining);\r\n\tevent Burn(address indexed burner, uint256 value);\r\n\tevent TokensaleAddressSet(address tSeller, address from);\r\n\r\n\tmodifier onlyTokenSale() {\r\n\t\trequire(msg.sender == tokenSaleAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier canItoSend() {\r\n\t\trequire(crowdsaleFinalized == true || (crowdsaleFinalized == false && msg.sender == ecoSupplyAddress));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction TTTToken() {\r\n\t\t// 600 million total supply divided into\r\n\t\t//\t\t90 million to privatesale address\r\n\t\t//\t\t120 million to presale address\r\n\t\t//\t\t180 million to crowdsale address\r\n\t\t//\t\t90 million to eco supply address\r\n\t\t//\t\t120 million to team supply address\r\n\t\ttotalSupply_ = 600000000 * 10**uint(decimals);\r\n\t\tprivatesaleSupply = 90000000 * 10**uint(decimals);\r\n\t\tpresaleSupply = 120000000 * 10**uint(decimals);\r\n\t\tcrowdsaleSupply = 180000000 * 10**uint(decimals);\r\n\t\tecoSupply = 90000000 * 10**uint(decimals);\r\n\t\tteamSupply = 120000000 * 10**uint(decimals);\r\n\r\n\t\tfirstVestAmount = teamSupply.div(2);\r\n\t\tsecondVestAmount = firstVestAmount;\r\n\t\tcurrentVestedAmount = 0;\r\n\r\n\t\tprivatesaleAddress = 0xE67EE1935bf160B48BA331074bb743630ee8aAea;\r\n\t\tpresaleAddress = 0x4A41D67748D16aEB12708E88270d342751223870;\r\n\t\tcrowdsaleAddress = 0x2eDf855e5A90DF003a5c1039bEcf4a721C9c3f9b;\r\n\t\tteamSupplyAddress = 0xc4146EcE2645038fbccf79784a6DcbE3C6586c03;\r\n\t\tecoSupplyAddress = 0xdBA99B92a18930dA39d1e4B52177f84a0C27C8eE;\r\n\t\tcrowdsaleAirdropAddress = 0x6BCb947a8e8E895d1258C1b2fc84A5d22632E6Fa;\r\n\t\tcrowdsaleBurnAddress = 0xDF1CAf03FA89AfccdAbDd55bAF5C9C4b9b1ceBaB;\r\n\r\n\t\taddToBalance(privatesaleAddress, privatesaleSupply);\r\n\t\taddToBalance(presaleAddress, presaleSupply);\r\n\t\taddToBalance(crowdsaleAddress, crowdsaleSupply);\r\n\t\taddToBalance(teamSupplyAddress, teamSupply);\r\n\t\taddToBalance(ecoSupplyAddress, ecoSupply);\r\n\r\n\t\t// 12/01/2018 @ 12:00am (UTC)\r\n\t\tfirstVestStartsAt = 1543622400;\r\n\t\t// 06/01/2019 @ 12:00am (UTC)\r\n\t\tsecondVestStartsAt = 1559347200;\r\n\t}\r\n\r\n\t// Transfer\r\n\tfunction transfer(address _to, uint256 _amount) public canItoSend returns (bool success) {\r\n\t\trequire(balanceOf(msg.sender) >= _amount);\r\n\t\taddToBalance(_to, _amount);\r\n\t\tdecrementBalance(msg.sender, _amount);\r\n\t\tTransfer(msg.sender, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Transfer from one address to another\r\n\tfunction transferFrom(address _from, address _to, uint256 _amount) public canItoSend returns (bool success) {\r\n\t\trequire(allowance(_from, msg.sender) >= _amount);\r\n\t\tdecrementBalance(_from, _amount);\r\n\t\taddToBalance(_to, _amount);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n\t\tTransfer(_from, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Function for token sell contract to call on transfers\r\n\tfunction transferFromTokenSell(address _to, address _from, uint256 _amount) external onlyTokenSale returns (bool success) {\r\n\t\trequire(_amount > 0);\r\n\t\trequire(_to != 0x0);\r\n\t\trequire(balanceOf(_from) >= _amount);\r\n\t\tdecrementBalance(_from, _amount);\r\n\t\taddToBalance(_to, _amount);\r\n\t\tTransfer(_from, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Approve another address a certain amount of TTT\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\trequire((_value == 0) || (allowance(msg.sender, _spender) == 0));\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Get an address's TTT allowance\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t// Get TTT balance of an address\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t// Return total supply\r\n\tfunction totalSupply() public view returns (uint256 totalSupply) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\t// Set the tokenSell contract address, can only be set once\r\n\tfunction setTokenSaleAddress(address _tokenSaleAddress) external onlyOwner {\r\n\t\trequire(tokenSaleAddress == 0x0);\r\n\t\ttokenSaleAddress = _tokenSaleAddress;\r\n\t\tTokensaleAddressSet(tokenSaleAddress, msg.sender);\r\n\t}\r\n\r\n\t// Finalize private. If there are leftover TTT, overflow to presale\r\n\tfunction finalizePrivatesale() external onlyTokenSale returns (bool success) {\r\n\t\trequire(privatesaleFinalized == false);\r\n\t\tuint256 amount = balanceOf(privatesaleAddress);\r\n\t\tif (amount != 0) {\r\n\t\t\taddToBalance(presaleAddress, amount);\r\n\t\t\tdecrementBalance(privatesaleAddress, amount);\r\n\t\t}\r\n\t\tprivatesaleFinalized = true;\r\n\t\tPrivatesaleFinalized(amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Finalize presale. If there are leftover TTT, overflow to crowdsale\r\n\tfunction finalizePresale() external onlyTokenSale returns (bool success) {\r\n\t\trequire(presaleFinalized == false && privatesaleFinalized == true);\r\n\t\tuint256 amount = balanceOf(presaleAddress);\r\n\t\tif (amount != 0) {\r\n\t\t\taddToBalance(crowdsaleAddress, amount);\r\n\t\t\tdecrementBalance(presaleAddress, amount);\r\n\t\t}\r\n\t\tpresaleFinalized = true;\r\n\t\tPresaleFinalized(amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Finalize crowdsale. If there are leftover TTT, add 10% to airdrop, 20% to ecosupply, burn 70% at a later date\r\n\tfunction finalizeCrowdsale(uint256 _burnAmount, uint256 _ecoAmount, uint256 _airdropAmount) external onlyTokenSale returns(bool success) {\r\n\t\trequire(presaleFinalized == true && crowdsaleFinalized == false);\r\n\t\tuint256 amount = balanceOf(crowdsaleAddress);\r\n\t\tassert((_burnAmount.add(_ecoAmount).add(_airdropAmount)) == amount);\r\n\t\tif (amount > 0) {\r\n\t\t\tcrowdsaleBurnAmount = _burnAmount;\r\n\t\t\taddToBalance(ecoSupplyAddress, _ecoAmount);\r\n\t\t\taddToBalance(crowdsaleBurnAddress, crowdsaleBurnAmount);\r\n\t\t\taddToBalance(crowdsaleAirdropAddress, _airdropAmount);\r\n\t\t\tdecrementBalance(crowdsaleAddress, amount);\r\n\t\t\tassert(balanceOf(crowdsaleAddress) == 0);\r\n\t\t}\r\n\t\tcrowdsaleFinalized = true;\r\n\t\tCrowdsaleFinalized(amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Burns a specific amount of tokens. * added onlyOwner, as this will only happen from owner, if there are crowdsale leftovers\r\n\t* @param _value The amount of token to be burned.\r\n\t* @dev imported from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BurnableToken.sol\r\n\t*/\r\n\tfunction burn(uint256 _value) public onlyOwner {\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\t\trequire(crowdsaleFinalized == true);\r\n\t\t// no need to require value <= totalSupply, since that would imply the\r\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n\t\taddress burner = msg.sender;\r\n\t\tbalances[burner] = balances[burner].sub(_value);\r\n\t\ttotalSupply_ = totalSupply_.sub(_value);\r\n\t\tBurn(burner, _value);\r\n\t\tTransfer(burner, address(0), _value);\r\n\t}\r\n\r\n\t// Transfer tokens from the vested address. 50% available 12/01/2018, the rest available 06/01/2019\r\n\tfunction transferFromVest(uint256 _amount) public onlyOwner {\r\n\t\trequire(block.timestamp > firstVestStartsAt);\r\n\t\trequire(crowdsaleFinalized == true);\r\n\t\trequire(_amount > 0);\r\n\t\tif(block.timestamp > secondVestStartsAt) {\r\n\t\t\t// all tokens available for vest withdrawl\r\n\t\t\trequire(_amount <= teamSupply);\r\n\t\t\trequire(_amount <= balanceOf(teamSupplyAddress));\r\n\t\t} else {\r\n\t\t\t// only first vest available\r\n\t\t\trequire(_amount <= (firstVestAmount - currentVestedAmount));\r\n\t\t\trequire(_amount <= balanceOf(teamSupplyAddress));\r\n\t\t}\r\n\t\tcurrentVestedAmount = currentVestedAmount.add(_amount);\r\n\t\taddToBalance(msg.sender, _amount);\r\n\t\tdecrementBalance(teamSupplyAddress, _amount);\r\n\t\tTransfer(teamSupplyAddress, msg.sender, _amount);\r\n\t}\r\n\r\n\t// Add to balance\r\n\tfunction addToBalance(address _address, uint _amount) internal {\r\n\t\tbalances[_address] = balances[_address].add(_amount);\r\n\t}\r\n\r\n\t// Remove from balance\r\n\tfunction decrementBalance(address _address, uint _amount) internal {\r\n\t\tbalances[_address] = balances[_address].sub(_amount);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatesaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnAmount\",\"type\":\"uint256\"},{\"name\":\"_ecoAmount\",\"type\":\"uint256\"},{\"name\":\"_airdropAmount\",\"type\":\"uint256\"}],\"name\":\"finalizeCrowdsale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondVestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupplyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSaleAddress\",\"type\":\"address\"}],\"name\":\"setTokenSaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatesaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromTokenSell\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoSupplyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleBurnAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatesaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleBurnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAirdropAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstVestStartsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePrivatesale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstVestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondVestStartsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromVest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"PrivatesaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"PresaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tSeller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"TokensaleAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TTTToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8f71ce502c5620926f4674d985447bc818b0163e3eefe9b2b3193115dee200b3"}]}