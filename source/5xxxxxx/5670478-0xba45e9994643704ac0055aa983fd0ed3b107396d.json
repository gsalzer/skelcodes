{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract OracleI {\r\n    bytes32 public oracleName;\r\n    bytes16 public oracleType;\r\n    uint256 public rate;\r\n    bool public waitQuery;\r\n    uint256 public updateTime;\r\n    uint256 public callbackTime;\r\n    function getPrice() view public returns (uint);\r\n    function setBank(address _bankAddress) public;\r\n    function setGasPrice(uint256 _price) public;\r\n    function setGasLimit(uint256 _limit) public;\r\n    function updateRate() external returns (bool);\r\n}\r\n\r\ninterface ExchangerI {\r\n    /* Order creation */\r\n    function buyTokens(address _recipient) payable public;\r\n    function sellTokens(address _recipient, uint256 tokensCount) public;\r\n\r\n    /* Rate calc & init  params */\r\n    function requestRates() payable public;\r\n    function calcRates() public;\r\n\r\n    /* Data getters */\r\n    function tokenBalance() public view returns(uint256);\r\n    function getOracleData(uint number) public view returns (address, bytes32, bytes16, bool, uint256, uint256, uint256);\r\n\r\n    /* Balance methods */\r\n    function refillBalance() payable public;\r\n    function withdrawReserve() public;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title LibreCash token contract.\r\n *\r\n * @dev ERC20 token contract.\r\n */\r\ncontract LibreCash is MintableToken, BurnableToken, Claimable  {\r\n    string public constant name = \"LibreCash\";\r\n    string public constant symbol = \"Libre\";\r\n    uint32 public constant decimals = 18;\r\n}\r\n\r\n\r\ncontract ComplexExchanger is ExchangerI {\r\n    using SafeMath for uint256;\r\n\r\n    address public tokenAddress;\r\n    LibreCash token;\r\n    address[] public oracles;\r\n    uint256 public deadline;\r\n    address public withdrawWallet;\r\n\r\n    uint256 public requestTime;\r\n    uint256 public calcTime;\r\n\r\n    uint256 public buyRate;\r\n    uint256 public sellRate;\r\n    uint256 public buyFee;\r\n    uint256 public sellFee;\r\n\r\n    uint256 constant ORACLE_ACTUAL = 15 minutes;\r\n    uint256 constant ORACLE_TIMEOUT = 10 minutes;\r\n    // RATE_PERIOD should be greater than or equal to ORACLE_ACTUAL\r\n    uint256 constant RATE_PERIOD = 15 minutes;\r\n    uint256 constant MIN_READY_ORACLES = 2;\r\n    uint256 constant FEE_MULTIPLIER = 100;\r\n    uint256 constant RATE_MULTIPLIER = 1000;\r\n    uint256 constant MAX_RATE = 5000 * RATE_MULTIPLIER;\r\n    uint256 constant MIN_RATE = 100 * RATE_MULTIPLIER;\r\n\r\n    event InvalidRate(uint256 rate, address oracle);\r\n    event OracleRequest(address oracle);\r\n    event Buy(address sender, address recipient, uint256 tokenAmount, uint256 price);\r\n    event Sell(address sender, address recipient, uint256 cryptoAmount, uint256 price);\r\n    event ReserveRefill(uint256 amount);\r\n    event ReserveWithdraw(uint256 amount);\r\n\r\n    enum State {\r\n        LOCKED,\r\n        PROCESSING_ORDERS,\r\n        WAIT_ORACLES,\r\n        CALC_RATES,\r\n        REQUEST_RATES\r\n    }\r\n\r\n    function() payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function ComplexExchanger(\r\n        address _token,\r\n        uint256 _buyFee,\r\n        uint256 _sellFee,\r\n        address[] _oracles,\r\n        uint256 _deadline,\r\n        address _withdrawWallet\r\n    ) public\r\n    {\r\n        require(\r\n            _withdrawWallet != address(0x0) &&\r\n            _token != address(0x0) &&\r\n            _deadline > now &&\r\n            _oracles.length >= MIN_READY_ORACLES\r\n        );\r\n\r\n        tokenAddress = _token;\r\n        token = LibreCash(tokenAddress);\r\n        oracles = _oracles;\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n        deadline = _deadline;\r\n        withdrawWallet = _withdrawWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the contract state.\r\n     */\r\n    function getState() public view returns (State) {\r\n        if (now >= deadline)\r\n            return State.LOCKED;\r\n\r\n        if (now - calcTime < RATE_PERIOD)\r\n            return State.PROCESSING_ORDERS;\r\n\r\n        if (waitingOracles() != 0)\r\n            return State.WAIT_ORACLES;\r\n\r\n        if (readyOracles() >= MIN_READY_ORACLES)\r\n            return State.CALC_RATES;\r\n\r\n        return State.REQUEST_RATES;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows user to buy tokens by ether.\r\n     * @param _recipient The recipient of tokens.\r\n     */\r\n    function buyTokens(address _recipient) public payable {\r\n        require(getState() == State.PROCESSING_ORDERS);\r\n\r\n        uint256 availableTokens = tokenBalance();\r\n        require(availableTokens > 0);\r\n\r\n        uint256 tokensAmount = msg.value.mul(buyRate) / RATE_MULTIPLIER;\r\n        require(tokensAmount != 0);\r\n\r\n        uint256 refundAmount = 0;\r\n        // if recipient set as 0x0 - recipient is sender\r\n        address recipient = _recipient == 0x0 ? msg.sender : _recipient;\r\n\r\n        if (tokensAmount > availableTokens) {\r\n            refundAmount = tokensAmount.sub(availableTokens).mul(RATE_MULTIPLIER) / buyRate;\r\n            tokensAmount = availableTokens;\r\n        }\r\n\r\n        token.transfer(recipient, tokensAmount);\r\n        Buy(msg.sender, recipient, tokensAmount, buyRate);\r\n        if (refundAmount > 0)\r\n            recipient.transfer(refundAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows user to sell tokens and get ether.\r\n     * @param _recipient The recipient of ether.\r\n     * @param tokensCount The count of tokens to sell.\r\n     */\r\n    function sellTokens(address _recipient, uint256 tokensCount) public {\r\n        require(getState() == State.PROCESSING_ORDERS);\r\n        require(tokensCount <= token.allowance(msg.sender, this));\r\n\r\n        uint256 cryptoAmount = tokensCount.mul(RATE_MULTIPLIER) / sellRate;\r\n        require(cryptoAmount != 0);\r\n\r\n        if (cryptoAmount > this.balance) {\r\n            uint256 extraTokens = (cryptoAmount - this.balance).mul(sellRate) / RATE_MULTIPLIER;\r\n            cryptoAmount = this.balance;\r\n            tokensCount = tokensCount.sub(extraTokens);\r\n        }\r\n\r\n        token.transferFrom(msg.sender, this, tokensCount);\r\n        address recipient = _recipient == 0x0 ? msg.sender : _recipient;\r\n\r\n        Sell(msg.sender, recipient, cryptoAmount, sellRate);\r\n        recipient.transfer(cryptoAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Requests oracles rates updating; funds oracles if needed.\r\n     */\r\n    function requestRates() public payable {\r\n        require(getState() == State.REQUEST_RATES);\r\n        // Or just sub msg.value\r\n        // If it will be below zero - it will throw revert()\r\n        // require(msg.value >= requestPrice());\r\n        uint256 value = msg.value;\r\n\r\n        for (uint256 i = 0; i < oracles.length; i++) {\r\n            OracleI oracle = OracleI(oracles[i]);\r\n            uint callPrice = oracle.getPrice();\r\n\r\n            // If oracle needs funds - refill it\r\n            if (oracles[i].balance < callPrice) {\r\n                value = value.sub(callPrice);\r\n                oracles[i].transfer(callPrice);\r\n            }\r\n\r\n            if (oracle.updateRate())\r\n                OracleRequest(oracles[i]);\r\n        }\r\n        requestTime = now;\r\n\r\n        if (value > 0)\r\n            msg.sender.transfer(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns cost of requestRates function.\r\n     */\r\n    function requestPrice() public view returns(uint256) {\r\n        uint256 requestCost = 0;\r\n        for (uint256 i = 0; i < oracles.length; i++) {\r\n            requestCost = requestCost.add(OracleI(oracles[i]).getPrice());\r\n        }\r\n        return requestCost;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates buy and sell rates after oracles have received it.\r\n     */\r\n    function calcRates() public {\r\n        require(getState() == State.CALC_RATES);\r\n\r\n        uint256 minRate = 2**256 - 1; // Max for UINT256\r\n        uint256 maxRate = 0;\r\n        uint256 validOracles = 0;\r\n\r\n        for (uint256 i = 0; i < oracles.length; i++) {\r\n            OracleI oracle = OracleI(oracles[i]);\r\n            uint256 rate = oracle.rate();\r\n            if (oracle.waitQuery()) {\r\n                continue;\r\n            }\r\n            if (isRateValid(rate)) {\r\n                minRate = Math.min256(rate, minRate);\r\n                maxRate = Math.max256(rate, maxRate);\r\n                validOracles++;\r\n            } else {\r\n                InvalidRate(rate, oracles[i]);\r\n            }\r\n        }\r\n        // If valid rates data is insufficient - throw\r\n        if (validOracles < MIN_READY_ORACLES)\r\n            revert();\r\n\r\n        buyRate = minRate.mul(FEE_MULTIPLIER * RATE_MULTIPLIER - buyFee * RATE_MULTIPLIER / 100) / FEE_MULTIPLIER / RATE_MULTIPLIER;\r\n        sellRate = maxRate.mul(FEE_MULTIPLIER * RATE_MULTIPLIER + sellFee * RATE_MULTIPLIER / 100) / FEE_MULTIPLIER / RATE_MULTIPLIER;\r\n\r\n        calcTime = now;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns contract oracles' count.\r\n     */\r\n    function oracleCount() public view returns(uint256) {\r\n        return oracles.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns token balance of the sender.\r\n     */\r\n    function tokenBalance() public view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns data for an oracle by its id in the array.\r\n     */\r\n    function getOracleData(uint number)\r\n        public\r\n        view\r\n        returns (address, bytes32, bytes16, bool, uint256, uint256, uint256)\r\n                /* address, name, type, waitQuery, updTime, clbTime, rate */\r\n    {\r\n        OracleI curOracle = OracleI(oracles[number]);\r\n\r\n        return(\r\n            oracles[number],\r\n            curOracle.oracleName(),\r\n            curOracle.oracleType(),\r\n            curOracle.waitQuery(),\r\n            curOracle.updateTime(),\r\n            curOracle.callbackTime(),\r\n            curOracle.rate()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns ready (which have data to be used) oracles count.\r\n     */\r\n    function readyOracles() public view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < oracles.length; i++) {\r\n            OracleI oracle = OracleI(oracles[i]);\r\n            if ((oracle.rate() != 0) &&\r\n                !oracle.waitQuery() &&\r\n                (now - oracle.updateTime()) < ORACLE_ACTUAL)\r\n                count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns wait query oracle count.\r\n     */\r\n    function waitingOracles() public view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < oracles.length; i++) {\r\n            if (OracleI(oracles[i]).waitQuery() && (now - requestTime) < ORACLE_TIMEOUT) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws balance only to special hardcoded wallet ONLY WHEN contract is locked.\r\n     */\r\n    function withdrawReserve() public {\r\n        require(getState() == State.LOCKED && msg.sender == withdrawWallet);\r\n        ReserveWithdraw(this.balance);\r\n        withdrawWallet.transfer(this.balance);\r\n        token.burn(tokenBalance());\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit eth to the contract without creating orders.\r\n     */\r\n    function refillBalance() public payable {\r\n        ReserveRefill(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if given rate is within limits; internal.\r\n     * @param rate Rate.\r\n     */\r\n    function isRateValid(uint256 rate) internal pure returns(bool) {\r\n        return rate >= MIN_RATE && rate <= MAX_RATE;\r\n    }\r\n    \r\n    function setDeadline(uint256 _deadline) public {\r\n        deadline = _deadline;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LibertyToken is StandardToken, BurnableToken {\r\n  string public name = \"LibreBank\";\r\n  string public symbol = \"LBRS\";\r\n  uint256 public decimals = 18;\r\n\r\nfunction LibertyToken() public {\r\n  totalSupply_ = 100 * (10**6) * (10**decimals);\r\n  balances[msg.sender] = totalSupply_;\r\n}\r\n} \r\n\r\ncontract LBRSMultitransfer is Ownable {\r\n    address public lbrsToken;\r\n    address public sender;\r\n    LibertyToken token;\r\n\r\n    /**\r\n     * @dev Implements transfer method for multiple recipient. Needed in LBRS token distribution process after ICO\r\n     * @param recipient - recipient addresses array\r\n     * @param balance - refill amounts array\r\n     */\r\n    function multiTransfer(address[] recipient,uint256[] balance) public {\r\n        require(recipient.length == balance.length && msg.sender == sender);\r\n\r\n        for (uint256 i = 0; i < recipient.length; i++) {\r\n            token.transfer(recipient[i],balance[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param LBRS - LBRS token address\r\n     */\r\n    function LBRSMultitransfer(address LBRS, address _sender) public {\r\n        lbrsToken = LBRS;\r\n        sender = _sender;\r\n        token = LibertyToken(lbrsToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw unsold tokens\r\n     */\r\n    function withdrawTokens() public onlyOwner {\r\n        token.transfer(owner,tokenBalance());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns LBRS token balance of contract.\r\n     */\r\n    function tokenBalance() public view returns(uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n     /**\r\n     * @dev Sets new token sender address\r\n     * @param _sender - token sender addresses\r\n     */\r\n    function setSender(address _sender) public onlyOwner {\r\n        sender = _sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Kill contracts after ICO.\r\n     */\r\n    function kill() public onlyOwner {\r\n        withdrawTokens();\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address[]\"},{\"name\":\"balance\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lbrsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"setSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"LBRS\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LBRSMultitransfer","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a91f395c5f0f1d2c3bc3bd6c06b3eaa8e219b14800000000000000000000000021fc72e634fdc0ba31c13bdb8e341eab1c436610","Library":"","SwarmSource":"bzzr://6ecc3918d18fc4437c35ab39d785c4c47e56a9a7354e2bd080afdbe6753c24db"}]}