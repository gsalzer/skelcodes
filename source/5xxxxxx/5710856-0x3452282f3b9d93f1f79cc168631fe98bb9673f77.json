{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/IEscrow.sol\r\n\r\n/**\r\n * @title Escrow interface\r\n *\r\n * @dev https://send.sd/token\r\n */\r\ninterface IEscrow {\r\n\r\n  event Created(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    address indexed arbitrator,\r\n    uint256 transactionId\r\n  );\r\n  event Released(address indexed arbitrator, address indexed sentTo, uint256 transactionId);\r\n  event Dispute(address indexed arbitrator, uint256 transactionId);\r\n  event Paid(address indexed arbitrator, uint256 transactionId);\r\n\r\n  function create(\r\n      address _sender,\r\n      address _recipient,\r\n      address _arbitrator,\r\n      uint256 _transactionId,\r\n      uint256 _tokens,\r\n      uint256 _fee,\r\n      uint256 _expiration\r\n  ) public;\r\n\r\n  function fund(\r\n      address _sender,\r\n      address _arbitrator,\r\n      uint256 _transactionId,\r\n      uint256 _tokens,\r\n      uint256 _fee\r\n  ) public;\r\n\r\n}\r\n\r\n// File: contracts/ISendToken.sol\r\n\r\n/**\r\n * @title ISendToken - Send Consensus Network Token interface\r\n * @dev token interface built on top of ERC20 standard interface\r\n * @dev see https://send.sd/token\r\n */\r\ninterface ISendToken {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function isVerified(address _address) public constant returns(bool);\r\n\r\n  function verify(address _address) public;\r\n\r\n  function unverify(address _address) public;\r\n\r\n  function verifiedTransferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 value,\r\n      uint256 referenceId,\r\n      uint256 exchangeRate,\r\n      uint256 fee\r\n  ) public;\r\n\r\n  function issueExchangeRate(\r\n      address _from,\r\n      address _to,\r\n      address _verifiedAddress,\r\n      uint256 _value,\r\n      uint256 _referenceId,\r\n      uint256 _exchangeRate\r\n  ) public;\r\n\r\n  event VerifiedTransfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      address indexed verifiedAddress,\r\n      uint256 value,\r\n      uint256 referenceId,\r\n      uint256 exchangeRate\r\n  );\r\n}\r\n\r\n// File: contracts/ISnapshotToken.sol\r\n\r\n/**\r\n * @title Snapshot Token\r\n *\r\n * @dev Snapshot Token interface\r\n * @dev https://send.sd/token\r\n */\r\ninterface ISnapshotToken {\r\n  function requestSnapshots(uint256 _blockNumber) public;\r\n  function takeSnapshot(address _owner) public returns(uint256);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SnapshotToken.sol\r\n\r\n/**\r\n * @title Snapshot Token\r\n *\r\n * @dev Snapshot Token implementtion\r\n * @dev https://send.sd/token\r\n */\r\ncontract SnapshotToken is ISnapshotToken, StandardToken, Ownable {\r\n  uint256 public snapshotBlock;\r\n\r\n  mapping (address => Snapshot) internal snapshots;\r\n\r\n  struct Snapshot {\r\n    uint256 block;\r\n    uint256 balance;\r\n  }\r\n\r\n  address public polls;\r\n\r\n  modifier isPolls() {\r\n    require(msg.sender == address(polls));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove Verified status of a given address\r\n   * @notice Only contract owner\r\n   * @param _address Address to unverify\r\n   */\r\n  function setPolls(address _address) public onlyOwner {\r\n    polls = _address;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend OpenZeppelin's BasicToken transfer function to store snapshot\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    takeSnapshot(msg.sender);\r\n    takeSnapshot(_to);\r\n    return BasicToken.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Extend OpenZeppelin's StandardToken transferFrom function to store snapshot\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    takeSnapshot(_from);\r\n    takeSnapshot(_to);\r\n    return StandardToken.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Take snapshot\r\n   * @param _owner address The address to take snapshot from\r\n   */\r\n  function takeSnapshot(address _owner) public returns(uint256) {\r\n    if (snapshots[_owner].block < snapshotBlock) {\r\n      snapshots[_owner].block = snapshotBlock;\r\n      snapshots[_owner].balance = balanceOf(_owner);\r\n    }\r\n    return snapshots[_owner].balance;\r\n  }\r\n\r\n  /**\r\n   * @dev Set snacpshot block\r\n   * @param _blockNumber uint256 The new blocknumber for snapshots\r\n   */\r\n  function requestSnapshots(uint256 _blockNumber) public isPolls {\r\n    snapshotBlock = _blockNumber;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/SendToken.sol\r\n\r\n/**\r\n * @title Send token\r\n *\r\n * @dev Implementation of Send Consensus network Standard\r\n * @dev https://send.sd/token\r\n */\r\ncontract SendToken is ISendToken, SnapshotToken, BurnableToken {\r\n  IEscrow public escrow;\r\n\r\n  mapping (address => bool) internal verifiedAddresses;\r\n\r\n  modifier verifiedResticted() {\r\n    require(verifiedAddresses[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier escrowResticted() {\r\n    require(msg.sender == address(escrow));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an address is whitelisted by SEND\r\n   * @param _address Address to check\r\n   * @return bool\r\n   */\r\n  function isVerified(address _address) public view returns(bool) {\r\n    return verifiedAddresses[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev Verify an addres\r\n   * @notice Only contract owner\r\n   * @param _address Address to verify\r\n   */\r\n  function verify(address _address) public onlyOwner {\r\n    verifiedAddresses[_address] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove Verified status of a given address\r\n   * @notice Only contract owner\r\n   * @param _address Address to unverify\r\n   */\r\n  function unverify(address _address) public onlyOwner {\r\n    verifiedAddresses[_address] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove Verified status of a given address\r\n   * @notice Only contract owner\r\n   * @param _address Address to unverify\r\n   */\r\n  function setEscrow(address _address) public onlyOwner {\r\n    escrow = IEscrow(_address);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer from one address to another issuing ane xchange rate\r\n   * @notice Only verified addresses\r\n   * @notice Exchange rate has 18 decimal places\r\n   * @notice Value + fee <= allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   * @param _referenceId internal app/user ID\r\n   * @param _exchangeRate Exchange rate to sign transaction\r\n   * @param _fee fee tot ake from sender\r\n   */\r\n  function verifiedTransferFrom(\r\n      address _from,\r\n      address _to,\r\n      uint256 _value,\r\n      uint256 _referenceId,\r\n      uint256 _exchangeRate,\r\n      uint256 _fee\r\n  ) public verifiedResticted {\r\n    require(_exchangeRate > 0);\r\n\r\n    transferFrom(_from, _to, _value);\r\n    transferFrom(_from, msg.sender, _fee);\r\n\r\n    VerifiedTransfer(\r\n      _from,\r\n      _to,\r\n      msg.sender,\r\n      _value,\r\n      _referenceId,\r\n      _exchangeRate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev create an escrow transfer being the arbitrator\r\n   * @param _sender Address to send tokens\r\n   * @param _recipient Address to receive tokens\r\n   * @param _transactionId internal ID for arbitrator\r\n   * @param _tokens Amount of tokens to lock\r\n   * @param _fee A fee to be paid to arbitrator (may be 0)\r\n   * @param _expiration After this timestamp, user can claim tokens back.\r\n   */\r\n  function createEscrow(\r\n      address _sender,\r\n      address _recipient,\r\n      uint256 _transactionId,\r\n      uint256 _tokens,\r\n      uint256 _fee,\r\n      uint256 _expiration\r\n  ) public {\r\n    escrow.create(\r\n      _sender,\r\n      _recipient,\r\n      msg.sender,\r\n      _transactionId,\r\n      _tokens,\r\n      _fee,\r\n      _expiration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev fund escrow\r\n   * @dev specified amount will be locked on escrow contract\r\n   * @param _arbitrator Address of escrow arbitrator\r\n   * @param _transactionId internal ID for arbitrator\r\n   * @param _tokens Amount of tokens to lock\r\n   * @param _fee A fee to be paid to arbitrator (may be 0)\r\n   */\r\n  function fundEscrow(\r\n      address _arbitrator,\r\n      uint256 _transactionId,\r\n      uint256 _tokens,\r\n      uint256 _fee\r\n  ) public {\r\n    uint256 total = _tokens.add(_fee);\r\n    transfer(escrow, total);\r\n\r\n    escrow.fund(\r\n      msg.sender,\r\n      _arbitrator,\r\n      _transactionId,\r\n      _tokens,\r\n      _fee\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Issue exchange rates from escrow contract\r\n   * @param _from Address to send tokens\r\n   * @param _to Address to receive tokens\r\n   * @param _verifiedAddress Address issuing the exchange rate\r\n   * @param _value amount\r\n   * @param _transactionId internal ID for issuer's reference\r\n   * @param _exchangeRate exchange rate\r\n   */\r\n  function issueExchangeRate(\r\n      address _from,\r\n      address _to,\r\n      address _verifiedAddress,\r\n      uint256 _value,\r\n      uint256 _transactionId,\r\n      uint256 _exchangeRate\r\n  ) public escrowResticted {\r\n    bool noRate = (_exchangeRate == 0);\r\n    if (isVerified(_verifiedAddress)) {\r\n      require(!noRate);\r\n      VerifiedTransfer(\r\n        _from,\r\n        _to,\r\n        _verifiedAddress,\r\n        _value,\r\n        _transactionId,\r\n        _exchangeRate\r\n      );\r\n    } else {\r\n      require(noRate);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/SDT.sol\r\n\r\n/**\r\n * @title To instance SendToken for SEND foundation crowdasale\r\n * @dev see https://send.sd/token\r\n */\r\ncontract SDT is SendToken {\r\n  string constant public name = \"SEND Token\";\r\n  string constant public symbol = \"SDT\";\r\n  uint256 constant public decimals = 18;\r\n\r\n  modifier validAddress(address _address) {\r\n    require(_address != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Constructor\r\n  * @param _sale Address that will hold all vesting allocated tokens\r\n  * @notice contract owner will have special powers in the contract\r\n  * @notice _sale should hold all tokens in production as all pool will be vested\r\n  * @return A uint256 representing the locked amount of tokens\r\n  */\r\n  function SDT(address _sale) public validAddress(_sale) {\r\n    verifiedAddresses[owner] = true;\r\n    totalSupply = 700000000 * 10 ** decimals;\r\n    balances[_sale] = totalSupply;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"createEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snapshotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"fundEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"requestSnapshots\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"takeSnapshot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_verifiedAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"issueExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPolls\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_referenceId\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"verifiedTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unverify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polls\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"verifiedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referenceId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"VerifiedTransfer\",\"type\":\"event\"}]","ContractName":"SDT","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f8b4474100c938d2a07ba2c62b6e3244a1beed66","Library":"","SwarmSource":"bzzr://8d5989cce5df8faf135b510ae65e37c4c357cd86dc6245c2bbae43b6ca056fa9"}]}