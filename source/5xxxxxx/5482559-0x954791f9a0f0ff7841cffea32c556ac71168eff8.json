{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// Random lottery\r\n// Smart contracts can't bet\r\n\r\n// Pay 0.001 to get a random number\r\n// If your random number is the highest so far you're in the lead\r\n// If no one beats you in 1 day you can claim your winnnings - the entire balance.\r\n\r\ncontract RandoLotto {\r\n    \r\n    uint256 PrizePool;\r\n    uint256 highScore;\r\n    address currentWinner;\r\n    uint256 lastTimestamp;\r\n    \r\n    constructor () public {\r\n        highScore = 0;\r\n        currentWinner = msg.sender;\r\n        lastTimestamp = now;\r\n    }\r\n    \r\n    function () public payable {\r\n        require(msg.sender == tx.origin);\r\n        require(msg.value >= 0.001 ether);\r\n    \r\n        uint256 randomNumber = uint256(keccak256(blockhash(block.number - 1)));\r\n        \r\n        if (randomNumber > highScore) {\r\n            currentWinner = msg.sender;\r\n            lastTimestamp = now;\r\n        }\r\n    }\r\n    \r\n    function claimWinnings() public {\r\n        require(now > lastTimestamp + 1 days);\r\n        require(msg.sender == currentWinner);\r\n        \r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RandoLotto","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://299f25eb4b3874f8078ef86413ffcfa8ef80d2732cdc12389f2606dd4a79c668"}]}