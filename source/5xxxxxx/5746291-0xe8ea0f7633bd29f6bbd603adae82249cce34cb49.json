{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract UnionPay {\r\n    event UserPay(address from,address to,uint256 amount, uint256 amountIndeed,uint256 transId);\r\n    event BareUserPay(address from,uint256 amount,bytes data);  \r\n    \r\n    address public owner;  \r\n    address public platform;\r\n    mapping(bytes32 => uint8)  userReceipts;\r\n\r\n    constructor() public {\r\n      owner = msg.sender;\r\n      platform = msg.sender;\r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n  \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n    function safePay(uint256 _transId,uint256 _feePercentage,address _to, bytes _sig) payable public returns(bool) {\r\n        require(_feePercentage>=0 && _feePercentage<=100);\r\n        require(_to != address(0));\r\n        require(userReceipts[getReceiptId(msg.sender,_to,_transId)] == 0);\r\n        require(platform!=address(0));\r\n\r\n        bytes32 message = prefixed(keccak256(msg.sender, _to, msg.value, _feePercentage,_transId));\r\n\r\n        require(recoverSigner(message, _sig) == platform);\r\n        userReceipts[getReceiptId(msg.sender,_to,_transId)] = 1;\r\n        \r\n        if (_feePercentage == 0){\r\n            if (msg.value > 0){\r\n                _to.transfer(msg.value);\r\n            }\r\n            emit UserPay(msg.sender,_to,msg.value,msg.value,_transId);\r\n            return true;\r\n        }        \r\n        uint256 val = _feePercentage * msg.value;\r\n        assert(val/_feePercentage == msg.value);\r\n        val = val/100;\r\n        if (msg.value>val){\r\n            _to.transfer(msg.value - val);\r\n        }\r\n        emit UserPay(msg.sender,_to,msg.value,msg.value - val,_transId);\r\n        return true;\r\n    }\r\n    \r\n    function getReceiptId(address _from,address _to, uint256 _transId) internal pure returns(bytes32){\r\n        return keccak256(_from, _to,_transId);\r\n    }\r\n    \r\n    function receiptUsed(address _from,address _to,uint256 _transId) public view returns(bool){\r\n        return userReceipts[getReceiptId(_from,_to,_transId)] == 1;\r\n    }\r\n    \r\n    function plainPay() public payable returns(bool){\r\n        emit BareUserPay(msg.sender,msg.value,msg.data);\r\n        return true;\r\n    }\r\n    \r\n    function () public payable{\r\n        emit BareUserPay(msg.sender,msg.value,msg.data);\r\n    }\r\n    \r\n    function setPlatform(address _checker) public onlyOwner{\r\n        require(_checker!=address(0));\r\n        platform = _checker;\r\n    }\r\n    \r\n    function withdraw() public onlyOwner{\r\n        require(platform!=address(0));\r\n        platform.transfer(address(this).balance);\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    // Signature methods\r\n\r\n    function splitSignature(bytes sig)\r\n    internal\r\n    pure\r\n    returns(uint8, bytes32, bytes32) {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r: = mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s: = mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v: = byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes sig)\r\n    internal\r\n    pure\r\n    returns(address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\r\n    function prefixed(bytes32 hash) internal pure returns(bytes32) {\r\n        return keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_transId\",\"type\":\"uint256\"}],\"name\":\"receiptUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transId\",\"type\":\"uint256\"},{\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"safePay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"plainPay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountIndeed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transId\",\"type\":\"uint256\"}],\"name\":\"UserPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"BareUserPay\",\"type\":\"event\"}]","ContractName":"UnionPay","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aba7fc230d5ed41faf10dfaf9c374d3c77c3ce45a506a62563a6d3828fbcc7b0"}]}