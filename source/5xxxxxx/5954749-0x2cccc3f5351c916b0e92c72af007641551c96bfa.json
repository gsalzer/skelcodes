{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract CrowdsaleTokenInterface {\r\n\r\n  uint public decimals;\r\n   \r\n  function addLockAddress(address addr, uint lock_time) public;\r\n  function mint(address _to, uint256 _amount) public returns (bool);\r\n  function finishMinting() public returns (bool);\r\n}\r\n\r\ncontract CrowdsaleLimit {\r\n  using SafeMath for uint256;\r\n\r\n  // the UNIX timestamp start date of the crowdsale\r\n  uint public startsAt;\r\n  // the UNIX timestamp end date of the crowdsale\r\n  uint public endsAt;\r\n  \r\n  uint public token_decimals = 8;\r\n    \r\n  uint public TOKEN_RATE_PRESALE  = 7200;\r\n  uint public TOKEN_RATE_CROWDSALE= 6000;\r\n  \r\n  // setting the wei value for one token in presale stage\r\n  uint public PRESALE_TOKEN_IN_WEI = 1 ether / TOKEN_RATE_PRESALE;  \r\n  // setting the wei value for one token in crowdsale stage\r\n  uint public CROWDSALE_TOKEN_IN_WEI = 1 ether / TOKEN_RATE_CROWDSALE;\r\n  \r\n  // setting the max fund of presale with eth\r\n  uint public PRESALE_ETH_IN_WEI_FUND_MAX = 40000 ether; \r\n  // setting the min fund of crowdsale with eth\r\n  uint public CROWDSALE_ETH_IN_WEI_FUND_MIN = 22000 ether;\r\n  // setting the max fund of crowdsale with eth\r\n  uint public CROWDSALE_ETH_IN_WEI_FUND_MAX = 90000 ether;\r\n  \r\n  // setting the min acceptable invest with eth in presale\r\n  uint public PRESALE_ETH_IN_WEI_ACCEPTED_MIN = 1 ether; \r\n  // setting the min acceptable invest with eth in pubsale\r\n  uint public CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN = 100 finney;\r\n  \r\n  // setting the gasprice to limit big buyer, default to disable\r\n  uint public CROWDSALE_GASPRICE_IN_WEI_MAX = 0;\r\n \r\n // total eth fund in presale stage\r\n  uint public presale_eth_fund= 0;\r\n  // total eth fund\r\n  uint public crowdsale_eth_fund= 0;\r\n  // total eth refund\r\n  uint public crowdsale_eth_refund = 0;\r\n   \r\n  // setting team list and set percentage of tokens\r\n  mapping(address => uint) public team_addresses_token_percentage;\r\n  mapping(uint => address) public team_addresses_idx;\r\n  uint public team_address_count= 0;\r\n  uint public team_token_percentage_total= 0;\r\n  uint public team_token_percentage_max= 40;\r\n    \r\n  event EndsAtChanged(uint newEndsAt);\r\n  event AddTeamAddress(address addr, uint release_time, uint token_percentage);\r\n  event Refund(address investor, uint weiAmount);\r\n    \r\n  // limitation of buying tokens\r\n  modifier allowCrowdsaleAmountLimit(){\t\r\n\tif (msg.value == 0) revert();\r\n\tif((crowdsale_eth_fund.add(msg.value)) > CROWDSALE_ETH_IN_WEI_FUND_MAX) revert();\r\n\tif((CROWDSALE_GASPRICE_IN_WEI_MAX > 0) && (tx.gasprice > CROWDSALE_GASPRICE_IN_WEI_MAX)) revert();\r\n\t_;\r\n  }\r\n   \r\n  function CrowdsaleLimit(uint _start, uint _end) public {\r\n\trequire(_start != 0);\r\n\trequire(_end != 0);\r\n\trequire(_start < _end);\r\n\t\t\t\r\n\tstartsAt = _start;\r\n    endsAt = _end;\r\n  }\r\n    \r\n  // caculate amount of token in presale stage\r\n  function calculateTokenPresale(uint value, uint decimals) /*internal*/ public constant returns (uint) {\r\n    uint multiplier = 10 ** decimals;\r\n    return value.mul(multiplier).div(PRESALE_TOKEN_IN_WEI);\r\n  }\r\n  \r\n  // caculate amount of token in crowdsale stage\r\n  function calculateTokenCrowsale(uint value, uint decimals) /*internal*/ public constant returns (uint) {\r\n    uint multiplier = 10 ** decimals;\r\n    return value.mul(multiplier).div(CROWDSALE_TOKEN_IN_WEI);\r\n  }\r\n  \r\n  // check if the goal is reached\r\n  function isMinimumGoalReached() public constant returns (bool) {\r\n    return crowdsale_eth_fund >= CROWDSALE_ETH_IN_WEI_FUND_MIN;\r\n  }\r\n  \r\n  // add new team percentage of tokens\r\n  function addTeamAddressInternal(address addr, uint release_time, uint token_percentage) internal {\r\n\tif((team_token_percentage_total.add(token_percentage)) > team_token_percentage_max) revert();\r\n\tif((team_token_percentage_total.add(token_percentage)) > 100) revert();\r\n\tif(team_addresses_token_percentage[addr] != 0) revert();\r\n\t\r\n\tteam_addresses_token_percentage[addr]= token_percentage;\r\n\tteam_addresses_idx[team_address_count]= addr;\r\n\tteam_address_count++;\r\n\t\r\n\tteam_token_percentage_total = team_token_percentage_total.add(token_percentage);\r\n\r\n\tAddTeamAddress(addr, release_time, token_percentage);\r\n  }\r\n   \r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endsAt;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    if (halted) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) revert();\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsale is CrowdsaleLimit, Haltable {\r\n  using SafeMath for uint256;\r\n\r\n  CrowdsaleTokenInterface public token;\r\n    \r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n    \r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  /** How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint256) public tokenAmountOf;\r\n     \r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n  \r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n  \r\n  /* How much wei we have returned back to the contract after a failed crowdfund. */\r\n  uint public loadedRefund = 0;\r\n  \r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n  \r\n  enum State{Unknown, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n    \r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount);\r\n    \r\n  event createTeamTokenEvent(address addr, uint tokens);\r\n  \r\n  event Finalized();\r\n  \r\n  /** Modified allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    if(getState() != state) revert();\r\n    _;\r\n  }\r\n\r\n  function Crowdsale(address _token, address _multisigWallet, uint _start, uint _end) CrowdsaleLimit(_start, _end) public\r\n  {\r\n    require(_token != 0x0);\r\n    require(_multisigWallet != 0x0);\r\n\t\r\n\ttoken = CrowdsaleTokenInterface(_token);\t\r\n\tif(token_decimals != token.decimals()) revert();\r\n\t\r\n\tmultisigWallet = _multisigWallet;\r\n  }\r\n  \r\n  /* Crowdfund state machine management. */\r\n  function getState() public constant returns (State) {\r\n    if(finalized) return State.Finalized;\r\n    else if (now < startsAt) return State.PreFunding;\r\n    else if (now <= endsAt && !isMinimumGoalReached()) return State.Funding;\r\n    else if (isMinimumGoalReached()) return State.Success;\r\n    else if (!isMinimumGoalReached() && crowdsale_eth_fund > 0 && loadedRefund >= crowdsale_eth_fund) return State.Refunding;\r\n    else return State.Failure;\r\n  }\r\n    \r\n  //add new team percentage of tokens and lock their release time\r\n  function addTeamAddress(address addr, uint release_time, uint token_percentage) onlyOwner inState(State.PreFunding) public {\r\n\tsuper.addTeamAddressInternal(addr, release_time, token_percentage);\r\n\ttoken.addLockAddress(addr, release_time);  //not use delegatecall\r\n  }\r\n  \r\n  //generate team tokens in accordance with percentage of total issue tokens, not preallocate\r\n  function createTeamTokenByPercentage() onlyOwner internal {\r\n\t//uint total= token.totalSupply();\r\n\tuint total= tokensSold;\r\n\t\r\n\t//uint tokens= total.mul(100).div(100-team_token_percentage_total).sub(total);\r\n\tuint tokens= total.mul(team_token_percentage_total).div(100-team_token_percentage_total);\r\n\t\r\n\tfor(uint i=0; i<team_address_count; i++) {\r\n\t\taddress addr= team_addresses_idx[i];\r\n\t\tif(addr==0x0) continue;\r\n\t\t\r\n\t\tuint ntoken= tokens.mul(team_addresses_token_percentage[addr]).div(team_token_percentage_total);\r\n\t\ttoken.mint(addr, ntoken);\t\t\r\n\t\tcreateTeamTokenEvent(addr, ntoken);\r\n\t}\r\n  }\r\n  \r\n  // fallback function can be used to buy tokens\r\n  function () stopInEmergency allowCrowdsaleAmountLimit payable public {\r\n\trequire(msg.sender != 0x0);\r\n    buyTokensCrowdsale(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokensCrowdsale(address receiver) internal /*stopInEmergency allowCrowdsaleAmountLimit payable*/ {\r\n\tuint256 weiAmount = msg.value;\r\n\tuint256 tokenAmount= 0;\r\n\t\r\n\tif(getState() == State.PreFunding) {\r\n\t\tif (weiAmount < PRESALE_ETH_IN_WEI_ACCEPTED_MIN) revert();\r\n\t\tif((PRESALE_ETH_IN_WEI_FUND_MAX > 0) && ((presale_eth_fund.add(weiAmount)) > PRESALE_ETH_IN_WEI_FUND_MAX)) revert();\t\t\r\n\t\t\r\n\t\ttokenAmount = calculateTokenPresale(weiAmount, token_decimals);\r\n\t\tpresale_eth_fund = presale_eth_fund.add(weiAmount);\r\n\t}\r\n\telse if((getState() == State.Funding) || (getState() == State.Success)) {\r\n\t\tif (weiAmount < CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN) revert();\r\n\t\t\r\n\t\ttokenAmount = calculateTokenCrowsale(weiAmount, token_decimals);\r\n\t\t\r\n    } else {\r\n      // Unwanted state\r\n      revert();\r\n    }\r\n\t\r\n\tif(tokenAmount == 0) {\r\n\t\trevert();\r\n\t}\t\r\n\t\r\n\tif(investedAmountOf[receiver] == 0) {\r\n       investorCount++;\r\n    }\r\n    \r\n\t// Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\r\n\t\r\n    // Update totals\r\n\tcrowdsale_eth_fund = crowdsale_eth_fund.add(weiAmount);\r\n\ttokensSold = tokensSold.add(tokenAmount);\r\n\t\r\n    token.mint(receiver, tokenAmount);\r\n\r\n    if(!multisigWallet.send(weiAmount)) revert();\r\n\t\r\n\t// Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount);\r\n  }\r\n \r\n  /**\r\n   * Allow load refunds back on the contract for the refunding.\r\n   *\r\n   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\r\n   */\r\n  function loadRefund() public payable inState(State.Failure) {\r\n    if(msg.value == 0) revert();\r\n    loadedRefund = loadedRefund.add(msg.value);\r\n  }\r\n  \r\n  /**\r\n   * Investors can claim refund.\r\n   *\r\n   * Note that any refunds from proxy buyers should be handled separately,\r\n   * and not through this contract.\r\n   */\r\n  function refund() public inState(State.Refunding) {\r\n    uint256 weiValue = investedAmountOf[msg.sender];\r\n    if (weiValue == 0) revert();\r\n    investedAmountOf[msg.sender] = 0;\r\n    crowdsale_eth_refund = crowdsale_eth_refund.add(weiValue);\r\n    Refund(msg.sender, weiValue);\r\n    if (!msg.sender.send(weiValue)) revert();\r\n  }\r\n  \r\n  function setEndsAt(uint time) onlyOwner public {\r\n    if(now > time) {\r\n      revert();\r\n    }\r\n\r\n    endsAt = time;\r\n    EndsAtChanged(endsAt);\r\n  }\r\n  \r\n  // should be called after crowdsale ends, to do\r\n  // some extra finalization work\r\n  function doFinalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n    \r\n\tif(finalized) {\r\n      revert();\r\n    }\r\n\r\n\tcreateTeamTokenByPercentage();\r\n    token.finishMinting();\t\r\n        \r\n    finalized = true;\r\n\tFinalized();\r\n  }\r\n  \r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_TOKEN_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doFinalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_addresses_idx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale_eth_refund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"team_addresses_token_percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team_address_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"calculateTokenCrowsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loadedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinimumGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale_eth_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"calculateTokenPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team_token_percentage_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_ETH_IN_WEI_FUND_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"release_time\",\"type\":\"uint256\"},{\"name\":\"token_percentage\",\"type\":\"uint256\"}],\"name\":\"addTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team_token_percentage_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_GASPRICE_IN_WEI_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_ETH_IN_WEI_FUND_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_ETH_IN_WEI_FUND_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_CROWDSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale_eth_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_TOKEN_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_ETH_IN_WEI_ACCEPTED_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"createTeamTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newEndsAt\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"release_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token_percentage\",\"type\":\"uint256\"}],\"name\":\"AddTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0dfb2df1b29b304c59e92e8f8bff329b9d20f62000000000000000000000000ddddc059eb9b0f2714967865cb6701ca04feb3bb000000000000000000000000000000000000000000000000000000005b7b5600000000000000000000000000000000000000000000000000000000005ba43480","Library":"","SwarmSource":"bzzr://35b61f75254f5d42af4aaa90304e1d15b3ea0a00566134f47af85c3d4eb057e9"}]}