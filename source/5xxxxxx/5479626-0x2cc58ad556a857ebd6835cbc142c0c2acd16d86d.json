{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract EthMashMount {\r\n\r\n    address public owner;\r\n    mapping (address => uint) public withdrawals;\r\n\r\n    uint round;\r\n    mapping (uint => address[]) participants;\r\n    \r\n    event Log(address indexed user, uint action, uint price);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        round = 1;\r\n        participants[1].push(owner);\r\n    }\r\n\r\n    modifier whenOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function ownerWithdraw(uint amount) external whenOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function ownerDestroy() external whenOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function publicGetRound() view public returns (uint) {\r\n        return round;\r\n    }\r\n\r\n    function publicGetParticipants(uint index) view public returns (uint) {\r\n        return participants[index].length;\r\n    }\r\n\r\n    function publicGetParticipant(uint index, uint participant) view public returns (address) {\r\n        return participants[index][participant];\r\n    }\r\n\r\n    function publicGetBalance(address player) view public returns (uint) {\r\n        return withdrawals[player];\r\n    }\r\n\r\n    function userWithdraw() public {\r\n        require(withdrawals[msg.sender] > 0);\r\n        uint amount = withdrawals[msg.sender];\r\n        withdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit Log(msg.sender, 0, amount);\r\n    }\r\n\r\n    function userRegister() public payable {\r\n        require(msg.value == 105 finney);\r\n        emit Log(msg.sender, 1, msg.value);\r\n        participants[round].push(msg.sender);\r\n\r\n        uint reward = 100 finney;\r\n        uint random = (uint(blockhash(block.number - 1)) + uint(participants[round][0]) + uint(msg.sender));\r\n\r\n        if (random % 2 == 0) {\r\n            withdrawals[participants[round][0]] += reward;\r\n            emit Log(participants[round][0], 2, reward);\r\n        } else {\r\n            round++;\r\n            participants[round].push(msg.sender);\r\n            withdrawals[msg.sender] += reward;\r\n            emit Log(msg.sender, 2, reward);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"publicGetParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDestroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicGetRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"publicGetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"participant\",\"type\":\"uint256\"}],\"name\":\"publicGetParticipant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"EthMashMount","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c88f8f6bf67dcbfc621240d8011fd47b5d5974e53821b2aaab6cb05399195f1f"}]}