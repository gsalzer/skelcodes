{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length >= size + 4);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tuint256 totalSupply_;\r\n\r\n\t/**\r\n\t* @dev total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another\r\n\t * @param _from address The address which you want to send tokens from\r\n\t * @param _to address The address which you want to transfer to\r\n\t * @param _value uint256 the amount of tokens to be transferred\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t *\r\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _value The amount of tokens to be spent.\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t * @param _owner address The address which owns the funds.\r\n\t * @param _spender address The address which will spend the funds.\r\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t */\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t *\r\n\t * approve should be called when allowed[_spender] == 0. To increment\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _addedValue The amount of tokens to increase the allowance by.\r\n\t */\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t *\r\n\t * approve should be called when allowed[_spender] == 0. To decrement\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t */\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n}\r\ncontract VVDB is StandardToken {\r\n\tstring public constant name = \"Voorgedraaide van de Blue\";\r\n\tstring public constant symbol = \"VVDB\";\r\n\tuint256 public constant decimals = 18;\r\n\tuint256 public constant initialSupply = 100000000 * (10 ** uint256(decimals));\r\n\t\r\n\tfunction VVDB(address _ownerAddress) public {\r\n\t\ttotalSupply_ = initialSupply;\r\n\t\t/*balances[_ownerAddress] = initialSupply;*/\r\n\t\tbalances[_ownerAddress] = 80000000 * (10 ** uint256(decimals));\r\n\t\tbalances[0xcD7f6b528F5302a99e5f69aeaa97516b1136F103] = 20000000 * (10 ** uint256(decimals));\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override \r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\n\r\ncontract VVDBCrowdsale is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// The token being sold\r\n\tVVDB public token;\r\n\r\n\t// Address where funds are collected\r\n\taddress public wallet;\r\n\r\n\t// How many token units a buyer gets per wei (or tokens per ETH)\r\n\tuint256 public rate = 760;\r\n\r\n\t// Amount of wei raised\r\n\tuint256 public weiRaised;\r\n\t\r\n\tuint256 public round1TokensRemaning\t= 6000000 * 1 ether;\r\n\tuint256 public round2TokensRemaning\t= 6000000 * 1 ether;\r\n\tuint256 public round3TokensRemaning\t= 6000000 * 1 ether;\r\n\tuint256 public round4TokensRemaning\t= 6000000 * 1 ether;\r\n\tuint256 public round5TokensRemaning\t= 6000000 * 1 ether;\r\n\tuint256 public round6TokensRemaning\t= 6000000 * 1 ether;\r\n\t\r\n\tmapping(address => uint256) round1Balances;\r\n\tmapping(address => uint256) round2Balances;\r\n\tmapping(address => uint256) round3Balances;\r\n\tmapping(address => uint256) round4Balances;\r\n\tmapping(address => uint256) round5Balances;\r\n\tmapping(address => uint256) round6Balances;\r\n\t\r\n\tuint256 public round1StartTime = 1522864800; //04/04/2018 @ 6:00pm (UTC)\r\n\tuint256 public round2StartTime = 1522951200; //04/05/2018 @ 6:00pm (UTC)\r\n\tuint256 public round3StartTime = 1523037600; //04/06/2018 @ 6:00pm (UTC)\r\n\tuint256 public round4StartTime = 1523124000; //04/07/2018 @ 6:00pm (UTC)\r\n\tuint256 public round5StartTime = 1523210400; //04/08/2018 @ 6:00pm (UTC)\r\n\tuint256 public round6StartTime = 1523296800; //04/09/2018 @ 6:00pm (UTC)\r\n\tuint256 public icoEndTime = 1524506400; //04/23/2018 @ 6:00pm (UTC)\r\n\t\t\r\n\t/**\r\n\t * Event for token purchase logging\r\n\t * @param purchaser who paid for the tokens\r\n\t * @param beneficiary who got the tokens\r\n\t * @param value weis paid for purchase\r\n\t * @param amount amount of tokens purchased\r\n\t */\r\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\t/**\r\n\t * Event for rate change\r\n\t * @param owner owner of contract\r\n\t * @param oldRate old rate\r\n\t * @param newRate new rate\r\n\t */\r\n\tevent RateChanged(address indexed owner, uint256 oldRate, uint256 newRate);\r\n\t\r\n\t/**\r\n\t * @param _wallet Address where collected funds will be forwarded to\r\n\t * @param _token Address of the token being sold\r\n\t */\r\n\tfunction VVDBCrowdsale(address _token, address _wallet) public {\r\n\t\trequire(_wallet != address(0));\r\n\t\trequire(_token != address(0));\r\n\r\n\t\twallet = _wallet;\r\n\t\ttoken = VVDB(_token);\r\n\t}\r\n\r\n\t// -----------------------------------------\r\n\t// Crowdsale external interface\r\n\t// -----------------------------------------\r\n\r\n\t/**\r\n\t * @dev fallback function ***DO NOT OVERRIDE***\r\n\t */\r\n\tfunction () external payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev low level token purchase ***DO NOT OVERRIDE***\r\n\t * @param _beneficiary Address performing the token purchase\r\n\t */\r\n\tfunction buyTokens(address _beneficiary) public payable {\r\n\r\n\t\tuint256 weiAmount = msg.value;\r\n\t\t_preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n\t\t// calculate token amount to be created\r\n\t\tuint256 tokens = _getTokenAmount(weiAmount);\r\n\t\t\r\n\t\trequire(canBuyTokens(tokens));\r\n\r\n\t\t// update state\r\n\t\tweiRaised = weiRaised.add(weiAmount);\r\n\r\n\t\t_processPurchase(_beneficiary, tokens);\r\n\r\n\t\tupdateRoundBalance(tokens);\r\n\r\n\t\temit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n\t\t_updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n\t\t_forwardFunds();\r\n\t\t_postValidatePurchase(_beneficiary, weiAmount);\r\n\t}\r\n\r\n\t// -----------------------------------------\r\n\t// Internal interface (extensible)\r\n\t// -----------------------------------------\r\n\t\r\n\tfunction canBuyTokens(uint256 _tokens) internal constant returns (bool) \r\n\t{\r\n\t\tuint256 currentTime = now;\r\n\t\tuint256 purchaserTokenSum = 0;\r\n\t\tif (currentTime<round1StartTime || currentTime>icoEndTime) return false;\r\n\r\n\t\tif (currentTime >= round1StartTime && currentTime < round2StartTime)\r\n\t\t{\r\n\t\t\tpurchaserTokenSum = _tokens + round1Balances[msg.sender];\r\n\t\t\treturn purchaserTokenSum <= (10000 * (10 ** uint256(18))) && _tokens <= round1TokensRemaning;\r\n\r\n\t\t} else if (currentTime >= round2StartTime && currentTime < round3StartTime)\r\n\t\t{\r\n\t\t\tpurchaserTokenSum = _tokens + round2Balances[msg.sender];\r\n\t\t\treturn purchaserTokenSum <= (2000 * (10 ** uint256(18))) && _tokens <= round2TokensRemaning;\r\n\r\n\t\t} else if (currentTime >= round3StartTime && currentTime < round4StartTime)\r\n\t\t{\r\n\t\t\tpurchaserTokenSum = _tokens + round3Balances[msg.sender];\r\n\t\t\treturn purchaserTokenSum <= (2000 * (10 ** uint256(18))) && _tokens <= round3TokensRemaning;\r\n\r\n\t\t} else if (currentTime >= round4StartTime && currentTime < round5StartTime)\r\n\t\t{\r\n\t\t\tpurchaserTokenSum = _tokens + round4Balances[msg.sender];\r\n\t\t\treturn purchaserTokenSum <= (2000 * (10 ** uint256(18))) && _tokens <= round4TokensRemaning;\r\n\r\n\t\t} else if (currentTime >= round5StartTime && currentTime < round6StartTime)\r\n\t\t{\r\n\t\t\tpurchaserTokenSum = _tokens + round5Balances[msg.sender];\r\n\t\t\treturn purchaserTokenSum <= (2000 * (10 ** uint256(18))) && _tokens <= round5TokensRemaning;\r\n\r\n\t\t} else if (currentTime >= round6StartTime && currentTime < icoEndTime)\r\n\t\t{\r\n\t\t\tpurchaserTokenSum = _tokens + round6Balances[msg.sender];\r\n\t\t\treturn purchaserTokenSum <= (2000 * (10 ** uint256(18))) && _tokens <= round6TokensRemaning;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateRoundBalance(uint256 _tokens) internal \r\n\t{\r\n\t\tuint256 currentTime = now;\r\n\r\n\t\tif (currentTime >= round1StartTime && currentTime < round2StartTime)\r\n\t\t{\r\n\t\t\tround1Balances[msg.sender] = round1Balances[msg.sender].add(_tokens);\r\n\t\t\tround1TokensRemaning = round1TokensRemaning.sub(_tokens);\r\n\r\n\t\t} else if (currentTime >= round2StartTime && currentTime < round3StartTime)\r\n\t\t{\r\n\t\t\tround2Balances[msg.sender] = round2Balances[msg.sender].add(_tokens);\r\n\t\t\tround2TokensRemaning = round2TokensRemaning.sub(_tokens);\r\n\r\n\t\t} else if (currentTime >= round3StartTime && currentTime < round4StartTime)\r\n\t\t{\r\n\t\t\tround3Balances[msg.sender] = round3Balances[msg.sender].add(_tokens);\r\n\t\t\tround3TokensRemaning = round3TokensRemaning.sub(_tokens);\r\n\r\n\t\t} else if (currentTime >= round4StartTime && currentTime < round5StartTime)\r\n\t\t{\r\n\t\t\tround4Balances[msg.sender] = round4Balances[msg.sender].add(_tokens);\r\n\t\t\tround4TokensRemaning = round4TokensRemaning.sub(_tokens);\r\n\r\n\t\t} else if (currentTime >= round5StartTime && currentTime < round6StartTime)\r\n\t\t{\r\n\t\t\tround5Balances[msg.sender] = round5Balances[msg.sender].add(_tokens);\r\n\t\t\tround5TokensRemaning = round5TokensRemaning.sub(_tokens);\r\n\r\n\t\t} else if (currentTime >= round6StartTime && currentTime < icoEndTime)\r\n\t\t{\r\n\t\t\tround6Balances[msg.sender] = round6Balances[msg.sender].add(_tokens);\r\n\t\t\tround6TokensRemaning = round6TokensRemaning.sub(_tokens);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\r\n\t * @param _beneficiary Address performing the token purchase\r\n\t * @param _weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\r\n\t\trequire(_beneficiary != address(0));\r\n\t\trequire(_weiAmount != 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n\t * @param _beneficiary Address performing the token purchase\r\n\t * @param _weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\r\n\t\trequire(_beneficiary != address(0));\r\n\t\trequire(_weiAmount != 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n\t * @param _beneficiary Address performing the token purchase\r\n\t * @param _tokenAmount Number of tokens to be emitted\r\n\t */\r\n\tfunction _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n\t\ttoken.transfer(_beneficiary, _tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n\t * @param _beneficiary Address receiving the tokens\r\n\t * @param _tokenAmount Number of tokens to be purchased\r\n\t */\r\n\tfunction _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n\t\t_deliverTokens(_beneficiary, _tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n\t * @param _beneficiary Address receiving the tokens\r\n\t * @param _weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal pure {\r\n\t\trequire(_beneficiary != address(0));\r\n\t\trequire(_weiAmount != 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Override to extend the way in which ether is converted to tokens.\r\n\t * @param _weiAmount Value in wei to be converted into tokens\r\n\t * @return Number of tokens that can be purchased with the specified _weiAmount\r\n\t */\r\n\tfunction _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n\t\treturn _weiAmount.mul(rate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Determines how ETH is stored/forwarded on purchases.\r\n\t */\r\n\tfunction _forwardFunds() internal {\r\n\t\twallet.transfer(msg.value);\r\n\t}\r\n\t\r\n\tfunction tokenBalance() constant public returns (uint256) {\r\n\t\treturn token.balanceOf(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Change exchange rate of ether to tokens\r\n\t * @param _rate Number of tokens per eth\r\n\t */\r\n\tfunction changeRate(uint256 _rate) onlyOwner public returns (bool) {\r\n\t\temit RateChanged(msg.sender, rate, _rate);\r\n\t\trate = _rate;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Method to check current rate\r\n\t * @return Returns the current exchange rate\r\n\t */\r\n\tfunction getRate() public view returns (uint256) {\r\n\t\treturn rate;\r\n\t}\r\n\r\n\tfunction transferBack(uint256 tokens) onlyOwner public returns (bool) {\r\n\t\ttoken.transfer(owner, tokens);\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round6TokensRemaning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round3TokensRemaning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round6StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round3StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round5TokensRemaning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2TokensRemaning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round4TokensRemaning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1TokensRemaning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round5StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round4StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VVDBCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002437b52c0592c1947e4eb454bfcffdc5d432166a0000000000000000000000008045fb2ad3d96965fdc69efa2ecf1c76babb36ca","Library":"","SwarmSource":"bzzr://ea7e24323fab9a8ec24cfe5066e4e582cb3ed290e569c6e4466d68e0333dd222"}]}