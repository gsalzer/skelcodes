{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract CasperToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Csper Token\";\r\n    string public constant symbol = \"CST\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint constant public cstToMicro = uint(10) ** decimals;\r\n\r\n    // This constants reflects CST token distribution\r\n    uint constant public _totalSupply    = 440000000 * cstToMicro;\r\n    uint constant public preICOSupply    = 13000000 * cstToMicro;\r\n    uint constant public presaleSupply   = 183574716 * cstToMicro;\r\n    uint constant public crowdsaleSupply = 19750000 * cstToMicro;\r\n    uint constant public communitySupply = 66000000 * cstToMicro;\r\n    uint constant public systemSupply    = 35210341 * cstToMicro;\r\n    uint constant public investorSupply  = 36714943 * cstToMicro;\r\n    uint constant public teamSupply      = 66000000 * cstToMicro;\r\n    uint constant public adviserSupply   = 7000000 * cstToMicro;\r\n    uint constant public bountySupply    = 8800000 * cstToMicro;\r\n    uint constant public referralSupply  = 3950000 * cstToMicro;\r\n\r\n    // This variables accumulate amount of sold CST during\r\n    // presale, crowdsale, or given to investors as bonus.\r\n    uint public presaleSold = 0;\r\n    uint public crowdsaleSold = 0;\r\n    uint public investorGiven = 0;\r\n\r\n    // Amount of ETH received during ICO\r\n    uint public ethSold = 0;\r\n\r\n    uint constant public softcapUSD = 4500000;\r\n    uint constant public preicoUSD  = 1040000;\r\n\r\n    // Presale lower bound in dollars.\r\n    uint constant public crowdsaleMinUSD = cstToMicro * 10 * 100 / 12;\r\n    uint constant public bonusLevel0 = cstToMicro * 10000 * 100 / 12; // 10000$\r\n    uint constant public bonusLevel100 = cstToMicro * 100000 * 100 / 12; // 100000$\r\n\r\n    // Tokens are unlocked in 5 stages, by 20% (see doc to checkTransfer)\r\n    // All dates are stored as timestamps.\r\n    uint constant public unlockDate1 = 1538179199; // 28.09.2018 23:59:59\r\n    uint constant public unlockDate2 = 1543622399; // 30.11.2018 23:59:59\r\n    uint constant public unlockDate3 = 1548979199; // 31.01.2019 23:59:59\r\n    uint constant public unlockDate4 = 1553903999; // 29.03.2019 23:59:59\r\n    uint constant public unlockDate5 = 1559347199; // 31.05.2019 23:59:59\r\n\r\n    uint constant public teamUnlock1 = 1549065600; // 2.02.2019 \r\n    uint constant public teamUnlock2 = 1564704000; // 2.08.2019\r\n    uint constant public teamUnlock3 = 1580601600; // 2.02.2020\r\n    uint constant public teamUnlock4 = 1596326400; // 2.08.2020\r\n\r\n    uint constant public teamETHUnlock1 = 1535846400; // 2.09.2018\r\n    uint constant public teamETHUnlock2 = 1538438400; // 2.10.2018\r\n    uint constant public teamETHUnlock3 = 1541116800; // 2.11.2018\r\n\r\n    //https://casperproject.atlassian.net/wiki/spaces/PROD/pages/277839878/Smart+contract+ICO\r\n    // Presale 10.06.2018 - 22.07.2018\r\n    // Crowd-sale 23.07.2018 - 2.08.2018 (16.08.2018)\r\n    uint constant public presaleStartTime     = 1528588800;\r\n    uint constant public crowdsaleStartTime   = 1532304000;\r\n    uint          public crowdsaleEndTime     = 1533168000;\r\n    uint constant public crowdsaleHardEndTime = 1534377600;\r\n    //address constant CsperWallet = 0x6A5e633065475393211aB623286200910F465d02;\r\n    constructor() public {\r\n        admin = owner;\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerAndDirector {\r\n        require(msg.sender == owner || msg.sender == director);\r\n        _;\r\n    }\r\n\r\n    address admin;\r\n    function setAdmin(address _newAdmin) public onlyOwnerAndDirector {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    address director;\r\n    function setDirector(address _newDirector) public onlyOwner {\r\n        director = _newDirector;\r\n    }\r\n\r\n    bool assignedPreico = false;\r\n    /// @notice assignPreicoTokens transfers 10x tokens to pre-ICO participants\r\n    function assignPreicoTokens() public onlyOwnerAndDirector {\r\n        require(!assignedPreico);\r\n        assignedPreico = true;\r\n\r\n        _freezeTransfer(0xb424958766e736827Be5A441bA2A54bEeF54fC7C, 10 * 19514560000000000000000);\r\n        _freezeTransfer(0xF5dF9C2aAe5118b64Cda30eBb8d85EbE65A03990, 10 * 36084880000000000000000);\r\n        _freezeTransfer(0x5D8aCe48970dce4bcD7f985eDb24f5459Ef184Ec, 10 * 2492880000000000000000);\r\n        _freezeTransfer(0xcD6d5b09a34562a1ED7857B19b32bED77417655b, 10 * 1660880000000000000000);\r\n        _freezeTransfer(0x50f73AC8435E4e500e37FAb8802bcB840bf4b8B8, 10 * 94896880000000000000000);\r\n        _freezeTransfer(0x65Aa068590216cb088f4da28190d8815C31aB330, 10 * 16075280000000000000000);\r\n        _freezeTransfer(0x2046838D148196a5117C4026E21C165785bD3982, 10 * 5893680000000000000000);\r\n        _freezeTransfer(0x458e1f1050C34f5D125437fcEA0Df0aA9212EDa2, 10 * 32772040882120167215360);\r\n        _freezeTransfer(0x12B687E19Cef53b2A709e9b98C4d1973850cA53F, 10 * 70956080000000000000000);\r\n        _freezeTransfer(0x1Cf5daAB09155aaC1716Aa92937eC1c6D45720c7, 10 * 3948880000000000000000);\r\n        _freezeTransfer(0x32fAAdFdC7938E7FbC7386CcF546c5fc382ed094, 10 * 88188880000000000000000);\r\n        _freezeTransfer(0xC4eA6C0e9d95d957e75D1EB1Fbe15694CD98336c, 10 * 81948880000000000000000);\r\n        _freezeTransfer(0xB97D3d579d35a479c20D28988A459E3F35692B05, 10 * 121680000000000000000);\r\n        _freezeTransfer(0x65AD745047633C3402d4BC5382f72EA3A9eCFe47, 10 * 5196880000000000000000);\r\n        _freezeTransfer(0xd0BEF2Fb95193f429f0075e442938F5d829a33c8, 10 * 223388880000000000000000);\r\n        _freezeTransfer(0x9Fc87C3d44A6374D48b2786C46204F673b0Ae236, 10 * 28284880000000000000000);\r\n        _freezeTransfer(0x42C73b8945a82041B06428359a94403a2e882406, 10 * 13080080000000000000000);\r\n        _freezeTransfer(0xa4c9595b90BBa7B4d805e555E477200C61711F3a, 10 * 6590480000000000000000);\r\n        _freezeTransfer(0xb93b8ceD7CD86a667E12104831b4d514365F9DF8, 10 * 116358235759665569280);\r\n        _freezeTransfer(0xa94F999b3f76EB7b2Ba7B17fC37E912Fa2538a87, 10 * 10389600000000000000000);\r\n        _freezeTransfer(0xD65B9b98ca08024C3c19868d42C88A3E47D67120, 10 * 25892880000000000000000);\r\n        _freezeTransfer(0x3a978a9Cc36f1FE5Aab6D31E41c08d8380ad0ACB, 10 * 548080000000000000000);\r\n        _freezeTransfer(0xBD46d909D55d760E2f79C5838c5C42E45c0a853A, 10 * 7526480000000000000000);\r\n        _freezeTransfer(0xdD9d289d4699fDa518cf91EaFA029710e3Cbb7AA, 10 * 3324880000000000000000);\r\n        _freezeTransfer(0x8671B362902C3839ae9b4bc099fd24CdeFA026F4, 10 * 21836880000000000000000);\r\n        _freezeTransfer(0xf3C25Ee648031B28ADEBDD30c91056c2c5cd9C6b, 10 * 132284880000000000000000);\r\n        _freezeTransfer(0x1A2392fB72255eAe19BB626678125A506a93E363, 10 * 61772880000000000000000);\r\n        _freezeTransfer(0xCE2cEa425f7635557CFC00E18bc338DdE5B16C9A, 10 * 105360320000000000000000);\r\n        _freezeTransfer(0x952AD1a2891506AC442D95DA4C0F1AE70A27b677, 10 * 100252880000000000000000);\r\n        _freezeTransfer(0x5eE1fC4D251143Da96db2a5cD61507f2203bf7b7, 10 * 80492880000000000000000);\r\n    }\r\n\r\n    bool assignedTeam = false;\r\n    /// @notice assignTeamTokens assigns tokens to team members\r\n    /// @notice tokens for team have their own supply\r\n    function assignTeamTokens() public onlyOwnerAndDirector {\r\n        require(!assignedTeam);\r\n        assignedTeam = true;\r\n\r\n        _teamTransfer(0x1E21f744d91994D19f2a61041CD7cCA571185dfc, 13674375 * cstToMicro); // ArK\r\n        _teamTransfer(0x4CE4Ea57c40bBa26B7b799d5e0b4cd063B034c8A,  9920625 * cstToMicro); // Vi4\r\n        _teamTransfer(0xdCd8a8e561d23Ca710f23E7612F1D4E0dE9bde83,  1340625 * cstToMicro); // Se4\r\n        _teamTransfer(0x0dFFA8624A1f512b8dcDE807F8B0Eab68672e5D5, 13406250 * cstToMicro); // AnD\r\n        _teamTransfer(0xE091180bB0C284AA0Bd15C6888A41aba45c54AF0, 13138125 * cstToMicro); // VlM\r\n        _teamTransfer(0xcdB7A51bA9af93a7BFfe08a31E4C6c5f9068A051,  3960000 * cstToMicro); // NuT\r\n        _teamTransfer(0x57Bd10E12f789B74071d62550DaeB3765Ad83834,  3960000 * cstToMicro); // AlK\r\n        _teamTransfer(0xEE74922eaF503463a8b20aFaD83d42F28D59f45d,  3960000 * cstToMicro); // StK\r\n        _teamTransfer(0x58681a49A6f9D61eB368241a336628781afD5f87,  1320000 * cstToMicro); // DeP\r\n\r\n        _teamTransfer(0x3C4662b4677dC81f16Bf3c823A7E6CE1fF7e94d7,  80000 * cstToMicro); // YuM\r\n        _teamTransfer(0x041A1e96E0C9d3957613071c104E44a9c9d43996, 150000 * cstToMicro); // IgK\r\n        _teamTransfer(0xD63d63D2ADAF87B0Edc38218b0a2D27FD909d8B1, 100000 * cstToMicro); // SeT\r\n        _teamTransfer(0xd0d49Da78BbCBb416152dC41cc7acAb559Fb8275,  80000 * cstToMicro); // ArM\r\n        _teamTransfer(0x75FdfAc64c27f5B5f0823863Fe0f2ddc660A376F, 100000 * cstToMicro); // Lera\r\n        _teamTransfer(0xb66AFf323d97EF52192F170fF0F16D0a05Ebe56C,  60000 * cstToMicro); // SaBuh\r\n        _teamTransfer(0xec6234E34477f7A19cD3D67401003675522a4Fad,  60000 * cstToMicro); // SaV\r\n        _teamTransfer(0x1be50e8337F99983ECd4A4b15a74a5a795B73dF9,  40000 * cstToMicro); // Olga\r\n        _teamTransfer(0x4c14DB011065e72C6E839bd826d101Ec09d3C530, 833000 * cstToMicro); // VaB\r\n        _teamTransfer(0x7891C07b20fFf1918fAD43CF6fc7E3f83900f06d,  50000 * cstToMicro); // Artur\r\n        _teamTransfer(0x27996b3c1EcF2e7cbc5f31dE7Bca17EFCb398617, 150000 * cstToMicro); // EvS\r\n    }\r\n\r\n    /// @nptice kycPassed is executed by backend and tells SC\r\n    /// that particular client has passed KYC\r\n    mapping(address => bool) public kyc;\r\n    mapping(address => address) public referral;\r\n    function kycPassed(address _mem, address _ref) public onlyAdmin {\r\n        kyc[_mem] = true;\r\n        if (_ref == richardAddr || _ref == wuguAddr) {\r\n            referral[_mem] = _ref;\r\n        }\r\n    }\r\n\r\n    // mappings for implementing ERC20\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // mapping for implementing unlock mechanic\r\n    mapping(address => uint) freezed;\r\n    mapping(address => uint) teamFreezed;\r\n\r\n    // ERC20 standard functions\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _tokens) private {\r\n        balances[_from] = balances[_from].sub(_tokens);\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n    \r\n    function transfer(address _to, uint _tokens) public returns (bool success) {\r\n        checkTransfer(msg.sender, _tokens);\r\n        _transfer(msg.sender, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        checkTransfer(from, tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        _transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    /// @notice checkTransfer ensures that `from` can send only unlocked tokens\r\n    /// @notice this function is called for every transfer\r\n    /// We unlock PURCHASED and BONUS tokens in 5 stages:\r\n    /// after 28.09.2018 20% are unlocked\r\n    /// after 30.11.2018 40% are unlocked\r\n    /// after 31.01.2019 60% are unlocked\r\n    /// after 29.03.2019 80% are unlocked\r\n    /// after 31.05.2019 100% are unlocked\r\n    function checkTransfer(address from, uint tokens) public view {\r\n        uint newBalance = balances[from].sub(tokens);\r\n        uint total = 0;\r\n        if (now < unlockDate5) {\r\n            require(now >= unlockDate1);\r\n            uint frzdPercent = 0;\r\n            if (now < unlockDate2) {\r\n                frzdPercent = 80;\r\n            } else if (now < unlockDate3) {\r\n                frzdPercent = 60;\r\n            } else if (now < unlockDate4) {\r\n                frzdPercent = 40;\r\n            } else {\r\n                frzdPercent = 20;\r\n            }\r\n            total = freezed[from].mul(frzdPercent).div(100);\r\n            require(newBalance >= total);\r\n        }\r\n        \r\n        if (now < teamUnlock4 && teamFreezed[from] > 0) {\r\n            uint p = 0;\r\n            if (now < teamUnlock1) {\r\n                p = 100;\r\n            } else if (now < teamUnlock2) {\r\n                p = 75;\r\n            } else if (now < teamUnlock3) {\r\n                p = 50;\r\n            } else if (now < teamUnlock4) {\r\n                p = 25;\r\n            }\r\n            total = total.add(teamFreezed[from].mul(p).div(100));\r\n            require(newBalance >= total);\r\n        }\r\n    }\r\n\r\n    /// @return ($ received, ETH received, CST sold)\r\n    function ICOStatus() public view returns (uint usd, uint eth, uint cst) {\r\n        usd = presaleSold.mul(12).div(10**20) + crowdsaleSold.mul(16).div(10**20);\r\n        usd = usd.add(preicoUSD); // pre-ico tokens\r\n\r\n        return (usd, ethSold + preicoUSD.mul(10**8).div(ethRate), presaleSold + crowdsaleSold);\r\n    }\r\n\r\n    function checkICOStatus() public view returns(bool) {\r\n        uint eth;\r\n        uint cst;\r\n\r\n        (, eth, cst) = ICOStatus();\r\n\r\n        uint dollarsRecvd = eth.mul(ethRate).div(10**8);\r\n\r\n        // 26 228 800$\r\n        return dollarsRecvd >= 25228966 || (cst == presaleSupply + crowdsaleSupply) || now > crowdsaleEndTime;\r\n    }\r\n\r\n    bool icoClosed = false;\r\n    function closeICO() public onlyOwner {\r\n        require(!icoClosed);\r\n        icoClosed = checkICOStatus();\r\n    }\r\n\r\n    /// @notice by agreement, we can transfer $4.8M from bank\r\n    /// after softcap is reached.\r\n    /// @param _to wallet to send CST to\r\n    /// @param  _usd amount of dollars which is withdrawn\r\n    uint bonusTransferred = 0;\r\n    uint constant maxUSD = 4800000;\r\n    function transferBonus(address _to, uint _usd) public onlyOwner {\r\n        bonusTransferred = bonusTransferred.add(_usd);\r\n        require(bonusTransferred <= maxUSD);\r\n\r\n        uint cst = _usd.mul(100).mul(cstToMicro).div(12); // presale tariff\r\n        presaleSold = presaleSold.add(cst);\r\n        require(presaleSold <= presaleSupply);\r\n        ethSold = ethSold.add(_usd.mul(10**8).div(ethRate));\r\n\r\n        _freezeTransfer(_to, cst);\r\n    }\r\n\r\n    /// @notice extend crowdsale for 2 weeks\r\n    function prolongCrowdsale() public onlyOwnerAndDirector {\r\n        require(now < crowdsaleEndTime);\r\n        crowdsaleEndTime = crowdsaleHardEndTime;\r\n    }\r\n\r\n    // 100 000 000 Ether in dollars\r\n    uint public ethRate = 0;\r\n    uint public ethRateMax = 0;\r\n    uint public ethLastUpdate = 0;\r\n    function setETHRate(uint _rate) public onlyAdmin {\r\n        require(ethRateMax == 0 || _rate < ethRateMax);\r\n        ethRate = _rate;\r\n        ethLastUpdate = now;\r\n    }\r\n\r\n    // 100 000 000 BTC in dollars\r\n    uint public btcRate = 0;\r\n    uint public btcRateMax = 0;\r\n    uint public btcLastUpdate;\r\n    function setBTCRate(uint _rate) public onlyAdmin {\r\n        require(btcRateMax == 0 || _rate < btcRateMax);\r\n        btcRate = _rate;\r\n        btcLastUpdate = now;\r\n    }\r\n\r\n    /// @notice setMaxRate sets max rate for both BTC/ETH to soften\r\n    /// negative consequences in case our backend gots hacked.\r\n    function setMaxRate(uint ethMax, uint btcMax) public onlyOwnerAndDirector {\r\n        ethRateMax = ethMax;\r\n        btcRateMax = btcMax;\r\n    }\r\n\r\n    /// @notice _sellPresale checks CST purchases during crowdsale\r\n    function _sellPresale(uint cst) private {\r\n        require(cst >= bonusLevel0.mul(9950).div(10000));\r\n        presaleSold = presaleSold.add(cst);\r\n        require(presaleSold <= presaleSupply);\r\n    }\r\n\r\n    /// @notice _sellCrowd checks CST purchases during crowdsale\r\n    function _sellCrowd(uint cst, address _to) private {\r\n        require(cst >= crowdsaleMinUSD);\r\n\r\n        if (crowdsaleSold.add(cst) <= crowdsaleSupply) {\r\n            crowdsaleSold = crowdsaleSold.add(cst);\r\n        } else {\r\n            presaleSold = presaleSold.add(crowdsaleSold).add(cst).sub(crowdsaleSupply);\r\n            require(presaleSold <= presaleSupply);\r\n            crowdsaleSold = crowdsaleSupply;\r\n        }\r\n\r\n        if (now < crowdsaleStartTime + 3 days) {\r\n            if (whitemap[_to] >= cst) {\r\n                whitemap[_to] -= cst;\r\n                whitelistTokens -= cst;\r\n            } else {\r\n                require(crowdsaleSupply.add(presaleSupply).sub(presaleSold) >= crowdsaleSold.add(whitelistTokens));\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice addInvestorBonusInPercent is used for sending bonuses for big investors in %\r\n    function addInvestorBonusInPercent(address _to, uint8 p) public onlyOwner {\r\n        require(p > 0 && p <= 5);\r\n        uint bonus = balances[_to].mul(p).div(100);\r\n\r\n        investorGiven = investorGiven.add(bonus);\r\n        require(investorGiven <= investorSupply);\r\n\r\n        _freezeTransfer(_to, bonus);\r\n    }\r\n \r\n    /// @notice addInvestorBonusInTokens is used for sending bonuses for big investors in tokens\r\n    function addInvestorBonusInTokens(address _to, uint tokens) public onlyOwner {\r\n        _freezeTransfer(_to, tokens);\r\n        \r\n        investorGiven = investorGiven.add(tokens);\r\n        require(investorGiven <= investorSupply);\r\n    }\r\n\r\n    function () payable public {\r\n        purchaseWithETH(msg.sender);\r\n    }\r\n\r\n    /// @notice _freezeTranfer perform actual tokens transfer which\r\n    /// will be freezed (see also checkTransfer() )\r\n    function _freezeTransfer(address _to, uint cst) private {\r\n        _transfer(owner, _to, cst);\r\n        freezed[_to] = freezed[_to].add(cst);\r\n    }\r\n\r\n    /// @notice _freezeTranfer perform actual tokens transfer which\r\n    /// will be freezed (see also checkTransfer() )\r\n    function _teamTransfer(address _to, uint cst) private {\r\n        _transfer(owner, _to, cst);\r\n        teamFreezed[_to] = teamFreezed[_to].add(cst);\r\n    }\r\n\r\n    address public constant wuguAddr = 0x096ad02a48338CB9eA967a96062842891D195Af5;\r\n    address public constant richardAddr = 0x411fB4D77EDc659e9838C21be72f55CC304C0cB8;\r\n    mapping(address => address[]) promoterClients;\r\n    mapping(address => mapping(address => uint)) promoterBonus;\r\n\r\n    /// @notice withdrawPromoter transfers back to promoter \r\n    /// all bonuses accumulated to current moment\r\n    function withdrawPromoter() public {\r\n        address _to = msg.sender;\r\n        require(_to == wuguAddr || _to == richardAddr);\r\n\r\n        uint usd;\r\n        (usd,,) = ICOStatus();\r\n\r\n        // USD received - 5% must be more than softcap\r\n        require(usd.mul(95).div(100) >= softcapUSD);\r\n\r\n        uint bonus = 0;\r\n        address[] memory clients = promoterClients[_to];\r\n        for(uint i = 0; i < clients.length; i++) {\r\n            if (kyc[clients[i]]) {\r\n                uint num = promoterBonus[_to][clients[i]];\r\n                delete promoterBonus[_to][clients[i]];\r\n                bonus += num;\r\n            }\r\n        }\r\n        \r\n        _to.transfer(bonus);\r\n    }\r\n\r\n    /// @notice cashBack will be used in case of failed ICO\r\n    /// All partitipants can receive their ETH back\r\n    function cashBack(address _to) public {\r\n        uint usd;\r\n        (usd,,) = ICOStatus();\r\n\r\n        // ICO fails if crowd-sale is ended and we have not yet reached soft-cap\r\n        require(now > crowdsaleEndTime && usd < softcapUSD);\r\n        require(ethSent[_to] > 0);\r\n\r\n        delete ethSent[_to];\r\n\r\n        _to.transfer(ethSent[_to]);\r\n    }\r\n\r\n    /// @notice stores amount of ETH received by SC\r\n    mapping(address => uint) ethSent;\r\n\r\n    function purchaseWithETH(address _to) payable public {\r\n        purchaseWithPromoter(_to, referral[msg.sender]);\r\n    }\r\n\r\n    /// @notice purchases tokens, which a send to `_to` with 5% returned to `_ref`\r\n    /// @notice 5% return must work only on crowdsale\r\n    function purchaseWithPromoter(address _to, address _ref) payable public {\r\n        require(now >= presaleStartTime && now <= crowdsaleEndTime);\r\n\r\n        require(!icoClosed);\r\n    \r\n        uint _wei = msg.value;\r\n        uint cst;\r\n\r\n        ethSent[msg.sender] = ethSent[msg.sender].add(_wei);\r\n        ethSold = ethSold.add(_wei);\r\n\r\n        // accept payment on presale only if it is more than 9997$\r\n        // actual check is performed in _sellPresale\r\n        if (now < crowdsaleStartTime || approvedInvestors[msg.sender]) {\r\n            require(kyc[msg.sender]);\r\n            cst = _wei.mul(ethRate).div(12000000); // 1 CST = 0.12 $ on presale\r\n\r\n            require(now < crowdsaleStartTime || cst >= bonusLevel100);\r\n\r\n            _sellPresale(cst);\r\n\r\n            /// we have only 2 recognized promoters\r\n            if (_ref == wuguAddr || _ref == richardAddr) {\r\n                promoterClients[_ref].push(_to);\r\n                promoterBonus[_ref][_to] = _wei.mul(5).div(100);\r\n            }\r\n        } else {\r\n            cst = _wei.mul(ethRate).div(16000000); // 1 CST = 0.16 $ on crowd-sale\r\n            _sellCrowd(cst, _to);\r\n        }\r\n\r\n        _freezeTransfer(_to, cst);\r\n    }\r\n\r\n    /// @notice purchaseWithBTC is called from backend, where we convert\r\n    /// BTC to ETH, and then assign tokens to purchaser, using BTC / $ exchange rate.\r\n    function purchaseWithBTC(address _to, uint _satoshi, uint _wei) public onlyAdmin {\r\n        require(now >= presaleStartTime && now <= crowdsaleEndTime);\r\n\r\n        require(!icoClosed);\r\n\r\n        ethSold = ethSold.add(_wei);\r\n\r\n        uint cst;\r\n        // accept payment on presale only if it is more than 9997$\r\n        // actual check is performed in _sellPresale\r\n        if (now < crowdsaleStartTime || approvedInvestors[msg.sender]) {\r\n            require(kyc[msg.sender]);\r\n            cst = _satoshi.mul(btcRate.mul(10000)).div(12); // 1 CST = 0.12 $ on presale\r\n\r\n            require(now < crowdsaleStartTime || cst >= bonusLevel100);\r\n\r\n            _sellPresale(cst);\r\n        } else {\r\n            cst = _satoshi.mul(btcRate.mul(10000)).div(16); // 1 CST = 0.16 $ on presale\r\n            _sellCrowd(cst, _to);\r\n        }\r\n\r\n        _freezeTransfer(_to, cst);\r\n    }\r\n\r\n    /// @notice withdrawFunds is called to send team bonuses after\r\n    /// then end of the ICO\r\n    bool withdrawCalled = false;\r\n    function withdrawFunds() public onlyOwner {\r\n        require(icoClosed && now >= teamETHUnlock1);\r\n\r\n        require(!withdrawCalled);\r\n        withdrawCalled = true;\r\n\r\n        uint eth;\r\n        (,eth,) = ICOStatus();\r\n\r\n        // pre-ico tokens are not in ethSold\r\n        uint minus = bonusTransferred.mul(10**8).div(ethRate);\r\n        uint team = ethSold.sub(minus);\r\n\r\n        team = team.mul(15).div(100);\r\n\r\n        uint ownerETH = 0;\r\n        uint teamETH = 0;\r\n        if (address(this).balance >= team) {\r\n            teamETH = team;\r\n            ownerETH = address(this).balance.sub(teamETH);\r\n        } else {\r\n            teamETH = address(this).balance;\r\n        }\r\n\r\n        teamETH1 = teamETH.div(3);\r\n        teamETH2 = teamETH.div(3);\r\n        teamETH3 = teamETH.sub(teamETH1).sub(teamETH2);\r\n\r\n        // TODO multisig\r\n        address(0x741A26104530998F625D15cbb9D58b01811d2CA7).transfer(ownerETH);\r\n    }\r\n\r\n    uint teamETH1 = 0;\r\n    uint teamETH2 = 0;\r\n    uint teamETH3 = 0;\r\n    function withdrawTeam() public {\r\n        require(now >= teamETHUnlock1);\r\n\r\n        uint amount = 0;\r\n        if (now < teamETHUnlock2) {\r\n            amount = teamETH1;\r\n            teamETH1 = 0;\r\n        } else if (now < teamETHUnlock3) {\r\n            amount = teamETH1 + teamETH2;\r\n            teamETH1 = 0;\r\n            teamETH2 = 0;\r\n        } else {\r\n            amount = teamETH1 + teamETH2 + teamETH3;\r\n            teamETH1 = 0;\r\n            teamETH2 = 0;\r\n            teamETH3 = 0;\r\n        }\r\n\r\n        address(0xcdB7A51bA9af93a7BFfe08a31E4C6c5f9068A051).transfer(amount.mul(6).div(100)); // NuT\r\n        address(0x57Bd10E12f789B74071d62550DaeB3765Ad83834).transfer(amount.mul(6).div(100)); // AlK\r\n        address(0xEE74922eaF503463a8b20aFaD83d42F28D59f45d).transfer(amount.mul(6).div(100)); // StK\r\n        address(0x58681a49A6f9D61eB368241a336628781afD5f87).transfer(amount.mul(2).div(100)); // DeP\r\n        address(0x4c14DB011065e72C6E839bd826d101Ec09d3C530).transfer(amount.mul(2).div(100)); // VaB\r\n\r\n        amount = amount.mul(78).div(100);\r\n\r\n        address(0x1E21f744d91994D19f2a61041CD7cCA571185dfc).transfer(amount.mul(uint(255).mul(100).div(96)).div(1000)); // ArK\r\n        address(0x4CE4Ea57c40bBa26B7b799d5e0b4cd063B034c8A).transfer(amount.mul(uint(185).mul(100).div(96)).div(1000)); // ViT\r\n        address(0xdCd8a8e561d23Ca710f23E7612F1D4E0dE9bde83).transfer(amount.mul(uint(25).mul(100).div(96)).div(1000));  // SeT\r\n        address(0x0dFFA8624A1f512b8dcDE807F8B0Eab68672e5D5).transfer(amount.mul(uint(250).mul(100).div(96)).div(1000)); // AnD\r\n        address(0xE091180bB0C284AA0Bd15C6888A41aba45c54AF0).transfer(amount.mul(uint(245).mul(100).div(96)).div(1000)); // VlM\r\n    }\r\n\r\n    /// @notice doAirdrop is called when we launch airdrop.\r\n    /// @notice airdrop tokens has their own supply.\r\n    uint dropped = 0;\r\n    function doAirdrop(address[] members, uint[] tokens) public onlyOwnerAndDirector {\r\n        require(members.length == tokens.length);\r\n    \r\n        for(uint i = 0; i < members.length; i++) {\r\n            _freezeTransfer(members[i], tokens[i]);\r\n            dropped = dropped.add(tokens[i]);\r\n        }\r\n        require(dropped <= bountySupply);\r\n    }\r\n\r\n    mapping(address => uint) public whitemap;\r\n    uint public whitelistTokens = 0;\r\n    /// @notice addWhitelistMember is used to whitelist participant.\r\n    /// This means, that for the first 3 days of crowd-sale `_tokens` CST \r\n    /// will be reserved for him.\r\n    function addWhitelistMember(address[] _mem, uint[] _tokens) public onlyAdmin {\r\n        require(_mem.length == _tokens.length);\r\n        for(uint i = 0; i < _mem.length; i++) {\r\n            whitelistTokens = whitelistTokens.sub(whitemap[_mem[i]]).add(_tokens[i]);\r\n            whitemap[_mem[i]] = _tokens[i];\r\n        }\r\n    }\r\n\r\n    uint public adviserSold = 0;\r\n    /// @notice transferAdviser is called to send tokens to advisers.\r\n    /// @notice adviser tokens have their own supply\r\n    function transferAdviser(address[] _adv, uint[] _tokens) public onlyOwnerAndDirector {\r\n        require(_adv.length == _tokens.length);\r\n        for (uint i = 0; i < _adv.length; i++) {\r\n            adviserSold = adviserSold.add(_tokens[i]);\r\n            _freezeTransfer(_adv[i], _tokens[i]);\r\n        }\r\n        require(adviserSold <= adviserSupply);\r\n    }\r\n\r\n    mapping(address => bool) approvedInvestors;\r\n    function approveInvestor(address _addr) public onlyOwner {\r\n        approvedInvestors[_addr] = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitemap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setBTCRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRateMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cstToMicro\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"purchaseWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDirector\",\"type\":\"address\"}],\"name\":\"setDirector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusLevel0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlock3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlock4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setETHRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"assignPreicoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamETHUnlock2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcRateMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adviserSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethMax\",\"type\":\"uint256\"},{\"name\":\"btcMax\",\"type\":\"uint256\"}],\"name\":\"setMaxRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleMinUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"richardAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_satoshi\",\"type\":\"uint256\"},{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"purchaseWithBTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"approveInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adv\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"transferAdviser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusLevel100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"checkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"purchaseWithPromoter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"assignTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleHardEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cashBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wuguAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prolongCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOStatus\",\"outputs\":[{\"name\":\"usd\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"cst\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"p\",\"type\":\"uint8\"}],\"name\":\"addInvestorBonusInPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mem\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelistMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"members\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"doAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethLastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamETHUnlock1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adviserSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPromoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlock1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcLastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addInvestorBonusInTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamETHUnlock3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mem\",\"type\":\"address\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"kycPassed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlock2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkICOStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_usd\",\"type\":\"uint256\"}],\"name\":\"transferBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CasperToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ac9da846ba3fe3a443dbb6fa773b2fe2c0e3161ee9fed405c6c424af63d99e5e"}]}