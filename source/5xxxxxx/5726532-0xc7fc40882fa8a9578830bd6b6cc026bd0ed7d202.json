{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract MultiOwnable {\r\n    address[] public owners;\r\n\r\n    function ownersCount() public view returns(uint256) {\r\n        return owners.length;\r\n    }\r\n\r\n    event OwnerAdded(address indexed owner);\r\n    event OwnerRemoved(address indexed owner);\r\n\r\n    constructor() public {\r\n        owners.push(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address addr) public view returns (bool) {\r\n        bool _isOwner = false;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (addr == owners[i]) {\r\n                _isOwner = true;\r\n                break;\r\n            }\r\n        }\r\n        return _isOwner;\r\n    }\r\n\r\n    function addOwner(address owner) public onlyOwner {\r\n        require(owner != address(0));\r\n        require(!isOwner(owner));\r\n        owners.push(owner);\r\n        emit OwnerAdded(owner);\r\n    }\r\n    function removeOwner(address owner) public onlyOwner {\r\n        require(owner != address(0));\r\n        require(owner != msg.sender);\r\n        bool wasDeleted = false;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                if (i < owners.length-1) {\r\n                    owners[i] = owners[owners.length-1];\r\n                }\r\n                owners.length--;\r\n                wasDeleted = true;\r\n            }\r\n        }\r\n        require(wasDeleted);\r\n        emit OwnerRemoved(owner);\r\n    }\r\n\r\n}\r\n\r\ncontract AigoTokensale is MultiOwnable {\r\n\r\n  struct InvestorPayment {\r\n    uint256 time;\r\n    uint256 value;\r\n    uint8 currency;\r\n    uint256 tokens;\r\n  }\r\n\r\n  struct Investor {\r\n    bool isActive;\r\n    InvestorPayment[] payments;\r\n    bool needUpdate;\r\n  }\r\n\r\n  event InvestorAdded(address indexed investor);\r\n  event TokensaleFinishTimeChanged(uint256 oldTime, uint256 newTime);\r\n  event Payment(address indexed investor, uint256 value, uint8 currency);\r\n  event Delivered(address indexed investor, uint256 amount);\r\n  event TokensaleFinished(uint256 tokensSold, uint256 tokensReturned);\r\n\r\n  ERC20Basic public token;\r\n  uint256 public finishTime;\r\n  address vaultWallet;\r\n\r\n  UserWallet[] public investorList;\r\n  mapping(address => Investor) investors;\r\n\r\n  function investorsCount() public view returns (uint256) {\r\n    return investorList.length;\r\n  }\r\n  function investorInfo(address investorAddress) public view returns (bool, bool, uint256, uint256) {\r\n    Investor storage investor = investors[investorAddress];\r\n    uint256 investorTokens = 0;\r\n    for (uint i=0; i<investor.payments.length; i++) {\r\n      investorTokens += investor.payments[i].tokens;\r\n    }\r\n    return (investor.isActive, investor.needUpdate, investor.payments.length, investorTokens);\r\n  }\r\n  function investorPayment(address investor, uint index) public view returns (uint256,  uint256, uint8, uint256) {\r\n    InvestorPayment storage payment = investors[investor].payments[index];\r\n    return (payment.time, payment.value, payment.currency, payment.tokens);\r\n  }\r\n  function totalTokens() public view returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  constructor(ERC20Basic _token, uint256 _finishTime, address _vaultWallet) MultiOwnable() public {\r\n    require(_token != address(0));\r\n    require(_finishTime > now);\r\n    require(_vaultWallet != address(0));\r\n    token = _token;\r\n    finishTime = _finishTime;\r\n    vaultWallet = _vaultWallet;\r\n  }\r\n\r\n  function setFinishTime(uint256 _finishTime) public onlyOwner {\r\n    uint256 oldTime = finishTime;\r\n    finishTime = _finishTime;\r\n    emit TokensaleFinishTimeChanged(oldTime, finishTime);\r\n  }\r\n\r\n  function postWalletPayment(uint256 value) public {\r\n    require(now < finishTime);\r\n    Investor storage investor = investors[msg.sender];\r\n    require(investor.isActive);\r\n    investor.payments.push(InvestorPayment(now, value, 0, 0));\r\n    investor.needUpdate = true;\r\n    emit Payment(msg.sender, value, 0);\r\n  }\r\n\r\n  function postExternalPayment(address investorAddress, uint256 time, uint256 value, uint8 currency, uint256 tokenAmount) public onlyOwner {\r\n    require(investorAddress != address(0));\r\n    require(time <= now);\r\n    require(now < finishTime);\r\n    Investor storage investor = investors[investorAddress];\r\n    require(investor.isActive);\r\n    investor.payments.push(InvestorPayment(time, value, currency, tokenAmount));\r\n    emit Payment(msg.sender, value, currency);\r\n  }\r\n\r\n  function updateTokenAmount(address investorAddress, uint256 paymentIndex, uint256 tokenAmount) public onlyOwner {\r\n    Investor storage investor = investors[investorAddress];\r\n    require(investor.isActive);\r\n    investor.needUpdate = false;\r\n    investor.payments[paymentIndex].tokens = tokenAmount;\r\n  }\r\n\r\n  function addInvestor(address _payoutAddress) public onlyOwner {\r\n    UserWallet wallet = new UserWallet(_payoutAddress, vaultWallet);\r\n    investorList.push(wallet);\r\n    investors[wallet].isActive = true;\r\n    emit InvestorAdded(wallet);\r\n  }\r\n\r\n  function deliverTokens(uint limit) public onlyOwner {\r\n    require(now > finishTime);\r\n    uint counter = 0;\r\n    uint256 tokensDelivered = 0;\r\n    for (uint i = 0; i < investorList.length && counter < limit; i++) {\r\n      UserWallet investorAddress = investorList[i];\r\n      Investor storage investor = investors[investorAddress];\r\n      require(!investor.needUpdate);\r\n      uint256 investorTokens = 0;\r\n      for (uint j=0; j<investor.payments.length; j++) {\r\n        investorTokens += investor.payments[j].tokens;\r\n      }\r\n      if (investor.isActive) {\r\n        counter = counter + 1;\r\n        require(token.transfer(investorAddress, investorTokens));\r\n        investorAddress.onDelivery();\r\n        investor.isActive = false;\r\n        emit Delivered(investorAddress, investorTokens);\r\n      }\r\n      tokensDelivered = tokensDelivered + investorTokens;\r\n    }\r\n    if (counter < limit) {\r\n      uint256 tokensLeft = token.balanceOf(this);\r\n      if (tokensLeft > 0) {\r\n        require(token.transfer(vaultWallet, tokensLeft));\r\n      }\r\n      emit TokensaleFinished(tokensDelivered, tokensLeft);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract UserWallet {\r\n    using SafeMath for uint256;\r\n\r\n    address public payoutWallet;\r\n    address public vaultWallet;\r\n    AigoTokensale public tokensale;\r\n\r\n    constructor(address _payoutWallet, address _vaultWallet) public {\r\n      require(_vaultWallet != address(0));\r\n      payoutWallet = _payoutWallet;\r\n      vaultWallet = _vaultWallet;\r\n      tokensale = AigoTokensale(msg.sender);\r\n    }\r\n\r\n    function onDelivery() public {\r\n        require(msg.sender == address(tokensale));\r\n        if (payoutWallet != address(0)) {\r\n            ERC20Basic token = tokensale.token();\r\n            uint256 balance = token.balanceOf(this);\r\n            require(token.transfer(payoutWallet, balance));\r\n        }\r\n    }\r\n\r\n    function setPayoutWallet(address _payoutWallet) public {\r\n        require(tokensale.isOwner(msg.sender));\r\n        payoutWallet = _payoutWallet;\r\n        if (payoutWallet != address(0)) {\r\n            ERC20Basic token = tokensale.token();\r\n            uint256 balance = token.balanceOf(this);\r\n            if (balance > 0) {\r\n                require(token.transfer(payoutWallet, balance));\r\n            }\r\n        }\r\n    }\r\n\r\n    function() public payable {\r\n        tokensale.postWalletPayment(msg.value);\r\n        vaultWallet.transfer(msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"postWalletPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_finishTime\",\"type\":\"uint256\"}],\"name\":\"setFinishTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"uint8\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"postExternalPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"investorPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"deliverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"paymentIndex\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"investorInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_finishTime\",\"type\":\"uint256\"},{\"name\":\"_vaultWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"TokensaleFinishTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReturned\",\"type\":\"uint256\"}],\"name\":\"TokensaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"}]","ContractName":"AigoTokensale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000086ac8a7176d8b496f897e369bc54cf49572fefcd000000000000000000000000000000000000000000000000000000005b6008f0000000000000000000000000361c9ee5d2cffc4a75036ea28c9b514de8af26a4","Library":"","SwarmSource":"bzzr://2d385c2cc6c782a4bf79cb020539cc72109a61f005f0acf93da985ca50268ef5"}]}