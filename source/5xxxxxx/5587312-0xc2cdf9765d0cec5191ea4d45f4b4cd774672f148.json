{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n    function approve(address spender, uint value) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        sAssert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure internal returns (uint) {\r\n        sAssert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        sAssert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function sAssert(bool assertion) pure internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\ncontract ArrayUtil {\r\n    function indexOf(bytes32[] array, bytes32 value)\r\n      internal\r\n      view\r\n      returns(uint)\r\n    {\r\n        bool found = false;\r\n        uint index = 0;\r\n\r\n        for (uint i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                found = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(found);\r\n        return index;\r\n    }\r\n\r\n    function remove(bytes32[] array, bytes32 value)\r\n      internal\r\n      returns(bytes32[])\r\n    {\r\n        uint index = indexOf(array, value);\r\n        return removeAtIndex(array, index);\r\n    }\r\n\r\n    function removeAtIndex(bytes32[] array, uint index)\r\n      internal\r\n      returns(bytes32[])\r\n    {\r\n        if (index >= array.length) return;\r\n\r\n        bytes32[] memory arrayNew = new bytes32[](array.length - 1);\r\n\r\n        for (uint i = 0; i < arrayNew.length; i++) {\r\n            if(i != index && i < index){\r\n                arrayNew[i] = array[i];\r\n            } else {\r\n                arrayNew[i] = array[i+1];\r\n            }\r\n        }\r\n\r\n        delete array;\r\n        return arrayNew;\r\n    }\r\n}\r\n\r\n\r\ncontract CentralityGiftShop is SafeMath, ArrayUtil {\r\n    // Struct and enum\r\n    struct Inventory {\r\n        string thumbURL;\r\n        string photoURL;\r\n        string name;\r\n        string description;\r\n    }\r\n\r\n    struct Order {\r\n        bytes32 inventoryId;\r\n        uint price;\r\n        uint quantity;\r\n        string name;\r\n        string description;\r\n    }\r\n\r\n    // Instance variables\r\n    mapping(bytes32 => Inventory) public stock;\r\n    mapping(bytes32 => uint) public stockPrice;\r\n    mapping(bytes32 => uint) public stockAvailableQuantity;\r\n    bytes32[] public stocks;\r\n\r\n    address public owner;\r\n    address public paymentContractAddress;\r\n\r\n    mapping(address => Order[]) orders;\r\n\r\n    // Modifier\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Init\r\n    function CentralityGiftShop()\r\n      public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Admin\r\n    function setPaymentContractAddress(address contractAddress)\r\n      public\r\n      onlyOwner()\r\n    {\r\n        paymentContractAddress = contractAddress;\r\n    }\r\n\r\n    function withdraw()\r\n      public\r\n      onlyOwner()\r\n    {\r\n        require(paymentContractAddress != 0x0);\r\n\r\n        uint balance = ERC20(paymentContractAddress).balanceOf(this);\r\n        require(balance > 0);\r\n\r\n        if (!ERC20(paymentContractAddress).transfer(msg.sender, balance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function addInventory(\r\n        bytes32 inventoryId,\r\n        string thumbURL,\r\n        string photoURL,\r\n        string name,\r\n        string description,\r\n        uint price,\r\n        uint availableQuantity\r\n    )\r\n      public\r\n      onlyOwner()\r\n    {\r\n        Inventory memory inventory = Inventory({\r\n            thumbURL: thumbURL,\r\n            photoURL: photoURL,\r\n            name: name,\r\n            description: description\r\n        });\r\n\r\n        stock[inventoryId] = inventory;\r\n        stockPrice[inventoryId] = price;\r\n        stockAvailableQuantity[inventoryId] = availableQuantity;\r\n\r\n        stocks.push(inventoryId);\r\n    }\r\n\r\n    function removeInventory(bytes32 inventoryId)\r\n      public\r\n      onlyOwner()\r\n    {\r\n        stocks = remove(stocks, inventoryId);\r\n    }\r\n\r\n    function purchaseFor(address buyer, bytes32 inventoryId, uint quantity)\r\n     public\r\n     onlyOwner()\r\n    {\r\n        uint price = stockPrice[inventoryId];\r\n\r\n        // Check if the order is sane\r\n        require(price > 0);\r\n        require(quantity > 0);\r\n        require(stockPrice[inventoryId] > 0);\r\n        require(safeSub(stockAvailableQuantity[inventoryId], quantity) >= 0);\r\n\r\n        //Place Order\r\n        Inventory storage inventory = stock[inventoryId];\r\n\r\n        Order memory order = Order({\r\n            name: inventory.name,\r\n            description: inventory.description,\r\n            inventoryId: inventoryId,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n\r\n        orders[buyer].push(order);\r\n        stockAvailableQuantity[inventoryId] = safeSub(stockAvailableQuantity[inventoryId], quantity);\r\n    }\r\n\r\n    // Public\r\n    function getStockLength()\r\n      public\r\n      view\r\n      returns(uint) \r\n    {\r\n        return stocks.length;\r\n    }\r\n    \r\n    function getOrderLength(address buyer)\r\n      public\r\n      view\r\n      returns(uint) \r\n    {\r\n        return orders[buyer].length;\r\n    }\r\n\r\n    function getOrder(address buyer, uint index)\r\n      public\r\n      view\r\n      returns(bytes32, uint, uint, string, string) \r\n    {\r\n        Order o = orders[buyer][index];\r\n        return (o.inventoryId, o.price, o.quantity, o.name, o.description);\r\n    }\r\n    \r\n    function purchase(bytes32 inventoryId, uint quantity)\r\n      public\r\n    {\r\n        uint index = indexOf(stocks, inventoryId);\r\n        uint price = stockPrice[inventoryId];\r\n\r\n        // Check if the order is sane\r\n        require(price > 0);\r\n        require(quantity > 0);\r\n        require(stockPrice[inventoryId] > 0);\r\n        require(safeSub(stockAvailableQuantity[inventoryId], quantity) >= 0);\r\n\r\n        // Check cost\r\n        uint cost = safeMul(price, quantity);\r\n        require(cost > 0);\r\n\r\n        if (!ERC20(paymentContractAddress).transferFrom(msg.sender, this, cost)) {\r\n            revert();\r\n        }\r\n\r\n        Inventory storage inventory = stock[inventoryId];\r\n\r\n        Order memory order = Order({\r\n            name: inventory.name,\r\n            description: inventory.description,\r\n            inventoryId: inventoryId,\r\n            price: price,\r\n            quantity: quantity\r\n        });\r\n\r\n        orders[msg.sender].push(order);\r\n        stockAvailableQuantity[inventoryId] = safeSub(stockAvailableQuantity[inventoryId], quantity);\r\n    }\r\n\r\n    // Default\r\n    function () public {\r\n        // Do not accept ether\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stockAvailableQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stocks\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setPaymentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStockLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stockPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stock\",\"outputs\":[{\"name\":\"thumbURL\",\"type\":\"string\"},{\"name\":\"photoURL\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inventoryId\",\"type\":\"bytes32\"}],\"name\":\"removeInventory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getOrderLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inventoryId\",\"type\":\"bytes32\"},{\"name\":\"thumbURL\",\"type\":\"string\"},{\"name\":\"photoURL\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"availableQuantity\",\"type\":\"uint256\"}],\"name\":\"addInventory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inventoryId\",\"type\":\"bytes32\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"inventoryId\",\"type\":\"bytes32\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"purchaseFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"CentralityGiftShop","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5271419128ff69c704b2993a245e741077bd57096508c3eff64ab006ded8e887"}]}