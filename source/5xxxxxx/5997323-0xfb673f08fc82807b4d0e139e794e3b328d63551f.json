{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    function AccessAdmin() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\n\r\ncontract AccessService is AccessAdmin {\r\n    address public addrService;\r\n    address public addrFinance;\r\n\r\n    modifier onlyService() {\r\n        require(msg.sender == addrService);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinance() {\r\n        require(msg.sender == addrFinance);\r\n        _;\r\n    }\r\n\r\n    function setService(address _newService) external {\r\n        require(msg.sender == addrService || msg.sender == addrAdmin);\r\n        require(_newService != address(0));\r\n        addrService = _newService;\r\n    }\r\n\r\n    function setFinance(address _newFinance) external {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_newFinance != address(0));\r\n        addrFinance = _newFinance;\r\n    }\r\n\r\n    function withdraw(address _target, uint256 _amount) \r\n        external \r\n    {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_amount > 0);\r\n        address receiver = _target == address(0) ? addrFinance : _target;\r\n        uint256 balance = this.balance;\r\n        if (_amount < balance) {\r\n            receiver.transfer(_amount);\r\n        } else {\r\n            receiver.transfer(this.balance);\r\n        }      \r\n    }\r\n}\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract TokenTycoonIGO is AccessService {\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 850 * (10 ** uint256(decimals));\r\n    string public name = \"Token Tycoon Coin\";\r\n    string public symbol = \"TTC\";\r\n    bytes32 private emptyHash;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping(address => uint256)) allowed;\r\n    mapping (address => string) addressToAccount;\r\n    mapping (bytes32 => address) accHashToAddress;\r\n    \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event BuyIGO(address indexed _from, string _account, uint256 _ethVal, uint256 _tthVal);\r\n\r\n    function TokenTycoonIGO() public {\r\n        addrAdmin = msg.sender;\r\n        addrService = msg.sender;\r\n        addrFinance = msg.sender;\r\n\r\n        balances[this] = totalSupply;\r\n        emptyHash = keccak256(\"\");\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] -= _value;\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        return _transfer(msg.sender, _to, _value);     \r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        external\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        uint256 oldFromVal = balances[_from];\r\n        require(_value > 0 && oldFromVal >= _value);\r\n        uint256 oldToVal = balances[_to];\r\n        uint256 newToVal = oldToVal + _value;\r\n        require(newToVal > oldToVal);\r\n        uint256 newFromVal = oldFromVal - _value;\r\n        balances[_from] = newFromVal;\r\n        balances[_to] = newToVal;\r\n\r\n        assert((oldFromVal + oldToVal) == (newFromVal + newToVal));\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buy(string _account) external payable whenNotPaused {  \r\n        uint256 val = msg.value;\r\n        uint256 tthVal;\r\n        if (val == 1 ether) {\r\n            tthVal = 1100000000000000000;\r\n        } else if (val == 3 ether) {\r\n            tthVal = 3600000000000000000;\r\n        } else if (val == 5 ether) {\r\n            tthVal = 6500000000000000000;\r\n        } else if (val == 10 ether) {\r\n            tthVal = 15000000000000000000;\r\n        } else if (val == 20 ether) {\r\n            tthVal = 34000000000000000000;\r\n        } else {\r\n            require(false);\r\n        }\r\n        uint256 b = balances[this];\r\n        require(b >= tthVal);\r\n\r\n        bytes32 hashAccount = keccak256(_account);\r\n        require(hashAccount != emptyHash);\r\n\r\n        address preAddr = accHashToAddress[hashAccount];\r\n        string storage preAcc = addressToAccount[msg.sender];\r\n        bytes32 hashPreAcc = keccak256(preAcc);\r\n\r\n        if (preAddr == address(0)) {\r\n            require(hashPreAcc == emptyHash);\r\n            // first buy\r\n            accHashToAddress[hashAccount] = msg.sender;\r\n            addressToAccount[msg.sender] = _account;\r\n            _transfer(this, msg.sender, tthVal);\r\n        } else if(preAddr == msg.sender) {\r\n            require(hashPreAcc == hashAccount);\r\n            // multi buy\r\n            _transfer(this, msg.sender, tthVal);\r\n        } else {\r\n            require(false);\r\n        }\r\n\r\n        BuyIGO(msg.sender, _account, val, tthVal);\r\n    }\r\n\r\n    function getCanSellBalance() external view returns(uint256) {\r\n        return balances[this];\r\n    }\r\n\r\n    function getBalanceByAccount(string _account) external view returns(uint256) {\r\n        bytes32 hashAccount = keccak256(_account);\r\n        address addr = accHashToAddress[hashAccount];\r\n        if (addr == address(0)) {\r\n            return 0;\r\n        } else {\r\n            return balances[addr];\r\n        }\r\n    }\r\n\r\n    function getIGOAccoountByAddr(address _addr) external view returns(string) {\r\n        return addressToAccount[_addr];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getIGOAccoountByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCanSellBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFinance\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"getBalanceByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newService\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_ethVal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tthVal\",\"type\":\"uint256\"}],\"name\":\"BuyIGO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"TokenTycoonIGO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4f97c40fb8d2442c9ccfb40b8d1b0a7a974cc09cdc4be93d00a71f30afc59c22"}]}