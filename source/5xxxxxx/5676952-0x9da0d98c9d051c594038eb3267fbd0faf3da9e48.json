{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*********************************************************************************\r\n *********************************************************************************\r\n *\r\n * Name of the project: JeiCoin Gold Token\r\n * BiJust\r\n * Ethernity.live\r\n*\r\n * v1.5\r\n *\r\n *********************************************************************************\r\n ********************************************************************************/\r\n\r\n /* ERC20 contract interface */\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n// The Token. A TokenWithDates ERC20 token\r\ncontract JeiCoinToken {\r\n\r\n    // Token public variables\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; \r\n    string public version = 'v1.5';\r\n    uint256 public totalSupply;\r\n    uint public price;\r\n    bool public locked;\r\n    uint multiplier;\r\n\r\n    address public rootAddress;\r\n    address public Owner;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    mapping(address => bool) public freezed;\r\n\r\n    mapping(address => uint) public maxIndex; // To store index of last batch: points to the next one\r\n    mapping(address => uint) public minIndex; // To store index of first batch\r\n    mapping(address => mapping(uint => Batch)) public batches; // To store batches with quantities and ages\r\n\r\n    struct Batch {\r\n        uint quant;\r\n        uint age;\r\n    }\r\n\r\n    // ERC20 events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        if ( msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        if ( msg.sender != rootAddress ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n    \tif ( locked && msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n\t\t_;    \t\r\n    }\r\n\r\n    modifier isUnfreezed(address _to) {\r\n    \tif ( freezed[msg.sender] || freezed[_to] ) revert();\r\n    \t_;\r\n    }\r\n\r\n    // Safe math\r\n    function safeSub(uint x, uint y) pure internal returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n\r\n    // Token constructor\r\n    constructor(address _root) {        \r\n        locked = false;\r\n        name = 'JeiCoin Gold'; \r\n        symbol = 'JEIG'; \r\n        decimals = 18; \r\n        multiplier = 10 ** uint(decimals);\r\n        totalSupply = 63000000 * multiplier; // 63,000,000 tokens\r\n        if (_root != 0x0) rootAddress = _root; else rootAddress = msg.sender;  \r\n        Owner = msg.sender;\r\n\r\n        // Asign total supply to the balance and to the first batch\r\n        balances[rootAddress] = totalSupply; \r\n        batches[rootAddress][0].quant = totalSupply;\r\n        batches[rootAddress][0].age = now;\r\n        maxIndex[rootAddress] = 1;\r\n    }\r\n\r\n\r\n    // Only root function\r\n\r\n    function changeRoot(address _newRootAddress) onlyRoot returns(bool){\r\n        rootAddress = _newRootAddress;\r\n        return true;\r\n    }\r\n\r\n    // Only owner functions\r\n\r\n    // To send ERC20 tokens sent accidentally\r\n    function sendToken(address _token,address _to , uint _value) onlyOwner returns(bool) {\r\n        ERC20Basic Token = ERC20Basic(_token);\r\n        require(Token.transfer(_to, _value));\r\n        return true;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) onlyOwner returns(bool) {\r\n        Owner = _newOwner;\r\n        return true;\r\n    }\r\n       \r\n    function unlock() onlyOwner returns(bool) {\r\n        locked = false;\r\n        return true;\r\n    }\r\n\r\n    function lock() onlyOwner returns(bool) {\r\n        locked = true;\r\n        return true;\r\n    }\r\n\r\n    function freeze(address _address) onlyOwner returns(bool) {\r\n        freezed[_address] = true;\r\n        return true;\r\n    }\r\n\r\n    function unfreeze(address _address) onlyOwner returns(bool) {\r\n        freezed[_address] = false;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner returns(bool) {\r\n        require (balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        totalSupply = safeSub( totalSupply,  _value );\r\n        emit Transfer(msg.sender, 0x0,_value);\r\n        return true;\r\n    }\r\n\r\n    // Public token functions\r\n    // Standard transfer function\r\n    function transfer(address _to, uint _value) isUnlocked public returns (bool success) {\r\n        require(msg.sender != _to);\r\n        if (balances[msg.sender] < _value) return false;\r\n        if (freezed[msg.sender] || freezed[_to]) return false; // Check if destination address is freezed\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n\r\n        updateBatches(msg.sender, _to, _value);\r\n\r\n        emit Transfer(msg.sender,_to,_value);\r\n        return true;\r\n        }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) isUnlocked public returns(bool) {\r\n        require(_from != _to);\r\n        if ( freezed[_from] || freezed[_to] ) return false; // Check if destination address is freezed\r\n        if ( balances[_from] < _value ) return false; // Check if the sender has enough\r\n    \tif ( _value > allowed[_from][msg.sender] ) return false; // Check allowance\r\n\r\n        balances[_from] = balances[_from] - _value; // Subtract from the sender\r\n        balances[_to] = balances[_to] + _value; // Add the same to the recipient\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n\r\n        updateBatches(_from, _to, _value);\r\n\r\n        emit Transfer(_from,_to,_value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Public getters\r\n\r\n    function isLocked() public view returns(bool) {\r\n        return locked;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    // To read batches from external tokens\r\n\r\n    function getBatch(address _address , uint _batch) public view returns(uint _quant,uint _age) {\r\n        return (batches[_address][_batch].quant , batches[_address][_batch].age);\r\n    }\r\n\r\n    function getFirstBatch(address _address) public view returns(uint _quant,uint _age) {\r\n        return (batches[_address][minIndex[_address]].quant , batches[_address][minIndex[_address]].age);\r\n    }\r\n\r\n    // Private function to register quantity and age of batches from sender and receiver (TokenWithDates)\r\n    function updateBatches(address _from,address _to,uint _value) private {\r\n        // Discounting tokens from batches AT SOURCE\r\n        uint count = _value;\r\n        uint i = minIndex[_from];\r\n         while(count > 0) { // To iterate over the mapping. // && i < maxIndex is just a protection from infinite loop, that should not happen anyways\r\n            uint _quant = batches[_from][i].quant;\r\n            if ( count >= _quant ) { // If there is more to send than the batch\r\n                // Empty batch and continue counting\r\n                count -= _quant; // First rest the batch to the count\r\n                batches[_from][i].quant = 0; // Then empty the batch\r\n                minIndex[_from] = i + 1;\r\n                } else { // If this batch is enough to send everything\r\n                    // Empty counter and adjust the batch\r\n                    batches[_from][i].quant -= count; // First adjust the batch, just in case anything rest\r\n                    count = 0; // Then empty the counter and thus stop loop\r\n                    }\r\n            i++;\r\n        } // Closes while loop\r\n\r\n        // Counting tokens for batches AT TARGET\r\n        // Prepare struct\r\n        Batch memory thisBatch;\r\n        thisBatch.quant = _value;\r\n        thisBatch.age = now;\r\n        // Assign batch and move the index\r\n        batches[_to][maxIndex[_to]] = thisBatch;\r\n        maxIndex[_to]++;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRootAddress\",\"type\":\"address\"}],\"name\":\"changeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_batch\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"name\":\"_quant\",\"type\":\"uint256\"},{\"name\":\"_age\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batches\",\"outputs\":[{\"name\":\"quant\",\"type\":\"uint256\"},{\"name\":\"age\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFirstBatch\",\"outputs\":[{\"name\":\"_quant\",\"type\":\"uint256\"},{\"name\":\"_age\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_root\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"JeiCoinToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ad50caca8cd726600840e745d0ae6b6e78861dbc","Library":"","SwarmSource":"bzzr://33a834902b603ffd0f0f68bf4c20dd4393fd6b7962a88376b1095519ad3dafc8"}]}