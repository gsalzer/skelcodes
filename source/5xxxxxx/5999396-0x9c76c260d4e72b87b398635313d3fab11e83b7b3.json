{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ninterface CompetitionInterface {\r\n\r\n    // EVENTS\r\n\r\n    event Register(uint withId, address fund, address manager);\r\n    event ClaimReward(address registrant, address fund, uint shares);\r\n\r\n    // PRE, POST, INVARIANT CONDITIONS\r\n\r\n    function termsAndConditionsAreSigned(address byManager, uint8 v, bytes32 r, bytes32 s) view returns (bool);\r\n    function isWhitelisted(address x) view returns (bool);\r\n    function isCompetitionActive() view returns (bool);\r\n\r\n    // CONSTANT METHODS\r\n\r\n    function getMelonAsset() view returns (address);\r\n    function getRegistrantId(address x) view returns (uint);\r\n    function getRegistrantFund(address x) view returns (address);\r\n    function getCompetitionStatusOfRegistrants() view returns (address[], address[], bool[]);\r\n    function getTimeTillEnd() view returns (uint);\r\n    function getEtherValue(uint amount) view returns (uint);\r\n    function calculatePayout(uint payin) view returns (uint);\r\n\r\n    // PUBLIC METHODS\r\n\r\n    function registerForCompetition(address fund, uint8 v, bytes32 r, bytes32 s) payable;\r\n    function batchAddToWhitelist(uint maxBuyinQuantity, address[] whitelistants);\r\n    function withdrawMln(address to, uint amount);\r\n    function claimReward();\r\n\r\n}\r\n\r\ninterface ComplianceInterface {\r\n\r\n    // PUBLIC VIEW METHODS\r\n\r\n    /// @notice Checks whether investment is permitted for a participant\r\n    /// @param ofParticipant Address requesting to invest in a Melon fund\r\n    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\r\n    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\r\n    /// @return Whether identity is eligible to invest in a Melon fund.\r\n    function isInvestmentPermitted(\r\n        address ofParticipant,\r\n        uint256 giveQuantity,\r\n        uint256 shareQuantity\r\n    ) view returns (bool);\r\n\r\n    /// @notice Checks whether redemption is permitted for a participant\r\n    /// @param ofParticipant Address requesting to redeem from a Melon fund\r\n    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\r\n    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\r\n    /// @return Whether identity is eligible to redeem from a Melon fund.\r\n    function isRedemptionPermitted(\r\n        address ofParticipant,\r\n        uint256 shareQuantity,\r\n        uint256 receiveQuantity\r\n    ) view returns (bool);\r\n}\r\n\r\ncontract DBC {\r\n\r\n    // MODIFIERS\r\n\r\n    modifier pre_cond(bool condition) {\r\n        require(condition);\r\n        _;\r\n    }\r\n\r\n    modifier post_cond(bool condition) {\r\n        _;\r\n        assert(condition);\r\n    }\r\n\r\n    modifier invariant(bool condition) {\r\n        require(condition);\r\n        _;\r\n        assert(condition);\r\n    }\r\n}\r\n\r\ncontract Owned is DBC {\r\n\r\n    // FIELDS\r\n\r\n    address public owner;\r\n\r\n    // NON-CONSTANT METHODS\r\n\r\n    function Owned() { owner = msg.sender; }\r\n\r\n    function changeOwner(address ofNewOwner) pre_cond(isOwner()) { owner = ofNewOwner; }\r\n\r\n    // PRE, POST, INVARIANT CONDITIONS\r\n\r\n    function isOwner() internal returns (bool) { return msg.sender == owner; }\r\n\r\n}\r\n\r\ncontract CompetitionCompliance is ComplianceInterface, DBC, Owned {\r\n\r\n    address public competitionAddress;\r\n\r\n    // CONSTRUCTOR\r\n\r\n    /// @dev Constructor\r\n    /// @param ofCompetition Address of the competition contract\r\n    function CompetitionCompliance(address ofCompetition) public {\r\n        competitionAddress = ofCompetition;\r\n    }\r\n\r\n    // PUBLIC VIEW METHODS\r\n\r\n    /// @notice Checks whether investment is permitted for a participant\r\n    /// @param ofParticipant Address requesting to invest in a Melon fund\r\n    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\r\n    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\r\n    /// @return Whether identity is eligible to invest in a Melon fund.\r\n    function isInvestmentPermitted(\r\n        address ofParticipant,\r\n        uint256 giveQuantity,\r\n        uint256 shareQuantity\r\n    )\r\n        view\r\n        returns (bool)\r\n    {\r\n        return competitionAddress == ofParticipant;\r\n    }\r\n\r\n    /// @notice Checks whether redemption is permitted for a participant\r\n    /// @param ofParticipant Address requesting to redeem from a Melon fund\r\n    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\r\n    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\r\n    /// @return isEligible Whether identity is eligible to redeem from a Melon fund.\r\n    function isRedemptionPermitted(\r\n        address ofParticipant,\r\n        uint256 shareQuantity,\r\n        uint256 receiveQuantity\r\n    )\r\n        view\r\n        returns (bool)\r\n    {\r\n        return competitionAddress == ofParticipant;\r\n    }\r\n\r\n    /// @notice Checks whether an address is whitelisted in the competition contract and competition is active\r\n    /// @param x Address\r\n    /// @return Whether the address is whitelisted\r\n    function isCompetitionAllowed(\r\n        address x\r\n    )\r\n        view\r\n        returns (bool)\r\n    {\r\n        return CompetitionInterface(competitionAddress).isWhitelisted(x) && CompetitionInterface(competitionAddress).isCompetitionActive();\r\n    }\r\n\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /// @notice Changes the competition address\r\n    /// @param ofCompetition Address of the competition contract\r\n    function changeCompetitionAddress(\r\n        address ofCompetition\r\n    )\r\n        pre_cond(isOwner())\r\n    {\r\n        competitionAddress = ofCompetition;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"competitionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"isCompetitionAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ofParticipant\",\"type\":\"address\"},{\"name\":\"giveQuantity\",\"type\":\"uint256\"},{\"name\":\"shareQuantity\",\"type\":\"uint256\"}],\"name\":\"isInvestmentPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ofNewOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ofCompetition\",\"type\":\"address\"}],\"name\":\"changeCompetitionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ofParticipant\",\"type\":\"address\"},{\"name\":\"shareQuantity\",\"type\":\"uint256\"},{\"name\":\"receiveQuantity\",\"type\":\"uint256\"}],\"name\":\"isRedemptionPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ofCompetition\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CompetitionCompliance","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"0000000000000000000000000d580ae50b58fe08514deab4e38c0dfdb0d30adc","Library":"","SwarmSource":"bzzr://1fa58ead395999cbdb514b65fc0e1d0766a72f540bdea83312caaafd5d92d52a"}]}