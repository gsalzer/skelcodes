{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/ds-auth/auth.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/AssetPriceOracle.sol\r\n\r\ncontract AssetPriceOracle is DSAuth {\r\n    // Maximum value expressible with uint128 is 340282366920938463463374607431768211456.\r\n    // Using 18 decimals for price records (standard Ether precision), \r\n    // the possible values are between 0 and 340282366920938463463.374607431768211456.\r\n\r\n    struct AssetPriceRecord {\r\n        uint128 price;\r\n        bool isRecord;\r\n    }\r\n\r\n    mapping(uint128 => mapping(uint128 => AssetPriceRecord)) public assetPriceRecords;\r\n\r\n    event AssetPriceRecorded(\r\n        uint128 indexed assetId,\r\n        uint128 indexed blockNumber,\r\n        uint128 indexed price\r\n    );\r\n\r\n    constructor() public {\r\n    }\r\n    \r\n    function recordAssetPrice(uint128 assetId, uint128 blockNumber, uint128 price) public auth {\r\n        assetPriceRecords[assetId][blockNumber].price = price;\r\n        assetPriceRecords[assetId][blockNumber].isRecord = true;\r\n        emit AssetPriceRecorded(assetId, blockNumber, price);\r\n    }\r\n\r\n    function getAssetPrice(uint128 assetId, uint128 blockNumber) public view returns (uint128 price) {\r\n        AssetPriceRecord storage priceRecord = assetPriceRecords[assetId][blockNumber];\r\n        require(priceRecord.isRecord);\r\n        return priceRecord.price;\r\n    }\r\n\r\n    function () public {\r\n        // dont receive ether via fallback method (by not having 'payable' modifier on this function).\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint128\"},{\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"recordAssetPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint128\"},{\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"assetPriceRecords\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"isRecord\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint128\"},{\"name\":\"blockNumber\",\"type\":\"uint128\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"AssetPriceRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"AssetPriceOracle","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed02a226c0b196377f4a9bcea11f0989940d650e7f4a8c0159f5f357907a5e38"}]}