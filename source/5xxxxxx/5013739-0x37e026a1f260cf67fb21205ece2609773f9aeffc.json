{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public beneficiary;\r\n    address public burner;\r\n    uint public fundingGoal;\r\n    uint public amountRaised;\r\n    uint public deadline;\r\n\r\n    uint public pricePresale = 10000;\r\n    uint public priceRound1 = 5000;\r\n    uint public priceRound2 = 4500;\r\n    uint public priceRound3 = 4000;\r\n    uint public priceRound4 = 3500;\r\n\r\n    uint public totalSupply = 61200000 * 1 ether;\r\n    uint public supplyRound1 = 10000000 * 1 ether;\r\n    uint public supplyRound2 = 10000000 * 1 ether;\r\n    uint public supplyRound3 = 10000000 * 1 ether;\r\n    uint public supplyRound4 = 10000000 * 1 ether;\r\n    uint private suppyLeft;\r\n\r\n    // define amount of tokens to be sent to the funds, in percentages\r\n    uint public erotixFundMultiplier = 50;\r\n    uint public foundersFundMultiplier = 3;\r\n\r\n    uint public requestedTokens;\r\n    uint public amountAvailable;\r\n\r\n    bool round1Open = true;\r\n    bool round2Open = false;\r\n    bool round3Open = false;\r\n    bool round4Open = false;\r\n    bool soldOut = false;\r\n\r\n    address public erotixFund = 0x1a0cc2B7F7Cb6fFFd3194A2AEBd78A4a072915Be;\r\n    // Smart contract which releases received ERX on the 1st of March 2019\r\n    address public foundersFund = 0xaefe05643b613823dBAF6245AFb819Fd56fBdd22;\r\n\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint endOfCrowdsale,\r\n        address addressOfTokenUsedAsReward,\r\n        address burnAddress\r\n    ) public {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        deadline = endOfCrowdsale;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n        burner = burnAddress;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable public {\r\n        require(!crowdsaleClosed);\r\n        require(!soldOut);\r\n        uint amount = msg.value;\r\n\r\n        bool orderFilled = false;\r\n\r\n        while(!orderFilled) {\r\n            uint orderRate;\r\n            uint curSupply;\r\n\r\n            if(round1Open) {\r\n                orderRate = priceRound1;\r\n                curSupply = supplyRound1;\r\n            } else if(round2Open) {\r\n                orderRate = priceRound2;\r\n                curSupply = supplyRound2;\r\n            } else if(round3Open) {\r\n                orderRate = priceRound3;\r\n                curSupply = supplyRound3;\r\n            } else if(round4Open) {\r\n                orderRate = priceRound4;\r\n                curSupply = supplyRound4;\r\n            }\r\n\r\n            requestedTokens = amount * orderRate;\r\n\r\n            if (requestedTokens <= curSupply) {\r\n                balanceOf[msg.sender] += amount;\r\n                amountRaised += amount;\r\n\r\n                //send tokens to investor\r\n                tokenReward.transfer(msg.sender, amount * orderRate);\r\n                //send tokens to funds\r\n                tokenReward.transfer(erotixFund, amount * orderRate * erotixFundMultiplier / 100);\r\n                tokenReward.transfer(foundersFund, amount * orderRate * foundersFundMultiplier / 100);\r\n\r\n                FundTransfer(msg.sender, amount, true);\r\n\r\n                // update supply\r\n                if(round1Open) {\r\n                    supplyRound1 -= requestedTokens;\r\n                } else if(round2Open) {\r\n                    supplyRound2 -= requestedTokens;\r\n                } else if(round3Open) {\r\n                    supplyRound3 -= requestedTokens;\r\n                } else if(round4Open) {\r\n                    supplyRound4 -= requestedTokens;\r\n                }\r\n\r\n                orderFilled = true;\r\n            } else {\r\n                // Not enough supply left, sell remaining supply\r\n                amountAvailable = curSupply / orderRate;\r\n                balanceOf[msg.sender] += amountAvailable;\r\n                amountRaised += amountAvailable;\r\n\r\n                //send tokens to investor\r\n                tokenReward.transfer(msg.sender, amountAvailable * orderRate);\r\n                //send tokens to funds\r\n                tokenReward.transfer(erotixFund, amountAvailable * orderRate * erotixFundMultiplier / 100);\r\n                tokenReward.transfer(foundersFund, amountAvailable * orderRate * foundersFundMultiplier / 100);\r\n\r\n                FundTransfer(msg.sender, amountAvailable, true);\r\n\r\n                // set amount of eth left\r\n                amount -= amountAvailable;\r\n\r\n                // update supply and close round\r\n                supplyRound1 = 0;\r\n\r\n                if(round1Open) {\r\n                    supplyRound1 = 0;\r\n                    round1Open = false;\r\n                    round2Open = true;\r\n                } else if(round2Open) {\r\n                    supplyRound2 = 0;\r\n                    round2Open = false;\r\n                    round3Open = true;\r\n                } else if(round3Open) {\r\n                    supplyRound3 = 0;\r\n                    round3Open = false;\r\n                    round4Open = true;\r\n                } else if(round4Open) {\r\n                    supplyRound4 = 0;\r\n                    round4Open = false;\r\n                    soldOut = true;\r\n\r\n                    // send back remaining eth\r\n                    msg.sender.send(amount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() public {\r\n        if (now >= deadline || soldOut) {\r\n            if (amountRaised >= fundingGoal){\r\n                fundingGoalReached = true;\r\n                GoalReached(beneficiary, amountRaised);\r\n            }\r\n            crowdsaleClosed = true;\r\n\r\n            suppyLeft = supplyRound1 + supplyRound2 + supplyRound3 + supplyRound4;\r\n\r\n            if (suppyLeft > 0) {\r\n                tokenReward.transfer(burner, suppyLeft);\r\n                tokenReward.transfer(burner, suppyLeft * erotixFundMultiplier / 100);\r\n                tokenReward.transfer(burner, suppyLeft * foundersFundMultiplier / 100);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawal() public {\r\n        if (now >= deadline) {\r\n            if (!fundingGoalReached) {\r\n                uint amount = balanceOf[msg.sender];\r\n                balanceOf[msg.sender] = 0;\r\n                if (amount > 0) {\r\n                    if (msg.sender.send(amount)) {\r\n                        FundTransfer(msg.sender, amount, false);\r\n                    } else {\r\n                        balanceOf[msg.sender] = amount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (crowdsaleClosed) {\r\n            if (fundingGoalReached && beneficiary == msg.sender) {\r\n                if (beneficiary.send(amountRaised)) {\r\n                    FundTransfer(beneficiary, amountRaised, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erotixFundMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersFundMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erotixFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRound3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRound2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRound2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRound3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRound4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRound4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"endOfCrowdsale\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"burnAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e0401d70e14e2e51a5203b1989e211e391295c590000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005a9869d000000000000000000000000054fe56d168a8c847dbf13dd6e0fcfffa4e55d4670000000000000000000000008c9f657fe6049f7e5890b3f67f45a2e7a6e0048f","Library":"","SwarmSource":"bzzr://5dec53b9d51bb1af316c2d60c369d3ec609b2d1167b4c094b0c27c8108fdfe34"}]}