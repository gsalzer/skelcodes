{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract BGXTokenInterface{\r\n\r\n    function distribute( address _to, uint256 _amount ) public returns( bool );\r\n    function finally( address _teamAddress ) public returns( bool );\r\n\r\n}\r\n\r\ncontract BGXCrowdsale is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    BGXTokenInterface bgxTokenInterface;\r\n\r\n    address   public bgxWallet;\r\n    address[] public adviser;\r\n    address[] public bounty;\r\n    address[] public team;\r\n\r\n    mapping( address => uint256 ) adviserAmount;\r\n    mapping( address => uint256 ) bountyAmount;\r\n    mapping( address => uint256 ) teamAmount;\r\n\r\n    uint256 public presaleDateStart      = 1524571200;\r\n    uint256 public presaleDateFinish     = 1526385600;\r\n    uint256 public saleDateStart         = 1526990400;\r\n    uint256 public saleDateFinish        = 1528200000;\r\n\r\n    uint256 constant public hardcap      = 500000000 ether;\r\n    uint256 public presaleHardcap        = 30000000  ether;\r\n    uint256 public softcap               = 40000000  ether;\r\n    uint256 public totalBGX              = 0;\r\n    uint256 constant public minimal      = 1000 ether;\r\n\r\n    uint256 reserved                     = 250000000 ether;\r\n    uint256 constant teamLimit           = 100000000 ether;\r\n    uint256 constant advisersLimit       = 100000000 ether;\r\n    uint256 constant bountyLimit         = 50000000 ether;\r\n    uint256 public distributionDate      = 0;\r\n\r\n    bool paused = false;\r\n\r\n    enum CrowdsaleStates { Pause, Presale, Sale, OverHardcap, Finish }\r\n\r\n    CrowdsaleStates public state = CrowdsaleStates.Pause;\r\n\r\n    uint256 public sendNowLastCount = 0;\r\n    uint256 public finishLastCount = 0;\r\n    uint256 public finishCurrentLimit = 0;\r\n\r\n    modifier activeState {\r\n        require(\r\n            getState() == CrowdsaleStates.Presale\r\n            || getState() == CrowdsaleStates.Sale\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onPause {\r\n        require(\r\n            getState() == CrowdsaleStates.Pause\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier overSoftcap {\r\n        require(\r\n            totalBGX >= softcap\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier finishOrHardcap {\r\n        require(\r\n            getState() == CrowdsaleStates.OverHardcap\r\n            || getState() == CrowdsaleStates.Finish\r\n        );\r\n        _;\r\n    }\r\n\r\n    // fix for short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    address[]                     public investors;\r\n    mapping( address => uint256 ) public investorBalance;\r\n    mapping( address => bool )    public inBlackList;\r\n\r\n\r\n\r\n    function setBgxWalletAddress( address _a ) public onlyOwner returns( bool )\r\n    {\r\n        require( address(0) != _a );\r\n        bgxWallet = _a;\r\n        return true;\r\n    }\r\n\r\n    function setCrowdsaleDate( uint256 _presaleStart, uint256 _presaleFinish, uint256 _saleStart, uint256 _saleFinish ) public onlyOwner onPause returns( bool )\r\n    {\r\n        presaleDateStart = _presaleStart;\r\n        presaleDateFinish = _presaleFinish;\r\n        saleDateStart = _saleStart;\r\n        saleDateFinish = _saleFinish;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setCaps( uint256 _presaleHardcap, uint256 _softcap ) public onlyOwner onPause returns( bool )\r\n    {\r\n        presaleHardcap = _presaleHardcap;\r\n        softcap = _softcap;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function getState() public returns( CrowdsaleStates )\r\n    {\r\n\r\n        if( state == CrowdsaleStates.Pause || paused ) return CrowdsaleStates.Pause;\r\n        if( state == CrowdsaleStates.Finish ) return CrowdsaleStates.Finish;\r\n\r\n        if( totalBGX >= hardcap ) return CrowdsaleStates.OverHardcap;\r\n\r\n\r\n        if( now >= presaleDateStart && now <= presaleDateFinish ){\r\n\r\n            if( totalBGX >= presaleHardcap ) return CrowdsaleStates.Pause;\r\n            return CrowdsaleStates.Presale;\r\n\r\n        }\r\n\r\n        if( now >= saleDateStart && now <= saleDateFinish ){\r\n\r\n            if( totalBGX >= hardcap ) {\r\n                _startCounter();\r\n                return CrowdsaleStates.OverHardcap;\r\n            }\r\n            return CrowdsaleStates.Sale;\r\n\r\n        }\r\n\r\n        if( now > saleDateFinish ) {\r\n            _startCounter();\r\n            return CrowdsaleStates.Finish;\r\n        }\r\n\r\n        return CrowdsaleStates.Pause;\r\n\r\n    }\r\n\r\n    function _startCounter() internal\r\n    {\r\n        if (distributionDate <= 0) {\r\n            distributionDate = now + 2 days;\r\n        }\r\n    }\r\n\r\n\r\n    function pauseStateSwithcer() public onlyOwner returns( bool )\r\n    {\r\n        paused = !paused;\r\n    }\r\n\r\n    function start() public onlyOwner returns( bool )\r\n    {\r\n        state = CrowdsaleStates.Presale;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function send(address _addr, uint _amount) public onlyOwner activeState onlyPayloadSize(2 * 32) returns( bool )\r\n    {\r\n        require( address(0) != _addr && _amount >= minimal && !inBlackList[_addr] );\r\n\r\n        if( getState() == CrowdsaleStates.Presale ) require( totalBGX.add( _amount ) <= presaleHardcap );\r\n        if( getState() == CrowdsaleStates.Sale )    require( totalBGX.add( _amount ) <= hardcap );\r\n\r\n\r\n        investors.push( _addr );\r\n\r\n\r\n        investorBalance[_addr] = investorBalance[_addr].add( _amount );\r\n        if ( !inBlackList[_addr]) {\r\n            totalBGX = totalBGX.add( _amount );\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    function investorsCount() public constant returns( uint256 )\r\n    {\r\n        return investors.length;\r\n    }\r\n\r\n    function sendNow( uint256 _count ) public onlyOwner overSoftcap  returns( bool )\r\n    {\r\n        require( sendNowLastCount.add( _count ) <= investors.length );\r\n\r\n        uint256 to = sendNowLastCount.add( _count );\r\n\r\n        for( uint256 i = sendNowLastCount; i <= to - 1; i++ )\r\n            if( !inBlackList[investors[i]] ){\r\n                investorBalance[investors[i]] = 0;\r\n                bgxTokenInterface.distribute( investors[i], investorBalance[investors[i]] );\r\n            }\r\n\r\n        sendNowLastCount = sendNowLastCount.add( _count );\r\n    }\r\n\r\n\r\n    function blackListSwithcer( address _addr ) public onlyOwner returns( bool )\r\n    {\r\n        require( address(0) != _addr );\r\n\r\n        if( !inBlackList[_addr] ){\r\n            totalBGX = totalBGX.sub( investorBalance[_addr] );\r\n        } else {\r\n            totalBGX = totalBGX.add( investorBalance[_addr] );\r\n        }\r\n\r\n        inBlackList[_addr] = !inBlackList[_addr];\r\n\r\n    }\r\n\r\n\r\n    function finish( uint256 _count) public onlyOwner finishOrHardcap overSoftcap returns( bool )\r\n    {\r\n        require(_count > 0);\r\n        require(distributionDate > 0 && distributionDate <= now);\r\n        if (finishCurrentLimit == 0) {\r\n            finishCurrentLimit = bountyLimit.add(teamLimit.add(advisersLimit));\r\n        }\r\n        // advisers + bounters total cnt\r\n        uint256 totalCnt = adviser.length.add(bounty.length);\r\n\r\n        if (finishLastCount < adviser.length) {\r\n            for( uint256 i = finishLastCount; i <= adviser.length - 1; i++  ){\r\n                finishCurrentLimit = finishCurrentLimit.sub( adviserAmount[adviser[i]] );\r\n                bgxTokenInterface.distribute( adviser[i],adviserAmount[adviser[i]] );\r\n                finishLastCount++;\r\n                _count--;\r\n                if (_count <= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (finishLastCount < totalCnt) {\r\n            for( i = finishLastCount.sub(adviser.length); i <= bounty.length - 1; i++  ){\r\n                finishCurrentLimit = finishCurrentLimit.sub( bountyAmount[bounty[i]] );\r\n                bgxTokenInterface.distribute( bounty[i],bountyAmount[bounty[i]] );\r\n                finishLastCount ++;\r\n                _count--;\r\n                if (_count <= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (finishLastCount >= totalCnt && finishLastCount < totalCnt.add(team.length)) {\r\n            for( i =  finishLastCount.sub(totalCnt); i <= team.length - 1; i++  ){\r\n\r\n                finishCurrentLimit = finishCurrentLimit.sub( teamAmount[team[i]] );\r\n                bgxTokenInterface.distribute( team[i],teamAmount[team[i]] );\r\n                finishLastCount ++;\r\n                _count--;\r\n                if (_count <= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        reserved = reserved.add( finishCurrentLimit );\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function sendToTeam() public onlyOwner finishOrHardcap overSoftcap returns( bool )\r\n    {\r\n        bgxTokenInterface.distribute( bgxWallet, reserved );\r\n        bgxTokenInterface.finally( bgxWallet );\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setAdvisers( address[] _addrs, uint256[] _amounts ) public onlyOwner finishOrHardcap returns( bool )\r\n    {\r\n        require( _addrs.length == _amounts.length );\r\n\r\n        adviser = _addrs;\r\n        uint256 limit = 0;\r\n\r\n        for( uint256 i = 0; i <= adviser.length - 1; i++  ){\r\n            require( limit.add( _amounts[i] ) <= advisersLimit );\r\n            adviserAmount[adviser[i]] = _amounts[i];\r\n            limit.add( _amounts[i] );\r\n        }\r\n    }\r\n\r\n    function setBounty( address[] _addrs, uint256[] _amounts ) public onlyOwner finishOrHardcap returns( bool )\r\n    {\r\n        require( _addrs.length == _amounts.length );\r\n\r\n        bounty = _addrs;\r\n        uint256 limit = 0;\r\n\r\n        for( uint256 i = 0; i <= bounty.length - 1; i++  ){\r\n            require( limit.add( _amounts[i] ) <= bountyLimit );\r\n            bountyAmount[bounty[i]] = _amounts[i];\r\n            limit.add( _amounts[i] );\r\n        }\r\n    }\r\n\r\n    function setTeams( address[] _addrs, uint256[] _amounts ) public onlyOwner finishOrHardcap returns( bool )\r\n    {\r\n        require( _addrs.length == _amounts.length );\r\n\r\n        team = _addrs;\r\n        uint256 limit = 0;\r\n\r\n        for( uint256 i = 0; i <= team.length - 1; i++  ){\r\n            require( limit.add( _amounts[i] ) <= teamLimit );\r\n            teamAmount[team[i]] = _amounts[i];\r\n            limit.add( _amounts[i] );\r\n        }\r\n    }\r\n\r\n\r\n    function setBGXTokenInterface( address _BGXTokenAddress ) public onlyOwner returns( bool )\r\n    {\r\n        require( _BGXTokenAddress != address(0) );\r\n        bgxTokenInterface = BGXTokenInterface( _BGXTokenAddress );\r\n    }\r\n\r\n\r\n    function time() public constant returns(uint256 )\r\n    {\r\n        return now;\r\n    }\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleDateStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishCurrentLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setAdvisers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleHardcap\",\"type\":\"uint256\"},{\"name\":\"_softcap\",\"type\":\"uint256\"}],\"name\":\"setCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishLastCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleStart\",\"type\":\"uint256\"},{\"name\":\"_presaleFinish\",\"type\":\"uint256\"},{\"name\":\"_saleStart\",\"type\":\"uint256\"},{\"name\":\"_saleFinish\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseStateSwithcer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleDateStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blackListSwithcer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setTeams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDateFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inBlackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_BGXTokenAddress\",\"type\":\"address\"}],\"name\":\"setBGXTokenInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"sendNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBGX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleDateFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adviser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bgxWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"finish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setBgxWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendNowLastCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BGXCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c052a3b6f47c90659be5c761be8509078c72db8d30500af7207d7ed367e94b36"}]}