{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract CryptoGems {\r\n\r\n\r\n\t// Start of ERC20 Token standard\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\tuint256 constant private MAX_UINT256 = 2**256 - 1;\r\n\tstring public name = \"CryptoGem\";\r\n\tstring public symbol = \"GEM\";\r\n\tuint public decimals = 4;\r\n\tuint256 public totalSupply = 0;\r\n\r\n\tmapping (address => uint256) public balances;\r\n\tmapping (address => mapping (address => uint256)) public allowed;\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\t\tbalances[msg.sender] -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\tuint256 allowance = allowed[_from][msg.sender];\r\n\t\trequire(balances[_from] >= _value && allowance >= _value);\r\n\t\tbalances[_to] += _value;\r\n\t\tbalances[_from] -= _value;\r\n\t\tif (allowance < MAX_UINT256) {\r\n\t\t\tallowed[_from][msg.sender] -= _value;\r\n\t\t}\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}  \r\n\r\n\t// End of ERC20 Token standard\r\n\r\n\tevent Mint(address indexed to, uint256 amount);\r\n\tevent stateEvent(address indexed owner, uint256 id, uint64 state);\r\n\tevent TransferMiner(address indexed owner, address indexed to, uint256 id);\r\n\r\n\t// Structure of Miner //\r\n\tstruct Miner {\r\n\t\tuint256 id;\r\n\t\tstring name;\r\n\t\tuint64 workDuration;\r\n\t\tuint64 sleepDuration;\r\n\t\tuint64 difficulty;\r\n\r\n\t\tuint256 workBlock;\r\n\t\tuint256 sleepBlock;\r\n\r\n\t\tuint64 state;\r\n\t\tbytes32 hash;\r\n\t\taddress owner;\r\n\r\n\t\tbool onSale;\r\n\t\tuint256 salePrice;\r\n\r\n\t\tuint64 exp;\r\n\t}\r\n\t\r\n\tMiner[] public miners;\r\n\r\n\tuint256 public gemPerMiner = 0;\r\n\tuint256 public gemPerEther = 0;\r\n\tuint256 public etherPerMiner = 0;\r\n\tuint256 public etherPerSale = 0;\r\n\tbool public sale = true;\r\n\taddress public contractOwner;\r\n\r\n\r\n\tfunction CryptoGems() public {\r\n\t\tcontractOwner = msg.sender;\r\n\t\tgemPerEther = 10000 * (10**decimals);\r\n\t\tetherPerMiner = 0.5 ether;\r\n\t\tetherPerSale = 0.001 ether;\r\n\t\tgemPerMiner = 5000 * (10**decimals);\r\n\t\tsale = true;\r\n\t}\r\n\r\n\tmodifier onlyContractOwner() {\r\n\t\trequire(msg.sender == contractOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\t//    Actions Payable   //\r\n\tfunction buyGems() public payable { \r\n\t\trequire( sale == true );\r\n\t\trequire( msg.value > 0 );\r\n\t\tbalances[ msg.sender ] += (msg.value * gemPerEther)/(1 ether);\r\n\t\ttotalSupply += (msg.value * gemPerEther)/(1 ether);\r\n\t}\r\n\r\n\tfunction buyMinersWithEther(uint64 quantity) public payable {\r\n\t\trequire( sale == true );\r\n\t\trequire( quantity * etherPerMiner <= msg.value);\r\n\t\tfor(uint64 i=1;i<=quantity;i++) {\r\n\t\t\tcreateMiner();\r\n\t\t}\r\n\t}\r\n\tfunction buyMinersWithGem(uint64 quantity) public {\r\n\t\trequire( sale == true );\r\n\t\trequire( quantity * gemPerMiner <= balances[ msg.sender ]);\r\n\t\tbalances[ msg.sender ] -= quantity * gemPerMiner;\r\n\t\tbalances[ contractOwner ] += quantity * gemPerMiner;\r\n\r\n\t\temit Transfer(msg.sender, contractOwner, quantity * gemPerMiner);\r\n\r\n\r\n\t\tfor(uint64 i=1;i<=quantity;i++) {\r\n\t\t\tcreateMiner();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction createMiner() private {\r\n\t\tuint64 nonce = 1;\r\n\t\tMiner memory _miner = Miner({\r\n\t\t\tid: 0,\r\n\t\t\tname: \"\",\r\n\t\t\tworkDuration:  uint64(keccak256(miners.length, msg.sender, nonce++))%(3000-2000)+2000,\r\n\t\t\tsleepDuration: uint64(keccak256(miners.length, msg.sender, nonce))%(2200-1800)+1800,\r\n\t\t\tdifficulty: uint64(keccak256(miners.length, msg.sender, nonce))%(130-100)+100,\r\n\t\t\tworkBlock: 0,\r\n\t\t\tsleepBlock: 0,\r\n\t\t\tstate: 3,\r\n\t\t\thash: keccak256(miners.length, msg.sender),\r\n\t\t\towner: msg.sender,\r\n\t\t\tonSale: false,\r\n\t\t\tsalePrice: 0,\r\n\t\t\texp: 0\r\n\t\t});\r\n\t\tuint256 id = miners.push(_miner) - 1;\r\n\t\tminers[id].id = id;\r\n\t}\r\n\r\n\r\n\t//   Actions   //\r\n\tfunction goToWork(uint256 id) public {\r\n\t\trequire(msg.sender == miners[id].owner);\r\n\t\tuint64 state = minerState(id);\r\n\t\tminers[id].state = state;\r\n\t\tif(state == 3) {\r\n\t\t\t//init and ready states\r\n\t\t\tminers[id].workBlock = block.number;\r\n\t\t\tminers[id].state = 0;\r\n\t\t\temit stateEvent(miners[id].owner, id, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction goToSleep(uint256 id) public {\r\n\t\trequire(msg.sender == miners[id].owner);\r\n\t\tuint64 state = minerState(id);\r\n\t\tminers[id].state = state;\r\n\t\tif(state == 1) {\r\n\t\t\t//tired state\r\n\t\t\tminers[id].sleepBlock = block.number;\r\n\t\t\tminers[id].state = 2;\r\n\t\t\tuint64 curLvl = getMinerLevel(id);\r\n\t\t\tminers[id].exp = miners[id].exp + miners[id].workDuration;\r\n\t\t\tuint64 lvl = getMinerLevel(id);\r\n\r\n\t\t\tuint256 gemsMined = (10**decimals)*miners[id].workDuration / miners[id].difficulty;\r\n\t\t\tbalances[ msg.sender ] += gemsMined;\r\n\t\t\ttotalSupply += gemsMined;\r\n\r\n\r\n\t\t\tif(curLvl < lvl) {\r\n\t\t\t\tminers[id].difficulty = miners[id].difficulty - 2;\r\n\t\t\t}\r\n\t\t\temit stateEvent(miners[id].owner, id, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setOnSale(uint256 id, bool _onSale, uint256 _salePrice) public payable { \r\n\t\trequire( msg.value >= etherPerSale );\r\n\t\trequire( msg.sender == miners[id].owner);\r\n\t\trequire( _salePrice >= 0 );\r\n\r\n\t\tminers[id].onSale = _onSale;\r\n\t\tminers[id].salePrice = _salePrice;\r\n\t\r\n\t}\r\n\r\n\tfunction buyMinerFromSale(uint256 id) public {\r\n\t\trequire(msg.sender != miners[id].owner);\r\n\t\trequire(miners[id].onSale == true);\r\n\t\trequire(balances[msg.sender] >= miners[id].salePrice);\r\n\t\ttransfer(miners[id].owner, miners[id].salePrice);\r\n\r\n\t\temit TransferMiner(miners[id].owner, msg.sender, id);\r\n\t\tminers[id].owner = msg.sender;\r\n\r\n\t\tminers[id].onSale = false;\r\n\t\tminers[id].salePrice = 0;\r\n\t}\r\n\r\n\tfunction transferMiner(address to, uint256 id) public returns (bool success) {\r\n\t\trequire(miners[id].owner == msg.sender);\r\n\t\tminers[id].owner = to;\r\n\t\temit TransferMiner(msg.sender, to, id);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction nameMiner(uint256 id, string _name) public returns (bool success) {\r\n\t\trequire(msg.sender == miners[id].owner);\r\n\t\tbytes memory b = bytes(miners[id].name ); // Uses memory\r\n\t\tif (b.length == 0) {\r\n\t\t\tminers[id].name = _name;\r\n\t\t} else return false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//   Calls   //\r\n\tfunction getMinersByAddress(address _address) public constant returns(uint256[]) {\r\n\t\tuint256[] memory m = new uint256[](miners.length);\r\n\t\tuint256 cnt = 0;\r\n\t\tfor(uint256 i=0;i<miners.length;i++) {\r\n\t\t\tif(miners[i].owner == _address) {\r\n\t\t\t\tm[cnt++] = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint256[] memory ret = new uint256[](cnt);\r\n\t\tfor(i=0;i<cnt;i++) {\r\n\t\t\tret[i] = m[i];\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tfunction getMinersOnSale() public constant returns(uint256[]) {\r\n\t\tuint256[] memory m = new uint256[](miners.length);\r\n\t\tuint256 cnt = 0;\r\n\t\tfor(uint256 i=0;i<miners.length;i++) {\r\n\t\t\tif(miners[i].onSale == true) {\r\n\t\t\t\tm[cnt++] = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint256[] memory ret = new uint256[](cnt);\r\n\t\tfor(i=0;i<cnt;i++) {\r\n\t\t\tret[i] = m[i];\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tfunction minerState(uint256 id) public constant returns (uint64) {\r\n\t\t// require(msg.sender == miners[id].owner);\r\n\r\n\t\t//working\r\n\t\tif(miners[id].workBlock !=0 && block.number - miners[id].workBlock <= miners[id].workDuration) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t//sleeping\r\n\t\tif(miners[id].sleepBlock !=0 && block.number - miners[id].sleepBlock <= miners[id].sleepDuration) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//tired\r\n\t\tif(miners[id].workBlock !=0 && block.number - miners[id].workBlock > miners[id].workDuration && miners[id].workBlock > miners[id].sleepBlock) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t//ready\r\n\t\tif(miners[id].sleepBlock !=0 && block.number - miners[id].sleepBlock > miners[id].sleepDuration && miners[id].sleepBlock > miners[id].workBlock) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\treturn 3;\r\n\t}\r\n\r\n\tfunction getMinerLevel(uint256 id)  public constant returns (uint8){\r\n\t\tuint256 exp = miners[id].exp;\r\n\t\tif(exp < 15000) return 1;\r\n\t\tif(exp < 35000) return 2;\r\n\t\tif(exp < 60000) return 3;\r\n\t\tif(exp < 90000) return 4;\r\n\t\tif(exp < 125000) return 5;\r\n\t\tif(exp < 165000) return 6;\r\n\t\tif(exp < 210000) return 7;\r\n\t\tif(exp < 260000) return 8;\r\n\t\tif(exp < 315000) return 9;\r\n\t\treturn 10;\r\n\t}\r\n\t\r\n\r\n\r\n\t//   Admin Only   //\r\n\tfunction withdrawEther(address _sendTo, uint256 _amount) onlyContractOwner public returns(bool) {\r\n\t    \r\n        address CryptoGemsContract = this;\r\n\t\tif (_amount > CryptoGemsContract.balance) {\r\n\t\t\t_sendTo.transfer(CryptoGemsContract.balance);\r\n\t\t} else {\r\n\t\t\t_sendTo.transfer(_amount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tfunction changeContractOwner(address _contractOwner) onlyContractOwner public {\r\n\t\tcontractOwner = _contractOwner;\r\n\t}\r\n\tfunction setMinerPrice(uint256 _amount) onlyContractOwner public returns(bool) {\r\n\t\tetherPerMiner = _amount;\r\n\t\treturn true;\r\n\t}\r\n\tfunction setGemPerMiner(uint256 _amount) onlyContractOwner public returns(bool) {\r\n\t\tgemPerMiner = _amount;\r\n\t\treturn true;\r\n\t}\r\n\tfunction setSale(bool _sale) onlyContractOwner public returns(bool) {\r\n\t\tsale = _sale;\r\n\t\treturn true;\r\n\t}\r\n\tfunction setGemPrice(uint256 _amount) onlyContractOwner public returns(bool) {\r\n\t\tgemPerEther = _amount;\r\n\t\treturn true;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"minerState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"bool\"}],\"name\":\"setSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyMinerFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGemPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMinerLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinersOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractOwner\",\"type\":\"address\"}],\"name\":\"changeContractOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMinersByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gemPerMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPerSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyGems\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"nameMiner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gemPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPerMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGemPerMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint64\"}],\"name\":\"buyMinersWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"goToWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miners\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"workDuration\",\"type\":\"uint64\"},{\"name\":\"sleepDuration\",\"type\":\"uint64\"},{\"name\":\"difficulty\",\"type\":\"uint64\"},{\"name\":\"workBlock\",\"type\":\"uint256\"},{\"name\":\"sleepBlock\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint64\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"onSale\",\"type\":\"bool\"},{\"name\":\"salePrice\",\"type\":\"uint256\"},{\"name\":\"exp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferMiner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint64\"}],\"name\":\"buyMinersWithGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"_onSale\",\"type\":\"bool\"},{\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setOnSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"goToSleep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint64\"}],\"name\":\"stateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TransferMiner\",\"type\":\"event\"}]","ContractName":"CryptoGems","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7606b8fa900a782c3a94458a9add5c840e08b2bdb9e1d6d30dc8ecd454bbbb63"}]}