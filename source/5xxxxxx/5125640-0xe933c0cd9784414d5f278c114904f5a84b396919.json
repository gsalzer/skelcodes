{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n\r\ncontract WhoVote {\r\n\r\n    mapping (address => bytes32) public voteHash;\r\n    address public parentContract;\r\n    uint public deadline;\r\n\r\n    modifier isActive {\r\n        require(now < deadline);\r\n        _;\r\n    }\r\n\r\n    modifier isParent {\r\n        require(msg.sender == parentContract);\r\n        _;\r\n    }\r\n\r\n    function WhoVote(address _parentContract, uint timespan) public {\r\n        parentContract = _parentContract;\r\n        deadline = now + timespan;\r\n    }\r\n\r\n    /**\r\n    * @dev Recieve Vote from Who-Token-Contract\r\n    * @param _sender Contest-participant\r\n    * @param _hash Hash of the JSON-Parameter\r\n    */\r\n    function recieveVote(address _sender, bytes32 _hash) public isActive isParent returns (bool) {\r\n        require(voteHash[_sender] == 0);\r\n        voteHash[_sender] = _hash;\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Interface {\r\n    function circulatingSupply() public view returns (uint);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    event TransferEvent(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract StandardToken is ERC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    uint public maxSupply;\r\n    uint public totalSupply;\r\n    uint public timestampMint;\r\n    uint public timestampRelease;\r\n    uint8 public decimals;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n\r\n    address public owner;\r\n\r\n    bool public stopped;\r\n\r\n    mapping(address => uint) public balanceOf;\r\n    mapping (address => uint) public permissonedAccounts;\r\n\r\n    /**\r\n    * @dev Checks if last mint is 3 weeks in past\r\n    */\r\n    modifier onlyAfter() {\r\n        require(now >= timestampMint + 3 weeks);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if last mint is 3 weeks in past\r\n    */\r\n    modifier isActive() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if account has staff-level\r\n    */\r\n    modifier hasPermission(uint _level) {\r\n        require(permissonedAccounts[msg.sender] > 0);\r\n        require(permissonedAccounts[msg.sender] <= _level);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function circulatingSupply() public view returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets balance of address\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Token-transfer from msg.sender to address\r\n    * @param _to target-address\r\n    * @param _value amount of WHO transfered\r\n    */\r\n    function transfer(address _to, uint _value) public isActive returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balanceOf[msg.sender]);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        TransferEvent(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title The Who-Token by WhoHas v1.2\r\n * @author Felix Leber, Christian Siegert\r\n * @dev Special version of the ERC20 Token\r\n */\r\ncontract Who is StandardToken {\r\n\r\n    mapping (address => uint) public votings_;\r\n    mapping (address => uint8) public icoAccounts;\r\n    address public prizePool;\r\n    uint public icoPool;\r\n    uint public raisedIcoValue;\r\n    uint public maxMint;\r\n\r\n\r\n    event WinningEvent(address[] winner, address contest, uint payoutValue);\r\n    event VotingStarted(address _voting, uint _duration, uint _costPerVote);\r\n    event ParticipatedInVoting(address _sender, address _votingContract, bytes32 _hash, uint _voteAmount);\r\n\r\n    modifier icoPhase() {\r\n        require(now >= timestampRelease);\r\n        require(now <= 3 weeks + timestampRelease);\r\n        require(msg.value >= 2*(10**16));\r\n        _;\r\n\r\n    }\r\n\r\n    function Who() public {\r\n        owner = 0x4c556b28A7D62D3b7A84481521308fbb9687f38F;\r\n\r\n        name = \"WhoHas\";\r\n        symbol = \"WHO\";\r\n        decimals = 18;\r\n\r\n        permissonedAccounts[owner] = 1;\r\n        permissonedAccounts[0x3090Ee894719222DCE4d231d735741B2d44f30ba] = 1;\r\n        timestampRelease = now + 6 hours + 40 minutes;\r\n\r\n        balanceOf[owner] = 150000000*(10**18); //150 Millionen\r\n        icoPool = 100000000*(10**18); //100 Millionen\r\n        maxSupply = 1500000000*(10**18); //1,5 Billion\r\n        maxMint = 150000*(10**18); //150 k\r\n        totalSupply = totalSupply.add(balanceOf[owner]); //250 Million\r\n\r\n        stopped = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Buy option during ICO, payable\r\n    * @notice Please make sure that ICO Pool is at least equal to your bid\r\n    */\r\n    function icoBuy() public icoPhase() payable isActive {\r\n        prizePool.transfer(msg.value);\r\n        raisedIcoValue = raisedIcoValue.add(msg.value);\r\n        uint256 tokenAmount = calculateTokenAmountICO(msg.value);\r\n\r\n        require(icoPool >= tokenAmount);\r\n\r\n        icoPool = icoPool.sub(tokenAmount);\r\n        balanceOf[msg.sender] += tokenAmount;\r\n        TransferEvent(prizePool, msg.sender, tokenAmount);\r\n        totalSupply = totalSupply.add(tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculation of Token Ratio in ICO\r\n    * @param _etherAmount Amount in Ether in order to be spent on WHO Token\r\n    */\r\n    function calculateTokenAmountICO(uint256 _etherAmount) public icoPhase constant returns(uint256) {\r\n          // ICO standard rate: 1 ETH : 3315 WHO - 0,20 Euro\r\n          // ICO Phase 1:   1 ETH : 4420 WHO - 0,15 Euro\r\n        if (now <= 10 days + timestampRelease) {\r\n            require(icoAccounts[msg.sender] == 1);\r\n            return _etherAmount.mul(4420);\r\n        } else {\r\n            require(icoAccounts[msg.sender] == 2);\r\n            return _etherAmount.mul(3315);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set/Unset address as permissioned\r\n    */\r\n    function killToken() public isActive hasPermission(1) {\r\n        stopped = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set/Unset address as permissioned\r\n    * @param _account The address to give/take away the permissiones.\r\n    * @param _level Permission-Level: 7:none, 1: owner, 2: admin, 3: pyFactory\r\n    */\r\n    function updatePermissions(address _account, uint _level) public isActive hasPermission(1) {\r\n        require(_level != 1 && msg.sender != _account);\r\n        permissonedAccounts[_account] = _level;\r\n    }\r\n\r\n    /**\r\n    * @dev Update Address recieving & distributing tokens in votings\r\n    * @param _account Address of the new prize Pool\r\n    */\r\n    function updatePrizePool(address _account) public isActive hasPermission(1) {\r\n        prizePool = _account;\r\n    }\r\n\r\n    /**\r\n    * @dev Increases totalSupply by specified amount. Available every three weeks until maxSupply is reached.\r\n    * @param _mintAmount Amount of increase, must be smaller than 100000000\r\n    */\r\n    function mint(uint _mintAmount) public onlyAfter isActive hasPermission(2) {\r\n        require(_mintAmount <= maxMint);\r\n        require(totalSupply + _mintAmount <= maxSupply);\r\n        balanceOf[owner] = balanceOf[owner].add(_mintAmount);\r\n        totalSupply = totalSupply.add(_mintAmount);\r\n        timestampMint = now;\r\n    }\r\n\r\n    function registerForICO(address[] _icoAddresses, uint8 _level) public isActive hasPermission(3) {\r\n        for (uint i = 0; i < _icoAddresses.length; i++) {\r\n            icoAccounts[_icoAddresses[i]] = _level;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Manually add an existing WhoVote contract\r\n    * @param _timespan Amount of time the contract is valid\r\n    * @param _votePrice Price in Who(x10^18) per Vote\r\n    */\r\n    function gernerateVoting(uint _timespan, uint _votePrice) public isActive hasPermission(3) {\r\n        require(_votePrice > 0 && _timespan > 0);\r\n        address generatedVoting = new WhoVote(this, _timespan);\r\n        votings_[generatedVoting] = _votePrice;\r\n        VotingStarted(generatedVoting, _timespan, _votePrice);\r\n    }\r\n\r\n    /**\r\n    * @dev Manually add an existing WhoVote contract\r\n    * @param _votingContract Adress of Voting-Contrac\r\n    * @param _votePrice Price in Who(x10^18) per Vote\r\n    */\r\n    function addVoting(address _votingContract, uint _votePrice) public isActive hasPermission(3) {\r\n        votings_[_votingContract] = _votePrice;\r\n    }\r\n\r\n    /**\r\n    * @dev Disable voting\r\n    * @param _votingContract Adress of Voting-Contract\r\n    */\r\n    function finalizeVoting(address _votingContract) public isActive hasPermission(3) {\r\n        votings_[_votingContract] = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev PyFactory payout of winner\r\n    * @param _winner Account which paricipated in the voting\r\n    * @param _payoutValue Amount of Who payed to the winning account\r\n    * @param _votingAddress Address of the Voting-Contract\r\n    */\r\n    function payout(address[] _winner, uint _payoutValue, address _votingAddress) public isActive hasPermission(3) {\r\n        for (uint i = 0; i < _winner.length; i++) {\r\n            transfer(_winner[i], _payoutValue);\r\n        }\r\n        WinningEvent(_winner, _votingAddress, _payoutValue);\r\n    }\r\n\r\n    /**\r\n    * @dev Participating in a Voting\r\n    * @param _votingContract Adress of Voting-Contract\r\n    * @param _hash Hash of the JSON-Parameter\r\n    * @param _quantity Quantity of Votes\r\n    */\r\n    function payForVote(address _votingContract, bytes32 _hash, uint _quantity) public isActive {\r\n        require(_quantity >= 1 && _quantity <= 5);\r\n        uint votePrice = votings_[_votingContract];\r\n        require(votePrice > 0);\r\n        transfer(prizePool, _quantity.mul(votePrice));\r\n        sendVote(_votingContract, msg.sender, _hash);\r\n        ParticipatedInVoting(msg.sender, _votingContract, _hash, _quantity);\r\n    }\r\n\r\n    /**\r\n    * @dev [Internal] Send vote to Voting-Contract\r\n    * @param _contract Address of Voting-Contract\r\n    * @param _sender Sender of Votes\r\n    * @param _hash Hash of the JSON-Parameter\r\n    */\r\n    function sendVote(address _contract, address _sender, bytes32 _hash) private returns (bool) {\r\n        return WhoVote(_contract).recieveVote(_sender, _hash);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address[]\"},{\"name\":\"_payoutValue\",\"type\":\"uint256\"},{\"name\":\"_votingAddress\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmountICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestampRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votingContract\",\"type\":\"address\"},{\"name\":\"_votePrice\",\"type\":\"uint256\"}],\"name\":\"addVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votings_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestampMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timespan\",\"type\":\"uint256\"},{\"name\":\"_votePrice\",\"type\":\"uint256\"}],\"name\":\"gernerateVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissonedAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votingContract\",\"type\":\"address\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"payForVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votingContract\",\"type\":\"address\"}],\"name\":\"finalizeVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedIcoValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"updatePermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updatePrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddresses\",\"type\":\"address[]\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"registerForICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"contest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payoutValue\",\"type\":\"uint256\"}],\"name\":\"WinningEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_voting\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_costPerVote\",\"type\":\"uint256\"}],\"name\":\"VotingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_votingContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_voteAmount\",\"type\":\"uint256\"}],\"name\":\"ParticipatedInVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"}]","ContractName":"Who","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5805591b9b99773ea276869b97c3343f850f5c10b4786d4d66e24b14f8b54421"}]}