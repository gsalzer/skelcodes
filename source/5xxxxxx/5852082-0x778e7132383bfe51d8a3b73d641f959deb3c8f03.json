{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n *      Supports unlimited numbers of roles and addresses.\r\n *      See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * A constant role name for indicating admins.\r\n   */\r\n  string public constant ROLE_ADMIN = \"admin\";\r\n\r\n  /**\r\n   * @dev constructor. Sets msg.sender as admin by default\r\n   */\r\n  function RBAC()\r\n    public\r\n  {\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminAddRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    addRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminRemoveRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    removeRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PausableToken.sol\r\n\r\ncontract PausableToken is StandardToken, Pausable, RBAC {\r\n\r\n    string public constant ROLE_ADMINISTRATOR = \"administrator\";\r\n\r\n    modifier whenNotPausedOrAuthorized() {\r\n        require(!paused || hasRole(msg.sender, ROLE_ADMINISTRATOR));\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Add an address that can administer the token even when paused.\r\n     * @param _administrator Address of the given administrator.\r\n     * @return True if the administrator has been added, false if the address was already an administrator.\r\n     */\r\n    function addAdministrator(address _administrator) onlyOwner public returns (bool) {\r\n        if (isAdministrator(_administrator)) {\r\n            return false;\r\n        } else {\r\n            addRole(_administrator, ROLE_ADMINISTRATOR);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an administrator.\r\n     * @param _administrator Address of the administrator to be removed.\r\n     * @return True if the administrator has been removed,\r\n     *  false if the address wasn't an administrator in the first place.\r\n     */\r\n    function removeAdministrator(address _administrator) onlyOwner public returns (bool) {\r\n        if (isAdministrator(_administrator)) {\r\n            removeRole(_administrator, ROLE_ADMINISTRATOR);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determine if address is an administrator.\r\n     * @param _administrator Address of the administrator to be checked.\r\n     */\r\n    function isAdministrator(address _administrator) public view returns (bool) {\r\n        return hasRole(_administrator, ROLE_ADMINISTRATOR);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address with pause feature for administrator.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public whenNotPausedOrAuthorized returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another with pause feature for administrator.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrAuthorized returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/CurrentToken.sol\r\n\r\ncontract CurrentToken is PausableToken {\r\n    string constant public name = \"CurrentCoin\";\r\n    string constant public symbol = \"CUR\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e11 * (uint256(10) ** decimals);\r\n\r\n    /**\r\n    * @dev Create CurrentToken contract and set pause\r\n    */\r\n    function CurrentToken() public {\r\n        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\r\n        balances[msg.sender] = totalSupply_;\r\n        Transfer(address(0), msg.sender, totalSupply_);\r\n\r\n        pause();\r\n    }\r\n}\r\n\r\n// File: contracts/VariableTimeBonusRate.sol\r\n\r\n/**\r\n * @title VariableTimeRate\r\n * @dev Contract with time dependent token distribution rate variable.\r\n */\r\ncontract VariableTimeBonusRate {\r\n    using SafeMath for uint256;\r\n\r\n    // Struct specifying the stages of rate modification.\r\n    struct RateModifier {\r\n        // Percentage by which the rate should be modified.\r\n        uint256 ratePermilles;\r\n\r\n        // start time for a given rate\r\n        uint256 start;\r\n    }\r\n\r\n    RateModifier[] private modifiers;\r\n\r\n    /**\r\n     * @dev Finds currently applicable rate modifier.\r\n     * @return Current rate modifier percentage.\r\n     */\r\n    function currentModifier() public view returns (uint256 rateModifier) {\r\n        // solium-disable-next-line security/no-block-members\r\n        uint256 comparisonVariable = now;\r\n        for (uint i = 0; i < modifiers.length; i++) {\r\n            if (comparisonVariable >= modifiers[i].start) {\r\n                rateModifier = modifiers[i].ratePermilles;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRateModifierInPermilles() public view returns (uint256) {\r\n        return currentModifier();\r\n    }\r\n\r\n    /**\r\n     * @dev Adds rate modifier checking not to add one with a start smaller than the previous.\r\n     * @param _rateModifier RateModifier struct.\r\n     */\r\n    function pushModifier(RateModifier _rateModifier) internal {\r\n        require(modifiers.length == 0 || _rateModifier.start > modifiers[modifiers.length - 1].start);\r\n        modifiers.push(_rateModifier);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenRate.sol\r\n\r\ncontract TokenRate is VariableTimeBonusRate {\r\n\r\n    uint256 constant public REFERRED_BONUS_PERMILLE  = 5;\r\n    uint256 constant public REFERRAL_BONUS_PERMILLE = 50;\r\n\r\n    uint256 public rate;\r\n\r\n    function TokenRate(uint256 _rate) public {\r\n        rate = _rate;\r\n    }\r\n\r\n    function getCurrentBuyerRateInPermilles(bool isReferred) view public returns (uint256) {\r\n        uint256 permillesRate = VariableTimeBonusRate.getRateModifierInPermilles();\r\n        if (isReferred) {\r\n            permillesRate = permillesRate.add(REFERRED_BONUS_PERMILLE);\r\n        }\r\n        return permillesRate.add(1000);\r\n    }\r\n\r\n    /**\r\n     * @dev amount for given wei calculation based on rate modifier percentage.\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmountForBuyer(uint256 _weiAmount, bool isReferred) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate).mul(getCurrentBuyerRateInPermilles(isReferred)).div(1000);\r\n    }\r\n\r\n    function _getTokenAmountForReferral(uint256 _weiAmount, bool isReferred) internal view returns (uint256) {\r\n        if (isReferred) {\r\n            return _weiAmount.mul(rate).mul(REFERRAL_BONUS_PERMILLE).div(1000);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev amount of wei to pay for tokens - calculation based on rate modifier percentage.\r\n     * @param _tokensLeft Value in tokens to be converted into wei\r\n     * @return Number of wei that you must pay (bonus rate is taken into account)\r\n     */\r\n    function _getWeiValueOfTokens(uint256 _tokensLeft, bool isReferred) internal view returns (uint256) {\r\n        uint256 permillesRate = getCurrentBuyerRateInPermilles(isReferred);\r\n        if (isReferred) {\r\n            permillesRate = permillesRate.add(REFERRAL_BONUS_PERMILLE);\r\n        }\r\n        uint256 tokensToBuy = _tokensLeft.mul(1000).div(permillesRate);\r\n        return tokensToBuy.div(rate);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist contract\r\n * @dev Whitelist for wallets.\r\n*/\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n\r\n    uint256 public whitelistLength = 0;\r\n\r\n    /**\r\n    * @dev Add wallet to whitelist.\r\n    * @dev Accept request from the owner only.\r\n    * @param _wallet The address of wallet to add.\r\n    */  \r\n    function addWallet(address _wallet) onlyOwner public {\r\n        require(_wallet != address(0));\r\n        require(!isWhitelisted(_wallet));\r\n        whitelist[_wallet] = true;\r\n        whitelistLength++;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove wallet from whitelist.\r\n    * @dev Accept request from the owner only.\r\n    * @param _wallet The address of whitelisted wallet to remove.\r\n    */  \r\n    function removeWallet(address _wallet) onlyOwner public {\r\n        require(_wallet != address(0));\r\n        require(isWhitelisted(_wallet));\r\n        whitelist[_wallet] = false;\r\n        whitelistLength--;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the specified wallet whether it is in the whitelist.\r\n    * @param _wallet The address of wallet to check.\r\n    */ \r\n    function isWhitelisted(address _wallet) constant public returns (bool) {\r\n        return whitelist[_wallet];\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/CurrentCrowdsale.sol\r\n\r\ncontract CurrentCrowdsale is Pausable, TokenRate {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant private DECIMALS = 18;\r\n    uint256 constant public HARDCAP_TOKENS_PRE_ICO = 100e6 * (10 ** DECIMALS);\r\n    uint256 constant public HARDCAP_TOKENS_ICO = 499e8 * (10 ** DECIMALS);\r\n\r\n    uint256 public startPhase1 = 0;\r\n    uint256 public startPhase2 = 0;\r\n    uint256 public startPhase3 = 0;\r\n    uint256 public endOfPhase3 = 0;\r\n\r\n    uint256 public maxcap = 0;\r\n\r\n    uint256 public tokensSoldIco = 0;\r\n    uint256 public tokensRemainingIco = HARDCAP_TOKENS_ICO;\r\n    uint256 public tokensSoldTotal = 0;\r\n\r\n    uint256 public weiRaisedIco = 0;\r\n    uint256 public weiRaisedTotal = 0;\r\n\r\n    address private withdrawalWallet;\r\n\r\n    CurrentToken public token;\r\n    Whitelist public whitelist;\r\n\r\n    modifier beforeReachingHardCap() {\r\n        require(tokensRemainingIco > 0 && weiRaisedIco < maxcap);\r\n        _;\r\n    }\r\n\r\n    modifier whenWhitelisted(address _wallet) {\r\n        require(whitelist.isWhitelisted(_wallet));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor for CurrentCrowdsale contract.\r\n    * @dev Set the owner who can manage whitelist and token.\r\n    * @param _maxcap The maxcap value.\r\n    * @param _startPhase1 The phase1 ICO start time.\r\n    * @param _startPhase2 The phase2 ICO start time.\r\n    * @param _startPhase3 The phase3 ICO start time.\r\n    * @param _endOfPhase3 The end time of ICO.\r\n    * @param _withdrawalWallet The address to which raised funds will be withdrawn.\r\n    * @param _rate exchange rate for ico.\r\n    * @param _token address of token used for ico.\r\n    * @param _whitelist address of whitelist contract used for ico.\r\n    */\r\n    function CurrentCrowdsale(\r\n        uint256 _maxcap,\r\n        uint256 _startPhase1,\r\n        uint256 _startPhase2,\r\n        uint256 _startPhase3,\r\n        uint256 _endOfPhase3,\r\n        address _withdrawalWallet,\r\n        uint256 _rate,\r\n        CurrentToken _token,\r\n        Whitelist _whitelist\r\n    )  TokenRate(_rate) public\r\n    {\r\n        require(_withdrawalWallet != address(0));\r\n        require(_token != address(0) && _whitelist != address(0));\r\n        require(_startPhase1 >= now);\r\n        require(_endOfPhase3 > _startPhase3);\r\n        require(_maxcap > 0);\r\n\r\n        token = _token;\r\n        whitelist = _whitelist;\r\n\r\n        startPhase1 = _startPhase1;\r\n        startPhase2 = _startPhase2;\r\n        startPhase3 = _startPhase3;\r\n        endOfPhase3 = _endOfPhase3;\r\n\r\n        withdrawalWallet = _withdrawalWallet;\r\n\r\n        maxcap = _maxcap;\r\n        tokensSoldTotal = HARDCAP_TOKENS_PRE_ICO;\r\n        weiRaisedTotal = tokensSoldTotal.div(_rate.mul(2));\r\n\r\n        pushModifier(RateModifier(200, startPhase1));\r\n        pushModifier(RateModifier(150, startPhase2));\r\n        pushModifier(RateModifier(100, startPhase3));\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function can be used to buy tokens.\r\n    */\r\n    function() public payable {\r\n        if (isIco()) {\r\n            sellTokensIco();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether the ICO is active at the moment.\r\n    */\r\n    function isIco() public constant returns (bool) {\r\n        return now >= startPhase1 && now <= endOfPhase3;\r\n    }\r\n\r\n    function sellTokensIco() beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\r\n        sellTokens(address(0));\r\n    }\r\n\r\n    function sellTokensIcoWithReferal(address referral) beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\r\n        if (referral != msg.sender && whitelist.isWhitelisted(referral)) {\r\n            sellTokens(referral);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Manual send tokens to the specified address.\r\n    * @param _beneficiary The address of a investor.\r\n    * @param _tokensAmount Amount of tokens.\r\n    */\r\n    function manualSendTokens(address _beneficiary, uint256 _tokensAmount) public  onlyOwner {\r\n        require(_beneficiary != address(0));\r\n        require(_tokensAmount > 0);\r\n\r\n        token.transfer(_beneficiary, _tokensAmount);\r\n        tokensSoldIco = tokensSoldIco.add(_tokensAmount);\r\n        tokensSoldTotal = tokensSoldTotal.add(_tokensAmount);\r\n        tokensRemainingIco = tokensRemainingIco.sub(_tokensAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Sell tokens during ICO with referral.\r\n    */\r\n    function sellTokens(address referral) beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused internal {\r\n        require(isIco());\r\n        require(msg.value > 0);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 excessiveFunds = 0;\r\n\r\n        uint256 plannedWeiTotal = weiRaisedIco.add(weiAmount);\r\n\r\n        if (plannedWeiTotal > maxcap) {\r\n            excessiveFunds = plannedWeiTotal.sub(maxcap);\r\n            weiAmount = maxcap.sub(weiRaisedIco);\r\n        }\r\n        bool isReferred = referral != address(0);\r\n        uint256 tokensForUser = _getTokenAmountForBuyer(weiAmount, isReferred);\r\n        uint256 tokensForReferral = _getTokenAmountForReferral(weiAmount, isReferred);\r\n        uint256 tokensAmount = tokensForUser.add(tokensForReferral);\r\n\r\n        if (tokensAmount > tokensRemainingIco) {\r\n            uint256 weiToAccept = _getWeiValueOfTokens(tokensRemainingIco, isReferred);\r\n            tokensForReferral = _getTokenAmountForReferral(weiToAccept, isReferred);\r\n            tokensForUser = tokensRemainingIco.sub(tokensForReferral);\r\n            excessiveFunds = excessiveFunds.add(weiAmount.sub(weiToAccept));\r\n\r\n            tokensAmount = tokensRemainingIco;\r\n            weiAmount = weiToAccept;\r\n        }\r\n\r\n        tokensSoldIco = tokensSoldIco.add(tokensAmount);\r\n        tokensSoldTotal = tokensSoldTotal.add(tokensAmount);\r\n        tokensRemainingIco = tokensRemainingIco.sub(tokensAmount);\r\n\r\n        weiRaisedIco = weiRaisedIco.add(weiAmount);\r\n        weiRaisedTotal = weiRaisedTotal.add(weiAmount);\r\n\r\n        token.transfer(msg.sender, tokensForUser);\r\n        if (isReferred) {\r\n            token.transfer(referral, tokensForReferral);\r\n        }\r\n\r\n        if (excessiveFunds > 0) {\r\n            msg.sender.transfer(excessiveFunds);\r\n        }\r\n\r\n        withdrawalWallet.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getRateModifierInPermilles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"manualSendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP_TOKENS_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP_TOKENS_PRE_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentModifier\",\"outputs\":[{\"name\":\"rateModifier\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_BONUS_PERMILLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPhase3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTokensIco\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"sellTokensIcoWithReferal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfPhase3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRED_BONUS_PERMILLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isReferred\",\"type\":\"bool\"}],\"name\":\"getCurrentBuyerRateInPermilles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxcap\",\"type\":\"uint256\"},{\"name\":\"_startPhase1\",\"type\":\"uint256\"},{\"name\":\"_startPhase2\",\"type\":\"uint256\"},{\"name\":\"_startPhase3\",\"type\":\"uint256\"},{\"name\":\"_endOfPhase3\",\"type\":\"uint256\"},{\"name\":\"_withdrawalWallet\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CurrentCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000000000000000005b318200000000000000000000000000000000000000000000000000000000005b5a6080000000000000000000000000000000000000000000000000000000005b849080000000000000000000000000000000000000000000000000000000005badd16f0000000000000000000000003973fd4d3335d0e25a39e1eb30686609c57fa48c00000000000000000000000000000000000000000000000000000000000021fe000000000000000000000000347a29ea126a746c70e1ead570fddf438e66231a00000000000000000000000087732cc52c379b8e27819ab5d0ef632f2c92a36d","Library":"","SwarmSource":"bzzr://69f0797bf871f56f74bf43c4b4a5e008b055e14afab1758d5b57ce67c4533b67"}]}