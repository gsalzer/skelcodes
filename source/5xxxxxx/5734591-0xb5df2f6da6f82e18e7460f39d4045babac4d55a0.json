{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n    /// @return total amount of tokens\r\n    uint public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract BDToken is ERC20 {\r\n    using SafeMath for uint;\r\n\t\r\n    uint constant private MAX_UINT256 = 2**256 - 1;\r\n\tuint8 constant public decimals = 18;\r\n    string public name;\r\n    string public symbol;\r\n\taddress public owner;\r\n\t// True if transfers are allowed\r\n\tbool public transferable = true;\r\n    /* This creates an array with all balances */\r\n\tmapping (address => uint) freezes;\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);//\"Only owner can call this function.\"\r\n        _;\r\n    }\r\n\t\r\n\tmodifier canTransfer() {\r\n\t\trequire(transferable == true);\r\n\t\t_;\r\n\t}\r\n\t\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint value);\r\n\t/* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint value);\r\n\t/* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function BDToken() public {\r\n\t\ttotalSupply = 100*10**26; // Update total supply with the decimal amount\r\n\t\tname = \"BaoDe Token\";\r\n\t\tsymbol = \"BDT\";\r\n\t\tbalances[msg.sender] = totalSupply; // Give the creator all initial tokens\r\n\t\towner = msg.sender;\r\n\t\temit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint _value) public canTransfer returns (bool success) {\r\n\t\trequire(_to != address(0));// Prevent transfer to 0x0 address.\r\n\t\trequire(_value > 0);\r\n        require(balances[msg.sender] >= _value); // Check if the sender has enough\r\n        require(balances[_to] + _value >= balances[_to]); // Check for overflows\r\n\t\t\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value);  // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);   // Notify anyone listening that this transfer took place\r\n\t\treturn true;\r\n    }\r\n\r\n\t/* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint _value) public canTransfer returns (bool success) {\r\n        uint allowance = allowed[_from][msg.sender];\r\n\t\trequire(_to != address(0));// Prevent transfer to 0x0 address.\r\n\t\trequire(_value > 0);\r\n\t\trequire(balances[_from] >= _value); // Check if the sender has enough\r\n\t\trequire(allowance >= _value); // Check allowance\r\n        require(balances[_to] + _value >= balances[_to]); // Check for overflows     \r\n        \r\n        balances[_from] = balances[_from].sub(_value);      // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value);          // Add the same to the recipient\r\n\t\tif (allowance < MAX_UINT256) {\r\n\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\t}\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint _value) public canTransfer returns (bool success) {\r\n\t\trequire(_value >= 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\t\r\n\tfunction freezeOf(address _owner) public view returns (uint freeze) {\r\n        return freezes[_owner];\r\n    }\r\n\t\r\n    function burn(uint _value) public canTransfer returns (bool success) {\r\n\t\trequire(balances[msg.sender] >= _value); // Check if the sender has enough\r\n\t\trequire(_value > 0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                    // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction freeze(uint _value) public canTransfer returns (bool success) {\r\n\t\trequire(balances[msg.sender] >= _value); // Check if the sender has enough\r\n\t\trequire(_value > 0);\r\n\t\trequire(freezes[msg.sender] + _value >= freezes[msg.sender]); // Check for overflows\r\n\t\t\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);  // Subtract from the sender\r\n        freezes[msg.sender] = freezes[msg.sender].add(_value);  \r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction unfreeze(uint _value) public canTransfer returns (bool success) {\r\n\t\trequire(freezes[msg.sender] >= _value);  // Check if the sender has enough          \r\n\t\trequire(_value > 0);\r\n\t\trequire(balances[msg.sender] + _value >= balances[msg.sender]); // Check for overflows\r\n\t\t\r\n        freezes[msg.sender] = freezes[msg.sender].sub(_value);  // Subtract from the sender\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(_value);\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n\t* @dev Transfer tokens to multiple addresses\r\n\t* @param _addresses The addresses that will receieve tokens\r\n\t* @param _amounts The quantity of tokens that will be transferred\r\n\t* @return True if the tokens are transferred correctly\r\n\t*/\r\n\tfunction transferForMultiAddresses(address[] _addresses, uint[] _amounts) public canTransfer returns (bool) {\r\n\t\tfor (uint i = 0; i < _addresses.length; i++) {\r\n\t\t  require(_addresses[i] != address(0)); // Prevent transfer to 0x0 address.\r\n\t\t  require(_amounts[i] > 0);\r\n\t\t  require(balances[msg.sender] >= _amounts[i]); // Check if the sender has enough\r\n          require(balances[_addresses[i]] + _amounts[i] >= balances[_addresses[i]]); // Check for overflows\r\n\r\n\t\t  // SafeMath.sub will throw if there is not enough balance.\r\n\t\t  balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\r\n\t\t  balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\r\n\t\t  emit Transfer(msg.sender, _addresses[i], _amounts[i]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction stop() public onlyOwner {\r\n        transferable = false;\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        transferable = true;\r\n    }\r\n\t\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\towner = newOwner;\r\n\t}\r\n\t\r\n\t// transfer balance to owner\r\n\tfunction withdrawEther(uint amount) public onlyOwner {\r\n\t\trequire(amount > 0);\r\n\t\towner.transfer(amount);\r\n\t}\r\n\t\r\n\t// can accept ether\r\n\tfunction() public payable {\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferForMultiAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"freeze\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BDToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6018cfba4b73bf928d0189e7c4242fd6bf869030f5053585d3fa6e06cffd822"}]}