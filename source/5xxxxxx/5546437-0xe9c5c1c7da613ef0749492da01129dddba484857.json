{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n    * Transfers ownership to new Ethereum address. This function can only be called by the \r\n    * owner.\r\n    * @param _newOwner the address to be granted ownership.\r\n    **/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC20TransferInterface {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function balanceOf(address who) constant public returns (uint256);\r\n}\r\n\r\n\r\n\r\ncontract ICO is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    event TokenAddressSet(address indexed tokenAddress);\r\n    event FirstPreIcoActivated(uint256 startTime, uint256 endTime, uint256 bonus);\r\n    event SecondPreIcoActivated(uint256 startTime, uint256 endTime, uint256 bonus);\r\n    event MainIcoActivated(uint256 startTime, uint256 endTime, uint256 bonus);\r\n    event TokenPriceChanged(uint256 newTokenPrice, uint256 newExchangeRate);\r\n    event ExchangeRateChanged(uint256 newExchangeRate, uint256 newTokenPrice);\r\n    event BonuseChanged(uint256 newBonus);\r\n    event OffchainPurchaseMade(address indexed recipient, uint256 tokensPurchased);\r\n    event TokensPurchased(address indexed recipient, uint256 tokensPurchased, uint256 weiSent);\r\n    event UnsoldTokensWithdrawn(uint256 tokensWithdrawn);\r\n    event ICOPaused(uint256 timeOfPause);\r\n    event ICOUnpaused(uint256 timeOfUnpause);\r\n    event IcoDeadlineExtended(State currentState, uint256 newDeadline);\r\n    event IcoDeadlineShortened(State currentState, uint256 newDeadline);\r\n    event IcoTerminated(uint256 terminationTime);\r\n    event AirdropInvoked();\r\n\r\n    uint256 public endTime;\r\n    uint256 private pausedTime;\r\n    bool public IcoPaused;\r\n    uint256 public tokenPrice;\r\n    uint256 public rate;\r\n    uint256 public bonus;\r\n    uint256 public minInvestment;\r\n    ERC20TransferInterface public MSTCOIN;\r\n    address public multiSigWallet;\r\n    uint256 public tokensSold;\r\n\r\n    mapping (address => uint256) public investmentOf;\r\n\r\n    enum State {FIRST_PRE_ICO, SECOND_PRE_ICO, MAIN_ICO, TERMINATED}\r\n    State public icoState;\r\n\r\n    uint256[4] public mainIcoBonusStages;\r\n\r\n    function ICO() public {\r\n        endTime = now.add(7 days);\r\n        pausedTime = 0;\r\n        IcoPaused = false;\r\n        tokenPrice = 89e12; // tokenPrice is rate / 1e18\r\n        rate = 11235;  // rate is 1e18 / tokenPrice\r\n        bonus = 100;\r\n        minInvestment = 1e17;\r\n        multiSigWallet = 0xE1377e465121776d8810007576034c7E0798CD46;\r\n        tokensSold = 0;\r\n        icoState = State.FIRST_PRE_ICO;\r\n        FirstPreIcoActivated(now, endTime, bonus);\r\n    }\r\n\r\n    /**\r\n    * Sets the address of the token. This function can only be executed by the \r\n    * owner of the contract.\r\n    **/\r\n    function setTokenAddress(address _tokenAddress) public onlyOwner {\r\n        require(_tokenAddress != 0x0);\r\n        MSTCOIN = ERC20TransferInterface(_tokenAddress);\r\n        TokenAddressSet(_tokenAddress);\r\n    }\r\n\r\n    /**\r\n    * Returns the address of the token. \r\n    **/\r\n    function getTokenAddress() public view returns(address) {\r\n        return address(MSTCOIN);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to activate the second pre ICO. This function can only be \r\n    * executed once the first pre ICO has finished. \r\n    **/\r\n    function activateSecondPreIco() public onlyOwner {\r\n        require(now >= endTime && icoState == State.FIRST_PRE_ICO);\r\n        icoState = State.SECOND_PRE_ICO;\r\n        endTime = now.add(4 days);\r\n        bonus = 50;\r\n        SecondPreIcoActivated(now, endTime, bonus);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to activate the main public ICO stage. This function can only be \r\n    * executed once the second pre ICO has finished. \r\n    **/\r\n    function activateMainIco() public onlyOwner {\r\n        require(now >= endTime && icoState == State.SECOND_PRE_ICO);\r\n        icoState = State.MAIN_ICO;\r\n        mainIcoBonusStages[0] = now.add(7 days);\r\n        mainIcoBonusStages[1] = now.add(14 days);\r\n        mainIcoBonusStages[2] = now.add(21 days);\r\n        mainIcoBonusStages[3] = now.add(31 days);\r\n        endTime = now.add(31 days);\r\n        bonus = 35;\r\n        MainIcoActivated(now, endTime, bonus);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to change the price of the token. \r\n    *\r\n    * @param _newTokenPrice The new price per token. \r\n    **/\r\n    function changeTokenPrice(uint256 _newTokenPrice) public onlyOwner {\r\n        require(tokenPrice != _newTokenPrice && _newTokenPrice > 0);\r\n        tokenPrice = _newTokenPrice;\r\n        uint256 eth = 1e18;\r\n        rate = eth.div(tokenPrice);\r\n        TokenPriceChanged(tokenPrice, rate);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to change the exchange rate of the token.\r\n    *\r\n    * @param _newRate The new exchange rate\r\n    **/\r\n    function changeRate(uint256 _newRate) public onlyOwner {\r\n        require(rate != _newRate && _newRate > 0);\r\n        rate = _newRate;\r\n        uint256 x = 1e12;\r\n        tokenPrice = x.div(rate);\r\n        ExchangeRateChanged(rate, tokenPrice);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to change the bonus of the current ICO stage. \r\n    *\r\n    * @param _newBonus The new bonus percentage investors will receive.\r\n    **/\r\n    function changeBonus(uint256 _newBonus) public onlyOwner {\r\n        require(bonus != _newBonus && _newBonus > 0);\r\n        bonus = _newBonus;\r\n        BonuseChanged(bonus);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to sell tokens with other forms of payment including fiat and all other\r\n    * cryptos. \r\n    *\r\n    * @param _recipient The address to send tokens to.\r\n    * @param _value The amount of tokens to be sent.\r\n    **/\r\n    function processOffchainTokenPurchase(address _recipient, uint256 _value) public onlyOwner {\r\n        require(MSTCOIN.balanceOf(address(this)) >= _value);\r\n        require(_recipient != 0x0 && _value > 0);\r\n        MSTCOIN.transfer(_recipient, _value);\r\n        tokensSold = tokensSold.add(_value);\r\n        OffchainPurchaseMade(_recipient, _value);\r\n    }\r\n\r\n    /**\r\n    * Fallback function calls the buyTokens function automatically when an investment is made.\r\n    **/\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Allows investors to send their ETH and automatically receive tokens in return.\r\n    *\r\n    * @param _recipient The addrewss which will receive tokens\r\n    **/\r\n    function buyTokens(address _recipient) public payable {\r\n        uint256 msgVal = msg.value.div(1e12); //because token has 6 decimals\r\n        require(MSTCOIN.balanceOf(address(this)) >= msgVal.mul(rate.mul(getBonus()).div(100)).add(rate) ) ;\r\n        require(msg.value >= minInvestment && withinPeriod());\r\n        require(_recipient != 0x0);\r\n        uint256 toTransfer = msgVal.mul(rate.mul(getBonus()).div(100).add(rate));\r\n        MSTCOIN.transfer(_recipient, toTransfer);\r\n        tokensSold = tokensSold.add(toTransfer);\r\n        investmentOf[msg.sender] = investmentOf[msg.sender].add(msg.value);\r\n        TokensPurchased(_recipient, toTransfer, msg.value);\r\n        forwardFunds();\r\n    }\r\n\r\n    /**\r\n    * This function is internally called by the buyTokens function to automatically forward\r\n    * all investments made to the multi signature wallet. \r\n    **/\r\n    function forwardFunds() internal {\r\n        multiSigWallet.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n    * This function is internally called by the buyTokens function to ensure that investments\r\n    * are made during times when the ICO is not paused and when the duration of the current \r\n    * phase has not finished.\r\n    **/\r\n    function withinPeriod() internal view returns(bool) {\r\n        return IcoPaused == false && now < endTime && icoState != State.TERMINATED;\r\n    }\r\n\r\n    /**\r\n    * Calculates and returns the bonus of the current ICO stage. During the main public ICO, the\r\n    * first ICO the bonus stages are set as such:\r\n    *\r\n    * week 1: bonus = 35%\r\n    * week 2: bonus = 25%\r\n    * week 3: bonus = 15%\r\n    * week 4: bonus = 5%\r\n    **/\r\n    function getBonus() public view returns(uint256 _bonus) {\r\n        _bonus = bonus;\r\n        if(icoState == State.MAIN_ICO) {\r\n            if(now > mainIcoBonusStages[3]) {\r\n                _bonus = 0;\r\n            } else {\r\n                uint256 timeStamp = now;\r\n                for(uint i = 0; i < mainIcoBonusStages.length; i++) {\r\n                    if(timeStamp <= mainIcoBonusStages[i]) {\r\n                        break;\r\n                    } else {\r\n                        if(_bonus >= 15) {\r\n                            _bonus = _bonus.sub(10);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return _bonus;\r\n    }\r\n\r\n    /**\r\n    * Allows the owner of the contract to withdraw all unsold tokens. This function can \r\n    * only be executed once the ICO contract has been terminated after the main public \r\n    * ICO has finished. \r\n    *\r\n    * @param _recipient The address to withdraw all unsold tokens to. If this field is \r\n    * left empty, then the tokens will just be sent to the owner of the contract. \r\n    **/\r\n    function withdrawUnsoldTokens(address _recipient) public onlyOwner {\r\n        require(icoState == State.TERMINATED);\r\n        require(now >= endTime && MSTCOIN.balanceOf(address(this)) > 0);\r\n        if(_recipient == 0x0) { \r\n            _recipient = owner; \r\n        }\r\n        UnsoldTokensWithdrawn(MSTCOIN.balanceOf(address(this)));\r\n        MSTCOIN.transfer(_recipient, MSTCOIN.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to pause the ICO contract. While the ICO is paused investments cannot\r\n    * be made. \r\n    **/\r\n    function pauseICO() public onlyOwner {\r\n        require(!IcoPaused);\r\n        IcoPaused = true;\r\n        pausedTime = now;\r\n        ICOPaused(now);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner to unpause the ICO only when the ICO contract has been paused. Once\r\n    * invoked, the deadline will automatically be extended by the duration the ICO was \r\n    * paused for. \r\n    **/\r\n    function unpauseICO() public onlyOwner {\r\n        require(IcoPaused);\r\n        IcoPaused = false;\r\n        endTime = endTime.add(now.sub(pausedTime));\r\n        ICOUnpaused(now);\r\n    }\r\n\r\n\r\n    /**\r\n    * Allows the owner of the ICO to extend the deadline of the current ICO stage. This\r\n    * function can only be executed if the ICO contract has not been terminated. \r\n    *\r\n    * @param _days The number of days to increase the duration of the ICO by. \r\n    **/\r\n    function extendDeadline(uint256 _days) public onlyOwner {\r\n        require(icoState != State.TERMINATED);\r\n        endTime = endTime.add(_days.mul(1 days));\r\n        if(icoState == State.MAIN_ICO) {\r\n            uint256 blocks = 0;\r\n            uint256 stage = 0;\r\n            for(uint i = 0; i < mainIcoBonusStages.length; i++) {\r\n                if(now < mainIcoBonusStages[i]) {\r\n                    stage = i;\r\n                }\r\n            }\r\n            blocks = (_days.mul(1 days)).div(mainIcoBonusStages.length.sub(stage));\r\n            for(uint x = stage; x < mainIcoBonusStages.length; x++) {\r\n                mainIcoBonusStages[x] = mainIcoBonusStages[x].add(blocks);\r\n            }\r\n        }\r\n        IcoDeadlineExtended(icoState, endTime);\r\n    }\r\n\r\n    /**\r\n    * Allows the owner of the contract to shorten the deadline of the current ICO stage.\r\n    *\r\n    * @param _days The number of days to reduce the druation of the ICO by. \r\n    **/\r\n    function shortenDeadline(uint256 _days) public onlyOwner {\r\n        if(now.add(_days.mul(1 days)) >= endTime) {\r\n            revert();\r\n        } else {\r\n            endTime = endTime.sub(_days.mul(1 days));\r\n            if(icoState == State.MAIN_ICO) {\r\n                uint256 blocks = 0;\r\n                uint256 stage = 0;\r\n                for(uint i = 0; i < mainIcoBonusStages.length; i++) {\r\n                    if(now < mainIcoBonusStages[i]) {\r\n                        stage = i;\r\n                    }\r\n                }\r\n                blocks = (_days.mul(1 days)).div(mainIcoBonusStages.length.sub(stage));\r\n                for(uint x = stage; x < mainIcoBonusStages.length; x++) {\r\n                    mainIcoBonusStages[x] = mainIcoBonusStages[x].sub(blocks);\r\n                }\r\n            }\r\n        }\r\n        IcoDeadlineShortened(icoState, endTime);\r\n    }\r\n\r\n    /**\r\n    * Terminates the ICO early permanently. This function can only be called by the\r\n    * owner of the contract during the main public ICO. \r\n    **/\r\n    function terminateIco() public onlyOwner {\r\n        require(icoState == State.MAIN_ICO);\r\n        require(now < endTime);\r\n        endTime = now;\r\n        icoState = State.TERMINATED;\r\n        IcoTerminated(now);\r\n    }\r\n\r\n    /**\r\n    * Returns the amount of tokens that have been sold.\r\n    **/\r\n    function getTokensSold() public view returns(uint256) {\r\n        return tokensSold;\r\n    }\r\n\r\n    /**\r\n    * Airdrops tokens to up to 100 ETH addresses. \r\n    *\r\n    * @param _addrs The list of addresses to send tokens to\r\n    * @param _values The list of amounts of tokens to send to each corresponding address.\r\n    **/\r\n    function airdrop(address[] _addrs, uint256[] _values) public onlyOwner returns(bool) {\r\n        require(_addrs.length == _values.length && _addrs.length <= 100);\r\n        require(MSTCOIN.balanceOf(address(this)) >= getSumOfValues(_values));\r\n        for (uint i = 0; i < _addrs.length; i++) {\r\n            if (_addrs[i] != 0x0 && _values[i] > 0) {\r\n                MSTCOIN.transfer(_addrs[i], _values[i]);\r\n            }\r\n        }\r\n        AirdropInvoked();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Called internally by the airdrop function to ensure the contract holds enough tokens\r\n    * to succesfully execute the airdrop.\r\n    *\r\n    * @param _values The list of values representing the amount of tokens which will be airdroped.\r\n    **/\r\n    function getSumOfValues(uint256[] _values) internal pure returns(uint256) {\r\n        uint256 sum = 0;\r\n        for(uint i=0; i < _values.length; i++) {\r\n            sum = sum.add(_values[i]);\r\n        }\r\n        return sum;\r\n    } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateSecondPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"shortenDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateMainIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investmentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"processOffchainTokenPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonus\",\"type\":\"uint256\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MSTCOIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainIcoBonusStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"FirstPreIcoActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"SecondPreIcoActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"MainIcoActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newExchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"BonuseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"OffchainPurchaseMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiSent\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensWithdrawn\",\"type\":\"uint256\"}],\"name\":\"UnsoldTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeOfPause\",\"type\":\"uint256\"}],\"name\":\"ICOPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeOfUnpause\",\"type\":\"uint256\"}],\"name\":\"ICOUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newDeadline\",\"type\":\"uint256\"}],\"name\":\"IcoDeadlineExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newDeadline\",\"type\":\"uint256\"}],\"name\":\"IcoDeadlineShortened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"terminationTime\",\"type\":\"uint256\"}],\"name\":\"IcoTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AirdropInvoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dad71998103ef5f99893d7e8fff12cc19c90e80ee97aca02d04777c411e0c3ac"}]}