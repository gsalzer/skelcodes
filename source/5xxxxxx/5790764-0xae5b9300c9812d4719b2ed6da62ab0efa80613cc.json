{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract WhiteListedBasic {\r\n    function addWhiteListed(address[] addrs) external;\r\n    function removeWhiteListed(address addr) external;\r\n    function isWhiteListed(address addr) external view returns (bool);\r\n}\r\n\r\ncontract OperatableBasic {\r\n    function setMinter (address addr) external;\r\n    function setWhiteLister (address addr) external;\r\n}\r\n\r\ncontract Operatable is Claimable, OperatableBasic {\r\n    address public minter;\r\n    address public whiteLister;\r\n    address public launcher;\r\n\r\n    event NewMinter(address newMinter);\r\n    event NewWhiteLister(address newwhiteLister);\r\n\r\n    modifier canOperate() {\r\n        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        minter = owner;\r\n        whiteLister = owner;\r\n        launcher = owner;\r\n    }\r\n\r\n    function setMinter (address addr) external onlyOwner {\r\n        minter = addr;\r\n        emit NewMinter(minter);\r\n    }\r\n\r\n    function setWhiteLister (address addr) external onlyOwner {\r\n        whiteLister = addr;\r\n        emit NewWhiteLister(whiteLister);\r\n    }\r\n\r\n    modifier ownerOrMinter()  {\r\n        require ((msg.sender == minter) || (msg.sender == owner));\r\n        _;\r\n    }\r\n\r\n    modifier onlyLauncher()  {\r\n        require (msg.sender == launcher);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhiteLister()  {\r\n        require (msg.sender == whiteLister);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Salvageable is Operatable {\r\n    // Salvage other tokens that are accidentally sent into this token\r\n    function emergencyERC20Drain(ERC20 oddToken, uint amount) public onlyLauncher {\r\n        if (address(oddToken) == address(0)) {\r\n            launcher.transfer(amount);\r\n            return;\r\n        }\r\n        oddToken.transfer(launcher, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract WhiteListed is Operatable, WhiteListedBasic, Salvageable {\r\n\r\n\r\n    uint public count;\r\n    mapping (address => bool) public whiteList;\r\n\r\n    event Whitelisted(address indexed addr, uint whitelistedCount, bool isWhitelisted);\r\n\r\n    function addWhiteListed(address[] addrs) external canOperate {\r\n        uint c = count;\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            if (!whiteList[addrs[i]]) {\r\n                whiteList[addrs[i]] = true;\r\n                c++;\r\n                emit Whitelisted(addrs[i], count, true);\r\n            }\r\n        }\r\n        count = c;\r\n    }\r\n\r\n    function removeWhiteListed(address addr) external canOperate {\r\n        require(whiteList[addr]);\r\n        whiteList[addr] = false;\r\n        count--;\r\n        emit Whitelisted(addr, count, false);\r\n    }\r\n\r\n    function isWhiteListed(address addr) external view returns (bool) {\r\n        return whiteList[addr];\r\n    }\r\n}\r\ncontract GoConfig {\r\n    string public constant NAME = \"GOeureka\";\r\n    string public constant SYMBOL = \"GOT\";\r\n    uint8 public constant DECIMALS = 18;\r\n    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\r\n    uint public constant TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\r\n}\r\n\r\ncontract GOeureka is  Salvageable, PausableToken, GoConfig {\r\n    using SafeMath for uint;\r\n \r\n    string public name = NAME;\r\n    string public symbol = SYMBOL;\r\n    uint8 public decimals = DECIMALS;\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint amount);\r\n    event MintFinished();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        paused = true;\r\n    }\r\n\r\n    function mint(address _to, uint _amount) ownerOrMinter canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() ownerOrMinter canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function sendBatchCS(address[] _recipients, uint[] _values) external ownerOrMinter returns (bool) {\r\n        require(_recipients.length == _values.length);\r\n        uint senderBalance = balances[msg.sender];\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            uint value = _values[i];\r\n            address to = _recipients[i];\r\n            require(senderBalance >= value);        \r\n            senderBalance = senderBalance - value;\r\n            balances[to] += value;\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        balances[msg.sender] = senderBalance;\r\n        return true;\r\n    }\r\n\r\n    // Lifted from ERC827\r\n\r\n      /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n   * @dev address and execute a call with the sent data on the same transaction\r\n   *\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function transferAndCall(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n\r\n        super.transfer(_to, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract gotTokenSaleConfig is GoConfig {\r\n    uint public constant MIN_PRESALE = 10 ether;\r\n\r\n    uint public constant VESTING_AMOUNT = 100000000 * DECIMALSFACTOR;\r\n    address public constant VESTING_WALLET = 0xf0cf34Be9cAB4354b228193FF4F6A2C61DdE95f4;  // <<============================\r\n        \r\n    uint public constant RESERVE_AMOUNT = 300000000 * DECIMALSFACTOR;\r\n    address public constant RESERVE_WALLET = 0x83Fee7D53b6A5B5fD0d60b772c2B56b02D8835da; // <<============================\r\n\r\n    uint public constant PRESALE_START = 1529035246; // Friday, June 15, 2018 12:00:46 PM GMT+08:00\r\n    uint public constant SALE_START = PRESALE_START + 4 weeks;\r\n        \r\n    uint public constant SALE_CAP = 600000000 * DECIMALSFACTOR;\r\n\r\n    address public constant MULTISIG_ETH = RESERVE_WALLET;\r\n\r\n}\r\n\r\ncontract GOeurekaSale is Claimable, gotTokenSaleConfig, Pausable, Salvageable {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    GOeureka public token;\r\n\r\n    WhiteListedBasic public whiteListed;\r\n\r\n    // start and end block where investments are allowed \r\n    uint256 public presaleStart;\r\n    uint256 public presaleEnd;\r\n\r\n    uint256 public week1Start;\r\n    uint256 public week1End;\r\n    uint256 public week2End;\r\n    uint256 public week3End;\r\n\r\n    // Caps are in ETHER not tokens - need to back calculate to get token cap\r\n    uint256 public presaleCap;\r\n    uint256 public week1Cap;\r\n    uint256 public week2Cap;\r\n    uint256 public week3Cap;\r\n\r\n    // Minimum contribution is now calculated\r\n    uint256 public minContribution;\r\n\r\n    uint public currentCap;\r\n    //uint256[] public cap;\r\n\r\n    // address where funds are collected\r\n    address public multiSig;\r\n\r\n    // amount of raised funds in wei from private, presale and main sale\r\n    uint256 public weiRaised;\r\n\r\n    // amount of raised tokens\r\n    uint256 public tokensRaised;\r\n\r\n    // number of participants\r\n    mapping(address => uint256) public contributions;\r\n    uint256 public numberOfContributors = 0;\r\n\r\n    //  for rate\r\n    uint public basicRate;\r\n \r\n    // EVENTS\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event SaleClosed();\r\n    event HardcapReached();\r\n    event NewCapActivated(uint256 newCap);\r\n\r\n \r\n    // CONSTRUCTOR\r\n\r\n    constructor(GOeureka token_, WhiteListedBasic _whiteListed) public {\r\n        calcDates(PRESALE_START, SALE_START); // Continuous sale\r\n\r\n        basicRate = 3000;  // TokensPerEther\r\n        calculateRates();\r\n\r\n        \r\n        multiSig = MULTISIG_ETH;\r\n\r\n        // NOTE - toke\r\n        token = token_;\r\n\r\n        whiteListed = _whiteListed;\r\n    }\r\n\r\n    bool allocated = false;\r\n    function mintAllocations() external onlyOwner {\r\n        require(!allocated);\r\n        allocated = true;\r\n        token.mint(VESTING_WALLET,VESTING_AMOUNT);\r\n        token.mint(RESERVE_WALLET,RESERVE_AMOUNT);\r\n    }\r\n\r\n    function setDates(uint presaleStart_, uint saleStart) external onlyOwner {\r\n        calcDates(presaleStart_, saleStart);\r\n    }\r\n\r\n    function calcDates(uint presaleStart_, uint saleStart) internal {\r\n        require(weiRaised == 0);\r\n        require(now < presaleStart_);\r\n        require(presaleStart_ < saleStart);\r\n        presaleStart = presaleStart_;\r\n        week1Start = saleStart;\r\n\r\n        presaleEnd = saleStart; \r\n\r\n        week1End = week1Start + 1 weeks;\r\n        week2End = week1Start + 2 weeks; \r\n        week3End = week1Start + 4 weeks;\r\n    }\r\n\r\n    function setWallet(address _newWallet) public onlyOwner {\r\n        multiSig = _newWallet;\r\n    } \r\n\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        if (now > week3End)\r\n            return true;\r\n        if (tokensRaised >= SALE_CAP)\r\n            return true; // if we reach the tokensForSale\r\n        return false;\r\n    }\r\n\r\n    // Buyer must be whitelisted\r\n    function isWhiteListed(address beneficiary) internal view returns (bool) {\r\n        return whiteListed.isWhiteListed(beneficiary);\r\n    }\r\n\r\n    modifier onlyAuthorised(address beneficiary) {\r\n        require(isWhiteListed(beneficiary),\"Not authorised\");\r\n        require (now >= presaleStart,\"too early\");\r\n        require (!hasEnded(),\"ended\");\r\n        require (multiSig != 0x0,\"MultiSig empty\");\r\n        require ((msg.value > minContribution) || (weiRaised.add(minContribution) > week3Cap),\"Value too small\");\r\n        _;\r\n    }\r\n\r\n    function setNewRate(uint newRate) onlyOwner public {\r\n        require(weiRaised == 0);\r\n        require(0 < newRate && newRate < 5000);\r\n        basicRate = newRate;\r\n        calculateRates();\r\n    }\r\n\r\n    function calculateRates() internal {\r\n        presaleCap =              uint(150000000 * DECIMALSFACTOR).div(basicRate);\r\n        week1Cap = presaleCap.add(uint(100000000 * DECIMALSFACTOR).div(basicRate));\r\n        week2Cap = week1Cap.add(uint(100000000 * DECIMALSFACTOR).div(basicRate));\r\n        week3Cap = week2Cap.add(uint(200000000 * DECIMALSFACTOR).div(basicRate));\r\n        minContribution = uint(100 * DECIMALSFACTOR).div(basicRate);\r\n        currentCap = presaleCap;\r\n    }\r\n\r\n\r\n    function getTokens(uint256 amountInWei) \r\n    internal\r\n    view\r\n    returns (uint256 tokens, uint256 currentCap_)\r\n    {\r\n        if ((now < week1Start) && (weiRaised < presaleCap)) {\r\n            require(amountInWei.add(contributions[msg.sender]) >= MIN_PRESALE); // if already sent min_presale, allow topup\r\n            return (amountInWei.mul(basicRate).mul(115).div(100), presaleCap);\r\n        }\r\n        if ((now <= week1End) && (weiRaised < week1Cap)) {\r\n            return (amountInWei.mul(basicRate).mul(110).div(100), week1Cap);\r\n        }\r\n        if ((now <= week2End) && (weiRaised < week2Cap)) {\r\n            return (amountInWei.mul(basicRate).mul(105).div(100), week2Cap);\r\n        }\r\n        if ((now <= week3End) && (weiRaised < week3Cap)) { \r\n            return (amountInWei.mul(basicRate), week3Cap);\r\n        }\r\n        revert();\r\n    }\r\n\r\n  \r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary, uint256 value)\r\n        internal\r\n        onlyAuthorised(beneficiary) \r\n        whenNotPaused\r\n    {\r\n        uint256 newTokens;\r\n        uint256 newestTokens;\r\n        uint256 thisPhase = value;\r\n        uint256 nextPhase = 0;\r\n        uint256 refund = 0;\r\n\r\n        if (weiRaised.add(value) > currentCap) { // exceeds current tranche?\r\n            thisPhase = currentCap.sub(weiRaised);\r\n            nextPhase = value.sub(thisPhase);\r\n        }\r\n        (newTokens, currentCap) = getTokens(thisPhase);\r\n        weiRaised = weiRaised.add(thisPhase);\r\n        // if we have bridged two tranches....\r\n        if (nextPhase > 0) {\r\n            if (weiRaised.add(nextPhase) <= week3Cap) { // another phase to enter\r\n                weiRaised = weiRaised.add(nextPhase);\r\n                (newestTokens, currentCap) = getTokens(nextPhase);\r\n                newTokens = newTokens.add(newestTokens);\r\n                emit NewCapActivated(currentCap);\r\n            } else { // sale is complete...\r\n                refund = nextPhase;\r\n                nextPhase = 0;\r\n                emit HardcapReached();\r\n            }\r\n        }\r\n        if (contributions[beneficiary] == 0) {\r\n            numberOfContributors++;\r\n        }\r\n        contributions[beneficiary] = contributions[beneficiary].add(thisPhase).add(nextPhase);\r\n        tokensRaised = tokensRaised.add(newTokens);\r\n        token.mint(beneficiary,newTokens);\r\n        emit TokenPurchase(beneficiary, thisPhase.add(nextPhase), newTokens);\r\n        multiSig.transfer(thisPhase.add(nextPhase));\r\n        if (refund > 0) {\r\n            beneficiary.transfer(refund);\r\n        }\r\n    }\r\n\r\n    function placeTokens(address beneficiary, uint256 tokens) \r\n        public       \r\n        onlyOwner\r\n    {\r\n        require(now < presaleStart);\r\n        tokensRaised = tokensRaised.add(tokens);\r\n        token.mint(beneficiary,tokens);\r\n    }\r\n\r\n\r\n    // Complete the sale\r\n    function finishSale() public onlyOwner {\r\n        require(hasEnded());\r\n        token.finishMinting();\r\n        emit SaleClosed();\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTALSUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhiteLister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBatchCS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteLister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newwhiteLister\",\"type\":\"address\"}],\"name\":\"NewWhiteLister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GOeureka","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://76515e2951ab093b96dc0167395df69061b4ffb2ca236c52ccbb5fcefdf92f34"}]}