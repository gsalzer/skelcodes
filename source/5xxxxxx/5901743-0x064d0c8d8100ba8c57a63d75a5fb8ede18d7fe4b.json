{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n\t\tif (x == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 z = x * y;\r\n\t\tassert(z / x == y);\r\n\t\treturn z;\r\n\t}\r\n\t\r\n\tfunction div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n\t    // assert(y > 0);//Solidity automatically throws when dividing by 0 \r\n\t    uint256 z = x / y;\r\n\t    // assert(x == y * z + x % y); // There is no case in which this doesn`t hold\r\n\t    return z;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n\t    assert(y <= x);\r\n\t    return x - y;\r\n\t}\r\n\t\r\n\tfunction add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n\t    uint256 z = x + y;\r\n\t    assert(z >= x);\r\n\t    return z;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization\r\n *      control function,this simplifies the implementation of \"user permissions\".\r\n */\r\n \r\n contract Ownable {\r\n     address public owner;\r\n     \r\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n     \r\n     /**\r\n      * \r\n      * @dev The Ownable constructor sets the original 'owner' of the contract to the\r\n      *         sender account.\r\n      */\r\n      \r\n     function Ownable() public {\r\n         owner = msg.sender;\r\n }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC223\r\n * @dev ERC223 contract interface with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n *      newQSHUCOIN\r\n */\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n\r\n    // ERC223 and ERC20 functions and events\r\n    function balanceOf(address who) public view returns (uint);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    // ERC223 functions\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n\r\n    // ERC20 functions and events\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n * @title ContractReceiver\r\n * @dev Contract that is working with ERC223 tokens newQSHUCOIN\r\n */\r\n contract ContractReceiver {\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n\r\n        /*\r\n         * tkn variable is analogue of msg variable of Ether transaction\r\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n         * tkn.data is data of token transaction   (analogue of msg.data)\r\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\r\n         */\r\n    }\r\n}\r\n\r\n/**\r\n * @title newQSHUCOIN\r\n * @dev QSHUCOIN is an ERC223 Token with ERC20 functions and events\r\n * Wishing for circulation of QSHUCOIN!\r\n * I wish for prosperity for a long time!\r\n * Flapping from Kyusyu to the world!\r\n * We will work with integrity and sincerity!\r\n * ARIGATOH!\r\n */\r\ncontract QSHUCOIN is ERC223, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"QSHUCOIN\";\r\n    string public symbol = \"QSH\";\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply = 50e9 * 1e8;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event LockedFunds(address indexed target, uint256 locked);\r\n    event Burn(address indexed from, uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor is called only once and can not be called again\r\n     */\r\n    function QSHUCOIN() public {\r\n        owner = msg.sender;\r\n\r\n\r\n    }\r\n\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens\r\n     * @param targets Addresses to be frozen\r\n     * @param isFrozen either to freeze it or not\r\n     */\r\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for (uint j = 0; j < targets.length; j++) {\r\n            require(targets[j] != 0x0);\r\n            frozenAccount[targets[j]] = isFrozen;\r\n            emit FrozenFunds(targets[j], isFrozen);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\r\n     * @param targets Addresses to be locked funds\r\n     * @param unixTimes Unix times when locking up will be finished\r\n     */\r\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\n        require(targets.length > 0\r\n                && targets.length == unixTimes.length);\r\n\r\n        for(uint j = 0; j < targets.length; j++){\r\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\r\n            unlockUnixTime[targets[j]] = unixTimes[j];\r\n            emit LockedFunds(targets[j], unixTimes[j]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\r\n     *      Added due to backwards compatibility reasons\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function that is called when a user or another contract wants to transfer funds\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        if (isContract(_to)) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    \r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    \r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balanceOf[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _owner address The address which owns the funds\r\n     * @param _spender address The address which will spend the funds\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _from The address that will burn the tokens.\r\n     * @param _unitAmount The amount of token to be burned.\r\n     */\r\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\r\n        require(_unitAmount > 0\r\n                && balanceOf[_from] >= _unitAmount);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\r\n        totalSupply = totalSupply.sub(_unitAmount);\r\n        emit Burn(_from, _unitAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\r\n     */\r\n    function qshdrop(address[] addresses, uint256 amount) public returns (bool) {\r\n        require(amount > 0\r\n                && addresses.length > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = amount.mul(addresses.length);\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            require(addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\r\n            emit Transfer(msg.sender, addresses[j], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function qshdrop(address[] addresses, uint256[] amounts) public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for(uint j = 0; j < addresses.length; j++){\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n        }\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        for (j = 0; j < addresses.length; j++) {\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(amounts[j]);\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\r\n            emit Transfer(msg.sender, addresses[j], amounts[j]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function() payable public {\r\n    }\r\n}\r\n\r\n/**\r\n * My thought is strong!\r\n * The reconstruction of Kyusyu is the power of everyone!\r\n */","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"qshdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"qshdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"QSHUCOIN","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c2f890b8b5af0408b916abfd09cd7cece75fe691cff6ffc266fd00fd40619cd"}]}