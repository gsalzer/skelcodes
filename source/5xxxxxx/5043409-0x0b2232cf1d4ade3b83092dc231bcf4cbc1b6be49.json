{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Controlled\r\n * @dev Restricts execution of modified functions to the contract controller alone\r\n */\r\ncontract Controlled {\r\n  address public controller;\r\n\r\n  function Controlled() public {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  modifier onlyController {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  function transferControl(address newController) public onlyController{\r\n    controller = newController;\r\n  }\r\n} \r\n\r\n\r\n\r\n\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n//import \"./TokenController.sol\";\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != address(0x0)) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n           // Alerts the token controller of the transfer\r\n           // if (isContract(controller)) {\r\n               // require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           // }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        // if (isContract(controller)) {\r\n            // require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        // }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) public returns(address) {            \r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.transferControl(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(address(0x0), _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, address(0x0), _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == address(0x0)) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    // function () public payable {\r\n        // require(isContract(controller));\r\n        // require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    // }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == address(0x0)) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.transferControl(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations that are safe for uint256 against overflow and negative values\r\n * @dev https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Controlled {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyController whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyController whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract CrowdSale is Pausable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public startFundingTime = 1517990460; // Feb 7, 2018 @ 08h01 UTC == 00h01 PDT        \r\n    uint256 public endFundingTime = 1523779200;   // Apr 15, 2018 @ 08h00 UTC == 08h00 PDT\r\n        \r\n    uint256 public totalEtherCollected;           // In wei\r\n    uint256 public totalTokensSold;               // KISSES tokens sold\r\n    \r\n    uint256 public etherToUSDrate = 800;          // Default exchange rate \r\n    \r\n    MiniMeToken public tokenContract;             // The  token for this CrowdSale\r\n    \r\n    address public etherVault = 0x674552169ec1683Aa26aa7406337FAc67BF31ED5; // The address holding the Ether received\r\n    address public unsoldTokensVault = 0x5316e0A703a584ECa2e95B73B4E6dB8E98E089e0; // The address where all unsold tokens will be sent to\r\n \r\n    address public tokenVault;                    // The address holding the KISSES tokens for sale\r\n    \r\n    // Logs purchaser address and investment amount - to be used to track top 100 investors\r\n    event Purchase(address investor, uint256 weiReceived, uint256 tokensSold);\r\n    \r\n    // Constructor - takes address of token contract as parameter\r\n    // Assumes msg.sender is address of the tokenVault <==> msg.sender also deployed tokenContract\r\n    function CrowdSale(address _tokenAddress) public {\r\n        require (_tokenAddress != address(0));            \r\n        \r\n        tokenContract = MiniMeToken(_tokenAddress);     \r\n\r\n        tokenVault = msg.sender;\r\n    }\r\n    \r\n    // Fallback function invokes internal doPayment method\r\n    function () public whenNotPaused payable {\r\n        doPayment(msg.sender);\r\n    }\r\n    \r\n    // Internal logic that processes payments\r\n    function doPayment(address _owner) internal {\r\n\r\n        // First check that the Campaign is allowed to receive this donation\r\n        require ((now >= startFundingTime) && (now <= endFundingTime) && (msg.value != 0));\r\n        \r\n        // Calculate the number of tokens purchased and the dollar amount thereof\r\n        uint256 tokens = calculateTokens(msg.value);\r\n           \r\n        // Track how much Ether the campaign has collected\r\n        totalEtherCollected = totalEtherCollected.add(msg.value);\r\n        // Track how many KISSES tokens the campaign has sold\r\n        totalTokensSold = totalTokensSold.add(tokens);        \r\n\r\n        // Send the ether to the etherVault\r\n        require (etherVault.send(msg.value));\r\n\r\n        // Transfer tokens from tokenVault to the _owner address\r\n        // Will throw if tokens exceeds balance in remaining in tokenVault\r\n        require (tokenContract.transferFrom(tokenVault, _owner, tokens));\r\n        \r\n        // Emit the Purchase event \r\n        Purchase(_owner, msg.value, tokens);\r\n        \r\n        return;\r\n    }\r\n    \r\n    // Handles the bonus logic & conversion from Ether's 18 decimal places to 5 decimals for the KISSES token\r\n    function calculateTokens(uint256 _wei) internal view returns (uint256) {\r\n \r\n        uint256 weiAmount = _wei;\r\n        uint256 USDamount = (weiAmount.mul(etherToUSDrate)).div(10**14); // preserves 4 decimal places\r\n\r\n        uint256 purchaseAmount; \r\n        uint256 withBonus;\r\n \r\n        // if purchase made between 07 & 14 February 2018\r\n        if(now < 1518595200) {\r\n            purchaseAmount = USDamount; // 1 Token == 1 USD\r\n            // minimum purchase of one token, maximum of three hundred and fifty thousand\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                 revert();\r\n            }\r\n            else {\r\n                 withBonus = purchaseAmount.mul(19); // 90% bonus for the whole week\r\n                 return withBonus;\r\n            }   \r\n        }\r\n \r\n        // if purchase made between 14 & 15 February 2018\r\n        else if(now >= 1518595200 && now < 1518681600) {\r\n            purchaseAmount = USDamount; // 1 Token == 1 USD\r\n            // minimum purchase of one token, maximum of three hundred and fifty thousand\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                 revert();\r\n            }\r\n            else {\r\n                 withBonus = purchaseAmount.mul(18); // 80% bonus for the whole of Valentine's Day\r\n                 return withBonus;\r\n            }   \r\n        }\r\n\r\n        // if purchase made between 15 February and 21 February\r\n        else if(now >= 1518681600 && now < 1519286400) {\r\n            purchaseAmount = USDamount; // 1 Token == 1 USD\r\n            // minimum purchase of one token, maximum of three hundred and fifty thousand\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                revert();\r\n            }     \r\n            else {\r\n                if(weiAmount >= 500 finney && weiAmount < 1 ether) {\r\n                    withBonus = purchaseAmount.mul(11); // 10% bonus\r\n                    return withBonus;\r\n                }\r\n                else if(weiAmount >= 1 ether) {\r\n                    withBonus = purchaseAmount.mul(16); // 60% bonus\r\n                    return withBonus;                \r\n                }\r\n                else {\r\n                    withBonus = purchaseAmount.mul(10); // no bonus\r\n                    return withBonus;\r\n                }\r\n            }\r\n        }\r\n\r\n        // if purchase made between 22 February and 28 February\r\n        else if(now >= 1519286400 && now < 1519891200) {\r\n            purchaseAmount = USDamount; // 1 Token == 1 USD\r\n            // minimum purchase of one token, maximum of three hundred and fifty thousand\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                revert();\r\n            }\r\n            else {\r\n                if(weiAmount >= 500 finney && weiAmount < 1 ether) {\r\n                    withBonus = purchaseAmount.mul(11); // 10% bonus\r\n                    return withBonus;\r\n                }\r\n                else if(weiAmount >= 1 ether) {\r\n                    withBonus = purchaseAmount.mul(15); // 50% bonus\r\n                    return withBonus;                \r\n                }\r\n                else {\r\n                    withBonus = purchaseAmount.mul(10); // no bonus\r\n                    return withBonus;\r\n                }\r\n            }\r\n        }\r\n\r\n        // if purchase made between 1 March and 14 March\r\n        else if(now >= 1519891200 && now < 1521100800) {\r\n            purchaseAmount = (USDamount.mul(10)).div(14); // 1 KISSES = 1.4 USD\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                revert();\r\n            }\r\n            else {\r\n                if(weiAmount >= 500 finney && weiAmount < 1 ether) {\r\n                    withBonus = purchaseAmount.mul(11); // 10% bonus\r\n                    return withBonus;\r\n                }\r\n                else if(weiAmount >= 1 ether && weiAmount < 5 ether) {\r\n                    withBonus = purchaseAmount.mul(13); // 30% bonus\r\n                    return withBonus;\r\n                }\r\n                else if(weiAmount >= 5 ether && weiAmount < 8 ether) {\r\n                    withBonus = purchaseAmount.mul(14); // 40% bonus\r\n                    return withBonus;\r\n                }              \r\n                else if(weiAmount >= 8 ether) {\r\n                    withBonus = purchaseAmount.mul(15); // 50% bonus\r\n                    return withBonus;\r\n                }\r\n                else {\r\n                    withBonus = purchaseAmount.mul(10); // no bonus\r\n                    return withBonus;\r\n                }              \r\n            }\r\n        }  \r\n\r\n        // if purchase made between 15 March and 31 March\r\n        else if(now >= 1521100800 && now < 1522569600) {\r\n            purchaseAmount = (USDamount.mul(10)).div(19); // 1 KISSES = 1.9 USD\r\n            // minimum purchase of one token, maximum of three hundred and fifty thousand\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                revert();\r\n            }\r\n            else {\r\n                if(weiAmount >= 500 finney && weiAmount < 1 ether) {\r\n                    withBonus = purchaseAmount.mul(11); // 10% bonus\r\n                    return withBonus;\r\n                } \r\n                else if(weiAmount >= 1 ether && weiAmount < 5 ether) {\r\n                    withBonus = purchaseAmount.mul(13); // 30% bonus\r\n                    return withBonus;\r\n                }\r\n                else if(weiAmount >= 5 ether && weiAmount < 8 ether) {\r\n                    withBonus = purchaseAmount.mul(14); // 40% bonus\r\n                    return withBonus;               \r\n                }              \r\n                else if(weiAmount >= 8 ether) {\r\n                    withBonus = purchaseAmount.mul(15); // 50% bonus\r\n                    return withBonus;               \r\n                }              \r\n                else {\r\n                    withBonus = purchaseAmount.mul(10); // no bonus\r\n                    return withBonus;               \r\n                }\r\n            }\r\n        }\r\n\r\n        // if purchase made between 1 April and 14 April\r\n        else if(now > 1522569600 && now <= endFundingTime) {\r\n            purchaseAmount = (USDamount.mul(10)).div(27); // 1 KISSES = 2.7 USD\r\n            // minimum purchase of one token, maximum of three hundred and fifty thousand\r\n            if(purchaseAmount < 10000 || purchaseAmount > 3500000000) {\r\n                revert();\r\n            }\r\n            else{\r\n                if(weiAmount >= 500 finney && weiAmount < 1 ether) {\r\n                    withBonus = purchaseAmount.mul(11); // 10% bonus\r\n                    return withBonus;\r\n                }\r\n                else if(weiAmount >= 1 ether && weiAmount < 5 ether) {\r\n                    withBonus = purchaseAmount.mul(13); // 30% bonus\r\n                    return withBonus;               \r\n                }\r\n                else if(weiAmount >= 5 ether && weiAmount < 8 ether) {\r\n                    withBonus = purchaseAmount.mul(14); // 40% bonus\r\n                    return withBonus;               \r\n                }              \r\n                else if(weiAmount >= 8 ether) {\r\n                    withBonus = purchaseAmount.mul(15); // 50% bonus\r\n                    return withBonus;              \r\n                }              \r\n                else {\r\n                    withBonus = purchaseAmount.mul(10); // no bonus\r\n                    return withBonus;               \r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Method to change the etherVault address\r\n    function setVault(address _newVaultAddress) public onlyController whenPaused {\r\n        etherVault = _newVaultAddress;\r\n    }\r\n    \r\n    // Method to change the Ether to Dollar exchange rate \r\n    function setEthToUSDRate(uint256 _rate) public onlyController whenPaused {\r\n        etherToUSDrate = _rate;\r\n    }    \r\n        \r\n    // Wrap up CrowdSale and direct any ether stored in this contract to etherVault\r\n    function finalizeFunding() public onlyController {\r\n        require(now >= endFundingTime);\r\n        uint256 unsoldTokens = tokenContract.allowance(tokenVault, address(this));\r\n        if(unsoldTokens > 0) {\r\n            require (tokenContract.transferFrom(tokenVault, unsoldTokensVault, unsoldTokens));\r\n        }\r\n        selfdestruct(etherVault);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVaultAddress\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setEthToUSDRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToUSDrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startFundingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokensVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endFundingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007e87930f3805fe94d17446d5657051723d7c5dd9","Library":"","SwarmSource":"bzzr://5654b12ab61a9439a4611af8382683179eec04ba4d64afff868eadc01891e677"}]}