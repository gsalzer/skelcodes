{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier notOwner() {\r\n        require(msg.sender != owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Resume();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to resume, returns to normal state\r\n     */\r\n    function resume() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Resume();\r\n    }\r\n}\r\n\r\ncontract LuckyYouTokenInterface {\r\n    function airDrop(address _to, uint256 _value) public returns (bool);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n}\r\n\r\ncontract LuckyYouContract is Pausable {\r\n    using SafeMath for uint256;\r\n    LuckyYouTokenInterface public luckyYouToken = LuckyYouTokenInterface(0x6D7efEB3DF42e6075fa7Cf04E278d2D69e26a623); //LKY token address\r\n    bool public airDrop = true;// weather airdrop LKY tokens to participants or not,owner can set it to true or false;\r\n\r\n    //set airDrop flag\r\n    function setAirDrop(bool _airDrop) public onlyOwner {\r\n        airDrop = _airDrop;\r\n    }\r\n\r\n    //if airdrop LKY token to participants , this is airdrop rate per round depends on participated times, owner can set it\r\n    uint public baseTokenGetRate = 100;\r\n\r\n    // set token get rate\r\n    function setBaseTokenGetRate(uint _baseTokenGetRate) public onlyOwner {\r\n        baseTokenGetRate = _baseTokenGetRate;\r\n    }\r\n\r\n    //if the number of participants less than  minParticipants,game will not be fired.owner can set it\r\n    uint public minParticipants = 50;\r\n\r\n    function setMinParticipants(uint _minParticipants) public onlyOwner {\r\n        minParticipants = _minParticipants;\r\n    }\r\n\r\n    //base price ,owner can set it\r\n    uint public basePrice = 0.01 ether;\r\n\r\n    function setBasePrice(uint _basePrice) public onlyOwner {\r\n        basePrice = _basePrice;\r\n    }\r\n\r\n    uint[5] public times = [1, 5, 5 * 5, 5 * 5 * 5, 5 * 5 * 5 * 5];//1x=0.01 ether;5x=0.05 ether; 5*5x=0.25 ether; 5*5*5x=1.25 ether; 5*5*5*5x=6.25 ether;\r\n    //at first only enable 1x(0.02ether) ,enable others proper time in future\r\n    bool[5] public timesEnabled = [true, false, false, false, false];\r\n\r\n    uint[5] public currentCounter = [1, 1, 1, 1, 1];\r\n    mapping(address => uint[5]) private participatedCounter;\r\n    mapping(uint8 => address[]) private participants;\r\n    //todo\r\n    mapping(uint8 => uint256) public participantsCount;\r\n    mapping(uint8 => uint256) public fundShareLastRound;\r\n    mapping(uint8 => uint256) public fundCurrentRound;\r\n    mapping(uint8 => uint256) public fundShareRemainLastRound;\r\n    mapping(uint8 => uint256) public fundShareParticipantsTotalTokensLastRound;\r\n    mapping(uint8 => uint256) public fundShareParticipantsTotalTokensCurrentRound;\r\n    mapping(uint8 => bytes32) private participantsHashes;\r\n\r\n    mapping(uint8 => uint8) private lastFiredStep;\r\n    mapping(uint8 => address) public lastWinner;\r\n    mapping(uint8 => address) public lastFiredWinner;\r\n    mapping(uint8 => uint256) public lastWinnerReward;\r\n    mapping(uint8 => uint256) public lastFiredWinnerReward;\r\n    mapping(uint8 => uint256) public lastFiredFund;\r\n    mapping(address => uint256) public whitelist;\r\n    uint256 public notInWhitelistAllow = 1;\r\n\r\n    bytes32  private commonHash = 0x1000;\r\n\r\n    uint256 public randomNumberIncome = 0;\r\n\r\n    event Winner1(address value, uint times, uint counter, uint256 reward);\r\n    event Winner2(address value, uint times, uint counter, uint256 reward);\r\n\r\n\r\n    function setNotInWhitelistAllow(uint _value) public onlyOwner\r\n    {\r\n        notInWhitelistAllow = _value;\r\n    }\r\n\r\n    function setWhitelist(uint _value,address [] _addresses) public onlyOwner\r\n    {\r\n        uint256 count = _addresses.length;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            whitelist[_addresses [i]] = _value;\r\n        }\r\n    }\r\n\r\n    function setTimesEnabled(uint8 _timesIndex, bool _enabled) public onlyOwner\r\n    {\r\n        require(_timesIndex < timesEnabled.length);\r\n        timesEnabled[_timesIndex] = _enabled;\r\n    }\r\n\r\n    function() public payable whenNotPaused {\r\n\r\n        if(whitelist[msg.sender] | notInWhitelistAllow > 0)\r\n        {\r\n            uint8 _times_length = uint8(times.length);\r\n            uint8 _times = _times_length + 1;\r\n            for (uint32 i = 0; i < _times_length; i++)\r\n            {\r\n                if (timesEnabled[i])\r\n                {\r\n                    if (times[i] * basePrice == msg.value) {\r\n                        _times = uint8(i);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (_times > _times_length) {\r\n                revert();\r\n            }\r\n            else\r\n            {\r\n                if (participatedCounter[msg.sender][_times] < currentCounter[_times])\r\n                {\r\n                    participatedCounter[msg.sender][_times] = currentCounter[_times];\r\n                    if (airDrop)\r\n                    {\r\n                        uint256 _value = baseTokenGetRate * 10 ** 18 * times[_times];\r\n                        uint256 _plus_value = uint256(keccak256(now, msg.sender)) % _value;\r\n                        luckyYouToken.airDrop(msg.sender, _value + _plus_value);\r\n                    }\r\n                    uint256 senderBalance = luckyYouToken.balanceOf(msg.sender);\r\n                    if (lastFiredStep[_times] > 0)\r\n                    {\r\n                        issueLottery(_times);\r\n                        fundShareParticipantsTotalTokensCurrentRound[_times] += senderBalance;\r\n                        senderBalance = senderBalance.mul(2);\r\n                    } else\r\n                    {\r\n                        fundShareParticipantsTotalTokensCurrentRound[_times] += senderBalance;\r\n                    }\r\n                    if (participantsCount[_times] == participants[_times].length)\r\n                    {\r\n                        participants[_times].length += 1;\r\n                    }\r\n                    participants[_times][participantsCount[_times]++] = msg.sender;\r\n                    participantsHashes[_times] = keccak256(msg.sender, uint256(commonHash));\r\n                    commonHash = keccak256(senderBalance,commonHash);\r\n                    fundCurrentRound[_times] += times[_times] * basePrice;\r\n\r\n                    //share last round fund\r\n                    if (fundShareRemainLastRound[_times] > 0)\r\n                    {\r\n                        uint256 _shareFund = fundShareLastRound[_times].mul(senderBalance).div(fundShareParticipantsTotalTokensLastRound[_times]);\r\n                        if(_shareFund  > 0)\r\n                        {\r\n                            if (_shareFund <= fundShareRemainLastRound[_times]) {\r\n                                fundShareRemainLastRound[_times] -= _shareFund;\r\n                                msg.sender.transfer(_shareFund);\r\n                            } else {\r\n                                uint256 _fundShareRemain = fundShareRemainLastRound[_times];\r\n                                fundShareRemainLastRound[_times] = 0;\r\n                                msg.sender.transfer(_fundShareRemain);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (participantsCount[_times] > minParticipants)\r\n                    {\r\n                        if (uint256(keccak256(now, msg.sender, commonHash)) % (minParticipants * minParticipants) < minParticipants)\r\n                        {\r\n                            fireLottery(_times);\r\n                        }\r\n\r\n                    }\r\n                } else\r\n                {\r\n                    revert();\r\n                }\r\n            }\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function issueLottery(uint8 _times) private {\r\n        uint256 _totalFundRate = lastFiredFund[_times].div(100);\r\n        if (lastFiredStep[_times] == 1) {\r\n            fundShareLastRound[_times] = _totalFundRate.mul(30) + fundShareRemainLastRound[_times];\r\n            if (randomNumberIncome > 0)\r\n            {\r\n                if (_times == (times.length - 1) || timesEnabled[_times + 1] == false)\r\n                {\r\n                    fundShareLastRound[_times] += randomNumberIncome;\r\n                    randomNumberIncome = 0;\r\n                }\r\n            }\r\n            fundShareRemainLastRound[_times] = fundShareLastRound[_times];\r\n            fundShareParticipantsTotalTokensLastRound[_times] = fundShareParticipantsTotalTokensCurrentRound[_times];\r\n            fundShareParticipantsTotalTokensCurrentRound[_times] = 0;\r\n            if(fundShareParticipantsTotalTokensLastRound[_times] == 0)\r\n            {\r\n                fundShareParticipantsTotalTokensLastRound[_times] = 10000 * 10 ** 18;\r\n            }\r\n            lastFiredStep[_times]++;\r\n        } else if (lastFiredStep[_times] == 2) {\r\n            lastWinner[_times].transfer(_totalFundRate.mul(65));\r\n            lastFiredStep[_times]++;\r\n            lastWinnerReward[_times] = _totalFundRate.mul(65);\r\n            emit Winner1(lastWinner[_times], _times, currentCounter[_times] - 1, _totalFundRate.mul(65));\r\n        } else if (lastFiredStep[_times] == 3) {\r\n            if (lastFiredFund[_times] > (_totalFundRate.mul(30) + _totalFundRate.mul(4) + _totalFundRate.mul(65)))\r\n            {\r\n                owner.transfer(lastFiredFund[_times] - _totalFundRate.mul(30) - _totalFundRate.mul(4) - _totalFundRate.mul(65));\r\n            }\r\n            lastFiredStep[_times] = 0;\r\n        }\r\n    }\r\n\r\n    function fireLottery(uint8 _times) private {\r\n        lastFiredFund[_times] = fundCurrentRound[_times];\r\n        fundCurrentRound[_times] = 0;\r\n        lastWinner[_times] = participants[_times][uint256(participantsHashes[_times]) % participantsCount[_times]];\r\n        participantsCount[_times] = 0;\r\n        uint256 winner2Reward = lastFiredFund[_times].div(100).mul(4);\r\n        msg.sender.transfer(winner2Reward);\r\n        lastFiredWinner[_times] = msg.sender;\r\n        lastFiredWinnerReward[_times] = winner2Reward;\r\n        emit Winner2(msg.sender, _times, currentCounter[_times], winner2Reward);\r\n        lastFiredStep[_times] = 1;\r\n        currentCounter[_times]++;\r\n    }\r\n\r\n    function _getRandomNumber(uint _round) view private returns (uint256){\r\n        return uint256(keccak256(\r\n                participantsHashes[0],\r\n                participantsHashes[1],\r\n                participantsHashes[2],\r\n                participantsHashes[3],\r\n                participantsHashes[4],\r\n                msg.sender\r\n            )) % _round;\r\n    }\r\n\r\n    function getRandomNumber(uint _round) public payable returns (uint256){\r\n        uint256 tokenBalance = luckyYouToken.balanceOf(msg.sender);\r\n        if (tokenBalance >= 100000 * 10 ** 18)\r\n        {\r\n            return _getRandomNumber(_round);\r\n        } else if (msg.value >= basePrice) {\r\n            randomNumberIncome += msg.value;\r\n            return _getRandomNumber(_round);\r\n        } else {\r\n            revert();\r\n            return 0;\r\n        }\r\n    }\r\n    //in case some bugs\r\n    function kill() public {//for test\r\n        if (msg.sender == owner)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseTokenGetRate\",\"type\":\"uint256\"}],\"name\":\"setBaseTokenGetRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"participantsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"times\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastWinnerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timesEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundShareRemainLastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenGetRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timesIndex\",\"type\":\"uint8\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTimesEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNumberIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notInWhitelistAllow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setNotInWhitelistAllow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundShareParticipantsTotalTokensLastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airDrop\",\"type\":\"bool\"}],\"name\":\"setAirDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyYouToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundShareLastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastFiredFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastFiredWinnerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minParticipants\",\"type\":\"uint256\"}],\"name\":\"setMinParticipants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundShareParticipantsTotalTokensCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastFiredWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"counter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Winner1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"counter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Winner2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LuckyYouContract","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f22336947173d706aefc481e124b9837b3ac5c3eded982fefa29aaa3695d8f5c"}]}