{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract InterfaceContentCreatorUniverse {\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price);\r\n  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\r\n  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\r\n  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\r\n\r\n  //\r\n  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\r\n}\r\n\r\ncontract InterfaceYCC {\r\n  function payForUpgrade(address user, uint price) external  returns (bool success);\r\n  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\r\n  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\r\n  function payoutForMining(address user, uint amount) external;\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract InterfaceMining {\r\n  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\r\n  function payoutMining(uint tokenId, address owner, address newOwner) external;\r\n  function levelUpMining(uint tokenId) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  address private newCeoAddress;\r\n  address private newCooAddress;\r\n\r\n\r\n  function Owned() public {\r\n      ceoAddress = msg.sender;\r\n      cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    newCeoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    newCooAddress = _newCOO;\r\n  }\r\n\r\n  function acceptCeoOwnership() public {\r\n      require(msg.sender == newCeoAddress);\r\n      require(address(0) != newCeoAddress);\r\n      ceoAddress = newCeoAddress;\r\n      newCeoAddress = address(0);\r\n  }\r\n\r\n  function acceptCooOwnership() public {\r\n      require(msg.sender == newCooAddress);\r\n      require(address(0) != newCooAddress);\r\n      cooAddress = newCooAddress;\r\n      newCooAddress = address(0);\r\n  }\r\n\r\n  mapping (address => bool) public youCollectContracts;\r\n  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\r\n    youCollectContracts[contractAddress] = active;\r\n  }\r\n  modifier onlyYCC() {\r\n    require(youCollectContracts[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  InterfaceYCC ycc;\r\n  InterfaceContentCreatorUniverse yct;\r\n  InterfaceMining ycm;\r\n  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\r\n    ycc = InterfaceYCC(yccContract);\r\n    yct = InterfaceContentCreatorUniverse(yctContract);\r\n    ycm = InterfaceMining(ycmContract);\r\n    youCollectContracts[yccContract] = true;\r\n    youCollectContracts[yctContract] = true;\r\n    youCollectContracts[ycmContract] = true;\r\n    for (uint16 index = 0; index < otherContracts.length; index++) {\r\n      youCollectContracts[otherContracts[index]] = true;\r\n    }\r\n  }\r\n  function setYccContractAddress(address yccContract) public onlyCOO {\r\n    ycc = InterfaceYCC(yccContract);\r\n    youCollectContracts[yccContract] = true;\r\n  }\r\n  function setYctContractAddress(address yctContract) public onlyCOO {\r\n    yct = InterfaceContentCreatorUniverse(yctContract);\r\n    youCollectContracts[yctContract] = true;\r\n  }\r\n  function setYcmContractAddress(address ycmContract) public onlyCOO {\r\n    ycm = InterfaceMining(ycmContract);\r\n    youCollectContracts[ycmContract] = true;\r\n  }\r\n\r\n}\r\n\r\ncontract TransferInterfaceERC721YC {\r\n  function transferToken(address to, uint256 tokenId) public returns (bool success);\r\n}\r\ncontract TransferInterfaceERC20 {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\r\n// ----------------------------------------------------------------------------\r\ncontract YouCollectBase is Owned {\r\n  using SafeMath for uint256;\r\n\r\n  event RedButton(uint value, uint totalSupply);\r\n\r\n  // Payout\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to, this.balance);\r\n  }\r\n  function payout(address _to, uint amount) public onlyCLevel {\r\n    if (amount>this.balance)\r\n      amount = this.balance;\r\n    _payout(_to, amount);\r\n  }\r\n  function _payout(address _to, uint amount) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(amount);\r\n    } else {\r\n      _to.transfer(amount);\r\n    }\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\r\n      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\ncontract ERC721YC is YouCollectBase {\r\n  //\r\n  // ERC721\r\n\r\n    /*** STORAGE ***/\r\n    string public constant NAME = \"YouCollectTokens\";\r\n    string public constant SYMBOL = \"YCT\";\r\n    uint256[] public tokens;\r\n\r\n    /// @dev A mapping from collectible IDs to the address that owns them. All collectibles have\r\n    ///  some valid owner address.\r\n    mapping (uint256 => address) public tokenIndexToOwner;\r\n\r\n    /// @dev A mapping from CollectibleIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Collectible can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public tokenIndexToApproved;\r\n\r\n    // @dev A mapping from CollectibleIDs to the price of the token.\r\n    mapping (uint256 => uint256) public tokenIndexToPrice;\r\n\r\n    /*** EVENTS ***/\r\n    /// @dev The Birth event is fired whenever a new collectible comes into existence.\r\n    event Birth(uint256 tokenId, uint256 startPrice);\r\n    /// @dev The TokenSold event is fired whenever a token is sold.\r\n    event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\r\n    // ERC721 Transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    // ERC721 Approval\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n    /*** PUBLIC FUNCTIONS ***/\r\n    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approveToken(\r\n      address _to,\r\n      uint256 _tokenId\r\n    ) public returns (bool) {\r\n      // Caller must own token.\r\n      require(_ownsToken(msg.sender, _tokenId));\r\n\r\n      tokenIndexToApproved[_tokenId] = _to;\r\n\r\n      Approval(msg.sender, _to, _tokenId);\r\n      return true;\r\n    }\r\n\r\n\r\n    function getTotalSupply() public view returns (uint) {\r\n      return tokens.length;\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n      return true;\r\n    }\r\n\r\n\r\n    /// For querying owner of token\r\n    /// @param _tokenId The tokenID for owner inquiry\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n      public\r\n      view\r\n      returns (address owner)\r\n    {\r\n      owner = tokenIndexToOwner[_tokenId];\r\n    }\r\n\r\n\r\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n      price = tokenIndexToPrice[_tokenId];\r\n    }\r\n\r\n\r\n    /// @notice Allow pre-approved user to take ownership of a token\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n      address newOwner = msg.sender;\r\n      address oldOwner = tokenIndexToOwner[_tokenId];\r\n\r\n      // Safety check to prevent against an unexpected 0x0 default.\r\n      require(newOwner != address(0));\r\n\r\n      // Making sure transfer is approved\r\n      require(_approved(newOwner, _tokenId));\r\n\r\n      _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    /// Owner initates the transfer of the token to another account\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n      address _to,\r\n      uint256 _tokenId\r\n    ) public returns (bool) {\r\n      require(_ownsToken(msg.sender, _tokenId));\r\n      _transfer(msg.sender, _to, _tokenId);\r\n      return true;\r\n    }\r\n\r\n    /// Third-party initiates transfer of token from address _from to address _to\r\n    /// @param _from The address for the token to be transferred from.\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n      address _from,\r\n      address _to,\r\n      uint256 _tokenId\r\n    ) public returns (bool) {\r\n      require(_ownsToken(_from, _tokenId));\r\n      require(_approved(_to, _tokenId));\r\n\r\n      _transfer(_from, _to, _tokenId);\r\n      return true;\r\n    }\r\n\r\n\r\n    /// For checking approval of transfer for address _to\r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n      return tokenIndexToApproved[_tokenId] == _to;\r\n    }\r\n\r\n    /// Check for token ownership\r\n    function _ownsToken(address claimant, uint256 _tokenId) internal view returns (bool) {\r\n      return claimant == tokenIndexToOwner[_tokenId];\r\n    }\r\n    // For Upcoming Price Change Features\r\n    function changeTokenPrice(uint256 newPrice, uint256 _tokenId) external onlyYCC {\r\n      tokenIndexToPrice[_tokenId] = newPrice;\r\n    }\r\n\r\n    /// For querying balance of a particular account\r\n    /// @param _owner The address for balance query\r\n    /// @dev Required for ERC-721 compliance.\r\n    function balanceOf(address _owner) public view returns (uint256 result) {\r\n        uint256 totalTokens = tokens.length;\r\n        uint256 tokenIndex;\r\n        uint256 tokenId;\r\n        result = 0;\r\n        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n          tokenId = tokens[tokenIndex];\r\n          if (tokenIndexToOwner[tokenId] == _owner) {\r\n            result++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Assigns ownership of a specific Collectible to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n      //transfer ownership\r\n      tokenIndexToOwner[_tokenId] = _to;\r\n\r\n      // When creating new collectibles _from is 0x0, but we can't account that address.\r\n      if (_from != address(0)) {\r\n        // clear any previously approved ownership exchange\r\n        delete tokenIndexToApproved[_tokenId];\r\n      }\r\n\r\n      // Emit the transfer event.\r\n      Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n\r\n    /// @param _owner The owner whose celebrity tokens we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire tokens array looking for tokens belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n      uint256 tokenCount = balanceOf(_owner);\r\n      if (tokenCount == 0) {\r\n          // Return an empty array\r\n        return new uint256[](0);\r\n      } else {\r\n        uint256[] memory result = new uint256[](tokenCount);\r\n        uint256 totalTokens = getTotalSupply();\r\n        uint256 resultIndex = 0;\r\n\r\n        uint256 tokenIndex;\r\n        uint256 tokenId;\r\n        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n          tokenId = tokens[tokenIndex];\r\n          if (tokenIndexToOwner[tokenId] == _owner) {\r\n            result[resultIndex] = tokenId;\r\n            resultIndex = resultIndex.add(1);\r\n          }\r\n        }\r\n        return result;\r\n      }\r\n    }\r\n\r\n\r\n      // uint256[] storage _result = new uint256[]();\r\n      // uint256 totalTokens = getTotalSupply();\r\n\r\n      // for (uint256 tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n      //   if (tokenIndexToOwner[tokens[tokenIndex]] == _owner) {\r\n      //     _result.push(tokens[tokenIndex]);\r\n      //   }\r\n      // }\r\n      // return _result;\r\n\r\n\r\n    /// @dev returns an array with all token ids\r\n    function getTokenIds() public view returns(uint256[]) {\r\n      return tokens;\r\n    }\r\n\r\n  //\r\n  //  ERC721 end\r\n  //\r\n}\r\n\r\ncontract Universe is ERC721YC {\r\n\r\n  mapping (uint => address) private subTokenCreator;\r\n  mapping (uint => address) private lastSubTokenBuyer;\r\n\r\n  uint16 constant MAX_WORLD_INDEX = 1000;\r\n  uint24 constant MAX_CONTINENT_INDEX = 10000000;\r\n  uint64 constant MAX_SUBCONTINENT_INDEX = 10000000000000;\r\n  uint64 constant MAX_COUNTRY_INDEX = 10000000000000000000;\r\n  uint128 constant FIFTY_TOKENS_INDEX = 100000000000000000000000000000000;\r\n  uint256 constant TRIBLE_TOKENS_INDEX = 1000000000000000000000000000000000000000000000;\r\n  uint256 constant DOUBLE_TOKENS_INDEX = 10000000000000000000000000000000000000000000000000000000000;\r\n  uint8 constant UNIVERSE_TOKEN_ID = 0;\r\n  uint public minSelfBuyPrice = 10 ether;\r\n  uint public minPriceForMiningUpgrade = 5 ether;\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function Universe() public {\r\n  }\r\n\r\n  function changePriceLimits(uint _minSelfBuyPrice, uint _minPriceForMiningUpgrade) public onlyCOO {\r\n    minSelfBuyPrice = _minSelfBuyPrice;\r\n    minPriceForMiningUpgrade = _minPriceForMiningUpgrade;\r\n  }\r\n\r\n  function getNextPrice(uint price, uint _tokenId) public pure returns (uint) {\r\n    if (_tokenId>DOUBLE_TOKENS_INDEX)\r\n      return price.mul(2);\r\n    if (_tokenId>TRIBLE_TOKENS_INDEX)\r\n      return price.mul(3);\r\n    if (_tokenId>FIFTY_TOKENS_INDEX)\r\n      return price.mul(3).div(2);\r\n    if (price < 1.2 ether)\r\n      return price.mul(200).div(91);\r\n    if (price < 5 ether)\r\n      return price.mul(150).div(91);\r\n    return price.mul(120).div(91);\r\n  }\r\n\r\n\r\n  function buyToken(uint _tokenId) public payable {\r\n    address oldOwner = tokenIndexToOwner[_tokenId];\r\n    uint256 sellingPrice = tokenIndexToPrice[_tokenId];\r\n    require(oldOwner!=msg.sender || sellingPrice > minSelfBuyPrice);\r\n    require(msg.value >= sellingPrice);\r\n    require(sellingPrice > 0);\r\n\r\n    uint256 purchaseExcess = msg.value.sub(sellingPrice);\r\n    uint256 payment = sellingPrice.mul(91).div(100);\r\n    uint256 feeOnce = sellingPrice.sub(payment).div(9);\r\n\r\n    // Update prices\r\n    tokenIndexToPrice[_tokenId] = getNextPrice(sellingPrice, _tokenId);\r\n    // Transfers the Token\r\n    tokenIndexToOwner[_tokenId] = msg.sender;\r\n    // clear any previously approved ownership exchange\r\n    delete tokenIndexToApproved[_tokenId];\r\n    // payout mining reward\r\n    if (_tokenId>MAX_SUBCONTINENT_INDEX) {\r\n      ycm.payoutMining(_tokenId, oldOwner, msg.sender);\r\n      if (sellingPrice > minPriceForMiningUpgrade)\r\n        ycm.levelUpMining(_tokenId);\r\n    }\r\n\r\n    if (_tokenId > 0) {\r\n      // Taxes for Universe owner\r\n      if (tokenIndexToOwner[UNIVERSE_TOKEN_ID]!=address(0))\r\n        tokenIndexToOwner[UNIVERSE_TOKEN_ID].transfer(feeOnce);\r\n      if (_tokenId > MAX_WORLD_INDEX) {\r\n        // Taxes for world owner\r\n        if (tokenIndexToOwner[_tokenId % MAX_WORLD_INDEX]!=address(0))\r\n          tokenIndexToOwner[_tokenId % MAX_WORLD_INDEX].transfer(feeOnce);\r\n        if (_tokenId > MAX_CONTINENT_INDEX) {\r\n          // Taxes for continent owner\r\n          if (tokenIndexToOwner[_tokenId % MAX_CONTINENT_INDEX]!=address(0))\r\n            tokenIndexToOwner[_tokenId % MAX_CONTINENT_INDEX].transfer(feeOnce);\r\n          if (_tokenId > MAX_SUBCONTINENT_INDEX) {\r\n            // Taxes for subcontinent owner\r\n            if (tokenIndexToOwner[_tokenId % MAX_SUBCONTINENT_INDEX]!=address(0))\r\n              tokenIndexToOwner[_tokenId % MAX_SUBCONTINENT_INDEX].transfer(feeOnce);\r\n            if (_tokenId > MAX_COUNTRY_INDEX) {\r\n              // Taxes for country owner\r\n              if (tokenIndexToOwner[_tokenId % MAX_COUNTRY_INDEX]!=address(0))\r\n                tokenIndexToOwner[_tokenId % MAX_COUNTRY_INDEX].transfer(feeOnce);\r\n              lastSubTokenBuyer[UNIVERSE_TOKEN_ID] = msg.sender;\r\n              lastSubTokenBuyer[_tokenId % MAX_WORLD_INDEX] = msg.sender;\r\n              lastSubTokenBuyer[_tokenId % MAX_CONTINENT_INDEX] = msg.sender;\r\n              lastSubTokenBuyer[_tokenId % MAX_SUBCONTINENT_INDEX] = msg.sender;\r\n              lastSubTokenBuyer[_tokenId % MAX_COUNTRY_INDEX] = msg.sender;\r\n            } else {\r\n              if (lastSubTokenBuyer[_tokenId] != address(0))\r\n                lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\r\n            }\r\n          } else {\r\n            if (lastSubTokenBuyer[_tokenId] != address(0))\r\n              lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\r\n          }\r\n        } else {\r\n          if (lastSubTokenBuyer[_tokenId] != address(0))\r\n            lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\r\n        }\r\n      } else {\r\n        if (lastSubTokenBuyer[_tokenId] != address(0))\r\n          lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\r\n      }\r\n    } else {\r\n      if (lastSubTokenBuyer[_tokenId] != address(0))\r\n        lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\r\n    }\r\n    // Taxes for collectible creator (first owner)\r\n    if (subTokenCreator[_tokenId]!=address(0))\r\n      subTokenCreator[_tokenId].transfer(feeOnce);\r\n    // Payment for old owner\r\n    if (oldOwner != address(0)) {\r\n      oldOwner.transfer(payment);\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\r\n    Transfer(oldOwner, msg.sender, _tokenId);\r\n    // refund when paid too much\r\n    if (purchaseExcess>0)\r\n      msg.sender.transfer(purchaseExcess);\r\n  }\r\n  \r\n  /// For creating Collectible\r\n  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external onlyYCC {\r\n    tokenIndexToPrice[tokenId] = _price;\r\n    tokenIndexToOwner[tokenId] = owner;\r\n    subTokenCreator[tokenId] = creator;\r\n    Birth(tokenId, _price);\r\n    tokens.push(tokenId);\r\n  }\r\n\r\n  function lastSubTokenBuyerOf(uint tokenId) public view returns(address) {\r\n    return lastSubTokenBuyer[tokenId];\r\n  }\r\n  function lastSubTokenCreatorOf(uint tokenId) public view returns(address) {\r\n    return subTokenCreator[tokenId];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastSubTokenBuyerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minSelfBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_minPriceForMiningUpgrade\",\"type\":\"uint256\"}],\"name\":\"changePriceLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"youCollectContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createCollectible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yctContract\",\"type\":\"address\"}],\"name\":\"setYctContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPriceForMiningUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yccContract\",\"type\":\"address\"}],\"name\":\"setYccContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastSubTokenCreatorOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSelfBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"addYouCollectContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ycmContract\",\"type\":\"address\"}],\"name\":\"setYcmContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yccContract\",\"type\":\"address\"},{\"name\":\"yctContract\",\"type\":\"address\"},{\"name\":\"ycmContract\",\"type\":\"address\"},{\"name\":\"otherContracts\",\"type\":\"address[]\"}],\"name\":\"setMainYouCollectContractAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"RedButton\",\"type\":\"event\"}]","ContractName":"Universe","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d7d9b6f4d043d0ca8b83149af870f074c558b3680f62aefa7f705e38919ac66"}]}