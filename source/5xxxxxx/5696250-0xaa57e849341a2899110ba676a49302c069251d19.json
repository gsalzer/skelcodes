{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: contracts/libs/Ownable.sol\r\n\r\n/**\r\n* @title Ownable\r\n* @dev Manages ownership of the contracts\r\n*/\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isOwner(address _address) public constant returns (bool) {\r\n        return _address == owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libs/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS paused\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS NOT paused\r\n    */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function _unpause() internal whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/libs/BaseStorage.sol\r\n\r\ncontract BaseStorage is Pausable {\r\n\r\n    event AccessAllowed(address _address);\r\n    event AccessDenied(address _address);\r\n\r\n    mapping (address => bool) public allowed;\r\n    address public developer;\r\n\r\n\r\n    modifier canWrite() {\r\n        require(allowed[msg.sender] || isOwner(msg.sender)\r\n            || (msg.sender == developer));\r\n        _;\r\n    }\r\n\r\n    function setDeveloper(address _address) public onlyOwner {\r\n        require(_address != address(0));\r\n        developer = _address;\r\n    }\r\n\r\n    function allow(address _address) external canWrite {\r\n        require(_address != address(0));\r\n        allowed[_address] = true;\r\n        AccessAllowed(_address);\r\n    }\r\n\r\n    function denied(address _address) external canWrite {\r\n        delete allowed[_address];\r\n        AccessDenied(_address);\r\n    }\r\n\r\n    function isAllowed(address _address) external constant returns (bool) {\r\n        return allowed[_address];\r\n    }\r\n}\r\n\r\n// File: contracts/libs/AccessControlStorage.sol\r\n\r\ncontract AccessControlStorage is BaseStorage {\r\n\r\n\r\n    mapping (address => bool) public admins;\r\n    mapping (uint => address) public contracts;\r\n\r\n    function addAdmin(address _address) public onlyOwner {\r\n        require(_address != address(0));\r\n        admins[_address] = true;\r\n    }\r\n\r\n    function isAdmin(address _address) public constant returns (bool) {\r\n        return admins[_address];\r\n    }\r\n\r\n    function removeAdmin(address _address) public onlyOwner {\r\n        require(_address != address(0));\r\n        delete admins[_address];\r\n    }\r\n\r\n    function setContract(uint _signature, address _address) external canWrite {\r\n        contracts[_signature] = _address;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/AuctionStorage.sol\r\n\r\ncontract AuctionStorage is BaseStorage {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint startedAt;\r\n        // true = started by team, false = started by ordinary user\r\n        bool byTeam;\r\n    }\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint => Auction) public tokenIdToAuction;\r\n    uint auctionsCounter = 0;\r\n    uint8 public secondarySaleCut = 4;\r\n\r\n    function addAuction(\r\n        uint _tokenId,\r\n        uint _startingPrice,\r\n        uint _endingPrice,\r\n        uint _duration,\r\n        address _seller) public canWrite {\r\n        require(!_isOnAuction(_tokenId));\r\n        tokenIdToAuction[_tokenId] = Auction({\r\n            seller: _seller,\r\n            startingPrice: uint128(_startingPrice),\r\n            endingPrice: uint128(_endingPrice),\r\n            duration: uint64(_duration),\r\n            startedAt: now,\r\n            byTeam: false\r\n        });\r\n        auctionsCounter++;\r\n    }\r\n\r\n    function initAuction(\r\n        uint _tokenId,\r\n        uint _startingPrice,\r\n        uint _endingPrice,\r\n        uint _startedAt,\r\n        uint _duration,\r\n        address _seller,\r\n        bool _byTeam) public canWrite {\r\n        require(!_isOnAuction(_tokenId));\r\n        tokenIdToAuction[_tokenId] = Auction({\r\n            seller: _seller,\r\n            startingPrice: uint128(_startingPrice),\r\n            endingPrice: uint128(_endingPrice),\r\n            duration: uint64(_duration),\r\n            startedAt: _startedAt,\r\n            byTeam: _byTeam\r\n        });\r\n        auctionsCounter++;\r\n    }\r\n\r\n    function addReleaseAuction(\r\n        uint _tokenId,\r\n        uint _startingPrice,\r\n        uint _endingPrice,\r\n        uint _startedAt,\r\n        uint _duration) public canWrite {\r\n        bool _byTeam = true;\r\n        address _seller = owner;\r\n        initAuction(\r\n            _tokenId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _startedAt,\r\n            _duration,\r\n            _seller,\r\n            _byTeam\r\n        );\r\n    }\r\n\r\n    function _isOnAuction(uint _tokenId)\r\n        internal constant returns (bool) {\r\n        return (tokenIdToAuction[_tokenId].startedAt > 0);\r\n    }\r\n\r\n    function isOnAuction(uint _tokenId)\r\n        external constant returns (bool) {\r\n        return _isOnAuction(_tokenId);\r\n    }\r\n\r\n    function removeAuction(uint _tokenId) public canWrite {\r\n        require(_isOnAuction(_tokenId));\r\n        delete tokenIdToAuction[_tokenId];\r\n        auctionsCounter--;\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        constant\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction memory auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(_tokenId));\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    function getAuctionSeller(uint256 _tokenId)\r\n        public constant returns (address) {\r\n        return tokenIdToAuction[_tokenId].seller;\r\n    }\r\n\r\n    function getAuctionStartedAt(uint256 _tokenId)\r\n        public constant returns (uint) {\r\n        return tokenIdToAuction[_tokenId].startedAt;\r\n    }\r\n\r\n    function getAuctionEnd(uint _tokenId)\r\n        public constant returns (uint) {\r\n        Auction memory auction = tokenIdToAuction[_tokenId];\r\n        return auction.startedAt + auction.duration;\r\n    }\r\n\r\n    function getAuctionsCount() public constant returns (uint) {\r\n        return auctionsCounter;\r\n    }\r\n\r\n    function canBeCanceled(uint _tokenId) external constant returns (bool) {\r\n        return getAuctionEnd(_tokenId) <= now;\r\n    }\r\n\r\n    function isSecondary(uint _tokenId) public constant returns (bool _is) {\r\n        return (tokenIdToAuction[_tokenId].byTeam == false);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libs/EditionStorage.sol\r\n\r\ncontract EditionStorage is BaseStorage {\r\n\r\n    uint public offset = 1000000;\r\n    uint public offsetIndex = 1;\r\n    uint8[3] public defaultEditionLimits = [10, 89, 200];\r\n    mapping (uint => mapping (uint8 => uint8)) public editionCounts;\r\n    mapping (uint => mapping (uint8 => uint8)) public editionLimits;\r\n    mapping (uint => uint) public lastEditionOf;\r\n\r\n    function setOffset(uint _offset) external onlyOwner {\r\n        offset = _offset;\r\n    }\r\n\r\n    function getOffsetIndex() public constant returns (uint) {\r\n        return offset + offsetIndex;\r\n    }\r\n\r\n    function nextOffsetIndex() public canWrite {\r\n        offsetIndex++;\r\n    }\r\n\r\n    function canCreateEdition(uint _tokenId, uint8 _generation)\r\n        public constant returns (bool) {\r\n        uint8 actual = editionCounts[_tokenId][_generation - 1];\r\n        uint limit = editionLimits[_tokenId][_generation - 1];\r\n        return (actual < limit);\r\n    }\r\n\r\n    function isValidGeneration(uint8 _generation)\r\n        public constant returns (bool) {\r\n        return (_generation >= 1 && _generation <= 3);\r\n    }\r\n\r\n    function increaseGenerationCount(uint _tokenId, uint8 _generation)\r\n        public canWrite {\r\n        require(canCreateEdition(_tokenId, _generation));\r\n        require(isValidGeneration(_generation));\r\n        uint8 _generationIndex = _generation - 1;\r\n        editionCounts[_tokenId][_generationIndex]++;\r\n    }\r\n\r\n    function getEditionsCount(uint _tokenId)\r\n        external constant returns (uint8[3])  {\r\n        return [\r\n            editionCounts[_tokenId][0],\r\n            editionCounts[_tokenId][1],\r\n            editionCounts[_tokenId][2]\r\n        ];\r\n    }\r\n\r\n    function setLastEditionOf(uint _tokenId, uint _editionId)\r\n        public canWrite {\r\n        lastEditionOf[_tokenId] = _editionId;\r\n    }\r\n\r\n    function getEditionLimits(uint _tokenId)\r\n        external constant returns (uint8[3])  {\r\n        return [\r\n            editionLimits[_tokenId][0],\r\n            editionLimits[_tokenId][1],\r\n            editionLimits[_tokenId][2]\r\n        ];\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/libs/PaintingInformationStorage.sol\r\n\r\ncontract PaintingInformationStorage {\r\n\r\n    struct PaintingInformation {\r\n        string name;\r\n        string artist;\r\n    }\r\n\r\n    mapping (uint => PaintingInformation) public information;\r\n}\r\n\r\n// File: contracts/libs/PaintingStorage.sol\r\n\r\ncontract PaintingStorage is BaseStorage {\r\n\r\n    struct Painting {\r\n        uint parentId;\r\n        uint originalId;\r\n        uint createdAt;\r\n        uint completedAt;\r\n        uint8 generation;\r\n        uint8 speedIndex;\r\n        uint artistId;\r\n        uint releasedAt;\r\n        bool isFinal;\r\n    }\r\n\r\n    uint32[10] public speeds = [\r\n        uint32(8760 hours), // 365 days\r\n        uint32(6480 hours), // 270 days\r\n        uint32(4320 hours), // 180 days\r\n        uint32(2880 hours), // 120 days\r\n        uint32(1920 hours), // 80 days\r\n        uint32(960 hours), // 40 days\r\n        uint32(480 hours), // 20 days\r\n        uint32(240 hours), // 10 days\r\n        uint32(120 hours), // 5 days\r\n        uint32(24 hours) // 1 day\r\n    ];\r\n\r\n    uint32[10] public speedsTest = [\r\n        uint32(8760 seconds),\r\n        uint32(6480 seconds),\r\n        uint32(4320 seconds),\r\n        uint32(2880 seconds),\r\n        uint32(1920 seconds),\r\n        uint32(960 seconds),\r\n        uint32(480 seconds),\r\n        uint32(240 seconds),\r\n        uint32(120 seconds),\r\n        uint32(24 seconds)\r\n    ];\r\n\r\n    uint32[10] public speedsDev = [\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds),\r\n        uint32(0 seconds)\r\n    ];\r\n\r\n    mapping (uint => address) public paintingIndexToOwner;\r\n    mapping (uint => Painting) public paintings;\r\n    mapping (uint => address) public paintingIndexToApproved;\r\n    uint[] public paintingIds;\r\n    mapping (uint => uint) public paintingIdToIndex;\r\n    uint public paintingsCount;\r\n    uint public totalPaintingsCount;\r\n    mapping (uint => bool) public isCanceled;\r\n    mapping (uint => bool) public isReleased;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    // Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n\r\n    modifier isNew(uint _tokenId) {\r\n        require(paintings[_tokenId].createdAt == 0);\r\n        _;\r\n    }\r\n\r\n    function exists(uint _tokenId) external constant returns (bool) {\r\n        return paintings[_tokenId].createdAt != 0;\r\n    }\r\n\r\n    function increaseOwnershipTokenCount(address _address) public canWrite {\r\n        ownershipTokenCount[_address]++;\r\n    }\r\n\r\n    function decreaseOwnershipTokenCount(address _address) public canWrite {\r\n        ownershipTokenCount[_address]--;\r\n    }\r\n\r\n    function setOwnership(uint _tokenId, address _address) public canWrite {\r\n        paintingIndexToOwner[_tokenId] = _address;\r\n    }\r\n\r\n    function getPainting(uint _tokenId) external constant returns (\r\n        address owner,\r\n        uint parent,\r\n        uint createdAt,\r\n        uint completedAt,\r\n        uint8 generation,\r\n        uint8 speed) {\r\n        return (\r\n            paintingIndexToOwner[_tokenId],\r\n            paintings[_tokenId].parentId,\r\n            paintings[_tokenId].createdAt,\r\n            paintings[_tokenId].completedAt,\r\n            paintings[_tokenId].generation,\r\n            paintings[_tokenId].speedIndex + 1\r\n        );\r\n    }\r\n\r\n    function approve(uint _tokenId, address _claimant) external canWrite {\r\n        paintingIndexToApproved[_tokenId] = _claimant;\r\n    }\r\n\r\n    function isApprovedFor(uint _tokenId, address _claimant) external constant returns (bool) {\r\n        return paintingIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function decreaseSpeed(uint _tokenId) public canWrite() {\r\n        uint8 _speed = paintings[_tokenId].speedIndex;\r\n\r\n        if (_speed > 0) {\r\n            paintings[_tokenId].speedIndex--;\r\n        }\r\n    }\r\n\r\n    function getPaintingOwner(uint _tokenId)\r\n        external constant returns (address) {\r\n        return paintingIndexToOwner[_tokenId];\r\n    }\r\n\r\n    function getPaintingGeneration(uint _tokenId)\r\n        public constant returns (uint8) {\r\n        return paintings[_tokenId].generation;\r\n    }\r\n\r\n    function getPaintingArtistId(uint _tokenId)\r\n        public constant returns (uint artistId) {\r\n        return paintings[_tokenId].artistId;\r\n    }\r\n\r\n    function getPaintingSpeed(uint _tokenId)\r\n        external constant returns (uint8) {\r\n        return paintings[_tokenId].speedIndex + 1;\r\n    }\r\n\r\n    function getPaintingOriginal(uint _tokenId)\r\n        external constant returns (uint) {\r\n        return paintings[_tokenId].originalId;\r\n    }\r\n\r\n    function getOwnershipTokenCount(address _address)\r\n        external constant returns (uint) {\r\n        return ownershipTokenCount[_address];\r\n    }\r\n\r\n    function isReady(uint _tokenId)\r\n        public constant returns (bool) {\r\n        return paintings[_tokenId].completedAt <= now;\r\n    }\r\n\r\n    function getPaintingIdAtIndex(uint _index)\r\n        public constant returns (uint) {\r\n        return paintingIds[_index];\r\n    }\r\n\r\n    function canBeChanged(uint _tokenId) public constant returns (bool _can) {\r\n        return paintings[_tokenId].isFinal == false;\r\n    }\r\n\r\n    function sealForChanges(uint _tokenId) public canWrite {\r\n        if (paintings[_tokenId].isFinal == false) {\r\n            paintings[_tokenId].isFinal = true;\r\n        }\r\n    }\r\n\r\n    function canBeBidden(uint _tokenId) public constant returns (bool _can) {\r\n        return (paintings[_tokenId].releasedAt <= now);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/BitpaintingStorage.sol\r\n\r\ncontract BitpaintingStorage is PaintingStorage, PaintingInformationStorage, AccessControlStorage, AuctionStorage, EditionStorage {\r\n\r\n    /// 0 = production mode\r\n    /// 1 = testing mode\r\n    /// 2 = development mode\r\n    uint8 mode;\r\n\r\n    function BitpaintingStorage(uint8 _mode) public {\r\n        require(_mode >= 0 && _mode <=2);\r\n        mode = _mode;\r\n    }\r\n\r\n    function hasEditionInProgress(uint _tokenId)\r\n        external constant returns (bool) {\r\n        uint edition = lastEditionOf[_tokenId];\r\n        if (edition == 0) {\r\n            return false;\r\n        }\r\n\r\n        return !isReady(edition);\r\n    }\r\n\r\n    function hasEmptyEditionSlots(uint _tokenId)\r\n        external constant returns (bool) {\r\n        uint originalId = paintings[_tokenId].originalId;\r\n        if (originalId == 0) {\r\n            originalId = _tokenId;\r\n        }\r\n        uint8 generation = paintings[_tokenId].generation;\r\n        uint8 limit = editionLimits[originalId][generation];\r\n        uint8 current = editionCounts[originalId][generation];\r\n        return (current < limit);\r\n    }\r\n\r\n    function resetPainting(uint _tokenId) public canWrite {\r\n        require(canBeChanged(_tokenId));\r\n\r\n        isCanceled[_tokenId] = true;\r\n        paintingsCount--;\r\n        delete paintings[_tokenId];\r\n    }\r\n\r\n    function createPainting(\r\n        address _owner,\r\n        uint _tokenId,\r\n        uint _parentId,\r\n        uint8 _generation,\r\n        uint8 _speed,\r\n        uint _artistId,\r\n        uint _releasedAt\r\n    ) public isNew(_tokenId) canWrite {\r\n        require(now <= _releasedAt);\r\n        require(_speed >= 1 && _speed <= 10);\r\n        _speed--;\r\n\r\n        uint _createdAt = now;\r\n        uint _completedAt;\r\n        if (_generation == 0) {\r\n            _completedAt = now;\r\n        } else {\r\n            uint _parentSpeed = paintings[_parentId].speedIndex;\r\n            if (mode == 2) {\r\n                _completedAt = now + speedsDev[_parentSpeed];\r\n            } else {\r\n                if (mode == 1) {\r\n                    _completedAt = now + speedsTest[_parentSpeed];\r\n                } else {\r\n                    _completedAt = now + speeds[_parentSpeed];\r\n                }\r\n            }\r\n        }\r\n\r\n        uint _originalId;\r\n        if (_generation == 0) {\r\n            _originalId = _tokenId;\r\n        } else {\r\n            if (_generation == 1) {\r\n                _originalId = _parentId;\r\n            } else {\r\n                _originalId = paintings[_parentId].originalId;\r\n            }\r\n        }\r\n\r\n        paintings[_tokenId] = Painting({\r\n            parentId: _parentId,\r\n            originalId: _originalId,\r\n            createdAt: _createdAt,\r\n            generation: _generation,\r\n            speedIndex: _speed,\r\n            completedAt: _completedAt,\r\n            artistId: _artistId,\r\n            releasedAt: _releasedAt,\r\n            isFinal: (_generation != 0) // if generation == 1 or 2 or 3, so it cannot be changed\r\n        });\r\n\r\n        if (!isReleased[_tokenId]) {\r\n            isReleased[_tokenId] = true;\r\n            paintingIds.push(_tokenId);\r\n            paintingIdToIndex[_tokenId] = totalPaintingsCount;\r\n            increaseOwnershipTokenCount(_owner);\r\n            totalPaintingsCount++;\r\n        }\r\n        isCanceled[_tokenId] = false;\r\n        setOwnership(_tokenId, _owner);\r\n        paintingsCount++;\r\n    }\r\n\r\n    function setEditionLimits(\r\n        uint _tokenId,\r\n        uint8 _gen1,\r\n        uint8 _gen2,\r\n        uint8 _gen3)\r\n        public canWrite {\r\n        require(canBeChanged(_tokenId));\r\n\r\n        editionLimits[_tokenId][0] = _gen1;\r\n        editionLimits[_tokenId][1] = _gen2;\r\n        editionLimits[_tokenId][2] = _gen3;\r\n    }\r\n\r\n    function resetEditionLimits(uint _tokenId) public canWrite {\r\n        setEditionLimits(_tokenId, 0, 0, 0);\r\n    }\r\n\r\n    function createEditionMeta(uint _tokenId) public canWrite {\r\n        uint _originalId = paintings[_tokenId].originalId;\r\n        nextOffsetIndex();\r\n        uint editionId = getOffsetIndex();\r\n        setLastEditionOf(_tokenId, editionId);\r\n\r\n        uint8 _generation = getPaintingGeneration(_tokenId) + 1;\r\n        increaseGenerationCount(_originalId, _generation);\r\n    }\r\n\r\n    function purgeInformation(uint _tokenId) public canWrite {\r\n        require(canBeChanged(_tokenId));\r\n\r\n        delete information[_tokenId];\r\n    }\r\n\r\n    function setPaintingName(uint _tokenId, string _name) public canWrite {\r\n        information[_tokenId].name = _name;\r\n    }\r\n\r\n    function setPaintingArtist(uint _tokenId, string _name) public canWrite {\r\n        information[_tokenId].artist = _name;\r\n    }\r\n\r\n    function getTokensOnAuction() public constant returns (uint[] tokens) {\r\n        tokens = new uint[](auctionsCounter);\r\n        uint pointer = 0;\r\n\r\n        for(uint index = 0; index < totalPaintingsCount; index++) {\r\n            uint tokenId = getPaintingIdAtIndex(index);\r\n\r\n            if (isCanceled[tokenId]) {\r\n                continue;\r\n            }\r\n\r\n            if (!_isOnAuction(tokenId)) {\r\n                continue;\r\n            }\r\n\r\n            tokens[pointer] = tokenId;\r\n            pointer++;\r\n        }\r\n    }\r\n\r\n    function getPaintingName(uint _tokenId) public constant returns (string) {\r\n        uint id = paintings[_tokenId].originalId;\r\n        return information[id].name;\r\n    }\r\n\r\n    function getPaintingArtist(uint _tokenId)\r\n        public constant returns (string) {\r\n        uint id = paintings[_tokenId].originalId;\r\n        return information[id].artist;\r\n    }\r\n\r\n    function signature() external constant returns (bytes4) {\r\n        return bytes4(keccak256(\"storage\"));\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"setOffset\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canBeCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"editionCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasEmptyEditionSlots\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPainting\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"parent\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"completedAt\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint8\"},{\"name\":\"speed\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paintingsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"decreaseOwnershipTokenCount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingArtist\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sealForChanges\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"editionLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultEditionLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeAuction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPaintingsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionStartedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOnAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensOnAuction\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"setLastEditionOf\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"speedsTest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"speeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resetEditionLimits\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint8\"}],\"name\":\"canCreateEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondarySaleCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEditionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[3]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasEditionInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint8\"}],\"name\":\"increaseGenerationCount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"increaseOwnershipTokenCount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createEditionMeta\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_gen1\",\"type\":\"uint8\"},{\"name\":\"_gen2\",\"type\":\"uint8\"},{\"name\":\"_gen3\",\"type\":\"uint8\"}],\"name\":\"setEditionLimits\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextOffsetIndex\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canBeChanged\",\"outputs\":[{\"name\":\"_can\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resetPainting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_parentId\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint8\"},{\"name\":\"_speed\",\"type\":\"uint8\"},{\"name\":\"_artistId\",\"type\":\"uint256\"},{\"name\":\"_releasedAt\",\"type\":\"uint256\"}],\"name\":\"createPainting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"information\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"artist\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isSecondary\",\"outputs\":[{\"name\":\"_is\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_startedAt\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addReleaseAuction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paintingIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paintingIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"decreaseSpeed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paintingIdToIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPaintingIdAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingOriginal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purgeInformation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_startedAt\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_byTeam\",\"type\":\"bool\"}],\"name\":\"initAuction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOwnershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_claimant\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paintingIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paintings\",\"outputs\":[{\"name\":\"parentId\",\"type\":\"uint256\"},{\"name\":\"originalId\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"completedAt\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint8\"},{\"name\":\"speedIndex\",\"type\":\"uint8\"},{\"name\":\"artistId\",\"type\":\"uint256\"},{\"name\":\"releasedAt\",\"type\":\"uint256\"},{\"name\":\"isFinal\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"addAuction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaintingArtistId\",\"outputs\":[{\"name\":\"artistId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setPaintingArtist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint128\"},{\"name\":\"endingPrice\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint64\"},{\"name\":\"startedAt\",\"type\":\"uint256\"},{\"name\":\"byTeam\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"speedsDev\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canBeBidden\",\"outputs\":[{\"name\":\"_can\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_generation\",\"type\":\"uint8\"}],\"name\":\"isValidGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEditionOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEditionLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[3]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setPaintingName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOffsetIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"denied\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_claimant\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDeveloper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offsetIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mode\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AccessAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"BitpaintingStorage","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5b1bf9cb59ba4dcb73a87c418d178af2527641ea44bf44f311b170f7d242ab9e"}]}