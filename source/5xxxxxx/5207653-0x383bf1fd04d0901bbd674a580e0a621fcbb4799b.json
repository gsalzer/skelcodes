{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n// inspired by\r\n// https://github.com/axiomzen/cryptokitties-bounty/blob/master/contracts/KittyAccessControl.sol\r\ncontract AccessControl {\r\n    /// @dev The addresses of the accounts (or contracts) that can execute actions within each roles\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n\r\n    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev The AccessControl constructor sets the original C roles of the contract to the sender account\r\n    function AccessControl() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for any CLevel functionality\r\n    modifier onlyCLevel() {\r\n        require(msg.sender == ceoAddress || msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Pause the smart contract. Only can be called by the CEO\r\n    function pause() public onlyCEO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Only can be called by the CEO\r\n    function unpause() public onlyCEO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Interface for required functionality in the ERC721 standard\r\n * for non-fungible tokens.\r\n *\r\n * Author: Nadav Hollander (nadav at dharma.io)\r\n * https://github.com/dharmaprotocol/NonFungibleToken/blob/master/contracts/ERC721.sol\r\n */\r\ncontract ERC721 {\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// For querying totalSupply of token.\r\n    function totalSupply() public view returns (uint256 _totalSupply);\r\n\r\n    /// For querying balance of a particular account.\r\n    /// @param _owner The address for balance query.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\r\n    /// For querying owner of token.\r\n    /// @param _tokenId The tokenID for owner inquiry.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom()\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    // NOT IMPLEMENTED\r\n    // function getApproved(uint256 _tokenId) public view returns (address _approved);\r\n\r\n    /// Third-party initiates transfer of token from address _from to address _to.\r\n    /// @param _from The address for the token to be transferred from.\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    /// Owner initates the transfer of the token to another account.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the token to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    ///\r\n    function implementsERC721() public view returns (bool _implementsERC721);\r\n\r\n    // EXTRA\r\n    /// @notice Allow pre-approved user to take ownership of a token.\r\n    /// @param _tokenId The ID of the token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n\r\ncontract DetailedERC721 is ERC721 {\r\n\tfunction name() public view returns (string _name);\r\n\tfunction symbol() public view returns (string _symbol);\r\n}\r\n\r\n\r\ncontract CryptoDoggies is AccessControl, DetailedERC721 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tevent TokenCreated(uint256 tokenId, string name, bytes5 dna, uint256 price, address owner);\r\n\tevent TokenSold(\r\n\t\tuint256 indexed tokenId,\r\n\t\tstring name,\r\n\t\tbytes5 dna,\r\n\t\tuint256 sellingPrice,\r\n\t\tuint256 newPrice,\r\n\t\taddress indexed oldOwner,\r\n\t\taddress indexed newOwner\r\n\t\t);\r\n\r\n\tmapping (uint256 => address) private tokenIdToOwner;\r\n\tmapping (uint256 => uint256) private tokenIdToPrice;\r\n\tmapping (address => uint256) private ownershipTokenCount;\r\n\tmapping (uint256 => address) private tokenIdToApproved;\r\n\r\n\tstruct Doggy {\r\n\t\tstring name;\r\n\t\tbytes5 dna;\r\n\t}\r\n\r\n\tDoggy[] private doggies;\r\n\r\n\tuint256 private startingPrice = 0.01 ether;\r\n\tbool private erc721Enabled = false;\r\n\r\n\tmodifier onlyERC721() {\r\n\t\trequire(erc721Enabled);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction createToken(string _name, address _owner, uint256 _price) public onlyCLevel {\r\n\t\trequire(_owner != address(0));\r\n\t\trequire(_price >= startingPrice);\r\n\r\n\t\tbytes5 _dna = _generateRandomDna();\r\n\t\t_createToken(_name, _dna, _owner, _price);\r\n\t}\r\n\r\n\tfunction createToken(string _name) public onlyCLevel {\r\n\t\tbytes5 _dna = _generateRandomDna();\r\n\t\t_createToken(_name, _dna, address(this), startingPrice);\r\n\t}\r\n\r\n\tfunction _generateRandomDna() private view returns (bytes5) {\r\n\t\tuint256 lastBlockNumber = block.number - 1;\r\n\t\tbytes32 hashVal = bytes32(block.blockhash(lastBlockNumber));\r\n\t\tbytes5 dna = bytes5((hashVal & 0xffffffff) << 216);\r\n\t\treturn dna;\r\n\t}\r\n\r\n\tfunction _createToken(string _name, bytes5 _dna, address _owner, uint256 _price) private {\r\n\t\tDoggy memory _doggy = Doggy({\r\n\t\t\tname: _name,\r\n\t\t\tdna: _dna\r\n\t\t});\r\n\t\tuint256 newTokenId = doggies.push(_doggy) - 1;\r\n\t\ttokenIdToPrice[newTokenId] = _price;\r\n\r\n\t\tTokenCreated(newTokenId, _name, _dna, _price, _owner);\r\n\r\n\t\t_transfer(address(0), _owner, newTokenId);\r\n\t}\r\n\r\n\tfunction getToken(uint256 _tokenId) public view returns (\r\n\t\tstring _tokenName,\r\n\t\tbytes5 _dna,\r\n\t\tuint256 _price,\r\n\t\tuint256 _nextPrice,\r\n\t\taddress _owner\r\n\t) {\r\n\t\t_tokenName = doggies[_tokenId].name;\r\n\t\t_dna = doggies[_tokenId].dna;\r\n\t\t_price = tokenIdToPrice[_tokenId];\r\n\t\t_nextPrice = nextPriceOf(_tokenId);\r\n\t\t_owner = tokenIdToOwner[_tokenId];\r\n\t}\r\n\r\n\tfunction getAllTokens() public view returns (\r\n\t\tuint256[],\r\n\t\tuint256[],\r\n\t\taddress[]\r\n\t) {\r\n\t\tuint256 total = totalSupply();\r\n\t\tuint256[] memory prices = new uint256[](total);\r\n\t\tuint256[] memory nextPrices = new uint256[](total);\r\n\t\taddress[] memory owners = new address[](total);\r\n\r\n\t\tfor (uint256 i = 0; i < total; i++) {\r\n\t\t\tprices[i] = tokenIdToPrice[i];\r\n\t\t\tnextPrices[i] = nextPriceOf(i);\r\n\t\t\towners[i] = tokenIdToOwner[i];\r\n\t\t}\r\n\r\n\t\treturn (prices, nextPrices, owners);\r\n\t}\r\n\r\n\tfunction tokensOf(address _owner) public view returns(uint256[]) {\r\n\t\tuint256 tokenCount = balanceOf(_owner);\r\n\t\tif (tokenCount == 0) {\r\n\t\t\treturn new uint256[](0);\r\n\t\t} else {\r\n\t\t\tuint256[] memory result = new uint256[](tokenCount);\r\n\t\t\tuint256 total = totalSupply();\r\n\t\t\tuint256 resultIndex = 0;\r\n\r\n\t\t\tfor (uint256 i = 0; i < total; i++) {\r\n\t\t\t\tif (tokenIdToOwner[i] == _owner) {\r\n\t\t\t\t\tresult[resultIndex] = i;\r\n\t\t\t\t\tresultIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawBalance(address _to, uint256 _amount) public onlyCEO {\r\n\t\trequire(_amount <= this.balance);\r\n\r\n\t\tif (_amount == 0) {\r\n\t\t\t_amount = this.balance;\r\n\t\t}\r\n\r\n\t\tif (_to == address(0)) {\r\n\t\t\tceoAddress.transfer(_amount);\r\n\t\t} else {\r\n\t\t\t_to.transfer(_amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction purchase(uint256 _tokenId) public payable whenNotPaused {\r\n\t\taddress oldOwner = ownerOf(_tokenId);\r\n\t\taddress newOwner = msg.sender;\r\n\t\tuint256 sellingPrice = priceOf(_tokenId);\r\n\r\n\t\trequire(oldOwner != address(0));\r\n\t\trequire(newOwner != address(0));\r\n\t\trequire(oldOwner != newOwner);\r\n\t\trequire(!_isContract(newOwner));\r\n\t\trequire(sellingPrice > 0);\r\n\t\trequire(msg.value >= sellingPrice);\r\n\r\n\t\t_transfer(oldOwner, newOwner, _tokenId);\r\n\t\ttokenIdToPrice[_tokenId] = nextPriceOf(_tokenId);\r\n\t\tTokenSold(\r\n\t\t\t_tokenId,\r\n\t\t\tdoggies[_tokenId].name,\r\n\t\t\tdoggies[_tokenId].dna,\r\n\t\t\tsellingPrice,\r\n\t\t\tpriceOf(_tokenId),\r\n\t\t\toldOwner,\r\n\t\t\tnewOwner\r\n\t\t);\r\n\r\n\t\tuint256 excess = msg.value.sub(sellingPrice);\r\n\t\tuint256 contractCut = sellingPrice.mul(6).div(100); // 6% cut\r\n\r\n\t\tif (oldOwner != address(this)) {\r\n\t\t\toldOwner.transfer(sellingPrice.sub(contractCut));\r\n\t\t}\r\n\r\n\t\tif (excess > 0) {\r\n\t\t\tnewOwner.transfer(excess);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction priceOf(uint256 _tokenId) public view returns (uint256 _price) {\r\n\t\treturn tokenIdToPrice[_tokenId];\r\n\t}\r\n\r\n\tuint256 private increaseLimit1 = 0.02 ether;\r\n\tuint256 private increaseLimit2 = 0.5 ether;\r\n\tuint256 private increaseLimit3 = 2.0 ether;\r\n\tuint256 private increaseLimit4 = 5.0 ether;\r\n\r\n\tfunction nextPriceOf(uint256 _tokenId) public view returns (uint256 _nextPrice) {\r\n\t\tuint256 _price = priceOf(_tokenId);\r\n\t\tif (_price < increaseLimit1) {\r\n\t\t\treturn _price.mul(200).div(95);\r\n\t\t} else if (_price < increaseLimit2) {\r\n\t\t\treturn _price.mul(135).div(96);\r\n\t\t} else if (_price < increaseLimit3) {\r\n\t\t\treturn _price.mul(125).div(97);\r\n\t\t} else if (_price < increaseLimit4) {\r\n\t\t\treturn _price.mul(117).div(97);\r\n\t\t} else {\r\n\t\t\treturn _price.mul(115).div(98);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction enableERC721() public onlyCEO {\r\n\t\terc721Enabled = true;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256 _totalSupply) {\r\n\t\t_totalSupply = doggies.length;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 _balance) {\r\n\t\t_balance = ownershipTokenCount[_owner];\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n\t\t_owner = tokenIdToOwner[_tokenId];\r\n\t}\r\n\r\n\tfunction approve(address _to, uint256 _tokenId) public whenNotPaused onlyERC721 {\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\t\ttokenIdToApproved[_tokenId] = _to;\r\n\t\tApproval(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused onlyERC721 {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_owns(_from, _tokenId));\r\n\t\trequire(_approved(msg.sender, _tokenId));\r\n\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokenId) public whenNotPaused onlyERC721 {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\r\n\t\t_transfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction implementsERC721() public view whenNotPaused returns (bool) {\r\n\t\treturn erc721Enabled;\r\n\t}\r\n\r\n\tfunction takeOwnership(uint256 _tokenId) public whenNotPaused onlyERC721 {\r\n\t\trequire(_approved(msg.sender, _tokenId));\r\n\t\t_transfer(tokenIdToOwner[_tokenId], msg.sender, _tokenId);\r\n\t}\r\n\r\n\tfunction name() public view returns (string _name) {\r\n\t\t_name = \"CryptoDoggies\";\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string _symbol) {\r\n\t\t_symbol = \"CDT\";\r\n\t}\r\n\r\n\tfunction _owns(address _claimant, uint256 _tokenId) private view returns (bool) {\r\n\t\treturn tokenIdToOwner[_tokenId] == _claimant;\r\n\t}\r\n\r\n\tfunction _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n\t\treturn tokenIdToApproved[_tokenId] == _to;\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) private {\r\n\t\townershipTokenCount[_to]++;\r\n\t\ttokenIdToOwner[_tokenId] = _to;\r\n\r\n\t\tif (_from != address(0)) {\r\n\t\t\townershipTokenCount[_from]--;\r\n\t\t\tdelete tokenIdToApproved[_tokenId];\r\n\t\t}\r\n\r\n\t\tTransfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction _isContract(address addr) private view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly { size := extcodesize(addr) }\r\n\t\treturn size > 0;\r\n\t}\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_dna\",\"type\":\"bytes5\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dna\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dna\",\"type\":\"bytes5\"},{\"indexed\":false,\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoDoggies","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8fcb9a49abed5526f084a9b02dcb2f796a7df6b969acab1dfe99e6e74510342e"}]}