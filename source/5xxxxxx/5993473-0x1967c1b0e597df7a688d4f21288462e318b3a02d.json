{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface \r\n * \r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title OwnableWithAdmin \r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableWithAdmin {\r\n  address public owner;\r\n  address public adminOwner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    adminOwner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the admin.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == adminOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or admin.\r\n   */\r\n  modifier onlyOwnerOrAdmin() {\r\n    require(msg.sender == adminOwner || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current adminOwner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferAdminOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(adminOwner, newOwner);\r\n    adminOwner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function uint2str(uint i) internal pure returns (string){\r\n      if (i == 0) return \"0\";\r\n      uint j = i;\r\n      uint length;\r\n      while (j != 0){\r\n          length++;\r\n          j /= 10;\r\n      }\r\n      bytes memory bstr = new bytes(length);\r\n      uint k = length - 1;\r\n      while (i != 0){\r\n          bstr[k--] = byte(48 + i % 10);\r\n          i /= 10;\r\n      }\r\n      return string(bstr);\r\n  }\r\n \r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title LockedPrivatesale\r\n * @notice Contract is not payable.\r\n * Owner or admin can allocate tokens.\r\n * Tokens will be released in 3 steps / dates. \r\n *\r\n *\r\n */\r\ncontract LockedPrivatesale is OwnableWithAdmin {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private constant DECIMALFACTOR = 10**uint256(18);\r\n\r\n\r\n  event FundsBooked(address backer, uint256 amount, bool isContribution);\r\n  event LogTokenClaimed(address indexed _recipient, uint256 _amountClaimed, uint256 _totalAllocated, uint256 _grandTotalClaimed);\r\n  event LogNewAllocation(address indexed _recipient, uint256 _totalAllocated);\r\n  event LogRemoveAllocation(address indexed _recipient, uint256 _tokenAmountRemoved);\r\n  event LogOwnerAllocation(address indexed _recipient, uint256 _totalAllocated);\r\n   \r\n\r\n  // Amount of tokens claimed\r\n  uint256 public grandTotalClaimed = 0;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Amount of tokens Raised\r\n  uint256 public tokensTotal = 0;\r\n\r\n  // Max token amount\r\n  uint256 public hardCap = 0;\r\n  \r\n\r\n  //Tokens will be released in 3 steps/dates\r\n  uint256 public step1;\r\n  uint256 public step2;\r\n  uint256 public step3;\r\n\r\n  // Buyers total allocation\r\n  mapping (address => uint256) public allocationsTotal;\r\n\r\n  // User total Claimed\r\n  mapping (address => uint256) public totalClaimed;\r\n\r\n  // List of allocation step 1\r\n  mapping (address => uint256) public allocations1;\r\n\r\n  // List of allocation step 2\r\n  mapping (address => uint256) public allocations2;\r\n\r\n  // List of allocation step 3\r\n  mapping (address => uint256) public allocations3;\r\n\r\n  //Buyers\r\n  mapping(address => bool) public buyers;\r\n\r\n  //Buyers who received all there tokens\r\n  mapping(address => bool) public buyersReceived;\r\n\r\n  //List of all addresses\r\n  address[] public addresses;\r\n  \r\n \r\n  constructor(uint256 _step1, uint256 _step2, uint256 _step3, ERC20 _token) public {\r\n     \r\n    require(_token != address(0));\r\n\r\n    require(_step1 >= now);\r\n    require(_step2 >= _step1);\r\n    require(_step3 >= _step2);\r\n\r\n    step1       = _step1;\r\n    step2       = _step2;\r\n    step3       = _step3;\r\n\r\n    token = _token;\r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () public {\r\n    //Not payable\r\n  }\r\n\r\n\r\n\r\n  /**\r\n    * @dev Set allocation buy admin\r\n    * @param _recipient Users wallet\r\n    * @param _tokenAmount Amount Allocated tokens + 18 decimals\r\n    */\r\n  function setAllocation (address _recipient, uint256 _tokenAmount) onlyOwnerOrAdmin  public{\r\n      require(_tokenAmount > 0);      \r\n      require(_recipient != address(0)); \r\n\r\n      //Check hardCap \r\n      require(_validateHardCap(_tokenAmount));\r\n\r\n      //Allocate tokens\r\n      _setAllocation(_recipient, _tokenAmount);    \r\n\r\n      //Increese token amount\r\n      tokensTotal = tokensTotal.add(_tokenAmount);  \r\n\r\n      //Logg Allocation\r\n      emit LogOwnerAllocation(_recipient, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n    * @dev Remove allocation \r\n    * @param _recipient Users wallet\r\n    *  \r\n    */\r\n  function removeAllocation (address _recipient) onlyOwner  public{         \r\n      require(_recipient != address(0)); \r\n      require(totalClaimed[_recipient] == 0); //Check if user claimed tokens\r\n\r\n\r\n      //_recipient total amount\r\n      uint256 _tokenAmountRemoved = allocationsTotal[_recipient];\r\n\r\n      //Decreese token amount\r\n      tokensTotal = tokensTotal.sub(_tokenAmountRemoved);\r\n\r\n      //Reset allocations\r\n      allocations1[_recipient]      = 0; \r\n      allocations2[_recipient]      = 0; \r\n      allocations3[_recipient]      = 0;\r\n      allocationsTotal[_recipient]  = 0; // Remove  \r\n      \r\n      //Set buyer to false\r\n      buyers[_recipient] = false;\r\n\r\n      emit LogRemoveAllocation(_recipient, _tokenAmountRemoved);\r\n  }\r\n\r\n\r\n /**\r\n   * @dev Set internal allocation \r\n   *  _buyer The adress of the buyer\r\n   *  _tokenAmount Amount Allocated tokens + 18 decimals\r\n   */\r\n  function _setAllocation (address _buyer, uint256 _tokenAmount) internal{\r\n\r\n      if(!buyers[_buyer]){\r\n        //Add buyer to buyers list \r\n        buyers[_buyer] = true;\r\n\r\n        //Add _buyer to addresses list\r\n        addresses.push(_buyer);\r\n\r\n        //Reset buyer allocation\r\n        allocationsTotal[_buyer] = 0;\r\n\r\n      }  \r\n\r\n      //Add tokens to buyers allocation\r\n      allocationsTotal[_buyer]  = allocationsTotal[_buyer].add(_tokenAmount); \r\n\r\n      //Spilt amount in 3\r\n      uint256 splitAmount = allocationsTotal[_buyer].div(3);\r\n      uint256 diff        = allocationsTotal[_buyer].sub(splitAmount+splitAmount+splitAmount);\r\n\r\n\r\n      //Sale steps\r\n      allocations1[_buyer]   = splitAmount;            // step 1 \r\n      allocations2[_buyer]   = splitAmount;            // step 2\r\n      allocations3[_buyer]   = splitAmount.add(diff);  // step 3 + diff\r\n\r\n\r\n      //Logg Allocation\r\n      emit LogNewAllocation(_buyer, _tokenAmount);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n    * @dev Return address available allocation\r\n    * @param _recipient which address is applicable\r\n    */\r\n  function checkAvailableTokens (address _recipient) public view returns (uint256) {\r\n    //Check if user have bought tokens\r\n    require(buyers[_recipient]);\r\n\r\n    uint256 _availableTokens = 0;\r\n\r\n    if(now >= step1){\r\n      _availableTokens = _availableTokens.add(allocations1[_recipient]);\r\n    }\r\n    if(now >= step2){\r\n      _availableTokens = _availableTokens.add(allocations2[_recipient]);\r\n    }\r\n    if(now >= step3){\r\n      _availableTokens = _availableTokens.add(allocations3[_recipient]);\r\n    }\r\n\r\n    return _availableTokens;\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer a recipients available allocation to their address\r\n    * @param _recipients Array of addresses to withdraw tokens for\r\n    */\r\n  function distributeManyTokens(address[] _recipients) onlyOwnerOrAdmin public {\r\n    for (uint256 i = 0; i < _recipients.length; i++) {\r\n\r\n      //Check if address is buyer \r\n      //And if the buyer is not already received all the tokens\r\n      if(buyers[_recipients[i]] && !buyersReceived[_recipients[i]]){\r\n        distributeTokens( _recipients[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n    * @dev Loop address and distribute tokens\r\n    *\r\n    */\r\n  function distributeAllTokens() onlyOwner public {\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n\r\n      //Check if address is buyer \r\n      //And if the buyer is not already received all the tokens\r\n      if(buyers[addresses[i]] && !buyersReceived[addresses[i]]){\r\n        distributeTokens( addresses[i]);\r\n      }\r\n            \r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Withdraw available tokens\r\n    * \r\n    */\r\n  function withdrawTokens() public {\r\n    distributeTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer a recipients available allocation to _recipient\r\n    *\r\n    */\r\n  function distributeTokens(address _recipient) public {\r\n    //Check date\r\n    require(now >= step1);\r\n    //Check have bought tokens\r\n    require(buyers[_recipient]);\r\n\r\n    //\r\n    bool _lastWithdraw = false;\r\n\r\n    uint256 _availableTokens = 0;\r\n    \r\n    if(now >= step1  && now >= step2  && now >= step3 ){      \r\n\r\n      _availableTokens = _availableTokens.add(allocations3[_recipient]); \r\n      _availableTokens = _availableTokens.add(allocations2[_recipient]);\r\n      _availableTokens = _availableTokens.add(allocations1[_recipient]);\r\n\r\n      //Reset all allocations\r\n      allocations3[_recipient] = 0;\r\n      allocations2[_recipient] = 0;\r\n      allocations1[_recipient] = 0;\r\n\r\n      //Step 3, all tokens should be received\r\n      _lastWithdraw = true;\r\n\r\n\r\n    } else if(now >= step1  && now >= step2 ){\r\n      \r\n      _availableTokens = _availableTokens.add(allocations2[_recipient]);\r\n      _availableTokens = _availableTokens.add(allocations1[_recipient]); \r\n\r\n      //Reset step 1 & step 2 allocation\r\n      allocations2[_recipient] = 0;\r\n      allocations1[_recipient] = 0;\r\n\r\n\r\n    }else if(now >= step1){\r\n\r\n      _availableTokens = allocations1[_recipient];\r\n\r\n      //Reset step 1 allocation\r\n      allocations1[_recipient] = 0; \r\n\r\n\r\n    }\r\n\r\n    require(_availableTokens>0);    \r\n\r\n    //Check if contract has tokens\r\n    require(token.balanceOf(this)>=_availableTokens);\r\n\r\n    //Transfer tokens\r\n    require(token.transfer(_recipient, _availableTokens));\r\n\r\n    //Add claimed tokens to totalClaimed\r\n    totalClaimed[_recipient] = totalClaimed[_recipient].add(_availableTokens);\r\n\r\n    //Add claimed tokens to grandTotalClaimed\r\n    grandTotalClaimed = grandTotalClaimed.add(_availableTokens);\r\n\r\n    emit LogTokenClaimed(_recipient, _availableTokens, allocationsTotal[_recipient], grandTotalClaimed);\r\n\r\n    //If all tokens are received, add _recipient to buyersReceived\r\n    //To prevent the loop to fail if user allready used the withdrawTokens\r\n    if(_lastWithdraw){\r\n      buyersReceived[_recipient] = true;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  function _validateHardCap(uint256 _tokenAmount) internal view returns (bool) {\r\n      return tokensTotal.add(_tokenAmount) <= hardCap;\r\n  }\r\n\r\n\r\n  function getListOfAddresses() public view returns (address[]) {    \r\n    return addresses;\r\n  }\r\n\r\n\r\n  // Allow transfer of tokens back to owner or reserve wallet\r\n  function returnTokens() public onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    require(token.transfer(owner, balance));\r\n  }\r\n\r\n  // Owner can transfer tokens that are sent here by mistake\r\n  function refundTokens(address _recipient, ERC20 _token) public onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    require(_token.transfer(_recipient, balance));\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title EDPrivateSale\r\n * @dev Only owner or admin can allocate tokens. Tokens can be booked in advanced without the token contract.\r\n * Tokens will be released in 3 steps / dates. \r\n * A token needs to be attached to this contract and this contract needs to have balance to be able to send tokens to collector\r\n * No whitelist in contract is requierd\r\n *\r\n*/\r\ncontract EDPrivateSale is LockedPrivatesale {\r\n  constructor(\r\n    uint256 _step1, \r\n    uint256 _step2, \r\n    uint256 _step3,    \r\n    ERC20 _token\r\n  ) public LockedPrivatesale(_step1, _step2, _step3, _token) {\r\n\r\n    // 50,000,000 tokens\r\n    hardCap = 50000000 * (10**uint256(18)); \r\n\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAdminOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListOfAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyersReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"checkAvailableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"distributeManyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocationsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"setAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grandTotalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_step1\",\"type\":\"uint256\"},{\"name\":\"_step2\",\"type\":\"uint256\"},{\"name\":\"_step3\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundsBooked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAllocated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_grandTotalClaimed\",\"type\":\"uint256\"}],\"name\":\"LogTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalAllocated\",\"type\":\"uint256\"}],\"name\":\"LogNewAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmountRemoved\",\"type\":\"uint256\"}],\"name\":\"LogRemoveAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalAllocated\",\"type\":\"uint256\"}],\"name\":\"LogOwnerAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EDPrivateSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c2a9f70000000000000000000000000000000000000000000000000000000005ca13860000000000000000000000000000000000000000000000000000000005d1930e0000000000000000000000000d3a09f00e9931af426aa21c763b21c843249ba1c","Library":"","SwarmSource":"bzzr://a3f21cb8f293ba5bcfc1e7298f0bade9ca9fd33f6a3d1d5b073b48e8f821c06c"}]}