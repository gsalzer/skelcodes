{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n* Team Proof of Long Hodl presents... v2\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\ncontract ProofOfLongHodl {\r\n    using SafeMath for uint256;\r\n\r\n    event Deposit(address user, uint amount);\r\n    event Withdraw(address user, uint amount);\r\n    event Claim(address user, uint dividends);\r\n    event Reinvest(address user, uint dividends);\r\n\r\n    address owner;\r\n    mapping(address => bool) preauthorized;\r\n    bool gameStarted;\r\n\r\n    uint constant depositTaxDivisor = 5;\t\t// 20% of  deposits goes to  divs\r\n    uint constant withdrawalTaxDivisor = 5;\t// 20% of  withdrawals goes to  divs\r\n    uint constant lotteryFee = 20; \t\t\t\t// 5% of deposits and withdrawals goes to dailyPool\r\n\r\n    mapping(address => uint) public investment;\r\n\r\n    mapping(address => uint) public stake;\r\n    uint public totalStake;\r\n    uint stakeValue;\r\n\r\n    mapping(address => uint) dividendCredit;\r\n    mapping(address => uint) dividendDebit;\r\n\r\n    function ProofOfLongHodl() public {\r\n        owner = msg.sender;\r\n        preauthorized[owner] = true;\r\n    }\r\n\r\n    function preauthorize(address _user) public {\r\n        require(msg.sender == owner);\r\n        preauthorized[_user] = true;\r\n    }\r\n\r\n    function startGame() public {\r\n        require(msg.sender == owner);\r\n        gameStarted = true;\r\n    }\r\n\r\n    function depositHelper(uint _amount) private {\r\n    \trequire(_amount > 0);\r\n        uint _tax = _amount.div(depositTaxDivisor);\r\n        uint _lotteryPool = _amount.div(lotteryFee);\r\n        uint _amountAfterTax = _amount.sub(_tax).sub(_lotteryPool);\r\n\r\n        // weekly and daily pool\r\n        uint weeklyPoolFee = _lotteryPool.div(5);\r\n        uint dailyPoolFee = _lotteryPool.sub(weeklyPoolFee);\r\n\r\n        uint tickets = _amount.div(TICKET_PRICE);\r\n\r\n        weeklyPool = weeklyPool.add(weeklyPoolFee);\r\n        dailyPool = dailyPool.add(dailyPoolFee);\r\n\r\n        //********** ADD DAILY TICKETS\r\n        dailyTicketPurchases storage dailyPurchases = dailyTicketsBoughtByPlayer[msg.sender];\r\n\r\n        // If we need to reset tickets from a previous lotteryRound\r\n        if (dailyPurchases.lotteryId != dailyLotteryRound) {\r\n            dailyPurchases.numPurchases = 0;\r\n            dailyPurchases.ticketsPurchased = 0;\r\n            dailyPurchases.lotteryId = dailyLotteryRound;\r\n            dailyLotteryPlayers[dailyLotteryRound].push(msg.sender); // Add user to lottery round\r\n        }\r\n\r\n        // Store new ticket purchase\r\n        if (dailyPurchases.numPurchases == dailyPurchases.ticketsBought.length) {\r\n            dailyPurchases.ticketsBought.length += 1;\r\n        }\r\n        dailyPurchases.ticketsBought[dailyPurchases.numPurchases++] = dailyTicketPurchase(dailyTicketsBought, dailyTicketsBought + (tickets - 1)); // (eg: buy 10, get id's 0-9)\r\n        \r\n        // Finally update ticket total\r\n        dailyPurchases.ticketsPurchased += tickets;\r\n        dailyTicketsBought += tickets;\r\n\r\n        //********** ADD WEEKLY TICKETS\r\n\t\tweeklyTicketPurchases storage weeklyPurchases = weeklyTicketsBoughtByPlayer[msg.sender];\r\n\r\n\t\t// If we need to reset tickets from a previous lotteryRound\r\n\t\tif (weeklyPurchases.lotteryId != weeklyLotteryRound) {\r\n\t\t    weeklyPurchases.numPurchases = 0;\r\n\t\t    weeklyPurchases.ticketsPurchased = 0;\r\n\t\t    weeklyPurchases.lotteryId = weeklyLotteryRound;\r\n\t\t    weeklyLotteryPlayers[weeklyLotteryRound].push(msg.sender); // Add user to lottery round\r\n\t\t}\r\n\r\n\t\t// Store new ticket purchase\r\n\t\tif (weeklyPurchases.numPurchases == weeklyPurchases.ticketsBought.length) {\r\n\t\t    weeklyPurchases.ticketsBought.length += 1;\r\n\t\t}\r\n\t\tweeklyPurchases.ticketsBought[weeklyPurchases.numPurchases++] = weeklyTicketPurchase(weeklyTicketsBought, weeklyTicketsBought + (tickets - 1)); // (eg: buy 10, get id's 0-9)\r\n\r\n\t\t// Finally update ticket total\r\n\t\tweeklyPurchases.ticketsPurchased += tickets;\r\n\t\tweeklyTicketsBought += tickets;\r\n\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        uint _stakeIncrement = sqrt(totalStake.mul(totalStake).add(_amountAfterTax)).sub(totalStake);\r\n        investment[msg.sender] = investment[msg.sender].add(_amountAfterTax);\r\n        stake[msg.sender] = stake[msg.sender].add(_stakeIncrement);\r\n        totalStake = totalStake.add(_stakeIncrement);\r\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].add(_stakeIncrement.mul(stakeValue));\r\n    }\r\n\r\n    function deposit() public payable {\r\n        require(preauthorized[msg.sender] || gameStarted);\r\n        depositHelper(msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint _amount) public {\r\n        require(_amount > 0);\r\n        require(_amount <= investment[msg.sender]);\r\n        uint _tax = _amount.div(withdrawalTaxDivisor);\r\n        uint _lotteryPool = _amount.div(lotteryFee);\r\n        uint _amountAfterTax = _amount.sub(_tax).sub(_lotteryPool);\r\n\r\n        // weekly and daily pool\r\n        uint weeklyPoolFee = _lotteryPool.div(20);\r\n        uint dailyPoolFee = _lotteryPool.sub(weeklyPoolFee);\r\n\r\n        weeklyPool = weeklyPool.add(weeklyPoolFee);\r\n        dailyPool = dailyPool.add(dailyPoolFee);\r\n\r\n        uint _stakeDecrement = stake[msg.sender].mul(_amount).div(investment[msg.sender]);\r\n        uint _dividendCredit = _stakeDecrement.mul(stakeValue);\r\n        investment[msg.sender] = investment[msg.sender].sub(_amount);\r\n        stake[msg.sender] = stake[msg.sender].sub(_stakeDecrement);\r\n        totalStake = totalStake.sub(_stakeDecrement);\r\n        if (totalStake > 0)\r\n            stakeValue = stakeValue.add(_tax.div(totalStake));\r\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].add(_dividendCredit);\r\n        uint _creditDebitCancellation = min(dividendCredit[msg.sender], dividendDebit[msg.sender]);\r\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].sub(_creditDebitCancellation);\r\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].sub(_creditDebitCancellation);\r\n\r\n        msg.sender.transfer(_amountAfterTax);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function claimHelper() private returns(uint) {\r\n        uint _dividendsForStake = stake[msg.sender].mul(stakeValue);\r\n        uint _dividends = _dividendsForStake.add(dividendCredit[msg.sender]).sub(dividendDebit[msg.sender]);\r\n        dividendCredit[msg.sender] = 0;\r\n        dividendDebit[msg.sender] = _dividendsForStake;\r\n\r\n        return _dividends;\r\n    }\r\n\r\n    function claim() public {\r\n        uint _dividends = claimHelper();\r\n        msg.sender.transfer(_dividends);\r\n\r\n        emit Claim(msg.sender, _dividends);\r\n    }\r\n\r\n    function reinvest() public {\r\n        uint _dividends = claimHelper();\r\n        depositHelper(_dividends);\r\n\r\n        emit Reinvest(msg.sender, _dividends);\r\n    }\r\n\r\n    function dividendsForUser(address _user) public view returns (uint) {\r\n        return stake[_user].mul(stakeValue).add(dividendCredit[_user]).sub(dividendDebit[_user]);\r\n    }\r\n\r\n    function min(uint x, uint y) private pure returns (uint) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint x) private pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    // LOTTERY MODULE \r\n    // DAILY\r\n    uint private dailyPool = 0;\r\n    uint private dailyLotteryRound = 1;\r\n    uint private dailyTicketsBought = 0;\r\n    uint private dailyTicketThatWon;\r\n    address[] public dailyWinners;\r\n    uint256[] public dailyPots;\r\n\r\n    // WEEKLY\r\n    uint private weeklyPool = 0;\r\n    uint private weeklyLotteryRound = 1;\r\n    uint private weeklyTicketsBought = 0;\r\n    uint private weeklyTicketThatWon;\r\n    address[] public weeklyWinners;\r\n    uint256[] public weeklyPots;\r\n\r\n    uint public TICKET_PRICE = 0.01 ether;\r\n    uint public DAILY_LIMIT = 0.15 ether;\r\n    bool private dailyTicketSelected;\r\n    bool private weeklyTicketSelected;\r\n\r\n    // STRUCTS for LOTTERY\r\n    // DAILY\r\n    struct dailyTicketPurchases {\r\n        dailyTicketPurchase[] ticketsBought;\r\n        uint256 numPurchases; // Allows us to reset without clearing dailyTicketPurchase[] (avoids potential for gas limit)\r\n        uint256 lotteryId;\r\n        uint256 ticketsPurchased;\r\n    }\r\n\r\n    // Allows us to query winner without looping (avoiding potential for gas limit)\r\n    struct dailyTicketPurchase {\r\n        uint256 startId;\r\n        uint256 endId;\r\n    }\r\n\r\n    mapping(address => dailyTicketPurchases) private dailyTicketsBoughtByPlayer;\r\n    mapping(uint256 => address[]) private dailyLotteryPlayers;\r\n\r\n    // WEEKLY\r\n    struct weeklyTicketPurchases {\r\n        weeklyTicketPurchase[] ticketsBought;\r\n        uint256 numPurchases; // Allows us to reset without clearing weeklyTicketPurchase[] (avoids potential for gas limit)\r\n        uint256 lotteryId;\r\n        uint256 ticketsPurchased;\r\n    }\r\n\r\n    // Allows us to query winner without looping (avoiding potential for gas limit)\r\n    struct weeklyTicketPurchase {\r\n        uint256 startId;\r\n        uint256 endId;\r\n    }\r\n\r\n    mapping(address => weeklyTicketPurchases) private weeklyTicketsBoughtByPlayer;\r\n    mapping(uint256 => address[]) private weeklyLotteryPlayers;\r\n\r\n    // DRAWS\r\n    function drawDailyWinner() public {\r\n        require(msg.sender == owner);\r\n        require(!dailyTicketSelected);\r\n       \r\n        uint256 seed = dailyTicketsBought + block.timestamp;\r\n        dailyTicketThatWon = addmod(uint256(block.blockhash(block.number-1)), seed, dailyTicketsBought);\r\n        dailyTicketSelected = true;\r\n    }\r\n\r\n    function drawWeeklyWinner() public {\r\n        require(msg.sender == owner);\r\n        require(!weeklyTicketSelected);\r\n       \r\n        uint256 seed = weeklyTicketsBought + block.timestamp;\r\n        weeklyTicketThatWon = addmod(uint256(block.blockhash(block.number-1)), seed, weeklyTicketsBought);\r\n        weeklyTicketSelected = true;\r\n    }\r\n\r\n    function awardDailyLottery(address checkWinner, uint256 checkIndex) external {\r\n\t\trequire(msg.sender == owner);\r\n\t    \r\n\t    if (!dailyTicketSelected) {\r\n\t    \tdrawDailyWinner(); // Ideally do it in one call (gas limit cautious)\r\n\t    }\r\n\t        \r\n\t    // Reduce gas by (optionally) offering an address to _check_ for winner\r\n\t    if (checkWinner != 0) {\r\n\t        dailyTicketPurchases storage tickets = dailyTicketsBoughtByPlayer[checkWinner];\r\n\t        if (tickets.numPurchases > 0 && checkIndex < tickets.numPurchases && tickets.lotteryId == dailyLotteryRound) {\r\n\t            dailyTicketPurchase storage checkTicket = tickets.ticketsBought[checkIndex];\r\n\t            if (dailyTicketThatWon >= checkTicket.startId && dailyTicketThatWon <= checkTicket.endId) {\r\n\t                if ( dailyPool >= DAILY_LIMIT) {\r\n\t            \t\tcheckWinner.transfer(DAILY_LIMIT);\r\n\t            \t\tdailyPots.push(DAILY_LIMIT);\r\n\t            \t\tdailyPool = dailyPool.sub(DAILY_LIMIT);\t\t\r\n\t        \t\t} else {\r\n\t        \t\t\tcheckWinner.transfer(dailyPool);\r\n\t        \t\t\tdailyPots.push(dailyPool);\r\n\t        \t\t\tdailyPool = 0;\r\n\t        \t\t}\r\n\r\n\t        \t\tdailyWinners.push(checkWinner);\r\n            \t\tdailyLotteryRound = dailyLotteryRound.add(1);\r\n            \t\tdailyTicketsBought = 0;\r\n            \t\tdailyTicketSelected = false;\r\n\t                return;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    // Otherwise just naively try to find the winner (will work until mass amounts of players)\r\n\t    for (uint256 i = 0; i < dailyLotteryPlayers[dailyLotteryRound].length; i++) {\r\n\t        address player = dailyLotteryPlayers[dailyLotteryRound][i];\r\n\t        dailyTicketPurchases storage playersTickets = dailyTicketsBoughtByPlayer[player];\r\n\t        \r\n\t        uint256 endIndex = playersTickets.numPurchases - 1;\r\n\t        // Minor optimization to avoid checking every single player\r\n\t        if (dailyTicketThatWon >= playersTickets.ticketsBought[0].startId && dailyTicketThatWon <= playersTickets.ticketsBought[endIndex].endId) {\r\n\t            for (uint256 j = 0; j < playersTickets.numPurchases; j++) {\r\n\t                dailyTicketPurchase storage playerTicket = playersTickets.ticketsBought[j];\r\n\t                if (dailyTicketThatWon >= playerTicket.startId && dailyTicketThatWon <= playerTicket.endId) {\r\n\t                \tif ( dailyPool >= DAILY_LIMIT) {\r\n\t                \t\tplayer.transfer(DAILY_LIMIT);\r\n\t                \t\tdailyPots.push(DAILY_LIMIT);\r\n\t                \t\tdailyPool = dailyPool.sub(DAILY_LIMIT);\r\n\t            \t\t} else {\r\n\t            \t\t\tplayer.transfer(dailyPool);\r\n\t            \t\t\tdailyPots.push(dailyPool);\r\n\t            \t\t\tdailyPool = 0;\r\n\t            \t\t}\r\n\r\n\t            \t\tdailyWinners.push(player);\r\n\t            \t\tdailyLotteryRound = dailyLotteryRound.add(1);\r\n\t            \t\tdailyTicketsBought = 0;\r\n\t            \t\tdailyTicketSelected = false;\r\n\r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tfunction awardWeeklyLottery(address checkWinner, uint256 checkIndex) external {\r\n\t\trequire(msg.sender == owner);\r\n\t    \r\n\t    if (!weeklyTicketSelected) {\r\n\t    \tdrawWeeklyWinner(); // Ideally do it in one call (gas limit cautious)\r\n\t    }\r\n\t       \r\n\t    // Reduce gas by (optionally) offering an address to _check_ for winner\r\n\t    if (checkWinner != 0) {\r\n\t        weeklyTicketPurchases storage tickets = weeklyTicketsBoughtByPlayer[checkWinner];\r\n\t        if (tickets.numPurchases > 0 && checkIndex < tickets.numPurchases && tickets.lotteryId == weeklyLotteryRound) {\r\n\t            weeklyTicketPurchase storage checkTicket = tickets.ticketsBought[checkIndex];\r\n\t            if (weeklyTicketThatWon >= checkTicket.startId && weeklyTicketThatWon <= checkTicket.endId) {\r\n\t        \t\tcheckWinner.transfer(weeklyPool);\r\n\r\n\t        \t\tweeklyPots.push(weeklyPool);\r\n\t        \t\tweeklyPool = 0;\r\n\t            \tweeklyWinners.push(player);\r\n\t            \tweeklyLotteryRound = weeklyLotteryRound.add(1);\r\n\t            \tweeklyTicketsBought = 0;\r\n\t            \tweeklyTicketSelected = false;\r\n\t                return;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    // Otherwise just naively try to find the winner (will work until mass amounts of players)\r\n\t    for (uint256 i = 0; i < weeklyLotteryPlayers[weeklyLotteryRound].length; i++) {\r\n\t        address player = weeklyLotteryPlayers[weeklyLotteryRound][i];\r\n\t        weeklyTicketPurchases storage playersTickets = weeklyTicketsBoughtByPlayer[player];\r\n\t        \r\n\t        uint256 endIndex = playersTickets.numPurchases - 1;\r\n\t        // Minor optimization to avoid checking every single player\r\n\t        if (weeklyTicketThatWon >= playersTickets.ticketsBought[0].startId && weeklyTicketThatWon <= playersTickets.ticketsBought[endIndex].endId) {\r\n\t            for (uint256 j = 0; j < playersTickets.numPurchases; j++) {\r\n\t                weeklyTicketPurchase storage playerTicket = playersTickets.ticketsBought[j];\r\n\t                if (weeklyTicketThatWon >= playerTicket.startId && weeklyTicketThatWon <= playerTicket.endId) {\r\n\t            \t\tplayer.transfer(weeklyPool);  \r\n\r\n\t            \t\tweeklyPots.push(weeklyPool);\r\n\t            \t\tweeklyPool = 0;\r\n\t            \t\tweeklyWinners.push(player);\r\n\t            \t\tweeklyLotteryRound = weeklyLotteryRound.add(1);\r\n\t            \t\tweeklyTicketsBought = 0;  \r\n\t            \t\tweeklyTicketSelected = false;            \r\n\t                    return;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n    function getLotteryData() public view returns( uint256, uint256, uint256, uint256, uint256, uint256) {\r\n    \treturn (dailyPool, weeklyPool, dailyLotteryRound, weeklyLotteryRound, dailyTicketsBought, weeklyTicketsBought);\r\n    }\r\n\r\n    function getDailyLotteryParticipants(uint256 _round) public view returns(address[]) {\r\n    \treturn dailyLotteryPlayers[_round];\r\n    }\r\n\r\n    function getWeeklyLotteryParticipants(uint256 _round) public view returns(address[]) {\r\n    \treturn weeklyLotteryPlayers[_round];\r\n    }\r\n\r\n    function getLotteryWinners() public view returns(uint256, uint256) {\r\n    \treturn (dailyWinners.length, weeklyWinners.length);\r\n    }\r\n\r\n    function editDailyLimit(uint _price) public payable {\r\n    \trequire(msg.sender == owner);\r\n    \tDAILY_LIMIT = _price;\r\n    }\r\n\r\n    function editTicketPrice(uint _price) public payable {\r\n    \trequire(msg.sender == owner);\r\n    \tTICKET_PRICE = _price;\r\n    }\r\n\r\n    function getDailyTickets(address _player) public view returns(uint256) {\r\n    \tdailyTicketPurchases storage dailyPurchases = dailyTicketsBoughtByPlayer[_player];\r\n\r\n    \tif (dailyPurchases.lotteryId != dailyLotteryRound) {\r\n    \t\treturn 0;\r\n    \t}\r\n\r\n    \treturn dailyPurchases.ticketsPurchased;\r\n    }\r\n\r\n    function getWeeklyTickets(address _player) public view returns(uint256) {\r\n    \tweeklyTicketPurchases storage weeklyPurchases = weeklyTicketsBoughtByPlayer[_player];\r\n\r\n    \tif (weeklyPurchases.lotteryId != weeklyLotteryRound) {\r\n    \t\treturn 0;\r\n    \t}\r\n\r\n    \treturn weeklyPurchases.ticketsPurchased;\t\r\n    }\r\n\r\n    // If someone is generous and wants to add to pool\r\n    function addToPool() public payable {\r\n    \trequire(msg.value > 0);\r\n    \tuint _lotteryPool = msg.value;\r\n\r\n    \t// weekly and daily pool\r\n        uint weeklyPoolFee = _lotteryPool.div(5);\r\n        uint dailyPoolFee = _lotteryPool.sub(weeklyPoolFee);\r\n\r\n        weeklyPool = weeklyPool.add(weeklyPoolFee);\r\n        dailyPool = dailyPool.add(dailyPoolFee);\r\n    }\r\n\r\n    function winningTickets() public view returns(uint256, uint256) {\r\n    \treturn (dailyTicketThatWon, weeklyTicketThatWon);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;                                                                                                                                                                                       \r\n        }\r\n        uint256 c = a * b;                                                                                                                                                                                  \r\n        assert(c / a == b);                                                                                                                                                                                 \r\n        return c;                                                                                                                                                                                           \r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0                                                                                                                               \r\n        // uint256 c = a / b;                                                                                                                                                                               \r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold                                                                                                                       \r\n        return a / b;                                                                                                                                                                                       \r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);                                                                                                                                                                                     \r\n        return a - b;                                                                                                                                                                                       \r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;                                                                                                                                                                                  \r\n        assert(c >= a);                                                                                                                                                                                     \r\n        return c;                                                                                                                                                                                           \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TICKET_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyPots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getWeeklyTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAILY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getWeeklyLotteryParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"checkWinner\",\"type\":\"address\"},{\"name\":\"checkIndex\",\"type\":\"uint256\"}],\"name\":\"awardDailyLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLotteryWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"preauthorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"checkWinner\",\"type\":\"address\"},{\"name\":\"checkIndex\",\"type\":\"uint256\"}],\"name\":\"awardWeeklyLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyPots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getDailyTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addToPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawDailyWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLotteryData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getDailyLotteryParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawWeeklyWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"editTicketPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"editDailyLimit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"}]","ContractName":"ProofOfLongHodl","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://564aa985548b019b3f50cb415f6e03ecdeb2c26663f06e8dfa20307980eb96a9"}]}