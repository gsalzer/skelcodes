{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract KolkhaCoin {\r\n\r\n  modifier msgDataSize(uint nVar) {assert(msg.data.length == nVar*32 + 4); _ ;}\r\n\r\n  string public constant name = \"Kolkha\";\r\n  string public constant symbol = \"KHC\";\r\n  uint public constant decimals = 6;\r\n  uint public totalSupply;\r\n\r\n  using SafeMath for uint;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approved(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n  mapping(address => uint) public balanceOf;\r\n  mapping(address => mapping(address => uint)) public allowance;\r\n\r\n  function KolkhaCoin(uint initialSupply){\r\n    balanceOf[msg.sender] = initialSupply;\r\n    totalSupply = initialSupply;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) public msgDataSize(2) returns(bool success)\r\n  {\r\n    success = false;\r\n    require(balanceOf[msg.sender] >= _value); //Check if the sender has enough balance\r\n    require(balanceOf[_to].add(_value) > balanceOf[_to]); //Avoid overflow, and _value=0\r\n    require(_value > 0); //just to be safe\r\n\r\n    //Perform the transfer\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n    Transfer(msg.sender, _to, _value); //Fire the event\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public msgDataSize(3) returns (bool success)  {\r\n    require(allowance[_from][_to] >= _value); //check allowance, from _from to _to\r\n    require(balanceOf[_from] >= _value); //Check if there's enough coins on the _from account\r\n    require(balanceOf[_to].add(_value) > balanceOf[_to]); //Avoid overflow, and _value = 0\r\n    require(_value > 0); //Just in case\r\n\r\n    //Transfer\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n    //Retract _value coins from allowance\r\n    allowance[_from][_to] = allowance[_from][_to].sub(_value);\r\n\r\n    //Fire the event\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public msgDataSize(2) returns(bool success) {\r\n    success = false;\r\n    allowance[msg.sender][_spender] = _value;\r\n    Approved(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  //Once the block is mined\r\n  /*uint public constant blockReward = 1e6;\r\n  function claimBlockReward() {\r\n    balanceOf[block.coinbase] += blockReward;\r\n    totalSupply += blockReward;\r\n  }*/\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"}]","ContractName":"KolkhaCoin","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000008e1bc9bf040000","Library":"","SwarmSource":"bzzr://d5cc19f69eeddf2726edcd187caba4848719783d9b1a8662e07646c47a412415"}]}