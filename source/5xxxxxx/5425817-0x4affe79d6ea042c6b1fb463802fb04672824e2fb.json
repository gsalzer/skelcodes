{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * EIP-20 standard token interface, as defined at\r\n * ttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract Token {\r\n    function name() public constant returns (string);\r\n    function symbol() public constant returns (string);\r\n    function decimals() public constant returns (uint8);\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender)\r\n        public constant returns (uint256);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * Allows one to lock EIP-20 tokens until certain time arrives.\r\n * Copyright Â© 2018 by ABDK Consulting https://abdk.consulting/\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov[at]gmail.com>\r\n */\r\ncontract TokenTimeLock {\r\n    /**\r\n     * Create new Token Time Lock with given donation address.\r\n     *\r\n     * @param _donationAddress donation address\r\n     */\r\n    function TokenTimeLock (address _donationAddress) public {\r\n        donationAddress = _donationAddress;\r\n    }\r\n\r\n    /**\r\n     * Lock given amount of given EIP-20 tokens until given time arrives, after\r\n     * this time allow the tokens to be transferred to given beneficiary.  This\r\n     * contract should be allowed to transfer at least given amount of tokens\r\n     * from msg.sender.\r\n     *\r\n     * @param _token EIP-20 token contract managing tokens to be locked\r\n     * @param _beneficiary beneficiary to receive tokens after unlock time\r\n     * @param _amount amount of tokens to be locked\r\n     * @param _unlockTime unlock time\r\n     *\r\n     * @return time lock ID\r\n     */\r\n    function lock (\r\n        Token _token, address _beneficiary, uint256 _amount,\r\n        uint256 _unlockTime) public returns (uint256) {\r\n        require (_amount > 0);\r\n\r\n        uint256 id = nextLockID++;\r\n\r\n        TokenTimeLockInfo storage lockInfo = locks [id];\r\n\r\n        lockInfo.token = _token;\r\n        lockInfo.beneficiary = _beneficiary;\r\n        lockInfo.amount = _amount;\r\n        lockInfo.unlockTime = _unlockTime;\r\n\r\n        Lock (id, _token, _beneficiary, _amount, _unlockTime);\r\n\r\n        require (_token.transferFrom (msg.sender, this, _amount));\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Unlock tokens locked under time lock with given ID and transfer them to\r\n     * corresponding beneficiary.\r\n     *\r\n     * @param _id time lock ID to unlock tokens locked under\r\n     */\r\n    function unlock (uint256 _id) public {\r\n        TokenTimeLockInfo memory lockInfo = locks [_id];\r\n        delete locks [_id];\r\n\r\n        require (lockInfo.amount > 0);\r\n        require (lockInfo.unlockTime <= block.timestamp);\r\n\r\n        Unlock (_id);\r\n\r\n        require (\r\n            lockInfo.token.transfer (\r\n                lockInfo.beneficiary, lockInfo.amount));\r\n    }\r\n\r\n    /**\r\n     * If you like this contract, you may send some ether to this address and\r\n     * it will be used to develop more useful contracts available to everyone.\r\n     */\r\n    address public donationAddress;\r\n\r\n    /**\r\n     * Next time lock ID to be used.\r\n     */\r\n    uint256 private nextLockID = 0;\r\n\r\n    /**\r\n     * Maps time lock ID to TokenTimeLockInfo structure encapsulating time lock\r\n     * information.\r\n     */\r\n    mapping (uint256 => TokenTimeLockInfo) public locks;\r\n\r\n    /**\r\n     * Encapsulates information abount time lock.\r\n     */\r\n    struct TokenTimeLockInfo {\r\n        /**\r\n         * EIP-20 token contract managing locked tokens.\r\n         */\r\n        Token token;\r\n\r\n        /**\r\n         * Beneficiary to receive tokens once they are unlocked.\r\n         */\r\n        address beneficiary;\r\n\r\n        /**\r\n         * Amount of locked tokens.\r\n         */\r\n        uint256 amount;\r\n\r\n        /**\r\n         * Unlock time.\r\n         */\r\n        uint256 unlockTime;\r\n    }\r\n\r\n    /**\r\n     * Logged when tokens were time locked.\r\n     *\r\n     * @param id time lock ID\r\n     * @param token EIP-20 token contract managing locked tokens\r\n     * @param beneficiary beneficiary to receive tokens once they are unlocked\r\n     * @param amount amount of locked tokens\r\n     * @param unlockTime unlock time\r\n     */\r\n    event Lock (\r\n        uint256 indexed id, Token indexed token, address indexed beneficiary,\r\n        uint256 amount, uint256 unlockTime);\r\n\r\n    /**\r\n     * Logged when tokens were unlocked and sent to beneficiary.\r\n     *\r\n     * @param id time lock ID\r\n     */\r\n    event Unlock (uint256 indexed id);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_donationAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"TokenTimeLock","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009828cda4fd5a4db95cdb78a6a2fe60dc014358f5","Library":"","SwarmSource":"bzzr://63f11d8462588cb52d9981af6688a3a403add22ed9e5d61174fe1b96b24088d1"}]}