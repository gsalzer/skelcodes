{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/InvestedProvider.sol\r\n\r\ncontract InvestedProvider is Ownable {\r\n\r\n  uint public invested;\r\n\r\n}\r\n\r\n// File: contracts/AddressesFilterFeature.sol\r\n\r\ncontract AddressesFilterFeature is Ownable {\r\n\r\n  mapping(address => bool) public allowedAddresses;\r\n\r\n  function addAllowedAddress(address allowedAddress) public onlyOwner {\r\n    allowedAddresses[allowedAddress] = true;\r\n  }\r\n\r\n  function removeAllowedAddress(address allowedAddress) public onlyOwner {\r\n    allowedAddresses[allowedAddress] = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\ncontract MintableToken is AddressesFilterFeature, StandardToken {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  mapping (address => uint) public initialBalances;\r\n\r\n  modifier notLocked(address _from) {\r\n    require(_from == owner || _from == saleAgent || allowedAddresses[_from] || mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    \r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    initialBalances[_to] = balances[_to];\r\n\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked(msg.sender)  returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked(from) returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/TokenProvider.sol\r\n\r\ncontract TokenProvider is Ownable {\r\n\r\n  MintableToken public token;\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = MintableToken(newToken);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MintTokensInterface.sol\r\n\r\ncontract MintTokensInterface is TokenProvider {\r\n\r\n  function mintTokens(address to, uint tokens) internal;\r\n\r\n}\r\n\r\n// File: contracts/MintTokensFeature.sol\r\n\r\ncontract MintTokensFeature is MintTokensInterface {\r\n\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(to, tokens);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/PercentRateProvider.sol\r\n\r\ncontract PercentRateProvider {\r\n\r\n  uint public percentRate = 100;\r\n\r\n}\r\n\r\n// File: contracts/PercentRateFeature.sol\r\n\r\ncontract PercentRateFeature is Ownable, PercentRateProvider {\r\n\r\n  function setPercentRate(uint newPercentRate) public onlyOwner {\r\n    percentRate = newPercentRate;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/RetrieveTokensFeature.sol\r\n\r\ncontract RetrieveTokensFeature is Ownable {\r\n\r\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/WalletProvider.sol\r\n\r\ncontract WalletProvider is Ownable {\r\n\r\n  address public wallet;\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CommonSale.sol\r\n\r\ncontract CommonSale is InvestedProvider, WalletProvider, PercentRateFeature, RetrieveTokensFeature, MintTokensFeature {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public directMintAgent;\r\n\r\n  uint public price;\r\n\r\n  uint public start;\r\n\r\n  uint public minInvestedLimit;\r\n\r\n  //MintableToken public token;\r\n\r\n  uint public hardcap;\r\n\r\n  modifier isUnderHardcap() {\r\n    require(invested < hardcap);\r\n    _;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner {\r\n    hardcap = newHardcap;\r\n  }\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier minInvestLimited(uint value) {\r\n    require(value >= minInvestedLimit);\r\n    _;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  /*\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = MintableToken(newToken);\r\n  }\r\n  */\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint);\r\n\r\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\r\n    mintTokens(to, tokens);\r\n  }\r\n/*\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(this, tokens);\r\n    token.transfer(to, tokens);\r\n  }\r\n*/\r\n  function endSaleDate() public view returns(uint);\r\n\r\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner returns(uint) {\r\n    return mintTokensByETH(to, _invested);\r\n  }\r\n\r\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\r\n    invested = invested.add(_invested);\r\n    uint tokens = calculateTokens(_invested);\r\n    mintTokens(to, tokens);\r\n    return tokens;\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    wallet.transfer(msg.value);\r\n    return mintTokensByETH(msg.sender, msg.value);\r\n  }\r\n\r\n  function () public payable {\r\n    fallback();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/TimeCountBonusFeature.sol\r\n\r\ncontract TimeCountBonusFeature is CommonSale {\r\n\r\n  struct Milestone {\r\n    uint hardcap;\r\n    uint price;\r\n    uint period;\r\n    uint invested;\r\n    uint closed;\r\n  }\r\n\r\n  uint public period;\r\n\r\n  Milestone[] public milestones;\r\n\r\n  function milestonesCount() public constant returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function addMilestone(uint _hardcap, uint _price, uint _period) public onlyOwner {\r\n    require(_hardcap > 0 && _price > 0 && _period > 0);\r\n    Milestone memory milestone = Milestone(_hardcap.mul(1 ether), _price, _period, 0, 0);\r\n    milestones.push(milestone);\r\n    hardcap = hardcap.add(milestone.hardcap);\r\n    period = period.add(milestone.period);\r\n  }\r\n\r\n  function removeMilestone(uint8 number) public onlyOwner {\r\n    require(number >=0 && number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    hardcap = hardcap.sub(milestone.hardcap);    \r\n    period = period.sub(milestone.period);    \r\n    delete milestones[number];\r\n    for (uint i = number; i < milestones.length - 1; i++) {\r\n      milestones[i] = milestones[i+1];\r\n    }\r\n    milestones.length--;\r\n  }\r\n\r\n  function changeMilestone(uint8 number, uint _hardcap, uint _price, uint _period) public onlyOwner {\r\n    require(number >= 0 &&number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    hardcap = hardcap.sub(milestone.hardcap);    \r\n    period = period.sub(milestone.period);    \r\n    milestone.hardcap = _hardcap.mul(1 ether);\r\n    milestone.price = _price;\r\n    milestone.period = _period;\r\n    hardcap = hardcap.add(milestone.hardcap);    \r\n    period = period.add(milestone.period);    \r\n  }\r\n\r\n  function insertMilestone(uint8 numberAfter, uint _hardcap, uint _price, uint _period) public onlyOwner {\r\n    require(numberAfter < milestones.length);\r\n    Milestone memory milestone = Milestone(_hardcap.mul(1 ether), _price, _period, 0, 0);\r\n    hardcap = hardcap.add(milestone.hardcap);\r\n    period = period.add(milestone.period);\r\n    milestones.length++;\r\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\r\n      milestones[i + 1] = milestones[i];\r\n    }\r\n    milestones[numberAfter + 1] = milestone;\r\n  }\r\n\r\n  function clearMilestones() public onlyOwner {\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      delete milestones[i];\r\n    }\r\n    milestones.length = 0;\r\n    hardcap = 0;\r\n    period = 0;\r\n  }\r\n\r\n  function endSaleDate() public view returns(uint) {\r\n    return start.add(period * 1 days);\r\n  }\r\n\r\n  function currentMilestone() public constant returns(uint) {\r\n    uint closeTime = start;\r\n    for(uint i=0; i < milestones.length; i++) {\r\n      closeTime += milestones[i].period.mul(1 days);\r\n      if(milestones[i].closed == 0 && now < closeTime) {\r\n        return i;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function calculateTokens(uint _invested) internal returns(uint) {\r\n    uint milestoneIndex = currentMilestone();\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    uint tokens = milestone.price.mul(_invested).div(1 ether);\r\n\r\n    // update milestone\r\n    milestone.invested = milestone.invested.add(_invested);\r\n    if(milestone.invested >= milestone.hardcap) {\r\n      milestone.closed = now;\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/AssembledCommonSale.sol\r\n\r\ncontract AssembledCommonSale is TimeCountBonusFeature {\r\n\r\n}\r\n\r\n// File: contracts/WalletsPercents.sol\r\n\r\ncontract WalletsPercents is Ownable {\r\n\r\n  address[] public wallets;\r\n\r\n  mapping (address => uint) percents;\r\n\r\n  function addWallet(address wallet, uint percent) public onlyOwner {\r\n    wallets.push(wallet);\r\n    percents[wallet] = percent;\r\n  }\r\n \r\n  function cleanWallets() public onlyOwner {\r\n    wallets.length = 0;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/ExtendedWalletsMintTokensFeature.sol\r\n\r\n//import './PercentRateProvider.sol';\r\n\r\ncontract ExtendedWalletsMintTokensFeature is /*PercentRateProvider,*/ MintTokensInterface, WalletsPercents {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public percentRate = 100;\r\n\r\n  function mintExtendedTokens() public onlyOwner {\r\n    uint summaryTokensPercent = 0;\r\n    for(uint i = 0; i < wallets.length; i++) {\r\n      summaryTokensPercent = summaryTokensPercent.add(percents[wallets[i]]);\r\n    }\r\n    uint mintedTokens = token.totalSupply();\r\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\r\n    for(uint k = 0; k < wallets.length; k++) {\r\n      mintTokens(wallets[k], allTokens.mul(percents[wallets[k]]).div(percentRate));\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SoftcapFeature.sol\r\n\r\ncontract SoftcapFeature is InvestedProvider, WalletProvider {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) public balances;\r\n\r\n  bool public softcapAchieved;\r\n\r\n  bool public refundOn;\r\n\r\n  bool public feePayed;\r\n\r\n  uint public softcap;\r\n\r\n  uint public constant devLimit = 7500000000000000000;\r\n\r\n  address public constant devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\r\n\r\n  function setSoftcap(uint newSoftcap) public onlyOwner {\r\n    softcap = newSoftcap;\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(msg.sender == owner || msg.sender == devWallet);\r\n    require(softcapAchieved);\r\n    if(!feePayed) {\r\n      devWallet.transfer(devLimit);\r\n      feePayed = true;\r\n    }\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function updateBalance(address to, uint amount) internal {\r\n    balances[to] = balances[to].add(amount);\r\n    if (!softcapAchieved && invested >= softcap) {\r\n      softcapAchieved = true;\r\n    }\r\n  }\r\n\r\n  function refund() public {\r\n    require(refundOn && balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n\r\n  function updateRefundState() internal returns(bool) {\r\n    if (!softcapAchieved) {\r\n      refundOn = true;\r\n    }\r\n    return refundOn;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/TeamWallet.sol\r\n\r\ncontract TeamWallet is Ownable{\r\n\t\r\n  address public token;\r\n\r\n  address public crowdsale;\r\n\r\n  uint public lockPeriod;\r\n\r\n  uint public endLock;\r\n\r\n  bool public started;\r\n\r\n  modifier onlyCrowdsale() {\r\n    require(crowdsale == msg.sender);\r\n    _;\r\n  }\r\n\r\n  function setToken (address _token) public onlyOwner{\r\n  \ttoken = _token;\r\n  }\r\n\r\n  function setCrowdsale (address _crowdsale) public onlyOwner{\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  function setLockPeriod (uint _lockDays) public onlyOwner{\r\n  \trequire(!started);\r\n  \tlockPeriod = 1 days * _lockDays;\r\n  }\r\n\r\n  function start () public onlyCrowdsale{\r\n  \tstarted = true;\r\n  \tendLock = now + lockPeriod;\r\n  }\r\n\r\n  function withdrawTokens (address _to) public onlyOwner{\r\n  \trequire(now > endLock);\r\n  \tERC20 ERC20token = ERC20(token);\r\n    ERC20token.transfer(_to, ERC20token.balanceOf(this));  \r\n  }\r\n  \r\n}\r\n\r\n// File: contracts/ITO.sol\r\n\r\ncontract ITO is ExtendedWalletsMintTokensFeature, SoftcapFeature, AssembledCommonSale {\r\n\r\n  address public teamWallet;\r\n\r\n  bool public paused;\r\n\r\n  function setTeamWallet (address _teamWallet) public onlyOwner{\r\n    teamWallet = _teamWallet;\r\n  }\r\n\r\n  function mintTokensByETH(address to, uint _invested) internal returns(uint) {\r\n    uint _tokens = super.mintTokensByETH(to, _invested);\r\n    updateBalance(to, _invested);\r\n    return _tokens;\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    if (updateRefundState()) {\r\n      token.finishMinting();\r\n    } else {\r\n      withdraw();\r\n      mintExtendedTokens();\r\n      token.finishMinting();\r\n      TeamWallet tWallet = TeamWallet(teamWallet);\r\n      tWallet.start();\r\n    }\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    require(!paused);\r\n    return mintTokensByETH(msg.sender, msg.value);\r\n  }\r\n\r\n  function pauseITO() public onlyOwner {\r\n    paused = true;\r\n  }\r\n\r\n  function continueITO() public onlyOwner {\r\n    paused = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReceivingContractCallback.sol\r\n\r\ncontract ReceivingContractCallback {\r\n\r\n  function tokenFallback(address _from, uint _value) public;\r\n\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\ncontract Token is MintableToken {\r\n\r\n  string public constant name = \"HelixHill\";\r\n\r\n  string public constant symbol = \"HILL\";\r\n\r\n  uint32 public constant decimals = 18;\r\n\r\n  mapping(address => bool)  public registeredCallbacks;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    return processCallback(super.transfer(_to, _value), msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    return processCallback(super.transferFrom(_from, _to, _value), _from, _to, _value);\r\n  }\r\n\r\n  function registerCallback(address callback) public onlyOwner {\r\n    registeredCallbacks[callback] = true;\r\n  }\r\n\r\n  function deregisterCallback(address callback) public onlyOwner {\r\n    registeredCallbacks[callback] = false;\r\n  }\r\n\r\n  function processCallback(bool result, address from, address to, uint value) internal returns(bool) {\r\n    if (result && registeredCallbacks[to]) {\r\n      ReceivingContractCallback targetCallback = ReceivingContractCallback(to);\r\n      targetCallback.tokenFallback(from, value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Configurator.sol\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  Token public token;\r\n  ITO public ito;\r\n  TeamWallet public teamWallet;\r\n\r\n  function deploy() public onlyOwner {\r\n\r\n    address manager = 0xd6561BF111dAfe86A896D6c844F82AE4a5bbc707;\r\n\r\n    token = new Token();\r\n    ito = new ITO();\r\n    teamWallet = new TeamWallet();\r\n\r\n    token.setSaleAgent(ito);\r\n\r\n    ito.setStart(1530622800);\r\n    ito.addMilestone(2000, 5000000000000000000000, 146);\r\n    ito.addMilestone(1000, 2000000000000000000000, 30);\r\n    ito.addMilestone(1000, 1950000000000000000000, 30);\r\n    ito.addMilestone(2000, 1800000000000000000000, 30);\r\n    ito.addMilestone(3000, 1750000000000000000000, 30);\r\n    ito.addMilestone(3500, 1600000000000000000000, 30);\r\n    ito.addMilestone(4000, 1550000000000000000000, 30);\r\n    ito.addMilestone(4500, 1500000000000000000000, 30);\r\n    ito.addMilestone(5000, 1450000000000000000000, 30);\r\n    ito.addMilestone(6000, 1400000000000000000000, 30);\r\n    ito.addMilestone(8000, 1000000000000000000000, 30);\r\n    ito.setSoftcap(2000000000000000000000);\r\n    ito.setMinInvestedLimit(100000000000000000);\r\n    ito.setWallet(0x3047e47EfC33cF8f6F9C3bdD1ACcaEda75B66f2A);\r\n    ito.addWallet(0xe129b76dF45bFE35FE4a3fA52986CC8004538C98, 6);\r\n    ito.addWallet(0x26Db091BF1Bcc2c439A2cA7140D76B4e909C7b4e, 2);\r\n    ito.addWallet(teamWallet, 15);\r\n    ito.addWallet(0x2A3b94CB5b9E10E12f97c72d6B5E09BD5A0E6bF1, 12);\r\n    ito.setPercentRate(100);\r\n    ito.setToken(token);\r\n    ito.setTeamWallet(teamWallet);\r\n\r\n    teamWallet.setToken(token);\r\n    teamWallet.setCrowdsale(ito);\r\n    teamWallet.setLockPeriod(180);\r\n\r\n    token.transferOwnership(manager);\r\n    ito.transferOwnership(manager);\r\n    teamWallet.transferOwnership(manager);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"addWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSoftcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"insertMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseITO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentRate\",\"type\":\"uint256\"}],\"name\":\"setPercentRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearMilestones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directMintAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirectMintAgent\",\"type\":\"address\"}],\"name\":\"setDirectMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintExtendedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcapAchieved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueITO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokensExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinInvestedLimit\",\"type\":\"uint256\"}],\"name\":\"setMinInvestedLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milestonesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMilestone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"changeMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_invested\",\"type\":\"uint256\"}],\"name\":\"mintTokensByETHExternal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"addMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"closed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ITO","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b8b507d679a714b1262377391076241d8b34457216ba808d4b8f415e2e466b14"}]}