{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nGame Name: WallCryptoStreet\r\nGame Link: https://wallcryptostreet.net/\r\nRules: \r\n- Players can purchase companies and sell shares & ads to the other players. \r\n- Company owners receive a commission of 80% for the initial sell of their shares and 10% on consecutive sales.\r\n- When a company sell an ad, 50% of the revenue is distributed among the shareholders, 40% to you and 10% to us. \r\n- Ads are visible until someone else pays more than the previous user. \r\n- Companies, shares and ads can be acquired for 1.5x the amount paid.\r\n*/\r\n\r\ncontract WallCryptoStreet {\r\n\r\n    address ceoAddress = 0x9aFbaA3003D9e75C35FdE2D1fd283b13d3335f00;\r\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\r\n    \r\n    modifier onlyCeo() {\r\n        require (msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    \r\n    struct Company {\r\n        string name;\r\n        address ownerAddress;\r\n        uint256 curPrice;\r\n        uint256 curAdPrice;\r\n        string curAdText;\r\n        string curAdLink;\r\n        uint256 volume;\r\n    }\r\n    Company[] companies;\r\n\r\n    struct Share {\r\n        uint companyId;\r\n        address ownerAddress;\r\n        uint256 curPrice;\r\n    }\r\n    Share[] shares;\r\n\r\n    // How many shares an addres own\r\n    mapping (address => uint) public addressSharesCount;\r\n    bool companiesAreInitiated;\r\n    bool isPaused;\r\n    \r\n    /*\r\n    We use the following functions to pause and unpause the game.\r\n    */\r\n    function pauseGame() public onlyCeo {\r\n        isPaused = true;\r\n    }\r\n    function unPauseGame() public onlyCeo {\r\n        isPaused = false;\r\n    }\r\n    function GetIsPauded() public view returns(bool) {\r\n       return(isPaused);\r\n    }\r\n\r\n    /*\r\n    This function allows players to purchase companies from other players. \r\n    The price is automatically multiplied by 1.5 after each purchase.\r\n    */\r\n    function purchaseCompany(uint _companyId) public payable {\r\n        require(msg.value == companies[_companyId].curPrice);\r\n        require(isPaused == false);\r\n\r\n        // Calculate the 5% value\r\n        uint256 commission5percent = ((msg.value / 10)/2);\r\n\r\n        // Calculate the owner commission on this sale & transfer the commission to the owner.      \r\n        uint256 commissionOwner = msg.value - commission5percent; // => 95%\r\n        companies[_companyId].ownerAddress.transfer(commissionOwner);\r\n\r\n        // Transfer the 5% commission to the developer\r\n        cfoAddress.transfer(commission5percent); // => 5%                   \r\n\r\n        // Update the company owner and set the new price\r\n        companies[_companyId].ownerAddress = msg.sender;\r\n        companies[_companyId].curPrice = companies[_companyId].curPrice + (companies[_companyId].curPrice / 2);\r\n        \r\n        // Increment volume generated by company\r\n        companies[_companyId].volume = companies[_companyId].volume + msg.value;\r\n    }\r\n    \r\n    /*\r\n    We use this function to allow users to purchase advertisment from a listing. \r\n    Ad is visible until someone pays more than the previous user\r\n    */\r\n    function purchaseAd(uint _companyId, string adText, string adLink) public payable {\r\n        require(msg.value == companies[_companyId].curAdPrice);\r\n\r\n        // Save text and link for the ad\r\n        companies[_companyId].curAdText = adText;\r\n        companies[_companyId].curAdLink = adLink;\r\n\r\n        // Distribute the money paid among investors, company owner and dev\r\n        uint256 commission1percent = (msg.value / 100);\r\n        companies[_companyId].ownerAddress.transfer(commission1percent * 40);   // Company owner gets 40% of the amount paid\r\n        cfoAddress.transfer(commission1percent * 10);   // Dev gets a commission of 10% of the amount paid\r\n\r\n        uint256 commissionShareholders = commission1percent * 50;   // 50% of the amount paid is distributed to shareholders\r\n        uint256 commissionOneShareholder = commissionShareholders / 5;\r\n\r\n        // Get the list of shareholders for this company\r\n        address[] memory shareholdersAddresses = getCompanyShareholders(_companyId);\r\n        // We loop thrugh all of the shareholders and transfer their commission\r\n        for (uint8 i = 0; i < 5; i++) {\r\n            shareholdersAddresses[i].transfer(commissionOneShareholder);\r\n        }\r\n\r\n        // Raise the price of the advertising\r\n        companies[_companyId].curAdPrice = companies[_companyId].curAdPrice + (companies[_companyId].curAdPrice / 2);\r\n\r\n        // Increment volume generated by company\r\n        companies[_companyId].volume = companies[_companyId].volume + msg.value;\r\n    }\r\n\r\n    /*\r\n    This function is used to handle the purchase of a share.\r\n    */\r\n    function purchaseShare(uint _shareId) public payable {\r\n        require(msg.value == shares[_shareId].curPrice);\r\n    \r\n        uint256 commission1percent = (msg.value / 100);\r\n        /*\r\n        We check if this is the first purchase of a share or a \"repurchase\".\r\n        If it's the first purchase we transfer a larger commission to the company owner\r\n        */\r\n        if(shares[_shareId].ownerAddress == cfoAddress) {\r\n            // This is the initial sale\r\n            companies[shares[_shareId].companyId].ownerAddress.transfer(commission1percent * 80); // 80% goes to the company owner\r\n            cfoAddress.transfer(commission1percent * 20);    // 20% goes to the dev\r\n        } else {\r\n            // This is a consecutive sale\r\n            shares[_shareId].ownerAddress.transfer(commission1percent * 85);    // 85% goes to the previous shareholder\r\n            companies[shares[_shareId].companyId].ownerAddress.transfer(commission1percent * 10); // 10% goes to the company owner\r\n            cfoAddress.transfer(commission1percent * 5);    // 5% goes to the dev\r\n        }\r\n        // Decrement count shares previous user\r\n        addressSharesCount[shares[_shareId].ownerAddress]--;\r\n        \r\n        // Update the owner of the share\r\n        shares[_shareId].ownerAddress = msg.sender;\r\n        addressSharesCount[msg.sender]++;\r\n        \r\n        // Raise the price of the share\r\n        shares[_shareId].curPrice = shares[_shareId].curPrice + (shares[_shareId].curPrice / 2);\r\n        \r\n        // Increment volume generated by company\r\n        companies[shares[_shareId].companyId].volume = companies[shares[_shareId].companyId].volume + msg.value;\r\n    }\r\n\r\n    // This function will return an array of addresses of the company shareholders (very useful to transfer their ad commission)\r\n    function getCompanyShareholders(uint _companyId) public view returns(address[]) {\r\n        address[] memory result = new address[](5);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < shares.length; i++) {\r\n          if (shares[i].companyId == _companyId) {\r\n            result[counter] = shares[i].ownerAddress;\r\n            counter++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /*\r\n    The owner of a company can reduce the price of the company using this function.\r\n    The price can be reduced but cannot be bigger.\r\n    The price is set in WEI.\r\n    */\r\n    function updateCompanyPrice(uint _companyId, uint256 _newPrice) public {\r\n        require(_newPrice > 0);\r\n        require(companies[_companyId].ownerAddress == msg.sender);\r\n        require(_newPrice < companies[_companyId].curPrice);\r\n        companies[_companyId].curPrice = _newPrice;\r\n    }\r\n    \r\n    /*\r\n    The owner of a share can reduce the price of the selected share using this function.\r\n    The price of the share can be reduced but cannot be bigger.\r\n    The price is set in WEI.\r\n    */\r\n    function updateSharePrice(uint _shareId, uint256 _newPrice) public {\r\n        require(_newPrice > 0);\r\n        require(shares[_shareId].ownerAddress == msg.sender);\r\n        require(_newPrice < shares[_shareId].curPrice);\r\n        shares[_shareId].curPrice = _newPrice;\r\n    }\r\n    \r\n    // This function will return the details of a company\r\n    function getCompany(uint _companyId) public view returns (\r\n        string name,\r\n        address ownerAddress,\r\n        uint256 curPrice,\r\n        uint256 curAdPrice,\r\n        string curAdText,\r\n        string curAdLink,\r\n        uint shareId,   // The id of the least expensive share of this company\r\n        uint256 sharePrice,  // The price of the least expensive share of this company\r\n        uint256 volume\r\n    ) {\r\n        Company storage _company = companies[_companyId];\r\n\r\n        name = _company.name;\r\n        ownerAddress = _company.ownerAddress;\r\n        curPrice = _company.curPrice;\r\n        curAdPrice = _company.curAdPrice;\r\n        curAdText = _company.curAdText;\r\n        curAdLink = _company.curAdLink;\r\n        shareId = getLeastExpensiveShare(_companyId,0);\r\n        sharePrice = getLeastExpensiveShare(_companyId,1);\r\n        volume = _company.volume;\r\n    }\r\n\r\n    // This function will return the details of a share\r\n    function getShare(uint _shareId) public view returns (\r\n        uint companyId,\r\n        address ownerAddress,\r\n        uint256 curPrice\r\n    ) {\r\n        Share storage _share = shares[_shareId];\r\n\r\n        companyId = _share.companyId;\r\n        ownerAddress = _share.ownerAddress;\r\n        curPrice = _share.curPrice;\r\n    }\r\n    \r\n    /*\r\n    This function will return the shares owned by the sender.\r\n    */\r\n    function getMyShares() public view returns(uint[]) {\r\n        uint[] memory result = new uint[](addressSharesCount[msg.sender]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < shares.length; i++) {\r\n          if (shares[i].ownerAddress == msg.sender) {\r\n            result[counter] = i;\r\n            counter++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // Get least expensive share of one company\r\n    function getLeastExpensiveShare(uint _companyId, uint _type) public view returns(uint) {\r\n        uint _shareId = 0;\r\n        uint256 _sharePrice = 999000000000000000000;\r\n\r\n        // Loop through all the shares of this company\r\n        for (uint8 i = 0; i < shares.length; i++) {\r\n            // Get only the shares of this company\r\n            if(shares[i].companyId == _companyId) {\r\n                // Check if this share is less expensive than the previous and if it's not already owned by the connected user\r\n                if(shares[i].curPrice < _sharePrice && shares[i].ownerAddress != msg.sender) {\r\n                    _sharePrice = shares[i].curPrice;\r\n                    _shareId = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the price or the id of the company's least expensive share\r\n        if(_type == 0) {\r\n            return(_shareId);\r\n        } else {\r\n            return(_sharePrice);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    // The dev can use this function to create new companies.\r\n    function createCompany(string _companyName, uint256 _companyPrice) public onlyCeo {\r\n        uint companyId = companies.push(Company(_companyName, cfoAddress, _companyPrice, 10000000000000000, \"0\", \"#\",0)) - 1;\r\n        // The initial price of a share is always the initial price of a company / 10.\r\n        uint256 sharePrice = _companyPrice / 10;\r\n        \r\n        // We create 5 shares for this company\r\n        shares.push(Share(companyId, cfoAddress, sharePrice));\r\n        shares.push(Share(companyId, cfoAddress, sharePrice));\r\n        shares.push(Share(companyId, cfoAddress, sharePrice));\r\n        shares.push(Share(companyId, cfoAddress, sharePrice));\r\n        shares.push(Share(companyId, cfoAddress, sharePrice));\r\n    }\r\n    \r\n    // Initiate functions that will create the companies\r\n    function InitiateCompanies() public onlyCeo {\r\n        require(companiesAreInitiated == false);\r\n        createCompany(\"Apple\", 350000000000000000); \r\n        createCompany(\"Snapchat\", 200000000000000000); \r\n        createCompany(\"Facebook\", 250000000000000000); \r\n        createCompany(\"Google\", 250000000000000000); \r\n        createCompany(\"Microsoft\", 350000000000000000); \r\n        createCompany(\"Nintendo\", 150000000000000000); \r\n        createCompany(\"Mc Donald\", 250000000000000000); \r\n        createCompany(\"Kodak\", 100000000000000000);\r\n        createCompany(\"Twitter\", 100000000000000000);\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"},{\"name\":\"adText\",\"type\":\"string\"},{\"name\":\"adLink\",\"type\":\"string\"}],\"name\":\"purchaseAd\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shareId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateSharePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getLeastExpensiveShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shareId\",\"type\":\"uint256\"}],\"name\":\"purchaseShare\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_companyName\",\"type\":\"string\"},{\"name\":\"_companyPrice\",\"type\":\"uint256\"}],\"name\":\"createCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"name\":\"getCompany\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"},{\"name\":\"curAdPrice\",\"type\":\"uint256\"},{\"name\":\"curAdText\",\"type\":\"string\"},{\"name\":\"curAdLink\",\"type\":\"string\"},{\"name\":\"shareId\",\"type\":\"uint256\"},{\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiateCompanies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateCompanyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetIsPauded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"name\":\"getCompanyShareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressSharesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shareId\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"name\":\"companyId\",\"type\":\"uint256\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"name\":\"purchaseCompany\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WallCryptoStreet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41665185d0efefef4b0dccbc7606707c7d72fb2e5e85310c65d95a8692180145"}]}