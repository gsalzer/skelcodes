{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  \r\n  address internal tokensHolder = 0x2Ff4be5E03a079D5FC20Dba8d763059FcB78CA9f;\r\n  address internal burnAndRef = 0x84765e3f2D0379eC7AAb7de8b480762a75f14ef4;\r\n\r\n  uint256 totalSupply_;\r\n  uint256 tokensDistributed_;\r\n  uint256 burnedTokens_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  function tokensAvailable() public view returns (uint256) {\r\n    return balances[tokensHolder];\r\n  }\r\n  function tokensDistributed() public view returns (uint256) {\r\n    return tokensDistributed_;\r\n  }\r\n  function getTokensHolder() public view returns (address) {\r\n    return tokensHolder;\r\n  }\r\n  function burnedTokens() public view returns (uint256) {\r\n    return burnedTokens_;\r\n  }\r\n  function getRefAddress() public view returns (address) {\r\n    return burnAndRef;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function deposit(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokensAvailable());\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[tokensHolder] = balances[tokensHolder].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    tokensDistributed_ = tokensDistributed_.add(_value);\r\n    emit Transfer(address(0), _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BurnableToken is MintableToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n  \r\n  function transferToRef(address _to, uint256 _value) public onlyOwner {\r\n    require(_value <= balances[tokensHolder]);\r\n\r\n    balances[tokensHolder] = balances[tokensHolder].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    tokensDistributed_ = tokensDistributed_.add(_value);\r\n    emit Transfer(tokensHolder, address(0), _value);\r\n  }\r\n  \r\n  function burnTokens(uint256 _value) public onlyOwner {\r\n    require(_value <= balances[burnAndRef]);\r\n\r\n    balances[burnAndRef] = balances[burnAndRef].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    burnedTokens_ = burnedTokens_.add(_value);\r\n    emit Burn(burnAndRef, _value);\r\n    emit Transfer(burnAndRef, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract WRLToken is BurnableToken {\r\n    string public name = \"Whyral Token\";\r\n    string public symbol = \"WRL\";\r\n    uint256 public decimals = 8;\r\n    \r\n    uint256 internal rate;\r\n    \r\n    uint256 public currentStage;\r\n  \r\n    uint256 internal stage0Cap = 42000000 * (10 ** uint256(decimals));\r\n    uint256 internal stage1Cap = 71165000 * (10 ** uint256(decimals));  //29165000\r\n    uint256 internal stage2Cap = 91165000 * (10 ** uint256(decimals));  //20000000\r\n    uint256 internal stage3Cap = 103497402 * (10 ** uint256(decimals)); //12332402\r\n\r\n    uint256 internal stage0Start = 1523782800; //15 April 2018\r\n    uint256 internal stage0End = 1527764400;   //31 May 2018\r\n    uint256 internal stage1Start = 1528016400; //3 June 2018\r\n    uint256 internal stage1End = 1530356400;   //30 June 2018\r\n    uint256 internal stage2Start = 1530608400; //3 July 2018\r\n    uint256 internal stage2End = 1532516400;   //25 July 2018\r\n    uint256 internal stage3Start = 1532768400; //28 July 2018\r\n    uint256 internal stage3End = 1534330800;   //15 Aug 2018\r\n    \r\n    uint256 internal stage0Rate = 700000;  //1 ETH = 7000.00 Decimal is considered while calculation\r\n    uint256 internal stage1Rate = 583300;  //1 ETH = 5833.00 Decimal is considered while calculation\r\n    uint256 internal stage2Rate = 500000;  //1 ETH = 5000.00 Decimal is considered while calculation\r\n    uint256 internal stage3Rate = 466782;  //1 ETH = 4667.82 Decimal is considered while calculation\r\n    \r\n    function getStage0Cap() public view returns (uint256) {\r\n        return stage0Cap;\r\n    }\r\n    function getStage1Cap() public view returns (uint256) {\r\n        return stage1Cap;\r\n    }\r\n    function getStage2Cap() public view returns (uint256) {\r\n        return stage2Cap;\r\n    }\r\n    function getStage3Cap() public view returns (uint256) {\r\n        return stage3Cap;\r\n    }\r\n    function getStage0End() public view returns (uint256) {\r\n        return stage0End;\r\n    }\r\n    function getStage1End() public view returns (uint256) {\r\n        return stage1End;\r\n    }\r\n    function getStage2End() public view returns (uint256) {\r\n        return stage2End;\r\n    }\r\n    function getStage3End() public view returns (uint256) {\r\n        return stage3End;\r\n    }\r\n    function getStage0Start() public view returns (uint256) {\r\n        return stage0Start;\r\n    }\r\n    function getStage1Start() public view returns (uint256) {\r\n        return stage1Start;\r\n    }\r\n    function getStage2Start() public view returns (uint256) {\r\n        return stage2Start;\r\n    }\r\n    function getStage3Start() public view returns (uint256) {\r\n        return stage3Start;\r\n    }\r\n    function getDecimals() public view returns (uint256) {\r\n        return decimals;\r\n    }\r\n\r\n    \r\n    function getRateStages(uint256 _tokens) public onlyOwner returns(uint256) {\r\n      uint256 tokensDistributedValue = tokensDistributed();\r\n      tokensDistributedValue = tokensDistributedValue.sub(4650259800000000);\r\n      uint256 burnedTokensValue = burnedTokens();\r\n      uint256 currentValue = tokensDistributedValue.add(burnedTokensValue);\r\n      uint256 finalTokenValue = currentValue.add(_tokens);\r\n      uint256 toBeBurned;\r\n      \r\n      if(now >= stage0Start && now < stage0End) {\r\n          if(finalTokenValue <= stage0Cap) {\r\n              rate = stage0Rate;\r\n              currentStage = 0;\r\n          }\r\n          else {\r\n              rate = 0;\r\n              currentStage = 0;\r\n          }\r\n      }\r\n      else if(now >= stage1Start && now < stage1End) {\r\n          if(currentValue < stage0Cap) {\r\n              toBeBurned = stage0Cap.sub(currentValue);\r\n              transferToRef(burnAndRef, toBeBurned);\r\n              \r\n              finalTokenValue = finalTokenValue.add(toBeBurned);\r\n              \r\n              if(finalTokenValue <= stage1Cap) {\r\n                  rate = stage1Rate;\r\n                  currentStage = 1;\r\n              }\r\n              else {\r\n                  rate = 0;\r\n                  currentStage = 1;\r\n              }\r\n          }\r\n          else {\r\n              if(finalTokenValue <= stage1Cap) {\r\n                  rate = stage1Rate;\r\n                  currentStage = 1;\r\n              }\r\n              else {\r\n                  rate = 0;\r\n                  currentStage = 1;\r\n              }\r\n          }\r\n      }\r\n      else if(now >= stage2Start && now < stage2End) {\r\n          if(currentValue < stage1Cap) {\r\n              toBeBurned = stage1Cap.sub(currentValue);\r\n              transferToRef(burnAndRef, toBeBurned);\r\n              \r\n              finalTokenValue = finalTokenValue.add(toBeBurned);\r\n              \r\n              if(finalTokenValue <= stage2Cap) {\r\n                  rate = stage2Rate;\r\n                  currentStage = 2;\r\n              }\r\n              else {\r\n                  rate = 0;\r\n                  currentStage = 2;\r\n              }\r\n          }\r\n          else {\r\n              if(finalTokenValue <= stage2Cap) {\r\n                  rate = stage2Rate;\r\n                  currentStage = 2;\r\n              }\r\n              else {\r\n                  rate = 0;\r\n                  currentStage = 2;\r\n              }\r\n          }\r\n      }\r\n      else if(now >= stage3Start && now < stage3End) {\r\n          if(currentValue < stage2Cap) {\r\n              toBeBurned = stage2Cap.sub(currentValue);\r\n              transferToRef(burnAndRef, toBeBurned);\r\n              \r\n              finalTokenValue = finalTokenValue.add(toBeBurned);\r\n              \r\n              if(finalTokenValue <= stage3Cap) {\r\n                  rate = stage3Rate;\r\n                  currentStage = 3;\r\n              }\r\n              else {\r\n                  rate = 0;\r\n                  currentStage = 3;\r\n              }\r\n          }\r\n          else {\r\n              if(finalTokenValue <= stage3Cap) {\r\n                  rate = stage3Rate;\r\n                  currentStage = 3;\r\n              }\r\n              else {\r\n                  rate = 0;\r\n                  currentStage = 3;\r\n              }\r\n          }\r\n      }\r\n      else if(now >= stage3End) {\r\n          if(currentValue < stage3Cap) {\r\n              toBeBurned = stage3Cap.sub(currentValue);\r\n              transferToRef(burnAndRef, toBeBurned);\r\n              \r\n              rate = 0;\r\n              currentStage = 4;\r\n          }\r\n          else {\r\n              rate = 0;\r\n              currentStage = 4;\r\n          }\r\n      }\r\n      else {\r\n          rate = 0;\r\n      }\r\n      \r\n      return rate;\r\n  }\r\n    \r\n    function WRLToken() public {\r\n        totalSupply_ = 0;\r\n        tokensDistributed_ = 0;\r\n        currentStage = 0;\r\n        \r\n        uint256 __initialSupply = 150000000 * (10 ** uint256(decimals));\r\n        address tokensHolder = getTokensHolder();\r\n        mint(tokensHolder, __initialSupply);\r\n        finishMinting();\r\n    }\r\n}\r\n\r\ncontract TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range. \r\n   */\r\n  modifier onlyWhileOpen {\r\n    require(now >= openingTime && now <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\r\n    require(_openingTime >= now);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    return now > closingTime;\r\n  }\r\n  \r\n  function isOpen() public view returns (bool) {\r\n    return ((now > openingTime) && (now < closingTime));\r\n  }\r\n  \r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\r\n    //super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n  \r\n  // The token being sold\r\n  WRLToken public token;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasClosed());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n      token.getRateStages(0);\r\n  }\r\n}\r\n\r\ncontract WhitelistedCrowdsale is FinalizableCrowdsale {\r\n\r\n  mapping(address => bool) public whitelist;\r\n\r\n  /**\r\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n   */\r\n  modifier isWhitelisted(address _beneficiary) {\r\n    require(whitelist[_beneficiary]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addToWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n   * @param _beneficiaries Addresses to be added to the whitelist\r\n   */\r\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes single address from whitelist.\r\n   * @param _beneficiary Address to be removed to the whitelist\r\n   */\r\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\r\n   * @param _beneficiary Token beneficiary\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\ncontract WRLCrowdsale is WhitelistedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // Address where funds are collected\r\n  address public wallet = 0x4fB0346F51fA853639EC0d0dA211Cb6F3e27a1f5;\r\n  // Other Addresses\r\n  address internal foundersAndTeam = 0x2E6f0ebFdee59546f224450Ba0c8F0522cedA2e9;\r\n  address internal advisors = 0xCa502d4cEaa99Bf1aD554f91FD2A9013511629D4;\r\n  address internal bounties = 0x45138E31Ab7402b8Cf363F9d4e732fdb020e5Dd8;\r\n  address internal reserveFund = 0xE9ebcAdB98127e3CDe242EaAdcCb57BF0d9576Cc;\r\n  \r\n  uint256 internal foundersAndTeamTokens = 22502598 * (10 ** uint256(8));\r\n  uint256 internal advisorsTokens = 12000000 * (10 ** uint256(8));\r\n  uint256 internal bountiesTokens = 6000000 * (10 ** uint256(8));\r\n  uint256 internal reserveFundTokens = 6000000 * (10 ** uint256(8));\r\n    \r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n  //1523782800 : 15 April 2018\r\n  //1534330800 : 15 Aug 2018\r\n  function WRLCrowdsale() public \r\n     TimedCrowdsale(1523782800, 1534330800)\r\n  {\r\n      weiRaised = 0;\r\n      \r\n      token = new WRLToken();\r\n      \r\n      token.deposit(foundersAndTeam, foundersAndTeamTokens);\r\n      token.deposit(advisors, advisorsTokens);\r\n      token.deposit(bounties, bountiesTokens);\r\n      token.deposit(reserveFund, reserveFundTokens);\r\n  }\r\n  \r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n    require(msg.value >= 100000000000000000);\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    uint256 rate = token.getRateStages(tokens);\r\n    require(rate != 0);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n  \r\n  function referralTokens(address _beneficiary, uint256 _tokens) onlyOwner public {\r\n      uint256 decimals = token.getDecimals();\r\n      _tokens = _tokens * (10 ** uint256(decimals));\r\n      _preValidatePurchase(_beneficiary, _tokens);\r\n      \r\n      uint256 rate = token.getRateStages(_tokens);\r\n      require(rate != 0);\r\n      \r\n      _processPurchase(_beneficiary, _tokens);\r\n      emit TokenPurchase(msg.sender, _beneficiary, 0, _tokens);\r\n      \r\n      _updatePurchasingState(_beneficiary, 0);\r\n      \r\n      _postValidatePurchase(_beneficiary, 0);\r\n  }\r\n  \r\n  function callStages() onlyOwner public {\r\n      token.getRateStages(0);\r\n  }\r\n  \r\n  function callBurnTokens(uint256 _tokens) public {\r\n      address a = token.getRefAddress();\r\n      require(msg.sender == a);\r\n      \r\n      token.burnTokens(_tokens);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    require(_tokenAmount <= token.tokensAvailable());\r\n\r\n    token.deposit(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\r\n      uint256 tokenAmount = _weiAmount;\r\n      uint256 rate = token.getRateStages(0);\r\n      require(rate != 0);\r\n      tokenAmount = tokenAmount.mul(rate);\r\n      tokenAmount = tokenAmount.div(1000000000000);\r\n      return tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage3End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage0Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage2End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage3Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage2Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage0End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getRateStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage2Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage3Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage1Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage0Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage1End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage1Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WRLToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eaa5444fed34abad52a506e4b72fc818d49358ae9e86df74d53c8c49c9fd2a28"}]}