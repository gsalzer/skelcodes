{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable \r\n{\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract NFT \r\n{\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address) public constant returns (uint);\r\n  function tokenOfOwnerByIndex(address owner, uint index) public constant returns (uint);\r\n  function ownerOf(uint tokenId) public constant returns (address);\r\n  function transfer(address to, uint tokenId) public;\r\n  function takeOwnership(uint tokenId) public;\r\n  function approve(address beneficiary, uint tokenId) public;\r\n  function metadata(uint tokenId) public constant returns (string);\r\n}\r\n\r\ncontract NFTEvents \r\n{\r\n  event TokenCreated(uint tokenId, address owner, string metadata);\r\n  event TokenDestroyed(uint tokenId, address owner);\r\n  event TokenTransferred(uint tokenId, address from, address to);\r\n  event TokenTransferAllowed(uint tokenId, address beneficiary);\r\n  event TokenTransferDisallowed(uint tokenId, address beneficiary);\r\n  event TokenMetadataUpdated(uint tokenId, address owner, string data);\r\n}\r\n\r\ncontract BasicNFT is NFT, NFTEvents \r\n{\r\n  uint public totalTokens;\r\n\r\n  // Array of owned tokens for a user\r\n  mapping(address => uint[]) public ownedTokens;\r\n  mapping(address => uint) _virtualLength;\r\n  mapping(uint => uint) _tokenIndexInOwnerArray;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping(uint => address) public tokenOwner;\r\n\r\n  // Allowed transfers for a token (only one at a time)\r\n  mapping(uint => address) public allowedTransfer;\r\n\r\n  // Metadata associated with each token\r\n  mapping(uint => string) public tokenMetadata;\r\n\r\n  function totalSupply() public constant returns (uint) \r\n  {\r\n    return totalTokens;\r\n  }\r\n\r\n  function balanceOf(address owner) public constant returns (uint) \r\n  {\r\n    return _virtualLength[owner];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(address owner, uint index) public constant returns (uint) \r\n  {\r\n    require(index >= 0 && index < balanceOf(owner));\r\n    return ownedTokens[owner][index];\r\n  }\r\n\r\n  function getAllTokens(address owner) public constant returns (uint[]) \r\n  {\r\n    uint size = _virtualLength[owner];\r\n    uint[] memory result = new uint[](size);\r\n    for (uint i = 0; i < size; i++) {\r\n      result[i] = ownedTokens[owner][i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function ownerOf(uint tokenId) public constant returns (address) \r\n  {\r\n    return tokenOwner[tokenId];\r\n  }\r\n\r\n  function transfer(address to, uint tokenId) public\r\n  {\r\n    require(tokenOwner[tokenId] == msg.sender || allowedTransfer[tokenId] == msg.sender);\r\n    _transfer(tokenOwner[tokenId], to, tokenId);\r\n  }\r\n\r\n  function takeOwnership(uint tokenId) public \r\n  {\r\n    require(allowedTransfer[tokenId] == msg.sender);\r\n    _transfer(tokenOwner[tokenId], msg.sender, tokenId);\r\n  }\r\n\r\n  function approve(address beneficiary, uint tokenId) public \r\n  {\r\n    require(msg.sender == tokenOwner[tokenId]);\r\n    if (allowedTransfer[tokenId] != 0) \r\n    {\r\n      allowedTransfer[tokenId] = 0;\r\n      TokenTransferDisallowed(tokenId, allowedTransfer[tokenId]);\r\n    }\r\n    allowedTransfer[tokenId] = beneficiary;\r\n    TokenTransferAllowed(tokenId, beneficiary);\r\n  }\r\n\r\n  function metadata(uint tokenId) constant public returns (string) \r\n  {\r\n    return tokenMetadata[tokenId];\r\n  }\r\n\r\n  function updateTokenMetadata(uint tokenId, string _metadata) internal returns(bool)\r\n  {\r\n    require(msg.sender == tokenOwner[tokenId]);\r\n    tokenMetadata[tokenId] = _metadata;\r\n    TokenMetadataUpdated(tokenId, msg.sender, _metadata);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address from, address to, uint tokenId) internal returns(bool)\r\n  {\r\n    allowedTransfer[tokenId] = 0;\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n    TokenTransferred(tokenId, from, to);\r\n    return true;\r\n  }\r\n\r\n  function _removeTokenFrom(address from, uint tokenId) internal \r\n  {\r\n    require(_virtualLength[from] > 0);\r\n    uint length = _virtualLength[from];\r\n    uint index = _tokenIndexInOwnerArray[tokenId];\r\n    uint swapToken = ownedTokens[from][length - 1];\r\n    ownedTokens[from][index] = swapToken;\r\n    _tokenIndexInOwnerArray[swapToken] = index;\r\n    _virtualLength[from]--;\r\n  }\r\n\r\n  function _addTokenTo(address owner, uint tokenId) internal \r\n  {\r\n    if (ownedTokens[owner].length == _virtualLength[owner]) \r\n    {\r\n      ownedTokens[owner].push(tokenId);\r\n    } \r\n    else \r\n    {\r\n      ownedTokens[owner][_virtualLength[owner]] = tokenId;\r\n    }\r\n    tokenOwner[tokenId] = owner;\r\n    _tokenIndexInOwnerArray[tokenId] = _virtualLength[owner];\r\n    _virtualLength[owner]++;\r\n  }\r\n}\r\n\r\ncontract PlanetToken is Ownable, BasicNFT \r\n{\r\n  string public name = 'Planet Tokens';\r\n  string public symbol = 'PT';\r\n   \r\n  mapping (uint => uint) public cordX;\r\n  mapping (uint => uint) public cordY;\r\n  mapping (uint => uint) public cordZ;\r\n  mapping (uint => uint) public lifeD;\r\n  mapping (uint => uint) public lifeN;\r\n  mapping (uint => uint) public lifeA;    \r\n  mapping (uint => uint) public latestPing;\r\n    \r\n  struct planet\r\n  {\r\n    uint x;\r\n    uint y;\r\n    uint z;\r\n    string name;\r\n    address owner;\r\n    string liason;\r\n    string url;\r\n    uint cost;\r\n    uint index;\r\n  }\r\n    \r\n  struct _donations\r\n  {\r\n      uint start;\r\n      uint genesis;\r\n      uint interval;\r\n      uint ppp;\r\n      uint amount;\r\n      uint checkpoint;\r\n  }\r\n\r\n  mapping(uint => planet) planets;\r\n  mapping(address => _donations) donations;\r\n  \r\n  string private universe;\r\n  uint private min_donation;\r\n  address private donation_address;\r\n  uint private coordinate_limit;\r\n\r\n  event TokenPing(uint tokenId);\r\n\r\n  function () public payable \r\n  {\r\n      donation_address.transfer(msg.value);\r\n  }\r\n    \r\n  function PlanetToken(string UniverseName, uint CoordinateLimit, address DonationAddress, uint StartingWeiDonation, uint BlockIntervals, uint WeiPerPlanet) public\r\n  {\r\n      universe = UniverseName;\r\n      min_donation = StartingWeiDonation;\r\n      coordinate_limit = CoordinateLimit;\r\n      donation_address = DonationAddress;\r\n      donations[donation_address].start = min_donation;\r\n      donations[donation_address].genesis = block.number;\r\n      donations[donation_address].checkpoint = block.number;\r\n      donations[donation_address].interval = BlockIntervals;\r\n      donations[donation_address].ppp = WeiPerPlanet;\r\n      donations[donation_address].amount = min_donation;\r\n  }\r\n\r\n  function assignNewPlanet(address beneficiary, uint x, uint y, uint z, string _planetName, string liason, string url) public payable \r\n  {  \r\n    // Check current fee\r\n    uint MinimumDonation = donations[donation_address].amount;\r\n      \r\n    // Check required paramters\r\n    require(tokenOwner[buildTokenId(x, y, z)] == 0);\r\n    require(msg.value >= MinimumDonation);\r\n    require(x <= coordinate_limit);\r\n    require(y <= coordinate_limit);\r\n    require(z <= coordinate_limit);\r\n     \r\n    // Update token records\r\n    latestPing[buildTokenId(x, y, z)] = now;\r\n    _addTokenTo(beneficiary, buildTokenId(x, y, z));\r\n    totalTokens++;\r\n    tokenMetadata[buildTokenId(x, y, z)] = _planetName;\r\n\r\n    // Update galactic records\r\n    cordX[buildTokenId(x, y, z)] = x;\r\n    cordY[buildTokenId(x, y, z)] = y;\r\n    cordZ[buildTokenId(x, y, z)] = z;\r\n\r\n    // Update DNA records\r\n    lifeD[buildTokenId(x, y, z)] = uint256(keccak256(x, '|x|', msg.sender, '|', universe));\r\n    lifeN[buildTokenId(x, y, z)] = uint256(keccak256(y, '|y|', msg.sender, '|', universe));\r\n    lifeA[buildTokenId(x, y, z)] = uint256(keccak256(z, '|z|', msg.sender, '|', universe));\r\n      \r\n    // Map the planet object too ...\r\n    planets[buildTokenId(x, y, z)].x = x;\r\n    planets[buildTokenId(x, y, z)].x = y;\r\n    planets[buildTokenId(x, y, z)].x = z;\r\n    planets[buildTokenId(x, y, z)].name = _planetName;\r\n    planets[buildTokenId(x, y, z)].owner = beneficiary;\r\n    planets[buildTokenId(x, y, z)].liason = liason;\r\n    planets[buildTokenId(x, y, z)].url = url;\r\n    planets[buildTokenId(x, y, z)].index = totalTokens - 1;\r\n    planets[buildTokenId(x, y, z)].cost = msg.value;\r\n\r\n    // Finalize process\r\n    TokenCreated(buildTokenId(x, y, z), beneficiary, _planetName);  \r\n    donation_address.transfer(msg.value);\r\n      \r\n    // Update donation info\r\n    uint this_block = block.number;\r\n    uint new_checkpoint = donations[donation_address].checkpoint + donations[donation_address].interval; \r\n    if(this_block > new_checkpoint)\r\n    {\r\n        donations[donation_address].checkpoint = this_block;\r\n        donations[donation_address].amount = donations[donation_address].ppp * totalTokens;\r\n    }\r\n  }\r\n    \r\n  function MinimumDonation() public view returns(uint)\r\n  {\r\n      return donations[donation_address].amount;\r\n  }\r\n    \r\n  function BlocksToGo() public view returns(uint)\r\n  {\r\n      uint this_block = block.number;\r\n      uint next_block = donations[donation_address].checkpoint + donations[donation_address].interval;\r\n      if(this_block < next_block)\r\n      {\r\n          return next_block - this_block;\r\n      }\r\n      else\r\n      {\r\n          return 0;\r\n      }\r\n  }\r\n    \r\n  function GetLiasonName(uint x, uint y, uint z) public view returns(string)\r\n  {\r\n      return planets[buildTokenId(x, y, z)].liason;\r\n  }\r\n\r\n  function GetLiasonURL(uint x, uint y, uint z) public view returns(string)\r\n  {\r\n      return planets[buildTokenId(x, y, z)].url;\r\n  }\r\n    \r\n  function GetIndex(uint x, uint y, uint z) public view returns(uint)\r\n  {\r\n      return planets[buildTokenId(x, y, z)].index;\r\n  }\r\n    \r\n  function GetCost(uint x, uint y, uint z) public view returns(uint)\r\n  {\r\n      return planets[buildTokenId(x, y, z)].cost;\r\n  }\r\n    \r\n  function UpdatedDonationAddress(address NewAddress) onlyOwner public\r\n  {\r\n      address OldAddress = donation_address;\r\n      donation_address = NewAddress;\r\n      donations[donation_address].start = donations[OldAddress].start;\r\n      donations[donation_address].genesis = donations[OldAddress].genesis;\r\n      donations[donation_address].checkpoint = donations[OldAddress].checkpoint;\r\n      donations[donation_address].interval = donations[OldAddress].interval;\r\n      donations[donation_address].ppp = donations[OldAddress].ppp;\r\n      donations[donation_address].amount = donations[OldAddress].amount;\r\n      \r\n  }\r\n\r\n  function ping(uint tokenId) public \r\n  {\r\n    require(msg.sender == tokenOwner[tokenId]);\r\n    latestPing[tokenId] = now;\r\n    TokenPing(tokenId);\r\n  }\r\n\r\n  function buildTokenId(uint x, uint y, uint z) public view returns (uint256) \r\n  {\r\n    return uint256(keccak256(x, '|', y, '|', z, '|', universe));\r\n  }\r\n\r\n  function exists(uint x, uint y, uint z) public constant returns (bool) \r\n  {\r\n    return ownerOfPlanet(x, y, z) != 0;\r\n  }\r\n\r\n  function ownerOfPlanet(uint x, uint y, uint z) public constant returns (address) \r\n  {\r\n    return tokenOwner[buildTokenId(x, y, z)];\r\n  }\r\n\r\n  function transferPlanet(address to, uint x, uint y, uint z) public \r\n  {\r\n    require(msg.sender == tokenOwner[buildTokenId(x, y, z)]);\r\n    planets[buildTokenId(x, y, z)].owner = to;\r\n  }\r\n\r\n  function planetName(uint x, uint y, uint z) constant public returns (string) \r\n  {\r\n    return tokenMetadata[buildTokenId(x, y, z)];\r\n  }\r\n    \r\n  function planetCordinates(uint tokenId) public constant returns (uint[]) \r\n  {\r\n    uint[] memory data = new uint[](3);\r\n    data[0] = cordX[tokenId];\r\n    data[1] = cordY[tokenId];\r\n    data[2] = cordZ[tokenId];\r\n    return data;\r\n  }\r\n    \r\n  function planetLife(uint x, uint y, uint z) constant public returns (uint[]) \r\n  {\r\n    uint[] memory dna = new uint[](3);\r\n    dna[0] = lifeD[buildTokenId(x, y, z)];\r\n    dna[1] = lifeN[buildTokenId(x, y, z)];\r\n    dna[2] = lifeA[buildTokenId(x, y, z)];\r\n    return dna;\r\n  }\r\n\r\n  function updatePlanetName(uint x, uint y, uint z, string _planetName) public \r\n  {\r\n    if(updateTokenMetadata(buildTokenId(x, y, z), _planetName))\r\n    {\r\n        planets[buildTokenId(x, y, z)].name = _planetName;\r\n    }\r\n  }\r\n  \r\n  function updatePlanetLiason(uint x, uint y, uint z, string LiasonName) public \r\n  {\r\n    require(msg.sender == tokenOwner[buildTokenId(x, y, z)]);\r\n    planets[buildTokenId(x, y, z)].liason = LiasonName;\r\n  }\r\n    \r\n  function updatePlanetURL(uint x, uint y, uint z, string LiasonURL) public \r\n  {\r\n    require(msg.sender == tokenOwner[buildTokenId(x, y, z)]);\r\n    planets[buildTokenId(x, y, z)].url = LiasonURL;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"planetCordinates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lifeA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"LiasonName\",\"type\":\"string\"}],\"name\":\"updatePlanetLiason\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"UpdatedDonationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"buildTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"GetLiasonURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"GetIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestPing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"_planetName\",\"type\":\"string\"}],\"name\":\"updatePlanetName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinimumDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"GetLiasonName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"_planetName\",\"type\":\"string\"},{\"name\":\"liason\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"assignNewPlanet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cordY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cordZ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"GetCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"ownerOfPlanet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"LiasonURL\",\"type\":\"string\"}],\"name\":\"updatePlanetURL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BlocksToGo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lifeD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cordX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lifeN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"transferPlanet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"planetLife\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"planetName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"UniverseName\",\"type\":\"string\"},{\"name\":\"CoordinateLimit\",\"type\":\"uint256\"},{\"name\":\"DonationAddress\",\"type\":\"address\"},{\"name\":\"StartingWeiDonation\",\"type\":\"uint256\"},{\"name\":\"BlockIntervals\",\"type\":\"uint256\"},{\"name\":\"WeiPerPlanet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenPing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"TokenTransferAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"TokenTransferDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"TokenMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PlanetToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000063000000000000000000000000f725a9b6b83445105f14a60968410ec8000dc0c100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000003b1000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000086263652e61736961000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c644b577b3edf9ca2237a8cd7847e6ab76a011e70f52b876e47d651ae9aea7e1"}]}