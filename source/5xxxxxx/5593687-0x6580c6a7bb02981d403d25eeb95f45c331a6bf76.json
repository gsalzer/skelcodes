{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMathLib {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract DateTimeLib {\r\n\r\n    struct _DateTime {\r\n        uint16 year;\r\n        uint8 month;\r\n        uint8 day;\r\n        uint8 hour;\r\n        uint8 minute;\r\n        uint8 second;\r\n        uint8 weekday;\r\n    }\r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant YEAR_IN_SECONDS = 31536000;\r\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n    uint constant HOUR_IN_SECONDS = 3600;\r\n    uint constant MINUTE_IN_SECONDS = 60;\r\n\r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n\r\n    function isLeapYear(uint16 year) internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function leapYearsBefore(uint year) internal pure returns (uint) {\r\n        year -= 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }\r\n\r\n    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            return 31;\r\n        }\r\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n            return 30;\r\n        }\r\n        else if (isLeapYear(year)) {\r\n            return 29;\r\n        }\r\n        else {\r\n            return 28;\r\n        }\r\n    }\r\n\r\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\r\n        uint secondsAccountedFor = 0;\r\n        uint buf;\r\n        uint8 i;\r\n\r\n        dt.year = getYear(timestamp);\r\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n        uint secondsInMonth;\r\n        for (i = 1; i <= 12; i++) {\r\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                dt.month = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor += secondsInMonth;\r\n        }\r\n\r\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                dt.day = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor += DAY_IN_SECONDS;\r\n        }\r\n        dt.hour = getHour(timestamp);\r\n        dt.minute = getMinute(timestamp);\r\n        dt.second = getSecond(timestamp);\r\n        dt.weekday = getWeekday(timestamp);\r\n    }\r\n\r\n    function getYear(uint timestamp) internal pure returns (uint16) {\r\n        uint secondsAccountedFor = 0;\r\n        uint16 year;\r\n        uint numLeapYears;\r\n\r\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n        while (secondsAccountedFor > timestamp) {\r\n            if (isLeapYear(uint16(year - 1))) {\r\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n            }\r\n            else {\r\n                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n            }\r\n            year -= 1;\r\n        }\r\n        return year;\r\n    }\r\n\r\n    function getMonth(uint timestamp) internal pure returns (uint8) {\r\n        return parseTimestamp(timestamp).month;\r\n    }\r\n\r\n    function getDay(uint timestamp) internal pure returns (uint8) {\r\n        return parseTimestamp(timestamp).day;\r\n    }\r\n\r\n    function getHour(uint timestamp) internal pure returns (uint8) {\r\n        return uint8((timestamp / 60 / 60) % 24);\r\n    }\r\n\r\n    function getMinute(uint timestamp) internal pure returns (uint8) {\r\n        return uint8((timestamp / 60) % 60);\r\n    }\r\n\r\n    function getSecond(uint timestamp) internal pure returns (uint8) {\r\n        return uint8(timestamp % 60);\r\n    }\r\n\r\n    function getWeekday(uint timestamp) internal pure returns (uint8) {\r\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n    }\r\n\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\r\n        return toTimestamp(year, month, day, 0, 0, 0);\r\n    }\r\n\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\r\n        return toTimestamp(year, month, day, hour, 0, 0);\r\n    }\r\n\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\r\n        return toTimestamp(year, month, day, hour, minute, 0);\r\n    }\r\n\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\r\n        uint16 i;\r\n        for (i = ORIGIN_YEAR; i < year; i++) {\r\n            if (isLeapYear(i)) {\r\n                timestamp += LEAP_YEAR_IN_SECONDS;\r\n            }\r\n            else {\r\n                timestamp += YEAR_IN_SECONDS;\r\n            }\r\n        }\r\n\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(year)) {\r\n            monthDayCounts[1] = 29;\r\n        }\r\n        else {\r\n            monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n\r\n        for (i = 1; i < month; i++) {\r\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n        }\r\n\r\n        timestamp += DAY_IN_SECONDS * (day - 1);\r\n        timestamp += HOUR_IN_SECONDS * (hour);\r\n        timestamp += MINUTE_IN_SECONDS * (minute);\r\n        timestamp += second;\r\n\r\n        return timestamp;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external constant returns (uint256);\r\n    function balanceOf(address _owner) external constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is IERC20,DateTimeLib {\r\n\r\n    using SafeMathLib for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    string public constant symbol = \"APC\";\r\n    \r\n    string public constant name = \"AmpereX Coin\";\r\n    \r\n    uint _totalSupply = 10000000000 * 10 ** 6;\r\n    \r\n    uint8 public constant decimals = 6;\r\n    \r\n    function totalSupply() external constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return transferInternal(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        require(_value > 0 && balances[_from] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value > 0 && allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract LockableToken is StandardToken {\r\n    \r\n    address internal developerReservedAddress = 0x6e4890764aa2bba346459e2d6b811e26c9691704;\r\n    \r\n    uint[8] internal developerReservedUnlockTimes;\r\n    \r\n    uint256[8] internal developerReservedBalanceLimits;\r\n    \r\n    function getDeveloperReservedBalanceLimit() internal returns (uint256 balanceLimit) {\r\n        uint time = now;\r\n        for (uint index = 0; index < developerReservedUnlockTimes.length; index++) {\r\n            if (developerReservedUnlockTimes[index] == 0x0) {\r\n                continue;\r\n            }\r\n            if (time > developerReservedUnlockTimes[index]) {\r\n                developerReservedUnlockTimes[index] = 0x0;\r\n            } else {\r\n                return developerReservedBalanceLimits[index];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return transferInternal(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\r\n        if (_from == developerReservedAddress) {\r\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\r\n            require(balances[_from].sub(balanceLimit) >= _value);\r\n        }\r\n        return super.transferInternal(_from, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\r\n        if (_from == developerReservedAddress) {\r\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\r\n            require(balances[_from].sub(balanceLimit) >= _value);\r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    event UnlockTimeChanged(uint index, uint unlockTime, uint newUnlockTime);\r\n    event LockInfo(address indexed publicOfferingAddress, uint index, uint unlockTime, uint256 balanceLimit);\r\n}\r\n\r\ncontract TradeableToken is LockableToken {\r\n\r\n    address internal publicOfferingAddress = 0x0b83ed7c57c335dca9c978f78819a739ac67fd5d;\r\n\r\n    uint256 public exchangeRate = 100000;\r\n\r\n    function buy(address _beneficiary, uint256 _weiAmount) internal {\r\n        require(_beneficiary != 0x0);\r\n        require(publicOfferingAddress != 0x0);\r\n        require(exchangeRate > 0x0);\r\n        require(_weiAmount > 0x0);\r\n\r\n        uint256 exchangeToken = _weiAmount.mul(exchangeRate);\r\n        exchangeToken = exchangeToken.div(1 * 10 ** 12);\r\n\r\n        publicOfferingAddress.transfer(_weiAmount);\r\n        super.transferInternal(publicOfferingAddress, _beneficiary, exchangeToken);\r\n    }\r\n    \r\n    event ExchangeRateChanged(uint256 oldExchangeRate,uint256 newExchangeRate);\r\n}\r\n\r\ncontract OwnableToken is TradeableToken {\r\n    \r\n    address internal owner = 0x593841e27b7122ef48f7854c7e7e1d5a374f8bb3;\r\n    \r\n    mapping(address => uint) administrators;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdministrator() {\r\n        require(msg.sender == owner || administrators[msg.sender] > 0x0);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n    \r\n    function addAdministrator(address _adminAddress) onlyOwner public {\r\n        require(_adminAddress != address(0));\r\n        require(administrators[_adminAddress] <= 0x0);\r\n        administrators[_adminAddress] = 0x1;\r\n        emit AddAdministrator(_adminAddress);\r\n    }\r\n    \r\n    function removeAdministrator(address _adminAddress) onlyOwner public {\r\n        require(_adminAddress != address(0));\r\n        require(administrators[_adminAddress] > 0x0);\r\n        administrators[_adminAddress] = 0x0;\r\n        emit RemoveAdministrator(_adminAddress);\r\n    }\r\n    \r\n    function setExchangeRate(uint256 _exchangeRate) public onlyAdministrator returns (bool success) {\r\n        require(_exchangeRate > 0x0);\r\n        uint256 oldExchangeRate = exchangeRate;\r\n        exchangeRate = _exchangeRate;\r\n        emit ExchangeRateChanged(oldExchangeRate, exchangeRate);\r\n        return true;\r\n    }\r\n    \r\n    function changeUnlockTime(uint _index, uint _unlockTime) public onlyAdministrator returns (bool success) {\r\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _unlockTime > 0x0);\r\n        if(_index > 0x0) {\r\n            uint beforeUnlockTime = developerReservedUnlockTimes[_index - 1];\r\n            require(beforeUnlockTime == 0x0 || beforeUnlockTime < _unlockTime);\r\n        }\r\n        if(_index < developerReservedUnlockTimes.length - 1) {\r\n            uint afterUnlockTime = developerReservedUnlockTimes[_index + 1];\r\n            require(afterUnlockTime == 0x0 || _unlockTime < afterUnlockTime);\r\n        }\r\n        uint oldUnlockTime = developerReservedUnlockTimes[_index];\r\n        developerReservedUnlockTimes[_index] = _unlockTime;\r\n        emit UnlockTimeChanged(_index,oldUnlockTime,_unlockTime);\r\n        return true;\r\n    }\r\n    \r\n    function getDeveloperReservedLockInfo(uint _index) public onlyAdministrator returns (uint, uint256) {\r\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _index < developerReservedBalanceLimits.length);\r\n        emit LockInfo(developerReservedAddress,_index,developerReservedUnlockTimes[_index],developerReservedBalanceLimits[_index]);\r\n        return (developerReservedUnlockTimes[_index], developerReservedBalanceLimits[_index]);\r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AddAdministrator(address indexed adminAddress);\r\n    event RemoveAdministrator(address indexed adminAddress);\r\n}\r\n\r\ncontract APC is OwnableToken {\r\n    \r\n    function APC() public {\r\n        balances[owner] = 5000000000 * 10 ** 6;\r\n        balances[publicOfferingAddress] = 3000000000 * 10 ** 6;\r\n\r\n        uint256 developerReservedBalance = 2000000000 * 10 ** 6;\r\n        balances[developerReservedAddress] = developerReservedBalance;\r\n        developerReservedUnlockTimes =\r\n        [\r\n        DateTimeLib.toTimestamp(2018, 6, 1),\r\n        DateTimeLib.toTimestamp(2018, 9, 1),\r\n        DateTimeLib.toTimestamp(2018, 12, 1),\r\n        DateTimeLib.toTimestamp(2019, 3, 1),\r\n        DateTimeLib.toTimestamp(2019, 6, 1),\r\n        DateTimeLib.toTimestamp(2019, 9, 1),\r\n        DateTimeLib.toTimestamp(2019, 12, 1),\r\n        DateTimeLib.toTimestamp(2020, 3, 1)\r\n        ];\r\n        developerReservedBalanceLimits = \r\n        [\r\n            developerReservedBalance,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 1,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 2,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 3,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 4,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 5,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 6,\r\n            developerReservedBalance - (developerReservedBalance / 8) * 7\r\n        ];\r\n    }\r\n    \r\n    function() public payable {\r\n        buy(msg.sender, msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"changeUnlockTime\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDeveloperReservedLockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AddAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"RemoveAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldExchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"publicOfferingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceLimit\",\"type\":\"uint256\"}],\"name\":\"LockInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"APC","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ccad5ce17a892c0bda7e61bb849f3a7be31ec28a2c1cbb21e13c7ea49e3ff685"}]}