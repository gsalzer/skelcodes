{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface Token {\r\n    function totalSupply() constant external returns (uint256 ts);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      uint256 z = x + y;\r\n      require((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSub(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      require(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMul(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      uint z = x * y;\r\n      require((x == 0) || (z / x == y));\r\n      return z;\r\n    }\r\n    \r\n    function safeDiv(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        require(y > 0);\r\n        return x / y;\r\n    }\r\n\r\n    function random(uint N, uint salt)\r\n        internal\r\n        view\r\n    returns(uint) {\r\n      bytes32 hash = keccak256(block.number, msg.sender, salt);\r\n      return uint(hash) % N;\r\n    }\r\n}\r\n\r\ncontract Authorization {\r\n    mapping(address => bool) internal authbook;\r\n    address[] public operators;\r\n    address public owner;\r\n    bool public powerStatus = true;\r\n    function Authorization()\r\n        public\r\n        payable\r\n    {\r\n        owner = msg.sender;\r\n        assignOperator(msg.sender);\r\n    }\r\n    modifier onlyOwner\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyOperator\r\n    {\r\n        assert(checkOperator(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyActive\r\n    {\r\n        assert(powerStatus);\r\n        _;\r\n    }\r\n    function powerSwitch(\r\n        bool onOff_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        powerStatus = onOff_;\r\n    }\r\n    function transferOwnership(address newOwner_)\r\n        onlyOwner\r\n        public\r\n    {\r\n        owner = newOwner_;\r\n    }\r\n    \r\n    function assignOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if(user_ != address(0) && !authbook[user_]) {\r\n            authbook[user_] = true;\r\n            operators.push(user_);\r\n        }\r\n    }\r\n    \r\n    function dismissOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        delete authbook[user_];\r\n        for(uint i = 0; i < operators.length; i++) {\r\n            if(operators[i] == user_) {\r\n                operators[i] = operators[operators.length - 1];\r\n                operators.length -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkOperator(address user_)\r\n        public\r\n        view\r\n    returns(bool) {\r\n        return authbook[user_];\r\n    }\r\n}\r\n\r\ncontract StandardToken is SafeMath {\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Issue(address indexed _to, uint256 indexed _value);\r\n    event Burn(address indexed _from, uint256 indexed _value);\r\n\r\n    /* constructure */\r\n    function StandardToken() public payable {}\r\n\r\n    /* Send coins */\r\n    function transfer(\r\n        address to_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n    returns(bool success) {\r\n        if(balances[msg.sender] >= amount_ && amount_ > 0) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], amount_);\r\n            balances[to_] = safeAdd(balances[to_], amount_);\r\n            emit Transfer(msg.sender, to_, amount_);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 amount_\r\n    ) public returns(bool success) {\r\n        if(balances[from_] >= amount_ && allowed[from_][msg.sender] >= amount_ && amount_ > 0) {\r\n            balances[to_] = safeAdd(balances[to_], amount_);\r\n            balances[from_] = safeSub(balances[from_], amount_);\r\n            allowed[from_][msg.sender] = safeSub(allowed[from_][msg.sender], amount_);\r\n            emit Transfer(from_, to_, amount_);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n        constant\r\n        public\r\n    returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n    returns (bool success) {\r\n        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract XPAAssetToken is StandardToken, Authorization {\r\n    // metadata\r\n    address[] public burners;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public defaultExchangeRate;\r\n    uint256 public constant decimals = 18;\r\n\r\n    // constructor\r\n    function XPAAssetToken(\r\n        string symbol_,\r\n        string name_,\r\n        uint256 defaultExchangeRate_\r\n    )\r\n        public\r\n    {\r\n        totalSupply = 0;\r\n        symbol = symbol_;\r\n        name = name_;\r\n        defaultExchangeRate = defaultExchangeRate_ > 0 ? defaultExchangeRate_ : 0.01 ether;\r\n    }\r\n\r\n    function transferOwnership(\r\n        address newOwner_\r\n    )\r\n        onlyOwner\r\n        public\r\n    {\r\n        owner = newOwner_;\r\n    }\r\n\r\n    function create(\r\n        address user_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n        onlyOperator\r\n    returns(bool success) {\r\n        if(amount_ > 0 && user_ != address(0)) {\r\n            totalSupply = safeAdd(totalSupply, amount_);\r\n            balances[user_] = safeAdd(balances[user_], amount_);\r\n            emit Issue(owner, amount_);\r\n            emit Transfer(owner, user_, amount_);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(\r\n        uint256 amount_\r\n    )\r\n        public\r\n    returns(bool success) {\r\n        require(allowToBurn(msg.sender));\r\n        if(amount_ > 0 && balances[msg.sender] >= amount_) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], amount_);\r\n            totalSupply = safeSub(totalSupply, amount_);\r\n            emit Transfer(msg.sender, owner, amount_);\r\n            emit Burn(owner, amount_);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burnFrom(\r\n        address user_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n    returns(bool success) {\r\n        require(allowToBurn(msg.sender));\r\n        if(balances[user_] >= amount_ && allowed[user_][msg.sender] >= amount_ && amount_ > 0) {\r\n            balances[user_] = safeSub(balances[user_], amount_);\r\n            totalSupply = safeSub(totalSupply, amount_);\r\n            allowed[user_][msg.sender] = safeSub(allowed[user_][msg.sender], amount_);\r\n            emit Transfer(user_, owner, amount_);\r\n            emit Burn(owner, amount_);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getDefaultExchangeRate(\r\n    )\r\n        public\r\n        view\r\n    returns(uint256) {\r\n        return defaultExchangeRate;\r\n    }\r\n\r\n    function getSymbol(\r\n    )\r\n        public\r\n        view\r\n    returns(bytes32) {\r\n        return keccak256(symbol);\r\n    }\r\n\r\n    function assignBurner(\r\n        address account_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(account_ != address(0));\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            if(burners[i] == account_) {\r\n                return;\r\n            }\r\n        }\r\n        burners.push(account_);\r\n    }\r\n\r\n    function dismissBunner(\r\n        address account_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(account_ != address(0));\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            if(burners[i] == account_) {\r\n                burners[i] = burners[burners.length - 1];\r\n                burners.length -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function allowToBurn(\r\n        address account_\r\n    )\r\n        public\r\n        view\r\n    returns(bool) {\r\n        if(checkOperator(account_)) {\r\n            return true;\r\n        }\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            if(burners[i] == account_) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"allowToBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"assignOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"dismissOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"assignBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onOff_\",\"type\":\"bool\"}],\"name\":\"powerSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"checkOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDefaultExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"dismissBunner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"symbol_\",\"type\":\"string\"},{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"defaultExchangeRate_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"XPAAssetToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000003555358000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065850415553440000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9490f393739b0543bba02cbeb098c7b368aca0d67ccafd83c4c3c4199b40e2ae"}]}