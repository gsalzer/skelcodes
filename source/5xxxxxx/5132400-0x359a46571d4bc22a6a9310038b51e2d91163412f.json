{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ApproveAndCallReceiver {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\ncontract TokenFactoryInterface {\r\n\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        string _tokenSymbol\r\n      ) public returns (ServusToken newToken);\r\n}\r\n\r\n/**\r\n * @title Controllable\r\n * @dev The Controllable contract has an controller address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Controllable {\r\n  address public controller;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Controllable() public {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyController() {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newController The address to transfer ownership to.\r\n   */\r\n  function transferControl(address newController) public onlyController {\r\n    if (newController != address(0)) {\r\n      controller = newController;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ServusToken (SRV)\r\n * Standard Mintable ERC20 Token\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ServusTokenInterface is Controllable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function totalSupplyAt(uint _blockNumber) public constant returns(uint);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n  function approve(address _spender, uint256 _amount) public returns (bool success);\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  function mint(address _owner, uint _amount) public returns (bool);\r\n  function importPresaleBalances(address[] _addresses, uint256[] _balances, address _presaleAddress) public returns (bool);\r\n  function lockPresaleBalances() public returns (bool);\r\n  function finishMinting() public returns (bool);\r\n  function enableTransfers(bool _value) public;\r\n  function enableMasterTransfers(bool _value) public;\r\n  function createCloneToken(uint _snapshotBlock, string _cloneTokenName, string _cloneTokenSymbol) public returns (address);\r\n\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ServusToken is Controllable {\r\n\r\n  using SafeMath for uint256;\r\n  ServusTokenInterface public parentToken;\r\n  TokenFactoryInterface public tokenFactory;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  string public version;\r\n  uint8 public decimals;\r\n\r\n  uint256 public parentSnapShotBlock;\r\n  uint256 public creationBlock;\r\n  bool public transfersEnabled;\r\n\r\n  bool public masterTransfersEnabled;\r\n  address public masterWallet = 0x9d23cc4efa366b70f34f1879bc6178e6f3342441;\r\n\r\n\r\n  struct Checkpoint {\r\n    uint128 fromBlock;\r\n    uint128 value;\r\n  }\r\n\r\n  Checkpoint[] totalSupplyHistory;\r\n  mapping(address => Checkpoint[]) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  bool public mintingFinished = false;\r\n  bool public presaleBalancesLocked = false;\r\n\r\n  uint256 public constant TOTAL_PRESALE_TOKENS = 2896000000000000000000;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event NewCloneToken(address indexed cloneToken);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n\r\n  function ServusToken(\r\n    address _tokenFactory,\r\n    address _parentToken,\r\n    uint256 _parentSnapShotBlock,\r\n    string _tokenName,\r\n    string _tokenSymbol\r\n    ) public {\r\n      tokenFactory = TokenFactoryInterface(_tokenFactory);\r\n      parentToken = ServusTokenInterface(_parentToken);\r\n      parentSnapShotBlock = _parentSnapShotBlock;\r\n      name = _tokenName;\r\n      symbol = _tokenSymbol;\r\n      decimals = 6;\r\n      transfersEnabled = false;\r\n      masterTransfersEnabled = false;\r\n      creationBlock = block.number;\r\n      version = '0.1';\r\n  }\r\n\r\n  function() public payable {\r\n    revert();\r\n  }\r\n\r\n\r\n  /**\r\n  * Returns the total Servus token supply at the current block\r\n  * @return total supply {uint256}\r\n  */\r\n  function totalSupply() public constant returns (uint256) {\r\n    return totalSupplyAt(block.number);\r\n  }\r\n\r\n  /**\r\n  * Returns the total Servus token supply at the given block number\r\n  * @param _blockNumber {uint256}\r\n  * @return total supply {uint256}\r\n  */\r\n  function totalSupplyAt(uint256 _blockNumber) public constant returns(uint256) {\r\n    // These next few lines are used when the totalSupply of the token is\r\n    //  requested before a check point was ever created for this token, it\r\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n    //  genesis block for this token as that contains totalSupply of this\r\n    //  token at this block number.\r\n    if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n        if (address(parentToken) != 0) {\r\n            return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    // This will return the expected totalSupply during normal situations\r\n    } else {\r\n        return getValueAt(totalSupplyHistory, _blockNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Returns the token holder balance at the current block\r\n  * @param _owner {address}\r\n  * @return balance {uint256}\r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balanceOfAt(_owner, block.number);\r\n  }\r\n\r\n  /**\r\n  * Returns the token holder balance the the given block number\r\n  * @param _owner {address}\r\n  * @param _blockNumber {uint256}\r\n  * @return balance {uint256}\r\n  */\r\n  function balanceOfAt(address _owner, uint256 _blockNumber) public constant returns (uint256) {\r\n    // These next few lines are used when the balance of the token is\r\n    //  requested before a check point was ever created for this token, it\r\n    //  requires that the `parentToken.balanceOfAt` be queried at the\r\n    //  genesis block for that token as this contains initial balance of\r\n    //  this token\r\n    if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n        if (address(parentToken) != 0) {\r\n            return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n        } else {\r\n            // Has no parent\r\n            return 0;\r\n        }\r\n\r\n    // This will return the expected balance during normal situations\r\n    } else {\r\n        return getValueAt(balances[_owner], _blockNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 transfer tokens function\r\n  * @param _to {address}\r\n  * @param _amount {uint}\r\n  * @return success {bool}\r\n  */\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    return doTransfer(msg.sender, _to, _amount);\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 transferFrom function\r\n  * @param _from {address}\r\n  * @param _to {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n    require(allowed[_from][msg.sender] >= _amount);\r\n    allowed[_from][msg.sender] -= _amount;\r\n    return doTransfer(_from, _to, _amount);\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 approve function\r\n  * @param _spender {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n    require(transfersEnabled);\r\n\r\n    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 approve function\r\n  * @param _spender {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n    approve(_spender, _amount);\r\n\r\n    ApproveAndCallReceiver(_spender).receiveApproval(\r\n        msg.sender,\r\n        _amount,\r\n        this,\r\n        _extraData\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 allowance function\r\n  * @param _owner {address}\r\n  * @param _spender {address}\r\n  * @return remaining {uint256}\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  * Internal Transfer function - Updates the checkpoint ledger\r\n  * @param _from {address}\r\n  * @param _to {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function doTransfer(address _from, address _to, uint256 _amount) internal returns(bool) {\r\n\r\n    if (msg.sender != masterWallet) {\r\n      require(transfersEnabled);\r\n    } else {\r\n      require(masterTransfersEnabled);\r\n    }\r\n\r\n    require(_amount > 0);\r\n    require(parentSnapShotBlock < block.number);\r\n    require((_to != 0) && (_to != address(this)));\r\n\r\n    // If the amount being transfered is more than the balance of the\r\n    // account the transfer returns false\r\n    uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n    require(previousBalanceFrom >= _amount);\r\n\r\n    // First update the balance array with the new value for the address\r\n    //  sending the tokens\r\n    updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n    // Then update the balance array with the new value for the address\r\n    //  receiving the tokens\r\n    uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n    // An event to make the transfer easy to find on the blockchain\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n  * Token creation functions - can only be called by the tokensale controller during the tokensale period\r\n  * @param _owner {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function mint(address _owner, uint256 _amount) public onlyController canMint returns (bool) {\r\n    uint256 curTotalSupply = totalSupply();\r\n    uint256 previousBalanceTo = balanceOf(_owner);\r\n\r\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n\r\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n    updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n    Transfer(0, _owner, _amount);\r\n    return true;\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * Import presale balances before the start of the token sale. After importing\r\n   * balances, lockPresaleBalances() has to be called to prevent further modification\r\n   * of presale balances.\r\n   * @param _addresses {address[]} Array of presale addresses\r\n   * @param _balances {uint256[]} Array of balances corresponding to presale addresses.\r\n   * @return success {bool}\r\n   */\r\n  function importPresaleBalances(address[] _addresses, uint256[] _balances) public onlyController returns (bool) {\r\n    require(presaleBalancesLocked == false);\r\n\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      updateValueAtNow(balances[_addresses[i]], _balances[i]);\r\n      Transfer(0, _addresses[i], _balances[i]);\r\n    }\r\n\r\n    updateValueAtNow(totalSupplyHistory, TOTAL_PRESALE_TOKENS);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Lock presale balances after successful presale balance import\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function lockPresaleBalances() public onlyController returns (bool) {\r\n    presaleBalancesLocked = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Lock the minting of Servus Tokens - to be called after the presale\r\n   * @return {bool} success\r\n  */\r\n  function finishMinting() public onlyController returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Enable or block transfers - to be called in case of emergency\r\n   * @param _value {bool}\r\n  */\r\n  function enableTransfers(bool _value) public onlyController {\r\n    transfersEnabled = _value;\r\n  }\r\n\r\n  /**\r\n   * Enable or block transfers - to be called in case of emergency\r\n   * @param _value {bool}\r\n  */\r\n  function enableMasterTransfers(bool _value) public onlyController {\r\n    masterTransfersEnabled = _value;\r\n  }\r\n\r\n  /**\r\n   * Internal balance method - gets a certain checkpoint value a a certain _block\r\n   * @param _checkpoints {Checkpoint[]} List of checkpoints - supply history or balance history\r\n   * @return value {uint256} Value of _checkpoints at _block\r\n  */\r\n  function getValueAt(Checkpoint[] storage _checkpoints, uint256 _block) constant internal returns (uint256) {\r\n\r\n      if (_checkpoints.length == 0)\r\n        return 0;\r\n      // Shortcut for the actual value\r\n      if (_block >= _checkpoints[_checkpoints.length-1].fromBlock)\r\n        return _checkpoints[_checkpoints.length-1].value;\r\n      if (_block < _checkpoints[0].fromBlock)\r\n        return 0;\r\n\r\n      // Binary search of the value in the array\r\n      uint256 min = 0;\r\n      uint256 max = _checkpoints.length-1;\r\n      while (max > min) {\r\n          uint256 mid = (max + min + 1) / 2;\r\n          if (_checkpoints[mid].fromBlock<=_block) {\r\n              min = mid;\r\n          } else {\r\n              max = mid-1;\r\n          }\r\n      }\r\n      return _checkpoints[min].value;\r\n  }\r\n\r\n\r\n  /**\r\n  * Internal update method - updates the checkpoint ledger at the current block\r\n  * @param _checkpoints {Checkpoint[]}  List of checkpoints - supply history or balance history\r\n  * @return value {uint256} Value to add to the checkpoints ledger\r\n   */\r\n  function updateValueAtNow(Checkpoint[] storage _checkpoints, uint256 _value) internal {\r\n      if ((_checkpoints.length == 0) || (_checkpoints[_checkpoints.length-1].fromBlock < block.number)) {\r\n              Checkpoint storage newCheckPoint = _checkpoints[_checkpoints.length++];\r\n              newCheckPoint.fromBlock = uint128(block.number);\r\n              newCheckPoint.value = uint128(_value);\r\n          } else {\r\n              Checkpoint storage oldCheckPoint = _checkpoints[_checkpoints.length-1];\r\n              oldCheckPoint.value = uint128(_value);\r\n          }\r\n  }\r\n\r\n\r\n  function min(uint256 a, uint256 b) internal constant returns (uint) {\r\n      return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * Clones Servus Token at the given snapshot block\r\n  * @param _snapshotBlock {uint256}\r\n  * @param _name {string} - The cloned token name\r\n  * @param _symbol {string} - The cloned token symbol\r\n  * @return clonedTokenAddress {address}\r\n   */\r\n  function createCloneToken(uint256 _snapshotBlock, string _name, string _symbol) public returns(address) {\r\n\r\n      if (_snapshotBlock == 0) {\r\n        _snapshotBlock = block.number;\r\n      }\r\n\r\n      if (_snapshotBlock > block.number) {\r\n        _snapshotBlock = block.number;\r\n      }\r\n\r\n      ServusToken cloneToken = tokenFactory.createCloneToken(\r\n          this,\r\n          _snapshotBlock,\r\n          _name,\r\n          _symbol\r\n        );\r\n\r\n\r\n      cloneToken.transferControl(msg.sender);\r\n\r\n      // An event to make the token easy to find on the blockchain\r\n      NewCloneToken(address(cloneToken));\r\n      return address(cloneToken);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  function Pausable() public {}\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Tokensale\r\n * Tokensale allows investors to make token purchases and assigns them tokens based\r\n\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\r\n */\r\ncontract TokenSale is Pausable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  ServusTokenInterface public servusToken;\r\n  uint256 public totalWeiRaised;\r\n  uint256 public tokensMinted;\r\n  uint256 public totalSupply;\r\n  uint256 public contributors;\r\n  uint256 public decimalsMultiplier;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint256 public remainingTokens;\r\n  uint256 public allocatedTokens;\r\n\r\n  bool public finalized;\r\n\r\n  bool public servusTokensAllocated;\r\n  address public servusMultiSig = 0x0cc3e09c8a52fa0313154321be706635cdbdec37;\r\n\r\n  uint256 public constant BASE_PRICE_IN_WEI = 1000000000000000;\r\n  uint256 public constant PUBLIC_TOKENS = 100000000 * (10 ** 6);\r\n  uint256 public constant TOTAL_PRESALE_TOKENS = 50000000 * (10 ** 6);\r\n  uint256 public constant TOKENS_ALLOCATED_TO_SERVUS = 100000000 * (10 ** 6);\r\n\r\n\r\n\r\n  uint256 public tokenCap = PUBLIC_TOKENS - TOTAL_PRESALE_TOKENS;\r\n  uint256 public cap = tokenCap;\r\n  uint256 public weiCap = cap * BASE_PRICE_IN_WEI;\r\n\r\n  uint256 public firstDiscountPrice = (BASE_PRICE_IN_WEI * 85) / 100;\r\n  uint256 public secondDiscountPrice = (BASE_PRICE_IN_WEI * 90) / 100;\r\n  uint256 public thirdDiscountPrice = (BASE_PRICE_IN_WEI * 95) / 100;\r\n\r\n  uint256 public firstDiscountCap = (weiCap * 5) / 100;\r\n  uint256 public secondDiscountCap = (weiCap * 10) / 100;\r\n  uint256 public thirdDiscountCap = (weiCap * 20) / 100;\r\n\r\n  bool public started = false;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event NewClonedToken(address indexed _cloneToken);\r\n  event OnTransfer(address _from, address _to, uint _amount);\r\n  event OnApprove(address _owner, address _spender, uint _amount);\r\n  event LogInt(string _name, uint256 _value);\r\n  event Finalized();\r\n\r\n  function TokenSale(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    require(_tokenAddress != 0x0);\r\n    require(_startTime > 0);\r\n    require(_endTime > _startTime);\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    servusToken = ServusTokenInterface(_tokenAddress);\r\n\r\n    decimalsMultiplier = (10 ** 6);\r\n  }\r\n\r\n\r\n  /**\r\n   * High level token purchase function\r\n   */\r\n  function() public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 priceInWei = getPriceInWei();\r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 tokens = weiAmount.mul(decimalsMultiplier).div(priceInWei);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < tokenCap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    servusToken.mint(_beneficiary, tokens);\r\n    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the price in wei for current premium\r\n   * @return price {uint256}\r\n   */\r\n  function getPriceInWei() constant public returns (uint256) {\r\n\r\n    uint256 price;\r\n\r\n    if (totalWeiRaised < firstDiscountCap) {\r\n      price = firstDiscountPrice;\r\n    } else if (totalWeiRaised < secondDiscountCap) {\r\n      price = secondDiscountPrice;\r\n    } else if (totalWeiRaised < thirdDiscountCap) {\r\n      price = thirdDiscountPrice;\r\n    } else {\r\n      price = BASE_PRICE_IN_WEI;\r\n    }\r\n\r\n    return price;\r\n  }\r\n\r\n  /**\r\n  * Forwards funds to the tokensale wallet\r\n  */\r\n  function forwardFunds() internal {\r\n    servusMultiSig.transfer(msg.value);\r\n  }\r\n\r\n\r\n  /**\r\n  * Validates the purchase (period, minimum amount, within cap)\r\n  * @return {bool} valid\r\n  */\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = now;\r\n    bool presaleStarted = (current >= startTime || started);\r\n    bool presaleNotEnded = current <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return nonZeroPurchase && presaleStarted && presaleNotEnded;\r\n  }\r\n\r\n  /**\r\n  * Returns the total Servus token supply\r\n  * @return totalSupply {uint256} Servus Token Total Supply\r\n  */\r\n  function totalSupply() public constant returns (uint256) {\r\n    return servusToken.totalSupply();\r\n  }\r\n\r\n  /**\r\n  * Returns token holder Servus Token balance\r\n  * @param _owner {address} Token holder address\r\n  * @return balance {uint256} Corresponding token holder balance\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n    return servusToken.balanceOf(_owner);\r\n  }\r\n\r\n  /**\r\n  * Change the Servus Token controller\r\n  * @param _newController {address} New Servus Token controller\r\n  */\r\n  function changeController(address _newController) public {\r\n    require(isContract(_newController));\r\n    servusToken.transferControl(_newController);\r\n  }\r\n\r\n\r\n  function enableTransfers() public {\r\n    if (now < endTime) {\r\n      require(msg.sender == owner);\r\n    }\r\n    servusToken.enableTransfers(true);\r\n  }\r\n\r\n  function lockTransfers() public onlyOwner {\r\n    require(now < endTime);\r\n    servusToken.enableTransfers(false);\r\n  }\r\n\r\n  function enableMasterTransfers() public onlyOwner {\r\n    servusToken.enableMasterTransfers(true);\r\n  }\r\n\r\n  function lockMasterTransfers() public onlyOwner {\r\n    servusToken.enableMasterTransfers(false);\r\n  }\r\n\r\n  function forceStart() public onlyOwner {\r\n    started = true;\r\n  }\r\n\r\n  function allocateServusTokens() public onlyOwner whenNotFinalized {\r\n    require(!servusTokensAllocated);\r\n    servusToken.mint(servusMultiSig, TOKENS_ALLOCATED_TO_SERVUS);\r\n    servusTokensAllocated = true;\r\n  }\r\n\r\n  function finalize() public onlyOwner {\r\n    require(paused);\r\n    require(servusTokensAllocated);\r\n\r\n    servusToken.finishMinting();\r\n    servusToken.enableTransfers(true);\r\n    Finalized();\r\n\r\n    finalized = true;\r\n  }\r\n\r\n\r\n  function isContract(address _addr) constant internal returns(bool) {\r\n    uint size;\r\n    if (_addr == 0)\r\n      return false;\r\n    assembly {\r\n        size := extcodesize(_addr)\r\n    }\r\n    return size>0;\r\n  }\r\n\r\n  modifier whenNotFinalized() {\r\n    require(!finalized);\r\n    _;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PRICE_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servusTokensAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableMasterTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servusMultiSig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockMasterTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateServusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstDiscountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_PRESALE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_ALLOCATED_TO_SERVUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servusToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdDiscountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondDiscountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"}],\"name\":\"NewClonedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.21-nightly.2018.2.21+commit.16c7eabc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000027d4cb2f6be658a6223fce994d55093c4b7250ce000000000000000000000000000000000000000000000000000000005a974281000000000000000000000000000000000000000000000000000000005ac02101","Library":"","SwarmSource":"bzzr://a525662d46fd1b0a4c404ff4a9ecbe2cbf4d16fa11b282dba78c272d3c464b6b"}]}