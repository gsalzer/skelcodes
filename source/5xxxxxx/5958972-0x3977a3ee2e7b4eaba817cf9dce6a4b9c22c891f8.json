{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract DMIBLog {\r\n    event MIBLog(bytes4 indexed sig, address indexed sender, uint _value) anonymous;\r\n\r\n    modifier mlog {\r\n        emit MIBLog(msg.sig, msg.sender, msg.value);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerLog(address indexed previousOwner, address indexed newOwner, bytes4 sig);\r\n\r\n    constructor() public { \r\n        owner = msg.sender; \r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner  public {\r\n        require(newOwner != address(0));\r\n        emit OwnerLog(owner, newOwner, msg.sig);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MIBStop is Ownable, DMIBLog {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require (!stopped);\r\n        _;\r\n    }\r\n    function stop() onlyOwner mlog public {\r\n        stopped = true;\r\n    }\r\n    function start() onlyOwner mlog public {\r\n        stopped = false;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n        )\r\n    internal\r\n    {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n}\r\n\r\n\r\ncontract MIBTokenSale is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    \r\n    ERC20 mibtokenaddress;\r\n    \r\n    uint8 private nowvestingType = 0;\r\n    uint256 private minimum_wei = 1e18;         // 1eth\r\n    \r\n    uint256 private totalWeiEther;\r\n    \r\n    uint8 k;\r\n    \r\n    mapping(uint8 => uint) assignTokensperType ;\r\n    mapping(uint8 => uint) remainTokensperType ;\r\n    mapping(uint8 => uint) nowTokensperEth;\r\n    mapping(uint8 => uint) distributionTimes;\r\n\r\n    uint8 public iDistribution;\r\n    uint8 public iICO;\r\n\r\n    modifier canDistribute() {\r\n        require(iICO == 1);\r\n        require(iDistribution > 1);\r\n        _;\r\n    }\r\n    \r\n\r\n    enum InvestTypes { Angels, Pre_sales, Ico, Offices, Teams, Advisors, Stocks, MAX_InvestTypes }\r\n    \r\n    event TokenPurchase(address indexed _sender, address indexed _to, uint256 _value1, uint _value2, uint _value3);  \r\n    event MibTokenSend(address indexed _sender, address indexed _to, uint256 _value1, uint _value2, uint _value3);  \r\n    event MibSetLog(address indexed _sender, uint256 _value1, uint _value2, uint _value3);  \r\n\r\n    //vesting, sep, rate, start date, end date, start distribution date\r\n    constructor(\r\n            ERC20 _mibtokenaddress,\r\n            uint [] vesting,\r\n            uint8 [] sep,\r\n            uint [] rate\r\n        ) public {\r\n        \r\n            mibtokenaddress = ERC20(_mibtokenaddress);\r\n    \r\n            //proceed only ico\r\n            nowvestingType = uint8(InvestTypes.Ico);\r\n    \r\n            for(k=0; k<uint8(InvestTypes.MAX_InvestTypes); k++)\r\n            {\r\n                remainTokensperType[k] = remainTokensperType[k].add(vesting[k] * 1e18);\r\n                assignTokensperType[k] = assignTokensperType[k].add(vesting[k] * 1e18);\r\n                nowTokensperEth[k] = rate[k];\r\n                distributionTimes[k] = sep[k];\r\n            }     \r\n    \r\n            totalWeiEther = 0;\r\n        \r\n    }  \r\n    \r\n    function setVestingRate(uint256 _icorate) onlyOwner public {\r\n\r\n        nowTokensperEth[uint8(InvestTypes.Ico)] = _icorate;\r\n        \r\n        emit MibSetLog(msg.sender, 0, 0, _icorate);\r\n    }\r\n\r\n    function setVestingType(uint8 _type) onlyOwner public {\r\n        require(_type < uint8(InvestTypes.MAX_InvestTypes));\r\n        nowvestingType = _type;\r\n        //proceed only ico\r\n        nowvestingType = uint8(InvestTypes.Ico);\r\n        \r\n        emit MibSetLog(msg.sender, 0, 0, nowvestingType);\r\n        \r\n    }\r\n    \r\n    function startICO() onlyOwner public {\r\n        require(iDistribution < 1);\r\n        require(iICO < 1);\r\n        iICO = 2;\r\n    }\r\n\r\n    function stopICO() onlyOwner public {\r\n        require(iDistribution <= 1);\r\n        iICO = 1;\r\n    }\r\n    \r\n    function distributionStart() onlyOwner public {\r\n        require(iICO == 1);\r\n        iDistribution = 2;\r\n    }\r\n\r\n    function getDistributionStatus() onlyOwner public view returns(uint8) {\r\n        return iDistribution;\r\n    }\r\n    \r\n    function getNowVestingType() public view returns (uint8) {\r\n        return nowvestingType;\r\n    }\r\n    \r\n    function getassignTokensperType(uint8 _type) public view returns (uint) {\r\n        return assignTokensperType[_type];\r\n    }\r\n    \r\n    function getremainTokensperType(uint8 _type) public view returns (uint) {\r\n        return remainTokensperType[_type];\r\n    }\r\n\r\n    function getTotalWEIEther() onlyOwner public view returns (uint256) { \r\n        return totalWeiEther; \r\n    }\r\n\r\n    function () external payable {\r\n        \r\n        buyTokens(msg.sender, nowvestingType);\r\n    }\r\n    \r\n    function buyTokens(address _to, uint8 _type) public payable {\r\n        uint256 tokens;\r\n        \r\n        require(iICO > 1);\r\n\r\n        require(_type < uint8(InvestTypes.MAX_InvestTypes));\r\n        \r\n        tokens = _preValidatePurchase(_to, _type, msg.value);\r\n\r\n        processPurchase(_to, _type, tokens);\r\n        remainTokensperType[_type] = remainTokensperType[_type].sub(tokens);\r\n        \r\n        mibtokenaddress.safeTransfer(_to, tokens);\r\n        \r\n    }\r\n    \r\n    function _preValidatePurchase(\r\n        address _to,\r\n        uint8 _type,\r\n        uint256 _weiAmount\r\n        )\r\n    internal \r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 tokens;\r\n        uint256 tmpTokens;\r\n        \r\n        require(_to != address(0));\r\n        require(_weiAmount >= minimum_wei);\r\n\r\n        tokens = nowTokensperEth[nowvestingType].mul(msg.value);\r\n        \r\n        tmpTokens = tokens.mul(20).div(100);\r\n        tokens = tokens.add(tmpTokens);\r\n        \r\n        require(tokens > 0);\r\n        \r\n        require(tokens <= remainTokensperType[_type]);\r\n        \r\n        return tokens;\r\n    }\r\n  \r\n    \r\n    function processPurchase(address _to, uint8 _type, uint256 _tokens) internal {\r\n\r\n        _forwardFunds();\r\n        totalWeiEther += msg.value;\r\n\r\n        emit TokenPurchase(owner, _to, _type, msg.value, _tokens);\r\n    }\r\n\r\n    function ownerSendTokens(address _to, uint8 _type, uint256 _weitokens) \r\n        public \r\n        canDistribute\r\n        onlyOwner\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        uint256 remaintokens;\r\n        \r\n        remaintokens = remainTokensperType[_type];\r\n        \r\n        require(remaintokens >= _weitokens);\r\n        require(_type < uint8(InvestTypes.MAX_InvestTypes));\r\n        \r\n        mibtokenaddress.safeTransfer(_to, _weitokens);\r\n        remainTokensperType[_type] = remainTokensperType[_type].sub(_weitokens);\r\n        \r\n        emit MibTokenSend(msg.sender, _to, _type, _weitokens, remainTokensperType[_type]);\r\n        return (remainTokensperType[_type]);\r\n        \r\n    }\r\n    \r\n    function _forwardFunds() internal  {\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setVestingType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowVestingType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icorate\",\"type\":\"uint256\"}],\"name\":\"setVestingRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getassignTokensperType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributionStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getremainTokensperType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributionStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_weitokens\",\"type\":\"uint256\"}],\"name\":\"ownerSendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWEIEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mibtokenaddress\",\"type\":\"address\"},{\"name\":\"vesting\",\"type\":\"uint256[]\"},{\"name\":\"sep\",\"type\":\"uint8[]\"},{\"name\":\"rate\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value3\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value3\",\"type\":\"uint256\"}],\"name\":\"MibTokenSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value3\",\"type\":\"uint256\"}],\"name\":\"MibSetLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"OwnerLog\",\"type\":\"event\"}]","ContractName":"MIBTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000146d8d942048ad517479c9bab1788712af180fde00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000002160ec00000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000042c1d8000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000005a995c000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b0","Library":"","SwarmSource":"bzzr://20c846309a8b2450b7c6d46e7b57bc540d4d6e1b0c088073400f7de6d3d1afe9"}]}