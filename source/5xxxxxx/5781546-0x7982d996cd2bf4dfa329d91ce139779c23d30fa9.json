{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\n\r\n//name this contract whatever you'd like\r\ncontract MuskToken is StandardToken {\r\n\r\n    function () {\r\n        //if ether is sent to this address, send it back.\r\n        throw;\r\n    }\r\n\r\n    /* Public variables of the token */\r\n\r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol;                 //An identifier: eg SBX\r\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n//\r\n// CHANGE THESE VALUES FOR YOUR TOKEN\r\n//\r\n\r\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the \r\n//contract name above is also TutorialToken instead of MuskToken\r\n\r\n    function MuskToken(\r\n        ) {\r\n        balances[msg.sender] = 1000000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\r\n        totalSupply = 1000000000000000000000000000;                        // Update total supply (100000 for example)\r\n        name = \"Musk Token\";                                   // Set the name for display purposes\r\n        decimals = 18;                            // Amount of decimals for display purposes\r\n        symbol = \"MUSK\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MuskTokenVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //Wallet Addresses for allocation\r\n    address public teamReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\r\n    address public finalReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\r\n\r\n    //Token Allocations\r\n    uint256 public teamReserveAllocation = 240 * (10 ** 6) * (10 ** 18);\r\n    uint256 public finalReserveAllocation = 10 * (10 ** 6) * (10 ** 18);\r\n\r\n    //Total Token Allocations\r\n    uint256 public totalAllocation = 250 * (10 ** 6) * (10 ** 18);\r\n\r\n    uint256 public teamTimeLock = 2 * 365 days;\r\n    uint256 public teamVestingStages = 8;\r\n    uint256 public finalReserveTimeLock = 2 * 365 days;\r\n\r\n    /** Reserve allocations */\r\n    mapping(address => uint256) public allocations;\r\n\r\n    /** When timeLocks are over (UNIX Timestamp)  */  \r\n    mapping(address => uint256) public timeLocks;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public claimed;\r\n\r\n    /** When this vault was locked (UNIX Timestamp)*/\r\n    uint256 public lockedAt = 0;\r\n\r\n    MuskToken public token;\r\n\r\n    /** Allocated reserve tokens */\r\n    event Allocated(address wallet, uint256 value);\r\n\r\n    /** Distributed reserved tokens */\r\n    event Distributed(address wallet, uint256 value);\r\n\r\n    /** Tokens have been locked */\r\n    event Locked(uint256 lockTime);\r\n\r\n    //Any of the three reserve wallets\r\n    modifier onlyReserveWallets {\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Only Musk team reserve wallet\r\n    modifier onlyTeamReserve {\r\n        require(msg.sender == teamReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Only final token reserve wallet\r\n    modifier onlyTokenReserve {\r\n        require(msg.sender == finalReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0);\r\n        _;\r\n    }\r\n\r\n    modifier locked {\r\n        require(lockedAt > 0);\r\n        _;\r\n    }\r\n\r\n    //Token allocations have not been set\r\n    modifier notAllocated {\r\n        require(allocations[teamReserveWallet] == 0);\r\n        require(allocations[finalReserveWallet] == 0);\r\n        _;\r\n    }\r\n\r\n    function MuskTokenVault(Token _token) public {\r\n\r\n        owner = msg.sender;\r\n        token = MuskToken(_token);\r\n        \r\n    }\r\n\r\n    function allocate() public notLocked notAllocated onlyOwner {\r\n\r\n        //Makes sure Token Contract has the exact number of tokens\r\n        require(token.balanceOf(address(this)) == totalAllocation);\r\n        \r\n        allocations[teamReserveWallet] = teamReserveAllocation;\r\n        allocations[finalReserveWallet] = finalReserveAllocation;\r\n\r\n        Allocated(teamReserveWallet, teamReserveAllocation);\r\n        Allocated(finalReserveWallet, finalReserveAllocation);\r\n\r\n        lock();\r\n    }\r\n\r\n    //Lock the vault for the wallets\r\n    function lock() internal notLocked onlyOwner {\r\n\r\n        lockedAt = block.timestamp;\r\n\r\n        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\r\n        timeLocks[finalReserveWallet] = lockedAt.add(finalReserveTimeLock);\r\n\r\n        Locked(lockedAt);\r\n    }\r\n\r\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\r\n    //Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\r\n\r\n        // Transfer all tokens on this contract back to the owner\r\n        require(token.transfer(owner, token.balanceOf(address(this))));\r\n    }\r\n\r\n    // Total number of tokens currently in the vault\r\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\r\n\r\n        return token.balanceOf(address(this));\r\n\r\n    }\r\n\r\n    // Number of tokens that are still locked\r\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\r\n\r\n        return allocations[msg.sender].sub(claimed[msg.sender]);\r\n\r\n    }\r\n\r\n    //Claim tokens for final reserve wallet\r\n    function claimTokenReserve() onlyTokenReserve locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        // Must Only claim once\r\n        require(claimed[reserveWallet] == 0);\r\n\r\n        uint256 amount = allocations[reserveWallet];\r\n\r\n        claimed[reserveWallet] = amount;\r\n\r\n        require(token.transfer(reserveWallet, amount));\r\n\r\n        Distributed(reserveWallet, amount);\r\n    }\r\n\r\n    //Claim tokens for Musk team reserve wallet\r\n    function claimTeamReserve() onlyTeamReserve locked public {\r\n\r\n        uint256 vestingStage = teamVestingStage();\r\n\r\n        //Amount of tokens the team should have at this vesting stage\r\n        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\r\n\r\n        require(totalUnlocked <= allocations[teamReserveWallet]);\r\n\r\n        //Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[teamReserveWallet] < totalUnlocked);\r\n\r\n        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\r\n\r\n        claimed[teamReserveWallet] = totalUnlocked;\r\n\r\n        require(token.transfer(teamReserveWallet, payment));\r\n\r\n        Distributed(teamReserveWallet, payment);\r\n    }\r\n\r\n    //Current Vesting stage for Musk team \r\n    function teamVestingStage() public view onlyTeamReserve returns(uint256){\r\n        \r\n        // Every 3 months\r\n        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \r\n\r\n        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\r\n\r\n        //Ensures team vesting stage doesn't go past teamVestingStages\r\n        if(stage > teamVestingStages){\r\n            stage = teamVestingStages;\r\n        }\r\n\r\n        return stage;\r\n\r\n    }\r\n\r\n    // Checks if msg.sender can collect tokens\r\n    function canCollect() public view onlyReserveWallets returns(bool) {\r\n\r\n        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"tokensCurrentlyInVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"tokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTeamReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MuskTokenVault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005003b168b457b663c3c18ffcf5b6a24bee8f59c7","Library":"","SwarmSource":"bzzr://0c34ad42e7a84e1b21b5e439248b92f563fd98b06a07bac1db339fc78322ea1e"}]}