{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 {\r\n  // Required:\r\n    function approve(address to, uint256 tokenId) public; \r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function transfer(address to, uint256 tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /** ERC721Metadata */ \r\n    function name() external view returns (string name);\r\n    function symbol() external view returns (string symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string uri); \r\n  }\r\n\r\n\r\n\r\n/**\r\n * @title ExoPlanets crypto game\r\n * ExoPlanets is a space exploration crypto game with real data from NASA, that will allow the players to own ExoPlanets, \r\n * evolve life and civilizations all the way to the “Space Age” and send exploration ships to other \r\n * planets for resources and tokens mining.\r\n * ExoPlanets is based on the ERC721 standard with several extensions (cryptoMatch, lifeRate..) to\r\n * make the gaming experience more realistic (and exciting).\r\n */\r\ncontract ExoplanetToken is ERC721 {\r\n\r\n    using SafeMath for uint256; \r\n    event Birth(uint256 indexed tokenId, string name, uint32 numOfTokensBonusOnPurchase, address owner);\r\n    event TokenSold(uint256 tokenId, uint256 oldPriceInEther, uint256 newPriceInEther, address prevOwner, address winner, string name);\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event ContractUpgrade(address newContract);\r\n\r\n    string public constant NAME = \"ExoPlanets\"; \r\n\r\n    string public constant SYMBOL = \"XPL\"; \r\n\r\n    string public constant BASE_URL = \"https://exoplanets.io/metadata/planet_\"; \r\n\r\n    uint32 private constant NUM_EXOPLANETS_LIMIT = 4700;  \r\n\r\n    uint256 private constant STEP_1 =  5.0 ether; \r\n    uint256 private constant STEP_2 = 10.0 ether;\r\n    uint256 private constant STEP_3 = 26.0 ether;\r\n    uint256 private constant STEP_4 = 36.0 ether;\r\n    uint256 private constant STEP_5 = 47.0 ether;\r\n    uint256 private constant STEP_6 = 59.0 ether;\r\n    uint256 private constant STEP_7 = 67.85 ether;\r\n    uint256 private constant STEP_8 = 76.67 ether;\r\n\r\n    mapping (uint256 => address) public currentOwner;\r\n    mapping (address => uint256) private numOwnedTokens;\r\n    mapping (uint256 => address) public approvedToTransfer;\r\n    mapping (uint256 => uint256) private currentPrice;\r\n    address public ceoAddress;\r\n    address public cooAddress;\r\n\r\n    bool public inPresaleMode = true;\r\n    bool public paused = false; \r\n    address public newContractAddress;\r\n\r\n    struct ExoplanetRec { \r\n        uint8 lifeRate; \r\n        uint32 priceInExoTokens; \r\n        uint32 numOfTokensBonusOnPurchase; \r\n        string name;\r\n        string cryptoMatch; \r\n        string techBonus1;\r\n        string techBonus2;\r\n        string techBonus3;\r\n        string scientificData;\r\n    }\r\n\r\n    ExoplanetRec[] private exoplanets;\r\n\r\n    modifier onlyCEO() {\r\n      require(msg.sender == ceoAddress);\r\n      _;  \r\n    }\r\n\r\n    modifier whenNotPaused() { \r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() { \r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyCEO() whenNotPaused() {\r\n      paused = true;\r\n    }\r\n\r\n    function unpause() public onlyCEO() whenPaused() {\r\n      paused = false;\r\n    }\r\n\r\n   \r\n    function setNewAddress(address _v2Address) public onlyCEO() whenPaused() {\r\n      newContractAddress = _v2Address;\r\n      ContractUpgrade(_v2Address);\r\n    }\r\n\r\n\r\n    modifier onlyCOO() {\r\n      require(msg.sender == cooAddress);\r\n      _;\r\n    }\r\n\r\n    modifier presaleModeActive() {\r\n      require(inPresaleMode);\r\n      _;\r\n    }\r\n\r\n    \r\n    modifier afterPresaleMode() {\r\n      require(!inPresaleMode);\r\n      _;\r\n    }\r\n\r\n    \r\n\r\n    modifier onlyCLevel() {\r\n      require(\r\n        msg.sender == ceoAddress ||\r\n        msg.sender == cooAddress\r\n      );\r\n      _;\r\n    }\r\n\r\n    function setCEO(address newCEO) public onlyCEO {\r\n      require(newCEO != address(0));\r\n      ceoAddress = newCEO;\r\n    }\r\n\r\n    function setCOO(address newCOO) public onlyCEO {\r\n      require(newCOO != address(0));\r\n      cooAddress = newCOO;\r\n    }\r\n    \r\n    function setPresaleMode(bool newMode) public onlyCEO {\r\n      inPresaleMode = newMode;\r\n    }    \r\n\r\n    \r\n    function ExoplanetToken() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public {\r\n    \r\n        require(owns(msg.sender, tokenId));\r\n\r\n        approvedToTransfer[tokenId] = to;\r\n\r\n        Approval(msg.sender, to, tokenId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance) {\r\n        balance = numOwnedTokens[owner];\r\n    }\r\n\r\n\r\n    function createContractExoplanet(\r\n          string name, uint256 priceInEther, uint32 priceInExoTokens, \r\n          string cryptoMatch, uint32 numOfTokensBonusOnPurchase, \r\n          uint8 lifeRate, string scientificData) public onlyCLevel { \r\n\r\n        _createExoplanet(name, address(this), priceInEther, priceInExoTokens, \r\n              cryptoMatch, numOfTokensBonusOnPurchase, lifeRate, scientificData);\r\n    }\r\n\r\n    \r\n    function getName(uint256 tokenId) public view returns (string) {\r\n      return exoplanets[tokenId].name;\r\n    }\r\n\r\n    function getPriceInExoTokens(uint256 tokenId) public view returns (uint32) {\r\n      return exoplanets[tokenId].priceInExoTokens;\r\n    }\r\n\r\n    function getLifeRate(uint256 tokenId) public view returns (uint8) {\r\n      return exoplanets[tokenId].lifeRate;\r\n    }\r\n\r\n    function getNumOfTokensBonusOnPurchase(uint256 tokenId) public view returns (uint32) {\r\n      return exoplanets[tokenId].numOfTokensBonusOnPurchase;\r\n    }\r\n\r\n    function getCryptoMatch(uint256 tokenId) public view returns (string) {\r\n      return exoplanets[tokenId].cryptoMatch;\r\n    }\r\n\r\n    function getTechBonus1(uint256 tokenId) public view returns (string) {\r\n      return exoplanets[tokenId].techBonus1;\r\n    }\r\n\r\n    function getTechBonus2(uint256 tokenId) public view returns (string) {\r\n      return exoplanets[tokenId].techBonus2;\r\n    }\r\n\r\n    function getTechBonus3(uint256 tokenId) public view returns (string) {\r\n      return exoplanets[tokenId].techBonus3;\r\n    }\r\n\r\n    function getScientificData(uint256 tokenId) public view returns (string) {\r\n      return exoplanets[tokenId].scientificData;\r\n    }\r\n\r\n  \r\n    function setTechBonus1(uint256 tokenId, string newVal) public {\r\n\r\n      require(owns(msg.sender, tokenId)); \r\n      exoplanets[tokenId].techBonus1 = newVal;\r\n    }\r\n\r\n    function setTechBonus2(uint256 tokenId, string newVal) public {\r\n      require(owns(msg.sender, tokenId)); \r\n      exoplanets[tokenId].techBonus2 = newVal;\r\n    }\r\n\r\n    function setTechBonus3(uint256 tokenId, string newVal) public {\r\n      require(owns(msg.sender, tokenId)); \r\n      exoplanets[tokenId].techBonus3 = newVal;\r\n    }\r\n\r\n    function setPriceInEth(uint256 tokenId, uint256 newPrice) public afterPresaleMode() {\r\n      require(owns(msg.sender, tokenId)); \r\n      currentPrice[tokenId] = newPrice;\r\n    }\r\n\r\n    function setPriceInExoTokens(uint256 tokenId, uint32 newPrice) public afterPresaleMode() {\r\n      require(owns(msg.sender, tokenId)); \r\n      exoplanets[tokenId].priceInExoTokens = newPrice;\r\n    }\r\n\r\n    function setScientificData(uint256 tokenId, string newData) public onlyCLevel { \r\n      exoplanets[tokenId].scientificData = newData;\r\n    }\r\n\r\n\r\n    function getExoplanet(uint256 tokenId) public view returns ( \r\n      string exoplanetName,\r\n      uint256 sellingPriceInEther,\r\n      address owner,\r\n      uint8 lifeRate,\r\n      uint32 priceInExoTokens,\r\n      uint32 numOfTokensBonusOnPurchase,\r\n      string cryptoMatch,\r\n      string scientificData) {\r\n\r\n\r\n      ExoplanetRec storage exoplanet = exoplanets[tokenId];       \r\n      exoplanetName = exoplanet.name;\r\n      lifeRate = exoplanet.lifeRate;\r\n      priceInExoTokens = exoplanet.priceInExoTokens;\r\n      numOfTokensBonusOnPurchase = exoplanet.numOfTokensBonusOnPurchase;\r\n      cryptoMatch = exoplanet.cryptoMatch;\r\n      scientificData = exoplanet.scientificData;\r\n      \r\n      sellingPriceInEther = currentPrice[tokenId];\r\n      owner = currentOwner[tokenId];\r\n    }  \r\n\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n      return true;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner) {   \r\n      owner = currentOwner[tokenId];\r\n    }\r\n\r\n\r\n    function transferUnownedPlanet(address newOwner, uint256 tokenId) public onlyCLevel { \r\n      \r\n      require(currentOwner[tokenId] == address(this));\r\n\r\n      require(newOwner != address(0));\r\n\r\n      _transfer(currentOwner[tokenId], newOwner, tokenId);    \r\n\r\n      TokenSold(tokenId, currentPrice[tokenId], currentPrice[tokenId], address(this), newOwner, exoplanets[tokenId].name);\r\n    }\r\n\r\n\r\n    function purchase(uint256 tokenId) public payable whenNotPaused() presaleModeActive() {\r\n    \r\n      require(currentOwner[tokenId] != msg.sender);\r\n\r\n      require(addressNotNull(msg.sender));\r\n\r\n      uint256 planetPrice = currentPrice[tokenId]; \r\n\r\n      require(msg.value >= planetPrice);\r\n\r\n\r\n      uint256 purchaseExcess = msg.value.sub(planetPrice); \r\n\r\n      uint paymentPrcnt;\r\n      uint stepPrcnt;\r\n\r\n      if (planetPrice <= STEP_1) {        \r\n        paymentPrcnt = 93; \r\n        stepPrcnt = 200;\r\n      } else if (planetPrice <= STEP_2) {\r\n        paymentPrcnt = 93; \r\n        stepPrcnt = 150;\r\n      } else if (planetPrice <= STEP_3) {\r\n        paymentPrcnt = 93; \r\n        stepPrcnt = 135;\r\n      } else if (planetPrice <= STEP_4) {\r\n        paymentPrcnt = 94; \r\n        stepPrcnt = 125;\r\n      } else if (planetPrice <= STEP_5) {\r\n        paymentPrcnt = 94; \r\n        stepPrcnt = 119;\r\n      } else if (planetPrice <= STEP_6) {\r\n        paymentPrcnt = 95; \r\n        stepPrcnt = 117;    \r\n      } else if (planetPrice <= STEP_7) {\r\n        paymentPrcnt = 95; \r\n        stepPrcnt = 115;\r\n      } else if (planetPrice <= STEP_8) {\r\n        paymentPrcnt = 95; \r\n        stepPrcnt = 113;\r\n      } else {  \r\n        paymentPrcnt = 96; \r\n        stepPrcnt = 110;\r\n      }\r\n\r\n      currentPrice[tokenId] = planetPrice.mul(stepPrcnt).div(100);\r\n\r\n      uint256 payment = uint256(planetPrice.mul(paymentPrcnt).div(100));\r\n\r\n      address seller = currentOwner[tokenId];\r\n      \r\n      if (seller != address(this)) {  \r\n        seller.transfer(payment); \r\n      }\r\n\r\n      _transfer(seller, msg.sender, tokenId); \r\n\r\n      TokenSold(tokenId, planetPrice, currentPrice[tokenId], seller, msg.sender, exoplanets[tokenId].name);\r\n\r\n      msg.sender.transfer(purchaseExcess); \r\n    }\r\n\r\n\r\n    function priceOf(uint256 tokenId) public view returns (uint256) {\r\n      return currentPrice[tokenId];\r\n    }\r\n\r\n\r\n    function takeOwnership(uint256 tokenId) public whenNotPaused() { \r\n\r\n      require(addressNotNull(msg.sender));\r\n\r\n      require(approved(msg.sender, tokenId));\r\n\r\n      _transfer(currentOwner[tokenId], msg.sender, tokenId);\r\n    }\r\n\r\n    \r\n    function tokensOfOwner(address owner) public view returns(uint256[] ownerTokens) {\r\n      uint256 tokenCount = balanceOf(owner);\r\n      if (tokenCount == 0) {\r\n        return new uint256[](0);\r\n      } else {\r\n        uint256[] memory result = new uint256[](tokenCount);\r\n        uint256 totalExoplanets = totalSupply();\r\n        uint256 resultIndex = 0;\r\n\r\n        uint256 exoplanetId;\r\n        for (exoplanetId = 0; exoplanetId <= totalExoplanets; exoplanetId++) {\r\n          if (currentOwner[exoplanetId] == owner) {\r\n            result[resultIndex] = exoplanetId;\r\n            resultIndex++;\r\n          }\r\n        }\r\n        return result;\r\n      }\r\n    }\r\n\r\n    function name() external view returns (string name) {\r\n      name = NAME;\r\n    }\r\n\r\n\r\n    function symbol() external view returns (string symbol) {\r\n      symbol = SYMBOL;\r\n    }\r\n\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string uri) {\r\n      uri = appendNumToString(BASE_URL, _tokenId);\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns (uint256 total) { \r\n      total = exoplanets.length;\r\n    }\r\n\r\n    \r\n    function transfer(address to, uint256 tokenId) public whenNotPaused() {\r\n      require(owns(msg.sender, tokenId));\r\n      require(addressNotNull(to));\r\n      _transfer(msg.sender, to, tokenId);\r\n    }\r\n\r\n   \r\n    function transferFrom(address from, address to, uint256 tokenId) public whenNotPaused() {\r\n      require(approved(from, tokenId));\r\n      require(addressNotNull(to));\r\n      _transfer(from, to, tokenId);\r\n    }\r\n\r\n   \r\n    function addressNotNull(address addr) private pure returns (bool) {\r\n      return addr != address(0);\r\n    }\r\n\r\n   \r\n    function approved(address to, uint256 tokenId) private view returns (bool) {\r\n      return approvedToTransfer[tokenId] == to;\r\n    }\r\n\r\n    \r\n    function _createExoplanet(\r\n        string name, address owner, uint256 priceInEther, uint32 priceInExoTokens, \r\n        string cryptoMatch, uint32 numOfTokensBonusOnPurchase, uint8 lifeRate, \r\n        string scientificData) private {\r\n\r\n      \r\n      require(totalSupply() < NUM_EXOPLANETS_LIMIT);\r\n\r\n      ExoplanetRec memory _exoplanet = ExoplanetRec({  \r\n        name: name,\r\n        priceInExoTokens: priceInExoTokens,\r\n        cryptoMatch: cryptoMatch,\r\n        numOfTokensBonusOnPurchase: numOfTokensBonusOnPurchase,\r\n        lifeRate: lifeRate,\r\n        techBonus1: \"\",\r\n        techBonus2: \"\",\r\n        techBonus3: \"\",\r\n        scientificData: scientificData\r\n      });\r\n      uint256 newExoplanetId = exoplanets.push(_exoplanet) - 1;\r\n\r\n      \r\n      require(newExoplanetId == uint256(uint32(newExoplanetId)));\r\n\r\n      Birth(newExoplanetId, name, numOfTokensBonusOnPurchase, owner);\r\n\r\n      currentPrice[newExoplanetId] = priceInEther;\r\n\r\n      \r\n      _transfer(address(0), owner, newExoplanetId);\r\n    }\r\n\r\n\r\n    \r\n    function owns(address claimant, uint256 tokenId) private view returns (bool) {\r\n      return claimant == currentOwner[tokenId];\r\n    }\r\n\r\n    function payout() public onlyCLevel {\r\n      ceoAddress.transfer(this.balance);\r\n    }\r\n\r\n    function payoutPartial(uint256 amount) public onlyCLevel {\r\n      require(amount <= this.balance);\r\n      ceoAddress.transfer(amount);\r\n    }\r\n\r\n    \r\n    function _transfer(address from, address to, uint256 tokenId) private {\r\n      \r\n      numOwnedTokens[to]++;\r\n\r\n      \r\n      currentOwner[tokenId] = to;\r\n\r\n      \r\n      if (from != address(0)) {\r\n        numOwnedTokens[from]--;\r\n      \r\n        delete approvedToTransfer[tokenId];\r\n      }\r\n\r\n     \r\n      Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function appendNumToString(string baseUrl, uint256 tokenId) private pure returns (string) {\r\n      string memory _b = numToString(tokenId);\r\n      bytes memory bytes_a = bytes(baseUrl);\r\n      bytes memory bytes_b = bytes(_b);\r\n      string memory length_ab = new string(bytes_a.length + bytes_b.length);\r\n      bytes memory bytes_c = bytes(length_ab);\r\n      uint k = 0;\r\n      for (uint i = 0; i < bytes_a.length; i++) {\r\n        bytes_c[k++] = bytes_a[i];\r\n      }\r\n      for (i = 0; i < bytes_b.length; i++) {\r\n        bytes_c[k++] = bytes_b[i];\r\n      }\r\n      return string(bytes_c);\r\n    }\r\n\r\n    function numToString(uint256 tokenId) private pure returns (string str) {\r\n      uint uintVal = uint(tokenId);\r\n      bytes32 bytes32Val = uintToBytes32(uintVal);  \r\n      return bytes32ToString(bytes32Val);\r\n    }\r\n\r\n    function uintToBytes32(uint v) private pure returns (bytes32 ret) {\r\n      if (v == 0) {\r\n          ret = '0';\r\n      }\r\n      else {\r\n          while (v > 0) {\r\n              ret = bytes32(uint(ret) / (2 ** 8));\r\n              ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n              v /= 10;\r\n          }\r\n      }\r\n      return ret;\r\n    }    \r\n\r\n    function bytes32ToString(bytes32 x) private pure returns (string) {\r\n      bytes memory bytesString = new bytes(32);\r\n      uint charCount = 0;\r\n      for (uint j = 0; j < 32; j++) {\r\n          byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n          if (char != 0) {\r\n              bytesString[charCount] = char;\r\n              charCount++;\r\n          }\r\n      }\r\n      bytes memory bytesStringTrimmed = new bytes(charCount);\r\n      for (j = 0; j < charCount; j++) {\r\n          bytesStringTrimmed[j] = bytesString[j];\r\n      }\r\n      return string(bytesStringTrimmed);\r\n    }    \r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getExoplanet\",\"outputs\":[{\"name\":\"exoplanetName\",\"type\":\"string\"},{\"name\":\"sellingPriceInEther\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"lifeRate\",\"type\":\"uint8\"},{\"name\":\"priceInExoTokens\",\"type\":\"uint32\"},{\"name\":\"numOfTokensBonusOnPurchase\",\"type\":\"uint32\"},{\"name\":\"cryptoMatch\",\"type\":\"string\"},{\"name\":\"scientificData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inPresaleMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"priceInEther\",\"type\":\"uint256\"},{\"name\":\"priceInExoTokens\",\"type\":\"uint32\"},{\"name\":\"cryptoMatch\",\"type\":\"string\"},{\"name\":\"numOfTokensBonusOnPurchase\",\"type\":\"uint32\"},{\"name\":\"lifeRate\",\"type\":\"uint8\"},{\"name\":\"scientificData\",\"type\":\"string\"}],\"name\":\"createContractExoplanet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTechBonus2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newVal\",\"type\":\"string\"}],\"name\":\"setTechBonus1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payoutPartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_URL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLifeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPriceInExoTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newVal\",\"type\":\"string\"}],\"name\":\"setTechBonus2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newVal\",\"type\":\"string\"}],\"name\":\"setTechBonus3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNumOfTokensBonusOnPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferUnownedPlanet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMode\",\"type\":\"bool\"}],\"name\":\"setPresaleMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceInEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCryptoMatch\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTechBonus3\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getScientificData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint32\"}],\"name\":\"setPriceInExoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTechBonus1\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newData\",\"type\":\"string\"}],\"name\":\"setScientificData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"numOfTokensBonusOnPurchase\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPriceInEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPriceInEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ExoplanetToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://67db96e0a6e965dbd58533a607b385d8b32dbc3af2f6f59e2deabd605a75ca8f"}]}