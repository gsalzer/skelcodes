{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  /**\r\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n   * @param _cap Max amount of wei to be contributed\r\n   */\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    require(weiRaised.add(_weiAmount) <= cap);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) hasMintPermission canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting.\r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title FTICrowdsale\r\n * @dev This is FTICrowdsale contract.\r\n * In this crowdsale we are providing following extensions:\r\n * CappedCrowdsale - sets a max boundary for raised funds\r\n * MintedCrowdsale - set a min goal to be reached and returns funds if it's not met\r\n *\r\n * After adding multiple features it's good practice to run integration tests\r\n * to ensure that subcontracts works together as intended.\r\n */\r\ncontract ClosedPeriod is TimedCrowdsale {\r\n    uint256 startClosePeriod;\r\n    uint256 stopClosePeriod;\r\n  \r\n    modifier onlyWhileOpen {\r\n        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n        require(block.timestamp < startClosePeriod || block.timestamp > stopClosePeriod);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _openingTime,\r\n        uint256 _closingTime,\r\n        uint256 _openClosePeriod,\r\n        uint256 _endClosePeriod\r\n    ) public\r\n        TimedCrowdsale(_openingTime, _closingTime)\r\n    {\r\n        require(_openClosePeriod > 0);\r\n        require(_endClosePeriod > _openClosePeriod);\r\n        startClosePeriod = _openClosePeriod;\r\n        stopClosePeriod = _endClosePeriod;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ContractableToken\r\n * @dev The Ownable contract has an ownerncontract address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OptionsToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n    bool revertable = true;\r\n    mapping (address => uint256) public optionsOwner;\r\n    \r\n    modifier hasOptionPermision() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }  \r\n\r\n    function storeOptions(address recipient, uint256 amount) public hasOptionPermision() {\r\n        optionsOwner[recipient] += amount;\r\n    }\r\n\r\n    function refundOptions(address discharged) public onlyOwner() returns (bool) {\r\n        require(revertable);\r\n        require(optionsOwner[discharged] > 0);\r\n        require(optionsOwner[discharged] <= balances[discharged]);\r\n\r\n        uint256 revertTokens = optionsOwner[discharged];\r\n        optionsOwner[discharged] = 0;\r\n\r\n        balances[discharged] = balances[discharged].sub(revertTokens);\r\n        balances[owner] = balances[owner].add(revertTokens);\r\n        emit Transfer(discharged, owner, revertTokens);\r\n        return true;\r\n    }\r\n\r\n    function doneOptions() public onlyOwner() {\r\n        require(revertable);\r\n        revertable = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ContractableToken\r\n * @dev The Contractable contract has an ownerncontract address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract ContractableToken is MintableToken, OptionsToken {\r\n    address[5] public contract_addr;\r\n    uint8 public contract_num = 0;\r\n\r\n    function existsContract(address sender) public view returns(bool) {\r\n        bool found = false;\r\n        for (uint8 i = 0; i < contract_num; i++) {\r\n            if (sender == contract_addr[i]) {\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    modifier onlyContract() {\r\n        require(existsContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(existsContract(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    modifier hasOptionPermision() {\r\n        require(existsContract(msg.sender));\r\n        _;\r\n    }  \r\n  \r\n    event ContractRenounced();\r\n    event ContractTransferred(address indexed newContract);\r\n  \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newContract.\r\n     * @param newContract The address to transfer ownership to.\r\n     */\r\n    function setContract(address newContract) public onlyOwner() {\r\n        require(newContract != address(0));\r\n        contract_num++;\r\n        require(contract_num <= 5);\r\n        emit ContractTransferred(newContract);\r\n        contract_addr[contract_num-1] = newContract;\r\n    }\r\n  \r\n    function renounceContract() public onlyOwner() {\r\n        emit ContractRenounced();\r\n        contract_num = 0;\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\n/**\r\n * @title FTIToken\r\n * @dev Very simple ERC20 Token that can be minted.\r\n * It is meant to be used in a crowdsale contract.\r\n */\r\ncontract FTIToken is ContractableToken {\r\n\r\n    string public constant name = \"GlobalCarService Token\";\r\n    string public constant symbol = \"FTI\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(msg.sender == owner || mintingFinished);\r\n        super.transferFrom(_from, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(msg.sender == owner || mintingFinished);\r\n        super.transfer(_to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title FTICrowdsale\r\n * @dev This is FTICrowdsale contract.\r\n * In this crowdsale we are providing following extensions:\r\n * CappedCrowdsale - sets a max boundary for raised funds\r\n * MintedCrowdsale - set a min goal to be reached and returns funds if it's not met\r\n *\r\n * After adding multiple features it's good practice to run integration tests\r\n * to ensure that subcontracts works together as intended.\r\n */\r\ncontract FTICrowdsale is CappedCrowdsale, MintedCrowdsale, ClosedPeriod, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public referralMinimum;\r\n    uint8 public additionalTokenRate; \r\n    uint8 public referralPercent;\r\n    uint8 public referralOwnerPercent;\r\n    bool public openingManualyMining = true;\r\n     \r\n    modifier onlyOpeningManualyMinig() {\r\n        require(openingManualyMining);\r\n        _;\r\n    }\r\n   \r\n    struct Pay {\r\n        address payer;\r\n        uint256 amount;\r\n    }\r\n    \r\n    struct ReferalUser {\r\n        uint256 fundsTotal;\r\n        uint32 numReferrals;\r\n        uint256 amountWEI;\r\n        uint32 paysCount;\r\n        mapping (uint32 => Pay) pays;\r\n        mapping (uint32 => address) paysUniq;\r\n        mapping (address => uint256) referral;\r\n    }\r\n    mapping (address => ReferalUser) public referralAddresses;\r\n\r\n    uint8 constant maxGlobInvestor = 5;\r\n    struct BonusPeriod {\r\n        uint64 from;\r\n        uint64 to;\r\n        uint256 min_amount;\r\n        uint256 max_amount;\r\n        uint8 bonus;\r\n        uint8 index_global_investor;\r\n    }\r\n    BonusPeriod[] public bonus_periods;\r\n\r\n    mapping (uint8 => address[]) public globalInvestor;\r\n\r\n    constructor(\r\n        uint256 _openingTime,\r\n        uint256 _closingTime,\r\n        uint256 _openClosePeriod,\r\n        uint256 _endClosePeriod,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        uint256 _cap,\r\n        FTIToken _token,\r\n        uint8 _additionalTokenRate,\r\n        uint8 _referralPercent,\r\n        uint256 _referralMinimum,\r\n        uint8 _referralOwnerPercent,\r\n        uint256 _startWeiAmount\r\n    ) public\r\n        Crowdsale(_rate, _wallet, _token)\r\n        CappedCrowdsale(_cap)\r\n        ClosedPeriod(_openingTime, _closingTime, _openClosePeriod, _endClosePeriod)\r\n    {\r\n        require(_additionalTokenRate > 0);\r\n        require(_referralPercent > 0);\r\n        require(_referralMinimum > 0);\r\n        require(_referralOwnerPercent > 0);\r\n        additionalTokenRate = _additionalTokenRate;\r\n        referralPercent = _referralPercent;\r\n        referralMinimum = _referralMinimum;\r\n        referralOwnerPercent = _referralOwnerPercent;\r\n        weiRaised = _startWeiAmount;\r\n    }\r\n\r\n    function manualyAddReferral(address ref, uint256 amount) public onlyOwner() {\r\n        referralAddresses[ref] = ReferalUser(0,0,amount,0);\r\n    }\r\n\r\n    function manualyAddReferralPayer(address ref, address _beneficiary, uint256 _weiAmount) public onlyOwner() {\r\n        ReferalUser storage rr = referralAddresses[ref];\r\n        if (rr.amountWEI > 0) {\r\n            uint mintTokens = _weiAmount.mul(rate);\r\n            uint256 ownerToken = mintTokens.mul(referralOwnerPercent).div(100);\r\n            rr.fundsTotal += ownerToken;\r\n            if (rr.referral[_beneficiary] == 0){\r\n                rr.paysUniq[rr.numReferrals] = _beneficiary;\r\n                rr.numReferrals += 1;\r\n            }\r\n            rr.referral[_beneficiary] += _weiAmount;\r\n            rr.pays[rr.paysCount] = Pay(_beneficiary, _weiAmount);\r\n            rr.paysCount += 1;\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes source) internal constant returns(address parsedReferer) {\r\n        assembly {\r\n            parsedReferer := mload(add(source,0x14))\r\n        }\r\n        require(parsedReferer != msg.sender);\r\n        return parsedReferer;\r\n    }\r\n\r\n    function processReferral(address owner, address _beneficiary, uint256 _weiAmount) internal {\r\n        require(owner != address(0));\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n        ReferalUser storage rr = referralAddresses[owner];\r\n        if (rr.amountWEI > 0) {\r\n            uint mintTokens = _weiAmount.mul(rate);\r\n            uint256 ownerToken = mintTokens.mul(referralOwnerPercent).div(100);\r\n            rr.fundsTotal += ownerToken;\r\n            if (rr.referral[_beneficiary] == 0){\r\n                rr.paysUniq[rr.numReferrals] = _beneficiary;\r\n                rr.numReferrals += 1;\r\n            }\r\n            rr.referral[_beneficiary] += _weiAmount;\r\n            rr.pays[rr.paysCount] = Pay(_beneficiary, _weiAmount);\r\n            rr.paysCount += 1;\r\n            FTIToken(token).mint(owner, ownerToken);\r\n            FTIToken(token).mint(_beneficiary, mintTokens.mul(referralPercent).div(100));\r\n        }\r\n    }\r\n\r\n    function addReferral(address _beneficiary, uint256 _weiAmount) internal {\r\n        if (_weiAmount > referralMinimum) {\r\n            ReferalUser storage r = referralAddresses[_beneficiary];\r\n            if (r.amountWEI > 0 ) {\r\n                r.amountWEI += _weiAmount;\r\n            }\r\n            else {\r\n                referralAddresses[_beneficiary] = ReferalUser(0, 0, _weiAmount, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        if (msg.data.length == 20) {\r\n            address ref = bytesToAddress(msg.data);\r\n            processReferral(ref, _beneficiary, _weiAmount);\r\n        }\r\n\r\n        addReferral(_beneficiary, _weiAmount);\r\n\r\n        uint8 index = indexSuperInvestor(_weiAmount);\r\n        if (index > 0 && globalInvestor[index].length < maxGlobInvestor) {\r\n            bool found = false;\r\n            for (uint8 iter = 0; iter < globalInvestor[index].length; iter++) {\r\n                if (globalInvestor[index][iter] == _beneficiary) {\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) { \r\n                globalInvestor[index].push(_beneficiary);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function addBonusPeriod (uint64 from, uint64 to, uint256 min_amount, uint8 bonus, uint256 max_amount, uint8 index_glob_inv) public onlyOwner {\r\n        bonus_periods.push(BonusPeriod(from, to, min_amount, max_amount, bonus, index_glob_inv));\r\n    }\r\n\r\n\r\n    function referalCount (address addr) public view returns(uint64 len) {\r\n        len = referralAddresses[addr].numReferrals;\r\n    } \r\n\r\n    function referalAddrByNum (address ref_owner, uint32 num) public view returns(address addr) {\r\n        addr = referralAddresses[ref_owner].paysUniq[num];\r\n    } \r\n\r\n    function referalPayCount (address addr) public view returns(uint64 len) {\r\n        len = referralAddresses[addr].paysCount;\r\n    } \r\n\r\n    function referalPayByNum (address ref_owner, uint32 num) public view returns(address addr, uint256 amount) {\r\n        addr = referralAddresses[ref_owner].pays[num].payer;\r\n        amount = referralAddresses[ref_owner].pays[num].amount;\r\n    } \r\n\r\n    function getBonusRate (uint256 amount) public constant returns(uint8) {\r\n        for (uint i = 0; i < bonus_periods.length; i++) {\r\n            BonusPeriod storage bonus_period = bonus_periods[i];\r\n            if (bonus_period.from <= now && bonus_period.to > now && bonus_period.min_amount <= amount && bonus_period.max_amount > amount) {\r\n                return bonus_period.bonus;\r\n            } \r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function indexSuperInvestor (uint256 amount) internal view returns(uint8) {\r\n        for (uint8 i = 0; i < bonus_periods.length; i++) {\r\n            BonusPeriod storage bonus_period = bonus_periods[i];\r\n            if (bonus_period.from <= now && bonus_period.to > now && bonus_period.min_amount <= amount && bonus_period.max_amount > amount) {\r\n                return bonus_period.index_global_investor;\r\n            } \r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint8 bonusPercent = 100 + getBonusRate(_weiAmount);\r\n        uint256 amountTokens = _weiAmount.mul(rate).mul(bonusPercent).div(100);\r\n        return amountTokens;\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        super._processPurchase(_beneficiary, _tokenAmount);\r\n        FTIToken(token).mint(wallet, _tokenAmount.mul(additionalTokenRate).div(100));\r\n    }\r\n\r\n    function closeManualyMining() public onlyOwner() {\r\n        openingManualyMining = false;\r\n    }\r\n\r\n    function manualyMintTokens(uint256 _weiAmount, address _beneficiary, uint256 mintTokens) public onlyOwner() onlyOpeningManualyMinig() {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n        require(mintTokens != 0);\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        _processPurchase(_beneficiary, mintTokens);\r\n        emit TokenPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            _weiAmount,\r\n            mintTokens\r\n        );\r\n        addReferral(_beneficiary, _weiAmount);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"manualyAddReferralPayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeManualyMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"manualyMintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingManualyMining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonus_periods\",\"outputs\":[{\"name\":\"from\",\"type\":\"uint64\"},{\"name\":\"to\",\"type\":\"uint64\"},{\"name\":\"min_amount\",\"type\":\"uint256\"},{\"name\":\"max_amount\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint8\"},{\"name\":\"index_global_investor\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ref_owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"referalPayByNum\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralOwnerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"referalPayCount\",\"outputs\":[{\"name\":\"len\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ref_owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"referalAddrByNum\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additionalTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"uint64\"},{\"name\":\"to\",\"type\":\"uint64\"},{\"name\":\"min_amount\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint8\"},{\"name\":\"max_amount\",\"type\":\"uint256\"},{\"name\":\"index_glob_inv\",\"type\":\"uint8\"}],\"name\":\"addBonusPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualyAddReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"referalCount\",\"outputs\":[{\"name\":\"len\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAddresses\",\"outputs\":[{\"name\":\"fundsTotal\",\"type\":\"uint256\"},{\"name\":\"numReferrals\",\"type\":\"uint32\"},{\"name\":\"amountWEI\",\"type\":\"uint256\"},{\"name\":\"paysCount\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_openClosePeriod\",\"type\":\"uint256\"},{\"name\":\"_endClosePeriod\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_additionalTokenRate\",\"type\":\"uint8\"},{\"name\":\"_referralPercent\",\"type\":\"uint8\"},{\"name\":\"_referralMinimum\",\"type\":\"uint256\"},{\"name\":\"_referralOwnerPercent\",\"type\":\"uint8\"},{\"name\":\"_startWeiAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"FTICrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b1472f0000000000000000000000000000000000000000000000000000000005b93b9c0000000000000000000000000000000000000000000000000000000005b2a41c0000000000000000000000000000000000000000000000000000000005b30d9400000000000000000000000000000000000000000000000000000000000001770000000000000000000000000f99c913bea828369ea5c8d2ed8a270f9fd9168a300000000000000000000000000000000000000000000054b40b1f852bda0000000000000000000000000000077a660753874723fa48460a179992cd29a5e617a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000003782dace9d900000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000019566ffc2f6abe6200","Library":"","SwarmSource":"bzzr://1faa05c31db6a516867cfc0929627d36eca24ff9e9ac0da572cc1e791b81fac5"}]}