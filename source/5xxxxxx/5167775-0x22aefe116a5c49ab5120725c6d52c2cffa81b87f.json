{"status":"1","message":"OK","result":[{"SourceCode":"// ICO Platform Demo smart contract.\r\n// Developed by Phenom.Team <info@phenom.team>\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n *   @title SafeMath\r\n *   @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal constant returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal constant returns(uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal constant returns(uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal constant returns(uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n *   @title ERC20\r\n *   @dev Standart ERC20 token interface\r\n */\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n} \r\n\r\n/**\r\n *   @title PhenomTeam contract  - takes funds and issues tokens\r\n */\r\ncontract PhenomTeam {\r\n    // PHN - Phenom Demo Token contract \r\n    using SafeMath for uint;\r\n    PhenomDemoToken public PHN = new PhenomDemoToken(this);\r\n\r\n    \r\n    // rateEth can be changed only by Oracle\r\n    uint public rateEth = 878; // Rate USD per ETH\r\n\r\n    // Output ethereum addresses\r\n    address public Company;\r\n    address public Manager; // Manager controls contract\r\n    address public Controller_Address1; // First address that is used to buy tokens for other cryptos\r\n    address public Controller_Address2; // Second address that is used to buy tokens for other cryptos\r\n    address public Controller_Address3; // Third address that is used to buy tokens for other cryptos\r\n    address public Oracle; // Oracle address\r\n\r\n    // Possible ICO statuses\r\n    enum StatusICO {\r\n        Created,\r\n        Started,\r\n        Paused,\r\n        Finished\r\n    }\r\n    StatusICO statusICO = StatusICO.Created;\r\n    \r\n    // Events Log\r\n    event LogStartICO();\r\n    event LogPause();\r\n    event LogFinishICO();\r\n    event LogBuyForInvestor(address investor, uint DTRCValue, string txHash);\r\n\r\n    // Modifiers\r\n    // Allows execution by the manager only\r\n    modifier managerOnly { \r\n        require(\r\n            msg.sender == Manager\r\n        );\r\n        _; \r\n     }\r\n\r\n    // Allows execution by the oracle only\r\n    modifier oracleOnly { \r\n        require(msg.sender == Oracle);\r\n        _; \r\n     }\r\n    // Allows execution by the one of controllers only\r\n    modifier controllersOnly {\r\n        require(\r\n            (msg.sender == Controller_Address1)||\r\n            (msg.sender == Controller_Address2)||\r\n            (msg.sender == Controller_Address3)\r\n        );\r\n        _;\r\n    }\r\n\r\n   /**\r\n    *   @dev Contract constructor function\r\n    */\r\n    function PhenomTeam(\r\n        address _Company,\r\n        address _Manager,\r\n        address _Controller_Address1,\r\n        address _Controller_Address2,\r\n        address _Controller_Address3,\r\n        address _Oracle\r\n        ) public {\r\n        Company = _Company;\r\n        Manager = _Manager;\r\n        Controller_Address1 = _Controller_Address1;\r\n        Controller_Address2 = _Controller_Address2;\r\n        Controller_Address3 = _Controller_Address3;\r\n        Oracle = _Oracle;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to set rate of ETH\r\n    *   @param _rateEth       current ETH rate\r\n    */\r\n    function setRate(uint _rateEth) external oracleOnly {\r\n        rateEth = _rateEth;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to start ICO\r\n    *   Sets ICO status to Started\r\n    */\r\n    function startIco() external managerOnly {\r\n        require(statusICO == StatusICO.Created || statusICO == StatusICO.Paused);\r\n        statusICO = StatusICO.Started;\r\n        LogStartICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to pause ICO\r\n    *   Sets ICO status to Paused\r\n    */\r\n    function pauseIco() external managerOnly {\r\n       require(statusICO == StatusICO.Started);\r\n       statusICO = StatusICO.Paused;\r\n       LogPause();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to finish ICO\r\n    */\r\n    function finishIco() external managerOnly {\r\n        require(statusICO == StatusICO.Started || statusICO == StatusICO.Paused);\r\n        statusICO = StatusICO.Finished;\r\n        LogFinishICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Fallback function calls buy(address _investor, uint _PHNValue) function to issue tokens\r\n    *        when investor sends ETH to address of ICO contract\r\n    */\r\n    function() external payable {\r\n        buy(msg.sender, msg.value.mul(rateEth)); \r\n    }\r\n\r\n   /**\r\n    *   @dev Function to issues tokens for investors who made purchases in other cryptocurrencies\r\n    *   @param _investor     address the tokens will be issued to\r\n    *   @param _txHash       transaction hash of investor's payment\r\n    *   @param _PHNValue     number of PHN tokens\r\n    */\r\n\r\n    function buyForInvestor(\r\n        address _investor, \r\n        uint _PHNValue, \r\n        string _txHash\r\n    ) \r\n        external \r\n        controllersOnly {\r\n        buy(_investor, _PHNValue);\r\n        LogBuyForInvestor(_investor, _PHNValue, _txHash);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to issue tokens for investors who paid in ether\r\n    *   @param _investor     address which the tokens will be issued tokens\r\n    *   @param _PHNValue     number of PHN tokens\r\n    */\r\n    function buy(address _investor, uint _PHNValue) internal {\r\n        require(statusICO == StatusICO.Started);\r\n        PHN.mintTokens(_investor, _PHNValue);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to enable token transfers\r\n    */\r\n    function unfreeze() external managerOnly {\r\n       PHN.defrost();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to disable token transfers\r\n    */\r\n    function freeze() external managerOnly {\r\n       PHN.frost();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to change withdrawal address\r\n    *   @param _Company     new withdrawal address\r\n    */   \r\n    function setWithdrawalAddress(address _Company) external managerOnly {\r\n        Company = _Company;\r\n    }\r\n   \r\n   /**\r\n    *   @dev Allows Company withdraw investments\r\n    */\r\n    function withdrawEther() external managerOnly {\r\n        Company.transfer(this.balance);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n *   @title PhenomDemoToken\r\n *   @dev Phenom Demo Token contract \r\n */\r\ncontract PhenomDemoToken is ERC20 {\r\n    using SafeMath for uint;\r\n    string public name = \"ICO Platform Demo | https://Phenom.Team \";\r\n    string public symbol = \"PHN\";\r\n    uint public decimals = 18;\r\n\r\n    // Ico contract address\r\n    address public ico;\r\n    \r\n    // Tokens transfer ability status\r\n    bool public tokensAreFrozen = true;\r\n\r\n    // Allows execution by the owner only\r\n    modifier icoOnly { \r\n        require(msg.sender == ico); \r\n        _; \r\n    }\r\n\r\n   /**\r\n    *   @dev Contract constructor function sets Ico address\r\n    *   @param _ico          ico address\r\n    */\r\n    function PhenomDemoToken(address _ico) public {\r\n       ico = _ico;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to mint tokens\r\n    *   @param _holder       beneficiary address the tokens will be issued to\r\n    *   @param _value        number of tokens to issue\r\n    */\r\n    function mintTokens(address _holder, uint _value) external icoOnly {\r\n       require(_value > 0);\r\n       balances[_holder] = balances[_holder].add(_value);\r\n       totalSupply = totalSupply.add(_value);\r\n       Transfer(0x0, _holder, _value);\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Function to enable token transfers\r\n    */\r\n    function defrost() external icoOnly {\r\n       tokensAreFrozen = false;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to disable token transfers\r\n    */\r\n    function frost() external icoOnly {\r\n       tokensAreFrozen = true;\r\n    }\r\n\r\n   /**\r\n    *   @dev Get balance of tokens holder\r\n    *   @param _holder        holder's address\r\n    *   @return               balance of investor\r\n    */\r\n    function balanceOf(address _holder) constant returns (uint) {\r\n         return balances[_holder];\r\n    }\r\n\r\n   /**\r\n    *   @dev Send coins\r\n    *   throws on any error rather then return a false flag to minimize\r\n    *   user errors\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transfer(address _to, uint _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev An account/contract attempts to get the coins\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   @param _from         source address\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n     }\r\n\r\n\r\n   /**\r\n    *   @dev Allows another account/contract to spend some tokens on its behalf\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   also, to minimize the risk of the approve/transferFrom attack vector\r\n    *   approve has to be called twice in 2 separate transactions - once to\r\n    *   change the allowance to 0 and secondly to change it to the new allowance\r\n    *   value\r\n    *\r\n    *   @param _spender      approved address\r\n    *   @param _amount       allowance amount\r\n    *\r\n    *   @return true if the approval was successful\r\n    */\r\n    function approve(address _spender, uint _amount) public returns (bool) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    *   @param _owner        the address which owns the funds\r\n    *   @param _spender      the address which will spend the funds\r\n    *\r\n    *   @return              the amount of tokens still avaible for the spender\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_PHNValue\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyForInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Company\",\"type\":\"address\"}],\"name\":\"setWithdrawalAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_Company\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_Controller_Address1\",\"type\":\"address\"},{\"name\":\"_Controller_Address2\",\"type\":\"address\"},{\"name\":\"_Controller_Address3\",\"type\":\"address\"},{\"name\":\"_Oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFinishICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"DTRCValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogBuyForInvestor\",\"type\":\"event\"}]","ContractName":"PhenomTeam","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000097983d727f30d95acb68e02c05fee0a106c9237700000000000000000000000087594313b5401df6558d6c0656349e61133b91e2000000000000000000000000c7bc8842214b9602f0acb57310b9434da46f826d0000000000000000000000007489ce3caa559aa7f806dc3b568322baf2f56d9b000000000000000000000000f556e8f7c4b2d78bba023643a05509f03dac4b33000000000000000000000000854dcdd4a19a3f26a7fd6581ef49c8aac7452082","Library":"","SwarmSource":"bzzr://26a2220bb4d70607f13b31a9874dbc121cf46eb3f5f15489fb39b7b6a0da78af"}]}