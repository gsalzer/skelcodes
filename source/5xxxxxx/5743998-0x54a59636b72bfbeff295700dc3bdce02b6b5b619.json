{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// Standard ERC721 functions import\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n}\r\n\r\ncontract CryptoWorldCupToken is ERC721 {\r\n\r\n  // ********************************************************************************************************\r\n  //    EVENTS\r\n  // ********************************************************************************************************\r\n  // @dev events to catch with web3/js\r\n  // ********************************************************************************************************\r\n\r\n  /// @dev The NewPlayerCreated event is fired whenever a new Player comes into existence.\r\n  event NewPlayerCreated(uint256 tokenId, uint256 id, string prename, string surname, address owner, uint256 price);\r\n\r\n  /// @dev The PlayerWasSold event is fired whenever a token is sold.\r\n  event PlayerWasSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string prename, string surname);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  ownership is assigned, including NewPlayerCreateds.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  ///@dev Country won a game and all players prices increased by 5%\r\n  event countryWonAndPlayersValueIncreased(string country, string prename, string surname);\r\n\r\n  ///@dev New User has been registered\r\n  event NewUserRegistered(string userName);\r\n\r\n  // ********************************************************************************************************\r\n  // Constants\r\n  // ********************************************************************************************************\r\n  // @dev Definition of constants\r\n  // ********************************************************************************************************\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CryptoWorldCup\";\r\n  string public constant SYMBOL = \"CryptoWorldCupToken\";\r\n\r\n  //@dev network fee address\r\n  address private netFee = 0x5e02f153d571C1FBB6851928975079812DF4c8cd;\r\n\r\n  //@dev ether value to calculate the int-value prices\r\n  uint256 public myFinneyValue =  100 finney;\r\n  uint256 public myWeiValue = 1 wei;\r\n\r\n  // presale boolean to enable selling\r\n  bool public presaleIsRunning;\r\n\r\n   uint256 public currentwealth;\r\n\r\n   // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n\r\n  // ********************************************************************************************************\r\n  // Tracking Variables\r\n  // ********************************************************************************************************\r\n  // @dev Needed for smoother web3 calls\r\n  // ********************************************************************************************************\r\n  uint256 public totalTxVolume = 0;\r\n  uint256 public totalContractsAvailable = 0;\r\n  uint256 public totalContractHolders = 0;\r\n  uint256 public totalUsers = 0;\r\n\r\n  // ********************************************************************************************************\r\n  // Storage\r\n  // ********************************************************************************************************\r\n  // @dev Mappings for easier access\r\n  // ********************************************************************************************************\r\n\r\n  /// @dev A mapping from Player IDs to the address that owns them. All Players have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public PlayerIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from PlayerIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Player can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public PlayerIndexToApproved;\r\n\r\n  // @dev A mapping from PlayerIDs to the price of the token.\r\n  mapping (uint256 => uint256) private PlayerIndexToPrice;\r\n  mapping (uint256 => uint256) private PlayerInternalIndexToGlobalIndex;\r\n\r\n  //@dev A mapping from the UserIDs to the usernames.\r\n  mapping (uint256 => address) private UserIDsToWallet;\r\n  mapping (uint256 => string) private UserIDToUsername;\r\n  mapping (address => uint256) private UserWalletToID;\r\n  mapping (address => bool) private isUser;\r\n\r\n  mapping (address => uint256) private addressWealth;\r\n\r\n  mapping (address => bool) blacklist;\r\n\r\n  mapping (uint256 => PlayerIDs) PlayerIDsToUniqueID;\r\n\r\n  // ********************************************************************************************************\r\n  // Individual datatypes\r\n  // ********************************************************************************************************\r\n  // @dev Structs to generate specific datatypes\r\n  // ********************************************************************************************************\r\n  struct Player {\r\n    uint256 id;\r\n    uint256 countryId;\r\n    string country;\r\n    string surname;\r\n    string middlename;\r\n    string prename;\r\n    string position;\r\n    uint256 age;\r\n    uint64 offensive;\r\n    uint64 defensive;\r\n    uint64 totalRating;\r\n    uint256 price;\r\n    string pictureUrl;\r\n    string flagUrl;\r\n  }\r\n\r\n  Player[] private players;\r\n\r\n  struct User{\r\n    uint256 id;\r\n    address userAddress;\r\n    string userName;\r\n  }\r\n\r\n  User[] private users;\r\n\r\n  struct PlayerIDs {\r\n        uint256 id;\r\n        uint256 countryId;\r\n  }\r\n\r\n  PlayerIDs[] public PlayerIDsArrayForMapping;\r\n\r\n  // ********************************************************************************************************\r\n  // Access modifiers\r\n  // ********************************************************************************************************\r\n  // @dev No need for the same require anymore\r\n  // ********************************************************************************************************\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyDuringPresale(){\r\n      require(presaleIsRunning);\r\n      _;\r\n  }\r\n\r\n  // ********************************************************************************************************\r\n  // Constructor & Needed stuff\r\n  // ********************************************************************************************************\r\n  // @dev Called exactly once during the creation of the contract\r\n  // ********************************************************************************************************\r\n  constructor() public {\r\n    presaleIsRunning = true;\r\n    ceoAddress = msg.sender;\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  // ********************************************************************************************************\r\n  // ONLYCEO FUNKTIONS\r\n  // ********************************************************************************************************\r\n  // @dev All functions that are only executable by the owner of the contract\r\n  // ********************************************************************************************************\r\n\r\n  function endPresale() public onlyCEO{\r\n    require(presaleIsRunning == true);\r\n    presaleIsRunning = false;\r\n  }\r\n\r\n\r\n  function blackListUser(address _address) public onlyCEO{\r\n      blacklist[_address] = true;\r\n  }\r\n\r\n  function deleteUser(address _address) public onlyCEO{\r\n\r\n      uint256 userID = getUserIDByWallet(_address) + 1;\r\n      delete users[userID];\r\n\r\n      isUser[_address] = false;\r\n\r\n      uint256 userIDForMappings = UserWalletToID[_address];\r\n\r\n     delete UserIDsToWallet[userIDForMappings];\r\n     delete UserIDToUsername[userIDForMappings];\r\n     delete UserWalletToID[_address];\r\n\r\n      totalUsers = totalUsers - 1;\r\n  }\r\n\r\n  function payout(address _to) public onlyCEO {\r\n    _payout(_to);\r\n  }\r\n\r\n  // ********************************************************************************************************\r\n  // ONLYCEO FUNCTIONS\r\n  // ********************************************************************************************************\r\n  // @dev All functions that are only executable by the owner of the contract\r\n  // PLAYER CREATIN RELATED\r\n  // ********************************************************************************************************\r\n\r\n  function createPlayer(uint256 _id, uint256 _countryId, string _country, string _prename, string _middlename, string _surname, string _pictureUrl, string _flagUrl, address _owner, uint256 _price) public onlyCEO onlyDuringPresale{\r\n\r\n    uint256 newPrice = SafeMath.mul(_price, myFinneyValue);\r\n\r\n    Player memory _player = Player({\r\n     id: _id,\r\n     countryId: _countryId,\r\n     country: _country,\r\n     surname: _surname,\r\n     middlename: _middlename,\r\n     prename: _prename,\r\n     price: newPrice,\r\n     pictureUrl: _pictureUrl,\r\n     flagUrl: _flagUrl,\r\n     position: \"\",\r\n     age: 0,\r\n     offensive: 0,\r\n     defensive: 0,\r\n     totalRating: 0\r\n    });\r\n\r\n    uint256 newPlayerId = players.push(_player) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newPlayerId == uint256(uint32(newPlayerId)));\r\n\r\n    emit NewPlayerCreated(newPlayerId, newPlayerId, _prename, _surname, _owner, _price);\r\n\r\n    addMappingForPlayerIDs (newPlayerId, _id, _countryId );\r\n\r\n    PlayerIndexToPrice[newPlayerId] = newPrice;\r\n    PlayerInternalIndexToGlobalIndex[newPlayerId] = newPlayerId;\r\n\r\n    currentwealth =   addressWealth[_owner];\r\n    addressWealth[_owner] = currentwealth + newPrice;\r\n\r\n    totalTxVolume = totalTxVolume + newPrice;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newPlayerId);\r\n\r\n    totalContractsAvailable = totalContractsAvailable;\r\n\r\n    if(numberOfTokensOfOwner(_owner) == 0 || numberOfTokensOfOwner(_owner) == 1){\r\n        totalContractHolders = totalContractHolders + 1;\r\n    }\r\n  }\r\n\r\n  function deletePlayer (uint256 _uniqueID) public onlyCEO{\r\n      uint256 arrayPos = _uniqueID + 1;\r\n      address _owner = PlayerIndexToOwner[_uniqueID];\r\n\r\n      currentwealth =   addressWealth[_owner];\r\n    addressWealth[_owner] = currentwealth + priceOf(_uniqueID);\r\n\r\n    totalContractsAvailable = totalContractsAvailable - 1;\r\n\r\n    if(numberOfTokensOfOwner(_owner) != 0 || numberOfTokensOfOwner(_owner) == 1){\r\n        totalContractHolders = totalContractHolders - 1;\r\n    }\r\n\r\n      delete players[arrayPos];\r\n      delete PlayerIndexToOwner[_uniqueID];\r\n      delete PlayerIndexToPrice[_uniqueID];\r\n\r\n  }\r\n\r\n  function adjustPriceOfCountryPlayersAfterWin(uint256 _tokenId) public onlyCEO {\r\n    uint256 _price = SafeMath.mul(105, SafeMath.div(players[_tokenId].price, 100));\r\n    uint256 playerInternalIndex = _tokenId;\r\n    uint256 playerGlobalIndex = PlayerInternalIndexToGlobalIndex[playerInternalIndex];\r\n    PlayerIndexToPrice[playerGlobalIndex] = _price;\r\n\r\n    emit countryWonAndPlayersValueIncreased(players[_tokenId].country, players[_tokenId].prename, players[_tokenId].surname);\r\n  }\r\n\r\n  function adjustPriceAndOwnerOfPlayerDuringPresale(uint256 _tokenId, address _newOwner, uint256 _newPrice) public onlyCEO{\r\n    require(presaleIsRunning);\r\n    _newPrice = SafeMath.mul(_newPrice, myFinneyValue);\r\n    PlayerIndexToPrice[_tokenId] = _newPrice;\r\n    PlayerIndexToOwner[_tokenId] = _newOwner;\r\n  }\r\n\r\n  function addPlayerData(uint256 _playerId, uint256 _countryId, string _position, uint256 _age, uint64 _offensive, uint64 _defensive, uint64 _totalRating) public onlyCEO{\r\n\r\n       uint256 _id = getIDMapping(_playerId, _countryId);\r\n\r\n       players[_id].position = _position;\r\n       players[_id].age = _age;\r\n       players[_id].offensive = _offensive;\r\n       players[_id].defensive = _defensive;\r\n       players[_id].totalRating = _totalRating;\r\n    }\r\n\r\n\r\n    function addMappingForPlayerIDs (uint256 _uniquePlayerId, uint256 _playerId, uint256 _countryId ) private{\r\n\r\n        PlayerIDs memory _playerIdStruct = PlayerIDs({\r\n            id: _playerId,\r\n            countryId: _countryId\r\n        });\r\n\r\n        PlayerIDsArrayForMapping.push(_playerIdStruct)-1;\r\n\r\n        PlayerIDsToUniqueID[_uniquePlayerId] = _playerIdStruct;\r\n\r\n    }\r\n\r\n  // ********************************************************************************************************\r\n  // Helper FUNCTIONS\r\n  // ********************************************************************************************************\r\n  // @dev All functions that make our life easier\r\n  // ********************************************************************************************************\r\n\r\n /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  function isUserBlacklisted(address _address) public view returns (bool){\r\n      return blacklist[_address];\r\n  }\r\n\r\n   function getPlayerFrontDataForMarketPlaceCards(uint256 _tokenId) public view returns (\r\n    uint256 _id,\r\n    uint256 _countryId,\r\n    string _country,\r\n    string _surname,\r\n    string _prename,\r\n    uint256 _sellingPrice,\r\n    string _picUrl,\r\n    string _flagUrl\r\n  ) {\r\n    Player storage player = players[_tokenId];\r\n    _id = player.id;\r\n    _countryId = player.countryId;\r\n    _country = player.country;\r\n    _surname = player.surname;\r\n    _prename = player.prename;\r\n    _sellingPrice = PlayerIndexToPrice[_tokenId];\r\n    _picUrl = player.pictureUrl;\r\n    _flagUrl = player.flagUrl;\r\n\r\n    return (_id, _countryId, _country, _surname, _prename, _sellingPrice, _picUrl, _flagUrl);\r\n\r\n  }\r\n\r\n    function getPlayerBackDataForMarketPlaceCards(uint256 _tokenId) public view returns (\r\n    uint256 _id,\r\n    uint256 _countryId,\r\n    string _country,\r\n    string _surname,\r\n    string _prename,\r\n    string _position,\r\n    uint256 _age,\r\n    uint64 _offensive,\r\n    uint64 _defensive,\r\n    uint64 _totalRating\r\n  ) {\r\n    Player storage player = players[_tokenId];\r\n    _id = player.id;\r\n    _countryId = player.countryId;\r\n    _country = player.country;\r\n    _surname = player.surname;\r\n    _prename = player.prename;\r\n    _age = player.age;\r\n\r\n    _position = player.position;\r\n    _offensive = player.offensive;\r\n    _defensive = player.defensive;\r\n    _totalRating = player.totalRating;\r\n\r\n    return (_id, _countryId, _country, _surname, _prename, _position, _age, _offensive,_defensive, _totalRating);\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = PlayerIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return PlayerIndexToPrice[_tokenId];\r\n  }\r\n\r\n  function calcNetworkFee(uint256 _tokenId) public view returns (uint256 networkFee) {\r\n    uint256 price = PlayerIndexToPrice[_tokenId];\r\n    networkFee = SafeMath.div(price, 100);\r\n    return networkFee;\r\n  }\r\n\r\n  function getLeaderBoardData(address _owner)public view returns (address _user, uint256 _token, uint _wealth){\r\n      _user = _owner;\r\n      _token = numberOfTokensOfOwner(_owner);\r\n      _wealth = getWealthOfUser(_owner);\r\n      return (_user, _token, _wealth);\r\n  }\r\n\r\n  // ********************************************************************************************************\r\n  // GETTER FUNCTIONS\r\n  // ********************************************************************************************************\r\n  // @dev All functions that get us stuff\r\n  // ********************************************************************************************************\r\n\r\n  function getUserByID(uint256 _id) public view returns (address _wallet, string _username){\r\n    _username = UserIDToUsername[_id];\r\n    _wallet = UserIDsToWallet[_id];\r\n    return (_wallet, _username);\r\n  }\r\n\r\n   function getUserWalletByID(uint256 _id) public view returns (address _wallet){\r\n    _wallet = UserIDsToWallet[_id];\r\n    return (_wallet);\r\n  }\r\n\r\n  function getUserNameByWallet(address _wallet) public view returns (string _username){\r\n    require(isAlreadyUser(_wallet));\r\n    uint256 _id = UserWalletToID[_wallet];\r\n    _username = UserIDToUsername[_id];\r\n    return _username;\r\n  }\r\n\r\n  function getUserIDByWallet(address _wallet) public view returns (uint256 _id){\r\n    _id = UserWalletToID[_wallet];\r\n    return _id;\r\n  }\r\n\r\n  function getUniqueIdOfPlayerByPlayerAndCountryID(uint256 _tokenId) public view returns (uint256 id){\r\n      uint256 idOfPlyaer = players[_tokenId].id;\r\n      return idOfPlyaer;\r\n  }\r\n\r\n  function getIDMapping (uint256 _playerId, uint256 _countryId) public view returns (uint256 _uniqueId){\r\n\r\n        for (uint64 x=0; x<totalSupply(); x++){\r\n            PlayerIDs memory _player = PlayerIDsToUniqueID[x];\r\n            if(_player.id == _playerId && _player.countryId == _countryId){\r\n                _uniqueId = x;\r\n            }\r\n        }\r\n\r\n        return _uniqueId;\r\n   }\r\n\r\n  function getWealthOfUser(address _address) private view returns (uint256 _wealth){\r\n    return addressWealth[_address];\r\n  }\r\n\r\n  // ********************************************************************************************************\r\n  // PURCHASE FUNCTIONS\r\n  // ********************************************************************************************************\r\n  // @dev Purchase related stuff\r\n  // ********************************************************************************************************\r\n\r\n  function adjustAddressWealthOnSale(uint256 _tokenId, address _oldOwner, address _newOwner,uint256 _sellingPrice) private {\r\n        uint256 currentOldOwnerWealth = addressWealth[_oldOwner];\r\n        uint256 currentNewOwnerWealth = addressWealth[_newOwner];\r\n        addressWealth[_oldOwner] = currentOldOwnerWealth - _sellingPrice;\r\n        addressWealth[_newOwner] = currentNewOwnerWealth + PlayerIndexToPrice[_tokenId];\r\n    }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  // HAS TOBE AMENDED SO THE FEE WILL SPLIT BETWEEN\r\n  // 1. THE CURRENT OWNER OF THE CONTRACT\r\n  // 2. THE PRIOR OWNERS OF THE CONTRACT\r\n  // 3. (OPTIONAL) THE NETWORK FEE - BUT COULD BE OBSOLETE, IF WE ARE THE VERY FIRST OWNER OF EVERY CONTRACT\r\n  function purchase(uint256 _tokenId) public payable {\r\n\r\n    //check if presale is still running\r\n    require(presaleIsRunning == false);\r\n\r\n    address oldOwner = PlayerIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = PlayerIndexToPrice[_tokenId];\r\n    uint256 payment = SafeMath.mul(99,(SafeMath.div(PlayerIndexToPrice[_tokenId],100)));\r\n    uint256 networkFee  = calcNetworkFee(_tokenId);\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    PlayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 110), 100);\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.06)\r\n    }\r\n\r\n    emit PlayerWasSold(_tokenId, sellingPrice, PlayerIndexToPrice[_tokenId], oldOwner, newOwner, players[_tokenId].prename, players[_tokenId].surname);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n\r\n    //send network fee\r\n    netFee.transfer(networkFee);\r\n\r\n    totalTxVolume = totalTxVolume + msg.value;\r\n\r\n    if(numberOfTokensOfOwner(msg.sender) == 1){\r\n        totalContractHolders = totalContractHolders + 1;\r\n    }\r\n\r\n    if(numberOfTokensOfOwner(oldOwner) == 0){\r\n        totalContractHolders = totalContractHolders - 1;\r\n    }\r\n\r\n    adjustAddressWealthOnSale(_tokenId, oldOwner, newOwner,sellingPrice);\r\n\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = PlayerIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Players array looking for Players belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalPlayers = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 PlayerId;\r\n      for (PlayerId = 0; PlayerId <= totalPlayers; PlayerId++) {\r\n        if (PlayerIndexToOwner[PlayerId] == _owner) {\r\n          result[resultIndex] = PlayerId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function numberOfTokensOfOwner(address _owner) private view returns(uint256 numberOfTokens){\r\n      return tokensOfOwner(_owner).length;\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return players.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  // ********************************************************************************************************\r\n  // USER FUNCTIONS\r\n  // ********************************************************************************************************\r\n  // @dev User related stuff\r\n  // ********************************************************************************************************\r\n /// For creating players\r\n\r\n  function createNewUser(address _address, string _username) public {\r\n\r\n    require(!blacklist[_address]);\r\n    require(!isAlreadyUser(_address));\r\n\r\n    uint256 userIdForMapping = users.length;\r\n\r\n    User memory _user = User({\r\n      id: userIdForMapping,\r\n      userAddress: _address,\r\n      userName: _username\r\n    });\r\n\r\n\r\n    uint256 newUserId = users.push(_user) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newUserId == uint256(uint32(newUserId)));\r\n\r\n    emit NewUserRegistered(_username);\r\n\r\n    UserIDsToWallet[userIdForMapping] = _address;\r\n    UserIDToUsername[userIdForMapping] = _username;\r\n    UserWalletToID[_address] = userIdForMapping;\r\n    isUser[_address] = true;\r\n\r\n    totalUsers = totalUsers + 1;\r\n  }\r\n\r\n  function isAlreadyUser(address _address) public view returns (bool status){\r\n    if (isUser[_address]){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n\r\n  // ********************************************************************************************************\r\n  //FIX FUNKTIONS\r\n  // ********************************************************************************************************\r\n  // @dev possibility to adjust single data fields of players during presale\r\n  // ********************************************************************************************************\r\n\r\n    function fixPlayerID(uint256 _uniqueID, uint256 _playerID) public onlyCEO onlyDuringPresale{\r\n        players[_uniqueID].id = _playerID;\r\n    }\r\n\r\n      function fixPlayerCountryId(uint256 _uniqueID, uint256 _countryID) public onlyCEO onlyDuringPresale{\r\n        players[_uniqueID].countryId = _countryID;\r\n    }\r\n\r\n    function fixPlayerCountryString(uint256 _uniqueID, string _country) public onlyCEO onlyDuringPresale{\r\n        players[_uniqueID].country = _country;\r\n    }\r\n\r\n    function fixPlayerPrename(uint256 _uniqueID, string _prename) public onlyCEO onlyDuringPresale{\r\n        players[_uniqueID].prename = _prename;\r\n    }\r\n\r\n    function fixPlayerMiddlename(uint256 _uniqueID, string _middlename) public onlyCEO onlyDuringPresale{\r\n         players[_uniqueID].middlename = _middlename;\r\n    }\r\n\r\n    function fixPlayerSurname(uint256 _uniqueID, string _surname) public onlyCEO onlyDuringPresale{\r\n         players[_uniqueID].surname = _surname;\r\n    }\r\n\r\n    function fixPlayerFlag(uint256 _uniqueID, string _flag) public onlyCEO onlyDuringPresale{\r\n         players[_uniqueID].flagUrl = _flag;\r\n    }\r\n\r\n    function fixPlayerGraphic(uint256 _uniqueID, string _pictureUrl) public onlyCEO onlyDuringPresale{\r\n         players[_uniqueID].pictureUrl = _pictureUrl;\r\n    }\r\n\r\n\r\n\r\n  // ********************************************************************************************************\r\n  // LEGACY FUNCTIONS\r\n  // ********************************************************************************************************\r\n  // @dev\r\n  // ********************************************************************************************************\r\n /// For creating players\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    PlayerIndexToApproved[_tokenId] = _to;\r\n\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return PlayerIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == PlayerIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n        ceoAddress.transfer(address(this).balance);\r\n    } else {\r\n      _to.transfer(address(this).balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Player to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of Players is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    PlayerIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new Players _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete PlayerIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserWalletByID\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_prename\",\"type\":\"string\"}],\"name\":\"fixPlayerPrename\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PlayerIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blackListUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_pictureUrl\",\"type\":\"string\"}],\"name\":\"fixPlayerGraphic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_country\",\"type\":\"string\"}],\"name\":\"fixPlayerCountryString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTxVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_flag\",\"type\":\"string\"}],\"name\":\"fixPlayerFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerFrontDataForMarketPlaceCards\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_surname\",\"type\":\"string\"},{\"name\":\"_prename\",\"type\":\"string\"},{\"name\":\"_sellingPrice\",\"type\":\"uint256\"},{\"name\":\"_picUrl\",\"type\":\"string\"},{\"name\":\"_flagUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleIsRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"calcNetworkFee\",\"outputs\":[{\"name\":\"networkFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PlayerIDsArrayForMapping\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"countryId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUniqueIdOfPlayerByPlayerAndCountryID\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isUserBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerBackDataForMarketPlaceCards\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_surname\",\"type\":\"string\"},{\"name\":\"_prename\",\"type\":\"string\"},{\"name\":\"_position\",\"type\":\"string\"},{\"name\":\"_age\",\"type\":\"uint256\"},{\"name\":\"_offensive\",\"type\":\"uint64\"},{\"name\":\"_defensive\",\"type\":\"uint64\"},{\"name\":\"_totalRating\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"adjustPriceAndOwnerOfPlayerDuringPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentwealth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserByID\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_prename\",\"type\":\"string\"},{\"name\":\"_middlename\",\"type\":\"string\"},{\"name\":\"_surname\",\"type\":\"string\"},{\"name\":\"_pictureUrl\",\"type\":\"string\"},{\"name\":\"_flagUrl\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"}],\"name\":\"deletePlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"fixPlayerID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myFinneyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAlreadyUser\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContractsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserNameByWallet\",\"outputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWeiValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"createNewUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"adjustPriceOfCountryPlayersAfterWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"string\"},{\"name\":\"_age\",\"type\":\"uint256\"},{\"name\":\"_offensive\",\"type\":\"uint64\"},{\"name\":\"_defensive\",\"type\":\"uint64\"},{\"name\":\"_totalRating\",\"type\":\"uint64\"}],\"name\":\"addPlayerData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserIDByWallet\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContractHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PlayerIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_surname\",\"type\":\"string\"}],\"name\":\"fixPlayerSurname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLeaderBoardData\",\"outputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_wealth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_countryID\",\"type\":\"uint256\"}],\"name\":\"fixPlayerCountryId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"getIDMapping\",\"outputs\":[{\"name\":\"_uniqueId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniqueID\",\"type\":\"uint256\"},{\"name\":\"_middlename\",\"type\":\"string\"}],\"name\":\"fixPlayerMiddlename\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prename\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"surname\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPlayerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prename\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"surname\",\"type\":\"string\"}],\"name\":\"PlayerWasSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"country\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"prename\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"surname\",\"type\":\"string\"}],\"name\":\"countryWonAndPlayersValueIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"NewUserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoWorldCupToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6903033547a35bd815333fa4a1eff7318a96daf9dde5a023e52af4e1979f0ab2"}]}