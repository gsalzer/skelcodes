{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n//  (;´д`)｡･ﾟﾟ･  SCAM penis\r\n//  (ヽηﾉ \r\n//  　ヽ ヽ\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n\r\n      c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      // uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address & authorized addresses, and provides basic\r\n * authorization control functions, this simplifies the implementation of user permissions.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    bool public canRenounce = false;\r\n    mapping (address => bool) public authorized;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AuthorizedAdded(address indexed authorized);\r\n    event AuthorizedRemoved(address indexed authorized);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     */\r\n    constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the authorized or owner.\r\n     */\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == owner || authorized[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     */\r\n    function enableRenounceOwnership() onlyOwner public {\r\n      canRenounce = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n      if(!canRenounce){\r\n        require(_newOwner != address(0));\r\n      }\r\n      emit OwnershipTransferred(owner, _newOwner);\r\n      owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds authorized to execute several functions to subOwner.\r\n     * @param _authorized The address to add authorized to.\r\n     */\r\n\r\n    function addAuthorized(address _authorized) onlyOwner public {\r\n      authorized[_authorized] = true;\r\n      emit AuthorizedAdded(_authorized);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes authorized to execute several functions from subOwner.\r\n     * @param _authorized The address to remove authorized from.\r\n     */\r\n\r\n    function removeAuthorized(address _authorized) onlyOwner public {\r\n      authorized[_authorized] = false;\r\n      emit AuthorizedRemoved(_authorized);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC223\r\n * @dev ERC223 contract interface with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\r\n */\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n\r\n    // ERC223 and ERC20 functions and events\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ContractReceiver\r\n * @dev Contract that is working with ERC223 tokens\r\n */\r\ncontract ContractReceiver {\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title MANJ\r\n * @dev MANJCOIN is an ERC223 Token with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n */\r\ncontract MANJ is ERC223, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"MANJCOIN\";\r\n    string public symbol = \"MANJ\";\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply = 19190721 * 1e8;\r\n    uint256 public codeSize = 0;\r\n    bool public mintingFinished = false;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public cannotSend;\r\n    mapping (address => bool) public cannotReceive;\r\n    mapping (address => uint256) public cannotSendUntil;\r\n    mapping (address => uint256) public cannotReceiveUntil;\r\n\r\n    event FrozenFunds(address indexed target, bool cannotSend, bool cannotReceive);\r\n    event LockedFunds(address indexed target, uint256 cannotSendUntil, uint256 cannotReceiveUntil);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    /**\r\n     * @dev Constructor is called only once and can not be called again\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens\r\n     * @param targets Addresses to be frozen\r\n     * @param _cannotSend Whether to prevent targets from sending tokens or not\r\n     * @param _cannotReceive Whether to prevent targets from receiving tokens or not\r\n     */\r\n    function freezeAccounts(address[] targets, bool _cannotSend, bool _cannotReceive) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            cannotSend[targets[i]] = _cannotSend;\r\n            cannotReceive[targets[i]] = _cannotReceive;\r\n            emit FrozenFunds(targets[i], _cannotSend, _cannotReceive);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens by setting Unix time\r\n     * @param targets Addresses to be locked funds\r\n     * @param _cannotSendUntil Unix time when locking up sending function will be finished\r\n     * @param _cannotReceiveUntil Unix time when locking up receiving function will be finished\r\n     */\r\n    function lockupAccounts(address[] targets, uint256 _cannotSendUntil, uint256 _cannotReceiveUntil) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for(uint i = 0; i < targets.length; i++){\r\n            require(cannotSendUntil[targets[i]] <= _cannotSendUntil\r\n                    && cannotReceiveUntil[targets[i]] <= _cannotReceiveUntil);\r\n\r\n            cannotSendUntil[targets[i]] = _cannotSendUntil;\r\n            cannotReceiveUntil[targets[i]] = _cannotReceiveUntil;\r\n            emit LockedFunds(targets[i], _cannotSendUntil, _cannotReceiveUntil);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function that is called when a user or another contract wants to transfer funds\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        require(_value > 0\r\n                && cannotSend[msg.sender] == false\r\n                && cannotReceive[_to] == false\r\n                && now > cannotSendUntil[msg.sender]\r\n                && now > cannotReceiveUntil[_to]);\r\n\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\r\n     *      Added due to backwards compatibility reasons\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && cannotSend[msg.sender] == false\r\n                && cannotReceive[_to] == false\r\n                && now > cannotSendUntil[msg.sender]\r\n                && now > cannotReceiveUntil[_to]);\r\n\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the target address is a contract\r\n     * @param _addr address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address _addr) internal view returns (bool) {\r\n      uint256 size;\r\n      assembly { size := extcodesize(_addr) }\r\n      return size > codeSize ;\r\n    }\r\n\r\n    function setCodeSize(uint256 _codeSize) onlyOwner public {\r\n        codeSize = _codeSize;\r\n    }\r\n\r\n    // function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balanceOf[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && cannotSend[msg.sender] == false\r\n                && cannotReceive[_to] == false\r\n                && now > cannotSendUntil[msg.sender]\r\n                && now > cannotReceiveUntil[_to]);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _owner address The address which owns the funds\r\n     * @param _spender address The address which will spend the funds\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _from The address that will burn the tokens.\r\n     * @param _unitAmount The amount of token to be burned.\r\n     */\r\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\r\n        require(_unitAmount > 0\r\n                && balanceOf[_from] >= _unitAmount);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\r\n        totalSupply = totalSupply.sub(_unitAmount);\r\n        emit Burn(_from, _unitAmount);\r\n        emit Transfer(_from, address(0), _unitAmount);\r\n\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _unitAmount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\r\n        require(_unitAmount > 0);\r\n\r\n        totalSupply = totalSupply.add(_unitAmount);\r\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\r\n        emit Mint(_to, _unitAmount);\r\n        emit Transfer(address(0), _to, _unitAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\r\n     */\r\n    function batchTransfer(address[] addresses, uint256 amount) public returns (bool) {\r\n        require(amount > 0\r\n                && addresses.length > 0\r\n                && cannotSend[msg.sender] == false\r\n                && now > cannotSendUntil[msg.sender]);\r\n\r\n        amount = amount.mul(1e8);\r\n        uint256 totalAmount = amount.mul(addresses.length);\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(addresses[i] != address(0)\r\n                    && cannotReceive[addresses[i]] == false\r\n                    && now > cannotReceiveUntil[addresses[i]]);\r\n\r\n            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amount);\r\n            emit Transfer(msg.sender, addresses[i], amount);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function batchTransfer(address[] addresses, uint[] amounts) public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length\r\n                && cannotSend[msg.sender] == false\r\n                && now > cannotSendUntil[msg.sender]);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for(uint i = 0; i < addresses.length; i++){\r\n            require(amounts[i] > 0\r\n                    && addresses[i] != address(0)\r\n                    && cannotReceive[addresses[i]] == false\r\n                    && now > cannotReceiveUntil[addresses[i]]);\r\n\r\n            amounts[i] = amounts[i].mul(1e8);\r\n            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amounts[i]);\r\n            totalAmount = totalAmount.add(amounts[i]);\r\n            emit Transfer(msg.sender, addresses[i], amounts[i]);\r\n        }\r\n\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to transfer tokens between addresses, only for Owner & subOwner\r\n     */\r\n    function transferFromTo(address _from, address _to, uint256 _value, bytes _data) onlyAuthorized public returns (bool) {\r\n        require(_value > 0\r\n                && balanceOf[_from] >= _value\r\n                && cannotSend[_from] == false\r\n                && cannotReceive[_to] == false\r\n                && now > cannotSendUntil[_from]\r\n                && now > cannotReceiveUntil[_to]);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        if(isContract(_to)) {\r\n            ContractReceiver receiver = ContractReceiver(_to);\r\n            receiver.tokenFallback(_from, _value, _data);\r\n        }\r\n        emit Transfer(_from, _to, _value, _data);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFromTo(address _from, address _to, uint256 _value) onlyAuthorized public returns (bool) {\r\n        bytes memory empty;\r\n        return transferFromTo(_from, _to, _value, empty);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy() onlyOwner public {\r\n      selfdestruct(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() payable public {\r\n      revert();\r\n    }\r\n}\r\n\r\n// 　＼　　　　　　　　　　　／ \r\n// 　　＼　　　　　　　　　／ \r\n// 　　　＼　　　　　　　／ \r\n// 　　　　＼　　　　　／ \r\n// 　　　　　＼( ^o^)／　　　うわああああああああああああああ！！！！！！！！！！ \r\n// 　　　　　　│　　│ \r\n// 　　　　　　│　　│　　　　～○～○～○～○～○～○～○ \r\n// 　　　　　　│　　│　　～○～○～○～○～○～○～○～○～○ \r\n// 　　　　　　(　 ω⊃～○～○～○～○～○～○～○～○～○～○～○ \r\n// 　　　　　　／　　＼～○～○～○～○～○～○～○～○～○～○ \r\n// 　　　　　／　　　　＼　～○～○～○～○～○～○～○～○ \r\n// 　　　　／　　　　　　＼ \r\n// 　　　／　　　　　　　　＼","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"codeSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canRenounce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cannotSendUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cannotReceiveUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cannotReceive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"_cannotSendUntil\",\"type\":\"uint256\"},{\"name\":\"_cannotReceiveUntil\",\"type\":\"uint256\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"_cannotSend\",\"type\":\"bool\"},{\"name\":\"_cannotReceive\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cannotSend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_codeSize\",\"type\":\"uint256\"}],\"name\":\"setCodeSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRenounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cannotSend\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"cannotReceive\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cannotSendUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cannotReceiveUntil\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"AuthorizedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"AuthorizedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MANJ","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://59970af00d99163c8e6b38416c2cf755cffdf00e7356da5fedd19eef83af7904"}]}