{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/** SafeMath libs are inspired by:\r\n  *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n  * There is debate as to whether this lib should use assert or require:\r\n  *  https://github.com/OpenZeppelin/zeppelin-solidity/issues/565\r\n\r\n  * `require` is used in these libraries for the following reasons:\r\n  *   - overflows should not be checked in contract function bodies; DRY\r\n  *   - \"valid\" user input can cause overflows, which should not assert()\r\n  */\r\nlibrary SafeMath {\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary SafeMath64 {\r\n  function sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    uint64 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n// https://github.com/ethereum/EIPs/issues/179\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/DetailedERC20.sol\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n/** SolClub has the following properties:\r\n  *\r\n  * Member Creation:\r\n  * - Self-registration\r\n  *   - Owner signs hash(address, username, endowment), and sends to member\r\n  *   - Member registers with username, endowment, and signature to create new account.\r\n  * - Mod creates new member.\r\n  * - Members are first eligible to withdraw dividends for the period after account creation.\r\n  *\r\n  * Karma/Token Rules:\r\n  * - Karma is created by initial member creation endowment.\r\n  * - Karma can also be minted by mod into an existing account.\r\n  * - Karma can only be transferred to existing account holder.\r\n  * - Karma implements the ERC20 token interface.\r\n  *\r\n  * Dividends:\r\n  * - each member can withdraw a dividend once per month.\r\n  * - dividend is total contract value minus owner cut at end of the month, divided by total number of members at end of month.\r\n  * - owner cut is determined at beginning of new period.\r\n  * - member has 1 month to withdraw their dividend from the previous month.\r\n  * - if member does not withdraw their dividend, their share will be given to owner.\r\n  * - mod can place a member on a 1 month \"timeout\", whereby they won't be eligible for a dividend.\r\n\r\n  * Eg: 10 eth is sent to the contract in January, owner cut is 30%. \r\n  * There are 70 token holders on Jan 31. At any time in February, each token holder can withdraw .1 eth for their January \r\n  * dividend (unless they were given a \"timeout\" in January).\r\n  */\r\ncontract SolClub is Ownable, DetailedERC20(\"SolClub\", \"SOL\", 0) {\r\n  // SafeMath libs are responsible for checking overflow.\r\n  using SafeMath for uint256;\r\n  using SafeMath64 for uint64;\r\n\r\n  struct Member {\r\n    bytes20 username;\r\n    uint64 karma; \r\n    uint16 canWithdrawPeriod;\r\n    uint16 birthPeriod;\r\n  }\r\n\r\n  // Manage members.\r\n  mapping(address => Member) public members;\r\n  mapping(bytes20 => address) public usernames;\r\n\r\n  // Manage dividend payments.\r\n  uint256 public epoch; // Timestamp at start of new period.\r\n  uint256 dividendPool; // Total amount of dividends to pay out for last period.\r\n  uint256 public dividend; // Per-member share of last period's dividend.\r\n  uint256 public ownerCut; // Percentage, in basis points, of owner cut of this period's payments.\r\n  uint64 public numMembers; // Number of members created before this period.\r\n  uint64 public newMembers; // Number of members created during this period.\r\n  uint16 public currentPeriod = 1;\r\n\r\n  address public moderator;\r\n\r\n  mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event PeriodEnd(uint16 period, uint256 amount, uint64 members);\r\n  event Payment(address indexed from, uint256 amount);\r\n  event Withdrawal(address indexed to, uint16 indexed period, uint256 amount);\r\n  event NewMember(address indexed addr, bytes20 username, uint64 endowment);\r\n  event RemovedMember(address indexed addr, bytes20 username, uint64 karma, bytes32 reason);\r\n\r\n  modifier onlyMod() {\r\n    require(msg.sender == moderator);\r\n    _;\r\n  }\r\n\r\n  function SolClub() public {\r\n    epoch = now;\r\n    moderator = msg.sender;\r\n  }\r\n\r\n  function() payable public {\r\n    Payment(msg.sender, msg.value);\r\n  }\r\n\r\n  /** \r\n   * Owner Functions \r\n   */\r\n\r\n  function setMod(address _newMod) public onlyOwner {\r\n    moderator = _newMod;\r\n  }\r\n\r\n  // Owner should call this on twice a month.\r\n  // _ownerCut is new owner cut for new period.\r\n  function newPeriod(uint256 _ownerCut) public onlyOwner {\r\n    require(now >= epoch + 15 days);\r\n    require(_ownerCut <= 10000);\r\n\r\n    uint256 unclaimedDividend = dividendPool;\r\n    uint256 ownerRake = (address(this).balance-unclaimedDividend) * ownerCut / 10000;\r\n\r\n    dividendPool = address(this).balance - unclaimedDividend - ownerRake;\r\n\r\n    // Calculate dividend.\r\n    uint64 existingMembers = numMembers;\r\n    if (existingMembers == 0) {\r\n      dividend = 0;\r\n    } else {\r\n      dividend = dividendPool / existingMembers;\r\n    }\r\n\r\n    numMembers = numMembers.add(newMembers);\r\n    newMembers = 0;\r\n    currentPeriod++;\r\n    epoch = now;\r\n    ownerCut = _ownerCut;\r\n\r\n    msg.sender.transfer(ownerRake + unclaimedDividend);\r\n    PeriodEnd(currentPeriod-1, this.balance, existingMembers);\r\n  }\r\n\r\n  // Places member is a \"banished\" state whereby they are no longer a member,\r\n  // but their username remains active (preventing re-registration)\r\n  function removeMember(address _addr, bytes32 _reason) public onlyOwner {\r\n    require(members[_addr].birthPeriod != 0);\r\n    Member memory m = members[_addr];\r\n\r\n    totalSupply = totalSupply.sub(m.karma);\r\n    if (m.birthPeriod == currentPeriod) {\r\n      newMembers--;\r\n    } else {\r\n      numMembers--;\r\n    }\r\n\r\n    // \"Burns\" username, so user can't recreate.\r\n    usernames[m.username] = address(0x1);\r\n\r\n    delete members[_addr];\r\n    RemovedMember(_addr, m.username, m.karma, _reason);\r\n  }\r\n\r\n  // Place a username back into circulation for re-registration.\r\n  function deleteUsername(bytes20 _username) public onlyOwner {\r\n    require(usernames[_username] == address(0x1));\r\n    delete usernames[_username];\r\n  }\r\n\r\n  /**\r\n    * Mod Functions\r\n    */\r\n\r\n  function createMember(address _addr, bytes20 _username, uint64 _amount) public onlyMod {\r\n    newMember(_addr, _username, _amount);\r\n  }\r\n\r\n  // Send karma to existing account.\r\n  function mint(address _addr, uint64 _amount) public onlyMod {\r\n    require(members[_addr].canWithdrawPeriod != 0);\r\n\r\n    members[_addr].karma = members[_addr].karma.add(_amount);\r\n    totalSupply = totalSupply.add(_amount);\r\n    Mint(_addr, _amount);\r\n  }\r\n\r\n  // If a member has been bad, they won't be able to receive a dividend :(\r\n  function timeout(address _addr) public onlyMod {\r\n    require(members[_addr].canWithdrawPeriod != 0);\r\n\r\n    members[_addr].canWithdrawPeriod = currentPeriod + 1;\r\n  }\r\n\r\n  /**\r\n    * Member Functions\r\n    */\r\n\r\n  // Owner will sign hash(address, username, amount), and address owner uses this \r\n  // signature to register their account.\r\n  function register(bytes20 _username, uint64 _endowment, bytes _sig) public {\r\n    require(recover(keccak256(msg.sender, _username, _endowment), _sig) == owner);\r\n    newMember(msg.sender, _username, _endowment);\r\n  }\r\n\r\n  // Member can withdraw their share of donations from the previous month.\r\n  function withdraw() public {\r\n    require(members[msg.sender].canWithdrawPeriod != 0);\r\n    require(members[msg.sender].canWithdrawPeriod < currentPeriod);\r\n\r\n    members[msg.sender].canWithdrawPeriod = currentPeriod;\r\n    dividendPool -= dividend;\r\n    msg.sender.transfer(dividend);\r\n    Withdrawal(msg.sender, currentPeriod-1, dividend);\r\n  }\r\n\r\n  /**\r\n    * ERC20 Functions\r\n    */\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return members[_owner].karma;\r\n  }\r\n\r\n  // Contrary to most ERC20 implementations, require that recipient is existing member.\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(members[_to].canWithdrawPeriod != 0);\r\n    require(_value <= members[msg.sender].karma);\r\n\r\n    // Type assertion to uint64 is safe because we require that _value is < uint64 above.\r\n    members[msg.sender].karma = members[msg.sender].karma.sub(uint64(_value));\r\n    members[_to].karma = members[_to].karma.add(uint64(_value));\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  // Contrary to most ERC20 implementations, require that recipient is existing member.\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(members[_to].canWithdrawPeriod != 0);\r\n    require(_value <= members[_from].karma);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    members[_from].karma = members[_from].karma.sub(uint64(_value));\r\n    members[_to].karma = members[_to].karma.add(uint64(_value));\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * Private Functions\r\n    */\r\n\r\n  // Ensures that username isn't taken, and account doesn't already exist for\r\n  // member's address.\r\n  function newMember(address _addr, bytes20 _username, uint64 _endowment) private {\r\n    require(usernames[_username] == address(0));\r\n    require(members[_addr].canWithdrawPeriod == 0);\r\n\r\n    members[_addr].canWithdrawPeriod = currentPeriod + 1;\r\n    members[_addr].birthPeriod = currentPeriod;\r\n    members[_addr].karma = _endowment;\r\n    members[_addr].username = _username;\r\n    usernames[_username] = _addr;\r\n\r\n    newMembers = newMembers.add(1);\r\n    totalSupply = totalSupply.add(_endowment);\r\n    NewMember(_addr, _username, _endowment);\r\n  }\r\n\r\n  // https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ECRecovery.sol\r\n  function recover(bytes32 hash, bytes sig) internal pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"username\",\"type\":\"bytes20\"},{\"name\":\"karma\",\"type\":\"uint64\"},{\"name\":\"canWithdrawPeriod\",\"type\":\"uint16\"},{\"name\":\"birthPeriod\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerCut\",\"type\":\"uint256\"}],\"name\":\"newPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"bytes20\"}],\"name\":\"deleteUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMod\",\"type\":\"address\"}],\"name\":\"setMod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"timeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"usernames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"bytes20\"},{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"createMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"bytes20\"},{\"name\":\"_endowment\",\"type\":\"uint64\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"period\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"members\",\"type\":\"uint64\"}],\"name\":\"PeriodEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"period\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"endowment\",\"type\":\"uint64\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"karma\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"bytes32\"}],\"name\":\"RemovedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SolClub","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a75c266d935067724fa53718d2b2860e61653ff092dc00f096dc40c5868ca00"}]}