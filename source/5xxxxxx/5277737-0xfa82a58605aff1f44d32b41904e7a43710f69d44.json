{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract FishbankUtils is Ownable {\r\n\r\n    uint32[100] cooldowns = [\r\n        720 minutes, 720 minutes, 720 minutes, 720 minutes, 720 minutes, //1-5\r\n        660 minutes, 660 minutes, 660 minutes, 660 minutes, 660 minutes, //6-10\r\n        600 minutes, 600 minutes, 600 minutes, 600 minutes, 600 minutes, //11-15\r\n        540 minutes, 540 minutes, 540 minutes, 540 minutes, 540 minutes, //16-20\r\n        480 minutes, 480 minutes, 480 minutes, 480 minutes, 480 minutes, //21-25\r\n        420 minutes, 420 minutes, 420 minutes, 420 minutes, 420 minutes, //26-30\r\n        360 minutes, 360 minutes, 360 minutes, 360 minutes, 360 minutes, //31-35\r\n        300 minutes, 300 minutes, 300 minutes, 300 minutes, 300 minutes, //36-40\r\n        240 minutes, 240 minutes, 240 minutes, 240 minutes, 240 minutes, //41-45\r\n        180 minutes, 180 minutes, 180 minutes, 180 minutes, 180 minutes, //46-50\r\n        120 minutes, 120 minutes, 120 minutes, 120 minutes, 120 minutes, //51-55\r\n        90 minutes,  90 minutes,  90 minutes,  90 minutes,  90 minutes,  //56-60\r\n        75 minutes,  75 minutes,  75 minutes,  75 minutes,  75 minutes,  //61-65\r\n        60 minutes,  60 minutes,  60 minutes,  60 minutes,  60 minutes,  //66-70\r\n        50 minutes,  50 minutes,  50 minutes,  50 minutes,  50 minutes,  //71-75\r\n        40 minutes,  40 minutes,  40 minutes,  40 minutes,  40 minutes,  //76-80\r\n        30 minutes,  30 minutes,  30 minutes,  30 minutes,  30 minutes,  //81-85\r\n        20 minutes,  20 minutes,  20 minutes,  20 minutes,  20 minutes,  //86-90\r\n        10 minutes,  10 minutes,  10 minutes,  10 minutes,  10 minutes,  //91-95\r\n        5 minutes,   5 minutes,   5 minutes,   5 minutes,   5 minutes    //96-100\r\n    ];\r\n\r\n\r\n    function setCooldowns(uint32[100] _cooldowns) onlyOwner public {\r\n        cooldowns = _cooldowns;\r\n    }\r\n\r\n    function getFishParams(uint256 hashSeed1, uint256 hashSeed2, uint256 fishesLength, address coinbase) external pure returns (uint32[4]) {\r\n\r\n        bytes32[5] memory hashSeeds;\r\n        hashSeeds[0] = keccak256(hashSeed1 ^ hashSeed2); //xor both seed from owner and user so no one can cheat\r\n        hashSeeds[1] = keccak256(hashSeeds[0], fishesLength);\r\n        hashSeeds[2] = keccak256(hashSeeds[1], coinbase);\r\n        hashSeeds[3] = keccak256(hashSeeds[2], coinbase, fishesLength);\r\n        hashSeeds[4] = keccak256(hashSeeds[1], hashSeeds[2], hashSeeds[0]);\r\n\r\n        uint24[6] memory seeds = [\r\n            uint24(uint(hashSeeds[3]) % 10e6 + 1), //whale chance\r\n            uint24(uint(hashSeeds[0]) % 420 + 1), //power\r\n            uint24(uint(hashSeeds[1]) % 420 + 1), //agility\r\n            uint24(uint(hashSeeds[2]) % 150 + 1), //speed\r\n            uint24(uint(hashSeeds[4]) % 16 + 1), //whale type\r\n            uint24(uint(hashSeeds[4]) % 5000 + 1) //rarity\r\n        ];\r\n\r\n        uint32[4] memory fishParams;\r\n\r\n        if (seeds[0] == 1000000) {//This is a whale 1:1 000 000 chance\r\n\r\n            if (seeds[4] == 1) {//Orca\r\n                fishParams = [140 + uint8(seeds[1] / 42), 140 + uint8(seeds[2] / 42), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 140) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 140) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            } else if (seeds[4] < 4) {//Blue whale\r\n                fishParams = [130 + uint8(seeds[1] / 42), 130 + uint8(seeds[2] / 42), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 130) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 130) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            } else {//Cachalot\r\n                fishParams = [115 + uint8(seeds[1] / 28), 115 + uint8(seeds[2] / 28), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 115) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 115) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            }\r\n        } else {\r\n            if (seeds[5] == 5000) {//Legendary\r\n                fishParams = [85 + uint8(seeds[1] / 14), 85 + uint8(seeds[2] / 14), uint8(50 + seeds[3] / 3), uint32(1000)];\r\n                if(fishParams[0] == 85) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 85) {\r\n                    fishParams[1]++;\r\n                }\r\n            } else if (seeds[5] > 4899) {//Epic\r\n                fishParams = [50 + uint8(seeds[1] / 12), 50 + uint8(seeds[2] / 12), uint8(25 + seeds[3] / 2), uint32(300)];\r\n                if(fishParams[0] == 50) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 50) {\r\n                    fishParams[1]++;\r\n                }\r\n\r\n            } else if (seeds[5] > 4000) {//Rare\r\n                fishParams = [20 + uint8(seeds[1] / 14), 20 + uint8(seeds[2] / 14), uint8(25 + seeds[3] / 3), uint32(100)];\r\n                if(fishParams[0] == 20) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 20) {\r\n                    fishParams[1]++;\r\n                }\r\n            } else {//Common\r\n                fishParams = [uint8(seeds[1] / 21), uint8(seeds[2] / 21), uint8(seeds[3] / 3), uint32(36)];\r\n                if (fishParams[0] == 0) {\r\n                    fishParams[0] = 1;\r\n                }\r\n                if (fishParams[1] == 0) {\r\n                    fishParams[1] = 1;\r\n                }\r\n                if (fishParams[2] == 0) {\r\n                    fishParams[2] = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return fishParams;\r\n    }\r\n\r\n    function getCooldown(uint16 speed) external view returns (uint64){\r\n        return uint64(now + cooldowns[speed - 1]);\r\n    }\r\n\r\n    //Ceiling function for fish generator\r\n    function ceil(uint base, uint divider) internal pure returns (uint) {\r\n        return base / divider + ((base % divider > 0) ? 1 : 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_cooldowns\",\"type\":\"uint32[100]\"}],\"name\":\"setCooldowns\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hashSeed1\",\"type\":\"uint256\"},{\"name\":\"hashSeed2\",\"type\":\"uint256\"},{\"name\":\"fishesLength\",\"type\":\"uint256\"},{\"name\":\"coinbase\",\"type\":\"address\"}],\"name\":\"getFishParams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"speed\",\"type\":\"uint16\"}],\"name\":\"getCooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FishbankUtils","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://934072e844938457d626b47cbf63ccff69b620c084baca7bf992d6e7c7ffa0fd"}]}