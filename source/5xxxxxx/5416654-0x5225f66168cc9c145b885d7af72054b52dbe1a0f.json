{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Autonomy is Ownable {\r\n    address public congress;\r\n\r\n    modifier onlyCongress() {\r\n        require(msg.sender == congress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev initialize a Congress contract address for this token\r\n     *\r\n     * @param _congress address the congress contract address\r\n     */\r\n    function initialCongress(address _congress) onlyOwner public {\r\n        require(_congress != address(0));\r\n        congress = _congress;\r\n    }\r\n\r\n    /**\r\n     * @dev set a Congress contract address for this token\r\n     * must change this address by the last congress contract\r\n     *\r\n     * @param _congress address the congress contract address\r\n     */\r\n    function changeCongress(address _congress) onlyCongress public {\r\n        require(_congress != address(0));\r\n        congress = _congress;\r\n    }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract OwnerContract is Claimable {\r\n    Claimable public ownedContract;\r\n    address internal origOwner;\r\n\r\n    /**\r\n     * @dev bind a contract as its owner\r\n     *\r\n     * @param _contract the contract address that will be binded by this Owner Contract\r\n     */\r\n    function bindContract(address _contract) onlyOwner public returns (bool) {\r\n        require(_contract != address(0));\r\n        ownedContract = Claimable(_contract);\r\n        origOwner = ownedContract.owner();\r\n\r\n        // take ownership of the owned contract\r\n        ownedContract.claimOwnership();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to the original one.\r\n     *\r\n     */\r\n    function transferOwnershipBack() onlyOwner public {\r\n        ownedContract.transferOwnership(origOwner);\r\n        ownedContract = Claimable(address(0));\r\n        origOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to another one.\r\n     *\r\n     * @param _nextOwner the contract address that will be next Owner of the original Contract\r\n     */\r\n    function changeOwnershipto(address _nextOwner)  onlyOwner public {\r\n        ownedContract.transferOwnership(_nextOwner);\r\n        ownedContract = Claimable(address(0));\r\n        origOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract MintDRCT is OwnerContract, Autonomy {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public TOTAL_SUPPLY_CAP = 1000000000E18;\r\n    bool public capInitialized = false;\r\n\r\n    address[] internal mainAccounts = [\r\n        0xaD5CcBE3aaB42812aa05921F0513C509A4fb5b67, // tokensale\r\n        0xBD37616a455f1054644c27CC9B348CE18D490D9b, // community\r\n        0x4D9c90Cc719B9bd445cea9234F0d90BaA79ad629, // foundation\r\n        0x21000ec96084D2203C978E38d781C84F497b0edE  // miscellaneous\r\n    ];\r\n\r\n    uint8[] internal mainPercentages = [30, 40, 15, 15];\r\n\r\n    mapping (address => uint) internal accountCaps;\r\n\r\n    modifier afterCapInit() {\r\n        require(capInitialized);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev set capacity limitation for every main accounts\r\n     *\r\n     */\r\n    function initialCaps() onlyOwner public returns (bool) {\r\n        for (uint i = 0; i < mainAccounts.length; i = i.add(1)) {\r\n            accountCaps[mainAccounts[i]] = TOTAL_SUPPLY_CAP * mainPercentages[i] / 100;\r\n        }\r\n\r\n        capInitialized = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint DRC Tokens from one specific wallet addresses\r\n     *\r\n     * @param _ind uint8 the main account index\r\n     * @param _value uint256 the amounts of tokens to be minted\r\n     */\r\n    function mintUnderCap(uint _ind, uint256 _value) onlyOwner afterCapInit public returns (bool) {\r\n        require(_ind < mainAccounts.length);\r\n        address accountAddr = mainAccounts[_ind];\r\n        uint256 accountBalance = MintableToken(ownedContract).balanceOf(accountAddr);\r\n        require(_value <= accountCaps[accountAddr].sub(accountBalance));\r\n\r\n        return MintableToken(ownedContract).mint(accountAddr, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint DRC Tokens from serveral specific wallet addresses\r\n     *\r\n     * @param _values uint256 the amounts of tokens to be minted\r\n     */\r\n    function mintAll(uint256[] _values) onlyOwner afterCapInit public returns (bool) {\r\n        require(_values.length == mainAccounts.length);\r\n\r\n        bool res = true;\r\n        for(uint i = 0; i < _values.length; i = i.add(1)) {\r\n            res = mintUnderCap(i, _values[i]) && res;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint DRC Tokens from serveral specific wallet addresses upto cap limitation\r\n     *\r\n     */\r\n    function mintUptoCap() onlyOwner afterCapInit public returns (bool) {\r\n        bool res = true;\r\n        for(uint i = 0; i < mainAccounts.length; i = i.add(1)) {\r\n            require(MintableToken(ownedContract).balanceOf(mainAccounts[i]) == 0);\r\n            res = MintableToken(ownedContract).mint(mainAccounts[i], accountCaps[mainAccounts[i]]) && res;\r\n        }\r\n\r\n        require(res);\r\n        return MintableToken(ownedContract).finishMinting(); // when up to cap limit, then stop minting.\r\n    }\r\n\r\n    /**\r\n     * @dev raise the supply capacity of one specific wallet addresses\r\n     *\r\n     * @param _ind uint the main account index\r\n     * @param _value uint256 the amounts of tokens to be added to capacity limitation\r\n     */\r\n    function raiseCap(uint _ind, uint256 _value) onlyCongress afterCapInit public returns (bool) {\r\n        require(_ind < mainAccounts.length);\r\n        require(_value > 0);\r\n\r\n        accountCaps[mainAccounts[_ind]] = accountCaps[mainAccounts[_ind]].add(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev query the main account address of one type\r\n     *\r\n     * @param _ind the index of the main account\r\n     */\r\n    function getMainAccount(uint _ind) public view returns (address) {\r\n        require(_ind < mainAccounts.length);\r\n        return mainAccounts[_ind];\r\n    }\r\n\r\n    /**\r\n     * @dev query the supply capacity of one type of main account\r\n     *\r\n     * @param _ind the index of the main account\r\n     */\r\n    function getAccountCap(uint _ind) public view returns (uint256) {\r\n        require(_ind < mainAccounts.length);\r\n        return accountCaps[mainAccounts[_ind]];\r\n    }\r\n\r\n    /**\r\n     * @dev set one type of main account to another address\r\n     *\r\n     * @param _ind the main account index\r\n     * @param _newAddr address the new main account address\r\n     */\r\n    function setMainAccount(uint _ind, address _newAddr) onlyOwner public returns (bool) {\r\n        require(_ind < mainAccounts.length);\r\n        require(_newAddr != address(0));\r\n\r\n        mainAccounts[_ind] = _newAddr;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"capInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"getMainAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"getAccountCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_congress\",\"type\":\"address\"}],\"name\":\"initialCongress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnershipBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_congress\",\"type\":\"address\"}],\"name\":\"changeCongress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"bindContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"mintAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"congress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintUptoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"},{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setMainAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintUnderCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"changeOwnershipto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"raiseCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MintDRCT","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a12d8712a1dea7c71666cba7a9e6c702c09ed7306e2da6aafaf3866a172bf65"}]}