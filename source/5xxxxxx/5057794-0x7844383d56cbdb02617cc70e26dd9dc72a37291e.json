{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns ( uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) internal pure returns ( uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns ( uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant public returns ( uint supply);\r\n\r\n    function balanceOf( address who ) constant public returns ( uint value);\r\n    function allowance( address owner, address spender ) constant public returns (uint _allowance);\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n//implement \r\ncontract StandardToken is SafeMath,ERC20 {\r\n    uint256     _totalSupply;\r\n    \r\n    function totalSupply() constant public returns ( uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        assert(balances[msg.sender] >= wad);\r\n        \r\n        balances[msg.sender] = safeSub(balances[msg.sender], wad);\r\n        balances[dst] = safeAdd(balances[dst], wad);\r\n        \r\n        Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n        assert(wad > 0 );\r\n        assert(balances[src] >= wad);\r\n        \r\n        balances[src] = safeSub(balances[src], wad);\r\n        balances[dst] = safeAdd(balances[dst], wad);\r\n        \r\n        Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns ( uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns ( bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns ( uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function freezeOf(address _owner) constant public returns ( uint256 balance) {\r\n        return freezes[_owner];\r\n    }\r\n    \r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) freezes;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract DSAuth {\r\n    address public authority;\r\n    address public owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        authority = msg.sender;\r\n    }\r\n\r\n    function setOwner(address owner_) Owner public\r\n    {\r\n        owner = owner_;\r\n    }\r\n\r\n    modifier Auth {\r\n        assert(isAuthorized(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    modifier Owner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src) internal view returns ( bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == authority) {\r\n            return true;\r\n        }\r\n        else if (src == owner) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\ncontract DRCToken is StandardToken,DSAuth {\r\n\r\n    string public name = \"Digit RedWine Coin\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"DRC\";\r\n    \r\n    /* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function DRCToken() public {\r\n        \r\n    }\r\n\r\n    function mint(uint256 wad) Owner public {\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], wad);\r\n        _totalSupply = safeAdd(_totalSupply, wad);\r\n    }\r\n\r\n    function burn(uint256 wad) Owner public {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], wad);\r\n        _totalSupply = safeSub(_totalSupply, wad);\r\n        Burn(msg.sender, wad);\r\n    }\r\n\r\n    function push(address dst, uint256 wad) public returns ( bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n\r\n    function pull(address src, uint256 wad) public returns ( bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    \r\n    function freeze(address dst,uint256 _value) Auth public returns (bool success) {\r\n        assert(balances[dst] >= _value); // Check if the sender has enough\r\n        assert(_value > 0) ; \r\n        balances[dst] = SafeMath.safeSub(balances[dst], _value);                      // Subtract from the sender\r\n        freezes[dst] = SafeMath.safeAdd(freezes[dst], _value);                                // Updates totalSupply\r\n        Freeze(dst, _value);\r\n        return true;\r\n    }\r\n    \r\n    function unfreeze(address dst,uint256 _value) Auth public returns (bool success) {\r\n        assert(freezes[dst] >= _value);            // Check if the sender has enough\r\n        assert(_value > 0) ; \r\n        freezes[dst] = SafeMath.safeSub(freezes[dst], _value);                      // Subtract from the sender\r\n        balances[dst] = SafeMath.safeAdd(balances[dst], _value);\r\n        Unfreeze(dst, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DRCToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1c89b4997496f9bfc87c9971377831591f0c1b054d04841de32d7a28afdd3063"}]}