{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/ERC900/ERC900.sol\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ncontract ERC900 {\r\n  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n  function stake(uint256 amount, bytes data) public;\r\n  function stakeFor(address user, uint256 amount, bytes data) public;\r\n  function unstake(uint256 amount, bytes data) public;\r\n  function totalStakedFor(address addr) public view returns (uint256);\r\n  function totalStaked() public view returns (uint256);\r\n  function token() public view returns (address);\r\n  function supportsHistory() public pure returns (bool);\r\n\r\n  // NOTE: Not implementing the optional functions\r\n  // function lastStakedFor(address addr) public view returns (uint256);\r\n  // function totalStakedForAt(address addr, uint256 blockNumber) public view returns (uint256);\r\n  // function totalStakedAt(uint256 blockNumber) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/CodexStakeContractInterface.sol\r\n\r\ncontract CodexStakeContractInterface is ERC900 {\r\n\r\n  function stakeForDuration(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 lockInDuration,\r\n    bytes data)\r\n    public;\r\n\r\n  function spendCredits(\r\n    address user,\r\n    uint256 amount)\r\n    public;\r\n\r\n  function creditBalanceOf(\r\n    address user)\r\n    public\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\n// File: contracts/library/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC900/ERC900BasicStakeContract.sol\r\n\r\n/* solium-disable security/no-block-members */\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface basic implementation\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ncontract ERC900BasicStakeContract is ERC900 {\r\n  // @TODO: deploy this separately so we don't have to deploy it multiple times for each contract\r\n  using SafeMath for uint256;\r\n\r\n  // Token used for staking\r\n  ERC20 stakingToken;\r\n\r\n  // The default duration of stake lock-in (in seconds)\r\n  uint256 public defaultLockInDuration;\r\n\r\n  // To save on gas, rather than create a separate mapping for totalStakedFor & personalStakes,\r\n  //  both data structures are stored in a single mapping for a given addresses.\r\n  //\r\n  // It's possible to have a non-existing personalStakes, but have tokens in totalStakedFor\r\n  //  if other users are staking on behalf of a given address.\r\n  mapping (address => StakeContract) public stakeHolders;\r\n\r\n  // Struct for personal stakes (i.e., stakes made by this address)\r\n  // unlockedTimestamp - when the stake unlocks (in seconds since Unix epoch)\r\n  // actualAmount - the amount of tokens in the stake\r\n  // stakedFor - the address the stake was staked for\r\n  struct Stake {\r\n    uint256 unlockedTimestamp;\r\n    uint256 actualAmount;\r\n    address stakedFor;\r\n  }\r\n\r\n  // Struct for all stake metadata at a particular address\r\n  // totalStakedFor - the number of tokens staked for this address\r\n  // personalStakeIndex - the index in the personalStakes array.\r\n  // personalStakes - append only array of stakes made by this address\r\n  // exists - whether or not there are stakes that involve this address\r\n  struct StakeContract {\r\n    uint256 totalStakedFor;\r\n\r\n    uint256 personalStakeIndex;\r\n\r\n    Stake[] personalStakes;\r\n\r\n    bool exists;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier that checks that this contract can transfer tokens from the\r\n   *  balance in the stakingToken contract for the given address.\r\n   * @dev This modifier also transfers the tokens.\r\n   * @param _address address to transfer tokens from\r\n   * @param _amount uint256 the number of tokens\r\n   */\r\n  modifier canStake(address _address, uint256 _amount) {\r\n    require(\r\n      stakingToken.transferFrom(_address, this, _amount),\r\n      \"Stake required\");\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   * @param _stakingToken ERC20 The address of the token contract used for staking\r\n   */\r\n  constructor(ERC20 _stakingToken) public {\r\n    stakingToken = _stakingToken;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the timestamps for when active personal stakes for an address will unlock\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return uint256[] array of timestamps\r\n   */\r\n  function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[]) {\r\n    uint256[] memory timestamps;\r\n    (timestamps,,) = getPersonalStakes(_address);\r\n\r\n    return timestamps;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the stake actualAmount for active personal stakes for an address\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return uint256[] array of actualAmounts\r\n   */\r\n  function getPersonalStakeActualAmounts(address _address) external view returns (uint256[]) {\r\n    uint256[] memory actualAmounts;\r\n    (,actualAmounts,) = getPersonalStakes(_address);\r\n\r\n    return actualAmounts;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addresses that each personal stake was created for by an address\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return address[] array of amounts\r\n   */\r\n  function getPersonalStakeForAddresses(address _address) external view returns (address[]) {\r\n    address[] memory stakedFor;\r\n    (,,stakedFor) = getPersonalStakes(_address);\r\n\r\n    return stakedFor;\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the user\r\n   * @notice MUST trigger Staked event\r\n   * @param _amount uint256 the amount of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stake(uint256 _amount, bytes _data) public {\r\n    createStake(\r\n      msg.sender,\r\n      _amount,\r\n      defaultLockInDuration,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\r\n   * @notice MUST trigger Staked event\r\n   * @param _user address the address the tokens are staked for\r\n   * @param _amount uint256 the amount of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stakeFor(address _user, uint256 _amount, bytes _data) public {\r\n    createStake(\r\n      _user,\r\n      _amount,\r\n      defaultLockInDuration,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revert\r\n   * @notice MUST trigger Unstaked event\r\n   * @dev Unstaking tokens is an atomic operation—either all of the tokens in a stake, or none of the tokens.\r\n   * @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\r\n   *  transferred back to their account, and their personalStakeIndex will increment to the next active stake.\r\n   * @param _amount uint256 the amount of tokens to unstake\r\n   * @param _data bytes optional data to include in the Unstake event\r\n   */\r\n  function unstake(uint256 _amount, bytes _data) public {\r\n    withdrawStake(\r\n      _amount,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked for an address\r\n   * @param _address address The address to query\r\n   * @return uint256 The number of tokens staked for the given address\r\n   */\r\n  function totalStakedFor(address _address) public view returns (uint256) {\r\n    return stakeHolders[_address].totalStakedFor;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked\r\n   * @return uint256 The number of tokens staked in the contract\r\n   */\r\n  function totalStaked() public view returns (uint256) {\r\n    return stakingToken.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @notice Address of the token being used by the staking interface\r\n   * @return address The address of the ERC20 token used for staking\r\n   */\r\n  function token() public view returns (address) {\r\n    return stakingToken;\r\n  }\r\n\r\n  /**\r\n   * @notice MUST return true if the optional history functions are implemented, otherwise false\r\n   * @dev Since we don't implement the optional interface, this always returns false\r\n   * @return bool Whether or not the optional history functions are implemented\r\n   */\r\n  function supportsHistory() public pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to get specific properties of all of the personal stakes created by an address\r\n   * @param _address address The address to query\r\n   * @return (uint256[], uint256[], address[])\r\n   *  timestamps array, actualAmounts array, stakedFor array\r\n   */\r\n  function getPersonalStakes(\r\n    address _address\r\n  )\r\n    view\r\n    public\r\n    returns(uint256[], uint256[], address[])\r\n  {\r\n    StakeContract storage stakeContract = stakeHolders[_address];\r\n\r\n    uint256 arraySize = stakeContract.personalStakes.length - stakeContract.personalStakeIndex;\r\n    uint256[] memory unlockedTimestamps = new uint256[](arraySize);\r\n    uint256[] memory actualAmounts = new uint256[](arraySize);\r\n    address[] memory stakedFor = new address[](arraySize);\r\n\r\n    for (uint256 i = stakeContract.personalStakeIndex; i < stakeContract.personalStakes.length; i++) {\r\n      uint256 index = i - stakeContract.personalStakeIndex;\r\n      unlockedTimestamps[index] = stakeContract.personalStakes[i].unlockedTimestamp;\r\n      actualAmounts[index] = stakeContract.personalStakes[i].actualAmount;\r\n      stakedFor[index] = stakeContract.personalStakes[i].stakedFor;\r\n    }\r\n\r\n    return (\r\n      unlockedTimestamps,\r\n      actualAmounts,\r\n      stakedFor\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to create stakes for a given address\r\n   * @param _address address The address the stake is being created for\r\n   * @param _amount uint256 The number of tokens being staked\r\n   * @param _lockInDuration uint256 The duration to lock the tokens for\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function createStake(\r\n    address _address,\r\n    uint256 _amount,\r\n    uint256 _lockInDuration,\r\n    bytes _data\r\n  )\r\n    internal\r\n    canStake(msg.sender, _amount)\r\n  {\r\n    if (!stakeHolders[msg.sender].exists) {\r\n      stakeHolders[msg.sender].exists = true;\r\n    }\r\n\r\n    stakeHolders[_address].totalStakedFor = stakeHolders[_address].totalStakedFor.add(_amount);\r\n    stakeHolders[msg.sender].personalStakes.push(\r\n      Stake(\r\n        block.timestamp.add(_lockInDuration),\r\n        _amount,\r\n        _address)\r\n      );\r\n\r\n    emit Staked(\r\n      _address,\r\n      _amount,\r\n      totalStakedFor(_address),\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to withdraw stakes for the msg.sender\r\n   * @param _amount uint256 The amount to withdraw. MUST match the stake amount for the\r\n   *  stake at personalStakeIndex.\r\n   * @param _data bytes optional data to include in the Unstake event\r\n   */\r\n  function withdrawStake(\r\n    uint256 _amount,\r\n    bytes _data\r\n  )\r\n    internal\r\n  {\r\n    Stake storage personalStake = stakeHolders[msg.sender].personalStakes[stakeHolders[msg.sender].personalStakeIndex];\r\n\r\n    // Check that the current stake has unlocked & matches the unstake amount\r\n    require(\r\n      personalStake.unlockedTimestamp <= block.timestamp,\r\n      \"The current stake hasn't unlocked yet\");\r\n\r\n    require(\r\n      personalStake.actualAmount == _amount,\r\n      \"The unstake amount does not match the current stake\");\r\n\r\n    // Transfer the staked tokens from this contract back to the sender\r\n    // Notice that we are using transfer instead of transferFrom here, so\r\n    //  no approval is needed beforehand.\r\n    require(\r\n      stakingToken.transfer(msg.sender, _amount),\r\n      \"Unable to withdraw stake\");\r\n\r\n    stakeHolders[personalStake.stakedFor].totalStakedFor = stakeHolders[personalStake.stakedFor]\r\n      .totalStakedFor.sub(personalStake.actualAmount);\r\n\r\n    personalStake.actualAmount = 0;\r\n    stakeHolders[msg.sender].personalStakeIndex++;\r\n\r\n    emit Unstaked(\r\n      personalStake.stakedFor,\r\n      _amount,\r\n      totalStakedFor(personalStake.stakedFor),\r\n      _data);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC900/ERC900CreditsStakeContract.sol\r\n\r\n/**\r\n * @title ERC900 Credits-based staking implementation\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n *\r\n * Notice that credits aren't lost when tokens are unstaked--only when credits are spent.\r\n * This means that after the initial lock in duration expires, a user can re-stake those tokens\r\n *  for more credits.\r\n * Another important note: spendCredits can only be called by the contract's owner. This\r\n *  is meant to be another smart contract. For example, the smart contract can offer call\r\n *  spendCredits to reduce a user's credit balance in place of spending real tokens.\r\n */\r\ncontract ERC900CreditsStakeContract is ERC900BasicStakeContract, Ownable {\r\n\r\n  // NOTE: Credits do not have decimal places\r\n  // Users cannot own fractional credits\r\n  mapping (address => uint256) public creditBalances;\r\n\r\n  /**\r\n   * @dev Returns the balance of credits at a user's address.\r\n   * @param _user address The address to check.\r\n   * @return uint256 The credit balance.\r\n   */\r\n  function creditBalanceOf(\r\n    address _user\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return creditBalances[_user];\r\n  }\r\n\r\n  /**\r\n   * @dev Spends credits for a user. Only callable by the owner. Reverts if the\r\n   *  user doesn't have enough credits.\r\n   * @param _user address The address that owns the credits being spent.\r\n   * @param _amount uint256 The number of credits to spend.\r\n   */\r\n  function spendCredits(\r\n    address _user,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(\r\n      creditBalances[_user] >= _amount,\r\n      \"Insufficient balance\");\r\n\r\n    creditBalances[_user] = creditBalances[_user].sub(_amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Stakes tokens for the caller and rewards them with credits. Reverts\r\n   *  if less than 1 token is being staked.\r\n   * @param _amount uint256 The number of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stake(\r\n    uint256 _amount,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    super.stake(\r\n      _amount,\r\n      _data);\r\n\r\n    updateCreditBalance(\r\n      msg.sender,\r\n      _amount,\r\n      defaultLockInDuration);\r\n  }\r\n\r\n  /**\r\n   * Stakes tokens from the caller for a particular user, and rewards that user with credits.\r\n   * Reverts if less than 1 token is being staked.\r\n   * @param _user address The address the tokens are staked for\r\n   * @param _amount uint256 The number of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stakeFor(\r\n    address _user,\r\n    uint256 _amount,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    super.stakeFor(\r\n      _user,\r\n      _amount,\r\n      _data);\r\n\r\n    updateCreditBalance(\r\n      _user,\r\n      _amount,\r\n      defaultLockInDuration);\r\n  }\r\n\r\n  /**\r\n   * @dev Stakes tokens from the caller for a given user & duration, and rewards that user with credits.\r\n   * Reverts if less than 1 token is being staked, or if the duration specified is less than the default.\r\n   * @param _user address The address the tokens are staked for\r\n   * @param _amount uint256 The number of tokens to stake\r\n   * @param _lockInDuration uint256 The duration (in seconds) that the stake should be locked for\r\n   * @param _data bytes optional data to be included in the Stake event\r\n   */\r\n  function stakeForDuration(\r\n    address _user,\r\n    uint256 _amount,\r\n    uint256 _lockInDuration,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    require(\r\n      _lockInDuration >= defaultLockInDuration,\r\n      \"Insufficient stake duration\");\r\n\r\n    super.createStake(\r\n      _user,\r\n      _amount,\r\n      _lockInDuration,\r\n      _data);\r\n\r\n    updateCreditBalance(\r\n      _user,\r\n      _amount,\r\n      _lockInDuration);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to update the credit balance of a user when staking tokens.\r\n   *  Users are rewarded with more tokens the longer they stake for.\r\n   * @param _user address The address to award credits to\r\n   * @param _amount uint256 The number of tokens being staked\r\n   * @param _lockInDuration uint256 The duration (in seconds) that the stake should be locked for\r\n   */\r\n  function updateCreditBalance(\r\n    address _user,\r\n    uint256 _amount,\r\n    uint256 _lockInDuration\r\n  )\r\n    internal\r\n  {\r\n    uint256 divisor = 1 ether;\r\n\r\n    require(\r\n      _amount >= divisor,\r\n      \"Insufficient amount\");\r\n\r\n    // NOTE: Truncation is intentional here\r\n    // If a user stakes for less than the minimum duration, they are awarded with 0 credits\r\n    // If they stake 2x the minimum duration, they are awarded with 2x credits\r\n    // etc.\r\n    uint256 rewardMultiplier = _lockInDuration / defaultLockInDuration;\r\n\r\n    uint256 creditsAwarded = _amount.mul(rewardMultiplier).div(divisor);\r\n    creditBalances[_user] = creditBalances[_user].add(creditsAwarded);\r\n  }\r\n}\r\n\r\n// File: contracts/CodexStakeContract.sol\r\n\r\n/**\r\n * @title CodexStakeContract\r\n */\r\ncontract CodexStakeContract is CodexStakeContractInterface, ERC900CreditsStakeContract {\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   * @param _stakingToken ERC20 The address of the token used for staking\r\n   * @param _defaultLockInDuration uint256 The duration (in seconds) that stakes are required to be locked for\r\n   */\r\n  constructor(\r\n    ERC20 _stakingToken,\r\n    uint256 _defaultLockInDuration\r\n  )\r\n    public\r\n    ERC900BasicStakeContract(_stakingToken)\r\n  {\r\n    defaultLockInDuration = _defaultLockInDuration;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the lockInDuration for stakes. Only callable by the owner\r\n   * @param _defaultLockInDuration uint256 The duration (in seconds) that stakes are required to be locked for\r\n   */\r\n  function setDefaultLockInDuration(\r\n    uint256 _defaultLockInDuration\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    defaultLockInDuration = _defaultLockInDuration;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakeUnlockedTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"spendCredits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"creditBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakeActualAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lockInDuration\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stakeForDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakeForAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"name\":\"totalStakedFor\",\"type\":\"uint256\"},{\"name\":\"personalStakeIndex\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultLockInDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_defaultLockInDuration\",\"type\":\"uint256\"}],\"name\":\"setDefaultLockInDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stakingToken\",\"type\":\"address\"},{\"name\":\"_defaultLockInDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"}]","ContractName":"CodexStakeContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f226e38c3007b3d974fc79bcf5a77750035436ee000000000000000000000000000000000000000000000000000000000076a700","Library":"","SwarmSource":"bzzr://07b624dcf2770dcd96c28559cc4ab2a2706d0ff2a3aae693dcfa79d6eef24c6e"}]}