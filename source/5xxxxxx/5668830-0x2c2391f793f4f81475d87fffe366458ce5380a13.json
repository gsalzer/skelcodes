{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address public beneficiary;\r\n\r\n    constructor() public {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function withdrawal(uint256 amount) public onlyOwner {\r\n        if (amount > address(this).balance) {\r\n            revert();\r\n        }\r\n\r\n        beneficiary.transfer(amount);\r\n    }\r\n\r\n    function withdrawalAll() public onlyOwner {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\ncontract MCPSale is Beneficiary {\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(uint256 => address) public approved;\r\n    mapping(int32 => mapping(int32 => uint256)) public zone;\r\n    mapping(uint256 => Coordinates) public zone_reverse;\r\n    mapping(uint16 => Region) public regions;\r\n    mapping(uint16 => RegionBid) public region_bids;\r\n\r\n    bool public constant implementsERC721 = true;\r\n\r\n    uint256 constant MINIMAL_RAISE = 0.5 ether;\r\n    uint256 constant AUCTION_DURATION = 7 * 24 * 60 * 60; // 7 Days\r\n\r\n    bool public SaleActive = true;\r\n\r\n    struct MapLand {\r\n        uint8 resources;\r\n        uint16 region;\r\n        uint256 buyPrice;\r\n        address owner;\r\n    }\r\n\r\n    struct Coordinates {\r\n        int32 x;\r\n        int32 y;\r\n    }\r\n\r\n    struct RegionBid {\r\n        address currentBuyer;\r\n        uint256 bid;\r\n        uint256 activeTill;\r\n    }\r\n\r\n    struct Region {\r\n        address owner;\r\n        uint8 tax;\r\n        uint256 startPrice;\r\n        string regionName;\r\n        bool onSale;\r\n        bool allowSaleLands;\r\n        bool created;\r\n    }\r\n\r\n\r\n    uint256 public basePrice = 0.01 ether;\r\n    uint256 public minMargin = 0.001944 ether;\r\n    uint32 public divider = 8;\r\n    uint8 public defaultRegionTax = 10;\r\n\r\n    MapLand[] public tokens;\r\n\r\n    address public mapMaster;\r\n\r\n    modifier isTokenOwner(uint256 _tokenId) {\r\n        if (tokens[_tokenId].owner != msg.sender) {\r\n\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegionOwner(uint16 _regionId) {\r\n        if (regions[_regionId].owner != msg.sender) {\r\n\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier isNotNullAddress(address _address) {\r\n        require(address(0) != _address);\r\n        _;\r\n    }\r\n\r\n    modifier isApproved(uint256 _tokenId, address _to) {\r\n        require(approved[_tokenId] == _to);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMapMaster() {\r\n        require(mapMaster == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOnActiveSale() {\r\n        require(SaleActive);\r\n        _;\r\n    }\r\n\r\n    modifier canMakeBid(uint16 regionId) {\r\n        if ((region_bids[regionId].activeTill != 0 && region_bids[regionId].activeTill < now)\r\n        || regions[regionId].owner != address(0) || !regions[regionId].onSale\r\n        ) {\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n            return;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        mapMaster = msg.sender;\r\n        tokens.length++;\r\n        //reserve 0 token - no binding, no sale\r\n        MapLand storage reserve = tokens[tokens.length - 1];\r\n        reserve.owner = msg.sender;\r\n    }\r\n\r\n    function setMapMaster(address _mapMaster) public onlyOwner {\r\n        mapMaster = _mapMaster;\r\n    }\r\n\r\n    function setMinMargin(uint256 _amount) public onlyOwner {\r\n        minMargin = _amount;\r\n    }\r\n\r\n    function setBasePrice(uint256 _amount) public onlyOwner {\r\n        basePrice = _amount;\r\n    }\r\n\r\n    function setRegionTax(uint16 regionId, uint8 tax) public onlyRegionOwner(regionId) onlyOnActiveSale {\r\n        require(tax <= 100 && tax >= 0);\r\n        regions[regionId].tax = tax;\r\n\r\n        emit TaxUpdate(regionId, regions[regionId].tax);\r\n    }\r\n\r\n    function setRegionName(uint16 regionId, string regionName) public onlyOwner {\r\n        regions[regionId].regionName = regionName;\r\n        emit ChangeRegionName(regionId, regionName);\r\n    }\r\n\r\n    function setRegionOnSale(uint16 regionId) public onlyMapMaster {\r\n        regions[regionId].onSale = true;\r\n\r\n        emit RegionOnSale(regionId);\r\n    }\r\n\r\n    function setAllowSellLands(uint16 regionId) public onlyMapMaster {\r\n        regions[regionId].allowSaleLands = true;\r\n\r\n        emit RegionAllowSaleLands(regionId);\r\n    }\r\n\r\n    function setRegionPrice(uint16 regionId, uint256 price) public onlyOwner {\r\n        if(regions[regionId].owner == address(0) && !regions[regionId].onSale) {\r\n            regions[regionId].startPrice = price;\r\n            emit UpdateRegionPrice(regionId, price);\r\n        }\r\n    }\r\n\r\n    function addRegion(uint16 _regionId, uint256 _startPrice, string _regionName) public onlyMapMaster onlyOnActiveSale {\r\n\r\n        if (regions[_regionId].created) {\r\n            return;\r\n        }\r\n\r\n        Region storage newRegion = regions[_regionId];\r\n        newRegion.startPrice = _startPrice;\r\n        newRegion.tax = defaultRegionTax;\r\n        newRegion.owner = address(0);\r\n        newRegion.regionName = _regionName;\r\n        newRegion.created = true;\r\n\r\n        emit AddRegion(_regionId);\r\n    }\r\n\r\n    function regionExists(uint16 _regionId) public view returns (bool) {\r\n        return regions[_regionId].created;\r\n    }\r\n\r\n    function makeBid(uint16 regionId) payable public\r\n    onlyOnActiveSale\r\n    canMakeBid(regionId) {\r\n\r\n        uint256 minimal_bid;\r\n\r\n        if (region_bids[regionId].currentBuyer != address(0)) {//If have bid already\r\n            minimal_bid = region_bids[regionId].bid + MINIMAL_RAISE;\r\n        } else {\r\n            minimal_bid = regions[regionId].startPrice;\r\n        }\r\n\r\n        if (minimal_bid > msg.value) {\r\n\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        RegionBid storage bid = region_bids[regionId];\r\n\r\n        if (bid.currentBuyer != address(0)) {\r\n            //Return funds to old buyer\r\n            bid.currentBuyer.transfer(bid.bid);\r\n        } else {\r\n            emit AuctionStarts(regionId);\r\n        }\r\n\r\n        // Auction will be active for 7 days if no one make a new bid\r\n        bid.activeTill = now + AUCTION_DURATION;\r\n\r\n\r\n        bid.currentBuyer = msg.sender;\r\n        bid.bid = msg.value;\r\n\r\n        emit RegionNewBid(regionId, msg.sender, msg.value, region_bids[regionId].activeTill);\r\n    }\r\n\r\n    function completeRegionAuction(uint16 regionId) public onlyMapMaster {\r\n        if (region_bids[regionId].currentBuyer == address(0)) {\r\n            return;\r\n        }\r\n\r\n        if (region_bids[regionId].activeTill > now || region_bids[regionId].activeTill == 0) {\r\n            return;\r\n        }\r\n\r\n        transferRegion(regionId, region_bids[regionId].currentBuyer);\r\n    }\r\n\r\n    function takeRegion(uint16 regionId) public {\r\n        require(regions[regionId].owner == address(0));\r\n        require(region_bids[regionId].currentBuyer == msg.sender);\r\n        require(region_bids[regionId].activeTill < now);\r\n\r\n        transferRegion(regionId, region_bids[regionId].currentBuyer);\r\n    }\r\n\r\n    function transferRegion(uint16 regionId, address newOwner) internal {\r\n        regions[regionId].owner = newOwner;\r\n        regions[regionId].onSale = false;\r\n\r\n        emit RegionSold(regionId, regions[regionId].owner);\r\n    }\r\n\r\n    // returns next minimal bid or final bid on auctions that already end\r\n    function getRegionPrice(uint16 regionId) public view returns (uint256 next_bid) {\r\n        if(regions[regionId].owner != address(0)) {\r\n            return region_bids[regionId].bid;\r\n        }\r\n\r\n        if (region_bids[regionId].currentBuyer != address(0)) {//If have bid already\r\n            next_bid = region_bids[regionId].bid + MINIMAL_RAISE;\r\n        } else {\r\n            next_bid = regions[regionId].startPrice;\r\n        }\r\n    }\r\n\r\n    function _activateZoneLand(int32 x, int32 y, uint8 region, uint8 resources) internal {\r\n        tokens.length++;\r\n        MapLand storage tmp = tokens[tokens.length - 1];\r\n\r\n        tmp.region = region;\r\n        tmp.resources = resources;\r\n        tmp.buyPrice = 0;\r\n        zone[x][y] = tokens.length - 1;\r\n        zone_reverse[tokens.length - 1] = Coordinates(x, y);\r\n\r\n        emit ActivateMap(x, y, tokens.length - 1);\r\n    }\r\n\r\n    function activateZone(int32[] x, int32[] y, uint8[] region, uint8[] resources) public onlyMapMaster {\r\n        for (uint index = 0; index < x.length; index++) {\r\n            _activateZoneLand(x[index], y[index], region[index], resources[index]);\r\n        }\r\n    }\r\n\r\n    function buyLand(int32 x, int32 y) payable public onlyOnActiveSale {\r\n        MapLand storage token = tokens[zone[x][y]];\r\n        if (zone[x][y] == 0 || token.buyPrice > 0 || token.owner != address(0)\r\n        || !regions[token.region].allowSaleLands) {\r\n\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        uint256 buyPrice = getLandPrice(x, y);\r\n\r\n        if (buyPrice == 0) {\r\n\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        uint256[49] memory payouts;\r\n        address[49] memory addresses;\r\n        uint8 tokenBought;\r\n\r\n\r\n        if (buyPrice > msg.value) {\r\n\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n        } else if (buyPrice < msg.value) {\r\n            msg.sender.transfer(msg.value - buyPrice);\r\n        }\r\n\r\n        (payouts, addresses, tokenBought) = getPayouts(x, y);\r\n\r\n\r\n        token.owner = msg.sender;\r\n        token.buyPrice = buyPrice;\r\n        balances[msg.sender]++;\r\n\r\n        doPayouts(payouts, addresses, buyPrice);\r\n\r\n        uint256 tax = getRegionTax(token.region);\r\n\r\n        if (regions[token.region].owner != address(0) && tax > 100) {\r\n            uint256 taxValue = ((basePrice * (tax - 100) + ((tokenBought ** 2) * minMargin * (tax - 100))) / 100);\r\n            regions[token.region].owner.transfer(taxValue);\r\n            emit RegionPayout(regions[token.region].owner, taxValue);\r\n        }\r\n\r\n        emit Transfer(address(0), msg.sender, zone[x][y]);\r\n\r\n    }\r\n\r\n    function doPayouts(uint256[49] payouts, address[49] addresses, uint256 fullValue) internal returns (uint256){\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            if (addresses[i] == address(0)) {\r\n                continue;\r\n            }\r\n            addresses[i].transfer(payouts[i]);\r\n            emit Payout(addresses[i], payouts[i]);\r\n            fullValue -= payouts[i];\r\n        }\r\n\r\n\r\n        return fullValue;\r\n    }\r\n\r\n    function getPayouts(int32 x, int32 y) public view returns (uint256[49] payouts, address[49] addresses, uint8 tokenBought) {\r\n\r\n        for (int32 xi = x - 3; xi <= x + 3; xi++) {\r\n            for (int32 yi = y - 3; yi <= y + 3; yi++) {\r\n                if (x == xi && y == yi) {\r\n                    continue;\r\n                }\r\n                MapLand memory token = tokens[zone[xi][yi]];\r\n\r\n                if (token.buyPrice > 0) {\r\n                    payouts[tokenBought] = (token.buyPrice / divider);\r\n                    addresses[tokenBought] = (token.owner);\r\n                    tokenBought++;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return (payouts, addresses, tokenBought);\r\n    }\r\n\r\n    function getLandPrice(int32 x, int32 y) public view returns (uint256 price){\r\n\r\n        if (zone[x][y] == 0) {\r\n            return;\r\n        }\r\n\r\n        MapLand memory token = tokens[zone[x][y]];\r\n\r\n        int256[2] memory start;\r\n        start[0] = x - 3;\r\n        start[1] = y - 3;\r\n        uint256[2] memory counters = [uint256(0), 0];\r\n        for (int32 xi = x - 3; xi <= x + 3; xi++) {\r\n            for (int32 yi = y - 3; yi <= y + 3; yi++) {\r\n                if (x == xi && y == yi) {\r\n                    continue;\r\n                }\r\n\r\n                if (tokens[zone[xi][yi]].buyPrice > 0) {\r\n                    counters[1] += tokens[zone[xi][yi]].buyPrice;\r\n                    counters[0]++;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint16 regionId = token.region;\r\n\r\n        uint8 taxValue = getRegionTax(regionId);\r\n\r\n        if (counters[0] == 0) {\r\n            price = ((basePrice * taxValue) / 100);\r\n        } else {\r\n            price = ((basePrice * taxValue) / 100) + (uint(counters[1]) / divider) + (((counters[0] ** 2) * minMargin * taxValue) / 100);\r\n        }\r\n    }\r\n\r\n\r\n    function getRegionTax(uint16 regionId) internal view returns (uint8) {\r\n        if (regions[regionId].owner != address(0)) {\r\n            return (100 + regions[regionId].tax);\r\n        }\r\n        return (100 + defaultRegionTax);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public isTokenOwner(_tokenId) isNotNullAddress(_to) {\r\n        approved[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function setRegionOwner(uint16 regionId, address owner, uint256 viewPrice) public onlyOwner {\r\n        require(regions[regionId].owner == address(0) && !regions[regionId].onSale);\r\n\r\n        regions[regionId].owner = owner;\r\n\r\n        RegionBid storage bid = region_bids[regionId];\r\n        bid.activeTill = now;\r\n        bid.currentBuyer = owner;\r\n        bid.bid = viewPrice;\r\n\r\n        emit RegionSold(regionId, owner);\r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public isTokenOwner(_tokenId) isNotNullAddress(_to) isApproved(_tokenId, _to) {\r\n        tokens[_tokenId].owner = _to;\r\n\r\n        balances[msg.sender]--;\r\n        balances[_to]++;\r\n\r\n        emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public isTokenOwner(_tokenId) isApproved(_tokenId, _to) {\r\n        tokens[_tokenId].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = tokens[_tokenId].owner;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function setSaleEnd() public onlyOwner {\r\n        SaleActive = false;\r\n        emit EndSale(true);\r\n    }\r\n\r\n    function isActive() public view returns (bool) {\r\n        return SaleActive;\r\n    }\r\n\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n    event RegionAllowSaleLands(uint16 regionId);\r\n    event ActivateMap(int256 x, int256 y, uint256 tokenId);\r\n    event AddRegion(uint16 indexed regionId);\r\n    event UpdateRegionPrice(uint16 indexed regionId, uint256 price);\r\n    event ChangeRegionName(uint16 indexed regionId, string regionName);\r\n    event TaxUpdate(uint16 indexed regionId, uint8 tax);\r\n    event RegionOnSale(uint16 indexed regionId);\r\n    event RegionNewBid(uint16 indexed regionId, address buyer, uint256 value, uint256 activeTill);\r\n    event AuctionStarts(uint16 indexed regionId);\r\n    event RegionSold(uint16 indexed regionId, address owner);\r\n    event Payout(address indexed to, uint256 value);\r\n    event RegionPayout(address indexed to, uint256 value);\r\n    event EndSale(bool isEnded);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinMargin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"completeRegionAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"getRegionPrice\",\"outputs\":[{\"name\":\"next_bid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int32\"},{\"name\":\"y\",\"type\":\"int32\"}],\"name\":\"getPayouts\",\"outputs\":[{\"name\":\"payouts\",\"type\":\"uint256[49]\"},{\"name\":\"addresses\",\"type\":\"address[49]\"},{\"name\":\"tokenBought\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int32\"},{\"name\":\"y\",\"type\":\"int32\"}],\"name\":\"buyLand\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMargin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"resources\",\"type\":\"uint8\"},{\"name\":\"region\",\"type\":\"uint16\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"makeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"setAllowSellLands\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"},{\"name\":\"regionName\",\"type\":\"string\"}],\"name\":\"setRegionName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"int32[]\"},{\"name\":\"y\",\"type\":\"int32[]\"},{\"name\":\"region\",\"type\":\"uint8[]\"},{\"name\":\"resources\",\"type\":\"uint8[]\"}],\"name\":\"activateZone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint16\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_regionName\",\"type\":\"string\"}],\"name\":\"addRegion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int32\"},{\"name\":\"\",\"type\":\"int32\"}],\"name\":\"zone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"setRegionOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"regions\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tax\",\"type\":\"uint8\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"regionName\",\"type\":\"string\"},{\"name\":\"onSale\",\"type\":\"bool\"},{\"name\":\"allowSaleLands\",\"type\":\"bool\"},{\"name\":\"created\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"region_bids\",\"outputs\":[{\"name\":\"currentBuyer\",\"type\":\"address\"},{\"name\":\"bid\",\"type\":\"uint256\"},{\"name\":\"activeTill\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int32\"},{\"name\":\"y\",\"type\":\"int32\"}],\"name\":\"getLandPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mapMaster\",\"type\":\"address\"}],\"name\":\"setMapMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"takeRegion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"viewPrice\",\"type\":\"uint256\"}],\"name\":\"setRegionOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultRegionTax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_regionId\",\"type\":\"uint16\"}],\"name\":\"regionExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"},{\"name\":\"tax\",\"type\":\"uint8\"}],\"name\":\"setRegionTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regionId\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setRegionPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mapMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setSaleEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zone_reverse\",\"outputs\":[{\"name\":\"x\",\"type\":\"int32\"},{\"name\":\"y\",\"type\":\"int32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"RegionAllowSaleLands\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ActivateMap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"AddRegion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdateRegionPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"regionName\",\"type\":\"string\"}],\"name\":\"ChangeRegionName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"tax\",\"type\":\"uint8\"}],\"name\":\"TaxUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"RegionOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"activeTill\",\"type\":\"uint256\"}],\"name\":\"RegionNewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"}],\"name\":\"AuctionStarts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regionId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RegionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RegionPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isEnded\",\"type\":\"bool\"}],\"name\":\"EndSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MCPSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://be3d31cf1b4ded27c2bcd792c5a6fae0969aad5c77f55fcd0f7ed783874846fd"}]}