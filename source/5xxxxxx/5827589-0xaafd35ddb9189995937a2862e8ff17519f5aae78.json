{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/// @title SafeMath library\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title Centralized administrator\r\n/// @dev Centralized administrator parent contract\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/// @title Abstract contract for the full ERC 20 Token standard\r\n/// @dev ERC 20 Token standard, ref to: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Token{\r\n    // Get the total token supply\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount. \r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/// @title Token main contract\r\n/// @dev Token main contract\r\ncontract GTLToken is ERC20Token, owned {\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    uint256 _totalSupply;\r\n\r\n    // Balances for each account\r\n    mapping (address => uint256) public balances;\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // Struct of Freeze Information\r\n    struct FreezeAccountInfo {\r\n        uint256 freezeStartTime;\r\n        uint256 freezePeriod;\r\n        uint256 freezeTotal;\r\n    }\r\n\r\n\r\n\r\n    // Freeze Information of accounts\r\n    mapping (address => FreezeAccountInfo) public freezeAccount;\r\n\r\n    // Triggered when tokens are issue and freeze\r\n    event IssueAndFreeze(address indexed to, uint256 _value, uint256 _freezePeriod);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(string _tokenName, string _tokenSymbol, uint256 _initialSupply) public {\r\n        _totalSupply = _initialSupply * 10 ** uint256(decimals);  // Total supply with the decimal amount\r\n        balances[msg.sender] = _totalSupply;                // Give the creator all initial tokens\r\n        name = _tokenName;                                   // Set the name for display purposes\r\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /// @notice Get the total token supply\r\n    /// @dev Get the total token supply\r\n    /// @return Total token supply\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @notice Get balance of account\r\n    /// @dev Get balance of '_owner'\r\n    /// @param _owner Target address\r\n    /// @return balance of '_owner'\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @notice Issue tokens to account and these tokens will be frozen for a period of time\r\n    /// @dev Issue '_value' tokens to the address '_to' and these tokens will be frozen for a period of '_freezePeriod' minutes\r\n    /// @param _to Receiving address\r\n    /// @param _value The amount of frozen token to be issued\r\n    /// @param _freezePeriod Freeze Period(minutes)\r\n    function issueAndFreeze(address _to, uint _value, uint _freezePeriod) onlyOwner public {\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        freezeAccount[_to] = FreezeAccountInfo({\r\n            freezeStartTime : now,\r\n            freezePeriod : _freezePeriod,\r\n            freezeTotal : _value\r\n        });\r\n\r\n        emit IssueAndFreeze(_to, _value, _freezePeriod);\r\n    }\r\n\r\n    /// @notice Get account's freeze information\r\n    /// @dev Get freeze information of '_target'\r\n    /// @param _target Target address\r\n    /// @return _freezeStartTime Freeze start time; _freezePeriod Freeze period(minutes); _freezeAmount Freeze token amount; _freezeDeadline Freeze deadline\r\n    function getFreezeInfo(address _target) public view returns(\r\n        uint _freezeStartTime, \r\n        uint _freezePeriod, \r\n        uint _freezeTotal, \r\n        uint _freezeDeadline) {\r\n            \r\n        FreezeAccountInfo storage targetFreezeInfo = freezeAccount[_target];\r\n        uint freezeDeadline = targetFreezeInfo.freezeStartTime.add(targetFreezeInfo.freezePeriod.mul(1 minutes));\r\n        return (\r\n            targetFreezeInfo.freezeStartTime, \r\n            targetFreezeInfo.freezePeriod,\r\n            targetFreezeInfo.freezeTotal,\r\n            freezeDeadline\r\n        );\r\n    }\r\n\r\n    /// @dev Internal transfer, only can be called by this contract\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount to send\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n        // Check for overflows\r\n        require(balances[_to].add(_value) > balances[_to]);\r\n\r\n        uint256 freezeStartTime;\r\n        uint256 freezePeriod;\r\n        uint256 freezeTotal;\r\n        uint256 freezeDeadline;\r\n\r\n        // Get freeze information of sender\r\n        (freezeStartTime,freezePeriod,freezeTotal,freezeDeadline) = getFreezeInfo(_from);\r\n\r\n        // The free amount of _from\r\n        uint256 freeTotalFrom = balances[_from].sub(freezeTotal);\r\n\r\n        //Check if it is a freeze account\r\n        //Check if in Lock-up Period\r\n        //Check if the transfer amount > free amount\r\n        require(freezeStartTime == 0 || freezeDeadline < now || freeTotalFrom >= _value); \r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balances[_from].add(balances[_to]);\r\n        // Subtract from the sender\r\n        balances[_from] = balances[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        // Notify client the transfer\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserting that the total balances before and after the transaction should be the same\r\n        assert(balances[_from].add(balances[_to]) == previousBalances);\r\n    }\r\n\r\n    /// @notice Transfer tokens to account\r\n    /// @dev Send '_value' amount of tokens to address '_to'\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The token amount to send\r\n    /// @return Whether succeed\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfer tokens from other address\r\n    /// @dev Send '_value' amount of tokens from address '_from' to address '_to'\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The token amount to send\r\n    /// @return Whether succeed\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Set allowance for other address\r\n    /// @dev Allows '_spender' to spend no more than '_value' tokens in your behalf. If this function is called again it overwrites the current allowance with _value\r\n    /// @param _spender The address authorized to spend\r\n    /// @param _value The max amount they can spend\r\n    /// @return Whether succeed.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get the amount which '_spender' is still allowed to withdraw from '_owner'\r\n    /// @dev Get the amount which '_spender' is still allowed to withdraw from '_owner'\r\n    /// @param _owner Target address\r\n    /// @param _spender The address authorized to spend\r\n    /// @return The max amount can spend\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\r\n        return allowance[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_freezePeriod\",\"type\":\"uint256\"}],\"name\":\"issueAndFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"freezeStartTime\",\"type\":\"uint256\"},{\"name\":\"freezePeriod\",\"type\":\"uint256\"},{\"name\":\"freezeTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFreezeInfo\",\"outputs\":[{\"name\":\"_freezeStartTime\",\"type\":\"uint256\"},{\"name\":\"_freezePeriod\",\"type\":\"uint256\"},{\"name\":\"_freezeTotal\",\"type\":\"uint256\"},{\"name\":\"_freezeDeadline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_freezePeriod\",\"type\":\"uint256\"}],\"name\":\"IssueAndFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GTLToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000009502f9000000000000000000000000000000000000000000000000000000000000000013476f6c64656e2054696d65206f66204c69666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000347544c0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://262759ef76619c062b3c0d4a3005c9dae4390dc93b85eb853b675e549471d181"}]}