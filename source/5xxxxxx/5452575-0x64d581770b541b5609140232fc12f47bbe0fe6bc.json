{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @title Base Token contract - Functions to be implemented by token contracts.\r\ncontract BaseToken {\r\n    /*\r\n     * Implements ERC 20 standard.\r\n     * https://github.com/ethereum/EIPs/blob/f90864a3d2b2b45c4decf95efd26b3f0c276051a/EIPS/eip-20-token-standard.md\r\n     * https://github.com/ethereum/EIPs/issues/20\r\n     *\r\n     *  Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\r\n     *  https://github.com/ethereum/EIPs/issues/223\r\n     */\r\n\r\n    /*\r\n     * This is a slight change to the ERC20 base standard.\r\n     * function totalSupply() constant returns (uint256 supply);\r\n     * is replaced with:\r\n     * uint256 public totalSupply;\r\n     * This automatically creates a getter function for the totalSupply.\r\n     * This is moved to the base contract since public getter functions are not\r\n     * currently recognised as an implementation of the matching abstract\r\n     * function by the compiler.\r\n     */\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     * ERC 20\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    /*\r\n     * ERC 223\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n\r\n    /*\r\n     * Events\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // There is no ERC223 compatible Transfer event, with `_data` included.\r\n}\r\n\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n * https://github.com/ethereum/EIPs/issues/223\r\n */\r\n\r\n/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\r\ncontract ERC223ReceivingContract {\r\n\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _from Transaction initiator, analogue of msg.sender\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data containig a function signature and/or parameters\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n\r\n/// @title Standard token contract - Standard token implementation.\r\ncontract StandardToken is BaseToken {\r\n\r\n    /*\r\n     * Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @notice Send `_value` tokens to `_to` from `msg.sender`.\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\r\n    /// tokenFallback if sender is a contract.\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data to be sent to tokenFallback\r\n    /// @return Returns success of function call.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(transfer(_to, _value));\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly.\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfer `_value` tokens from `_from` to `_to` if `msg.sender` is allowed.\r\n    /// @dev Allows for an approved third party to transfer tokens from one\r\n    /// address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows `_spender` to transfer `_value` tokens from `msg.sender` to any address.\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    /// @return Returns success of function call.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != 0x0);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read functions\r\n     */\r\n    /// @dev Returns number of allowed tokens that a spender can transfer on\r\n    /// behalf of a token owner.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    /// @return Returns remaining allowance for spender.\r\n    function allowance(address _owner, address _spender)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by the given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @return Returns balance of owner.\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract Moneto is StandardToken {\r\n  \r\n  string public name = \"Moneto\";\r\n  string public symbol = \"MTO\";\r\n  uint8 public decimals = 18;\r\n\r\n  function Moneto(address saleAddress) public {\r\n    require(saleAddress != 0x0);\r\n\r\n    totalSupply = 42901786 * 10**18;\r\n    balances[saleAddress] = totalSupply;\r\n    emit Transfer(0x0, saleAddress, totalSupply);\r\n\r\n    assert(totalSupply == balances[saleAddress]);\r\n  }\r\n\r\n  function burn(uint num) public {\r\n    require(num > 0);\r\n    require(balances[msg.sender] >= num);\r\n    require(totalSupply >= num);\r\n\r\n    uint preBalance = balances[msg.sender];\r\n\r\n    balances[msg.sender] -= num;\r\n    totalSupply -= num;\r\n    emit Transfer(msg.sender, 0x0, num);\r\n\r\n    assert(balances[msg.sender] == preBalance - num);\r\n  }\r\n}\r\n\r\n\r\ncontract MonetoSale {\r\n    Moneto public token;\r\n\r\n    address public beneficiary;\r\n    address public alfatokenteam;\r\n    uint public alfatokenFee;\r\n    \r\n    uint public amountRaised;\r\n    uint public tokenSold;\r\n    \r\n    uint public constant PRE_SALE_START = 1523952000; // 17 April 2018, 08:00:00 GMT\r\n    uint public constant PRE_SALE_END = 1526543999; // 17 May 2018, 07:59:59 GMT\r\n    uint public constant SALE_START = 1528617600; // 10 June 2018,08:00:00 GMT\r\n    uint public constant SALE_END = 1531209599; // 10 July 2018, 07:59:59 GMT\r\n\r\n    uint public constant PRE_SALE_MAX_CAP = 2531250 * 10**18;\r\n    uint public constant SALE_MAX_CAP = 300312502 * 10**17;\r\n\r\n    uint public constant SALE_MIN_CAP = 2500 ether;\r\n\r\n    uint public constant PRE_SALE_PRICE = 1250;\r\n    uint public constant SALE_PRICE = 1000;\r\n\r\n    uint public constant PRE_SALE_MIN_BUY = 10 * 10**18;\r\n    uint public constant SALE_MIN_BUY = 1 * 10**18;\r\n\r\n    uint public constant PRE_SALE_1WEEK_BONUS = 35;\r\n    uint public constant PRE_SALE_2WEEK_BONUS = 15;\r\n    uint public constant PRE_SALE_3WEEK_BONUS = 5;\r\n    uint public constant PRE_SALE_4WEEK_BONUS = 0;\r\n\r\n    uint public constant SALE_1WEEK_BONUS = 10;\r\n    uint public constant SALE_2WEEK_BONUS = 7;\r\n    uint public constant SALE_3WEEK_BONUS = 5;\r\n    uint public constant SALE_4WEEK_BONUS = 3;\r\n    \r\n    mapping (address => uint) public icoBuyers;\r\n\r\n    Stages public stage;\r\n    \r\n    enum Stages {\r\n        Deployed,\r\n        Ready,\r\n        Ended,\r\n        Canceled\r\n    }\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == beneficiary);\r\n        _;\r\n    }\r\n\r\n    function MonetoSale(address _beneficiary, address _alfatokenteam) public {\r\n        beneficiary = _beneficiary;\r\n        alfatokenteam = _alfatokenteam;\r\n        alfatokenFee = 5 ether;\r\n\r\n        stage = Stages.Deployed;\r\n    }\r\n\r\n    function setup(address _token) public isOwner atStage(Stages.Deployed) {\r\n        require(_token != 0x0);\r\n        token = Moneto(_token);\r\n\r\n        stage = Stages.Ready;\r\n    }\r\n\r\n    function () payable public atStage(Stages.Ready) {\r\n        require((now >= PRE_SALE_START && now <= PRE_SALE_END) || (now >= SALE_START && now <= SALE_END));\r\n\r\n        uint amount = msg.value;\r\n        amountRaised += amount;\r\n\r\n        if (now >= SALE_START && now <= SALE_END) {\r\n            assert(icoBuyers[msg.sender] + msg.value >= msg.value);\r\n            icoBuyers[msg.sender] += amount;\r\n        }\r\n        \r\n        uint tokenAmount = amount * getPrice();\r\n        require(tokenAmount > getMinimumAmount());\r\n        uint allTokens = tokenAmount + getBonus(tokenAmount);\r\n        tokenSold += allTokens;\r\n\r\n        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\r\n            require(tokenSold <= PRE_SALE_MAX_CAP);\r\n        }\r\n        if (now >= SALE_START && now <= SALE_END) {\r\n            require(tokenSold <= SALE_MAX_CAP);\r\n        }\r\n\r\n        token.transfer(msg.sender, allTokens);\r\n    }\r\n\r\n    function transferEther(address _to, uint _amount) public isOwner {\r\n        require(_amount <= address(this).balance - alfatokenFee);\r\n        require(now < SALE_START || stage == Stages.Ended);\r\n        \r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function transferFee(address _to, uint _amount) public {\r\n        require(msg.sender == alfatokenteam);\r\n        require(_amount <= alfatokenFee);\r\n\r\n        alfatokenFee -= _amount;\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function endSale(address _to) public isOwner {\r\n        require(amountRaised >= SALE_MIN_CAP);\r\n\r\n        token.transfer(_to, tokenSold*3/7);\r\n        token.burn(token.balanceOf(address(this)));\r\n\r\n        stage = Stages.Ended;\r\n    }\r\n\r\n    function cancelSale() public {\r\n        require(amountRaised < SALE_MIN_CAP);\r\n        require(now > SALE_END);\r\n\r\n        stage = Stages.Canceled;\r\n    }\r\n\r\n    function takeEtherBack() public atStage(Stages.Canceled) returns (bool) {\r\n        return proxyTakeEtherBack(msg.sender);\r\n    }\r\n\r\n    function proxyTakeEtherBack(address receiverAddress) public atStage(Stages.Canceled) returns (bool) {\r\n        require(receiverAddress != 0x0);\r\n        \r\n        if (icoBuyers[receiverAddress] == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint amount = icoBuyers[receiverAddress];\r\n        icoBuyers[receiverAddress] = 0;\r\n        receiverAddress.transfer(amount);\r\n\r\n        assert(icoBuyers[receiverAddress] == 0);\r\n        return true;\r\n    }\r\n\r\n    function getBonus(uint amount) public view returns (uint) {\r\n        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\r\n            uint w = now - PRE_SALE_START;\r\n            if (w <= 1 weeks) {\r\n                return amount * PRE_SALE_1WEEK_BONUS/100;\r\n            }\r\n            if (w > 1 weeks && w <= 2 weeks) {\r\n                return amount * PRE_SALE_2WEEK_BONUS/100;\r\n            }\r\n            if (w > 2 weeks && w <= 3 weeks) {\r\n                return amount * PRE_SALE_3WEEK_BONUS/100;\r\n            }\r\n            if (w > 3 weeks && w <= 4 weeks) {\r\n                return amount * PRE_SALE_4WEEK_BONUS/100;\r\n            }\r\n            return 0;\r\n        }\r\n        if (now >= SALE_START && now <= SALE_END) {\r\n            uint w2 = now - SALE_START;\r\n            if (w2 <= 1 weeks) {\r\n                return amount * SALE_1WEEK_BONUS/100;\r\n            }\r\n            if (w2 > 1 weeks && w2 <= 2 weeks) {\r\n                return amount * SALE_2WEEK_BONUS/100;\r\n            }\r\n            if (w2 > 2 weeks && w2 <= 3 weeks) {\r\n                return amount * SALE_3WEEK_BONUS/100;\r\n            }\r\n            if (w2 > 3 weeks && w2 <= 4 weeks) {\r\n                return amount * SALE_4WEEK_BONUS/100;\r\n            }\r\n            return 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getPrice() public view returns (uint) {\r\n        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\r\n            return PRE_SALE_PRICE;\r\n        }\r\n        if (now >= SALE_START && now <= SALE_END) {\r\n            return SALE_PRICE;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getMinimumAmount() public view returns (uint) {\r\n        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\r\n            return PRE_SALE_MIN_BUY;\r\n        }\r\n        if (now >= SALE_START && now <= SALE_END) {\r\n            return SALE_MIN_BUY;\r\n        }\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_1WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alfatokenFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_3WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_MIN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeEtherBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_4WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_3WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_MIN_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_MIN_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_2WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_2WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_1WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alfatokenteam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"proxyTakeEtherBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_4WEEK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_alfatokenteam\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MonetoSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005986ec0b3487EBD81df899E420bBbB301330cfa700000000000000000000000082284955881f3ECD132954d4B5B1dEca98533D29","Library":"","SwarmSource":"bzzr://d53e79f7ab18b022d8237bfec6b6182390458d8d97b39caee37e98965a91f44c"}]}