{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Vineyard{\r\n\r\n    // All grape units are in grape-secs/day\r\n    uint256 constant public GRAPE_SECS_TO_GROW_VINE = 86400; // 1 grape\r\n    uint256 constant public STARTING_VINES = 300;\r\n    uint256 constant public VINE_CAPACITY_PER_LAND = 1000;\r\n\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    address public ceoWallet;\r\n\r\n    mapping (address => uint256) public vineyardVines;\r\n    mapping (address => uint256) public purchasedGrapes;\r\n    mapping (address => uint256) public lastHarvest;\r\n    mapping (address => address) public referrals;\r\n\r\n    uint256 public marketGrapes;\r\n\r\n    mapping (address => uint256) public landMultiplier;\r\n    mapping (address => uint256) public totalVineCapacity;\r\n    mapping (address => uint256) public wineInCellar;\r\n    mapping (address => uint256) public wineProductionRate;\r\n    uint256 public grapesToBuildWinery = 43200000000; // 500000 grapes\r\n    uint256 public grapesToProduceBottle = 3456000000; //40000 grapes\r\n\r\n    address constant public LAND_ADDRESS = 0x2C1E693cCC537c8c98C73FaC0262CD7E18a3Ad60;\r\n    LandInterface landContract;\r\n\r\n    function Vineyard(address _wallet) public{\r\n        require(_wallet != address(0));\r\n        ceoAddress = msg.sender;\r\n        ceoWallet = _wallet;\r\n        landContract = LandInterface(LAND_ADDRESS);\r\n    }\r\n\r\n    function transferWalletOwnership(address newWalletAddress) public {\r\n      require(msg.sender == ceoAddress);\r\n      require(newWalletAddress != address(0));\r\n      ceoWallet = newWalletAddress;\r\n    }\r\n\r\n    modifier initializedMarket {\r\n        require(initialized);\r\n        _;\r\n    }\r\n\r\n    function harvest(address ref) initializedMarket public {\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 grapesUsed = getMyGrapes();\r\n        uint256 newVines = SafeMath.div(grapesUsed, GRAPE_SECS_TO_GROW_VINE);\r\n        vineyardVines[msg.sender] = SafeMath.add(vineyardVines[msg.sender], newVines);\r\n        if (vineyardVines[msg.sender] > totalVineCapacity[msg.sender]) {\r\n          vineyardVines[msg.sender] = totalVineCapacity[msg.sender];\r\n        }\r\n        purchasedGrapes[msg.sender] = 0;\r\n        lastHarvest[msg.sender] = now;\r\n\r\n        //send referral grapes (add to purchase talley)\r\n        purchasedGrapes[referrals[msg.sender]]=SafeMath.add(purchasedGrapes[referrals[msg.sender]],SafeMath.div(grapesUsed,5));\r\n    }\r\n\r\n    function produceWine() initializedMarket public {\r\n        uint256 hasGrapes = getMyGrapes();\r\n        uint256 wineBottles = SafeMath.div(SafeMath.mul(hasGrapes, wineProductionRate[msg.sender]), grapesToProduceBottle);\r\n        purchasedGrapes[msg.sender] = 0; //Remainder of grapes are lost in wine production process\r\n        lastHarvest[msg.sender] = now;\r\n        //Every bottle of wine increases the grapes to make next by 10\r\n        grapesToProduceBottle = SafeMath.add(SafeMath.mul(864000, wineBottles), grapesToProduceBottle);\r\n        wineInCellar[msg.sender] = SafeMath.add(wineInCellar[msg.sender],wineBottles);\r\n    }\r\n\r\n    function buildWinery() initializedMarket public {\r\n        require(wineProductionRate[msg.sender] <= landMultiplier[msg.sender]);\r\n        uint256 hasGrapes = getMyGrapes();\r\n        require(hasGrapes >= grapesToBuildWinery);\r\n\r\n        uint256 grapesLeft = SafeMath.sub(hasGrapes, grapesToBuildWinery);\r\n        purchasedGrapes[msg.sender] = grapesLeft;\r\n        lastHarvest[msg.sender] = now;\r\n        wineProductionRate[msg.sender] = wineProductionRate[msg.sender] + 1;\r\n        grapesToBuildWinery = SafeMath.add(grapesToBuildWinery, 21600000000);\r\n        // winery uses some portion of land, so must remove some vines\r\n        vineyardVines[msg.sender] = SafeMath.sub(vineyardVines[msg.sender],1000);\r\n    }\r\n\r\n    function sellGrapes() initializedMarket public {\r\n        uint256 hasGrapes = getMyGrapes();\r\n        uint256 grapesToSell = hasGrapes;\r\n        if (grapesToSell > marketGrapes) {\r\n          // don't allow sell larger than the current market holdings\r\n          grapesToSell = marketGrapes;\r\n        }\r\n        uint256 grapeValue = calculateGrapeSell(grapesToSell);\r\n        uint256 fee = devFee(grapeValue);\r\n        purchasedGrapes[msg.sender] = SafeMath.sub(hasGrapes,grapesToSell);\r\n        lastHarvest[msg.sender] = now;\r\n        marketGrapes = SafeMath.add(marketGrapes,grapesToSell);\r\n        ceoWallet.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(grapeValue, fee));\r\n    }\r\n\r\n    function buyGrapes() initializedMarket public payable{\r\n        require(msg.value <= SafeMath.sub(this.balance,msg.value));\r\n        uint256 grapesBought = calculateGrapeBuy(msg.value, SafeMath.sub(this.balance, msg.value));\r\n        grapesBought = SafeMath.sub(grapesBought, devFee(grapesBought));\r\n        marketGrapes = SafeMath.sub(marketGrapes, grapesBought);\r\n        ceoWallet.transfer(devFee(msg.value));\r\n        purchasedGrapes[msg.sender] = SafeMath.add(purchasedGrapes[msg.sender],grapesBought);\r\n    }\r\n\r\n    function calculateTrade(uint256 valueIn, uint256 marketInv, uint256 Balance) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(Balance, 10000), SafeMath.add(SafeMath.div(SafeMath.add(SafeMath.mul(marketInv,10000), SafeMath.mul(valueIn, 5000)), valueIn), 5000));\r\n    }\r\n\r\n    function calculateGrapeSell(uint256 grapes) public view returns(uint256) {\r\n        return calculateTrade(grapes, marketGrapes, this.balance);\r\n    }\r\n\r\n    function calculateGrapeBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketGrapes);\r\n    }\r\n\r\n    function calculateGrapeBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateGrapeBuy(eth,this.balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,3), 100);\r\n    }\r\n\r\n    function seedMarket(uint256 grapes) public payable{\r\n        require(marketGrapes == 0);\r\n        initialized = true;\r\n        marketGrapes = grapes;\r\n    }\r\n\r\n    function getFreeVines() initializedMarket public {\r\n        require(vineyardVines[msg.sender] == 0);\r\n        createPlotVineyard(msg.sender);\r\n    }\r\n\r\n    // For existing plot holders to get added to Mini-game\r\n    function addFreeVineyard(address adr) initializedMarket public {\r\n        require(msg.sender == ceoAddress);\r\n        require(vineyardVines[adr] == 0);\r\n        createPlotVineyard(adr);\r\n    }\r\n\r\n    function createPlotVineyard(address player) private {\r\n        lastHarvest[player] = now;\r\n        vineyardVines[player] = STARTING_VINES;\r\n        wineProductionRate[player] = 1;\r\n        landMultiplier[player] = 1;\r\n        totalVineCapacity[player] = VINE_CAPACITY_PER_LAND;\r\n    }\r\n\r\n    function setLandProductionMultiplier(address adr) public {\r\n        landMultiplier[adr] = SafeMath.add(1,SafeMath.add(landContract.addressToNumVillages(adr),SafeMath.add(SafeMath.mul(landContract.addressToNumTowns(adr),3),SafeMath.mul(landContract.addressToNumCities(adr),9))));\r\n        totalVineCapacity[adr] = SafeMath.mul(landMultiplier[adr],VINE_CAPACITY_PER_LAND);\r\n    }\r\n\r\n    function setLandProductionMultiplierCCUser(bytes32 user, address adr) public {\r\n        require(msg.sender == ceoAddress);\r\n        landMultiplier[adr] = SafeMath.add(1,SafeMath.add(landContract.userToNumVillages(user), SafeMath.add(SafeMath.mul(landContract.userToNumTowns(user), 3), SafeMath.mul(landContract.userToNumCities(user), 9))));\r\n        totalVineCapacity[adr] = SafeMath.mul(landMultiplier[adr],VINE_CAPACITY_PER_LAND);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function getMyVines() public view returns(uint256) {\r\n        return vineyardVines[msg.sender];\r\n    }\r\n\r\n    function getMyGrapes() public view returns(uint256) {\r\n        return SafeMath.add(purchasedGrapes[msg.sender],getGrapesSinceLastHarvest(msg.sender));\r\n    }\r\n\r\n    function getMyWine() public view returns(uint256) {\r\n        return wineInCellar[msg.sender];\r\n    }\r\n\r\n    function getWineProductionRate() public view returns(uint256) {\r\n        return wineProductionRate[msg.sender];\r\n    }\r\n\r\n    function getGrapesSinceLastHarvest(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = SafeMath.sub(now, lastHarvest[adr]);\r\n        return SafeMath.mul(secondsPassed, SafeMath.mul(vineyardVines[adr], SafeMath.add(1,SafeMath.div(SafeMath.sub(landMultiplier[adr],1),5))));\r\n    }\r\n\r\n    function getMyLandMultiplier() public view returns(uint256) {\r\n        return landMultiplier[msg.sender];\r\n    }\r\n\r\n    function getGrapesToBuildWinery() public view returns(uint256) {\r\n        return grapesToBuildWinery;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\ncontract LandInterface {\r\n    function addressToNumVillages(address adr) public returns (uint256);\r\n    function addressToNumTowns(address adr) public returns (uint256);\r\n    function addressToNumCities(address adr) public returns (uint256);\r\n\r\n    function userToNumVillages(bytes32 userId) public returns (uint256);\r\n    function userToNumTowns(bytes32 userId) public returns (uint256);\r\n    function userToNumCities(bytes32 userId) public returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMyGrapes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedGrapes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateGrapeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLandProductionMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVineCapacity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueIn\",\"type\":\"uint256\"},{\"name\":\"marketInv\",\"type\":\"uint256\"},{\"name\":\"Balance\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GRAPE_SECS_TO_GROW_VINE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grapes\",\"type\":\"uint256\"}],\"name\":\"calculateGrapeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grapes\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buildWinery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyLandMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vineyardVines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"produceWine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAND_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grapesToProduceBottle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateGrapeBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"bytes32\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLandProductionMultiplierCCUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grapesToBuildWinery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyGrapes\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWineProductionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VINE_CAPACITY_PER_LAND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGrapesToBuildWinery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyWine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketGrapes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"landMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getGrapesSinceLastHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyVines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wineProductionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addFreeVineyard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellGrapes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeVines\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_VINES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wineInCellar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Vineyard","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009012c8b9fccd553ae3fbdc25719af965669dad87","Library":"","SwarmSource":"bzzr://584666d8cda9c0aacc30b177f69e78952d12405512118d967a61dbf36401110a"}]}