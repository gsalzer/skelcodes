{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n/**\r\n * @title LandSale\r\n * @dev Landsale contract is a timed, refundable crowdsale for land. It has\r\n * a tiered increasing price element based on number of land sold per type.\r\n * @notice We omit a fallback function to prevent accidental sends to this contract.\r\n */\r\ncontract LandSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public openingTime;\r\n    uint256 public closingTime;\r\n\r\n    uint256 constant public VILLAGE_START_PRICE = 1200000000000000; // 0.0012 ETH\r\n    uint256 constant public TOWN_START_PRICE = 5000000000000000; // 0.005 ETH\r\n    uint256 constant public CITY_START_PRICE = 20000000000000000; // 0.02 ETH\r\n\r\n    uint256 constant public VILLAGE_INCREASE_RATE = 500000000000000; // 0.0005 ETH\r\n    uint256 constant public TOWN_INCREASE_RATE = 2500000000000000; // 0.0025 ETH\r\n    uint256 constant public CITY_INCREASE_RATE = 12500000000000000; // 0.0125 ETH\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    // minimum amount of funds to be raised in wei\r\n    uint256 public goal;\r\n\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault public vault;\r\n\r\n    // Array of addresses who purchased land via their ethereum address\r\n    address[] public walletUsers;\r\n    uint256 public walletUserCount;\r\n\r\n    // Array of users who purchased land via other method (ex. CC)\r\n    bytes32[] public ccUsers;\r\n    uint256 public ccUserCount;\r\n\r\n    // Number of each landType sold\r\n    uint256 public villagesSold;\r\n    uint256 public townsSold;\r\n    uint256 public citiesSold;\r\n\r\n\r\n    // 0 - Plot\r\n    // 1 - Village\r\n    // 2 - Town\r\n    // 3 - City\r\n\r\n    // user wallet address -> # of land\r\n    mapping (address => uint256) public addressToNumVillages;\r\n    mapping (address => uint256) public addressToNumTowns;\r\n    mapping (address => uint256) public addressToNumCities;\r\n\r\n    // user id hash -> # of land\r\n    mapping (bytes32 => uint256) public userToNumVillages;\r\n    mapping (bytes32 => uint256) public userToNumTowns;\r\n    mapping (bytes32 => uint256) public userToNumCities;\r\n\r\n    bool private paused = false;\r\n    bool public isFinalized = false;\r\n\r\n    /**\r\n     * @dev Send events for every purchase. Also send an event when LandSale is complete\r\n     */\r\n    event LandPurchased(address indexed purchaser, uint256 value, uint8 landType, uint256 quantity);\r\n    event LandPurchasedCC(bytes32 indexed userId, address indexed purchaser, uint8 landType, uint256 quantity);\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Reverts if not in crowdsale time range.\r\n     */\r\n    modifier onlyWhileOpen {\r\n        require(block.timestamp >= openingTime && block.timestamp <= closingTime && !paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor. One-time set up of goal and opening/closing times of landsale\r\n     */\r\n    function LandSale(address _wallet, uint256 _goal,\r\n                        uint256 _openingTime, uint256 _closingTime) public {\r\n        require(_wallet != address(0));\r\n        require(_goal > 0);\r\n        require(_openingTime >= block.timestamp);\r\n        require(_closingTime >= _openingTime);\r\n\r\n        wallet = _wallet;\r\n        vault = new RefundVault(wallet);\r\n        goal = _goal;\r\n        openingTime = _openingTime;\r\n        closingTime = _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new ethereum wallet users to array\r\n     */\r\n    function addWalletAddress(address walletAddress) private {\r\n        if ((addressToNumVillages[walletAddress] == 0) &&\r\n            (addressToNumTowns[walletAddress] == 0) &&\r\n            (addressToNumCities[walletAddress] == 0)) {\r\n            // only add address to array during first land purchase\r\n            walletUsers.push(msg.sender);\r\n            walletUserCount++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add new CC users to array\r\n     */\r\n    function addCCUser(bytes32 user) private {\r\n        if ((userToNumVillages[user] == 0) &&\r\n            (userToNumTowns[user] == 0) &&\r\n            (userToNumCities[user] == 0)) {\r\n            // only add user to array during first land purchase\r\n            ccUsers.push(user);\r\n            ccUserCount++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase a village. For bulk purchase, current price honored for all\r\n     * villages purchased.\r\n     */\r\n    function purchaseVillage(uint256 numVillages) payable public onlyWhileOpen {\r\n        require(msg.value >= (villagePrice()*numVillages));\r\n        require(numVillages > 0);\r\n\r\n        weiRaised = weiRaised.add(msg.value);\r\n\r\n        villagesSold = villagesSold.add(numVillages);\r\n        addWalletAddress(msg.sender);\r\n        addressToNumVillages[msg.sender] = addressToNumVillages[msg.sender].add(numVillages);\r\n\r\n        _forwardFunds();\r\n        LandPurchased(msg.sender, msg.value, 1, numVillages);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase a town. For bulk purchase, current price honored for all\r\n     * towns purchased.\r\n     */\r\n    function purchaseTown(uint256 numTowns) payable public onlyWhileOpen {\r\n        require(msg.value >= (townPrice()*numTowns));\r\n        require(numTowns > 0);\r\n\r\n        weiRaised = weiRaised.add(msg.value);\r\n\r\n        townsSold = townsSold.add(numTowns);\r\n        addWalletAddress(msg.sender);\r\n        addressToNumTowns[msg.sender] = addressToNumTowns[msg.sender].add(numTowns);\r\n\r\n        _forwardFunds();\r\n        LandPurchased(msg.sender, msg.value, 2, numTowns);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase a city. For bulk purchase, current price honored for all\r\n     * cities purchased.\r\n     */\r\n    function purchaseCity(uint256 numCities) payable public onlyWhileOpen {\r\n        require(msg.value >= (cityPrice()*numCities));\r\n        require(numCities > 0);\r\n\r\n        weiRaised = weiRaised.add(msg.value);\r\n\r\n        citiesSold = citiesSold.add(numCities);\r\n        addWalletAddress(msg.sender);\r\n        addressToNumCities[msg.sender] = addressToNumCities[msg.sender].add(numCities);\r\n\r\n        _forwardFunds();\r\n        LandPurchased(msg.sender, msg.value, 3, numCities);\r\n    }\r\n\r\n    /**\r\n     * @dev Accounting for the CC purchases for audit purposes (no actual ETH transfer here)\r\n     */\r\n    function purchaseLandWithCC(uint8 landType, bytes32 userId, uint256 num) public onlyOwner onlyWhileOpen {\r\n        require(landType <= 3);\r\n        require(num > 0);\r\n\r\n        addCCUser(userId);\r\n\r\n        if (landType == 3) {\r\n            weiRaised = weiRaised.add(cityPrice()*num);\r\n            citiesSold = citiesSold.add(num);\r\n            userToNumCities[userId] = userToNumCities[userId].add(num);\r\n        } else if (landType == 2) {\r\n            weiRaised = weiRaised.add(townPrice()*num);\r\n            townsSold = townsSold.add(num);\r\n            userToNumTowns[userId] = userToNumTowns[userId].add(num);\r\n        } else if (landType == 1) {\r\n            weiRaised = weiRaised.add(villagePrice()*num);\r\n            villagesSold = villagesSold.add(num);\r\n            userToNumVillages[userId] = userToNumVillages[userId].add(num);\r\n        }\r\n\r\n        LandPurchasedCC(userId, msg.sender, landType, num);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current price of a village. Price raises every 10 purchases.\r\n     */\r\n    function villagePrice() view public returns(uint256) {\r\n        return VILLAGE_START_PRICE.add((villagesSold.div(10).mul(VILLAGE_INCREASE_RATE)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current price of a town. Price raises every 10 purchases\r\n     */\r\n    function townPrice() view public returns(uint256) {\r\n        return TOWN_START_PRICE.add((townsSold.div(10).mul(TOWN_INCREASE_RATE)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current price of a city. Price raises every 10 purchases\r\n     */\r\n    function cityPrice() view public returns(uint256) {\r\n        return CITY_START_PRICE.add((citiesSold.div(10).mul(CITY_INCREASE_RATE)));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to pause puchases during the landsale\r\n     */\r\n    function pause() onlyOwner public {\r\n        paused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to resume puchases during the landsale\r\n     */\r\n    function resume() onlyOwner public {\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to check the paused status\r\n     * @return Whether landsale is paused\r\n     */\r\n    function isPaused () onlyOwner public view returns(bool) {\r\n        return paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        return block.timestamp > closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful\r\n     */\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether funding goal was reached.\r\n     * @return Whether funding goal was reached\r\n     */\r\n    function goalReached() public view returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n    /**\r\n     * @dev vault finalization task, called when owner calls finalize()\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasClosed());\r\n\r\n        if (goalReached()) {\r\n          vault.close();\r\n        } else {\r\n          vault.enableRefunds();\r\n        }\r\n\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\r\n     */\r\n    function _forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOWN_START_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CITY_START_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToNumVillages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToNumCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"townPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTowns\",\"type\":\"uint256\"}],\"name\":\"purchaseTown\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userToNumCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VILLAGE_START_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOWN_INCREASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ccUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VILLAGE_INCREASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"landType\",\"type\":\"uint8\"},{\"name\":\"userId\",\"type\":\"bytes32\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"purchaseLandWithCC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"townsSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"villagesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userToNumVillages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CITY_INCREASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToNumTowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numVillages\",\"type\":\"uint256\"}],\"name\":\"purchaseVillage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userToNumTowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citiesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"villagePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cityPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ccUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numCities\",\"type\":\"uint256\"}],\"name\":\"purchaseCity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"LandPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"landType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"LandPurchasedCC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LandSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009012c8b9fccd553ae3fbdc25719af965669dad87000000000000000000000000000000000000000000000002017a67f731740000000000000000000000000000000000000000000000000000000000005afda700000000000000000000000000000000000000000000000000000000005b253400","Library":"","SwarmSource":"bzzr://50bcbf7bd331cf652a13f46c79d243b5d56f0b51c556512c9c5117dbd236f14a"}]}