{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\tif (msg.sender != owner) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\tif (newOwner != address(0)) {\r\n\t\t\towner = newOwner;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n\tuint256 public tokenTotalSupply;\r\n\r\n\tfunction balanceOf(address who) public view returns(uint256);\r\n\r\n\tfunction allowance(address owner, address spender) public view returns(uint256);\r\n\r\n\tfunction transfer(address to, uint256 value) public returns (bool success);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\r\n\tfunction approve(address spender, uint256 value) public returns (bool success);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction totalSupply() public view returns (uint256 availableSupply);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract SaveToken is ERC20, Ownable {\r\n\tusing SafeMath for uint;\r\n\r\n\tstring public name = \"SaveToken\";\r\n\tstring public symbol = \"SAVE\";\r\n\tuint public decimals = 18;\r\n\r\n\tmapping(address => uint256) affiliate;\r\n\tfunction getAffiliate(address who) public view returns(uint256) {\r\n\t\treturn affiliate[who];\r\n\t}\r\n\r\n    struct AffSender {\r\n        bytes32 aff_code;\r\n        uint256 amount;\r\n    }\r\n    uint public no_aff = 0;\r\n\tmapping(uint => AffSender) affiliate_senders;\r\n\tfunction getAffiliateSender(bytes32 who) public view returns(uint256) {\r\n\t    \r\n\t    for (uint i = 0; i < no_aff; i++) {\r\n            if(affiliate_senders[i].aff_code == who)\r\n            {\r\n                return affiliate_senders[i].amount;\r\n            }\r\n        }\r\n        \r\n\t\treturn 1;\r\n\t}\r\n\tfunction getAffiliateSenderPosCode(uint pos) public view returns(bytes32) {\r\n\t    if(pos >= no_aff)\r\n\t    {\r\n\t        return 1;\r\n\t    }\r\n\t    return affiliate_senders[pos].aff_code;\r\n\t}\r\n\tfunction getAffiliateSenderPosAmount(uint pos) public view returns(uint256) {\r\n\t    if(pos >= no_aff)\r\n\t    {\r\n\t        return 2;\r\n\t    }\r\n\t    return affiliate_senders[pos].amount;\r\n\t}\r\n\r\n\tuint256 public tokenTotalSupply = 0;\r\n\tuint256 public trashedTokens = 0;\r\n\tuint256 public hardcap = 350 * 1000000 * (10 ** decimals); // 350 million tokens\r\n\r\n\tuint public ethToToken = 6000; // 1 eth buys 6 thousands tokens\r\n\tuint public noContributors = 0;\r\n\r\n\r\n\t//-----------------------------bonus periods\r\n\tuint public tokenBonusForFirst = 10; // multiplyer in %\r\n\tuint256 public soldForFirst = 0;\r\n\tuint256 public maximumTokensForFirst = 55 * 1000000 * (10 ** decimals); // 55 million\r\n\r\n\tuint public tokenBonusForSecond = 5; // multiplyer in %\r\n\tuint256 public soldForSecond = 0;\r\n\tuint256 public maximumTokensForSecond = 52.5 * 1000000 * (10 ** decimals); // 52 million 500 thousands\r\n\r\n\tuint public tokenBonusForThird = 4; // multiplyer in %\r\n\tuint256 public soldForThird = 0;\r\n\tuint256 public maximumTokensForThird = 52 * 1000000 * (10 ** decimals); // 52 million\r\n\r\n\tuint public tokenBonusForForth = 3; // multiplyer in %\r\n\tuint256 public soldForForth = 0;\r\n\tuint256 public maximumTokensForForth = 51.5 * 1000000 * (10 ** decimals); // 51 million 500 thousands\r\n\r\n\tuint public tokenBonusForFifth = 0; // multiplyer in %\r\n\tuint256 public soldForFifth = 0;\r\n\tuint256 public maximumTokensForFifth = 50 * 1000000 * (10 ** decimals); // 50 million\r\n\r\n\tuint public presaleStart = 1519344000; //2018-02-23T00:00:00+00:00\r\n\tuint public presaleEnd = 1521849600; //2018-03-24T00:00:00+00:00\r\n    uint public weekOneStart = 1524355200; //2018-04-22T00:00:00+00:00\r\n    uint public weekTwoStart = 1525132800; //2018-05-01T00:00:00+00:00\r\n    uint public weekThreeStart = 1525824000; //2018-05-09T00:00:00+00:00\r\n    uint public weekFourStart = 1526601600; //2018-05-18T00:00:00+00:00\r\n    uint public tokenSaleEnd = 1527292800; //2018-05-26T00:00:00+00:00\r\n    \r\n    uint public saleOn = 1;\r\n    uint public disown = 0;\r\n\r\n\t//uint256 public maximumTokensForReserve = 89 * 1000000 * (10 ** decimals); // 89 million\r\n\taddress public ownerVault;\r\n\r\n\tmapping(address => uint256) balances;\r\n\tmapping(address => mapping(address => uint256)) allowed;\r\n\r\n\t/**\r\n\t * @dev Fix for the ERC20 short address attack.\r\n\t */\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tif (msg.data.length < size + 4) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev modifier to allow token creation only when the hardcap has not been reached\r\n\t */\r\n\tmodifier isUnderHardCap() {\r\n\t\trequire(tokenTotalSupply <= hardcap);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Constructor\r\n\t */\r\n\tfunction SaveToken() public {\r\n\t\townerVault = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev transfer token for a specified address\r\n\t * @param _to The address to transfer to.\r\n\t * @param _value The amount to be transferred.\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another\r\n\t * @param _from address The address which you want to send tokens from\r\n\t * @param _to address The address which you want to transfer to\r\n\t * @param _value uint256 the amout of tokens to be transfered\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool success) {\r\n\t\tuint256 _allowance = allowed[_from][msg.sender];\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another according to off exchange agreements\r\n\t * @param _from address The address which you want to send tokens from\r\n\t * @param _to address The address which you want to transfer to\r\n\t * @param _value uint256 the amount of tokens to be transferred\r\n\t */\r\n\tfunction masterTransferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public onlyOwner returns (bool success) {\r\n\t    if(disown == 1) revert();\r\n\t    \r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256 availableSupply) {\r\n\t\treturn tokenTotalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Gets the balance of the specified address.\r\n\t * @param _owner The address to query the the balance of.\r\n\t * @return An uint256 representing the amount owned by the passed address.\r\n\t */\r\n\tfunction balanceOf(address _owner) public view returns(uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t * @param _spender The address which will spend the funds.\r\n\t * @param _value The amount of tokens to be spent.\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\r\n\t\t// To change the approve amount you first have to reduce the addresses`\r\n\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n\t\t//  already 0 to mitigate the race condition described here:\r\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\tif ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n\t\t\trevert();\r\n\t\t}\r\n\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n\t * @param _owner address The address which owns the funds.\r\n\t * @param _spender address The address which will spend the funds.\r\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t */\r\n\tfunction allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the owner to change the token exchange rate.\r\n\t * @param _ratio the new eth to token ration\r\n\t */\r\n\tfunction changeEthToTokenRation(uint8 _ratio) public onlyOwner {\r\n\t\tif (_ratio != 0) {\r\n\t\t\tethToToken = _ratio;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev convenience show balance\r\n\t */\r\n\tfunction showEthBalance() view public returns(uint256 remaining) {\r\n\t\treturn this.balance;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev burn tokens if need to\r\n\t * @param value token with decimals\r\n\t * @param from burn address\r\n\t */\r\n\tfunction decreaseSupply(uint256 value, address from) public onlyOwner returns (bool) {\r\n\t    if(disown == 1) revert();\r\n\t    \r\n\t\tbalances[from] = balances[from].sub(value);\r\n\t\ttrashedTokens = trashedTokens.add(value);\r\n\t\ttokenTotalSupply = tokenTotalSupply.sub(value);\r\n\t\tTransfer(from, 0, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t *  Send ETH with affilate code.\r\n\t */\r\n\tfunction BuyTokensWithAffiliate(address _affiliate) public isUnderHardCap payable\r\n\t{\r\n\t\taffiliate[_affiliate] += msg.value;\r\n\t\tif (_affiliate == msg.sender){  revert(); }\r\n\t\tBuyTokens();\r\n\t}\r\n\r\n\t/**\r\n\t *  Allows owner to create tokens without ETH\r\n\t */\r\n\tfunction mintTokens(address _address, uint256 amount) public onlyOwner isUnderHardCap\r\n\t{\r\n\t    if(disown == 1) revert();\r\n\t    \r\n\t\tif (amount + tokenTotalSupply > hardcap) revert();\r\n\t\tif (amount < 1) revert();\r\n\r\n\t\t//add tokens to balance\r\n\t\tbalances[_address] = balances[_address] + amount;\r\n\r\n\t\t//increase total tokens\r\n\t\ttokenTotalSupply = tokenTotalSupply.add(amount);\r\n\t\tTransfer(this, _address, amount);\r\n\t\tnoContributors++;\r\n\t}\r\n\r\n\t/**\r\n\t *  @dev Change owner vault.\r\n\t */\r\n\tfunction changeOwnerVault(address new_vault) public onlyOwner\r\n\t{\r\n\t    ownerVault = new_vault;\r\n    }\r\n    \r\n\t/**\r\n\t *  @dev Change periods.\r\n\t */\r\n\tfunction changePeriod(uint period_no, uint new_value) public onlyOwner\r\n\t{\r\n\t\tif(period_no == 1)\r\n\t\t{\r\n\t\t    presaleStart = new_value;\r\n\t\t}\r\n\t\telse if(period_no == 2)\r\n\t\t{\r\n\t\t    presaleEnd = new_value;\r\n\t\t}\r\n\t\telse if(period_no == 3)\r\n\t\t{\r\n\t\t    weekOneStart = new_value;\r\n\t\t}\r\n\t\telse if(period_no == 4)\r\n\t\t{\r\n\t\t    weekTwoStart = new_value;\r\n\t\t}\r\n\t\telse if(period_no == 5)\r\n\t\t{\r\n\t\t    weekThreeStart = new_value;\r\n\t\t}\r\n\t\telse if(period_no == 6)\r\n\t\t{\r\n\t\t    weekFourStart = new_value;\r\n\t\t}\r\n\t\telse if(period_no == 7)\r\n\t\t{\r\n\t\t    tokenSaleEnd = new_value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  @dev Change saleOn.\r\n\t */\r\n\tfunction changeSaleOn(uint new_value) public onlyOwner\r\n\t{\r\n\t    if(disown == 1) revert();\r\n\t    \r\n\t\tsaleOn = new_value;\r\n\t}\r\n\r\n\t/**\r\n\t *  @dev No more god like.\r\n\t */\r\n\tfunction changeDisown(uint new_value) public onlyOwner\r\n\t{\r\n\t    if(new_value == 1)\r\n\t    {\r\n\t        disown = 1;\r\n\t    }\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows anyone to create tokens by depositing ether.\r\n\t */\r\n\tfunction BuyTokens() public isUnderHardCap payable {\r\n\t\tuint256 tokens;\r\n\t\tuint256 bonus;\r\n\r\n        if(saleOn == 0) revert();\r\n        \r\n\t\tif (now < presaleStart) revert();\r\n\r\n\t\t//this is pause period\r\n\t\tif (now >= presaleEnd && now <= weekOneStart) revert();\r\n\r\n\t\t//sale has ended\r\n\t\tif (now >= tokenSaleEnd) revert();\r\n\r\n\t\t//pre-sale\r\n\t\tif (now >= presaleStart && now <= presaleEnd)\r\n\t\t{\r\n\t\t\tbonus = ethToToken.mul(msg.value).mul(tokenBonusForFirst).div(100);\r\n\t\t\ttokens = ethToToken.mul(msg.value).add(bonus);\r\n\t\t\tsoldForFirst = soldForFirst.add(tokens);\r\n\t\t\tif (soldForFirst > maximumTokensForFirst) revert();\r\n\t\t}\r\n\r\n\t\t//public first week\r\n\t\tif (now >= weekOneStart && now <= weekTwoStart)\r\n\t\t{\r\n\t\t\tbonus = ethToToken.mul(msg.value).mul(tokenBonusForSecond).div(100);\r\n\t\t\ttokens = ethToToken.mul(msg.value).add(bonus);\r\n\t\t\tsoldForSecond = soldForSecond.add(tokens);\r\n\t\t\tif (soldForSecond > maximumTokensForSecond.add(maximumTokensForFirst).sub(soldForFirst)) revert();\r\n\t\t}\r\n\r\n\t\t//public second week\r\n\t\tif (now >= weekTwoStart && now <= weekThreeStart)\r\n\t\t{\r\n\t\t\tbonus = ethToToken.mul(msg.value).mul(tokenBonusForThird).div(100);\r\n\t\t\ttokens = ethToToken.mul(msg.value).add(bonus);\r\n\t\t\tsoldForThird = soldForThird.add(tokens);\r\n\t\t\tif (soldForThird > maximumTokensForThird.add(maximumTokensForFirst).sub(soldForFirst).add(maximumTokensForSecond).sub(soldForSecond)) revert();\r\n\t\t}\r\n\r\n\t\t//public third week\r\n\t\tif (now >= weekThreeStart && now <= weekFourStart)\r\n\t\t{\r\n\t\t\tbonus = ethToToken.mul(msg.value).mul(tokenBonusForForth).div(100);\r\n\t\t\ttokens = ethToToken.mul(msg.value).add(bonus);\r\n\t\t\tsoldForForth = soldForForth.add(tokens);\r\n\t\t\tif (soldForForth > maximumTokensForForth.add(maximumTokensForFirst).sub(soldForFirst).add(maximumTokensForSecond).sub(soldForSecond).add(maximumTokensForThird).sub(soldForThird)) revert();\r\n\t\t}\r\n\r\n\t\t//public forth week\r\n\t\tif (now >= weekFourStart && now <= tokenSaleEnd)\r\n\t\t{\r\n\t\t\tbonus = ethToToken.mul(msg.value).mul(tokenBonusForFifth).div(100);\r\n\t\t\ttokens = ethToToken.mul(msg.value).add(bonus);\r\n\t\t\tsoldForFifth = soldForFifth.add(tokens);\r\n\t\t\tif (soldForFifth > maximumTokensForFifth.add(maximumTokensForFirst).sub(soldForFirst).add(maximumTokensForSecond).sub(soldForSecond).add(maximumTokensForThird).sub(soldForThird).add(maximumTokensForForth).sub(soldForForth)) revert();\r\n\t\t}\r\n\r\n\t\tif (tokens == 0)\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\r\n        if (tokens + tokenTotalSupply > hardcap) revert();\r\n\t\t\r\n\t\t//add tokens to balance\r\n\t\tbalances[msg.sender] = balances[msg.sender] + tokens;\r\n\r\n\t\t//increase total tokens\r\n\t\ttokenTotalSupply = tokenTotalSupply.add(tokens);\r\n\t\tTransfer(this, msg.sender, tokens);\r\n\t\tnoContributors++;\r\n\t}\r\n\r\n\t/**\r\n    * @dev Allows the owner to send the funds to the vault.\r\n    * @param _amount the amount in wei to send\r\n    */\r\n\tfunction withdrawEthereum(uint256 _amount) public onlyOwner {\r\n\t\trequire(_amount <= this.balance); // wei\r\n\r\n\t\tif (!ownerVault.send(_amount)) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\tTransfer(this, ownerVault, _amount);\r\n\t}\r\n\r\n\r\n\t// \tfunction getReservedTokens() public view returns (uint256)\r\n\t// \t{\r\n\t// \t\tif (checkIsPublicTime() == false) return 0;\r\n\t// \t\treturn hardcap - maximumTokensForPublic + maximumTokensForPrivate - tokenTotalSupply;\r\n\t// \t}\r\n\r\n\tfunction transferReservedTokens(uint256 _amount) public onlyOwner\r\n\t{\r\n\t    if(disown == 1) revert();\r\n\t    \r\n\t\tif (now <= tokenSaleEnd) revert();\r\n\r\n\t\tassert(_amount <= (hardcap - tokenTotalSupply) );\r\n\r\n\t\tbalances[ownerVault] = balances[ownerVault] + _amount;\r\n\t\ttokenTotalSupply = tokenTotalSupply + _amount;\r\n\t\tTransfer(this, ownerVault, _amount);\r\n\t}\r\n\r\n\tfunction() external payable {\r\n\t\tBuyTokens();\r\n\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"soldForSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"bytes32\"}],\"name\":\"getAffiliateSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"masterTransferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint8\"}],\"name\":\"changeEthToTokenRation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"availableSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"BuyTokensWithAffiliate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekThreeStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekTwoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"changeDisown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showEthBalance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBonusForThird\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_vault\",\"type\":\"address\"}],\"name\":\"changeOwnerVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBonusForFifth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldForForth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokensForSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period_no\",\"type\":\"uint256\"},{\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"changePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"changeSaleOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokensForThird\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokensForFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBonusForSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getAffiliateSenderPosCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldForThird\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekOneStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokensForFifth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBonusForFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBonusForForth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldForFifth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getAffiliateSenderPosAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trashedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"no_aff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldForFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getAffiliate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekFourStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokensForForth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthereum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SaveToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ba39f7042bdae5abe0359ef85be0e67a960e06682c1f0a210194f0db07610f3"}]}