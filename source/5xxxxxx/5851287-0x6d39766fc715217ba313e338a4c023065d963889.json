{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  \r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n  */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n  */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n  */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n  */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n \r\n \r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}\r\n\r\n \r\ncontract TokenERC20 {\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    \r\n    function transfer(address to, uint value) public  returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public  returns (bool ok);\r\n    \r\n    function approve(address spender, uint value) public returns (bool ok);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n} \r\n\r\ncontract TokenERC20Standart is TokenERC20, Pausable{\r\n    \r\n        using SafeMath for uint256;\r\n            \r\n            \r\n        // create array with all blances    \r\n        mapping(address => uint) public balances;\r\n        mapping(address => mapping(address => uint)) public allowed;\r\n        \r\n        /**\r\n        * @dev Fix for the ERC20 short address attack.\r\n        */\r\n        modifier onlyPayloadSize(uint size) {\r\n            require(msg.data.length >= size + 4) ;\r\n            _;\r\n        }\r\n            \r\n       \r\n        function balanceOf(address tokenOwner) public constant whenNotPaused  returns (uint balance) {\r\n             return balances[tokenOwner];\r\n        }\r\n \r\n        function transfer(address to, uint256 tokens) public  whenNotPaused onlyPayloadSize(2*32) returns (bool success) {\r\n            _transfer(msg.sender, to, tokens);\r\n            return true;\r\n        }\r\n \r\n\r\n        function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\r\n            allowed[msg.sender][spender] = tokens;\r\n            emit Approval(msg.sender, spender, tokens);\r\n            return true;\r\n        }\r\n \r\n        function transferFrom(address from, address to, uint tokens) public whenNotPaused onlyPayloadSize(3*32) returns (bool success) {\r\n            assert(tokens > 0);\r\n            require (to != 0x0);    \r\n            require(balances[from] >= tokens);\r\n            require(balances[to] + tokens >= balances[to]); // overflow\r\n            require(allowed[from][msg.sender] >= tokens);\r\n            balances[from] = balances[from].sub(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(from, to, tokens);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address tokenOwner, address spender) public  whenNotPaused constant returns (uint remaining) {\r\n            return allowed[tokenOwner][spender];\r\n        }\r\n\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            assert(_value > 0);\r\n            require (_to != 0x0);                              \r\n            require (balances[_from] >= _value);               \r\n            require (balances[_to] + _value >= balances[_to]);\r\n            balances[_from] = balances[_from].sub(_value);                        \r\n            balances[_to] = balances[_to].add(_value);                           \r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n\r\n \r\n\r\n}\r\n\r\n\r\ncontract BeringiaContract is TokenERC20Standart{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public name;                         // token name\r\n    uint256 public decimals;                    // Amount of decimals for display purposes \r\n    string public symbol;                       // symbol token\r\n    string public version;                      // contract version \r\n\r\n    uint256 public _totalSupply = 0;                    // number bought tokens\r\n    uint256 public constant RATE = 2900;                // count tokens per 1ETH\r\n    uint256 public fundingEndTime  = 1538179200000;     // final date ico\r\n    uint256 public minContribution = 350000000000000;   // min price onr token\r\n    uint256 public oneTokenInWei = 1000000000000000000;\r\n    uint256 public tokenCreationCap;                    // count created tokens\r\n\r\n    //discount period dates\r\n    uint256 private firstPeriodEND = 1532217600000;\r\n    uint256 private secondPeriodEND = 1534896000000;\r\n    uint256 private thirdPeriodEND = 1537574400000;\r\n   \r\n    //discount percentages \r\n    uint256 private firstPeriodDis = 25;\r\n    uint256 private secondPeriodDis = 20;\r\n    uint256 private thirdPeriodDis = 15;  \r\n    \r\n    uint256 private foundersTokens;                     // tokens for founders\r\n    uint256 private depositorsTokens;                   // tokens for depositors\r\n    \r\n    constructor () public {\r\n        name = \"Beringia\";                                          // Set the name for display purposes\r\n        decimals = 0;                                               // Amount of decimals for display purposes\r\n        symbol = \"BER\";                                             // Set the symbol for display purposes\r\n        owner = 0xdc889afED1ab326966c51E58abBEdC98b4d0DF64;         // Set contract owner\r\n        version = \"1.0\";                                            // Set contract version \r\n        tokenCreationCap = 510000000 * 10 ** uint256(decimals);\r\n        balances[owner] = tokenCreationCap;                         // Give the creator all initial tokens\r\n        emit Transfer(address(0x0), owner, tokenCreationCap);\r\n        foundersTokens = tokenCreationCap / 10;                     // 10% will be sent to the founders\r\n        depositorsTokens = tokenCreationCap.sub(foundersTokens);    // left 90% will be for depositors\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public  returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFounderTokens(address _to, uint _value) public onlyOwner whenNotPaused returns (bool){\r\n        require(foundersTokens > 0);\r\n        require(foundersTokens.sub(_value) >= 0);\r\n        foundersTokens = foundersTokens.sub(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function () public payable {\r\n        createTokens(msg.sender, msg.value);\r\n    }\r\n    \r\n    function createTokens(address _sender, uint256 _value) public whenNotPaused { \r\n        require(_value > 0);\r\n        require(depositorsTokens > 0);\r\n        require(now <= fundingEndTime);\r\n        require(_value >= minContribution);\r\n        uint256 tokens = (_value * RATE) / oneTokenInWei;\r\n        require(tokens > 0);\r\n        if (now <= firstPeriodEND){\r\n            tokens =  ((tokens * 100) * (firstPeriodDis + 100))/10000;\r\n        }else if (now > firstPeriodEND && now <= secondPeriodEND){\r\n            tokens =  ((tokens * 100) *(secondPeriodDis + 100))/10000;\r\n        }else if (now > secondPeriodEND && now <= thirdPeriodEND){\r\n            tokens = ((tokens * 100) * (thirdPeriodDis + 100))/10000;\r\n        }\r\n        require(depositorsTokens.sub(tokens) >= 0);\r\n        depositorsTokens = depositorsTokens.sub(tokens);\r\n        _totalSupply = _totalSupply.add(tokens);\r\n        require(sell(_sender, tokens)); \r\n        owner.transfer(_value);\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    \r\n    function getBalance(address _sender) public view returns (uint256) {\r\n        return _sender.balance;\r\n    }\r\n    \r\n    /**\r\n     * @param _value must be in wei (1ETH = 1e18 wei) \r\n     */\r\n    function isLeftTokens(uint256 _value) public view returns (bool) { \r\n        require(_value > 0);\r\n        uint256 tokens = (_value * RATE) / oneTokenInWei;\r\n        require(tokens > 0);\r\n        if (now <= firstPeriodEND){\r\n            tokens =  ((tokens * 100) * (firstPeriodDis + 100))/10000;\r\n        }else if (now > firstPeriodEND && now <= secondPeriodEND){\r\n            tokens =  ((tokens * 100) *(secondPeriodDis + 100))/10000;\r\n        }else if (now > secondPeriodEND && now <= thirdPeriodEND){\r\n            tokens = ((tokens * 100) * (thirdPeriodDis + 100))/10000;\r\n        }\r\n        return depositorsTokens.sub(tokens) >= 0;\r\n    }\r\n\r\n    function sell(address _recipient, uint256 _value) internal whenNotPaused returns (bool success) {\r\n        _transfer (owner, _recipient, _value);\r\n        return true;\r\n    }\r\n    \r\n    function getFoundersTokens() public constant returns (uint256) {\r\n        return foundersTokens;\r\n    } \r\n    \r\n    function getDepositorsTokens() public constant returns (uint256) {\r\n        return depositorsTokens;\r\n    }\r\n    \r\n    function increaseTotalSupply(uint256 _value) public whenNotPaused onlyOwner returns (bool success) {\r\n        require(_value > 0);\r\n        require(_totalSupply.add(_value) <= tokenCreationCap);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFounderTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseTotalSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFoundersTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositorsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneTokenInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"isLeftTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BeringiaContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://267912961fecf4534885ddebfe8c412264a00418fc73e9efe762469ee27c57d1"}]}