{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * Overflow aware uint math functions.\r\n *\r\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\r\n */\r\ncontract SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    /**\r\n     * Reviewed:\r\n     * - Interger overflow = OK, checked\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Automobile Cyberchain Token crowdsale ICO contract.\r\n *\r\n */\r\ncontract AutomobileCyberchainToken is StandardToken, SafeMath {\r\n\r\n    string public name = \"Automobile Cyberchain Token\";\r\n    string public symbol = \"AMCC\";\r\n    uint public decimals = 18;\r\n    uint preSalePrice  = 32000;\r\n    uint crowSalePrice = 20000;\r\n    uint prePeriod = 256 * 24 * 30;// unit: block count, estimate: 30 days, May 16 0:00, UTC-7\r\n    uint totalPeriod = 256 * 24 * 95; // unit: block count, estimate: 95 days, July 20, 0:00, UTC-7\r\n    uint public startBlock = 5455280; //crowdsale start block (set in constructor), April 16 0:00 UTC-7\r\n    uint public endBlock = startBlock + totalPeriod; //crowdsale end block\r\n\r\n\r\n    // Initial founder address (set in constructor)\r\n    // All deposited ETH will be instantly forwarded to this address.\r\n    // Address is a multisig wallet.\r\n    address public founder = 0xfD16CDC79382F86303E2eE8693C7f50A4d8b937F;\r\n    uint256 public preEtherCap = 15625 * 10**18; // max amount raised during pre-ICO\r\n    uint256 public etherCap =    88125 * 10**18; //max amount raised during crowdsale\r\n    uint256 public bountyAllocation = 1050000000 * 10**18;\r\n    uint256 public maxToken = 3000000000 * 10**18;\r\n    // uint public transferLockup = 256 * 0; //transfers are locked for this many blocks after endBlock (assuming 14 second blocks)\r\n    // uint public founderLockup = 256 * 0; //founder allocation cannot be created until this many blocks after endBlock\r\n\r\n    uint256 public presaleTokenSupply = 0; //this will keep track of the token supply created during the pre-crowdsale\r\n    uint256 public totalEtherRaised = 0;\r\n    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\r\n\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n\r\n\r\n    function AutomobileCyberchainToken() {\r\n        balances[founder] = bountyAllocation;\r\n        totalSupply = bountyAllocation;\r\n        Transfer(address(0), founder, bountyAllocation);\r\n    }\r\n\r\n\r\n    function price() constant returns(uint) {\r\n        if (block.number<startBlock || block.number > endBlock) return 0; //this will not happen according to the buyToken block check, but still set it to 0.\r\n        else if (block.number>=startBlock && block.number<startBlock+prePeriod) return preSalePrice; //pre-ICO\r\n        else  return crowSalePrice; // default-ICO\r\n    }\r\n\r\n   /**\r\n    * @dev fallback function ***DO NOT OVERRIDE***\r\n    */\r\n    function() public payable  {\r\n        buyToken(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n    // Buy entry point\r\n    function buy(address recipient, uint256 value) public payable {\r\n        if (value> msg.value) throw;\r\n\r\n        if (value < msg.value) {\r\n            require(msg.sender.call.value(msg.value - value)()); //refund the extra ether\r\n        }\r\n        buyToken(recipient, value);\r\n    }\r\n\r\n\r\n    function buyToken(address recipient, uint256 value) internal {\r\n        if (block.number<startBlock || block.number>endBlock || safeAdd(totalEtherRaised,value)>etherCap || halted) throw;\r\n        if (block.number>=startBlock && block.number<=startBlock+prePeriod && safeAdd(totalEtherRaised,value) > preEtherCap) throw; //preSale Cap limitation\r\n        uint tokens = safeMul(value, price());\r\n        balances[recipient] = safeAdd(balances[recipient], tokens);\r\n        totalSupply = safeAdd(totalSupply, tokens);\r\n        totalEtherRaised = safeAdd(totalEtherRaised, value);\r\n\r\n        if (block.number<=startBlock+prePeriod) {\r\n            presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\r\n        }\r\n        Transfer(address(0), recipient, tokens); //Transaction record for token perchaise\r\n        if (!founder.call.value(value)()) throw; //immediately send Ether to founder address\r\n        Buy(recipient, value, tokens); //Buy event\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Emergency Stop ICO.\r\n     *\r\n     *  Applicable tests:\r\n     *\r\n     * - Test unhalting, buying, and succeeding\r\n     */\r\n    function halt() {\r\n        if (msg.sender!=founder) throw;\r\n        halted = true;\r\n    }\r\n\r\n    function unhalt() {\r\n        if (msg.sender!=founder) throw;\r\n        halted = false;\r\n    }\r\n\r\n    /**\r\n     * Change founder address (where ICO ETH is being forwarded).\r\n     *\r\n     * Applicable tests:\r\n     *\r\n     * - Test founder change by hacker\r\n     * - Test founder change\r\n     * - Test founder token allocation twice\r\n     *\r\n     */\r\n    function changeFounder(address newFounder) {\r\n        if (msg.sender!=founder) throw;\r\n        founder = newFounder;\r\n    }\r\n\r\n    function withdrawExtraToken(address recipient) public {\r\n      require(msg.sender == founder && block.number > endBlock && totalSupply < maxToken);\r\n\r\n      uint256 leftTokens = safeSub(maxToken, totalSupply);\r\n      balances[recipient] = safeAdd(balances[recipient], leftTokens);\r\n      totalSupply = maxToken;\r\n      Transfer(address(0), recipient, leftTokens);\r\n    }\r\n\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until freeze period is over.\r\n     *\r\n     * Applicable tests:\r\n     *\r\n     * - Test restricted early transfer\r\n     * - Test transfer after restricted period\r\n     */\r\n    // function transfer(address _to, uint256 _value) returns (bool success) {\r\n    //     if (block.number <= startBlock + transferLockup && msg.sender!=founder) throw;\r\n    //     return super.transfer(_to, _value);\r\n    // }\r\n\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until freeze period is over.\r\n     */\r\n    // function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    //     if (block.number <= startBlock + transferLockup && msg.sender!=founder) throw;\r\n    //     return super.transferFrom(_from, _to, _value);\r\n    // }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawExtraToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AutomobileCyberchainToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4091d1945cc6048e3307b2f801149f9ae7ba1109e68bd467ab8c509074d0c6b6"}]}