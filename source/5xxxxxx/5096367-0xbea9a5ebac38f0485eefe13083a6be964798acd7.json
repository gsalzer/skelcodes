{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\tOwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n*Standard ERC20 Token interface\r\n*/\r\ncontract ERC20 {\r\n\t// these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20 {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n\tuint256 totalSupply_;\r\n\r\n\t/**\r\n\t* @dev total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t*\r\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t* @param _owner address The address which owns the funds.\r\n\t* @param _spender address The address which will spend the funds.\r\n\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t*/\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t*\r\n\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t* the first transaction is mined)\r\n\t* From MonolithDAO Token.sol\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _addedValue The amount of tokens to increase the allowance by.\r\n\t*/\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t*\r\n\t* approve should be called when allowed[_spender] == 0. To decrement\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t* the first transaction is mined)\r\n\t* From MonolithDAO Token.sol\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t*/\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n* @title CybCoin ERC20 token\r\n*\r\n*/\r\ncontract CYBC is StandardToken, Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public name = \"CybCoin\";\r\n\tstring public symbol = \"CYBC\";\r\n\tuint8 public constant decimals = 8;\r\n\r\n\tuint256 private _N = (10 ** uint256(decimals));\r\n\tuint256 public INITIAL_SUPPLY = _N.mul(1000000000);\r\n\tuint256 public endTime = 1530403200;\r\n\tuint256 public cap = _N.mul(200000000);\r\n\tuint256 public rate = 6666;\r\n\tuint256 public totalTokenSales = 0;\r\n\r\n\tmapping(address => uint8) public ACL;\r\n\tmapping (address => string) public keys;\r\n\tevent LogRegister (address _user, string _key);\r\n\r\n\taddress public wallet = 0x7a0035EA0F2c08aF87Cc863D860d669505EA0b20;\r\n\taddress public accountS = 0xe0b91C928DbC439399ed6babC4e6A0BeC2F048C7;\r\n\taddress public accountA = 0x98207620eC7346471C98DDd1A4C7c75d344C344f;\r\n\taddress public accountB = 0x6C7A09b9283c364a7Dff11B4fb4869B211D21fCb;\r\n\taddress public accountC = 0x8df62d0B4a8b1131119527a148A9C54D4cC7F91D;\r\n\r\n\t/**\r\n\t* @dev Constructor that gives msg.sender all of existing tokens.\r\n\t*/\r\n\tfunction CYBC() public {\r\n\t\ttotalSupply_ = INITIAL_SUPPLY;\r\n\r\n\t\tbalances[accountS] = _N.mul(200000000);\r\n\t\tbalances[accountA] = _N.mul(300000000);\r\n\t\tbalances[accountB] = _N.mul(300000000);\r\n\t\tbalances[accountC] = _N.mul(200000000);\r\n\r\n\t\tACL[wallet]=1;\r\n\t\tACL[accountS]=1;\r\n\t\tACL[accountA]=1;\r\n\t\tACL[accountB]=1;\r\n\t\tACL[accountC]=1;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public isSaleClose returns (bool) {\r\n\t\trequire(ACL[msg.sender] != 2);\r\n\t\trequire(ACL[_to] != 2);\r\n\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)  public isSaleClose returns (bool) {\r\n\t\trequire(ACL[msg.sender] != 2);\r\n\t\trequire(ACL[_from] != 2);\r\n\t\trequire(ACL[_to] != 2);\r\n\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n\tfunction setRate(uint256 _rate)  public onlyOwner {\r\n\t\trequire(_rate > 0);\r\n\t\trate = _rate;\r\n\t}\r\n\r\n\tfunction () public payable {\r\n\t\tethSale(msg.sender);\r\n\t}\r\n\r\n\tfunction ethSale(address _beneficiary) public isSaleOpen payable {\r\n\t\trequire(_beneficiary != address(0));\r\n\t\trequire(msg.value != 0);\r\n\t\tuint256 ethInWei = msg.value;\r\n\t\tuint256 tokenWeiAmount = ethInWei.div(10**10);\r\n\t\tuint256 tokens = tokenWeiAmount.mul(rate);\r\n\t\ttotalTokenSales = totalTokenSales.add(tokens);\r\n\t\twallet.transfer(ethInWei);\r\n\t\tbalances[accountS] = balances[accountS].sub(tokens);\r\n\t\tbalances[_beneficiary] = balances[_beneficiary].add(tokens);\r\n\t\tTransfer(accountS, _beneficiary, tokens);\r\n\t}\r\n\r\n\tfunction cashSale(address _beneficiary, uint256 _tokens) public isSaleOpen onlyOwner {\r\n\t\trequire(_beneficiary != address(0));\r\n\t\trequire(_tokens != 0);\r\n\t\ttotalTokenSales = totalTokenSales.add(_tokens);\r\n\t\tbalances[accountS] = balances[accountS].sub(_tokens);\r\n\t\tbalances[_beneficiary] = balances[_beneficiary].add(_tokens);\r\n\t\tTransfer(accountS, _beneficiary, _tokens);\r\n\t}\r\n\r\n\tmodifier isSaleOpen() {\r\n\t\trequire(totalTokenSales < cap);\r\n\t\trequire(now < endTime);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier isSaleClose() {\r\n\t\tif( ACL[msg.sender] != 1 )  {\r\n\t\t\trequire(totalTokenSales >= cap || now >= endTime);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setWallet(address addr) onlyOwner public {\r\n\t\trequire(addr != address(0));\r\n\t\twallet = addr;\r\n\t}\r\n\tfunction setAccountA(address addr) onlyOwner public {\r\n\t\trequire(addr != address(0));\r\n\t\taccountA = addr;\r\n\t}\r\n\r\n\tfunction setAccountB(address addr) onlyOwner public {\r\n\t\trequire(addr != address(0));\r\n\t\taccountB = addr;\r\n\t}\r\n\r\n\tfunction setAccountC(address addr) onlyOwner public {\r\n\t\trequire(addr != address(0));\r\n\t\taccountC = addr;\r\n\t}\r\n\r\n\tfunction setAccountS(address addr) onlyOwner public {\r\n\t\trequire(addr != address(0));\r\n\t\taccountS = addr;\r\n\t}\r\n\r\n\tfunction setACL(address addr,uint8 flag) onlyOwner public {\r\n\t\trequire(addr != address(0));\r\n\t\trequire(flag >= 0);\r\n\t\trequire(flag <= 255);\r\n\t\tACL[addr] = flag;\r\n\t}\r\n\r\n\tfunction setName(string _name)  onlyOwner public {\r\n\t\tname = _name;\r\n\t}\r\n\r\n\tfunction setSymbol(string _symbol) onlyOwner public {\r\n\t\tsymbol = _symbol;\r\n\t}\r\n\r\n\tfunction register(string _key) public {\r\n\t\trequire(ACL[msg.sender] != 2);\r\n\t\trequire(bytes(_key).length <= 128);\r\n\t\tkeys[msg.sender] = _key;\r\n\t\tLogRegister(msg.sender, _key);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"accountA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAccountC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"ethSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"cashSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAccountA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAccountB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ACL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAccountS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"setACL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CYBC","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1054ffc0bfb25e95ba98f5aab0e3696cc617230a9984af367523c2c9106661a"}]}