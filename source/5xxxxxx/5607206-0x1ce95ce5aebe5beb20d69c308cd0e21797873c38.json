{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Authorizable is Ownable {\r\n\r\n    mapping(address => bool) public authorized;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function addAuthorized(address _toAdd) onlyOwner public {\r\n        authorized[_toAdd] = true;\r\n    }\r\n\r\n    function removeAuthorized(address _toRemove) onlyOwner public {\r\n        authorized[_toRemove] = false;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LiteNetCoin is StandardToken, Authorizable{\r\n\t\r\n\tuint256 public INITIAL_SUPPLY = 300000000 * 1 ether; // Всего токенов\r\n\tstring public constant name = \"LiteNetCoin\";\r\n    string public constant symbol = \"LNC\";\r\n\tuint8 public constant decimals = 18;\r\n\t\r\n\tconstructor() public  {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\t\tbalances[owner] = totalSupply_;\r\n    }\r\n\t\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Crowdsale is LiteNetCoin {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n    LiteNetCoin public token = new LiteNetCoin();\r\n\t\r\n\tuint256 public constant BASE_RATE = 2500;\r\n \r\n\t// Старт pre sale 1\r\n\tuint64 public constant PRE_SALE_START_1 = 1526256000; // 14/05/2018/00/00/00\r\n\t//uint64 public constant PRE_SALE_FINISH_1 = 1526860800; // 21/05/2018/00/00/00\r\n\t\r\n\t// Старт pre sale 2\r\n\tuint64 public constant PRE_SALE_START_2 = 1527465600; // 28/05/2018/00/00/00\r\n\t//uint64 public constant PRE_SALE_FINISH_2 = 1528588800; // 10/06/2018/00/00/00\r\n\t\r\n\t// Старт pre sale 3\r\n\tuint64 public constant PRE_SALE_START_3 = 1529884800; // 25/06/2018/00/00/00\r\n\t//uint64 public constant PRE_SALE_FINISH_3 = 1530403200; // 01/07/2018/00/00/00\r\n\t\r\n\t// Старт pre sale 4\r\n\t\r\n\t//uint64 public constant PRE_SALE_START_4 = 1525996800; // 27/08/2018/00/00/00\r\n\tuint64 public constant PRE_SALE_START_4 = 1535328000; // 27/08/2018/00/00/00\r\n\t//uint64 public constant PRE_SALE_FINISH_4 = 1518134400; // 02/09/2018/00/00/00\r\n\t\r\n\t// Старт pre ICO \r\n\tuint64 public constant PRE_ICO_START = 1538870400; // 07/10/2018/00/00/00\r\n\t//uint64 public constant PRE_ICO_FINISH = 1539475200; // 14/10/2018/00/00/00\r\n\t\r\n\t// Старт ICO \r\n\tuint64 public constant ICO_START = 1541030400; // 01/11/2018/00/00/00\r\n\t\r\n\t//Конец ICO\r\n\tuint64 public constant ICO_FINISH = 1541376000; // 05/11/2018/00/00/00\r\n \r\n\t// ICO открыто или закрыто\r\n\tbool public icoClosed = false;\r\n\r\n\tuint256 totalBuyTokens_ = 0;\r\n\r\n\tevent BoughtTokens(address indexed to, uint256 value);\r\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t\r\n\r\n\tenum TokenDistributions { crowdsale, reserve, bounty, team, founders }\r\n\tmapping(uint => uint256) public distributions;\r\n\t\r\n\taddress public teamTokens = 0xC7FDAE4f201D76281975D890d5491D90Ec433B0E;\r\n\taddress public notSoldTokens = 0x6CccCD6fa8184D29950dF21DDDE1069F5B37F3d1;\r\n\t\r\n\t\r\n\tconstructor() public  {\r\n\t\tdistributions[uint8(TokenDistributions.crowdsale)] = 240000000 * 1 ether;\r\n\t\tdistributions[uint8(TokenDistributions.founders)] = 12000000 * 1 ether;\r\n\t\tdistributions[uint8(TokenDistributions.reserve)] = 30000000 * 1 ether;\r\n\t\tdistributions[uint8(TokenDistributions.bounty)] = 9000000 * 1 ether;\r\n\t\tdistributions[uint8(TokenDistributions.team)] = 9000000 * 1 ether;\r\n\t}\r\n\r\n\t// меняем основной кошелек\r\n\tfunction changeOwner(address _newOwner) external onlyOwner{\r\n        owner = _newOwner;\r\n    }\r\n\t// меняем кошелек для команды, резерва и т.д.\r\n\tfunction changeTeamTokens(address _teamTokens) external onlyOwner{\r\n        teamTokens = _teamTokens;\r\n    }\r\n\t// меняем кошелек для непроданных токенов\r\n\tfunction changeNotSoldTokens(address _notSoldTokens) external onlyOwner{\r\n        notSoldTokens = _notSoldTokens;\r\n    }\r\n\r\n\r\n\t// Функция доставляет токены на кошелек покупателя при поступлении \"эфира\"\r\n    function() public payable {\r\n\t\tbuyTokens(msg.sender);\r\n    }\r\n    \r\n    // получает адрес получаетля токенов\r\n    function buyTokens(address _addr) public payable {\r\n\t\trequire(msg.value >= 0.001 ether);\r\n\t\trequire(distributions[0] > 0);\r\n\t\trequire(totalBuyTokens_ <= INITIAL_SUPPLY );\r\n\t\trequire(getCurrentRound() > 0);\r\n\t\t\r\n\t\tuint discountPercent = getCurrentDiscountPercent();\r\n\t\t\r\n\t\tuint256 weiAmount = msg.value;\r\n        uint256 tokens = getRate(weiAmount);\r\n\t\tuint256 bonusTokens = tokens.mul(discountPercent).div(100);\r\n\t\ttokens += bonusTokens;\r\n\t\ttotalBuyTokens_ = totalBuyTokens_.add(tokens);\r\n\r\n\t    token.transfer(_addr, tokens);\r\n\t\ttotalSupply_ = totalSupply_.sub(tokens);\r\n\t\tdistributions[0] = distributions[0].sub(tokens);\r\n\t\t\r\n\t    owner.transfer(msg.value);\r\n\t\t\r\n\t\temit TokenPurchase(msg.sender, _addr, weiAmount, tokens);\r\n    }\r\n\r\n\r\n\t\r\n\tfunction getCurrentRound() public view returns (uint8 round) {\r\n        round = 0;\r\n\t\t\r\n\t\tif(now > ICO_START + 3 days  && now <= ICO_START + 5 days)      round = 7;\r\n\t\tif(now > ICO_START        && now <= ICO_START        + 3 days)  round = 6;\r\n\t\tif(now > PRE_ICO_START    && now <= PRE_ICO_START    + 7 days)  round = 5;\r\n\t\tif(now > PRE_SALE_START_4 && now <= PRE_SALE_START_4 + 6 days)  round = 4;\r\n\t\tif(now > PRE_SALE_START_3 && now <= PRE_SALE_START_3 + 6 days)  round = 3;\r\n\t\tif(now > PRE_SALE_START_2 && now <= PRE_SALE_START_2 + 13 days) round = 2;\r\n\t\tif(now > PRE_SALE_START_1 && now <= PRE_SALE_START_1 + 8 days)  round = 1;\r\n\t\t\r\n\r\n\t\t/* if(now > ICO_START        ) round = 6;\r\n\t\tif(now > PRE_ICO_START    ) round = 5;\r\n\t\tif(now > PRE_SALE_START_4 ) round = 4;\r\n\t\tif(now > PRE_SALE_START_3 ) round = 3;\r\n\t\tif(now > PRE_SALE_START_2 ) round = 2;\r\n\t\tif(now > PRE_SALE_START_1 ) round = 1; */\r\n\t\t\r\n\t\t\r\n        return round;\r\n    }\r\n\t\r\n\t\r\n\tfunction getCurrentDiscountPercent() constant returns (uint){\r\n\t\tuint8 round = getCurrentRound();\r\n\t\tuint discountPercent = 0;\r\n\t\t\r\n\t\t\r\n\t\tif(round == 1 ) discountPercent = 65;\r\n\t\tif(round == 2 ) discountPercent = 65;\r\n\t\tif(round == 3 ) discountPercent = 60;\r\n\t\tif(round == 4 ) discountPercent = 55;\r\n\t\tif(round == 5 ) discountPercent = 40;\r\n\t\tif(round == 6 ) discountPercent = 30;\r\n\t\tif(round == 7 ) discountPercent = 0;\r\n\t\t\r\n\t\treturn discountPercent;\r\n\t\t\r\n\t}\r\n\t\r\n\r\n\tfunction totalBuyTokens() public view returns (uint256) {\r\n\t\treturn totalBuyTokens_;\r\n\t}\r\n\t\r\n\tfunction getRate(uint256 _weiAmount) internal view returns (uint256) {\r\n\t\treturn _weiAmount.mul(BASE_RATE);\r\n\t}\r\n\t\r\n\t\r\n\tfunction sendOtherTokens(address _addr,uint256 _amount) onlyOwner onlyAuthorized isNotIcoClosed public {\r\n        require(totalBuyTokens_ <= INITIAL_SUPPLY);\r\n\t\t\r\n\t\ttoken.transfer(_addr, _amount);\r\n\t\ttotalSupply_ = totalSupply_.sub(_amount);\r\n\t\ttotalBuyTokens_ = totalBuyTokens_.add(_amount);\r\n\t\t\r\n    }\r\n\t\r\n\t\r\n\tfunction sendBountyTokens(address _addr,uint256 _amount) onlyOwner onlyAuthorized isNotIcoClosed public {\r\n        require(distributions[3] > 0);\r\n\t\tsendOtherTokens(_addr, _amount);\r\n\t\tdistributions[3] = distributions[3].sub(_amount);\r\n    }\r\n\t\r\n\r\n\t\r\n\t// Закрываем ICO \r\n    function close() public onlyOwner isNotIcoClosed {\r\n        // Закрываем ICO\r\n\t\trequire(now > ICO_FINISH);\r\n\t\t\r\n\t\tif(distributions[0] > 0){\r\n\t\t\ttoken.transfer(notSoldTokens, distributions[0]);\r\n\t\t\ttotalSupply_ = totalSupply_.sub(distributions[0]);\r\n\t\t\ttotalBuyTokens_ = totalBuyTokens_.add(distributions[0]);\r\n\t\t\tdistributions[0] = 0;\r\n\t\t}\r\n\t\ttoken.transfer(teamTokens, distributions[1] + distributions[2] +  distributions[4]);\r\n\t\t\r\n\t\ttotalSupply_ = totalSupply_.sub(distributions[1] + distributions[2] +  distributions[4]);\r\n\t\ttotalBuyTokens_ = totalBuyTokens_.add(distributions[1] + distributions[2] +  distributions[4]);\r\n\t\t\r\n\t\tdistributions[1] = 0;\r\n\t\tdistributions[2] = 0;\r\n\t\tdistributions[4] = 0;\r\n\t\t\r\n\t\t\r\n        icoClosed = true;\r\n    }\r\n\t\r\n\tmodifier isNotIcoClosed {\r\n        require(!icoClosed);\r\n        _;\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"notSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_notSoldTokens\",\"type\":\"address\"}],\"name\":\"changeNotSoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_FINISH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamTokens\",\"type\":\"address\"}],\"name\":\"changeTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_START_4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_START_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDiscountPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendOtherTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_START_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_START_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://109bff1dd2683a2299d490565bb58a4162809147ab6d05ae3a466442242e4ed1"}]}