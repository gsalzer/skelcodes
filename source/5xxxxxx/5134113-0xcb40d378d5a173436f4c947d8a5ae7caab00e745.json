{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract MaxRoyalCoin is ERC20Interface,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n   \r\n   string public name;\r\n   string public symbol;\r\n   uint256 public decimals;\r\n\r\n   uint256 public _totalSupply;\r\n   mapping(address => uint256) tokenBalances;\r\n   address ownerWallet;\r\n   // Owner of account approves the transfer of an amount to another account\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n   \r\n   /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n    function MaxRoyalCoin(address wallet) public {\r\n        owner = msg.sender;\r\n        ownerWallet = wallet;\r\n        name  = \"MaxRoyal Coin\";\r\n        symbol = \"MRC\";\r\n        decimals = 18;\r\n        _totalSupply = 60000000 * 10 ** uint(decimals);\r\n        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\r\n    }\r\n    \r\n     // Get the token balance for account `tokenOwner`\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n         return tokenBalances[tokenOwner];\r\n     }\r\n  \r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address to, uint tokens) public returns (bool success) {\r\n         require(to != address(0));\r\n         require(tokens <= tokenBalances[msg.sender]);\r\n         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\r\n         tokenBalances[to] = tokenBalances[to].add(tokens);\r\n         Transfer(msg.sender, to, tokens);\r\n         return true;\r\n     }\r\n  \r\n     /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokenBalances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Total supply\r\n     // ------------------------------------------------------------------------\r\n     function totalSupply() public constant returns (uint) {\r\n         return _totalSupply  - tokenBalances[address(0)];\r\n     }\r\n     \r\n    \r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n     \r\n     /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Don't accept ETH\r\n     // ------------------------------------------------------------------------\r\n     function () public payable {\r\n         revert();\r\n     }\r\n \r\n \r\n     // ------------------------------------------------------------------------\r\n     // Owner can transfer out any accidentally sent ERC20 tokens\r\n     // ------------------------------------------------------------------------\r\n     function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\r\n         require(msg.sender == ownerWallet);\r\n         return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n     }\r\n     \r\n     //only to be used by the ICO\r\n     \r\n     function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\r\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\r\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\r\n      Transfer(wallet, buyer, tokenAmount); \r\n      _totalSupply = _totalSupply.sub(tokenAmount);\r\n    }\r\n}\r\ncontract MaxRoyalCoinCrowdsale {\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  MaxRoyalCoin public token;\r\n\r\n  // address where funds are collected\r\n  // address where tokens are deposited and from where we send tokens to buyers\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWeiFirstPhase = 83333;\r\n  uint256 public ratePerWeiSecondPhase = 52631;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 TOKENS_SOLD;\r\n  uint256 maxTokensToSale = 60000000 * 10 ** 18;\r\n  \r\n  \r\n  bool isCrowdsalePaused = false;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function MaxRoyalCoinCrowdsale(address _wallet) public \r\n  {\r\n    require(_wallet != 0x0);\r\n\r\n    wallet = _wallet;\r\n    token = createTokenContract(wallet);\r\n  }\r\n  \r\n   // creates the token to be sold.\r\n  function createTokenContract(address wall) internal returns (MaxRoyalCoin) {\r\n    return new MaxRoyalCoin(wall);\r\n  }\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n   \r\n  // low level token purchase function\r\n  // Minimum purchase can be of 1 ETH\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(msg.value>0);\r\n    require(TOKENS_SOLD<maxTokensToSale);\r\n    uint256 weiAmount = msg.value;\r\n    uint256 tokens;\r\n    uint256 bonus;\r\n\r\n    // calculate token amount to be transferred\r\n    if (TOKENS_SOLD < 10000000 * 10 ** 18)\r\n    {\r\n        tokens = weiAmount.mul(ratePerWeiFirstPhase);\r\n    }\r\n    else \r\n    {\r\n        tokens = weiAmount.mul(ratePerWeiSecondPhase);\r\n    }\r\n    bonus = tokens.mul(10);\r\n    bonus = bonus.div(100);\r\n    tokens = tokens.add(bonus);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    require (TOKENS_SOLD<=maxTokensToSale);\r\n    token.mint(wallet, beneficiary, tokens); \r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n    \r\n    /**\r\n     * function to change the price rate for phase 1\r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function setPriceRatePhase1(uint256 newPrice) public returns (bool) {\r\n        require (msg.sender == wallet);\r\n        ratePerWeiFirstPhase = newPrice;\r\n    }\r\n    \r\n    /**\r\n     * function to change the price rate for phase 1\r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function setPriceRatePhase2(uint256 newPrice) public returns (bool) {\r\n        require (msg.sender == wallet);\r\n        ratePerWeiSecondPhase = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public returns(bool) {\r\n        require(msg.sender==wallet);\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     * if the crowdsale has been stopped, this function would not resume it\r\n     **/ \r\n    function resumeCrowdsale() public returns (bool) {\r\n        require(msg.sender==wallet);\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n     // ------------------------------------------------------------------------\r\n     // Remaining tokens for sale\r\n     // ------------------------------------------------------------------------\r\n     function remainingTokensForSale() public constant returns (uint) {\r\n         return maxTokensToSale - TOKENS_SOLD;\r\n     }\r\n     \r\n     function showMyTokenBalance() public constant returns (uint) {\r\n         return token.balanceOf(msg.sender);\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWeiSecondPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWeiFirstPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRatePhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRatePhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"MaxRoyalCoinCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a9a7024fe5d64fbd9d58514a8870f6b4b5f12783","Library":"","SwarmSource":"bzzr://b208136a030aa4f426a3f73b3814ee71fcb7582d0de58ed7467d8256453215b3"}]}