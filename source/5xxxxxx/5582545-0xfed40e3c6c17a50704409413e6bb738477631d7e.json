{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface Token {\r\n    function totalSupply() constant external returns (uint256 ts);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface XPAAssetToken {\r\n    function create(address user_, uint256 amount_) external returns(bool success);\r\n    function burn(uint256 amount_) external returns(bool success);\r\n    function burnFrom(address user_, uint256 amount_) external returns(bool success);\r\n    function getDefaultExchangeRate() external returns(uint256);\r\n    function getSymbol() external returns(bytes32);\r\n}\r\n\r\ninterface Baliv {\r\n    function getPrice(address fromToken_, address toToken_) external view returns(uint256);\r\n}\r\n\r\ninterface FundAccount {\r\n    function burn(address Token_, uint256 Amount_) external view returns(bool);\r\n}\r\n\r\ninterface TokenFactory {\r\n    function createToken(string symbol_, string name_, uint256 defaultExchangeRate_) external returns(address);\r\n    function getPrice(address token_) external view returns(uint256);\r\n    function getAssetLength() external view returns(uint256);\r\n    function getAssetToken(uint256 index_) external view returns(address);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      uint256 z = x + y;\r\n      require((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSub(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      require(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMul(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      uint z = x * y;\r\n      require((x == 0) || (z / x == y));\r\n      return z;\r\n    }\r\n    \r\n    function safeDiv(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        require(y > 0);\r\n        return x / y;\r\n    }\r\n\r\n    function random(uint N, uint salt)\r\n        internal\r\n        view\r\n    returns(uint) {\r\n      bytes32 hash = keccak256(block.number, msg.sender, salt);\r\n      return uint(hash) % N;\r\n    }\r\n}\r\n\r\ncontract Authorization {\r\n    mapping(address => address) public agentBooks;\r\n    address public owner;\r\n    address public operator;\r\n    address public bank;\r\n    bool public powerStatus = true;\r\n    bool public forceOff = false;\r\n    function Authorization()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n        operator = msg.sender;\r\n        bank = msg.sender;\r\n    }\r\n    modifier onlyOwner\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyOperator\r\n    {\r\n        assert(msg.sender == operator || msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyActive\r\n    {\r\n        assert(powerStatus);\r\n        _;\r\n    }\r\n    function powerSwitch(\r\n        bool onOff_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        if(forceOff) {\r\n            powerStatus = false;\r\n        } else {\r\n            powerStatus = onOff_;\r\n        }\r\n    }\r\n    function transferOwnership(address newOwner_)\r\n        onlyOwner\r\n        public\r\n    {\r\n        owner = newOwner_;\r\n    }\r\n    \r\n    function assignOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        operator = user_;\r\n        agentBooks[bank] = user_;\r\n    }\r\n    \r\n    function assignBank(address bank_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        bank = bank_;\r\n    }\r\n    function assignAgent(\r\n        address agent_\r\n    )\r\n        public\r\n    {\r\n        agentBooks[msg.sender] = agent_;\r\n    }\r\n    function isRepresentor(\r\n        address representor_\r\n    )\r\n        public\r\n        view\r\n    returns(bool) {\r\n        return agentBooks[representor_] == msg.sender;\r\n    }\r\n    function getUser(\r\n        address representor_\r\n    )\r\n        internal\r\n        view\r\n    returns(address) {\r\n        return isRepresentor(representor_) ? representor_ : msg.sender;\r\n    }\r\n}\r\n\r\ncontract XPAAssets is SafeMath, Authorization {\r\n    string public version = \"0.5.0\";\r\n\r\n    // contracts\r\n    address public XPA = 0x0090528aeb3a2b736b780fd1b6c478bb7e1d643170;\r\n    address public oldXPAAssets = 0x0002992af1dd8140193b87d2ab620ca22f6e19f26c;\r\n    address public newXPAAssets = address(0);\r\n    address public tokenFactory = 0x0036B86289ccCE0984251CCCA62871b589B0F52d68;\r\n    // setting\r\n    uint256 public maxForceOffsetAmount = 1000000 ether;\r\n    uint256 public minForceOffsetAmount = 10000 ether;\r\n    \r\n    // events\r\n    event eMortgage(address, uint256);\r\n    event eWithdraw(address, address, uint256);\r\n    event eRepayment(address, address, uint256);\r\n    event eOffset(address, address, uint256);\r\n    event eExecuteOffset(uint256, address, uint256);\r\n    event eMigrate(address);\r\n    event eMigrateAmount(address);\r\n\r\n    //data\r\n    mapping(address => uint256) public fromAmountBooks;\r\n    mapping(address => mapping(address => uint256)) public toAmountBooks;\r\n    mapping(address => uint256) public forceOffsetBooks;\r\n    mapping(address => bool) public migrateBooks;\r\n    address[] public xpaAsset;\r\n    address public fundAccount;\r\n    uint256 public profit = 0;\r\n    mapping(address => uint256) public unPaidFundAccount;\r\n    uint256 public initCanOffsetTime = 0;\r\n    \r\n    //fee\r\n    uint256 public withdrawFeeRate = 0.02 ether; // 提領手續費\r\n    uint256 public offsetFeeRate = 0.02 ether;   // 平倉手續費\r\n    uint256 public forceOffsetBasicFeeRate = 0.02 ether; // 強制平倉基本費\r\n    uint256 public forceOffsetExecuteFeeRate = 0.01 ether;// 強制平倉執行費\r\n    uint256 public forceOffsetExtraFeeRate = 0.05 ether; // 強制平倉額外手續費\r\n    uint256 public forceOffsetExecuteMaxFee = 1000 ether; \r\n    \r\n    // constructor\r\n    function XPAAssets(\r\n        uint256 initCanOffsetTime_\r\n    ) public {\r\n        initCanOffsetTime = initCanOffsetTime_;\r\n    }\r\n\r\n    function setFundAccount(\r\n        address fundAccount_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        if(fundAccount_ != address(0)) {\r\n            fundAccount = fundAccount_;\r\n        }\r\n    }\r\n\r\n    function createToken(\r\n        string symbol_,\r\n        string name_,\r\n        uint256 defaultExchangeRate_\r\n    )\r\n        public\r\n        onlyOperator \r\n    {\r\n        address newAsset = TokenFactory(tokenFactory).createToken(symbol_, name_, defaultExchangeRate_);\r\n        for(uint256 i = 0; i < xpaAsset.length; i++) {\r\n            if(xpaAsset[i] == newAsset){\r\n                return;\r\n            }\r\n        }\r\n        xpaAsset.push(newAsset);\r\n    }\r\n\r\n    //抵押 XPA\r\n    function mortgage(\r\n        address representor_\r\n    )\r\n        onlyActive\r\n        public\r\n    {\r\n        address user = getUser(representor_);\r\n        uint256 amount_ = Token(XPA).allowance(msg.sender, this); // get mortgage amount\r\n        if(\r\n            amount_ >= 100 ether && \r\n            Token(XPA).transferFrom(msg.sender, this, amount_) \r\n        ){\r\n            fromAmountBooks[user] = safeAdd(fromAmountBooks[user], amount_); // update books\r\n            emit eMortgage(user,amount_); // wirte event\r\n        }\r\n    }\r\n    \r\n    // 借出 XPA Assets, amount: 指定借出金額\r\n    function withdraw(\r\n        address token_,\r\n        uint256 amount_,\r\n        address representor_\r\n    ) \r\n        onlyActive \r\n        public \r\n    {\r\n        address user = getUser(representor_);\r\n        if(\r\n            token_ != XPA &&\r\n            amount_ > 0 &&\r\n            amount_ <= safeDiv(safeMul(safeDiv(safeMul(getUsableXPA(user), getPrice(token_)), 1 ether), getHighestMortgageRate()), 1 ether)\r\n        ){\r\n            toAmountBooks[user][token_] = safeAdd(toAmountBooks[user][token_],amount_);\r\n            uint256 withdrawFee = safeDiv(safeMul(amount_,withdrawFeeRate),1 ether); // calculate withdraw fee\r\n            XPAAssetToken(token_).create(user, safeSub(amount_, withdrawFee));\r\n            XPAAssetToken(token_).create(this, withdrawFee);\r\n            emit eWithdraw(user, token_, amount_); // write event\r\n        }\r\n    }\r\n    \r\n    // 領回 XPA, amount: 指定領回金額\r\n    function withdrawXPA(\r\n        uint256 amount_,\r\n        address representor_\r\n    )\r\n        onlyActive\r\n        public\r\n    {\r\n        address user = getUser(representor_);\r\n        if(\r\n            amount_ >= 100 ether && \r\n            amount_ <= getUsableXPA(user)\r\n        ){\r\n            fromAmountBooks[user] = safeSub(fromAmountBooks[user], amount_);\r\n            require(Token(XPA).transfer(user, amount_));\r\n            emit eWithdraw(user, XPA, amount_); // write event\r\n        }    \r\n    }\r\n    \r\n    // 檢查額度是否足夠借出 XPA Assets\r\n    /*function checkWithdraw(\r\n        address token_,\r\n        uint256 amount_,\r\n        address user_\r\n    ) \r\n        internal  \r\n        view\r\n    returns(bool) {\r\n        if(\r\n            token_ != XPA && \r\n            amount_ <= safeDiv(safeMul(safeDiv(safeMul(getUsableXPA(user_), getPrice(token_)), 1 ether), getHighestMortgageRate()), 1 ether)\r\n        ){\r\n            return true;\r\n        }else if(\r\n            token_ == XPA && \r\n            amount_ <= getUsableXPA(user_)\r\n        ){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }*/\r\n\r\n    // 還款 XPA Assets, amount: 指定還回金額\r\n    function repayment(\r\n        address token_,\r\n        uint256 amount_,\r\n        address representor_\r\n    )\r\n        onlyActive \r\n        public\r\n    {\r\n        address user = getUser(representor_);\r\n        if(\r\n            XPAAssetToken(token_).burnFrom(user, amount_)\r\n        ) {\r\n            toAmountBooks[user][token_] = safeSub(toAmountBooks[user][token_],amount_);\r\n            emit eRepayment(user, token_, amount_);\r\n        }\r\n    }\r\n    \r\n    // 平倉 / 強行平倉, user: 指定平倉對象\r\n    function offset(\r\n        address user_,\r\n        address token_\r\n    )\r\n        onlyActive\r\n        public\r\n    {\r\n        uint256 userFromAmount = fromAmountBooks[user_] >= maxForceOffsetAmount ? maxForceOffsetAmount : fromAmountBooks[user_];\r\n        require(block.timestamp > initCanOffsetTime);\r\n        require(userFromAmount > 0);\r\n        address user = getUser(user_);\r\n\r\n        if(\r\n            user_ == user &&\r\n            getLoanAmount(user, token_) > 0\r\n        ){\r\n            emit eOffset(user, user_, userFromAmount);\r\n            uint256 remainingXPA = executeOffset(user_, userFromAmount, token_, offsetFeeRate);\r\n            \r\n            require(Token(XPA).transfer(fundAccount, safeDiv(safeMul(safeSub(userFromAmount, remainingXPA), 1 ether), safeAdd(1 ether, offsetFeeRate)))); //轉帳至平倉基金\r\n            fromAmountBooks[user_] = remainingXPA;\r\n        }else if(\r\n            user_ != user && \r\n            block.timestamp > (forceOffsetBooks[user_] + 28800) &&\r\n            getMortgageRate(user_) >= getClosingLine()\r\n        ){\r\n            forceOffsetBooks[user_] = block.timestamp;\r\n                \r\n            uint256 punishXPA = getPunishXPA(user_); //get 10% xpa\r\n            emit eOffset(user, user_, punishXPA);\r\n\r\n            uint256[3] memory forceOffsetFee;\r\n            forceOffsetFee[0] = safeDiv(safeMul(punishXPA, forceOffsetBasicFeeRate), 1 ether); //基本手續費(收益)\r\n            forceOffsetFee[1] = safeDiv(safeMul(punishXPA, forceOffsetExtraFeeRate), 1 ether); //額外手續費(平倉基金)\r\n            forceOffsetFee[2] = safeDiv(safeMul(punishXPA, forceOffsetExecuteFeeRate), 1 ether);//執行手續費(執行者)\r\n            forceOffsetFee[2] = forceOffsetFee[2] > forceOffsetExecuteMaxFee ? forceOffsetExecuteMaxFee : forceOffsetFee[2];\r\n\r\n            profit = safeAdd(profit, forceOffsetFee[0]);\r\n            uint256 allFee = safeAdd(forceOffsetFee[2],safeAdd(forceOffsetFee[0], forceOffsetFee[1]));\r\n            remainingXPA = safeSub(punishXPA,allFee);\r\n\r\n            for(uint256 i = 0; i < xpaAsset.length; i++) {\r\n                if(getLoanAmount(user_, xpaAsset[i]) > 0){\r\n                    remainingXPA = executeOffset(user_, remainingXPA, xpaAsset[i],0);\r\n                    if(remainingXPA == 0){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n                \r\n            fromAmountBooks[user_] = safeSub(fromAmountBooks[user_], safeSub(punishXPA, remainingXPA));\r\n            require(Token(XPA).transfer(fundAccount, safeAdd(forceOffsetFee[1],safeSub(safeSub(punishXPA, allFee), remainingXPA)))); //轉帳至平倉基金\r\n            require(Token(XPA).transfer(msg.sender, forceOffsetFee[2])); //執行手續費轉給執行者\r\n        }\r\n    }\r\n    \r\n    function executeOffset(\r\n        address user_,\r\n        uint256 xpaAmount_,\r\n        address xpaAssetToken,\r\n        uint256 feeRate\r\n    )\r\n        internal\r\n    returns(uint256){\r\n        uint256 fromXPAAsset = safeDiv(safeMul(xpaAmount_,getPrice(xpaAssetToken)),1 ether);\r\n        uint256 userToAmount = toAmountBooks[user_][xpaAssetToken];\r\n        uint256 fee = safeDiv(safeMul(userToAmount, feeRate), 1 ether);\r\n        uint256 burnXPA;\r\n        uint256 burnXPAAsset;\r\n        if(fromXPAAsset >= safeAdd(userToAmount, fee)){\r\n            burnXPA = safeDiv(safeMul(safeAdd(userToAmount, fee), 1 ether), getPrice(xpaAssetToken));\r\n            emit eExecuteOffset(burnXPA, xpaAssetToken, safeAdd(userToAmount, fee));\r\n            xpaAmount_ = safeSub(xpaAmount_, burnXPA);\r\n            toAmountBooks[user_][xpaAssetToken] = 0;\r\n            profit = safeAdd(profit, safeDiv(safeMul(fee,1 ether), getPrice(xpaAssetToken)));\r\n            if(\r\n                !FundAccount(fundAccount).burn(xpaAssetToken, userToAmount)\r\n            ){\r\n                unPaidFundAccount[xpaAssetToken] = safeAdd(unPaidFundAccount[xpaAssetToken],userToAmount);\r\n            }\r\n\r\n        }else{\r\n            \r\n            fee = safeDiv(safeMul(xpaAmount_, feeRate), 1 ether);\r\n            profit = safeAdd(profit, fee);\r\n            burnXPAAsset = safeDiv(safeMul(safeSub(xpaAmount_, fee),getPrice(xpaAssetToken)),1 ether);\r\n            toAmountBooks[user_][xpaAssetToken] = safeSub(userToAmount, burnXPAAsset);\r\n            emit eExecuteOffset(xpaAmount_, xpaAssetToken, burnXPAAsset);\r\n            \r\n            xpaAmount_ = 0;\r\n            if(\r\n                !FundAccount(fundAccount).burn(xpaAssetToken, burnXPAAsset)\r\n            ){\r\n                unPaidFundAccount[xpaAssetToken] = safeAdd(unPaidFundAccount[xpaAssetToken], burnXPAAsset);\r\n            }\r\n            \r\n        }\r\n        return xpaAmount_;\r\n    }\r\n    \r\n    function getPunishXPA(\r\n        address user_\r\n    )\r\n        internal\r\n        view \r\n    returns(uint256){\r\n        uint256 userFromAmount = fromAmountBooks[user_];\r\n        uint256 punishXPA = safeDiv(safeMul(userFromAmount, 0.1 ether),1 ether);\r\n        if(userFromAmount <= safeAdd(minForceOffsetAmount, 100 ether)){\r\n            return userFromAmount;\r\n        }else if(punishXPA < minForceOffsetAmount){\r\n            return minForceOffsetAmount;\r\n        }else if(punishXPA > maxForceOffsetAmount){\r\n            return maxForceOffsetAmount;\r\n        }else{\r\n            return punishXPA;\r\n        }\r\n    }\r\n    \r\n    // 取得用戶抵押率, user: 指定用戶\r\n    function getMortgageRate(\r\n        address user_\r\n    ) \r\n        public\r\n        view \r\n    returns(uint256){\r\n        if(fromAmountBooks[user_] != 0){\r\n            uint256 totalLoanXPA = 0;\r\n            for(uint256 i = 0; i < xpaAsset.length; i++) {\r\n                totalLoanXPA = safeAdd(totalLoanXPA, safeDiv(safeMul(getLoanAmount(user_,xpaAsset[i]), 1 ether), getPrice(xpaAsset[i])));\r\n            }\r\n            return safeDiv(safeMul(totalLoanXPA,1 ether),fromAmountBooks[user_]);\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n        \r\n    // 取得最高抵押率\r\n    function getHighestMortgageRate() \r\n        public\r\n        view \r\n    returns(uint256){\r\n        uint256 totalXPA = Token(XPA).totalSupply();\r\n        uint256 issueRate = safeDiv(safeMul(Token(XPA).balanceOf(this), 1 ether), totalXPA);\r\n        if(issueRate >= 0.7 ether){\r\n            return 0.7 ether;\r\n        }else if(issueRate >= 0.6 ether){\r\n            return 0.6 ether;\r\n        }else if(issueRate >= 0.5 ether){\r\n            return 0.5 ether;\r\n        }else if(issueRate >= 0.3 ether){\r\n            return 0.3 ether;\r\n        }else{\r\n            return 0.1 ether;\r\n        }\r\n    }\r\n    \r\n    // 取得平倉線\r\n    function getClosingLine() \r\n        public\r\n        view\r\n    returns(uint256){\r\n        uint256 highestMortgageRate = getHighestMortgageRate();\r\n        if(highestMortgageRate >= 0.6 ether){\r\n            return safeAdd(highestMortgageRate, 0.1 ether);\r\n        }else{\r\n            return 0.6 ether;\r\n        }\r\n    }\r\n    \r\n    // 取得 XPA Assets 匯率 \r\n    function getPrice(\r\n        address token_\r\n    ) \r\n        public\r\n        view\r\n    returns(uint256){\r\n        return TokenFactory(tokenFactory).getPrice(token_);\r\n    }\r\n    \r\n    // 取得用戶可提領的XPA(扣掉最高抵押率後的XPA)\r\n    function getUsableXPA(\r\n        address user_\r\n    )\r\n        public\r\n        view\r\n    returns(uint256) {\r\n        uint256 totalLoanXPA = 0;\r\n        for(uint256 i = 0; i < xpaAsset.length; i++) {\r\n            totalLoanXPA = safeAdd(totalLoanXPA, safeDiv(safeMul(getLoanAmount(user_,xpaAsset[i]), 1 ether), getPrice(xpaAsset[i])));\r\n        }\r\n        if(fromAmountBooks[user_] > safeDiv(safeMul(totalLoanXPA, 1 ether), getHighestMortgageRate())){\r\n            return safeSub(fromAmountBooks[user_], safeDiv(safeMul(totalLoanXPA, 1 ether), getHighestMortgageRate()));\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    // 取得用戶可借貸 XPA Assets 最大額度, user: 指定用戶\r\n    /*function getUsableAmount(\r\n        address user_,\r\n        address token_\r\n    ) \r\n        public\r\n        view\r\n    returns(uint256) {\r\n        uint256 amount = safeDiv(safeMul(fromAmountBooks[user_], getPrice(token_)), 1 ether);\r\n        return safeDiv(safeMul(amount, getHighestMortgageRate()), 1 ether);\r\n    }*/\r\n    \r\n    // 取得用戶已借貸 XPA Assets 數量, user: 指定用戶\r\n    function getLoanAmount(\r\n        address user_,\r\n        address token_\r\n    ) \r\n        public\r\n        view\r\n    returns(uint256) {\r\n        return toAmountBooks[user_][token_];\r\n    }\r\n    \r\n    // 取得用戶剩餘可借貸 XPA Assets 額度, user: 指定用戶\r\n    function getRemainingAmount(\r\n        address user_,\r\n        address token_\r\n    ) \r\n        public\r\n        view\r\n    returns(uint256) {\r\n        uint256 amount = safeDiv(safeMul(getUsableXPA(user_), getPrice(token_)), 1 ether);\r\n        return safeDiv(safeMul(amount, getHighestMortgageRate()), 1 ether);\r\n    }\r\n    \r\n    function burnFundAccount(\r\n        address token_,\r\n        uint256 amount_\r\n    )\r\n        onlyOperator\r\n        public\r\n    {\r\n        if(\r\n            FundAccount(fundAccount).burn(token_, amount_)\r\n        ){\r\n            unPaidFundAccount[token_] = safeSub(unPaidFundAccount[token_], amount_);\r\n        }\r\n    }\r\n\r\n    function transferProfit(\r\n        uint256 token_,\r\n        uint256 amount_\r\n    )\r\n        onlyOperator \r\n        public\r\n    {\r\n        if(amount_ > 0 && Token(token_).balanceOf(this) >= amount_){\r\n            require(Token(token_).transfer(bank, amount_));\r\n            profit = safeSub(profit,amount_);\r\n        }\r\n    }\r\n        \r\n    function setFeeRate(\r\n        uint256 withDrawFeerate_,\r\n        uint256 offsetFeerate_,\r\n        uint256 forceOffsetBasicFeerate_,\r\n        uint256 forceOffsetExecuteFeerate_,\r\n        uint256 forceOffsetExtraFeerate_,\r\n        uint256 forceOffsetExecuteMaxFee_\r\n    )\r\n        onlyOperator \r\n        public\r\n    {\r\n        require(withDrawFeerate_ < 0.05 ether);\r\n        require(offsetFeerate_ < 0.05 ether);\r\n        require(forceOffsetBasicFeerate_ < 0.05 ether);\r\n        require(forceOffsetExecuteFeerate_ < 0.05 ether);\r\n        require(forceOffsetExtraFeerate_ < 0.05 ether);\r\n        withdrawFeeRate = withDrawFeerate_;\r\n        offsetFeeRate = offsetFeerate_;\r\n        forceOffsetBasicFeeRate = forceOffsetBasicFeerate_;\r\n        forceOffsetExecuteFeeRate = forceOffsetExecuteFeerate_;\r\n        forceOffsetExtraFeeRate = forceOffsetExtraFeerate_;\r\n        forceOffsetExecuteMaxFee = forceOffsetExecuteMaxFee_;\r\n    }\r\n\r\n    function migrate(\r\n        address newContract_\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        if(\r\n            newXPAAssets == address(0) &&\r\n            XPAAssets(newContract_).transferXPAAssetAndProfit(xpaAsset, profit) &&\r\n            Token(XPA).transfer(newContract_, Token(XPA).balanceOf(this))\r\n        ) {\r\n            forceOff = true;\r\n            powerStatus = false;\r\n            newXPAAssets = newContract_;\r\n            for(uint256 i = 0; i < xpaAsset.length; i++) {\r\n                XPAAssets(newContract_).transferUnPaidFundAccount(xpaAsset[i], unPaidFundAccount[xpaAsset[i]]);\r\n            }\r\n            emit eMigrate(newContract_);\r\n        }\r\n    }\r\n    \r\n    function transferXPAAssetAndProfit(\r\n        address[] xpaAsset_,\r\n        uint256 profit_\r\n    )\r\n        public\r\n        onlyOperator\r\n    returns(bool) {\r\n        xpaAsset = xpaAsset_;\r\n        profit = profit_;\r\n        return true;\r\n    }\r\n    \r\n    function transferUnPaidFundAccount(\r\n        address xpaAsset_,\r\n        uint256 unPaidAmount_\r\n    )\r\n        public\r\n        onlyOperator\r\n    returns(bool) {\r\n        unPaidFundAccount[xpaAsset_] = unPaidAmount_;\r\n        return true;\r\n    }\r\n    \r\n    function migratingAmountBooks(\r\n        address user_,\r\n        address newContract_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        XPAAssets(newContract_).migrateAmountBooks(user_); \r\n    }\r\n    \r\n    function migrateAmountBooks(\r\n        address user_\r\n    )\r\n        public\r\n        onlyOperator \r\n    {\r\n        require(msg.sender == oldXPAAssets);\r\n        require(!migrateBooks[user_]);\r\n\r\n        migrateBooks[user_] = true;\r\n        fromAmountBooks[user_] = safeAdd(fromAmountBooks[user_],XPAAssets(oldXPAAssets).getFromAmountBooks(user_));\r\n        forceOffsetBooks[user_] = XPAAssets(oldXPAAssets).getForceOffsetBooks(user_);\r\n        for(uint256 i = 0; i < xpaAsset.length; i++) {\r\n            toAmountBooks[user_][xpaAsset[i]] = safeAdd(toAmountBooks[user_][xpaAsset[i]], XPAAssets(oldXPAAssets).getLoanAmount(user_,xpaAsset[i]));\r\n        }\r\n        emit eMigrateAmount(user_);\r\n    }\r\n    \r\n    function getFromAmountBooks(\r\n        address user_\r\n    )\r\n        public\r\n        view \r\n    returns(uint256) {\r\n        return fromAmountBooks[user_];\r\n    }\r\n    \r\n    function getForceOffsetBooks(\r\n        address user_\r\n    )\r\n        public \r\n        view \r\n    returns(uint256) {\r\n        return forceOffsetBooks[user_];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"forceOff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldXPAAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bank_\",\"type\":\"address\"}],\"name\":\"assignBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unPaidFundAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xpaAsset_\",\"type\":\"address[]\"},{\"name\":\"profit_\",\"type\":\"uint256\"}],\"name\":\"transferXPAAssetAndProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"representor_\",\"type\":\"address\"}],\"name\":\"repayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"representor_\",\"type\":\"address\"}],\"name\":\"withdrawXPA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initCanOffsetTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"XPA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"toAmountBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbol_\",\"type\":\"string\"},{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"defaultExchangeRate_\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"agentBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"uint256\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xpaAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAmountBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"representor_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fundAccount_\",\"type\":\"address\"}],\"name\":\"setFundAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offsetFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minForceOffsetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getForceOffsetBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getRemainingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forceOffsetExtraFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"offset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"assignOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newXPAAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getLoanAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forceOffsetExecuteMaxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHighestMortgageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUsableXPA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xpaAsset_\",\"type\":\"address\"},{\"name\":\"unPaidAmount_\",\"type\":\"uint256\"}],\"name\":\"transferUnPaidFundAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent_\",\"type\":\"address\"}],\"name\":\"assignAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getFromAmountBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"newContract_\",\"type\":\"address\"}],\"name\":\"migratingAmountBooks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxForceOffsetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"migrateAmountBooks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forceOffsetExecuteFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"representor_\",\"type\":\"address\"}],\"name\":\"isRepresentor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContract_\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forceOffsetBasicFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withDrawFeerate_\",\"type\":\"uint256\"},{\"name\":\"offsetFeerate_\",\"type\":\"uint256\"},{\"name\":\"forceOffsetBasicFeerate_\",\"type\":\"uint256\"},{\"name\":\"forceOffsetExecuteFeerate_\",\"type\":\"uint256\"},{\"name\":\"forceOffsetExtraFeerate_\",\"type\":\"uint256\"},{\"name\":\"forceOffsetExecuteMaxFee_\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"representor_\",\"type\":\"address\"}],\"name\":\"mortgage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrateBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClosingLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"forceOffsetBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFundAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onOff_\",\"type\":\"bool\"}],\"name\":\"powerSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getMortgageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initCanOffsetTime_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eMortgage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eOffset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eExecuteOffset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"eMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"eMigrateAmount\",\"type\":\"event\"}]","ContractName":"XPAAssets","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c01cf00","Library":"","SwarmSource":"bzzr://a99575bf4f9d535d5541fa3cb8cfaf427d274027ed120218f267af66ce3cba60"}]}