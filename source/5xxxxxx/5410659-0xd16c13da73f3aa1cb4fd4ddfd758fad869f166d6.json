{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\n\r\ncontract IBattleboardData is AccessControl  {\r\n\r\n  \r\n\r\n      // write functions\r\n  \r\nfunction createBattleboard(uint prize, uint8 restrictions) onlySERAPHIM external returns (uint16);\r\nfunction killMonster(uint16 battleboardId, uint8 monsterId)  onlySERAPHIM external;\r\nfunction createNullTile(uint16 _battleboardId) private ;\r\nfunction createTile(uint16 _battleboardId, uint8 _tileType, uint8 _value, uint8 _position, uint32 _hp, uint16 _petPower, uint64 _angelId, uint64 _petId, address _owner, uint8 _team) onlySERAPHIM external  returns (uint8);\r\nfunction killTile(uint16 battleboardId, uint8 tileId) onlySERAPHIM external ;\r\nfunction addTeamtoBoard(uint16 battleboardId, address owner, uint8 team) onlySERAPHIM external;\r\nfunction setTilePosition (uint16 battleboardId, uint8 tileId, uint8 _positionTo) onlySERAPHIM public ;\r\nfunction setTileHp(uint16 battleboardId, uint8 tileId, uint32 _hp) onlySERAPHIM external ;\r\nfunction addMedalBurned(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction setLastMoveTime(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction iterateTurn(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction killBoard(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction clearAngelsFromBoard(uint16 battleboardId) private;\r\n//Read functions\r\n     \r\nfunction getTileHp(uint16 battleboardId, uint8 tileId) constant external returns (uint32) ;\r\nfunction getMedalsBurned(uint16 battleboardId) constant external returns (uint8) ;\r\nfunction getTeam(uint16 battleboardId, uint8 tileId) constant external returns (uint8) ;\r\nfunction getMaxFreeTeams() constant public returns (uint8);\r\nfunction getBarrierNum(uint16 battleboardId) public constant returns (uint8) ;\r\nfunction getTileFromBattleboard(uint16 battleboardId, uint8 tileId) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint16 petPower, uint64 angelId, uint64 petId, bool isLive, address owner)   ;\r\nfunction getTileIDByOwner(uint16 battleboardId, address _owner) constant public returns (uint8) ;\r\nfunction getPetbyTileId( uint16 battleboardId, uint8 tileId) constant public returns (uint64) ;\r\nfunction getOwner (uint16 battleboardId, uint8 team,  uint8 ownerNumber) constant external returns (address);\r\nfunction getTileIDbyPosition(uint16 battleboardId, uint8 position) public constant returns (uint8) ;\r\nfunction getPositionFromBattleboard(uint16 battleboardId, uint8 _position) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint32 petPower, uint64 angelId, uint64 petId, bool isLive)  ;\r\nfunction getBattleboard(uint16 id) public constant returns (uint8 turn, bool isLive, uint prize, uint8 numTeams, uint8 numTiles, uint8 createdBarriers, uint8 restrictions, uint lastMoveTime, uint8 numTeams1, uint8 numTeams2, uint8 monster1, uint8 monster2) ;\r\nfunction isBattleboardLive(uint16 battleboardId) constant public returns (bool);\r\nfunction isTileLive(uint16 battleboardId, uint8 tileId) constant  external returns (bool) ;\r\nfunction getLastMoveTime(uint16 battleboardId) constant public returns (uint) ;\r\nfunction getNumTilesFromBoard (uint16 _battleboardId) constant public returns (uint8) ; \r\nfunction angelOnBattleboards(uint64 angelID) external constant returns (bool) ;\r\nfunction getTurn(uint16 battleboardId) constant public returns (address) ;\r\nfunction getNumTeams(uint16 battleboardId, uint8 team) public constant returns (uint8);\r\nfunction getMonsters(uint16 BattleboardId) external constant returns (uint8 monster1, uint8 monster2) ;\r\nfunction getTotalBattleboards() public constant returns (uint16) ;\r\n  \r\n        \r\n \r\n   \r\n}\r\ncontract IMedalData is AccessControl {\r\n  \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n   \r\nfunction totalSupply() public view returns (uint256);\r\nfunction setMaxTokenNumbers()  onlyCREATOR external;\r\nfunction balanceOf(address _owner) public view returns (uint256);\r\nfunction tokensOf(address _owner) public view returns (uint256[]) ;\r\nfunction ownerOf(uint256 _tokenId) public view returns (address);\r\nfunction approvedFor(uint256 _tokenId) public view returns (address) ;\r\nfunction transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction takeOwnership(uint256 _tokenId) public;\r\nfunction _createMedal(address _to, uint8 _seriesID) onlySERAPHIM public ;\r\nfunction getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32);\r\nfunction getMedalType (uint256 _tokenId) public constant returns (uint8);\r\nfunction _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external;\r\nfunction isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) ;\r\nfunction clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal;\r\nfunction clearApproval(address _owner, uint256 _tokenId) private;\r\nfunction addToken(address _to, uint256 _tokenId) private ;\r\nfunction removeToken(address _from, uint256 _tokenId) private;\r\n}\r\ncontract BattleboardsSupport is AccessControl, SafeMath  {\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    address public medalDataContract =  0x33A104dCBEd81961701900c06fD14587C908EAa3;\r\n    address public battleboardDataContract =0xE60fC4632bD6713E923FE93F8c244635E6d5009e;\r\n\r\n    \r\n    \r\n    uint8 public medalBoost = 50;\r\n    uint8 public numBarriersPerBoard = 6;\r\n    uint public barrierPrice = 1000000000000000;\r\n    uint8 public maxMedalsBurned = 3;\r\n    uint8 public barrierStrength = 75;\r\n    \r\n      \r\n          // Utility Functions\r\n    function DataContacts(address _medalDataContract, address _battleboardDataContract) onlyCREATOR external {\r\n      \r\n        medalDataContract = _medalDataContract;\r\n        battleboardDataContract = _battleboardDataContract;\r\n    }\r\n    \r\n    function setVariables( uint8 _medalBoost, uint8 _numBarriersPerBoard, uint8 _maxMedalsBurned, uint8 _barrierStrength, uint _barrierPrice) onlyCREATOR external {\r\n        medalBoost = _medalBoost;\r\n        numBarriersPerBoard = _numBarriersPerBoard;\r\n        maxMedalsBurned = _maxMedalsBurned;\r\n        barrierStrength = _barrierStrength;\r\n        barrierPrice = _barrierPrice;\r\n        \r\n    }\r\n    \r\n      \r\n      \r\n        //Can be called by anyone at anytime,    \r\n       function erectBarrier(uint16 battleboardId, uint8 _barrierType, uint8 _position) external payable {\r\n           IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n           uint8 numBarriers = battleboardData.getBarrierNum(battleboardId);\r\n           if (battleboardData.getTileIDbyPosition(battleboardId, _position) != 0 ) {revert();}  //Can't put a barrier on top of another tile\r\n           if (numBarriers >= numBarriersPerBoard) {revert();} //can't put too many barriers on one board. \r\n           if (msg.value < barrierPrice) {revert();}\r\n           if ((_barrierType <2) || (_barrierType >4)) {revert();} //can't create another tile instead of a barrier. \r\n          battleboardData.createTile(battleboardId,_barrierType, barrierStrength, _position, 0, 0, 0, 0, address(this),0);\r\n       }\r\n       \r\n       \r\n                \r\n          function checkExistsOwnedMedal (uint64 medalId) public constant returns (bool) {\r\n          IMedalData medalData = IMedalData(medalDataContract);\r\n       \r\n        if ((medalId < 0) || (medalId > medalData.totalSupply())) {return false;}\r\n        if (medalData.ownerOf(medalId) == msg.sender) {return true;}\r\n        \r\n       else  return false;\r\n}\r\n       \r\n             function medalBoostAndBurn(uint16 battleboardId, uint64 medalId) public  {\r\n               \r\n               //IMPORTANT: Before burning a medal in this function, you must APPROVE this address\r\n               //in the medal data contract to unlock it. \r\n               \r\n                IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n\r\n                uint8 tileId = battleboardData.getTileIDByOwner(battleboardId,msg.sender);\r\n                //can't resurrect yourself. \r\n                if (battleboardData.isTileLive(battleboardId,tileId) == false) {revert();}\r\n                \r\n               if  (checkExistsOwnedMedal(medalId)== false) {revert();}\r\n               \r\n               //make sure the max number of medals haven't already been burned. \r\n               if (battleboardData.getMedalsBurned(battleboardId) >= maxMedalsBurned) {revert();}\r\n              battleboardData.addMedalBurned(battleboardId);\r\n                 //this first takes and then burns the medal. \r\n               IMedalData medalData = IMedalData(medalDataContract);\r\n               uint8 medalType = medalData.getMedalType(medalId);\r\n               medalData.takeOwnership(medalId);\r\n               medalData._burn(medalId);\r\n            uint32 hp = battleboardData.getTileHp(battleboardId, tileId);\r\n           \r\n          battleboardData.setTileHp(battleboardId, tileId, hp + (medalType * medalBoost));\r\n       }\r\n       \r\n         \r\n           function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n \r\n        \r\nfunction withdrawEther()  onlyCREATOR external {\r\n    creatorAddress.transfer(this.balance);\r\n}\r\n       \r\n       \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"medalDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_medalDataContract\",\"type\":\"address\"},{\"name\":\"_battleboardDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleboardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"barrierStrength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"medalId\",\"type\":\"uint64\"}],\"name\":\"checkExistsOwnedMedal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"barrierPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"_barrierType\",\"type\":\"uint8\"},{\"name\":\"_position\",\"type\":\"uint8\"}],\"name\":\"erectBarrier\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"},{\"name\":\"medalId\",\"type\":\"uint64\"}],\"name\":\"medalBoostAndBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMedalsBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_medalBoost\",\"type\":\"uint8\"},{\"name\":\"_numBarriersPerBoard\",\"type\":\"uint8\"},{\"name\":\"_maxMedalsBurned\",\"type\":\"uint8\"},{\"name\":\"_barrierStrength\",\"type\":\"uint8\"},{\"name\":\"_barrierPrice\",\"type\":\"uint256\"}],\"name\":\"setVariables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medalBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBarriersPerBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BattleboardsSupport","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c488240264cc46562169e6871ce7fb5e973d00cea58bc8d511cd784800d7c55e"}]}