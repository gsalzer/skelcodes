{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract LiterallyMinecraft {\r\n\r\n  // total number of chunks\r\n  uint constant global_width = 32;\r\n  uint constant global_height = 32;\r\n  uint constant global_length = global_width*global_height;\r\n\r\n  // size of chunk in bytes32\r\n  uint constant chunk_size = 32;\r\n\r\n  // represents a 32x32 8-bit image with owner and stake meta data\r\n  struct Chunk {\r\n    bytes32[chunk_size] colors;\r\n\r\n    address owner;\r\n    uint value;\r\n  }\r\n\r\n  // chunk array in row major order\r\n  Chunk[global_length] public screen;\r\n  \r\n  // block number of last update\r\n  uint public lastUpdateOverall;\r\n\r\n  // block number of last update for each individual block\r\n  uint[global_length] public lastUpdateByChunk;\r\n\r\n  // this forces abi to give us the whole array\r\n  function getUpdateTimes() external view\r\n    returns(uint[global_length])\r\n  {\r\n    return lastUpdateByChunk;\r\n  }  \r\n\r\n  // helper index conversion function\r\n  function getIndex(uint8 x, uint8 y) public pure returns(uint) {\r\n    return y*global_width+x;\r\n  }\r\n\r\n  // access chunk data by x y coordinates\r\n  function getChunk(uint8 x, uint8 y) external view\r\n    withinBounds(x,y)\r\n    returns(bytes32[chunk_size], address, uint, uint)\r\n  {\r\n    uint index = getIndex(x,y);\r\n    \r\n    if (lastUpdateByChunk[index] == 0)     // initial default image is gaint cat\r\n      return (getCatImage(x,y), 0x0, 0, 0);\r\n    \r\n    Chunk storage p = screen[index];\r\n    return (p.colors, p.owner, p.value, lastUpdateByChunk[index]);\r\n  }\r\n\r\n  // modifier to check if point is in bounds\r\n  modifier withinBounds(uint8 x, uint8 y) {\r\n    require(x >= 0 && x < global_width, \"x out of range\");\r\n    require(y >= 0 && y < global_height, \"y out of range\");\r\n    _;\r\n  }\r\n\r\n  // modifier to check if msg value is sufficient to take control of a chunk\r\n  modifier hasTheMoneys(uint8 x, uint8 y) {\r\n    Chunk storage p = screen[getIndex(x,y)];\r\n    require(msg.value > p.value, \"insufficient funds\");\r\n    _;\r\n  }\r\n\r\n  // indicate the chunk has been updated\r\n  function touch(uint8 x, uint8 y) internal {\r\n    lastUpdateByChunk[getIndex(x,y)] = block.number;\r\n    lastUpdateOverall = block.number;\r\n  }\r\n\r\n  // This function claims a chunk in the screen grid.\r\n  // In order to claim it, the amount paid needs to\r\n  // exceed the amount that was last paid on the chunk\r\n  // (starting at 0). Previous updater is refunded the\r\n  // ether they staked.\r\n  function setColors(uint8 x, uint8 y, bytes32[chunk_size] clr) external payable\r\n    withinBounds(x,y)\r\n    hasTheMoneys(x,y)\r\n  {\r\n    Chunk storage p = screen[getIndex(x,y)];\r\n    \r\n    uint refund = p.value;\r\n    address oldOwner = p.owner;\r\n    \r\n    p.value = msg.value;\r\n    p.owner = msg.sender;\r\n    p.colors = clr;\r\n    \r\n    touch(x,y);\r\n\r\n    oldOwner.send(refund); // ignore if the send fails\r\n  }\r\n\r\n  // Generate a giant cat image\r\n  function getCatImage(uint8 x, uint8 y) internal pure\r\n    returns(bytes32[chunk_size])\r\n  {\r\n    bytes32[chunk_size] memory cat;\r\n    cat[0] =  hex\"0000000000000000000000000000000000000000000000000000000000000000\";\r\n    cat[1] =  hex\"0000000000000000000000000000000000000000000000000000000000000000\";\r\n    cat[2] =  hex\"0000e3e300e0e0e0001c1c1c0000000000000000000000000000000000000000\";\r\n    cat[3] =  hex\"0000e30000e000e000001c000000000000fc000000fc0000000000f0f0f00000\";\r\n    cat[4] =  hex\"0000e30000e0e0e000001c000000000000fcfc00fcfc0000000000f000000000\";\r\n    cat[5] =  hex\"0000e3e300e000e000001c000000000000fcfcfcfcfc0000000000f000f00000\";\r\n    cat[6] =  hex\"00000000000000000000000000000000fcfcfcfcfcfcfc00000000f0f0f00000\";\r\n    cat[7] =  hex\"000000000000000000000000000000fcfcfcfcfcfcfcfcfc0000000000000000\";\r\n    cat[8] =  hex\"00000000000000000000000000001ffcfc0000fcfc0000fc000000fcfcfc0000\";\r\n    cat[9] =  hex\"00000000000000000000000000001ffcfcfcfcfcfcfcfcfc000000fc00fc0000\";\r\n    cat[10] = hex\"00000000000000ff000000001f1f1ffcfcfcfc0000fcfcfc000000fcfcfc0000\";\r\n    cat[11] = hex\"0000000000ffff00000000001f1f1f1ffcfc00fcfc00fc00000000fc00fc0000\";\r\n    cat[12] = hex\"00000000ff0000000000001f1ffcfc1f1ffcfcfcfcfc1f1f0000000000000000\";\r\n    cat[13] = hex\"000000ff00000000ff00000000fcfc1f1f1f1f1f1f1f1f1f00001f0000001f00\";\r\n    cat[14] = hex\"0000ff000000ffff00000000fcfc1f1f1f1f1f1f1f1f1f1f00001f1f001f1f00\";\r\n    cat[15] = hex\"0000ffff00ff00000000fcfcfc001f1f1ffc1f1f1f1f1f0000001f001f001f00\";\r\n    cat[16] = hex\"000000ffff000000ffff00000000001ffcfc1f1f1f1f1f0000001f0000001f00\";\r\n    cat[17] = hex\"00000000ffff00ff00000000ff000000fc1f1f1f1f1f1f0000001f0000001f00\";\r\n    cat[18] = hex\"0000000000ffff000000ffff0000fcfc001f1f1f1f1f00000000000000000000\";\r\n    cat[19] = hex\"000000000000ffff00ff00000000ff0000001f1f1f000000000000ffffff0000\";\r\n    cat[20] = hex\"00000000000000ffff000000ffff00000000001f1f000000000000ff00000000\";\r\n    cat[21] = hex\"0000000000000000ffff00ff00000000ff00000000000000000000ffff000000\";\r\n    cat[22] = hex\"000000000000000000ffff000000ffff0000000000000000000000ff00000000\";\r\n    cat[23] = hex\"00000000000000000000ffff00ff00000000ff0000000000000000ffffff0000\";\r\n    cat[24] = hex\"0000000000000000000000ffff000000ffff00000000ff000000000000000000\";\r\n    cat[25] = hex\"000000000000000000000000ffff00ff00000000ff0000ff0000000000000000\";\r\n    cat[26] = hex\"00000000000000000000000000ffff000000ffff0000ff000000000000000000\";\r\n    cat[27] = hex\"0000000000000000000000000000ffff00ff000000ff00000000000000000000\";\r\n    cat[28] = hex\"000000000000000000000000000000ffff0000ffff0000000000000000000000\";\r\n    cat[29] = hex\"00000000000000000000000000000000ffffff00000000000000000000000000\";\r\n    cat[30] = hex\"0000000000000000000000000000000000000000000000000000000000000000\";\r\n    cat[31] = hex\"0000000000000000000000000000000000000000000000000000000000000000\";\r\n\r\n    bytes32 pixel_row = cat[y][x];\r\n      \r\n    pixel_row |= (pixel_row >> 1*8);\r\n    pixel_row |= (pixel_row >> 2*8);\r\n    pixel_row |= (pixel_row >> 4*8);\r\n    pixel_row |= (pixel_row >> 8*8);\r\n    pixel_row |= (pixel_row >> 16*8);\r\n\r\n    for (y = 0; y < 32; ++y)\r\n      cat[y] = pixel_row;\r\n\r\n    return cat;\r\n\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastUpdateByChunk\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"screen\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateOverall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"},{\"name\":\"clr\",\"type\":\"bytes32[32]\"}],\"name\":\"setColors\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpdateTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[1024]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"}],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint8\"},{\"name\":\"y\",\"type\":\"uint8\"}],\"name\":\"getChunk\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[32]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiterallyMinecraft","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dc7a160982e9f33e9ecf57176e5871556b285f36f3713c9676d6c8e70c8365f6"}]}