{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n contract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n\r\n    event OwnershipRequested(address indexed _by, address indexed _to);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _;}\r\n\r\n    /// Proposes to transfer control of the contract to a newOwnerCandidate.\r\n    /// @param _newOwnerCandidate address The address to transfer ownership to.\r\n    function transferOwnership(address _newOwnerCandidate) external onlyOwner {\r\n        require(_newOwnerCandidate != address(0));\r\n\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n\r\n        emit OwnershipRequested(msg.sender, newOwnerCandidate);\r\n    }\r\n\r\n    /// Accept ownership transfer. This method needs to be called by the perviously proposed owner.\r\n    function acceptOwnership() external {\r\n        if (msg.sender == newOwnerCandidate) {\r\n            owner = newOwnerCandidate;\r\n            newOwnerCandidate = address(0);\r\n\r\n            emit OwnershipTransferred(owner, newOwnerCandidate);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Serverable is Ownable {\r\n    address public server;\r\n\r\n    modifier onlyServer() { require(msg.sender == server); _;}\r\n\r\n    function setServerAddress(address _newServerAddress) external onlyOwner {\r\n        server = _newServerAddress;\r\n    }\r\n}\r\n\r\n\r\ncontract BalanceManager is Serverable {\r\n    /** player balances **/\r\n    mapping(uint32 => uint64) public balances;\r\n    /** player blocked tokens number **/\r\n    mapping(uint32 => uint64) public blockedBalances;\r\n    /** wallet balances **/\r\n    mapping(address => uint64) public walletBalances;\r\n    /** adress users **/\r\n    mapping(address => uint32) public userIds;\r\n\r\n    /** Dispatcher contract address **/\r\n    address public dispatcher;\r\n    /** service reward can be withdraw by owners **/\r\n    uint serviceReward;\r\n    /** service reward can be withdraw by owners **/\r\n    uint sentBonuses;\r\n    /** Token used to pay **/\r\n    ERC223 public gameToken;\r\n\r\n    modifier onlyDispatcher() {require(msg.sender == dispatcher);\r\n        _;}\r\n\r\n    event Withdraw(address _user, uint64 _amount);\r\n    event Deposit(address _user, uint64 _amount);\r\n\r\n    constructor(address _gameTokenAddress) public {\r\n        gameToken = ERC223(_gameTokenAddress);\r\n    }\r\n\r\n    function setDispatcherAddress(address _newDispatcherAddress) external onlyOwner {\r\n        dispatcher = _newDispatcherAddress;\r\n    }\r\n\r\n    /**\r\n     * Deposits from user\r\n     */\r\n    function tokenFallback(address _from, uint256 _amount, bytes _data) public {\r\n        if (userIds[_from] > 0) {\r\n            balances[userIds[_from]] += uint64(_amount);\r\n        } else {\r\n            walletBalances[_from] += uint64(_amount);\r\n        }\r\n\r\n        emit Deposit(_from, uint64(_amount));\r\n    }\r\n\r\n    /**\r\n     * Register user\r\n     */\r\n    function registerUserWallet(address _user, uint32 _id) external onlyServer {\r\n        require(userIds[_user] == 0);\r\n        require(_user != owner);\r\n\r\n        userIds[_user] = _id;\r\n        if (walletBalances[_user] > 0) {\r\n            balances[_id] += walletBalances[_user];\r\n            walletBalances[_user] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deposits tokens in game to some user\r\n     */\r\n    function sendTo(address _user, uint64 _amount) external {\r\n        require(walletBalances[msg.sender] >= _amount);\r\n        walletBalances[msg.sender] -= _amount;\r\n        if (userIds[_user] > 0) {\r\n            balances[userIds[_user]] += _amount;\r\n        } else {\r\n            walletBalances[_user] += _amount;\r\n        }\r\n        emit Deposit(_user, _amount);\r\n    }\r\n\r\n    /**\r\n     * User can withdraw tokens manually in any time\r\n     */\r\n    function withdraw(uint64 _amount) external {\r\n        uint32 userId = userIds[msg.sender];\r\n        if (userId > 0) {\r\n            require(balances[userId] - blockedBalances[userId] >= _amount);\r\n            if (gameToken.transfer(msg.sender, _amount)) {\r\n                balances[userId] -= _amount;\r\n                emit Withdraw(msg.sender, _amount);\r\n            }\r\n        } else {\r\n            require(walletBalances[msg.sender] >= _amount);\r\n            if (gameToken.transfer(msg.sender, _amount)) {\r\n                walletBalances[msg.sender] -= _amount;\r\n                emit Withdraw(msg.sender, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Server can withdraw tokens to user\r\n     */\r\n    function systemWithdraw(address _user, uint64 _amount) external onlyServer {\r\n        uint32 userId = userIds[_user];\r\n        require(balances[userId] - blockedBalances[userId] >= _amount);\r\n\r\n        if (gameToken.transfer(_user, _amount)) {\r\n            balances[userId] -= _amount;\r\n            emit Withdraw(_user, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatcher can change user balance\r\n     */\r\n    function addUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\r\n        balances[_userId] += _amount;\r\n    }\r\n\r\n    /**\r\n     * Dispatcher can change user balance\r\n     */\r\n    function spendUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\r\n        require(balances[_userId] >= _amount);\r\n        balances[_userId] -= _amount;\r\n        if (blockedBalances[_userId] > 0) {\r\n            if (blockedBalances[_userId] <= _amount)\r\n                blockedBalances[_userId] = 0;\r\n            else\r\n                blockedBalances[_userId] -= _amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Server can add bonuses to users, they will take from owner balance\r\n     */\r\n    function addBonus(uint32[] _userIds, uint64[] _amounts) external onlyServer {\r\n        require(_userIds.length == _amounts.length);\r\n\r\n        uint64 sum = 0;\r\n        for (uint32 i = 0; i < _amounts.length; i++)\r\n            sum += _amounts[i];\r\n\r\n        require(walletBalances[owner] >= sum);\r\n        for (i = 0; i < _userIds.length; i++) {\r\n            balances[_userIds[i]] += _amounts[i];\r\n            blockedBalances[_userIds[i]] += _amounts[i];\r\n        }\r\n\r\n        sentBonuses += sum;\r\n        walletBalances[owner] -= sum;\r\n    }\r\n\r\n    /**\r\n     * Dispatcher can change user balance\r\n     */\r\n    function addServiceReward(uint _amount) external onlyDispatcher {\r\n        serviceReward += _amount;\r\n    }\r\n\r\n    /**\r\n     * Owner withdraw service fee tokens \r\n     */\r\n    function serviceFeeWithdraw() external onlyOwner {\r\n        require(serviceReward > 0);\r\n        if (gameToken.transfer(msg.sender, serviceReward))\r\n            serviceReward = 0;\r\n    }\r\n\r\n    function viewSentBonuses() public view returns (uint) {\r\n        require(msg.sender == owner || msg.sender == server);\r\n        return sentBonuses;\r\n    }\r\n\r\n    function viewServiceReward() public view returns (uint) {\r\n        require(msg.sender == owner || msg.sender == server);\r\n        return serviceReward;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint32\"},{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"addUserBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSentBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newServerAddress\",\"type\":\"address\"}],\"name\":\"setServerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addServiceReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userIds\",\"type\":\"uint32[]\"},{\"name\":\"_amounts\",\"type\":\"uint64[]\"}],\"name\":\"addBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"systemWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewServiceReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint32\"},{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"spendUserBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"serviceFeeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDispatcherAddress\",\"type\":\"address\"}],\"name\":\"setDispatcherAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"registerUserWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispatcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"sendTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"server\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BalanceManager","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000002000d184b10ee51be2c6bf45214b048f311a15296cae","Library":"","SwarmSource":"bzzr://6f48094293c4349a7e69ee7af80f6482f280f5410d90e0544a8071833fc2fc3b"}]}