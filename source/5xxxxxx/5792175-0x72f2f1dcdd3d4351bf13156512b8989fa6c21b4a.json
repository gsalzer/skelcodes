{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned () public {\r\n        owner = msg.sender; \r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { \r\n    function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public; \r\n    \r\n}\r\n\r\ncontract RewardsCoin is owned {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal maxSupply;  \r\n    string public name; \r\n    string public symbol; \r\n    uint256 public decimals;  \r\n    uint256 public totalSupply; \r\n    address public beneficiary;\r\n    address public dev1; \r\n    address public dev2;\r\n    address public market1;\r\n    address public market2; \r\n    address public bounty;\r\n    address public lockedTokens;\r\n    uint256 public burnt;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Burnfrom(address indexed _from, uint256 value);\r\n\r\n    function RewardsCoin() public {\r\n            \r\n        name = \"Rewards Coin\";    \r\n        symbol = \"REW\";    \r\n        decimals = 18;\r\n        burnt = 0;\r\n        maxSupply = 25000000 * (10 ** decimals);   \r\n        totalSupply = totalSupply.add(maxSupply);\r\n        beneficiary = 0x89F2843837Ba5363b3550560184AC181924aCE4E;\r\n\r\n        //Dev 1 Account\r\n        dev1 = 0x4a194a5560a8DA2eaDAfc2F82B5793848685e1d3;\r\n\r\n        //Dev 2 Account\r\n        dev2 = 0x94e77bd7C7a53C533014d53F1965bea2BbD89744;\r\n\r\n        //Advertising & Exchanges account\r\n        market1 = 0xd08F5062378d4DC60127AF6c86AA5224678725DD;\r\n        market2 = 0xA6f5C8AaD4f88894E7eA844C29AcebF5A1110435;\r\n\r\n        //Bounties Account\r\n        bounty = 0x6171a92418fFd0F7CD2687d83B323BaF6A2987A9;\r\n\r\n        //Locked Tokens Account\r\n        lockedTokens = 0x0778DDC022A0ffaB843c6F3Cb49763Bdeb7C79C4;\r\n\r\n        //Distribution of Tokens to wallets\r\n        balanceOf[beneficiary]  = balanceOf[beneficiary].add(maxSupply.sub(7500000 * (10 ** decimals))); //17,500,000 (ICO + Pre-sale)\r\n        balanceOf[dev1]         = balanceOf[dev1].add(maxSupply.sub(24812500 * (10 ** decimals))); //187,500\r\n        balanceOf[dev2]         = balanceOf[dev2].add(maxSupply.sub(24437500 * (10 ** decimals))); //562,500\r\n        balanceOf[market1]      = balanceOf[market1].add(maxSupply.sub(24625000 * (10 ** decimals))); //375,000\r\n        balanceOf[market2]      = balanceOf[market2].add(maxSupply.sub(24625000 * (10 ** decimals))); //375,000\r\n        balanceOf[bounty]       = balanceOf[bounty].add(maxSupply.sub(24000000 * (10 ** decimals))); //1,000,000\r\n        balanceOf[lockedTokens] = balanceOf[lockedTokens].add(maxSupply.sub(20000000 * (10 ** decimals))); //5,000,000\r\n\r\n    }\r\n    \r\n    function nameChange(string _name, string _symbol) public onlyOwner {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        if (frozenAccount[msg.sender]) revert(); \r\n        if (balanceOf[msg.sender] < _value) revert() ;           \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); \r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);          \r\n    }\r\n    \r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public\r\n        returns (bool success) {    \r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (frozenAccount[_from]) revert();                        // Check if frozen  \r\n        if (balanceOf[_from] < _value) revert();                \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \r\n        if (_value > allowance[_from][msg.sender]) revert(); \r\n        balanceOf[_to] = balanceOf[_to].sub(_value);                     \r\n        balanceOf[_to] = balanceOf[_to].add(_value);                          \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 _value) public {\r\n        require(_value <= balanceOf[msg.sender]);\r\n        address burner = msg.sender;\r\n        balanceOf[burner] = balanceOf[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        burnt = burnt.add(_value);\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n  \r\n    function burnFrom(address _from, uint256 _value) public onlyOwner returns  (bool success) {\r\n        require (balanceOf[_from] >= _value);            \r\n        require (msg.sender == owner);   \r\n        totalSupply = totalSupply.sub(_value);\r\n        burnt = burnt.add(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                      \r\n        emit Burnfrom(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    function freezeAccount(address target) public onlyOwner {\r\n        require (msg.sender == owner);   // Check allowance\r\n        frozenAccount[target] = true;\r\n        emit FrozenFunds(target, true);\r\n    }\r\n    \r\n    function unFreezeAccount(address target) public onlyOwner {\r\n        require (msg.sender == owner);   // Check allowance\r\n        require(frozenAccount[target]);\r\n        frozenAccount[target] = false;\r\n        emit FrozenFunds(target, false);\r\n    }\r\n\r\n    function () private {\r\n        revert();  \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unFreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"market2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"market1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"nameChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burnfrom\",\"type\":\"event\"}]","ContractName":"RewardsCoin","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://42bd1a9f27ba9c69a9bcf8ff3498fc5c9352e16422d2f85ec690eb8a7e4a2bd2"}]}