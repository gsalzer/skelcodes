{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ElyERC20 is StandardToken, Ownable {\r\n    /* Public variables of the token */\r\n    uint256 public creationBlock;\r\n\r\n    uint8 public decimals;\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string public standard;\r\n\r\n    bool public locked;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ElyERC20(\r\n        uint256 _totalSupply,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    ) public {\r\n        standard = 'ERC20 0.1';\r\n        locked = _locked;\r\n        totalSupply_ = _totalSupply;\r\n\r\n        if (_transferAllSupplyToOwner) {\r\n            balances[msg.sender] = totalSupply_;\r\n        } else {\r\n            balances[this] = totalSupply_;\r\n        }\r\n        name = _tokenName;\r\n        // Set the name for display purposes\r\n        symbol = _tokenSymbol;\r\n        // Set the symbol for display purposes\r\n        decimals = _decimalUnits;\r\n        // Amount of decimals for display purposes\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    /* public methods */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(locked == false);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\r\nThis contract contains basic minting functionality though\r\n*/\r\ncontract MintingERC20 is ElyERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //Variables\r\n    mapping (address => bool) public minters;\r\n\r\n    uint256 public maxSupply;\r\n\r\n    //Modifiers\r\n    modifier onlyMinters () {\r\n        require(true == minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function MintingERC20(\r\n        uint256 _initialSupply,\r\n        uint256 _maxSupply,\r\n        string _tokenName,\r\n        uint8 _decimals,\r\n        string _symbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    )\r\n        public ElyERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\r\n    {\r\n        standard = 'MintingERC20 0.1';\r\n        minters[msg.sender] = true;\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    function addMinter(address _newMinter) public onlyOwner {\r\n        minters[_newMinter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        if (true == locked) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (_amount == uint256(0)) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (totalSupply_.add(_amount) > maxSupply) {\r\n            return uint256(0);\r\n        }\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        Transfer(address(0), _addr, _amount);\r\n\r\n        return _amount;\r\n    }\r\n\r\n}\r\n\r\ncontract ElyToken is MintingERC20 {\r\n\r\n    SellableToken public ico;\r\n    SellableToken public privateSale;\r\n    LockupContract public lockupContract;\r\n\r\n    address public bountyAddress;\r\n\r\n    bool public transferFrozen = true;\r\n\r\n    modifier onlySellable() {\r\n        require(msg.sender == address(ico) || msg.sender == address(privateSale));\r\n        _;\r\n    }\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function ElyToken(\r\n        address _bountyAddress,\r\n        bool _locked\r\n    )\r\n        public MintingERC20(0, maxSupply, 'Elycoin', 18, 'ELY', false, _locked)\r\n    {\r\n        require(_bountyAddress != address(0));\r\n        bountyAddress = _bountyAddress;\r\n        standard = 'ELY 0.1';\r\n        maxSupply = uint(1000000000).mul(uint(10) ** decimals);\r\n        uint256 bountyAmount = uint(10000000).mul(uint(10) ** decimals);\r\n        require(bountyAmount == super.mint(bountyAddress, bountyAmount));\r\n    }\r\n\r\n    function setICO(address _ico) public onlyOwner {\r\n        require(_ico != address(0));\r\n        ico = SellableToken(_ico);\r\n    }\r\n\r\n    function setPrivateSale(address _privateSale) public onlyOwner {\r\n        require(_privateSale != address(0));\r\n        privateSale = SellableToken(_privateSale);\r\n    }\r\n\r\n    function setLockupContract(address _lockupContract) public onlyOwner {\r\n        require(_lockupContract != address(0));\r\n        lockupContract = LockupContract(_lockupContract);\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function freezing(bool _transferFrozen) public onlyOwner {\r\n        if (address(ico) != address(0) && !ico.isActive() && block.timestamp >= ico.startTime()) {\r\n            transferFrozen = _transferFrozen;\r\n        }\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        if (msg.sender == owner) {\r\n            require(address(ico) != address(0));\r\n            if (!ico.isActive()) {\r\n                return super.mint(_addr, _amount);\r\n            }\r\n            return uint256(0);\r\n        }\r\n        return super.mint(_addr, _amount);\r\n    }\r\n\r\n    function transferAllowed(address _address, uint256 _amount) public view returns (bool) {\r\n        return !transferFrozen && lockupContract.isTransferAllowed(_address, _amount);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(msg.sender == bountyAddress || transferAllowed(msg.sender, _value));\r\n        if (msg.sender == bountyAddress) {\r\n            lockupContract.log(_to, _value);\r\n        }\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_from == bountyAddress || transferAllowed(_from, _value));\r\n        if (_from == bountyAddress) {\r\n            lockupContract.log(_to, _value);\r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burnTokens(uint256 _amount) public onlySellable {\r\n        if (totalSupply_.add(_amount) > maxSupply) {\r\n            Burn(address(this), maxSupply.sub(totalSupply_));\r\n            totalSupply_ = maxSupply;\r\n        } else {\r\n            totalSupply_ = totalSupply_.add(_amount);\r\n            Burn(address(this), _amount);\r\n        }\r\n    }\r\n\r\n    function burnInvestorTokens(address _address, uint256 _amount) public constant onlySellable returns (uint256) {\r\n        require(balances[_address] >= _amount);\r\n        balances[_address] = balances[_address].sub(_amount);\r\n        Burn(_address, _amount);\r\n        Transfer(_address, address(0), _amount);\r\n\r\n        return _amount;\r\n    }\r\n\r\n}\r\n\r\ncontract Multivest is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* public variables */\r\n    mapping (address => bool) public allowedMultivests;\r\n\r\n    /* events */\r\n    event MultivestSet(address multivest);\r\n\r\n    event MultivestUnset(address multivest);\r\n\r\n    event Contribution(address holder, uint256 value, uint256 tokens);\r\n\r\n    modifier onlyAllowedMultivests(address _addresss) {\r\n        require(allowedMultivests[_addresss] == true);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    function Multivest() public {}\r\n\r\n    function setAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = true;\r\n        MultivestSet(_address);\r\n    }\r\n\r\n    function unsetAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = false;\r\n        MultivestUnset(_address);\r\n    }\r\n\r\n    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\r\n        require(buy(_address, _value) == true);\r\n    }\r\n\r\n    function multivestBuy(\r\n        address _address,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\r\n        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\r\n    }\r\n\r\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\r\n        bytes memory prefix = '\\x19Ethereum Signed Message:\\n32';\r\n\r\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool);\r\n\r\n}\r\n\r\ncontract SellableToken is Multivest {\r\n\r\n    ElyToken public token;\r\n\r\n    uint256 public constant DECIMALS = 18;\r\n\r\n    uint256 public minPurchase = 1000000;//10usd * 10 ^ 5\r\n\r\n    uint256 public softCap = 300000000000;//usd * 10 ^ 5\r\n    uint256 public hardCap = 1500000000000;//usd * 10 ^ 5\r\n\r\n    uint256 public compensationAmount = 5100000000;//usd * 10 ^ 5\r\n    uint256 public compensatedAmount;\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    uint256 public maxTokenSupply;\r\n\r\n    uint256 public soldTokens;\r\n\r\n    uint256 public collectedEthers;\r\n\r\n    uint256 public priceUpdateAt;\r\n\r\n    address public etherHolder;\r\n\r\n    address public compensationAddress;\r\n\r\n    uint256 public collectedUSD;\r\n\r\n    uint256 public etherPriceInUSD; //$753.25  75325000\r\n\r\n    mapping (address => uint256) public etherBalances;\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    Tier[] public tiers;\r\n\r\n    struct Tier {\r\n        uint256 maxAmount;\r\n        uint256 price;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n\r\n    event WhitelistSet(address indexed contributorAddress, bool isWhitelisted);\r\n\r\n    event Refund(address _holder, uint256 _ethers, uint256 _tokens);\r\n\r\n    function SellableToken(\r\n        address _token,\r\n        address _etherHolder,\r\n        address _compensationAddress,\r\n        uint256 _etherPriceInUSD,\r\n        uint256 _maxTokenSupply\r\n    )\r\n        public Multivest()\r\n    {\r\n        require(_token != address(0));\r\n        token = ElyToken(_token);\r\n\r\n        require(_etherHolder != address(0) && _compensationAddress != address(0));\r\n        etherHolder = _etherHolder;\r\n        compensationAddress = _compensationAddress;\r\n        require((_maxTokenSupply == uint256(0)) || (_maxTokenSupply <= token.maxSupply()));\r\n\r\n        etherPriceInUSD = _etherPriceInUSD;\r\n        maxTokenSupply = _maxTokenSupply;\r\n\r\n        priceUpdateAt = block.timestamp;\r\n    }\r\n\r\n    function() public payable {\r\n        require(true == whitelist[msg.sender] && buy(msg.sender, msg.value) == true);\r\n    }\r\n\r\n    function setTokenContract(address _token) public onlyOwner {\r\n        require(_token != address(0));\r\n        token = ElyToken(_token);\r\n    }\r\n\r\n    function isActive() public view returns (bool) {\r\n        if (maxTokenSupply > uint256(0) && soldTokens == maxTokenSupply) {\r\n            return false;\r\n        }\r\n\r\n        return withinPeriod();\r\n    }\r\n\r\n    function withinPeriod() public view returns (bool) {\r\n        return block.timestamp >= startTime && block.timestamp <= endTime;\r\n    }\r\n\r\n    function setEtherHolder(address _etherHolder) public onlyOwner {\r\n        if (_etherHolder != address(0)) {\r\n            etherHolder = _etherHolder;\r\n        }\r\n    }\r\n\r\n    function updateWhitelist(address _address, bool isWhitelisted) public onlyOwner {\r\n        whitelist[_address] = isWhitelisted;\r\n        WhitelistSet(_address, isWhitelisted);\r\n    }\r\n\r\n    function mint(address _address, uint256 _tokenAmount) public onlyOwner returns (uint256) {\r\n        return mintInternal(_address, _tokenAmount);\r\n    }\r\n\r\n    function setEtherPriceInUSD(string _price) public onlyOwner {\r\n        setEtherInUSDInternal(_price);\r\n    }\r\n\r\n    function setEtherInUSD(string _price) public onlyAllowedMultivests(msg.sender) {\r\n        setEtherInUSDInternal(_price);\r\n    }\r\n\r\n    // set ether price in USD with 5 digits after the decimal point\r\n    //ex. 308.75000\r\n    //for updating the price through  multivest\r\n    function setEtherInUSDInternal(string _price) internal {\r\n        bytes memory bytePrice = bytes(_price);\r\n        uint256 dot = bytePrice.length.sub(uint256(6));\r\n\r\n        // check if dot is in 6 position  from  the last\r\n        require(0x2e == uint(bytePrice[dot]));\r\n\r\n        uint256 newPrice = uint256(10 ** 23).div(parseInt(_price, 5));\r\n\r\n        require(newPrice > 0);\r\n\r\n        etherPriceInUSD = parseInt(_price, 5);\r\n\r\n        priceUpdateAt = block.timestamp;\r\n    }\r\n\r\n    function mintInternal(address _address, uint256 _tokenAmount) internal returns (uint256) {\r\n        uint256 mintedAmount = token.mint(_address, _tokenAmount);\r\n\r\n        require(mintedAmount == _tokenAmount);\r\n\r\n        mintedAmount = mintedAmount.add(token.mint(compensationAddress, _tokenAmount.mul(5).div(1000)));\r\n\r\n        soldTokens = soldTokens.add(_tokenAmount);\r\n        if (maxTokenSupply > 0) {\r\n            require(maxTokenSupply >= soldTokens);\r\n        }\r\n\r\n        return _tokenAmount;\r\n    }\r\n\r\n    function transferEthersInternal() internal {\r\n        if (collectedUSD >= softCap) {\r\n            if (compensatedAmount < compensationAmount) {\r\n                uint256 amount = uint256(1 ether).mul(compensationAmount.sub(compensatedAmount)).div(etherPriceInUSD);\r\n                compensatedAmount = compensationAmount;\r\n                compensationAddress.transfer(amount);\r\n            }\r\n\r\n            etherHolder.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mintt = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mintt *= 10;\r\n                mintt += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mintt *= 10 ** _b;\r\n        return mintt;\r\n    }\r\n\r\n}\r\n\r\ncontract ICO is SellableToken {\r\n\r\n    SellableToken public privateSale;\r\n    LockupContract public lockupContract;\r\n\r\n    uint8 public constant PRE_ICO_TIER = 0;\r\n    uint8 public constant ICO_TIER_FIRST = 1;\r\n    uint8 public constant ICO_TIER_TWO = 2;\r\n    uint8 public constant ICO_TIER_LAST = 3;\r\n\r\n    Stats public preICOStats;\r\n\r\n    uint256 public lockupThreshold = 10000000000;\r\n\r\n    mapping(address => uint256) public icoBalances;\r\n    mapping(address => uint256) public icoLockedBalance;\r\n\r\n    struct Stats {\r\n        uint256 soldTokens;\r\n        uint256 collectedUSD;\r\n        uint256 collectedEthers;\r\n        bool burned;\r\n    }\r\n\r\n    function ICO(\r\n        address _token,\r\n        address _etherHolder,\r\n        address _compensationAddress,\r\n        uint256 _etherPriceInUSD, // if price 709.38000 the  value has to be 70938000\r\n        uint256 _maxTokenSupply\r\n    ) public SellableToken(\r\n        _token,\r\n        _etherHolder,\r\n        _compensationAddress,\r\n        _etherPriceInUSD,\r\n        _maxTokenSupply\r\n    ) {\r\n        tiers.push(\r\n            Tier(\r\n                uint256(40000000).mul(uint256(10) ** DECIMALS),\r\n                uint256(6000),\r\n                1526886000,\r\n                1528095599\r\n            )\r\n        );//@ 0,06 USD PreICO\r\n        tiers.push(\r\n            Tier(\r\n                uint256(150000000).mul(uint256(10) ** DECIMALS),\r\n                uint256(8000),\r\n                1528095600,\r\n                1528700399\r\n            )\r\n        );//@ 0,08 USD\r\n        tiers.push(\r\n            Tier(\r\n                uint256(150000000).mul(uint256(10) ** DECIMALS),\r\n                uint256(10000),\r\n                1528700400,\r\n                1529305199\r\n            )\r\n        );//@ 0,10 USD\r\n        tiers.push(\r\n            Tier(\r\n                uint256(150000000).mul(uint256(10) ** DECIMALS),\r\n                uint256(12000),\r\n                1529305200,\r\n                1529909999\r\n            )\r\n        );//@ 0,12 USD\r\n\r\n        startTime = 1528095600;\r\n        endTime = 1529909999;\r\n    }\r\n\r\n    function setPrivateSale(address _privateSale) public onlyOwner {\r\n        if (_privateSale != address(0)) {\r\n            privateSale = SellableToken(_privateSale);\r\n        }\r\n    }\r\n\r\n    function setLockupContract(address _lockupContract) public onlyOwner {\r\n        require(_lockupContract != address(0));\r\n        lockupContract = LockupContract(_lockupContract);\r\n    }\r\n\r\n    function changePreICODates(uint256 _start, uint256 _end) public onlyOwner {\r\n        if (_start != 0 && _start < _end) {\r\n            Tier storage preICOTier = tiers[PRE_ICO_TIER];\r\n            preICOTier.startTime = _start;\r\n            preICOTier.endTime = _end;\r\n        }\r\n    }\r\n\r\n    function changeICODates(uint8 _tierId, uint256 _start, uint256 _end) public onlyOwner {\r\n        if (_start != 0 && _start < _end && _tierId < tiers.length) {\r\n            Tier storage icoTier = tiers[_tierId];\r\n            icoTier.startTime = _start;\r\n            icoTier.endTime = _end;\r\n            if (_tierId == ICO_TIER_FIRST) {\r\n                startTime = _start;\r\n            } else if (_tierId == ICO_TIER_LAST) {\r\n                endTime = _end;\r\n            }\r\n        }\r\n    }\r\n\r\n    function burnUnsoldTokens() public onlyOwner {\r\n        if (block.timestamp >= tiers[PRE_ICO_TIER].endTime && preICOStats.burned == false) {\r\n            token.burnTokens(tiers[PRE_ICO_TIER].maxAmount.sub(preICOStats.soldTokens));\r\n            preICOStats.burned = true;\r\n        }\r\n        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\r\n            token.burnTokens(maxTokenSupply.sub(soldTokens));\r\n            maxTokenSupply = soldTokens;\r\n        }\r\n    }\r\n\r\n    function transferEthers() public onlyOwner {\r\n        super.transferEthersInternal();\r\n    }\r\n\r\n    function transferCompensationEthers() public {\r\n        if (msg.sender == compensationAddress) {\r\n            super.transferEthersInternal();\r\n        }\r\n    }\r\n\r\n    function getActiveTier() public view returns (uint8) {\r\n        for (uint8 i = 0; i < tiers.length; i++) {\r\n            if (block.timestamp >= tiers[i].startTime && block.timestamp <= tiers[i].endTime) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return uint8(tiers.length);\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 _value, bool _isEther) public view returns (\r\n        uint256 tokenAmount,\r\n        uint256 currencyAmount\r\n    ) {\r\n        uint8 activeTier = getActiveTier();\r\n\r\n        if (activeTier == tiers.length) {\r\n            if (endTime < block.timestamp) {\r\n                return (0, 0);\r\n            }\r\n            if (startTime > block.timestamp) {\r\n                activeTier = PRE_ICO_TIER;\r\n            }\r\n        }\r\n\r\n        if (_isEther) {\r\n            currencyAmount = _value.mul(etherPriceInUSD);\r\n            tokenAmount = currencyAmount.div(tiers[activeTier].price);\r\n            if (currencyAmount < minPurchase.mul(1 ether)) {\r\n                return (0, 0);\r\n            }\r\n            currencyAmount = currencyAmount.div(1 ether);\r\n        } else {\r\n            if (_value < minPurchase) {\r\n                return (0, 0);\r\n            }\r\n            currencyAmount = uint256(1 ether).mul(_value).div(etherPriceInUSD);\r\n            tokenAmount = _value.mul(uint256(10) ** DECIMALS).div(tiers[activeTier].price);\r\n        }\r\n    }\r\n\r\n    function calculateEthersAmount(uint256 _amount) public view returns (uint256 ethersAmount) {\r\n        uint8 activeTier = getActiveTier();\r\n\r\n        if (activeTier == tiers.length) {\r\n            if (endTime < block.timestamp) {\r\n                return 0;\r\n            }\r\n            if (startTime > block.timestamp) {\r\n                activeTier = PRE_ICO_TIER;\r\n            }\r\n        }\r\n\r\n        if (_amount == 0 || _amount.mul(tiers[activeTier].price) < minPurchase) {\r\n            return 0;\r\n        }\r\n\r\n        ethersAmount = _amount.mul(tiers[activeTier].price).div(etherPriceInUSD);\r\n    }\r\n\r\n    function getMinEthersInvestment() public view returns (uint256) {\r\n        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\r\n    }\r\n\r\n    function getStats() public view returns (\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 sold,\r\n        uint256 totalSoldTokens,\r\n        uint256 maxSupply,\r\n        uint256 min,\r\n        uint256 soft,\r\n        uint256 hard,\r\n        uint256 tokensPerEth,\r\n        uint256[16] tiersData\r\n    ) {\r\n        start = startTime;\r\n        end = endTime;\r\n        sold = soldTokens;\r\n        totalSoldTokens = soldTokens.add(preICOStats.soldTokens);\r\n        if (address(privateSale) != address(0)) {\r\n            totalSoldTokens = totalSoldTokens.add(privateSale.soldTokens());\r\n        }\r\n        maxSupply = maxTokenSupply;\r\n        min = minPurchase;\r\n        soft = softCap;\r\n        hard = hardCap;\r\n        uint256 usd;\r\n        (tokensPerEth, usd) = calculateTokensAmount(1 ether, true);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tiersData[j++] = uint256(tiers[i].maxAmount);\r\n            tiersData[j++] = uint256(tiers[i].price);\r\n            tiersData[j++] = uint256(tiers[i].startTime);\r\n            tiersData[j++] = uint256(tiers[i].endTime);\r\n        }\r\n    }\r\n\r\n    function isRefundPossible() public view returns (bool) {\r\n        if (getActiveTier() != tiers.length || block.timestamp < startTime || collectedUSD >= softCap) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function refund() public returns (bool) {\r\n        uint256 balance = etherBalances[msg.sender];\r\n        if (!isRefundPossible() || balance == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 burnedAmount = token.burnInvestorTokens(msg.sender, icoBalances[msg.sender]);\r\n        if (burnedAmount == 0) {\r\n            return false;\r\n        }\r\n        if (icoLockedBalance[msg.sender] > 0) {\r\n            lockupContract.decreaseAfterBurn(msg.sender, icoLockedBalance[msg.sender]);\r\n        }\r\n        Refund(msg.sender, balance, burnedAmount);\r\n        etherBalances[msg.sender] = 0;\r\n        msg.sender.transfer(balance);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mintPreICO(\r\n        address _address,\r\n        uint256 _tokenAmount,\r\n        uint256 _ethAmount,\r\n        uint256 _usdAmount\r\n    ) internal returns (uint256) {\r\n        uint256 mintedAmount = token.mint(_address, _tokenAmount);\r\n\r\n        require(mintedAmount == _tokenAmount);\r\n\r\n        preICOStats.soldTokens = preICOStats.soldTokens.add(_tokenAmount);\r\n        preICOStats.collectedEthers = preICOStats.collectedEthers.add(_ethAmount);\r\n        preICOStats.collectedUSD = preICOStats.collectedUSD.add(_usdAmount);\r\n\r\n        require(tiers[PRE_ICO_TIER].maxAmount >= preICOStats.soldTokens);\r\n\r\n        if (preICOStats.collectedUSD <= compensationAmount) {\r\n            compensatedAmount = compensatedAmount.add(_usdAmount);\r\n            compensationAddress.transfer(this.balance);\r\n        }\r\n\r\n        return _tokenAmount;\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool) {\r\n        if (_value == 0 || _address == address(0)) {\r\n            return false;\r\n        }\r\n        uint8 activeTier = getActiveTier();\r\n        if (activeTier == tiers.length) {\r\n            return false;\r\n        }\r\n\r\n        uint256 tokenAmount;\r\n        uint256 usdAmount;\r\n        uint256 mintedAmount;\r\n\r\n        (tokenAmount, usdAmount) = calculateTokensAmount(_value, true);\r\n        require(usdAmount > 0 && tokenAmount > 0);\r\n\r\n        if (usdAmount >= lockupThreshold) {\r\n            lockupContract.logLargeContribution(_address, tokenAmount);\r\n            icoLockedBalance[_address] = icoLockedBalance[_address].add(tokenAmount);\r\n        }\r\n\r\n        if (activeTier == PRE_ICO_TIER) {\r\n            mintedAmount = mintPreICO(_address, tokenAmount, _value, usdAmount);\r\n        } else {\r\n            mintedAmount = mintInternal(_address, tokenAmount);\r\n\r\n            collectedEthers = collectedEthers.add(_value);\r\n            collectedUSD = collectedUSD.add(usdAmount);\r\n\r\n            require(hardCap >= collectedUSD);\r\n\r\n            etherBalances[_address] = etherBalances[_address].add(_value);\r\n            icoBalances[_address] = icoBalances[_address].add(tokenAmount);\r\n        }\r\n\r\n        Contribution(_address, _value, tokenAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract PrivateSale is SellableToken {\r\n\r\n    uint256 public price = 4000;//0.04 cents * 10 ^ 5\r\n\r\n    function PrivateSale(\r\n        address _token,\r\n        address _etherHolder,\r\n        address _compensationAddress,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _etherPriceInUSD, // if price 709.38000 the  value has to be 70938000\r\n        uint256 _maxTokenSupply\r\n    ) public SellableToken(\r\n        _token,\r\n        _etherHolder,\r\n        _compensationAddress,\r\n        _etherPriceInUSD,\r\n        _maxTokenSupply\r\n    ) {\r\n        require(_startTime > 0 && _endTime > _startTime);\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function changeSalePeriod(uint256 _start, uint256 _end) public onlyOwner {\r\n        if (_start != 0 && _start < _end) {\r\n            startTime = _start;\r\n            endTime = _end;\r\n        }\r\n    }\r\n\r\n    function burnUnsoldTokens() public onlyOwner {\r\n        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\r\n            token.burnTokens(maxTokenSupply.sub(soldTokens));\r\n            maxTokenSupply = soldTokens;\r\n        }\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount) {\r\n        if (_value == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        usdAmount = _value.mul(etherPriceInUSD);\r\n        if (usdAmount < minPurchase.mul(1 ether)) {\r\n            return (0, 0);\r\n        }\r\n        tokenAmount = usdAmount.div(price);\r\n\r\n        usdAmount = usdAmount.div(1 ether);\r\n    }\r\n\r\n    function calculateEthersAmount(uint256 _amount) public view returns (uint256 ethersAmount) {\r\n        if (_amount == 0 || _amount.mul(price) < minPurchase.mul(1 ether)) {\r\n            return 0;\r\n        }\r\n\r\n        ethersAmount = _amount.mul(price).div(etherPriceInUSD);\r\n    }\r\n\r\n    function getMinEthersInvestment() public view returns (uint256) {\r\n        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\r\n    }\r\n\r\n    function getStats() public view returns (\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 sold,\r\n        uint256 maxSupply,\r\n        uint256 min,\r\n        uint256 soft,\r\n        uint256 hard,\r\n        uint256 priceAmount,\r\n        uint256 tokensPerEth\r\n    ) {\r\n        start = startTime;\r\n        end = endTime;\r\n        sold = soldTokens;\r\n        maxSupply = maxTokenSupply;\r\n        min = minPurchase;\r\n        soft = softCap;\r\n        hard = hardCap;\r\n        priceAmount = price;\r\n        uint256 usd;\r\n        (tokensPerEth, usd) = calculateTokensAmount(1 ether);\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool) {\r\n        if (_value == 0) {\r\n            return false;\r\n        }\r\n        require(_address != address(0) && withinPeriod());\r\n\r\n        uint256 tokenAmount;\r\n        uint256 usdAmount;\r\n\r\n        (tokenAmount, usdAmount) = calculateTokensAmount(_value);\r\n\r\n        uint256 mintedAmount = token.mint(_address, tokenAmount);\r\n        soldTokens = soldTokens.add(tokenAmount);\r\n        require(mintedAmount == tokenAmount && maxTokenSupply >= soldTokens && usdAmount > 0 && mintedAmount > 0);\r\n\r\n        collectedEthers = collectedEthers.add(_value);\r\n        collectedUSD = collectedUSD.add(usdAmount);\r\n\r\n        Contribution(_address, _value, tokenAmount);\r\n\r\n        etherHolder.transfer(this.balance);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Referral is Multivest {\r\n\r\n    ElyToken public token;\r\n    LockupContract public lockupContract;\r\n\r\n    uint256 public constant DECIMALS = 18;\r\n\r\n    uint256 public totalSupply = 10000000 * 10 ** DECIMALS;\r\n\r\n    address public tokenHolder;\r\n\r\n    mapping (address => bool) public claimed;\r\n\r\n    /* constructor */\r\n    function Referral(\r\n        address _token,\r\n        address _tokenHolder\r\n    ) public Multivest() {\r\n        require(_token != address(0) && _tokenHolder != address(0));\r\n        token = ElyToken(_token);\r\n        tokenHolder = _tokenHolder;\r\n    }\r\n\r\n    function setTokenContract(address _token) public onlyOwner {\r\n        if (_token != address(0)) {\r\n            token = ElyToken(_token);\r\n        }\r\n    }\r\n\r\n    function setLockupContract(address _lockupContract) public onlyOwner {\r\n        require(_lockupContract != address(0));\r\n        lockupContract = LockupContract(_lockupContract);\r\n    }\r\n\r\n    function setTokenHolder(address _tokenHolder) public onlyOwner {\r\n        if (_tokenHolder != address(0)) {\r\n            tokenHolder = _tokenHolder;\r\n        }\r\n    }\r\n\r\n    function multivestMint(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public onlyAllowedMultivests(verify(keccak256(msg.sender, _amount), _v, _r, _s)) {\r\n        _amount = _amount.mul(10 ** DECIMALS);\r\n        require(\r\n            claimed[_address] == false &&\r\n            _address == msg.sender &&\r\n            _amount > 0 &&\r\n            _amount <= totalSupply &&\r\n            _amount == token.mint(_address, _amount)\r\n        );\r\n\r\n        totalSupply = totalSupply.sub(_amount);\r\n        claimed[_address] = true;\r\n        lockupContract.log(_address, _amount);\r\n    }\r\n\r\n    function claimUnsoldTokens() public {\r\n        if (msg.sender == tokenHolder && totalSupply > 0) {\r\n            require(totalSupply == token.mint(msg.sender, totalSupply));\r\n            totalSupply = 0;\r\n        }\r\n    }\r\n\r\n    function buy(address _address, uint256 value) internal returns (bool) {\r\n        _address = _address;\r\n        value = value;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract LockupContract is Ownable {\r\n\r\n    ElyToken public token;\r\n    SellableToken public ico;\r\n    Referral public referral;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public lockPeriod = 2 weeks;\r\n    uint256 public contributionLockPeriod = uint256(1 years).div(2);\r\n\r\n    mapping (address => uint256) public lockedAmount;\r\n    mapping (address => uint256) public lockedContributions;\r\n\r\n    function LockupContract(\r\n        address _token,\r\n        address _ico,\r\n        address _referral\r\n    ) public {\r\n        require(_token != address(0) && _ico != address(0) && _referral != address(0));\r\n        token = ElyToken(_token);\r\n        ico = SellableToken(_ico);\r\n        referral = Referral(_referral);\r\n    }\r\n\r\n    function setTokenContract(address _token) public onlyOwner {\r\n        require(_token != address(0));\r\n        token = ElyToken(_token);\r\n    }\r\n\r\n    function setICO(address _ico) public onlyOwner {\r\n        require(_ico != address(0));\r\n        ico = SellableToken(_ico);\r\n    }\r\n\r\n    function setRefferal(address _referral) public onlyOwner {\r\n        require(_referral != address(0));\r\n        referral = Referral(_referral);\r\n    }\r\n\r\n    function setLockPeriod(uint256 _period) public onlyOwner {\r\n        lockPeriod = _period;\r\n    }\r\n\r\n    function setContributionLockPeriod(uint256 _period) public onlyOwner {\r\n        contributionLockPeriod = _period;\r\n    }\r\n\r\n    function log(address _address, uint256 _amount) public {\r\n        if (msg.sender == address(referral) || msg.sender == address(token)) {\r\n            lockedAmount[_address] = lockedAmount[_address].add(_amount);\r\n        }\r\n    }\r\n\r\n    function decreaseAfterBurn(address _address, uint256 _amount) public {\r\n        if (msg.sender == address(ico)) {\r\n            lockedContributions[_address] = lockedContributions[_address].sub(_amount);\r\n        }\r\n    }\r\n\r\n    function logLargeContribution(address _address, uint256 _amount) public {\r\n        if (msg.sender == address(ico)) {\r\n            lockedContributions[_address] = lockedContributions[_address].add(_amount);\r\n        }\r\n    }\r\n\r\n    function isTransferAllowed(address _address, uint256 _value) public view returns (bool) {\r\n        if (ico.endTime().add(lockPeriod) < block.timestamp) {\r\n            return checkLargeContributionsLock(_address, _value);\r\n        }\r\n        if (token.balanceOf(_address).sub(lockedAmount[_address]) >= _value) {\r\n            return checkLargeContributionsLock(_address, _value);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function checkLargeContributionsLock(address _address, uint256 _value) public view returns (bool) {\r\n        if (ico.endTime().add(contributionLockPeriod) < block.timestamp) {\r\n            return true;\r\n        }\r\n        if (token.balanceOf(_address).sub(lockedContributions[_address]) >= _value) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\ncontract PeriodicTokenVesting is TokenVesting {\r\n    uint256 public periods;\r\n\r\n    function PeriodicTokenVesting(\r\n        address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _periods, bool _revocable\r\n    )\r\n    public TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable)\r\n    {\r\n        periods = _periods;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the amount that has already vested.\r\n    * @param token ERC20 token which is being vested\r\n    */\r\n    function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(this);\r\n        uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= start.add(duration * periods) || revoked[token]) {\r\n            return totalBalance;\r\n        } else {\r\n\r\n            uint256 periodTokens = totalBalance.div(periods);\r\n\r\n            uint256 periodsOver = now.sub(start).div(duration) + 1;\r\n\r\n            if (periodsOver >= periods) {\r\n                return totalBalance;\r\n            }\r\n\r\n            return periodTokens.mul(periodsOver);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ElyAllocation is Ownable {\r\n\r\n    using SafeERC20 for ERC20Basic;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public icoEndTime;\r\n\r\n    address[] public vestings;\r\n\r\n    event VestingCreated(\r\n        address _vesting,\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _periods,\r\n        bool _revocable\r\n    );\r\n\r\n    event VestingRevoked(address _vesting);\r\n\r\n    function setICOEndTime(uint256 _icoEndTime) public onlyOwner {\r\n        icoEndTime = _icoEndTime;\r\n    }\r\n\r\n    function vestingMint(PeriodicTokenVesting _vesting, MintingERC20 _token, uint256 _amount) public onlyOwner {\r\n        require(_amount > 0 && _token.mint(address(_vesting), _amount) == _amount);\r\n    }\r\n\r\n    function createVesting(\r\n        address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _periods, bool _revocable\r\n    ) public onlyOwner returns (PeriodicTokenVesting) {\r\n        PeriodicTokenVesting vesting = new PeriodicTokenVesting(\r\n            _beneficiary, _start, _cliff, _duration, _periods, _revocable\r\n        );\r\n\r\n        vestings.push(vesting);\r\n\r\n        VestingCreated(vesting, _beneficiary, _start, _cliff, _duration, _periods, _revocable);\r\n\r\n        return vesting;\r\n    }\r\n\r\n    function revokeVesting(PeriodicTokenVesting _vesting, MintingERC20 token) public onlyOwner() {\r\n        _vesting.revoke(token);\r\n\r\n        VestingRevoked(_vesting);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privateSale\",\"type\":\"address\"}],\"name\":\"setPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnInvestorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFrozen\",\"type\":\"bool\"}],\"name\":\"freezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockupContract\",\"type\":\"address\"}],\"name\":\"setLockupContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ico\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ElyToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008148613d63a4f9620c2c659754ba2abf85d142420000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4ec07e679d5ceb3c571c280a0aa3938a66a0093f904ddf9735e0311b37f880c3"}]}