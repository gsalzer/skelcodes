{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n// import './bonbon.sol';\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface AirdropToken {\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function balanceOf(address _owner) constant external returns (uint256);\r\n  function decimals() constant external returns (uint256);\r\n}\r\n\r\ncontract ICOAirCenter is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address public airdroptoken;\r\n  uint256 public decimals;\r\n  uint256 public rate;\r\n  uint256 public weiRaised;\r\n  AirdropToken internal token;\r\n  AirdropToken internal tmptoken;\r\n  AirdropToken internal icotoken;\r\n\r\n  event TransferredToken(address indexed to, uint256 value);\r\n  event FailedTransfer(address indexed to, uint256 value);\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  modifier whenDropIsActive() {\r\n    assert(isActive());\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    // initial token\r\n    airdroptoken = 0x6EA3bA628a73D22E924924dF3661843e53e5c3AA;\r\n    token = AirdropToken(airdroptoken);\r\n    tmptoken = AirdropToken(airdroptoken);\r\n    icotoken = AirdropToken(airdroptoken);\r\n    decimals = getDecimals();\r\n    rate = 10000; // 1 eth for 10000 bbt\r\n  }\r\n\r\n  function () external payable{\r\n    getTokens(msg.sender);\r\n  }\r\n\r\n  function getTokens(address _beneficiary) public payable{\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n    uint256 tokenbalance = icotoken.balanceOf(this);\r\n    require(tokenbalance >= tokens);\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens);\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // begin buy token related functions \r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\r\n    // optional override\r\n  }\r\n\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    icotoken.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal pure{\r\n    // optional override\r\n  }\r\n\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  // end\r\n\r\n  function isActive() public constant returns (bool) {\r\n    return (\r\n      tokensAvailable() > 0 // Tokens must be available to send\r\n      );\r\n  }\r\n\r\n  function getDecimals() public constant returns (uint256){\r\n    return token.decimals();\r\n  }\r\n\r\n\r\n  function setToken(address tokenaddress) onlyOwner external{\r\n    require(tokenaddress != address(0));\r\n    token = AirdropToken(tokenaddress);\r\n    airdroptoken = tokenaddress;\r\n    decimals = getDecimals();\r\n  }\r\n\r\n  //below function can be used when you want to send every recipeint with different number of tokens\r\n  function sendTokens(address tokenaddress,address[] dests, uint256[] values) whenDropIsActive onlyOwner external {\r\n    require(dests.length == values.length);\r\n    require(tokenaddress == airdroptoken);\r\n    uint256 i = 0;\r\n    while (i < dests.length) {\r\n      uint256 toSend = values[i].mul(10**decimals);\r\n      sendInternally(dests[i] , toSend, values[i]);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  // this function can be used when you want to send same number of tokens to all the recipients\r\n  function sendTokensSingleValue(address tokenaddress,address[] dests, uint256 value) whenDropIsActive onlyOwner external {\r\n    require(tokenaddress == airdroptoken);\r\n    \r\n    uint256 i = 0;\r\n    uint256 toSend = value.mul(10**decimals);\r\n    while (i < dests.length) {\r\n      sendInternally(dests[i] , toSend, value);\r\n      i++;\r\n    }\r\n  }  \r\n\r\n  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {\r\n    if(recipient == address(0)) return;\r\n\r\n    if(tokensAvailable() >= tokensToSend) {\r\n      token.transfer(recipient, tokensToSend);\r\n      emit TransferredToken(recipient, valueToPresent);\r\n    }else {\r\n        emit FailedTransfer(recipient, valueToPresent);\r\n    }\r\n  }\r\n\r\n  function tokensAvailable() public constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  // fund retrieval related functions\r\n  function retrieveToken(address tokenaddress) public onlyOwner{\r\n    tmptoken = AirdropToken(tokenaddress);\r\n    uint256 balance = tmptoken.balanceOf(this);\r\n    require (balance > 0);\r\n    tmptoken.transfer(owner,balance);\r\n  }\r\n\r\n  function retrieveEth(uint256 value) public onlyOwner{\r\n    uint256 ethamount = value.mul(10**18);\r\n    uint256 balance = address(this).balance;\r\n    require (balance > 0 && ethamount<= balance);\r\n    owner.transfer(ethamount);\r\n  }\r\n\r\n  function destroy() public onlyOwner {\r\n    uint256 balance = tokensAvailable();\r\n    require (balance > 0);\r\n    token.transfer(owner, balance);\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenaddress\",\"type\":\"address\"}],\"name\":\"retrieveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenaddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdroptoken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenaddress\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTokensSingleValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"retrieveEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenaddress\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICOAirCenter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6cdb73de5d094874739ac30544d7bd12a3f89fce40d39ea885471af8b8cf8207"}]}