{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * Authored by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Envisioned in FirstBlood ICO contract.\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  event Halted(bool halted);\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n    Halted(true);\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n    Halted(false);\r\n  }\r\n}\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint a, uint b) internal pure returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Interface for the standard token.\r\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract EIP20Token {\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n  ** Optional functions\r\n  *\r\n  function name() public view returns (string name);\r\n  function symbol() public view returns (string symbol);\r\n  function decimals() public view returns (uint8 decimals);\r\n  *\r\n  **/\r\n\r\n}\r\npragma solidity ^0.4.19;\r\n\r\n// Interface for burning tokens\r\ncontract Burnable {\r\n  // @dev Destroys tokens for an account\r\n  // @param account Account whose tokens are destroyed\r\n  // @param value Amount of tokens to destroy\r\n  function burnTokens(address account, uint value) internal;\r\n  event Burned(address account, uint value);\r\n}\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Authored by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n/**\r\n * Internal interface for the minting of tokens.\r\n */\r\ncontract Mintable {\r\n\r\n  /**\r\n   * @dev Mints tokens for an account\r\n   * This function should the Minted event.\r\n   */\r\n  function mintInternal(address receiver, uint amount) internal;\r\n\r\n  /** Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n}\r\n\r\n/**\r\n * @title Standard token\r\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\r\n */\r\ncontract StandardToken is EIP20Token, Burnable, Mintable {\r\n  using SafeMath for uint;\r\n\r\n  uint private total_supply;\r\n  mapping(address => uint) private balances;\r\n  mapping(address => mapping (address => uint)) private allowed;\r\n\r\n\r\n  function totalSupply() public view returns (uint) {\r\n    return total_supply;\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function transfer(address to, uint value) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param account The address whose balance is to be queried.\r\n   * @return An uint representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address account) public view returns (uint balance) {\r\n    return balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\r\n    uint allowance = allowed[from][msg.sender];\r\n\r\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\r\n    // require(value <= allowance);\r\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\r\n\r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    allowed[from][msg.sender] = allowance.sub(value);\r\n    Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require (value == 0 || allowed[msg.sender][spender] == 0);\r\n\r\n    allowed[msg.sender][spender] = value;\r\n    Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param account address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address account, address spender) public view returns (uint remaining) {\r\n    return allowed[account][spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][spender];\r\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\r\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\r\n\r\n      uint oldVal = allowed[msg.sender][spender];\r\n\r\n      if (subtractedValue > oldVal) {\r\n          allowed[msg.sender][spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\r\n      }\r\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\r\n   */\r\n  function burnTokens(address account, uint value) internal {\r\n    balances[account] = balances[account].sub(value);\r\n    total_supply = total_supply.sub(value);\r\n    Transfer(account, 0, value);\r\n    Burned(account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an internal minting function.\r\n   */\r\n  function mintInternal(address receiver, uint amount) internal {\r\n    total_supply = total_supply.add(amount);\r\n    balances[receiver] = balances[receiver].add(amount);\r\n    Minted(receiver, amount);\r\n\r\n    // Beware: Address zero may be used for special transactions in a future fork.\r\n    // This will make the mint transaction appear in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    Transfer(0, receiver, amount);\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n  /* The finalizer contract that allows lifting the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Since the owner of this contract is (or should be) the crowdsale,\r\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens into the wild.\r\n   *\r\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\r\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer(address sender) {\r\n    require(released || transferAgents[sender]);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been released */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  /** We restrict transfer by overriding it */\r\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(to, value);\r\n  }\r\n\r\n  /** We restrict transferFrom by overriding it */\r\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * First envisioned by Golem and Lunyr projects.\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Inspired by Lunyr.\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n */\r\n\r\n/**\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n *\r\n * The Upgrade agent is the interface used to implement a token\r\n * migration in the case of an emergency.\r\n * The function upgradeFrom has to implement the part of the creation\r\n * of new tokens on behalf of the user doing the upgrade.\r\n *\r\n * The new token can implement this interface directly, or use.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  /** This value should be the same as the original token's total supply */\r\n  uint public originalSupply;\r\n\r\n  /** Interface to ensure the contract is correctly configured */\r\n  function isUpgradeAgent() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Upgrade an account\r\n\r\n  When the token contract is in the upgrade status the each user will\r\n  have to call `upgrade(value)` function from UpgradeableToken.\r\n\r\n  The upgrade function adjust the balance of the user and the supply\r\n  of the previous token and then call `upgradeFrom(value)`.\r\n\r\n  The UpgradeAgent is the responsible to create the tokens for the user\r\n  in the new contract.\r\n\r\n  * @param from Account to upgrade.\r\n  * @param value Tokens to upgrade.\r\n\r\n  */\r\n  function upgradeFrom(address from, uint value) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n */\r\ncontract UpgradeableToken is EIP20Token, Burnable {\r\n  using SafeMath for uint;\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint public totalUpgraded = 0;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed from, address to, uint value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address master) internal {\r\n    setUpgradeMaster(master);\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint value) public {\r\n    UpgradeState state = getUpgradeState();\r\n    // Ensure it's not called in a bad state\r\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n\r\n    // Validate input value.\r\n    require(value != 0);\r\n\r\n    // Upgrade agent reissues the tokens\r\n    upgradeAgent.upgradeFrom(msg.sender, value);\r\n    \r\n    // Take tokens out from circulation\r\n    burnTokens(msg.sender, value);\r\n    totalUpgraded = totalUpgraded.add(value);\r\n\r\n    Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles the upgrade process\r\n   */\r\n  function setUpgradeAgent(address agent) onlyMaster external {\r\n    // Check whether the token is in a state that we could think of upgrading\r\n    require(canUpgrade());\r\n\r\n    require(agent != 0x0);\r\n    // Upgrade has already begun for an agent\r\n    require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n    upgradeAgent = UpgradeAgent(agent);\r\n\r\n    // Bad interface\r\n    require(upgradeAgent.isUpgradeAgent());\r\n    // Make sure that token supplies match in source and target\r\n    require(upgradeAgent.originalSupply() == totalSupply());\r\n\r\n    UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public view returns(UpgradeState) {\r\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function changeUpgradeMaster(address new_master) onlyMaster public {\r\n    setUpgradeMaster(new_master);\r\n  }\r\n\r\n  /**\r\n   * Internal upgrade master setter.\r\n   */\r\n  function setUpgradeMaster(address new_master) private {\r\n    require(new_master != 0x0);\r\n    upgradeMaster = new_master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can override to provide the condition in which the upgrade can begin.\r\n   */\r\n  function canUpgrade() public view returns(bool) {\r\n     return true;\r\n  }\r\n\r\n\r\n  modifier onlyMaster() {\r\n    require(msg.sender == upgradeMaster);\r\n    _;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Authored by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\r\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\r\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\r\ncontract LostAndFoundToken {\r\n  /**\r\n   * @return Address of the account that handles movements.\r\n   */\r\n  function getLostAndFoundMaster() internal view returns (address);\r\n\r\n  /**\r\n   * @param agent Address that will be able to move tokens with transferFrom\r\n   * @param tokens Amount of tokens approved for transfer\r\n   * @param token_contract Contract of the token\r\n   */\r\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\r\n    require(msg.sender == getLostAndFoundMaster());\r\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\r\n    //  getting them stuck in another address by accident.\r\n    token_contract.approve(agent, tokens);\r\n  }\r\n}\r\npragma solidity ^0.4.19;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n/**\r\n * A public interface to increase the supply of a token.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is Mintable, Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state);\r\n\r\n\r\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\r\n    require(multisig != address(0));\r\n    // Cannot create a token without supply and no minting\r\n    require(mintable || initialSupply != 0);\r\n    // Create initially all balance on the team multisig\r\n    if (initialSupply > 0)\r\n      mintInternal(multisig, initialSupply);\r\n    // No more new supply allowed after the token creation\r\n    mintingFinished = !mintable;\r\n  }\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address.\r\n   *\r\n   * Only callable by a mint agent (e.g. crowdsale contract).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\r\n    mintInternal(receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only mint agents are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * A crowdsale token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through the approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\r\n *\r\n */\r\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\r\n\r\n  string public name = \"Cryptosolartech\";\r\n\r\n  string public symbol = \"CST\";\r\n\r\n  uint8 public decimals;\r\n\r\n  address public lost_and_found_master;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param initial_supply How many tokens we start with.\r\n   * @param token_decimals Number of decimal places.\r\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\r\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\r\n   */\r\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\r\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\r\n    require(token_retriever != address(0));\r\n    decimals = token_decimals;\r\n    lost_and_found_master = token_retriever;\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, prohibit new token creation.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    mintingFinished = true;\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\r\n   */\r\n  function canUpgrade() public view returns(bool) {\r\n    return released && super.canUpgrade();\r\n  }\r\n\r\n  function burn(uint value) public {\r\n    burnTokens(msg.sender, value);\r\n  }\r\n\r\n  function getLostAndFoundMaster() internal view returns(address) {\r\n    return lost_and_found_master;\r\n  }\r\n}\r\n\r\n/**\r\n * Abstract base contract for token sales.\r\n *\r\n * Handles\r\n * - start and end dates\r\n * - accepting investments\r\n * - various statistics during the crowdfund\r\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\r\n *\r\n */\r\ncontract GenericCrowdsale is Haltable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /* The token we are selling */\r\n  CrowdsaleToken public token;\r\n\r\n  /* ether will be transferred to this address */\r\n  address public multisigWallet;\r\n\r\n  /* the starting timestamp of the crowdsale */\r\n  uint public startsAt;\r\n\r\n  /* the ending timestamp of the crowdsale */\r\n  uint public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n\r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized = false;\r\n\r\n  /* Do we need to have a unique contributor id for each customer */\r\n  bool public requireCustomerId = false;\r\n\r\n  /* Has this crowdsale been configured */\r\n  bool public configured = false;\r\n\r\n  /**\r\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\r\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\r\n   */\r\n  bool public requiredSignedAddress = false;\r\n\r\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\r\n  address public signerAddress;\r\n\r\n  /** How many ETH each address has invested in this crowdsale */\r\n  mapping (address => uint) public investedAmountOf;\r\n\r\n  /** How many tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint) public tokenAmountOf;\r\n\r\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\r\n  mapping (address => bool) public earlyParticipantWhitelist;\r\n\r\n  /** State machine\r\n   *\r\n   * - PendingConfiguration: Crowdsale not yet configured\r\n   * - Prefunding: We have not reached the starting timestamp yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Crowdsale ended\r\n   * - Finalized: The finalize function has been called and successfully executed\r\n   */\r\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\r\n\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\r\n\r\n  // The rules about what kind of investments we accept were changed\r\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\r\n\r\n  // Address early participation whitelist status changed\r\n  event Whitelisted(address addr, bool status);\r\n\r\n  // Crowdsale's finalize function has been called\r\n  event Finalized();\r\n\r\n  /*\r\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\r\n   *\r\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\r\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\r\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\r\n   *\r\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\r\n   */\r\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\r\n    setMultisig(team_multisig);\r\n\r\n    // Don't mess the dates\r\n    require(start != 0 && end != 0);\r\n    require(now < start && start < end);\r\n    startsAt = start;\r\n    endsAt = end;\r\n    configured = true;\r\n  }\r\n\r\n  /**\r\n   * Default fallback behaviour is to call buy.\r\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\r\n   * However, some sort of refunding function may be desired to cover such situations.\r\n   */\r\n  function() payable public {\r\n    buy();\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * The crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\r\n   *\r\n   */\r\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\r\n    // Determine if it's a good time to accept investment from this participant\r\n    if (getState() == State.PreFunding) {\r\n      // Are we whitelisted for early deposit\r\n      require(earlyParticipantWhitelist[msg.sender]);\r\n    }\r\n\r\n    uint weiAmount;\r\n    uint tokenAmount;\r\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\r\n    // Sanity check against bad implementation.\r\n    assert(weiAmount <= msg.value);\r\n    \r\n    // Dust transaction if no tokens can be given\r\n    require(tokenAmount != 0);\r\n\r\n    if (investedAmountOf[receiver] == 0) {\r\n      // A new investor\r\n      investorCount++;\r\n    }\r\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\r\n\r\n    // Pocket the money\r\n    multisigWallet.transfer(weiAmount);\r\n\r\n    // Return excess of money\r\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Preallocate tokens for the early investors.\r\n   *\r\n   * Preallocated tokens have been sold before the actual crowdsale opens.\r\n   * This function mints the tokens and moves the crowdsale needle.\r\n   *\r\n   * No money is exchanged, as the crowdsale team already have received the payment.\r\n   *\r\n   * @param receiver Account that receives the tokens.\r\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\r\n   * @param weiPrice Price of a single indivisible token in wei.\r\n   *\r\n   */\r\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\r\n    require(receiver != address(0));\r\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\r\n    require(tokenAmount != 0);\r\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\r\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\r\n  }\r\n\r\n  /**\r\n   * Private function to update accounting in the crowdsale.\r\n   */\r\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokenAmount);\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n    // Tell us that the investment was completed successfully\r\n    Invested(receiver, weiAmount, tokenAmount, customerId);\r\n  }\r\n\r\n  /**\r\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\r\n   *\r\n   * @param customerId UUIDv4 that identifies this contributor\r\n   */\r\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\r\n    bytes32 hash = sha256(receiver);\r\n    require(ecrecover(hash, v, r, s) == signerAddress);\r\n    investInternal(receiver, customerId);\r\n  }\r\n\r\n  /**\r\n   * Investing function that recognizes the receiver.\r\n   * \r\n   * @param customerId UUIDv4 that identifies this contributor\r\n   */\r\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\r\n    investInternal(receiver, customerId);\r\n  }\r\n\r\n  /**\r\n   * Buys tokens on behalf of an address.\r\n   *\r\n   * Pay for funding, get invested tokens back in the receiver address.\r\n   */\r\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\r\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\r\n    investInternal(receiver, 0);\r\n  }\r\n\r\n  /**\r\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\r\n   *\r\n   * @param customerId UUIDv4 that identifies this contributor\r\n   */\r\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\r\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\r\n  }\r\n\r\n\r\n  /**\r\n   * Investing function that recognizes the payer.\r\n   * \r\n   * @param customerId UUIDv4 that identifies this contributor\r\n   */\r\n  function buyWithCustomerId(uint128 customerId) public payable {\r\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\r\n  }\r\n\r\n  /**\r\n   * The basic entry point to participate in the crowdsale process.\r\n   *\r\n   * Pay for funding, get invested tokens back in the sender address.\r\n   */\r\n  function buy() public payable {\r\n    buyOnBehalf(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Finalize a successful crowdsale.\r\n   *\r\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\r\n   * Note that by default tokens are not in a released state.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n    finalized = true;\r\n    Finalized();\r\n  }\r\n\r\n  /**\r\n   * Set policy do we need to have server-side customer ids for the investments.\r\n   *\r\n   */\r\n  function setRequireCustomerId(bool value) public onlyOwner {\r\n    requireCustomerId = value;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n  }\r\n\r\n  /**\r\n   * Set policy if all investors must be cleared on the server side first.\r\n   *\r\n   * This is e.g. for the accredited investor clearing.\r\n   *\r\n   */\r\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\r\n    requiredSignedAddress = value;\r\n    signerAddress = signer;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n  }\r\n\r\n  /**\r\n   * Allow addresses to do early participation.\r\n   */\r\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\r\n    earlyParticipantWhitelist[addr] = status;\r\n    Whitelisted(addr, status);\r\n  }\r\n\r\n  /**\r\n   * Internal setter for the multisig wallet\r\n   */\r\n  function setMultisig(address addr) internal {\r\n    require(addr != 0);\r\n    multisigWallet = addr;\r\n  }\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * This function has the timed transition builtin.\r\n   * So there is no chance of the variable being stale.\r\n   */\r\n  function getState() public view returns (State) {\r\n    if (finalized) return State.Finalized;\r\n    else if (!configured) return State.PendingConfiguration;\r\n    else if (now < startsAt) return State.PreFunding;\r\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\r\n    else return State.Success;\r\n  }\r\n\r\n  /** Internal functions that exist to provide inversion of control should they be overriden */\r\n\r\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\r\n  function assignTokens(address receiver, uint tokenAmount) internal;\r\n\r\n  /**\r\n   *  Determine if the goal was already reached in the current crowdsale\r\n   */\r\n  function isCrowdsaleFull() internal view returns (bool full);\r\n\r\n  /**\r\n   * Returns any excess wei received\r\n   * \r\n   * This function can be overriden to provide a different refunding method.\r\n   */\r\n  function returnExcedent(uint excedent, address receiver) internal {\r\n    if (excedent > 0) {\r\n      receiver.transfer(excedent);\r\n    }\r\n  }\r\n\r\n  /** \r\n   *  Calculate the amount of tokens that corresponds to the received amount.\r\n   *  The wei amount is returned too in case not all of it can be invested.\r\n   *\r\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\r\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\r\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\r\n   *  @return weiAllowed The amount of wei accepted in this transaction.\r\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\r\n   */\r\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  modifier inState(State state) {\r\n    require(getState() == state);\r\n    _;\r\n  }\r\n\r\n  modifier unsignedBuyAllowed() {\r\n    require(!requiredSignedAddress);\r\n    _;\r\n  }\r\n\r\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\r\n  modifier notFinished() {\r\n    State current_state = getState();\r\n    require(current_state == State.PreFunding || current_state == State.Funding);\r\n    _;\r\n  }\r\n\r\n  modifier validCustomerId(uint128 customerId) {\r\n    require(customerId != 0);  // UUIDv4 sanity check\r\n    _;\r\n  }\r\n}\r\npragma solidity ^0.4.19;\r\n\r\n// Simple deployment information store inside contract storage.\r\ncontract DeploymentInfo {\r\n  uint private deployed_on;\r\n\r\n  function DeploymentInfo() public {\r\n    deployed_on = block.number;\r\n  }\r\n\r\n\r\n  function getDeploymentBlock() public view returns (uint) {\r\n    return deployed_on;\r\n  }\r\n}\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n *\r\n * Heavily modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.19;\r\n\r\n\r\n/// @dev Tranche based pricing.\r\n///      Implementing \"first price\" tranches, meaning, that if a buyer's order is\r\n///      covering more than one tranche, the price of the lowest tranche will apply\r\n///      to the whole order.\r\ncontract TokenTranchePricing {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /**\r\n   * Define pricing schedule using tranches.\r\n   */\r\n  struct Tranche {\r\n      // Amount in tokens when this tranche becomes inactive\r\n      uint amount;\r\n      // Timestamp interval [start, end)\r\n      // Starting timestamp (included in the interval)\r\n      uint start;\r\n      // Ending timestamp (excluded from the interval)\r\n      uint end;\r\n      // How many tokens per wei you will get while this tranche is active\r\n      uint price;\r\n  }\r\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\r\n  uint private constant amount_offset = 0;\r\n  uint private constant start_offset = 1;\r\n  uint private constant end_offset = 2;\r\n  uint private constant price_offset = 3;\r\n  uint private constant tranche_size = 4;\r\n\r\n  Tranche[] public tranches;\r\n\r\n  function getTranchesLength() public view returns (uint) {\r\n    return tranches.length;\r\n  }\r\n  \r\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\r\n  //\r\n  /// @dev Construction, creating a list of tranches\r\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\r\n  //\r\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\r\n    // Need to have tuples, length check\r\n    require(init_tranches.length % tranche_size == 0);\r\n    // A tranche with amount zero can never be selected and is therefore useless.\r\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\r\n    require(init_tranches[amount_offset] > 0);\r\n\r\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\r\n    Tranche memory last_tranche;\r\n    for (uint i = 0; i < input_tranches_length; i++) {\r\n      uint tranche_offset = i.mul(tranche_size);\r\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\r\n      uint start = init_tranches[tranche_offset.add(start_offset)];\r\n      uint end = init_tranches[tranche_offset.add(end_offset)];\r\n      uint price = init_tranches[tranche_offset.add(price_offset)];\r\n      // No invalid steps\r\n      require(start < end && now < end);\r\n      // Bail out when entering unnecessary tranches\r\n      // This is preferably checked before deploying contract into any blockchain.\r\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\r\n              (end > last_tranche.end && amount >= last_tranche.amount));\r\n\r\n      last_tranche = Tranche(amount, start, end, price);\r\n      tranches.push(last_tranche);\r\n    }\r\n  }\r\n\r\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\r\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\r\n  /// @return Returns the struct representing the current tranche\r\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\r\n    for (uint i = 0; i < tranches.length; i++) {\r\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\r\n        return tranches[i];\r\n      }\r\n    }\r\n    // No tranche is currently active\r\n    revert();\r\n  }\r\n\r\n  /// @dev Get the current price. May revert if there is no tranche currently active.\r\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\r\n  /// @return The current price\r\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\r\n    return getCurrentTranche(tokensSold).price;\r\n  }\r\n\r\n}\r\n\r\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\r\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\r\n  uint public sellable_tokens;\r\n  uint public initial_tokens;\r\n  uint public milieurs_per_eth;\r\n  // Minimum amounts of tokens that must be bought by an investor\r\n  uint public minimum_buy_value;\r\n\r\n  /*\r\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\r\n   *\r\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\r\n   * \r\n   *\r\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\r\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\r\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\r\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\r\n   */\r\n\r\n  function configurationCrowdsale(address team_multisig, uint start, uint end,\r\n  address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply,\r\n  uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\r\n\r\n    initial_tokens = multisig_supply;\r\n    minimum_buy_value = uint(100).mul(10 ** uint(token_decimals));\r\n    token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\r\n    // Necessary if assignTokens mints\r\n    token.setMintAgent(address(this), true);\r\n    // Necessary if finalize is overriden to release the tokens for public trading.\r\n    token.setReleaseAgent(address(this));\r\n    // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \r\n    token.setTransferAgent(address(this), true);\r\n    // Crowdsale mints to himself the initial supply\r\n    token.mint(address(this), crowdsale_supply);\r\n\r\n    sellable_tokens = max_tokens_to_sell;\r\n\r\n    // Configuration functionality for GenericCrowdsale.\r\n    configurationGenericCrowdsale(team_multisig, start, end);\r\n\r\n    // Configuration functionality for TokenTranchePricing.\r\n    configurationTokenTranchePricing(init_tranches);\r\n  }\r\n\r\n  //token assignation\r\n  function assignTokens(address receiver, uint tokenAmount) internal {\r\n    token.transfer(receiver, tokenAmount);\r\n  }\r\n\r\n  //token amount calculation\r\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\r\n    //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\r\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\r\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\r\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\r\n\r\n    if (weiAmount < maxWeiAllowed) {\r\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\r\n    }\r\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\r\n    else {\r\n      tokenAmount = sellable_tokens.sub(tokensSold);\r\n    }\r\n\r\n    // Require a minimum contribution of 100 fulltokens\r\n    require(token.balanceOf(receiver).add(tokenAmount) >= minimum_buy_value);\r\n  }\r\n\r\n  // Implements funding state criterion\r\n  function isCrowdsaleFull() internal view returns (bool full) {\r\n    return tokensSold >= sellable_tokens;\r\n  }\r\n\r\n  /**\r\n   * Finalize a successful crowdsale.\r\n   *\r\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\r\n   * Note that by default tokens are not in a released state.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n    //Tokens sold + bounties represent 82% of the total, the other 18% goes to the multisig, partners and market making\r\n    uint sold = tokensSold.add(initial_tokens);\r\n    uint toShare = sold.mul(18).div(82);\r\n\r\n    // Mint the 18% to the multisig\r\n    token.setMintAgent(address(this), true);\r\n    token.mint(multisigWallet, toShare);\r\n    token.setMintAgent(address(this), false);\r\n\r\n    // Release transfers and burn unsold tokens.\r\n    token.releaseTokenTransfer();\r\n    token.burn(token.balanceOf(address(this)));\r\n\r\n    super.finalize();\r\n  }\r\n\r\n  /**\r\n   * This function decides who handles lost tokens.\r\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\r\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\r\n   */\r\n  function getLostAndFoundMaster() internal view returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\r\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\r\n    require(now < startingTime && startingTime < endsAt);\r\n    startsAt = startingTime;\r\n  }\r\n\r\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\r\n    require(now < endingTime && startsAt < endingTime);\r\n    endsAt = endingTime;\r\n  }\r\n\r\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner notFinished {\r\n    require(milieurs_amount >= 100);\r\n    milieurs_per_eth = milieurs_amount;\r\n  }\r\n\r\n  /**\r\n   * @param new_minimum New minimum amount of indivisible tokens to be required\r\n   */\r\n  function setMinimumBuyValue(uint new_minimum) public onlyOwner notFinished {\r\n    minimum_buy_value = new_minimum;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"requireCustomerId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initial_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"buyOnBehalfWithCustomerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyOnBehalfWithSignedAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"fullTokens\",\"type\":\"uint256\"},{\"name\":\"weiPrice\",\"type\":\"uint256\"}],\"name\":\"preallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endingTime\",\"type\":\"uint256\"}],\"name\":\"setEndingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startingTime\",\"type\":\"uint256\"}],\"name\":\"setStartingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token_contract\",\"type\":\"address\"}],\"name\":\"enableLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEarlyParticipantWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milieurs_per_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_buy_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"milieurs_amount\",\"type\":\"uint256\"}],\"name\":\"updateEursPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRequireCustomerId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeploymentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configured\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"buyWithCustomerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellable_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyParticipantWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuyValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buyOnBehalf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team_multisig\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"token_retriever\",\"type\":\"address\"},{\"name\":\"init_tranches\",\"type\":\"uint256[]\"},{\"name\":\"multisig_supply\",\"type\":\"uint256\"},{\"name\":\"crowdsale_supply\",\"type\":\"uint256\"},{\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"name\":\"max_tokens_to_sell\",\"type\":\"uint256\"}],\"name\":\"configurationCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"},{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setRequireSignedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyWithSignedAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTranchesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requireCId\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"requireSignedAddress\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"InvestmentPolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"halted\",\"type\":\"bool\"}],\"name\":\"Halted\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://82af2530c2bcc291e287ab643d1d094c6ec1d1374afd2628980533957f239977"}]}