{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenContract is Ownable, StandardToken {\r\n    string public constant name = \"MTE Token\";\r\n    string public constant symbol = \"MTE\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 80000000 * (10 ** uint256(decimals));\r\n\r\n    function TokenContract(address _mainWallet) public {\r\n    address mainWallet = _mainWallet;\r\n    uint256 tokensForWallet = 18400000 * (10 ** uint256(decimals));\r\n    uint256 tokensForICO = INITIAL_SUPPLY - tokensForWallet;\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[mainWallet] = tokensForWallet;\r\n    balances[msg.sender] = tokensForICO;\r\n    emit Transfer(0x0, mainWallet, tokensForWallet);\r\n    emit Transfer(0x0, msg.sender, tokensForICO);\r\n  }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function burn(uint256 _amount) public {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        emit Burn(msg.sender, _amount);\r\n    }\r\n\r\n    event Burn(address indexed from, uint256 amount);\r\n}\r\n\r\n\r\ncontract CrowdSale is Ownable {\r\nusing SafeMath for uint256;\r\n\r\n  struct Wave {\r\n    uint256 price;\r\n    uint256 start;\r\n    uint256 finish;\r\n    uint256 amount;\r\n    uint256 sold;\r\n  }\r\n\r\n  Wave[5] private waves;\r\n  TokenContract public tkn;\r\n  address public mainWallet;\r\n  uint8 public currentWave;\r\n  uint256 public tokensSold;\r\n\r\n  function CrowdSale() public {\r\n    uint256 _startTime = 1522166400;\r\n    tkn = new TokenContract(msg.sender);\r\n    emit TokenCreation(address(tkn));\r\n    mainWallet = msg.sender;  \r\n    waves[0].price = 700;\r\n    waves[0].amount = 6160000 * (10 ** 18);\r\n    waves[0].start = _startTime;\r\n    waves[0].finish = _startTime + 7 days;\r\n    waves[1].price = 600;\r\n    waves[1].amount = 12320000 * (10 ** 18);\r\n    waves[1].start = waves[0].finish;\r\n    waves[1].finish = waves[1].start + 14 days;\r\n    waves[2].price = 500;\r\n    waves[2].amount = 12320000 * (10 ** 18);\r\n    waves[2].start = waves[1].finish;\r\n    waves[2].finish = waves[2].start + 14 days;\r\n    waves[3].price = 400;\r\n    waves[3].amount = 15400000 * (10 ** 18);\r\n    waves[3].start = waves[2].finish;\r\n    waves[3].finish = waves[3].start + 14 days;\r\n    waves[4].price = 300;\r\n    waves[4].amount = 15400000 * (10 ** 18);\r\n    waves[4].start = waves[3].finish;\r\n    waves[4].finish = waves[4].start + 14 days;\r\n  }\r\n\r\n  function validPurchase() private returns (bool) {\r\n    if ((waves[currentWave].finish > now) && (waves[currentWave].sold < waves[currentWave].amount)) {\r\n      return true;\r\n    } else {\r\n      if (waves[currentWave].finish < now) {\r\n        bool onTime;\r\n        for (uint8 i = (currentWave); i < 5; i++) {\r\n          currentWave += 1;\r\n          if (waves[currentWave].finish > now) {\r\n            onTime = true;\r\n            break;\r\n          }\r\n        }\r\n        if (onTime) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  function forwardFunds() private {\r\n    if (currentWave < 2) {\r\n      uint256 totalFunds = address(this).balance;\r\n      mainWallet.transfer(totalFunds);\r\n    }\r\n  }\r\n\r\n  function finishICO() onlyOwner public {\r\n    if ((waves[currentWave].finish > now) || (waves[currentWave].sold == waves[currentWave].amount)) {\r\n        forwardFunds();\r\n        uint256 tokensToBurn;\r\n        tokensToBurn = tkn.balanceOf(address(this));\r\n        tkn.burn(tokensToBurn);\r\n        selfdestruct(mainWallet);\r\n    }\r\n  }\r\n\r\n  function autoSell(address _investor, uint256 _investment) private {\r\n    uint256 tokensToSell;\r\n    tokensToSell = _investment.mul(waves[currentWave].price);\r\n    if (tokensToSell < (waves[currentWave].amount - waves[currentWave].sold)) {\r\n      executeSell(_investor, tokensToSell);\r\n    } else {\r\n      uint256 toKeep;\r\n      uint256 toRefund;\r\n      tokensToSell = waves[currentWave].amount - waves[currentWave].sold;\r\n      toKeep = tokensToSell.div(waves[currentWave].price);\r\n      toRefund = _investment.sub(toKeep);\r\n      _investor.transfer(toRefund);\r\n      executeSell(_investor, tokensToSell);\r\n    }\r\n  }\r\n\r\n  function executeSell(address _investor, uint256 _amount) private {\r\n      waves[currentWave].sold += _amount;\r\n      tokensSold += _amount;\r\n      require(tkn.transfer(_investor, _amount));\r\n      emit NewInvestment(_investor, _amount);\r\n      forwardFunds();\r\n  }\r\n\r\n  function offlineSell(address _investor, uint256 _amount) onlyOwner public {\r\n    //require(validPurchase());\r\n    require(_amount > 0);\r\n    require(_amount < (waves[currentWave].amount - waves[currentWave].sold));\r\n    require(_investor != address(0));\r\n    executeSell(_investor, _amount);\r\n  }\r\n\r\n  function() payable public {\r\n    require(msg.value > 1 finney);\r\n    require(validPurchase());\r\n    autoSell(msg.sender, msg.value);\r\n  }\r\n\r\n  event NewInvestment(address investor, uint256 amount);\r\n  event TokenCreation(address _token);\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tkn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWave\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"offlineSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c953b27db0a6d74e0084cb2d1dae5fa035cb4353ec00eb1598a15caf7815299d"}]}