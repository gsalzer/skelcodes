{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n\r\ncontract TokenERC20 {\r\n\r\n  /* Begin Owned Contract Members */\r\n  // An array of owners\r\n  mapping (address => bool) public owners;\r\n\r\n  // Has the next action been authorised by another owner\r\n  bool public nextActionIsAuthorised = false;\r\n  address public actionAuthorisedBy;\r\n  // Does an owner-only action have to be authorised by another owner\r\n  bool public requireAuthorisation = true;\r\n\r\n\r\n\r\n  function isOwner(address addressToCheck) view public returns (bool) {\r\n    return owners[addressToCheck];\r\n  }\r\n\r\n\r\n\r\n  modifier onlyOwners {\r\n    require(isOwner(msg.sender));\r\n    if (requireAuthorisation) {\r\n      checkActionIsAuthorisedAndReset();\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  function authoriseNextAction() public {\r\n    require(isOwner(msg.sender));\r\n    require(requireAuthorisation);\r\n    require(!nextActionIsAuthorised);\r\n    nextActionIsAuthorised = true;\r\n    actionAuthorisedBy = msg.sender;\r\n  }\r\n\r\n\r\n\r\n  function checkActionIsAuthorisedAndReset() public {\r\n    require(isOwner(msg.sender));\r\n    bool isValidAuthorisationRequest = (nextActionIsAuthorised && actionAuthorisedBy != msg.sender);\r\n    require(isValidAuthorisationRequest);\r\n    nextActionIsAuthorised = false;\r\n  }\r\n\r\n\r\n\r\n  function setRequireAuthorisation(bool _requireAuthorisation) onlyOwners public {\r\n    requireAuthorisation = _requireAuthorisation;\r\n  }\r\n  /* End Owned Contract Members */\r\n\r\n\r\n  // Public variables of the token\r\n  bool public tokenInitialised = false;\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 18;\r\n  uint256 public totalSupply;\r\n  uint256 public sellPrice;\r\n  address public currentSeller;\r\n\r\n  // Are users currently allowed to...\r\n  bool public allowTransfers = false; // transfer their tokens\r\n  bool public allowBurns = false;     // burn their tokens\r\n  bool public allowBuying = false;    // buy tokens\r\n\r\n  // This creates an array with...\r\n  mapping (address => uint256) public balanceOf;    // all balances\r\n  mapping (address => uint256) public etherSpent;   // how much an addeess has spent\r\n  mapping (address => bool) public frozenAccounts;  // frozen accounts\r\n  address[] investors;\r\n  uint64 public investorCount;\r\n\r\n\r\n\r\n  /*** Begin ICO Variables ***/\r\n\r\n  // Unit lenghts for week, month and year\r\n  uint256 constant public weekLength = 60 * 60 * 24 * 7;\r\n  uint256 constant public monthLength = 2627856; // (60 * 60 * 24 * 30.415) As to not have to re-adjust for different month lengths\r\n  uint256 constant public yearLength = 60 * 60 * 24 * 7 * 52;\r\n\r\n  uint256 public icoBeginDate;\r\n  uint256 public icoEndDate;\r\n  bool public icoParametersSet = false;\r\n\r\n  uint256 public tokensSoldAtIco = 0;\r\n  uint256 public minimumTokenThreshold;\r\n  bool public etherHasBeenReturnedToInvestors = false;\r\n  uint256 public softCap;\r\n  uint256 public runTimeAfterSoftCapReached;\r\n  uint256 public dateSoftCapWasReached = 0;\r\n\r\n  uint256 public maxFundsThatCanBeWithdrawnByOwners = 0;\r\n  uint256 public fundsWithdrawnByOwners = 0;\r\n\r\n  uint8 immediateAllowancePercentage;\r\n  uint8 firstYearAllowancePercentage;\r\n  uint8 secondYearAllowancePercentage;\r\n\r\n  mapping (uint8 => uint8) public weekBonuses; // Bonus of 20% is stored as 120, 10% as 110 etc.\r\n\r\n\r\n\r\n  modifier onlyWhenIcoParametersAreSet {\r\n    require(icoParametersSet);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  modifier onlyWhenIcoParametersAreNotSet {\r\n    require(!icoParametersSet);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  modifier onlyDuringIco {\r\n    require(icoParametersSet);\r\n    updateContract();\r\n    require(isIcoRunning());\r\n    _;\r\n  }\r\n  /*** End ICO Variables ***/\r\n\r\n\r\n\r\n  /*** Begin ICO Setters ***/\r\n  function setIcoParametersSet(bool set) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    icoParametersSet = set;\r\n  }\r\n\r\n\r\n\r\n  function setIcoBeginDate(uint256 beginDate) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    icoBeginDate = beginDate;\r\n  }\r\n\r\n\r\n\r\n  function setIcoEndDate (uint256 endDate) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    icoEndDate = endDate;\r\n  }\r\n\r\n\r\n\r\n  function setSoftCap (uint256 cap) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    softCap = cap;\r\n  }\r\n\r\n\r\n\r\n  function setRunTimeAfterSoftCapReached (uint256 runTime) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    runTimeAfterSoftCapReached = runTime;\r\n  }\r\n\r\n\r\n\r\n  function setImmediateAllowancePercentage(uint8 allowancePercentage) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    immediateAllowancePercentage = allowancePercentage;\r\n  }\r\n\r\n\r\n\r\n  function setFirstYearAllowancePercentage(uint8 allowancePercentage) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    firstYearAllowancePercentage = allowancePercentage;\r\n  }\r\n\r\n\r\n\r\n  function setSecondYearAllowancePercentage(uint8 allowancePercentage) onlyWhenIcoParametersAreNotSet onlyOwners public {\r\n    secondYearAllowancePercentage = allowancePercentage;\r\n  }\r\n\r\n\r\n\r\n  function initialiseToken() public {\r\n    require(!tokenInitialised);\r\n    name = \"BaraToken\";\r\n    symbol = \"BRT\";\r\n    totalSupply = 160000000 * 10 ** uint256(decimals);\r\n    balanceOf[msg.sender] = totalSupply;\r\n    currentSeller = msg.sender;\r\n    owners[msg.sender] = true;\r\n    owners[0x1434e028b12D196AcBE5304A94d0a5F816eb5d55] = true;\r\n    tokenInitialised = true;\r\n  }\r\n\r\n\r\n\r\n  function() payable public {\r\n    buyTokens();\r\n  }\r\n\r\n\r\n\r\n  function updateContract() onlyWhenIcoParametersAreSet public {\r\n    if (hasSoftCapBeenReached() && dateSoftCapWasReached == 0) {\r\n      dateSoftCapWasReached = now;\r\n      bool reachingSoftCapWillExtendIco = (dateSoftCapWasReached + runTimeAfterSoftCapReached > icoEndDate);\r\n      if (!reachingSoftCapWillExtendIco)\r\n        icoEndDate = dateSoftCapWasReached + runTimeAfterSoftCapReached;\r\n    }\r\n    if (!isBeforeIco())\r\n      updateOwnersWithdrawAllowance();\r\n  }\r\n\r\n\r\n\r\n  function isBeforeIco() onlyWhenIcoParametersAreSet internal view returns (bool) {\r\n    return (now <= icoBeginDate);\r\n  }\r\n\r\n\r\n\r\n  function isIcoRunning() onlyWhenIcoParametersAreSet internal view returns (bool) {\r\n    bool reachingSoftCapWillExtendIco = (dateSoftCapWasReached + runTimeAfterSoftCapReached) > icoEndDate;\r\n    bool afterBeginDate = now > icoBeginDate;\r\n    bool beforeEndDate = now < icoEndDate;\r\n    if (hasSoftCapBeenReached() && !reachingSoftCapWillExtendIco)\r\n      beforeEndDate = now < (dateSoftCapWasReached + runTimeAfterSoftCapReached);\r\n    bool running = afterBeginDate && beforeEndDate;\r\n    return running;\r\n  }\r\n\r\n\r\n\r\n  function isAfterIco() onlyWhenIcoParametersAreSet internal view returns (bool) {\r\n    return (now > icoEndDate);\r\n  }\r\n\r\n\r\n\r\n\r\n  function hasSoftCapBeenReached() onlyWhenIcoParametersAreSet internal view returns (bool) {\r\n    return (tokensSoldAtIco >= softCap && softCap != 0);\r\n  }\r\n\r\n\r\n\r\n  // In the first week of the ICO, there will be a bonus, say 20%, then the second week 10%,\r\n  // of tokens. This retrieves that bonus. 20% is stored as 120, 10% as 110, etc.\r\n  function getWeekBonus(uint256 amountPurchased) onlyWhenIcoParametersAreSet internal view returns (uint256) {\r\n    uint256 weekBonus = uint256(weekBonuses[getWeeksPassedSinceStartOfIco()]);\r\n    if (weekBonus != 0)\r\n      return (amountPurchased * weekBonus) / 100;\r\n    return amountPurchased;\r\n  }\r\n\r\n\r\n\r\n  function getTimeSinceEndOfIco() onlyWhenIcoParametersAreSet internal view returns (uint256) {\r\n    require(now > icoEndDate);\r\n    uint256 timeSinceEndOfIco = now - icoEndDate;\r\n    return timeSinceEndOfIco;\r\n  }\r\n\r\n\r\n\r\n  function getWeeksPassedSinceStartOfIco() onlyWhenIcoParametersAreSet internal view returns (uint8) {\r\n    require(!isBeforeIco());\r\n    uint256 timeSinceIco = now - icoBeginDate;\r\n    uint8 weeksPassedSinceIco = uint8(timeSinceIco / weekLength);\r\n    return weeksPassedSinceIco;\r\n  }\r\n\r\n\r\n\r\n  // Update how much the owners can withdraw based on how much time has passed\r\n  // since the end of the ICO\r\n  function updateOwnersWithdrawAllowance() onlyWhenIcoParametersAreSet internal {\r\n    if (isAfterIco()) {\r\n      uint256 totalFunds = this.balance;\r\n      maxFundsThatCanBeWithdrawnByOwners = 0;\r\n      uint256 immediateAllowance = (totalFunds * immediateAllowancePercentage) / 100;\r\n      bool secondYear = now - icoEndDate >= yearLength;\r\n      uint8 monthsPassedSinceIco = getMonthsPassedEndOfSinceIco();\r\n      if (secondYear) {\r\n        uint256 monthsPassedInSecondYear = monthsPassedSinceIco - 12;\r\n        // (monthsPassed / 12) * (allowancePercentage / 100) i.e. (monthsPassed * allowancePercentage / 1200)\r\n        // all multiplied by the totalFunds available to be withdrwan\r\n        // They're multiplied in one line to ensure not losing any information since we don't have floats\r\n        // The minimum a person can buy is 1/10^12 tokens and we have 18 decimals, meaning always at least\r\n        // 6 decimals to hold information done in multiplication/division\r\n        uint256 secondYearAllowance = ((totalFunds * secondYearAllowancePercentage * monthsPassedInSecondYear) / 1200);\r\n      }\r\n      uint8 monthsPassedInFirstYear = monthsPassedSinceIco;\r\n      if (secondYear)\r\n        monthsPassedInFirstYear = 12;\r\n      uint256 firstYearAllowance = ((totalFunds * firstYearAllowancePercentage * monthsPassedInFirstYear) / 1200);\r\n      maxFundsThatCanBeWithdrawnByOwners = immediateAllowance + firstYearAllowance + secondYearAllowance;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  function getMonthsPassedEndOfSinceIco() onlyWhenIcoParametersAreSet internal view returns (uint8) {\r\n    uint256 timePassedSinceIco = now - icoEndDate;\r\n    uint8 monthsPassedSinceIco = uint8(timePassedSinceIco / weekLength);\r\n    return monthsPassedSinceIco + 1;\r\n  }\r\n\r\n\r\n\r\n  // Check if the amount the owners are attempting to withdraw is within their current allowance\r\n  function amountIsWithinOwnersAllowance(uint256 amountToWithdraw) internal view returns (bool) {\r\n    if (now - icoEndDate >= yearLength * 2)\r\n      return true;\r\n    uint256 totalFundsWithdrawnAfterThisTransaction = fundsWithdrawnByOwners + amountToWithdraw;\r\n    bool withinAllowance = totalFundsWithdrawnAfterThisTransaction <= maxFundsThatCanBeWithdrawnByOwners;\r\n    return withinAllowance;\r\n  }\r\n\r\n\r\n\r\n  function buyTokens() onlyDuringIco payable public {\r\n    require(allowBuying);\r\n    require(!frozenAccounts[msg.sender]);\r\n    require(msg.value > 0);\r\n    uint256 numberOfTokensPurchased = msg.value / sellPrice;\r\n    require(numberOfTokensPurchased >= 10 ** 6);\r\n    numberOfTokensPurchased = getWeekBonus(numberOfTokensPurchased);\r\n    _transfer(currentSeller, msg.sender, numberOfTokensPurchased);\r\n    tokensSoldAtIco += numberOfTokensPurchased;\r\n    if (!(etherSpent[msg.sender] > 0)) {\r\n      investors[investorCount] = msg.sender;\r\n      investorCount++;\r\n    }\r\n    etherSpent[msg.sender] += msg.value;\r\n  }\r\n\r\n\r\n\r\n  /* These generate a public event on the blockchain that will notify clients */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Burn(address indexed from, uint256 value);\r\n  event FrozenFunds(address target, bool frozen);\r\n  event NewSellPrice(uint256 _sellPrice);\r\n\r\n\r\n\r\n  function setTokenName(string tokenName) onlyOwners public {\r\n    name = tokenName;\r\n  }\r\n\r\n\r\n\r\n  function setTokenSymbol(string tokenSymbol) onlyOwners public {\r\n    symbol = tokenSymbol;\r\n  }\r\n\r\n\r\n\r\n  function setAllowTransfers(bool allow) onlyOwners public {\r\n    allowTransfers = allow;\r\n  }\r\n\r\n\r\n\r\n  function setAllowBurns(bool allow) onlyOwners public {\r\n    allowBurns = allow;\r\n  }\r\n\r\n\r\n\r\n  function setAllowBuying(bool allow) onlyOwners public {\r\n    allowBuying = allow;\r\n  }\r\n\r\n\r\n\r\n  function setSellPrice(uint256 _sellPrice) onlyOwners public {\r\n    sellPrice = _sellPrice;\r\n    NewSellPrice(_sellPrice);\r\n  }\r\n\r\n\r\n\r\n  function setCurrentSeller(address newSeller) onlyOwners public {\r\n    currentSeller = newSeller;\r\n  }\r\n\r\n\r\n\r\n  function ownersTransfer(address _to, uint256 _amount) onlyOwners public {\r\n    _transfer(msg.sender, _to, _amount);\r\n  }\r\n\r\n\r\n\r\n  function transfer(address _to, uint256 _value) public {\r\n    require(allowTransfers && !isOwner(msg.sender));\r\n    _transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n\r\n\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n    require (_to != 0x0);\r\n    require (balanceOf[_from] >= _value);\r\n    require (balanceOf[_to] + _value > balanceOf[_to]);\r\n    require(!frozenAccounts[_from]);\r\n    require(!frozenAccounts[_to]);\r\n    balanceOf[_from] -= _value;\r\n    balanceOf[_to] += _value;\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n\r\n\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwners public {\r\n    balanceOf[target] += mintedAmount;\r\n    totalSupply += mintedAmount;\r\n    Transfer(0, this, mintedAmount);\r\n    Transfer(this, target, mintedAmount);\r\n  }\r\n\r\n\r\n\r\n  function burn(uint256 amount) public {\r\n    require(allowBurns && !isOwner(msg.sender));\r\n    require(balanceOf[msg.sender] >= amount);\r\n    balanceOf[msg.sender] -= amount;\r\n    totalSupply -= amount;\r\n    Burn(msg.sender, amount);\r\n  }\r\n\r\n\r\n\r\n  function burnFrom(address from, uint256 amount) onlyOwners public {\r\n    require (balanceOf[from] >= amount);\r\n    balanceOf[from] -= amount;\r\n    totalSupply -= amount;\r\n    Burn(from, amount);\r\n  }\r\n\r\n\r\n\r\n  function freezeAccount(address target, bool freeze) onlyOwners public {\r\n    frozenAccounts[target] = freeze;\r\n    FrozenFunds(target, freeze);\r\n  }\r\n\r\n\r\n\r\n  function addOwner(address owner) onlyOwners public {\r\n    owners[owner] = true;\r\n  }\r\n\r\n\r\n\r\n  function removeOwner(address owner) onlyOwners public {\r\n    owners[owner] = false;\r\n  }\r\n\r\n\r\n\r\n  function sendContractFundsToAddress(uint256 amount, address recipient) onlyOwners public {\r\n    require(icoParametersSet);\r\n    require(isAfterIco());\r\n    require(tokensSoldAtIco >= minimumTokenThreshold);\r\n    require(amount <= this.balance);\r\n    updateContract();\r\n    require(amountIsWithinOwnersAllowance(amount));\r\n    recipient.transfer(amount);\r\n  }\r\n\r\n\r\n\r\n  function returnEtherToInvestors() onlyOwners onlyWhenIcoParametersAreSet public {\r\n    require(isAfterIco());\r\n    require(!etherHasBeenReturnedToInvestors);\r\n    require(tokensSoldAtIco < minimumTokenThreshold);\r\n    for (uint64 investorNumber; investorNumber < investorCount; investorNumber++) {\r\n      address investor = investors[investorNumber];\r\n      uint256 amountToSend = etherSpent[investor];\r\n      investor.transfer(amountToSend);\r\n    }\r\n    etherHasBeenReturnedToInvestors = true;\r\n  }\r\n\r\n\r\n\r\n  function getContractBalance() public view returns (uint256) {\r\n    return this.balance;\r\n  }\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"actionAuthorisedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowBuying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextActionIsAuthorised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowBuying\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requireAuthorisation\",\"type\":\"bool\"}],\"name\":\"setRequireAuthorisation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requireAuthorisation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runTimeAfterSoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWithdrawnByOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTokenThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldAtIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowBurns\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setIcoParametersSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"weekBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowancePercentage\",\"type\":\"uint8\"}],\"name\":\"setFirstYearAllowancePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowancePercentage\",\"type\":\"uint8\"}],\"name\":\"setImmediateAllowancePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"runTime\",\"type\":\"uint256\"}],\"name\":\"setRunTimeAfterSoftCapReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowancePercentage\",\"type\":\"uint8\"}],\"name\":\"setSecondYearAllowancePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"setIcoEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoBeginDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoParametersSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherHasBeenReturnedToInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSeller\",\"type\":\"address\"}],\"name\":\"setCurrentSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateSoftCapWasReached\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInitialised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendContractFundsToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"setTokenSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnEtherToInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialiseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowBurns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownersTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFundsThatCanBeWithdrawnByOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beginDate\",\"type\":\"uint256\"}],\"name\":\"setIcoBeginDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"authoriseNextAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkActionIsAuthorisedAndReset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"setSellPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"NewSellPrice\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8626e638e1b9f4aafcab7372e5ea55969e0b4cce15dfd389fd021a12efa1b2ad"}]}