{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n     function percent(uint256 a,uint256 b) internal  pure returns (uint256){\r\n      return mul(div(a,uint256(100)),b);\r\n    }\r\n  \r\n    function power(uint256 a,uint256 b) internal pure returns (uint256){\r\n      return mul(a,10**b);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract RDOToken is StandardToken {\r\n    string public name = \"RDO roken\";\r\n    string public symbol = \"RDO\";\r\n    uint256 public decimals = 8;\r\n    address owner;\r\n    address crowdsale;\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function RDOToken() public {\r\n        owner=msg.sender;\r\n        uint256 initialTotalSupply=1000000000;\r\n        totalSupply=initialTotalSupply.power(decimals);\r\n        balances[msg.sender]=totalSupply;\r\n        \r\n        crowdsale=new RDOCrowdsale(this,msg.sender);\r\n        allocate(crowdsale,75); \r\n        allocate(0x523f6034c79915cE9AacD06867721D444c45a6a5,12); \r\n        allocate(0x50d0a8eDe1548E87E5f8103b89626bC9C76fe2f8,7); \r\n        allocate(0xD8889ff86b9454559979Aa20bb3b41527AE4b74b,3); \r\n        allocate(0x5F900841910baaC70e8b736632600c409Af05bf8,3); \r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n\r\n    function allocate(address _address,uint256 percent) private{\r\n        uint256 bal=totalSupply.percent(percent);\r\n        transfer(_address,bal);\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    \r\n    function stopCrowdfunding() onlyOwner public {\r\n        if(crowdsale!=0x0){\r\n            RDOCrowdsale(crowdsale).stopCrowdsale();\r\n            crowdsale=0x0;\r\n        }\r\n    }\r\n    \r\n    function getCrowdsaleAddress() constant public returns(address){\r\n        return crowdsale;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RPOCrowdsale\r\n * @dev RPOCrowdsale is a contract for managing a token crowdsale for RPO project.\r\n * Crowdsale have 9 phases with start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate and bonuses. Collected funds are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract RDOCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    RDOToken public token;\r\n\r\n    // External wallet where funds get forwarded\r\n    address public wallet;\r\n\r\n    // Crowdsale administrator\r\n    address public owners;\r\n\r\n    \r\n    // price per 1 RDO\r\n    uint256 public price=0.55 finney;\r\n\r\n    // Phases list, see schedule in constructor\r\n    mapping (uint => Phase) phases;\r\n\r\n    // The total number of phases (0...9)\r\n    uint public totalPhases = 9;\r\n\r\n    // Description for each phase\r\n    struct Phase {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 bonusPercent;\r\n    }\r\n\r\n    // Bonus based on value\r\n    BonusValue[] bonusValue;\r\n\r\n    struct BonusValue{\r\n        uint256 minimum;\r\n        uint256 maximum;\r\n        uint256 bonus;\r\n    }\r\n    \r\n    // Minimum Deposit in eth\r\n    uint256 public constant minContribution = 100 finney;\r\n\r\n\r\n    // Amount of raised Ethers (in wei).\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param bonusPercent free tokens percantage for the phase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 bonusPercent, uint256 amount);\r\n\r\n    // event for wallet update\r\n    event WalletSet(address indexed wallet);\r\n\r\n    function RDOCrowdsale(address _tokenAddress, address _wallet) public {\r\n        require(_tokenAddress != address(0));\r\n        token = RDOToken(_tokenAddress);\r\n        wallet = _wallet;\r\n        owners=msg.sender;\r\n        \r\n        /*\r\n        ICO SCHEDULE\r\n        Bonus        \r\n        40%     1 round\r\n        30%     2 round\r\n        25%     3 round\r\n        20%     4 round\r\n        15%     5 round\r\n        10%     6 round\r\n        7%      7 round\r\n        5%      8 round\r\n        3%      9 round\r\n        */\r\n        \r\n        fillPhase(0,40,25 days);\r\n        fillPhase(1,30,15 days);\r\n        fillPhase(2,25,15 days);\r\n        fillPhase(3,20,15 days);\r\n        fillPhase(4,15,15 days);\r\n        fillPhase(5,10,15 days);\r\n        fillPhase(6,7,15 days);\r\n        fillPhase(7,5,15 days);\r\n        fillPhase(8,3,15 days);\r\n        \r\n        // Fill bonus based on value\r\n        bonusValue.push(BonusValue({\r\n            minimum:5 ether,\r\n            maximum:25 ether,\r\n            bonus:5\r\n        }));\r\n        bonusValue.push(BonusValue({\r\n            minimum:26 ether,\r\n            maximum:100 ether,\r\n            bonus:8\r\n        }));\r\n        bonusValue.push(BonusValue({\r\n            minimum:101 ether,\r\n            maximum:100000 ether,\r\n            bonus:10\r\n        }));\r\n    }\r\n    \r\n    function fillPhase(uint8 index,uint256 bonus,uint256 delay) private{\r\n        phases[index].bonusPercent=bonus;\r\n        if(index==0){\r\n            phases[index].startTime = now;\r\n        }\r\n        else{\r\n            phases[index].startTime = phases[index-1].endTime;\r\n        }\r\n        phases[index].endTime = phases[index].startTime+delay;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(msg.value != 0);\r\n\r\n        uint256 currentBonusPercent = getBonusPercent(now);\r\n        uint256 weiAmount = msg.value;\r\n        uint256 volumeBonus=getVolumeBonus(weiAmount);\r\n        \r\n        require(weiAmount>=minContribution);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = calculateTokenAmount(weiAmount, currentBonusPercent,volumeBonus);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.transfer(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, currentBonusPercent, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    function getVolumeBonus(uint256 _wei) private view returns(uint256){\r\n        for(uint256 i=0;i<bonusValue.length;++i){\r\n            if(_wei>bonusValue[i].minimum && _wei<bonusValue[i].maximum){\r\n                return bonusValue[i].bonus;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    // If phase exists return corresponding bonus for the given date\r\n    // else return 0 (percent)\r\n    function getBonusPercent(uint256 datetime) private view returns (uint256) {\r\n        for (uint i = 0; i < totalPhases; i++) {\r\n            if (datetime >= phases[i].startTime && datetime <= phases[i].endTime) {\r\n                return phases[i].bonusPercent;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners==msg.sender);\r\n        _;\r\n    }\r\n\r\n    // calculates how much tokens will beneficiary get\r\n    // for given amount of wei\r\n    function calculateTokenAmount(uint256 _weiDeposit, uint256 _bonusTokensPercent,uint256 _volumeBonus) private view returns (uint256) {\r\n        uint256 mainTokens = _weiDeposit.div(price);\r\n        uint256 bonusTokens = mainTokens.percent(_bonusTokensPercent);\r\n        uint256 volumeBonus=mainTokens.percent(_volumeBonus);\r\n        return mainTokens.add(bonusTokens).add(volumeBonus);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function stopCrowdsale() public {\r\n        token.burn(token.balanceOf(this));\r\n        selfdestruct(wallet);\r\n    }\r\n    \r\n    function getCurrentBonus() public constant returns(uint256){\r\n        return getBonusPercent(now);\r\n    }\r\n    \r\n    function calculateEstimateToken(uint256 _wei) public constant returns(uint256){\r\n        uint256 timeBonus=getCurrentBonus();\r\n        uint256 volumeBonus=getVolumeBonus(_wei);\r\n        return calculateTokenAmount(_wei,timeBonus,volumeBonus);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPhases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"calculateEstimateToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletSet\",\"type\":\"event\"}]","ContractName":"RDOCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000037047e71d4225577ad04d5229fbaa00cd4a573af00000000000000000000000069e58dfd6f5f2bf0d1debbb47f7f1dbf889221c4","Library":"","SwarmSource":"bzzr://ea45bd8ba7408366b987d4943b4ffb09b6e49cfe1c7c009535de5da525b1d3eb"}]}