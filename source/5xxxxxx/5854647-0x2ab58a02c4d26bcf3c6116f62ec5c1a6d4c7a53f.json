{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n// File: contracts/TweedentityRegistry.sol\r\n\r\ncontract Pausable {\r\n\r\n  bool public paused;\r\n}\r\n\r\n\r\n/**\r\n * @title TweedentityRegistry\r\n * @author Francesco Sullo <francesco@sullo.co>\r\n * @dev It store the tweedentities contracts addresses to allows dapp to be updated\r\n */\r\n\r\n\r\ncontract TweedentityRegistry\r\nis HasNoEther\r\n{\r\n\r\n  string public version = \"1.4.0\";\r\n\r\n  uint public totalStores;\r\n  mapping (bytes32 => address) private stores;\r\n\r\n  address public manager;\r\n  address public claimer;\r\n\r\n  event ContractRegistered(\r\n    bytes32 indexed key,\r\n    string spec,\r\n    address addr\r\n  );\r\n\r\n\r\n  function setManager(\r\n    address _manager\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(_manager != address(0));\r\n    manager = _manager;\r\n    ContractRegistered(keccak256(\"manager\"), \"\", _manager);\r\n  }\r\n\r\n\r\n  function setClaimer(\r\n    address _claimer\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(_claimer != address(0));\r\n    claimer = _claimer;\r\n    ContractRegistered(keccak256(\"claimer\"), \"\", _claimer);\r\n  }\r\n\r\n\r\n  function setManagerAndClaimer(\r\n    address _manager,\r\n    address _claimer\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(_manager != address(0));\r\n    require(_claimer != address(0));\r\n    manager = _manager;\r\n    claimer = _claimer;\r\n    ContractRegistered(keccak256(\"manager\"), \"\", _manager);\r\n    ContractRegistered(keccak256(\"claimer\"), \"\", _claimer);\r\n  }\r\n\r\n\r\n  function setAStore(\r\n    string _appNickname,\r\n    address _store\r\n  )\r\n  external\r\n  onlyOwner\r\n  {\r\n    require(_store != address(0));\r\n    if (getStore(_appNickname) == address(0)) {\r\n      totalStores++;\r\n    }\r\n    stores[keccak256(_appNickname)] = _store;\r\n    ContractRegistered(keccak256(\"store\"), _appNickname, _store);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Gets the store managing the specified app\r\n   * @param _appNickname The nickname of the app\r\n   */\r\n  function getStore(\r\n    string _appNickname\r\n  )\r\n  public\r\n  constant returns(address)\r\n  {\r\n    return stores[keccak256(_appNickname)];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns true if the registry looks ready\r\n   */\r\n  function isReady()\r\n  external\r\n  constant returns(bool)\r\n  {\r\n    Pausable pausable = Pausable(manager);\r\n    return totalStores > 0 && manager != address(0) && claimer != address(0) && pausable.paused() == false;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalStores\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_appNickname\",\"type\":\"string\"},{\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setAStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setManagerAndClaimer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_appNickname\",\"type\":\"string\"}],\"name\":\"getStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"spec\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TweedentityRegistry","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b3b9b8e7cb7a843fec3c6a45a87e4175f91803c257582663adcdbb9a849313f3"}]}