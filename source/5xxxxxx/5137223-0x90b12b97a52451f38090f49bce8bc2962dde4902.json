{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n\t  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n\taddress public hostAddress;\r\n\taddress public adminAddress;\r\n    \r\n    function Ownable() public {\r\n\t\thostAddress = msg.sender;\r\n\t\tadminAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyHost() {\r\n        require(msg.sender == hostAddress); \r\n        _;\r\n    }\r\n\t\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\t\r\n\t/// Access modifier for contract owner only functionality\r\n\tmodifier onlyHostOrAdmin() {\r\n\t\trequire(\r\n\t\t  msg.sender == hostAddress ||\r\n\t\t  msg.sender == adminAddress\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setHost(address _newHost) public onlyHost {\r\n\t\trequire(_newHost != address(0));\r\n\r\n\t\thostAddress = _newHost;\r\n\t}\r\n    \r\n\tfunction setAdmin(address _newAdmin) public onlyHost {\r\n\t\trequire(_newAdmin != address(0));\r\n\r\n\t\tadminAddress = _newAdmin;\r\n\t}\r\n}\r\n\r\ncontract TokensWarContract is ERC721, Ownable {\r\n        \r\n    /*** EVENTS ***/\r\n        \r\n    /// @dev The NewHero event is fired whenever a new card comes into existence.\r\n    event NewToken(uint256 tokenId, string name, address owner);\r\n        \r\n    /// @dev The NewTokenOwner event is fired whenever a token is sold.\r\n    event NewTokenOwner(uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, uint256 tokenId);\r\n    \r\n    /// @dev The NewGoldenCard event is fired whenever a golden card is change.\r\n    event NewGoldenToken(uint256 goldenPayment);\r\n        \r\n    /// @dev Transfer event as defined in current draft of ERC721. ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n        \r\n    /*** CONSTANTS ***/\r\n        \r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant NAME = \"TokensWarContract\"; // solhint-disable-line\r\n    string public constant SYMBOL = \"TWC\"; // solhint-disable-line\r\n      \r\n    uint256 private startingPrice = 0.001 ether; \r\n    uint256 private firstStepLimit =  0.045 ether; //5 iteration\r\n    uint256 private secondStepLimit =  0.45 ether; //8 iteration\r\n    uint256 private thirdStepLimit = 1.00 ether; //10 iteration\r\n        \r\n    /*** STORAGE ***/\r\n        \r\n    /// @dev A mapping from card IDs to the address that owns them. All cards have\r\n    ///  some valid owner address.\r\n    mapping (uint256 => address) public cardTokenToOwner;\r\n        \r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) private ownershipTokenCount;\r\n        \r\n    /// @dev A mapping from CardIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each card can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public cardTokenToApproved;\r\n        \r\n    // @dev A mapping from CardIDs to the price of the token.\r\n    mapping (uint256 => uint256) private cardTokenToPrice;\r\n        \r\n    // @dev A mapping from CardIDs to the position of the item in array.\r\n    mapping (uint256 => uint256) private cardTokenToPosition;\r\n    \r\n    // @dev tokenId of golden card.\r\n    uint256 public goldenTokenId;\r\n    \r\n    /*** STORAGE ***/\r\n    \r\n\t/*** ------------------------------- ***/\r\n    \r\n    /*** CARDS ***/\r\n    \r\n\t/*** DATATYPES ***/\r\n\tstruct Card {\r\n\t\tuint256 token;\r\n\t\tstring name;\r\n\t}\r\n\r\n\tCard[] private cards;\r\n    \r\n\t\r\n\t/// @notice Returns all the relevant information about a specific card.\r\n\t/// @param _tokenId The tokenId of the card of interest.\r\n\tfunction getCard(uint256 _tokenId) public view returns (\r\n\t\tstring name,\r\n\t\tuint256 token\r\n\t) {\r\n\t    \r\n\t    address owner = cardTokenToOwner[_tokenId];\r\n        require(owner != address(0));\r\n\t    \r\n\t    uint256 index = cardTokenToPosition[_tokenId];\r\n\t    Card storage card = cards[index];\r\n\t\tname = card.name;\r\n\t\ttoken = card.token;\r\n\t}\r\n    \r\n    /// @dev Creates a new token with the given name.\r\n\tfunction createToken(string _name, uint256 _id) public onlyAdmin {\r\n\t\t_createToken(_name, _id, address(this), startingPrice);\r\n\t}\r\n\t\r\n    /// @dev set golden card token.\r\n\tfunction setGoldenCardToken(uint256 tokenId) public onlyAdmin {\r\n\t\tgoldenTokenId = tokenId;\r\n\t\tNewGoldenToken(goldenTokenId);\r\n\t}\r\n\t\r\n\tfunction _createToken(string _name, uint256 _id, address _owner, uint256 _price) private {\r\n\t    \r\n\t\tCard memory _card = Card({\r\n\t\t  name: _name,\r\n\t\t  token: _id\r\n\t\t});\r\n\t\t\t\r\n\t\tuint256 index = cards.push(_card) - 1;\r\n\t\tcardTokenToPosition[_id] = index;\r\n\t\t// It's probably never going to happen, 4 billion tokens are A LOT, but\r\n\t\t// let's just be 100% sure we never let this happen.\r\n\t\trequire(_id == uint256(uint32(_id)));\r\n\r\n\t\tNewToken(_id, _name, _owner);\r\n\t\tcardTokenToPrice[_id] = _price;\r\n\t\t// This will assign ownership, and also emit the Transfer event as\r\n\t\t// per ERC721 draft\r\n\t\t_transfer(address(0), _owner, _id);\r\n\t}\r\n\t/*** CARDS ***/\r\n\t\r\n\t/*** ------------------------------- ***/\r\n\t\r\n\t/*** ERC721 FUNCTIONS ***/\r\n    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n      ) public {\r\n        // Caller must own token.\r\n        require(_owns(msg.sender, _tokenId));\r\n    \r\n        cardTokenToApproved[_tokenId] = _to;\r\n    \r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    /// For querying balance of a particular account\r\n    /// @param _owner The address for balance query\r\n    /// @dev Required for ERC-721 compliance.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n    \r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    \r\n\r\n    /// For querying owner of token\r\n    /// @param _tokenId The tokenID for owner inquiry\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = cardTokenToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n    \r\n    /// @notice Allow pre-approved user to take ownership of a token\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = cardTokenToOwner[_tokenId];\r\n    \r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Making sure transfer is approved\r\n        require(_approved(newOwner, _tokenId));\r\n    \r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n    \r\n    /// For querying totalSupply of token\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return cards.length;\r\n    }\r\n    \r\n    /// Third-party initiates transfer of token from address _from to address _to\r\n    /// @param _from The address for the token to be transferred from.\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n    \r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// Owner initates the transfer of the token to another account\r\n    /// @param _to The address for the token to be transferred to.\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n    \r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    /// @dev Required for ERC-721 compliance.\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n    \r\n    /// @dev Required for ERC-721 compliance.\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n\t/*** ERC721 FUNCTIONS ***/\r\n\t\r\n\t/*** ------------------------------- ***/\r\n\t\r\n\t/*** ADMINISTRATOR FUNCTIONS ***/\r\n\t\r\n\t//send balance of contract on wallet\r\n\tfunction payout(address _to) public onlyHostOrAdmin {\r\n\t\t_payout(_to);\r\n\t}\r\n\t\r\n\tfunction _payout(address _to) private {\r\n\t\tif (_to == address(0)) {\r\n\t\t\thostAddress.transfer(this.balance);\r\n\t\t} else {\r\n\t\t\t_to.transfer(this.balance);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*** ADMINISTRATOR FUNCTIONS ***/\r\n\t\r\n\r\n    /*** PUBLIC FUNCTIONS ***/\r\n\r\n    function contractBalance() public  view returns (uint256 balance) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = cardTokenToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    \r\n    require(oldOwner != address(0));\r\n\r\n    uint256 sellingPrice = cardTokenToPrice[_tokenId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(Helper.div(Helper.mul(sellingPrice, 93), 100));\r\n    uint256 goldenPayment = uint256(Helper.div(Helper.mul(sellingPrice, 2), 100));\r\n    \r\n    uint256 purchaseExcess = Helper.sub(msg.value, sellingPrice);\r\n\r\n    // Update prices\r\n    if (sellingPrice < firstStepLimit) {\r\n      // first stage\r\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 300), 93);\r\n    } else if (sellingPrice < secondStepLimit) {\r\n      // second stage\r\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 200), 93);\r\n    } else if (sellingPrice < thirdStepLimit) {\r\n      // second stage\r\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 120), 93);\r\n    } else {\r\n      // third stage\r\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 115), 93);\r\n    }\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //-0.05\r\n    }\r\n    \r\n    //Pay golden commission\r\n    address goldenOwner = cardTokenToOwner[goldenTokenId];\r\n    if (goldenOwner != address(0)) {\r\n      goldenOwner.transfer(goldenPayment); //-0.02\r\n    }\r\n\r\n\t//CONTRACT EVENT \r\n\tuint256 index = cardTokenToPosition[_tokenId];\r\n    NewTokenOwner(sellingPrice, cardTokenToPrice[_tokenId], oldOwner, newOwner, cards[index].name, _tokenId);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n    \r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return cardTokenToPrice[_tokenId];\r\n  }\r\n\r\n\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire cards array looking for cards belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalCards = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 index;\r\n      for (index = 0; index <= totalCards-1; index++) {\r\n        if (cardTokenToOwner[cards[index].token] == _owner) {\r\n          result[resultIndex] = cards[index].token;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return cardTokenToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == cardTokenToOwner[_tokenId];\r\n  }\r\n\r\n\r\n  /// @dev Assigns ownership of a specific card to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of cards is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    cardTokenToOwner[_tokenId] = _to;\r\n\r\n    // When creating new cards _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete cardTokenToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n\r\n    function TokensWarContract() public {\r\n    }\r\n    \r\n}\r\n\r\nlibrary Helper {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setGoldenCardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTokenToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldenTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTokenToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newHost\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hostAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewTokenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"goldenPayment\",\"type\":\"uint256\"}],\"name\":\"NewGoldenToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokensWarContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3a4c53affd72114a67fb43aaff27d073a1fa95e95045c067e4443f0458e1c8dd"}]}