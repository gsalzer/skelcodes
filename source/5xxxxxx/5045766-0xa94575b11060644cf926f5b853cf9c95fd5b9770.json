{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/EthixToken.sol\r\n\r\ncontract EthixToken is PausableToken {\r\n  string public constant name = \"EthixToken\";\r\n  string public constant symbol = \"ETHIX\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals));\r\n  uint256 public totalSupply;\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function EthixToken() public {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[owner] = totalSupply;\r\n    Transfer(0x0, owner, INITIAL_SUPPLY);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/CompositeCrowdsale.sol\r\n\r\n/**\r\n * @title CompositeCrowdsale\r\n * @dev CompositeCrowdsale is a base contract for managing a token crowdsale.\r\n * Contrary to a classic crowdsale, it favours composition over inheritance.\r\n *\r\n * Crowdsale behaviour can be modified by specifying TokenDistributionStrategy\r\n * which is a dedicated smart contract that delegates all of the logic managing\r\n * token distribution.\r\n *\r\n */\r\ncontract CompositeCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  TokenDistributionStrategy public tokenDistribution;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function CompositeCrowdsale(uint256 _startTime, uint256 _endTime, address _wallet, TokenDistributionStrategy _tokenDistribution) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_wallet != 0x0);\r\n    require(address(_tokenDistribution) != address(0));\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n\r\n    tokenDistribution = _tokenDistribution;\r\n    tokenDistribution.initializeDistribution(this);\r\n\r\n    wallet = _wallet;\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = tokenDistribution.calculateTokenAmount(weiAmount, beneficiary);\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    tokenDistribution.distributeTokens(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/TokenDistributionStrategy.sol\r\n\r\n/**\r\n * @title TokenDistributionStrategy\r\n * @dev Base abstract contract defining methods that control token distribution\r\n */\r\ncontract TokenDistributionStrategy {\r\n  using SafeMath for uint256;\r\n\r\n  CompositeCrowdsale crowdsale;\r\n  uint256 rate;\r\n\r\n  modifier onlyCrowdsale() {\r\n    require(msg.sender == address(crowdsale));\r\n    _;\r\n  }\r\n\r\n  function TokenDistributionStrategy(uint256 _rate) {\r\n    require(_rate > 0);\r\n    rate = _rate;\r\n  }\r\n\r\n  function initializeDistribution(CompositeCrowdsale _crowdsale) {\r\n    require(crowdsale == address(0));\r\n    require(_crowdsale != address(0));\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  function returnUnsoldTokens(address _wallet) onlyCrowdsale {\r\n    \r\n  }\r\n\r\n  function whitelistRegisteredAmount(address beneficiary) view returns (uint256 amount) {\r\n  }\r\n\r\n  function distributeTokens(address beneficiary, uint amount);\r\n\r\n  function calculateTokenAmount(uint256 _weiAmount, address beneficiary) view returns (uint256 amount);\r\n\r\n  function getToken() view returns(ERC20);\r\n\r\n  \r\n\r\n}\r\n\r\n// File: contracts/crowdsale/FixedPoolWithBonusTokenDistributionStrategy.sol\r\n\r\n/**\r\n * @title FixedPoolWithBonusTokenDistributionStrategy \r\n * @dev Strategy that distributes a fixed number of tokens among the contributors,\r\n * with a percentage depending in when the contribution is made, defined by periods.\r\n * It's done in two steps. First, it registers all of the contributions while the sale is active.\r\n * After the crowdsale has ended the contract compensate buyers proportionally to their contributions.\r\n * This class is abstract, the intervals have to be defined by subclassing\r\n */\r\ncontract FixedPoolWithBonusTokenDistributionStrategy is TokenDistributionStrategy {\r\n  using SafeMath for uint256;\r\n  uint256 constant MAX_DISCOUNT = 100;\r\n\r\n  // Definition of the interval when the bonus is applicable\r\n  struct BonusInterval {\r\n    //end timestamp\r\n    uint256 endPeriod;\r\n    // percentage\r\n    uint256 bonus;\r\n  }\r\n  BonusInterval[] bonusIntervals;\r\n  bool intervalsConfigured = false;\r\n\r\n  // The token being sold\r\n  ERC20 token;\r\n  mapping(address => uint256) contributions;\r\n  uint256 totalContributed;\r\n  //mapping(uint256 => BonusInterval) bonusIntervals;\r\n\r\n  function FixedPoolWithBonusTokenDistributionStrategy(ERC20 _token, uint256 _rate)\r\n           TokenDistributionStrategy(_rate) public\r\n  {\r\n    token = _token;\r\n  }\r\n\r\n\r\n  // First period will go from crowdsale.start_date to bonusIntervals[0].end\r\n  // Next intervals have to end after the previous ones\r\n  // Last interval must end when the crowdsale ends\r\n  // All intervals must have a positive bonus (penalizations are not contemplated)\r\n  modifier validateIntervals {\r\n    _;\r\n    require(intervalsConfigured == false);\r\n    intervalsConfigured = true;\r\n    require(bonusIntervals.length > 0);\r\n    for(uint i = 0; i < bonusIntervals.length; ++i) {\r\n      require(bonusIntervals[i].bonus <= MAX_DISCOUNT);\r\n      require(bonusIntervals[i].bonus >= 0);\r\n      require(crowdsale.startTime() < bonusIntervals[i].endPeriod);\r\n      require(bonusIntervals[i].endPeriod <= crowdsale.endTime());\r\n      if (i != 0) {\r\n        require(bonusIntervals[i-1].endPeriod < bonusIntervals[i].endPeriod);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Init intervals\r\n  function initIntervals() validateIntervals {\r\n  }\r\n\r\n  function calculateTokenAmount(uint256 _weiAmount, address beneficiary) view returns (uint256 tokens) {\r\n    // calculate bonus in function of the time\r\n    for (uint i = 0; i < bonusIntervals.length; i++) {\r\n      if (now <= bonusIntervals[i].endPeriod) {\r\n        // calculate token amount to be created\r\n        tokens = _weiAmount.mul(rate);\r\n        // OP : tokens + ((tokens * bonusIntervals[i].bonus) / 100)\r\n        // BE CAREFULLY with decimals\r\n        return tokens.add(tokens.mul(bonusIntervals[i].bonus).div(100));\r\n      }\r\n    }\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  function distributeTokens(address _beneficiary, uint256 _tokenAmount) onlyCrowdsale {\r\n    contributions[_beneficiary] = contributions[_beneficiary].add(_tokenAmount);\r\n    totalContributed = totalContributed.add(_tokenAmount);\r\n    require(totalContributed <= token.balanceOf(this));\r\n  }\r\n\r\n  function compensate(address _beneficiary) {\r\n    require(crowdsale.hasEnded());\r\n    if (token.transfer(_beneficiary, contributions[_beneficiary])) {\r\n      contributions[_beneficiary] = 0;\r\n    }\r\n  }\r\n\r\n  function getTokenContribution(address _beneficiary) view returns(uint256){\r\n    return contributions[_beneficiary];\r\n  }\r\n\r\n  function getToken() view returns(ERC20) {\r\n    return token;\r\n  }\r\n\r\n  function getIntervals() view returns (uint256[] _endPeriods, uint256[] _bonuss) {\r\n    uint256[] memory endPeriods = new uint256[](bonusIntervals.length);\r\n    uint256[] memory bonuss = new uint256[](bonusIntervals.length);\r\n    for (uint256 i=0; i<bonusIntervals.length; i++) {\r\n      endPeriods[i] = bonusIntervals[i].endPeriod;\r\n      bonuss[i] = bonusIntervals[i].bonus;\r\n    }\r\n    return (endPeriods, bonuss);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/VestedTokenDistributionStrategy.sol\r\n\r\n/**\r\n * @title VestedTokenDistributionStrategy\r\n * @dev Strategy that distributes a fixed number of tokens among the contributors.\r\n * It's done in two steps. First, it registers all of the contributions while the sale is active.\r\n * After the crowdsale has ended the contract compensate buyers proportionally to their contributions.\r\n */\r\ncontract VestedTokenDistributionStrategy is Ownable, FixedPoolWithBonusTokenDistributionStrategy {\r\n\r\n\r\n  event Released(address indexed beneficiary, uint256 indexed amount);\r\n\r\n  //Time after which is allowed to compensates\r\n  uint256 public vestingStart;\r\n  bool public vestingConfigured = false;\r\n  uint256 public vestingDuration;\r\n\r\n  mapping (address => uint256) public released;\r\n\r\n  modifier vestingPeriodStarted {\r\n    require(crowdsale.hasEnded());\r\n    require(vestingConfigured == true);\r\n    require(now > vestingStart);\r\n    _;\r\n  }\r\n\r\n  function VestedTokenDistributionStrategy(ERC20 _token, uint256 _rate)\r\n            Ownable()\r\n            FixedPoolWithBonusTokenDistributionStrategy(_token, _rate) {\r\n\r\n  }\r\n\r\n  /**\r\n   * set the parameters for the compensation. Required to call before compensation\r\n   * @dev WARNING, ONE TIME OPERATION\r\n   * @param _vestingStart we start allowing  the return of tokens after this\r\n   * @param _vestingDuration percent each day (1 is 1% each day, 2 is % each 2 days, max 100)\r\n   */\r\n  function configureVesting(uint256 _vestingStart, uint256 _vestingDuration) onlyOwner {\r\n    require(vestingConfigured == false);\r\n    require(_vestingStart > crowdsale.endTime());\r\n    require(_vestingDuration > 0);\r\n    vestingStart = _vestingStart;\r\n    vestingDuration = _vestingDuration;\r\n    vestingConfigured = true;\r\n  }\r\n\r\n  /**\r\n   * Will transfer the tokens vested until now to the beneficiary, if the vestingPeriodStarted\r\n   * and there is an amount left to transfer\r\n   * @param  _beneficiary crowdsale contributor\r\n   */\r\n   function compensate(address _beneficiary) public onlyOwner vestingPeriodStarted {\r\n     uint256 unreleased = releasableAmount(_beneficiary);\r\n\r\n     require(unreleased > 0);\r\n\r\n     released[_beneficiary] = released[_beneficiary].add(unreleased);\r\n\r\n     require(token.transfer(_beneficiary, unreleased));\r\n     Released(_beneficiary,unreleased);\r\n\r\n   }\r\n\r\n  /**\r\n   * Calculates how many tokens the beneficiary should get taking in account already\r\n   * released\r\n   * @param  _beneficiary the contributor\r\n   * @return token number\r\n   */\r\n   function releasableAmount(address _beneficiary) public view returns (uint256) {\r\n     return vestedAmount(_beneficiary).sub(released[_beneficiary]);\r\n   }\r\n\r\n  /**\r\n   * Calculates how many tokens the beneficiary have vested\r\n   * vested = how many does she have according to the time\r\n   * @param  _beneficiary address of the contributor that needs the tokens\r\n   * @return amount of tokens\r\n   */\r\n  function vestedAmount(address _beneficiary) public view returns (uint256) {\r\n    uint256 totalBalance = contributions[_beneficiary];\r\n    //Duration(\"after\",vestingStart.add(vestingDuration));\r\n    if (now < vestingStart || vestingConfigured == false) {\r\n      return 0;\r\n    } else if (now >= vestingStart.add(vestingDuration)) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(vestingStart)).div(vestingDuration);\r\n    }\r\n  }\r\n\r\n  function getReleased(address _beneficiary) public view returns (uint256) {\r\n    return released[_beneficiary];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/WhitelistedDistributionStrategy.sol\r\n\r\n/**\r\n * @title WhitelistedDistributionStrategy\r\n * @dev This is an extension to add whitelist to a token distributionStrategy\r\n *\r\n */\r\ncontract WhitelistedDistributionStrategy is Ownable, VestedTokenDistributionStrategy {\r\n    uint256 public constant maximumBidAllowed = 500 ether;\r\n\r\n    uint256 rate_for_investor;\r\n    mapping(address=>uint) public registeredAmount;\r\n\r\n    event RegistrationStatusChanged(address target, bool isRegistered);\r\n\r\n    function WhitelistedDistributionStrategy(ERC20 _token, uint256 _rate, uint256 _whitelisted_rate)\r\n              VestedTokenDistributionStrategy(_token,_rate){\r\n        rate_for_investor = _whitelisted_rate;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes registration status of an address for participation.\r\n     * @param target Address that will be registered/deregistered.\r\n     * @param amount the amount of eht to invest for a investor bonus.\r\n     */\r\n    function changeRegistrationStatus(address target, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(amount <= maximumBidAllowed);\r\n        registeredAmount[target] = amount;\r\n        if (amount > 0){\r\n            RegistrationStatusChanged(target, true);\r\n        }else{\r\n            RegistrationStatusChanged(target, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Changes registration statuses of addresses for participation.\r\n     * @param targets Addresses that will be registered/deregistered.\r\n     * @param amounts the list of amounts of eth for every investor to invest for a investor bonus.\r\n     */\r\n    function changeRegistrationStatuses(address[] targets, uint256[] amounts)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(targets.length == amounts.length);\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            changeRegistrationStatus(targets[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev overriding calculateTokenAmount for whilelist investors\r\n     * @return bonus rate if it applies for the investor,\r\n     * otherwise, return token amount according to super class\r\n     */\r\n\r\n    function calculateTokenAmount(uint256 _weiAmount, address beneficiary) view returns (uint256 tokens) {\r\n        if (_weiAmount >= registeredAmount[beneficiary] && registeredAmount[beneficiary] > 0 ){\r\n            tokens = _weiAmount.mul(rate_for_investor);\r\n        } else{\r\n            tokens = super.calculateTokenAmount(_weiAmount, beneficiary);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev getRegisteredAmount for whilelist investors\r\n     * @return registered amount if it applies for the investor,\r\n     * otherwise, return 0 \r\n     */\r\n\r\n    function whitelistRegisteredAmount(address beneficiary) view returns (uint256 amount) {\r\n        amount = registeredAmount[beneficiary];\r\n    }\r\n}\r\n\r\n// File: contracts/EthicHubTokenDistributionStrategy.sol\r\n\r\n/**\r\n * @title EthicHubTokenDistributionStrategy\r\n * @dev Strategy that distributes a fixed number of tokens among the contributors,\r\n * with a percentage deppending in when the contribution is made, defined by periods.\r\n * It's done in two steps. First, it registers all of the contributions while the sale is active.\r\n * After the crowdsale has ended the contract compensate buyers proportionally to their contributions.\r\n * Contributors registered to the whitelist will have better rates\r\n */\r\ncontract EthicHubTokenDistributionStrategy is Ownable, WhitelistedDistributionStrategy {\r\n  \r\n  event UnsoldTokensReturned(address indexed destination, uint256 amount);\r\n\r\n\r\n  function EthicHubTokenDistributionStrategy(EthixToken _token, uint256 _rate, uint256 _rateForWhitelisted)\r\n           WhitelistedDistributionStrategy(_token, _rate, _rateForWhitelisted)\r\n           public\r\n  {\r\n\r\n  }\r\n\r\n\r\n  // Init intervals\r\n  function initIntervals() onlyOwner validateIntervals  {\r\n\r\n    //For extra security, we check the owner of the crowdsale is the same of the owner of the distribution\r\n    require(owner == crowdsale.owner());\r\n\r\n    bonusIntervals.push(BonusInterval(crowdsale.startTime() + 1 days,10));\r\n    bonusIntervals.push(BonusInterval(crowdsale.startTime() + 2 days,10));\r\n    bonusIntervals.push(BonusInterval(crowdsale.startTime() + 3 days,8));\r\n    bonusIntervals.push(BonusInterval(crowdsale.startTime() + 4 days,6));\r\n    bonusIntervals.push(BonusInterval(crowdsale.startTime() + 5 days,4));\r\n    bonusIntervals.push(BonusInterval(crowdsale.startTime() + 6 days,2));\r\n  }\r\n\r\n  function returnUnsoldTokens(address _wallet) onlyCrowdsale {\r\n    //require(crowdsale.endTime() <= now); //this made no sense\r\n    if (token.balanceOf(this) == 0) {\r\n      UnsoldTokensReturned(_wallet,0);\r\n      return;\r\n    }\r\n    \r\n    uint256 balance = token.balanceOf(this).sub(totalContributed);\r\n    require(balance > 0);\r\n\r\n    if(token.transfer(_wallet, balance)) {\r\n      UnsoldTokensReturned(_wallet, balance);\r\n    }\r\n    \r\n  } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initIntervals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIntervals\",\"outputs\":[{\"name\":\"_endPeriods\",\"type\":\"uint256[]\"},{\"name\":\"_bonuss\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingStart\",\"type\":\"uint256\"},{\"name\":\"_vestingDuration\",\"type\":\"uint256\"}],\"name\":\"configureVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTokenContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingConfigured\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"initializeDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"compensate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"whitelistRegisteredAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeRegistrationStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"returnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeRegistrationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumBidAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_rateForWhitelisted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsoldTokensReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthicHubTokenDistributionStrategy","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008bd010f5e46af9c1f5f0976ceea79bcc8410821b00000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000000000000001964","Library":"","SwarmSource":"bzzr://138286f3bc3e1d9af5e0e272efe186243c7eb986b94ec07a524e193faf84015a"}]}