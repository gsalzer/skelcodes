{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract DmlMarketplace {\r\n    // Public Variables\r\n    mapping(address => bool) public moderators;\r\n    address public token;\r\n    \r\n    // bountyFactory address\r\n    DmlBountyFactory public bountyFactory;\r\n    \r\n    \r\n    mapping(bytes32 => uint) public totals;\r\n    mapping(address => mapping(bytes32 => bool)) public hasPurchased;\r\n    \r\n    constructor() public {\r\n        moderators[msg.sender] = true;\r\n    }\r\n    \r\n    function isReady() view public returns (bool success) {\r\n        if (token == address(0) || bountyFactory == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isModerator(address modAddress) view public returns (bool success) {\r\n        return moderators[modAddress];\r\n    }\r\n\r\n    function addModerator(address newModerator) public {\r\n        require(isModerator(msg.sender));\r\n        moderators[newModerator] = true;\r\n    }\r\n\r\n    function removeModerator(address mod) public {\r\n        require(isModerator(msg.sender));\r\n        moderators[mod] = false;\r\n    }\r\n\r\n    function init (address newTokenAddress) public returns (bool success) {\r\n        require(isModerator(msg.sender));\r\n        token = newTokenAddress;\r\n        DmlBountyFactory f = new DmlBountyFactory(token);\r\n        bountyFactory = f;\r\n        return true;\r\n    }\r\n\r\n    function setBountyFactory(address factoryAddress) public {\r\n        require(isModerator(msg.sender));\r\n        DmlBountyFactory f = DmlBountyFactory(factoryAddress);\r\n        bountyFactory = f;\r\n    }\r\n    \r\n    function buy(bytes32 algoId, uint value) public returns (bool success) {\r\n        address sender = msg.sender;\r\n        \r\n        require(!hasPurchased[msg.sender][algoId]);\r\n\r\n        ERC20Interface c = ERC20Interface(token);\r\n        \r\n        require(c.transferFrom(sender, address(this), value));\r\n\r\n        hasPurchased[sender][algoId] = true;\r\n        \r\n        if (totals[algoId] < 1) {\r\n            totals[algoId] = 1;\r\n        } else {\r\n            totals[algoId]++;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferToken (address receiver, uint amount) public {\r\n        require(isModerator(msg.sender));\r\n        \r\n        ERC20Interface c = ERC20Interface(token);\r\n        require(c.transfer(receiver, amount));\r\n    }\r\n}\r\n\r\ncontract DmlBountyFactory {\r\n    address public marketplace;\r\n    address public token;\r\n    address[] public allBountyAddresses;\r\n    mapping(address => address[]) public bountyAddressByCreator;\r\n    mapping(address => address[]) public bountyAddressByParticipant;\r\n    \r\n    constructor(address tokenAddress) public {\r\n        marketplace = msg.sender;\r\n        token = tokenAddress;\r\n    }\r\n\r\n    function getAllBounties() view public returns (address[] bounties) {\r\n        return allBountyAddresses;\r\n    }\r\n\r\n    function getBountiesByCreator(address creatorAddress) view public returns (address[] bounties) {\r\n        return bountyAddressByCreator[creatorAddress];\r\n    }\r\n\r\n    function getBountiesByParticipant(address participantAddress) view public returns (address[] bounties) {\r\n        return bountyAddressByParticipant[participantAddress];\r\n    }\r\n    \r\n    function createBounty(string name, uint[] prizes) public {\r\n        address creator = msg.sender;\r\n        address newBounty = new Bounty(token, creator, name, prizes, marketplace);\r\n        allBountyAddresses.push(newBounty);\r\n        bountyAddressByCreator[msg.sender].push(newBounty);\r\n    }\r\n    \r\n    function joinBounty(address bountyAddress) public {\r\n        Bounty b = Bounty(bountyAddress);\r\n        \r\n        require(b.join(msg.sender));\r\n        \r\n        bountyAddressByParticipant[msg.sender].push(bountyAddress);\r\n    }\r\n}\r\n\r\ncontract Bounty {\r\n    // contract addresses\r\n    address public factory;\r\n    \r\n    // public constants\r\n    address public creator;\r\n    address public token;\r\n    address public marketplace;\r\n\r\n    // state variables\r\n    string public name;\r\n    uint[] public prizes;\r\n    uint public createdAt;\r\n    address[] public winners;\r\n    address[] public participants;\r\n    Status public status;\r\n    mapping(address => bool) public participantsMap;\r\n\r\n    enum Status {\r\n        Initialized,\r\n        EnrollmentStart,\r\n        EnrollmentEnd,\r\n        BountyStart,\r\n        BountyEnd,\r\n        EvaluationEnd,\r\n        Completed,\r\n        Paused\r\n    }\r\n    \r\n    constructor(\r\n        address tokenAddress,\r\n        address creatorAddress,\r\n        string initName,\r\n        uint[] initPrizes,\r\n        address mpAddress\r\n    ) public {\r\n        factory = msg.sender;\r\n        marketplace = mpAddress;\r\n        creator = creatorAddress;\r\n        token = tokenAddress;\r\n        prizes = initPrizes;\r\n        status = Status.Initialized;\r\n        name = initName;\r\n        createdAt = now;\r\n    }\r\n    \r\n    function isFunded() public view returns (bool success) {\r\n        ERC20Interface c = ERC20Interface(token);\r\n        require(getTotalPrize() <= c.balanceOf(address(this)));\r\n        return true;\r\n    }\r\n\r\n    function getData() public view returns (string retName, uint[] retPrizes, address[] retWinenrs, address[] retParticipants, Status retStatus, address retCreator, uint createdTime) {\r\n        return (name, prizes, winners, participants, status, creator, createdAt);\r\n    }\r\n    \r\n    function join(address participantAddress) public returns (bool success) {\r\n        require(msg.sender == factory);\r\n\r\n        if (status != Status.EnrollmentStart) {\r\n            return false;\r\n        }\r\n        \r\n        if (participantsMap[participantAddress] == true) {\r\n            return false;\r\n        }\r\n        \r\n        participants.push(participantAddress);\r\n        participantsMap[participantAddress] = true;\r\n        \r\n        return true;\r\n    }\r\n\r\n    function updateBounty(string newName, uint[] newPrizes) public {\r\n        require(updateName(newName));\r\n        require(updatePrizes(newPrizes));\r\n    }\r\n\r\n    function updateName(string newName) public returns (bool success) {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender) || msg.sender == creator);\r\n        name = newName;\r\n        return true;\r\n    }\r\n\r\n    function forceUpdateName(string newName) public returns (bool success) {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender));\r\n        name = newName;\r\n        return true;\r\n    }\r\n    \r\n    function updatePrizes(uint[] newPrizes) public returns (bool success) {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender) || msg.sender == creator);\r\n        require(status == Status.Initialized);\r\n        prizes = newPrizes;\r\n        return true;\r\n    }\r\n\r\n    function forceUpdatePrizes(uint[] newPrizes) public returns (bool success) {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender));\r\n        prizes = newPrizes;\r\n        return true;\r\n    }\r\n\r\n    function setStatus(Status newStatus) private returns (bool success) {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender) || msg.sender == creator);\r\n        status = newStatus;\r\n        return true;\r\n    }\r\n\r\n    function forceSetStatus(Status newStatus) public returns (bool success) {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender));\r\n        status = newStatus;\r\n        return true;\r\n    }\r\n    \r\n    function startEnrollment() public {\r\n        require(prizes.length > 0);\r\n        require(isFunded());\r\n        setStatus(Status.EnrollmentStart);\r\n    }\r\n    \r\n    function stopEnrollment() public {\r\n        require(status == Status.EnrollmentStart);\r\n        setStatus(Status.EnrollmentEnd);\r\n    }\r\n    \r\n    function startBounty() public {\r\n        require(status == Status.EnrollmentEnd);\r\n        setStatus(Status.BountyStart);\r\n    }\r\n    \r\n    function stopBounty() public {\r\n        require(status == Status.BountyStart);\r\n        setStatus(Status.BountyEnd);\r\n    }\r\n\r\n    function updateWinners(address[] newWinners) public {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender) || msg.sender == creator);\r\n        require(status == Status.BountyEnd);\r\n        require(newWinners.length == prizes.length);\r\n\r\n        for (uint i = 0; i < newWinners.length; i++) {\r\n            require(participantsMap[newWinners[i]]);\r\n        }\r\n\r\n        winners = newWinners;\r\n        setStatus(Status.EvaluationEnd);\r\n    }\r\n\r\n    function forceUpdateWinners(address[] newWinners) public {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender));\r\n\r\n        winners = newWinners;\r\n    }\r\n\r\n    function payoutWinners() public {\r\n        ERC20Interface c = ERC20Interface(token);\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n\r\n        require(dmp.isModerator(msg.sender) || msg.sender == creator);\r\n        require(isFunded());\r\n        require(winners.length == prizes.length);\r\n        require(status == Status.EvaluationEnd);\r\n\r\n        for (uint i = 0; i < prizes.length; i++) {\r\n            require(c.transfer(winners[i], prizes[i]));\r\n        }\r\n        \r\n        setStatus(Status.Completed);\r\n    }\r\n    \r\n    function getTotalPrize() public constant returns (uint total) {\r\n        uint t = 0;\r\n        for (uint i = 0; i < prizes.length; i++) {\r\n            t = t + prizes[i];\r\n        }\r\n        return t;\r\n    }\r\n\r\n    function transferToken (address receiver, uint amount) public {\r\n        DmlMarketplace dmp = DmlMarketplace(marketplace);\r\n        require(dmp.isModerator(msg.sender));\r\n        ERC20Interface c = ERC20Interface(token);\r\n        require(c.transfer(receiver, amount));\r\n    }\r\n    \r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"algoId\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"setBountyFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hasPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mod\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"totals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"modAddress\",\"type\":\"address\"}],\"name\":\"isModerator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DmlMarketplace","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f31a0feb2e801b2585a7bc0ad6c68f02ae285c34167f8c98901b97cd6cda40e"}]}