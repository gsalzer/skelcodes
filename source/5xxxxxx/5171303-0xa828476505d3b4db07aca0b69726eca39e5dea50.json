{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public contractOwner;\r\n\r\n  event ContractOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    contractOwner = msg.sender;\r\n  }\r\n\r\n  modifier onlyContractOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  function transferContractOwnership(address _newOwner) public onlyContractOwner {\r\n    require(_newOwner != address(0));\r\n    ContractOwnershipTransferred(contractOwner, _newOwner);\r\n    contractOwner = _newOwner;\r\n  }\r\n  \r\n  function payoutFromContract() public onlyContractOwner {\r\n      contractOwner.transfer(this.balance);\r\n  }  \r\n\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract DoggyEthPics is ERC721, Ownable {\r\n\r\n  event DoggyCreated(uint256 tokenId, string name, address owner);\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  string public constant NAME = \"DoggyEthPics\";\r\n  string public constant SYMBOL = \"DoggyPicsToken\";\r\n\r\n  uint256 private startingPrice = 0.01 ether;\r\n\r\n  mapping (uint256 => address) public doggyIdToOwner;\r\n\r\n  mapping (uint256 => address) public doggyIdToDivs;\r\n\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  mapping (uint256 => address) public doggyIdToApproved;\r\n\r\n  mapping (uint256 => uint256) private doggyIdToPrice;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Doggy {\r\n    string name;\r\n  }\r\n\r\n  Doggy[] private doggies;\r\n\r\n  function approve(address _to, uint256 _tokenId) public { //ERC721\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n    doggyIdToApproved[_tokenId] = _to;\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  function createDoggyToken(string _name, uint256 _price) private {\r\n    _createDoggy(_name, msg.sender, _price);\r\n  }\r\n\r\n  function create3DoggiesTokens() public onlyContractOwner {\r\n     uint256 totalDoggies = totalSupply();\r\n\t \r\n\t require (totalDoggies<1); // only 3 tokens for start\r\n\t \r\n\t for (uint8 i=1; i<=3; i++)\r\n\t\t_createDoggy(\"EthDoggy\", address(this), startingPrice);\r\n\t\r\n  }\r\n  \r\n  function getDoggy(uint256 _tokenId) public view returns (string doggyName, uint256 sellingPrice, address owner) {\r\n    Doggy storage doggy = doggies[_tokenId];\r\n    doggyName = doggy.name;\r\n    sellingPrice = doggyIdToPrice[_tokenId];\r\n    owner = doggyIdToOwner[_tokenId];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function name() public pure returns (string) { //ERC721\r\n    return NAME;\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\r\n    owner = doggyIdToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = doggyIdToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = doggyIdToPrice[_tokenId];\r\n\r\n    require(oldOwner != newOwner);\r\n    require(_addressNotNull(newOwner));\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 9), 10)); //90% to previous owner\r\n    uint256 divs_payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 1), 20)); //5% divs\r\n    \r\n\taddress divs_address = doggyIdToDivs[_tokenId];\r\n\t\r\n    // Next price will rise on 50%\r\n    doggyIdToPrice[_tokenId] = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 3), 2)); \r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //\r\n    }\r\n\r\n    // Pay winner tokenOwner if owner is not contract\r\n    if (divs_address != address(this)) {\r\n      divs_address.transfer(divs_payment); //\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, doggyIdToPrice[_tokenId], oldOwner, newOwner, doggies[_tokenId].name);\r\n\t\r\n    if (msg.value > sellingPrice) { //if excess pay\r\n\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\t\tmsg.sender.transfer(purchaseExcess);\r\n\t}\r\n  }\r\n  \r\n  function changeDoggy(uint256 _tokenId) public payable { //\r\n    require(doggyIdToPrice[_tokenId] >= 1 ether);\r\n\t\r\n    require(doggyIdToOwner[_tokenId] == msg.sender && msg.value == 20 finney); //tax 0.02eth for change\r\n\t\r\n\tuint256 newPrice1 =  uint256(SafeMath.div(SafeMath.mul(doggyIdToPrice[_tokenId], 3), 10)); //30%\r\n\tuint256 newPrice2 =  uint256(SafeMath.div(SafeMath.mul(doggyIdToPrice[_tokenId], 7), 10)); //70%\r\n    \r\n    //get two doggies within one\r\n\tcreateDoggyToken(\"EthDoggy\", newPrice1);\r\n\tcreateDoggyToken(\"EthDoggy\", newPrice2);\r\n\t\r\n\tdoggyIdToOwner[_tokenId] = address(this); //return changed doggy to doggypics\r\n\tdoggyIdToPrice[_tokenId] = 10 finney;\r\n\t \r\n  }\r\n\r\n\r\n  function symbol() public pure returns (string) { //ERC721\r\n    return SYMBOL;\r\n  }\r\n\r\n\r\n  function takeOwnership(uint256 _tokenId) public { //ERC721\r\n    address newOwner = msg.sender;\r\n    address oldOwner = doggyIdToOwner[_tokenId];\r\n\r\n    require(_addressNotNull(newOwner));\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) { //for web site view\r\n    return doggyIdToPrice[_tokenId];\r\n  }\r\n\r\n  function ALLownersANDprices(uint256 _startDoggyId) public view returns (address[] owners, address[] divs, uint256[] prices) { //for web site view\r\n\t\r\n\tuint256 totalDoggies = totalSupply();\r\n\t\r\n    if (totalDoggies == 0 || _startDoggyId >= totalDoggies) {\r\n        // Return an empty array\r\n      return (new address[](0),new address[](0),new uint256[](0));\r\n    }\r\n\t\r\n\tuint256 indexTo;\r\n\tif (totalDoggies > _startDoggyId+1000)\r\n\t\tindexTo = _startDoggyId + 1000;\r\n\telse \t\r\n\t\tindexTo = totalDoggies;\r\n\t\t\r\n    uint256 totalResultDoggies = indexTo - _startDoggyId;\t\t\r\n\t\t\r\n\taddress[] memory owners_res = new address[](totalResultDoggies);\r\n\taddress[] memory divs_res = new address[](totalResultDoggies);\r\n\tuint256[] memory prices_res = new uint256[](totalResultDoggies);\r\n\t\r\n\tfor (uint256 doggyId = _startDoggyId; doggyId < indexTo; doggyId++) {\r\n\t  owners_res[doggyId - _startDoggyId] = doggyIdToOwner[doggyId];\r\n\t  divs_res[doggyId - _startDoggyId] = doggyIdToDivs[doggyId];\r\n\t  prices_res[doggyId - _startDoggyId] = doggyIdToPrice[doggyId];\r\n\t}\r\n\t\r\n\treturn (owners_res, divs_res, prices_res);\r\n  }\r\n  \r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerToken) { //ERC721 for web site view\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalDoggies = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 doggyId;\r\n      for (doggyId = 0; doggyId <= totalDoggies; doggyId++) {\r\n        if (doggyIdToOwner[doggyId] == _owner) {\r\n          result[resultIndex] = doggyId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 total) { //ERC721\r\n    return doggies.length;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _tokenId) public { //ERC721\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n\t_transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n\r\n  /* PRIVATE FUNCTIONS */\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return doggyIdToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  function _createDoggy(string _name, address _owner, uint256 _price) private {\r\n    Doggy memory _doggy = Doggy({\r\n      name: _name\r\n    });\r\n    uint256 newDoggyId = doggies.push(_doggy) - 1;\r\n\r\n    require(newDoggyId == uint256(uint32(newDoggyId))); //check maximum limit of tokens\r\n\r\n    DoggyCreated(newDoggyId, _name, _owner);\r\n\r\n    doggyIdToPrice[newDoggyId] = _price;\r\n\tdoggyIdToDivs[newDoggyId] = _owner; //dividents address;\r\n\r\n    _transfer(address(0), _owner, newDoggyId);\r\n  }\r\n\r\n  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\r\n    return _checkedAddr == doggyIdToOwner[_tokenId];\r\n  }\r\n\r\nfunction _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    ownershipTokenCount[_to]++;\r\n    doggyIdToOwner[_tokenId] = _to;\r\n\r\n    // When creating new doggies _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete doggyIdToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doggyIdToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create3DoggiesTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"changeDoggy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doggyIdToDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerToken\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDoggy\",\"outputs\":[{\"name\":\"doggyName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doggyIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startDoggyId\",\"type\":\"uint256\"}],\"name\":\"ALLownersANDprices\",\"outputs\":[{\"name\":\"owners\",\"type\":\"address[]\"},{\"name\":\"divs\",\"type\":\"address[]\"},{\"name\":\"prices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DoggyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ContractOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DoggyEthPics","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://58954dbf5f48cd5ddc05fdadb2dcb0f7052dc4e9268c0db7fadf3e8da0e96391"}]}