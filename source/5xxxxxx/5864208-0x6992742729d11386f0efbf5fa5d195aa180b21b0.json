{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/*\r\nCapital Technologies & Research - Capital (CALL) & CapitalGAS (CALLG) - Crowdsale Smart Contract\r\nhttps://www.mycapitalco.in\r\n*/\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title CAPITAL GAS (CALLG) Token\r\n * @dev Token representing CALLG.\r\n */\r\ncontract CALLGToken is MintableToken {\r\n\tstring public name = \"CAPITAL GAS\";\r\n\tstring public symbol = \"CALLG\";\r\n\tuint8 public decimals = 18;\r\n}\r\n\r\n/**\r\n * @title CAPITAL (CALL) Token\r\n * @dev Token representing CALL.\r\n */\r\ncontract CALLToken is MintableToken {\r\n\tstring public name = \"CAPITAL\";\r\n\tstring public symbol = \"CALL\";\r\n\tuint8 public decimals = 18;\r\n}\r\n\r\ncontract TeamVault is Ownable {\r\n    using SafeMath for uint256;\r\n    ERC20 public token_call;\r\n    ERC20 public token_callg;\r\n    event TeamWithdrawn(address indexed teamWallet, uint256 token_call, uint256 token_callg);\r\n    constructor (ERC20 _token_call, ERC20 _token_callg) public {\r\n        require(_token_call != address(0));\r\n        require(_token_callg != address(0));\r\n        token_call = _token_call;\r\n        token_callg = _token_callg;\r\n    }\r\n    function () public payable {\r\n    }\r\n    function withdrawTeam(address teamWallet) public onlyOwner {\r\n        require(teamWallet != address(0));\r\n        uint call_balance = token_call.balanceOf(this);\r\n        uint callg_balance = token_callg.balanceOf(this);\r\n        token_call.transfer(teamWallet, call_balance);\r\n        token_callg.transfer(teamWallet, callg_balance);\r\n        emit TeamWithdrawn(teamWallet, call_balance, callg_balance);\r\n    }\r\n}\r\n\r\ncontract BountyVault is Ownable {\r\n    using SafeMath for uint256;\r\n    ERC20 public token_call;\r\n    ERC20 public token_callg;\r\n    event BountyWithdrawn(address indexed bountyWallet, uint256 token_call, uint256 token_callg);\r\n    constructor (ERC20 _token_call, ERC20 _token_callg) public {\r\n        require(_token_call != address(0));\r\n        require(_token_callg != address(0));\r\n        token_call = _token_call;\r\n        token_callg = _token_callg;\r\n    }\r\n    function () public payable {\r\n    }\r\n    function withdrawBounty(address bountyWallet) public onlyOwner {\r\n        require(bountyWallet != address(0));\r\n        uint call_balance = token_call.balanceOf(this);\r\n        uint callg_balance = token_callg.balanceOf(this);\r\n        token_call.transfer(bountyWallet, call_balance);\r\n        token_callg.transfer(bountyWallet, callg_balance);\r\n        emit BountyWithdrawn(bountyWallet, call_balance, callg_balance);\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  constructor(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n}\r\ncontract FiatContract {\r\n  function USD(uint _id) constant returns (uint256);\r\n}\r\ncontract CapitalTechCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  ERC20 public token_call;\r\n  ERC20 public token_callg;\r\n  FiatContract public fiat_contract;\r\n  RefundVault public vault;\r\n  TeamVault public teamVault;\r\n  BountyVault public bountyVault;\r\n  enum stages { PRIVATE_SALE, PRE_SALE, MAIN_SALE_1, MAIN_SALE_2, MAIN_SALE_3, MAIN_SALE_4, FINALIZED }\r\n  address public wallet;\r\n  uint256 public maxContributionPerAddress;\r\n  uint256 public stageStartTime;\r\n  uint256 public weiRaised;\r\n  uint256 public minInvestment;\r\n  stages public stage;\r\n  bool public is_finalized;\r\n  bool public powered_up;\r\n  bool public distributed_team;\r\n  bool public distributed_bounty;\r\n  mapping(address => uint256) public contributions;\r\n  mapping(address => uint256) public userHistory;\r\n  mapping(uint256 => uint256) public stages_duration;\r\n  uint256 public callSoftCap;\r\n  uint256 public callgSoftCap;\r\n  uint256 public callDistributed;\r\n  uint256 public callgDistributed;\r\n  uint256 public constant decimals = 18;\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount_call, uint256 amount_callg);\r\n  event TokenTransfer(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount_call, uint256 amount_callg);\r\n  event StageChanged(stages stage, stages next_stage, uint256 stageStartTime);\r\n  event GoalReached(uint256 callSoftCap, uint256 callgSoftCap);\r\n  event Finalized(uint256 callDistributed, uint256 callgDistributed);\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  constructor(address _wallet, address _fiatcontract, ERC20 _token_call, ERC20 _token_callg) public {\r\n    require(_token_call != address(0));\r\n    require(_token_callg != address(0));\r\n    require(_wallet != address(0));\r\n    require(_fiatcontract != address(0));\r\n    token_call = _token_call;\r\n    token_callg = _token_callg;\r\n    wallet = _wallet;\r\n    fiat_contract = FiatContract(_fiatcontract);\r\n    vault = new RefundVault(_wallet);\r\n    bountyVault = new BountyVault(_token_call, _token_callg);\r\n    teamVault = new TeamVault(_token_call, _token_callg);\r\n  }\r\n  function powerUpContract() public onlyOwner {\r\n    require(!powered_up);\r\n    require(!is_finalized);\r\n    stageStartTime = block.timestamp;\r\n    stage = stages.PRIVATE_SALE;\r\n    weiRaised = 0;\r\n  \tdistributeTeam();\r\n  \tdistributeBounty();\r\n\t  callDistributed = 7875000 * 10 ** decimals;\r\n    callgDistributed = 1575000000 * 10 ** decimals;\r\n    callSoftCap = 18049500 * 10 ** decimals;\r\n    callgSoftCap = 3609900000 * 10 ** decimals;\r\n    maxContributionPerAddress = 1500 ether;\r\n    minInvestment = 0.01 ether;\r\n    is_finalized = false;\r\n    powered_up = true;\r\n    stages_duration[uint256(stages.PRIVATE_SALE)] = 30 days;\r\n    stages_duration[uint256(stages.PRE_SALE)] = 30 days;\r\n    stages_duration[uint256(stages.MAIN_SALE_1)] = 7 days;\r\n    stages_duration[uint256(stages.MAIN_SALE_2)] = 7 days;\r\n    stages_duration[uint256(stages.MAIN_SALE_3)] = 7 days;\r\n    stages_duration[uint256(stages.MAIN_SALE_4)] = 7 days;\r\n  }\r\n  function distributeTeam() public onlyOwner {\r\n    require(!distributed_team);\r\n    uint256 _amount = 5250000 * 10 ** decimals;\r\n    distributed_team = true;\r\n    MintableToken(token_call).mint(teamVault, _amount);\r\n    MintableToken(token_callg).mint(teamVault, _amount.mul(200));\r\n    emit TokenTransfer(msg.sender, teamVault, _amount, _amount, _amount.mul(200));\r\n  }\r\n  function distributeBounty() public onlyOwner {\r\n    require(!distributed_bounty);\r\n    uint256 _amount = 2625000 * 10 ** decimals;\r\n    distributed_bounty = true;\r\n    MintableToken(token_call).mint(bountyVault, _amount);\r\n    MintableToken(token_callg).mint(bountyVault, _amount.mul(200));\r\n    emit TokenTransfer(msg.sender, bountyVault, _amount, _amount, _amount.mul(200));\r\n  }\r\n  function withdrawBounty(address _beneficiary) public onlyOwner {\r\n    require(distributed_bounty);\r\n    bountyVault.withdrawBounty(_beneficiary);\r\n  }\r\n  function withdrawTeam(address _beneficiary) public onlyOwner {\r\n    require(distributed_team);\r\n    teamVault.withdrawTeam(_beneficiary);\r\n  }\r\n  function getUserContribution(address _beneficiary) public view returns (uint256) {\r\n    return contributions[_beneficiary];\r\n  }\r\n  function getUserHistory(address _beneficiary) public view returns (uint256) {\r\n    return userHistory[_beneficiary];\r\n  }\r\n  function getReferrals(address[] _beneficiaries) public view returns (address[], uint256[]) {\r\n  \taddress[] memory addrs = new address[](_beneficiaries.length);\r\n  \tuint256[] memory funds = new uint256[](_beneficiaries.length);\r\n  \tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n  \t\taddrs[i] = _beneficiaries[i];\r\n  \t\tfunds[i] = getUserHistory(_beneficiaries[i]);\r\n  \t}\r\n    return (addrs, funds);\r\n  }\r\n  function getAmountForCurrentStage(uint256 _amount) public view returns(uint256) {\r\n    uint256 tokenPrice = fiat_contract.USD(0);\r\n    if(stage == stages.PRIVATE_SALE) {\r\n      tokenPrice = tokenPrice.mul(35).div(10 ** 8);\r\n    } else if(stage == stages.PRE_SALE) {\r\n      tokenPrice = tokenPrice.mul(50).div(10 ** 8);\r\n    } else if(stage == stages.MAIN_SALE_1) {\r\n      tokenPrice = tokenPrice.mul(70).div(10 ** 8);\r\n    } else if(stage == stages.MAIN_SALE_2) {\r\n      tokenPrice = tokenPrice.mul(80).div(10 ** 8);\r\n    } else if(stage == stages.MAIN_SALE_3) {\r\n      tokenPrice = tokenPrice.mul(90).div(10 ** 8);\r\n    } else if(stage == stages.MAIN_SALE_4) {\r\n      tokenPrice = tokenPrice.mul(100).div(10 ** 8);\r\n    }\r\n    return _amount.div(tokenPrice).mul(10 ** 10);\r\n  }\r\n  function _getNextStage() internal view returns (stages) {\r\n    stages next_stage;\r\n    if (stage == stages.PRIVATE_SALE) {\r\n      next_stage = stages.PRE_SALE;\r\n    } else if (stage == stages.PRE_SALE) {\r\n      next_stage = stages.MAIN_SALE_1;\r\n    } else if (stage == stages.MAIN_SALE_1) {\r\n      next_stage = stages.MAIN_SALE_2;\r\n    } else if (stage == stages.MAIN_SALE_2) {\r\n      next_stage = stages.MAIN_SALE_3;\r\n    } else if (stage == stages.MAIN_SALE_3) {\r\n      next_stage = stages.MAIN_SALE_4;\r\n    } else {\r\n      next_stage = stages.FINALIZED;\r\n    }\r\n    return next_stage;\r\n  }\r\n  function getHardCap() public view returns (uint256, uint256) {\r\n    uint256 hardcap_call;\r\n    uint256 hardcap_callg;\r\n    if (stage == stages.PRIVATE_SALE) {\r\n      hardcap_call = 10842563;\r\n      hardcap_callg = 2168512500;\r\n    } else if (stage == stages.PRE_SALE) {\r\n      hardcap_call = 18049500;\r\n      hardcap_callg = 3609900000;\r\n    } else if (stage == stages.MAIN_SALE_1) {\r\n      hardcap_call = 30937200;\r\n      hardcap_callg = 6187440000;\r\n    } else if (stage == stages.MAIN_SALE_2) {\r\n      hardcap_call = 40602975;\r\n      hardcap_callg = 8120595000;\r\n    } else if (stage == stages.MAIN_SALE_3) {\r\n      hardcap_call = 47046825;\r\n      hardcap_callg = 9409365000;\r\n    } else {\r\n      hardcap_call = 52500000;\r\n      hardcap_callg = 10500000000;\r\n    }\r\n    return (hardcap_call.mul(10 ** decimals), hardcap_callg.mul(10 ** decimals));\r\n  }\r\n  function updateStage() public {\r\n    _updateStage(0, 0);\r\n  }\r\n  function _updateStage(uint256 weiAmount, uint256 callAmount) internal {\r\n    uint256 _duration = stages_duration[uint256(stage)];\r\n    uint256 call_tokens = 0;\r\n    if (weiAmount != 0) {\r\n      call_tokens = getAmountForCurrentStage(weiAmount);\r\n    } else {\r\n      call_tokens = callAmount;\r\n    }\r\n    uint256 callg_tokens = call_tokens.mul(200);\r\n    (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\r\n    if(stageStartTime.add(_duration) <= block.timestamp || callDistributed.add(call_tokens) >= _hardcapCall || callgDistributed.add(callg_tokens) >= _hardcapCallg) {\r\n      stages next_stage = _getNextStage();\r\n      emit StageChanged(stage, next_stage, stageStartTime);\r\n      stage = next_stage;\r\n      if (next_stage != stages.FINALIZED) {\r\n        stageStartTime = block.timestamp;\r\n      } else {\r\n        finalization();\r\n      }\r\n    }\r\n  }\r\n  function buyTokens(address _beneficiary) public payable {\r\n    require(!is_finalized);\r\n    if (_beneficiary == address(0)) {\r\n      _beneficiary = msg.sender;\r\n    }\r\n    (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount > 0);\r\n    require(_beneficiary != address(0));\r\n    require(weiAmount >= minInvestment);\r\n    require(contributions[_beneficiary].add(weiAmount) <= maxContributionPerAddress);\r\n    _updateStage(weiAmount, 0);\r\n    uint256 call_tokens = getAmountForCurrentStage(weiAmount);\r\n    uint256 callg_tokens = call_tokens.mul(200);\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    callDistributed = callDistributed.add(call_tokens);\r\n    callgDistributed = callgDistributed.add(callg_tokens);\r\n    MintableToken(token_call).mint(_beneficiary, call_tokens);\r\n    MintableToken(token_callg).mint(_beneficiary, callg_tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, call_tokens, callg_tokens);\r\n    contributions[_beneficiary] = contributions[_beneficiary].add(weiAmount);\r\n    userHistory[_beneficiary] = userHistory[_beneficiary].add(call_tokens);\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n  function finalize() onlyOwner public {\r\n    stage = stages.FINALIZED;\r\n    finalization();\r\n  }\r\n  function extendPeriod(uint256 date) public onlyOwner {\r\n    stages_duration[uint256(stage)] = stages_duration[uint256(stage)].add(date);\r\n  }\r\n  function transferTokens(address _to, uint256 _amount) public onlyOwner {\r\n    require(!is_finalized);\r\n    require(_to != address(0));\r\n    require(_amount > 0);\r\n    _updateStage(0, _amount);\r\n    callDistributed = callDistributed.add(_amount);\r\n    callgDistributed = callgDistributed.add(_amount.mul(200));\r\n    if (stage == stages.FINALIZED) {\r\n      (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\r\n      require(callDistributed.add(callDistributed) <= _hardcapCall);\r\n      require(callgDistributed.add(callgDistributed) <= _hardcapCallg);\r\n    }\r\n    MintableToken(token_call).mint(_to, _amount);\r\n    MintableToken(token_callg).mint(_to, _amount.mul(200));\r\n    userHistory[_to] = userHistory[_to].add(_amount);\r\n    emit TokenTransfer(msg.sender, _to, _amount, _amount, _amount.mul(200));\r\n  }\r\n  function claimRefund() public {\r\n\t  address _beneficiary = msg.sender;\r\n    require(is_finalized);\r\n    require(!goalReached());\r\n    userHistory[_beneficiary] = 0;\r\n    vault.refund(_beneficiary);\r\n  }\r\n  function goalReached() public view returns (bool) {\r\n    if (callDistributed >= callSoftCap && callgDistributed >= callgSoftCap) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  function finishMinting() public onlyOwner {\r\n    MintableToken(token_call).finishMinting();\r\n    MintableToken(token_callg).finishMinting();\r\n  }\r\n  function finalization() internal {\r\n    require(!is_finalized);\r\n    is_finalized = true;\r\n    finishMinting();\r\n    emit Finalized(callDistributed, callgDistributed);\r\n    if (goalReached()) {\r\n      emit GoalReached(callSoftCap, callgSoftCap);\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"callgSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"extendPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getUserHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_call\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"powerUpContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powered_up\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callgDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAmountForCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_callg\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages_duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getUserContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributionPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed_bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiat_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed_team\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"getReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_fiatcontract\",\"type\":\"address\"},{\"name\":\"_token_call\",\"type\":\"address\"},{\"name\":\"_token_callg\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_call\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_callg\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_call\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_callg\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"next_stage\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"stageStartTime\",\"type\":\"uint256\"}],\"name\":\"StageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"callSoftCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"callgSoftCap\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"callDistributed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"callgDistributed\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CapitalTechCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009c45de53ec25a78d0c80a3f8d62abeb4114425780000000000000000000000008055d0504666e2b6942beb8d6014c964658ca5910000000000000000000000000c5d6e276f1b6d51e802343c0eb60ec876964f100000000000000000000000001cb3d8997bc39667e9cbb2aa70203f94ecda1422","Library":"","SwarmSource":"bzzr://673c8219709da1583185fd25e54e42828cb220efd4a561b3d2a811c91612952b"}]}