{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ImmAirDropA{\r\n    using SafeMath for uint256;\r\n    uint256 public decimals = 18;\r\n    address public owner;\r\n    address public wallet;\r\n    ERC20 public token;\r\n    mapping (address => bool) public admins;\r\n\t\r\n    modifier onlyOwner {\r\n       require(msg.sender == owner);\r\n       _;\r\n    }\r\n\t\r\n     function ImmAirDropA(ERC20 _token, address _wallet) public {\r\n        require(_token != address(0));\r\n        token = _token;\r\n        admins[msg.sender] = true;\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n    }\r\n\r\n   modifier onlyAdmin {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\tfunction addAdminWhitelist(address _userlist) public onlyOwner onlyAdmin{\r\n\t\tif(_userlist != address(0) && !admins[_userlist]){\r\n\t\t\tadmins[_userlist] = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction reClaimBalance() public onlyAdmin{\r\n\t\tuint256 taBal = token.balanceOf(this);\r\n\t\ttoken.transfer(wallet, taBal);\r\n\t}\r\n\t\r\n\tfunction adminUpdateWallet(address _wallet) public onlyAdmin{\r\n\t\trequire(_wallet != address(0));\r\n\t\twallet = _wallet;\r\n\t}\r\n\r\n\tfunction adminUpdateToken(ERC20 _token) public onlyOwner{\r\n\t\trequire(_token != address(0));\r\n\t\ttoken = _token;\r\n\t}\r\n\r\n    function signupUserWhitelist(address[] _userlist, uint256 _amttype) public onlyAdmin{\r\n    \trequire(_userlist.length > 0);\r\n    \tuint256 useamt = _amttype * (10 ** uint256(decimals));\r\n    \tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n    \t\tif(_userlist[i] != address(0)){\r\n    \t\t\ttoken.transfer(_userlist[i], useamt);\r\n    \t\t}\r\n    \t}\r\n    }\r\n\t\r\n\tfunction () external payable {\r\n\t\trevert();\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"},{\"name\":\"_amttype\",\"type\":\"uint256\"}],\"name\":\"signupUserWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"adminUpdateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"adminUpdateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reClaimBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address\"}],\"name\":\"addAdminWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ImmAirDropA","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db8646f5b487b5dd979fac618350e85018f557d4000000000000000000000000cffa6830bbe7876f94f1899db731665cdc02d115","Library":"","SwarmSource":"bzzr://81b2f4c8d2ad837eafdcc1c3abd56a6dea8efb4a406b1f121e7c1f324da3ba11"}]}