{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* You've seen all of this before. Here are the differences.\r\n\r\n// A. A quarter of your clones die when you sell ideas. Market saturation, y'see?\r\n// B. You can \"become\" Norsefire and take the dev fees, since he's involved in everything.\r\n// B. 1. The Norsefire boon is a hot potato. If someone else buys it off you, you profit.\r\n// B. 2. When Norsefire flips, we actually send him 5% of the increase. You receive 50%, the contract receives the other 45%.\r\n// C. You get your 'free' clones for 0.00232 Ether, because throwbaaaaaack.\r\n// D. Referral rates have been dropped to 5% instead of 20%. The referral target must have bought in.\r\n// E. The generation rate of ideas have been halved, as a sign of my opinion of the community at large.\r\n// F. God knows this will probably be successful in spite of myself.\r\n\r\n*/\r\n\r\ncontract CloneWars {\r\n    using SafeMath for uint;\r\n    \r\n    /* Event */\r\n    \r\n    event MarketBoost(\r\n        uint amountSent  \r\n    );\r\n    \r\n    event NorsefireSwitch(\r\n        address from,\r\n        address to,\r\n        uint price\r\n    );\r\n    \r\n    event ClonesDeployed(\r\n        address deployer,\r\n        uint clones\r\n    );\r\n    \r\n    event IdeasSold(\r\n        address seller,\r\n        uint ideas\r\n    );\r\n    \r\n    event IdeasBought(\r\n        address buyer,\r\n        uint ideas\r\n    );\r\n    \r\n    /* Constants */\r\n    \r\n    uint256 public clones_to_create_one_idea = 2 days;\r\n    uint256 public starting_clones           = 3; // Shrimp, Shrooms and Snails.\r\n    uint256        PSN                       = 10000;\r\n    uint256        PSNH                      = 5000;\r\n    address        actualNorse               = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae;\r\n    \r\n    /* Variables */\r\n    uint256 public marketIdeas;\r\n    uint256 public norsefirePrice;\r\n    bool    public initialized;\r\n    address public currentNorsefire;\r\n    mapping (address => uint256) public arrayOfClones;\r\n    mapping (address => uint256) public claimedIdeas;\r\n    mapping (address => uint256) public lastDeploy;\r\n    mapping (address => address) public referrals;\r\n    \r\n    constructor () public {\r\n        initialized      = false;\r\n        norsefirePrice   = 0.1 ether;\r\n        currentNorsefire = 0x133702E91d1B7fBcb84D4D582BA54F834f8fD1f8;\r\n    }\r\n    \r\n    function becomeNorsefire() public payable {\r\n        require(initialized);\r\n        address oldNorseAddr = currentNorsefire;\r\n        uint oldNorsePrice   = norsefirePrice;\r\n        \r\n        // Did you actually send enough?\r\n        require(msg.value >= norsefirePrice);\r\n        \r\n        uint excess          = msg.value.sub(oldNorsePrice);\r\n        norsefirePrice       = oldNorsePrice.add(oldNorsePrice.div(10));\r\n        uint diffFivePct     = (norsefirePrice.sub(oldNorsePrice)).div(20);\r\n        uint flipPrize       = diffFivePct.mul(10);\r\n        uint marketBoost     = diffFivePct.mul(9);\r\n        address _newNorse    = msg.sender;\r\n        uint    _toRefund    = (oldNorsePrice.add(flipPrize)).add(excess);\r\n        currentNorsefire     = _newNorse;\r\n        oldNorseAddr.transfer(_toRefund);\r\n        actualNorse.transfer(diffFivePct);\r\n        boostCloneMarket(marketBoost);\r\n        emit NorsefireSwitch(oldNorseAddr, _newNorse, norsefirePrice);\r\n    }\r\n    \r\n    function boostCloneMarket(uint _eth) public payable {\r\n        require(initialized);\r\n        emit MarketBoost(_eth);\r\n    }\r\n    \r\n    function deployIdeas(address ref) public{\r\n        \r\n        require(initialized);\r\n        \r\n        address _deployer = msg.sender;\r\n        \r\n        if(referrals[_deployer] == 0 && referrals[_deployer] != _deployer){\r\n            referrals[_deployer]=ref;\r\n        }\r\n        \r\n        uint256 myIdeas          = getMyIdeas();\r\n        uint256 newIdeas         = myIdeas.div(clones_to_create_one_idea);\r\n        arrayOfClones[_deployer] = arrayOfClones[_deployer].add(newIdeas);\r\n        claimedIdeas[_deployer]  = 0;\r\n        lastDeploy[_deployer]    = now;\r\n        \r\n        // Send referral ideas: dropped to 5% instead of 20% to reduce inflation.\r\n        if (arrayOfClones[referrals[_deployer]] > 0) \r\n        {\r\n            claimedIdeas[referrals[_deployer]] = claimedIdeas[referrals[_deployer]].add(myIdeas.div(20));\r\n        }\r\n        \r\n        // Boost market to minimise idea hoarding\r\n        marketIdeas = marketIdeas.add(myIdeas.div(10));\r\n        emit ClonesDeployed(_deployer, newIdeas);\r\n    }\r\n    \r\n    function sellIdeas() public {\r\n        require(initialized);\r\n        \r\n        address _caller = msg.sender;\r\n        \r\n        uint256 hasIdeas        = getMyIdeas();\r\n        uint256 ideaValue       = calculateIdeaSell(hasIdeas);\r\n        uint256 fee             = devFee(ideaValue);\r\n        // Destroy a quarter the owner's clones when selling ideas thanks to market saturation.\r\n        arrayOfClones[_caller]  = (arrayOfClones[msg.sender].div(4)).mul(3);\r\n        claimedIdeas[_caller]   = 0;\r\n        lastDeploy[_caller]     = now;\r\n        marketIdeas             = marketIdeas.add(hasIdeas);\r\n        currentNorsefire.transfer(fee);\r\n        _caller.transfer(ideaValue.sub(fee));\r\n        emit IdeasSold(_caller, hasIdeas);\r\n    }\r\n    \r\n    function buyIdeas() public payable{\r\n        require(initialized);\r\n        address _buyer       = msg.sender;\r\n        uint    _sent        = msg.value;\r\n        uint256 ideasBought  = calculateIdeaBuy(_sent, SafeMath.sub(address(this).balance,_sent));\r\n        ideasBought          = ideasBought.sub(devFee(ideasBought));\r\n        currentNorsefire.transfer(devFee(_sent));\r\n        claimedIdeas[_buyer] = claimedIdeas[_buyer].add(ideasBought);\r\n        emit IdeasBought(_buyer, ideasBought);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    \r\n    function calculateIdeaSell(uint256 _ideas) public view returns(uint256){\r\n        return calculateTrade(_ideas,marketIdeas,address(this).balance);\r\n    }\r\n    \r\n    function calculateIdeaBuy(uint256 eth,uint256 _balance) public view returns(uint256){\r\n        return calculateTrade(eth, _balance, marketIdeas);\r\n    }\r\n    function calculateIdeaBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateIdeaBuy(eth,address(this).balance);\r\n    }\r\n    \r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return amount.mul(4).div(100);\r\n    }\r\n    \r\n    function releaseTheOriginal(uint256 _ideas) public payable {\r\n        require(msg.sender  == currentNorsefire);\r\n        require(marketIdeas == 0);\r\n        initialized         = true;\r\n        marketIdeas         = _ideas;\r\n        boostCloneMarket(msg.value);\r\n    }\r\n    \r\n    function hijackClones() public payable{\r\n        require(initialized);\r\n        require(msg.value==0.00232 ether); // Throwback to the OG.\r\n        address _caller        = msg.sender;\r\n        currentNorsefire.transfer(msg.value); // The current Norsefire gets this regitration\r\n        require(arrayOfClones[_caller]==0);\r\n        lastDeploy[_caller]    = now;\r\n        arrayOfClones[_caller] = starting_clones;\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getMyClones() public view returns(uint256){\r\n        return arrayOfClones[msg.sender];\r\n    }\r\n    \r\n    function getNorsefirePrice() public view returns(uint256){\r\n        return norsefirePrice;\r\n    }\r\n    \r\n    function getMyIdeas() public view returns(uint256){\r\n        address _caller = msg.sender;\r\n        return claimedIdeas[_caller].add(getIdeasSinceLastDeploy(_caller));\r\n    }\r\n    \r\n    function getIdeasSinceLastDeploy(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(clones_to_create_one_idea, now.sub(lastDeploy[adr]));\r\n        return secondsPassed.mul(arrayOfClones[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMyIdeas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"calculateIdeaBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"arrayOfClones\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIdeas\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"deployIdeas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedIdeas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ideas\",\"type\":\"uint256\"}],\"name\":\"calculateIdeaSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellIdeas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDeploy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starting_clones\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNorsefire\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hijackClones\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"boostCloneMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNorsefirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getIdeasSinceLastDeploy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"norsefirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketIdeas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clones_to_create_one_idea\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateIdeaBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ideas\",\"type\":\"uint256\"}],\"name\":\"releaseTheOriginal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeNorsefire\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyClones\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountSent\",\"type\":\"uint256\"}],\"name\":\"MarketBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NorsefireSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"clones\",\"type\":\"uint256\"}],\"name\":\"ClonesDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ideas\",\"type\":\"uint256\"}],\"name\":\"IdeasSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ideas\",\"type\":\"uint256\"}],\"name\":\"IdeasBought\",\"type\":\"event\"}]","ContractName":"CloneWars","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2aad571b0b8204f4b22e209383ded077703bbcaa72c677b37765fa47cd26e4f5"}]}