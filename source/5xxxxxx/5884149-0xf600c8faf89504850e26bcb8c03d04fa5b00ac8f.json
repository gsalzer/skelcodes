{"status":"1","message":"OK","result":[{"SourceCode":"contract MarriageRegistry {\r\n    address [] public registeredMarriages;\r\n    event ContractCreated(address contractAddress);\r\n\r\n    function createMarriage(string _leftName, string _leftVows, string _rightName, string _rightVows, uint _date) public {\r\n        address newMarriage = new Marriage(msg.sender, _leftName, _leftVows, _rightName, _rightVows, _date);\r\n        emit ContractCreated(newMarriage);\r\n        registeredMarriages.push(newMarriage);\r\n    }\r\n\r\n    function getDeployedMarriages() public view returns (address[]) {\r\n        return registeredMarriages;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Marriage\r\n * @dev The Marriage contract provides basic storage for names and vows, and has a simple function\r\n * that lets people ring a bell to celebrate the wedding\r\n */\r\ncontract Marriage {\r\n\r\n    event weddingBells(address ringer, uint256 count);\r\n\r\n    // Owner address\r\n    address public owner;\r\n\r\n    /// Marriage Vows\r\n    string public leftName;\r\n    string public leftVows;\r\n    string public rightName;\r\n    string public rightVows;\r\n    // date public marriageDate;\r\n    uint public marriageDate;\r\n    \r\n    // Bell counter\r\n    uint256 public bellCounter;\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor sets the original `owner` of the contract to the sender account, and\r\n    * commits the marriage details and vows to the blockchain\r\n    */\r\n    constructor(address _owner, string _leftName, string _leftVows, string _rightName, string _rightVows, uint _date) public {\r\n        // TODO: Assert statements for year, month, day\r\n        owner = _owner;\r\n        leftName = _leftName;\r\n        leftVows = _leftVows;\r\n        rightName = _rightName;\r\n        rightVows = _rightVows;\r\n        marriageDate = _date; \r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) private pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev ringBell is a payable function that allows people to celebrate the couple's marriage, and\r\n    * also send Ether to the marriage contract\r\n    */\r\n    function ringBell() public payable {\r\n        bellCounter = add(1, bellCounter);\r\n        emit weddingBells(msg.sender, bellCounter);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw allows the owner of the contract to withdraw all ether collected by bell ringers\r\n    */\r\n    function collect() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw allows the owner of the contract to withdraw all ether collected by bell ringers\r\n    */\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n    * @dev returns contract metadata in one function call, rather than separate .call()s\r\n    * Not sure if this works yet\r\n    */\r\n    function getMarriageDetails() public view returns (\r\n        address, string, string, string, string, uint, uint256) {\r\n        return (\r\n            owner,\r\n            leftName,\r\n            leftVows,\r\n            rightName,\r\n            rightVows,\r\n            marriageDate,\r\n            bellCounter\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_leftName\",\"type\":\"string\"},{\"name\":\"_leftVows\",\"type\":\"string\"},{\"name\":\"_rightName\",\"type\":\"string\"},{\"name\":\"_rightVows\",\"type\":\"string\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"createMarriage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedMarriages\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredMarriages\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractCreated\",\"type\":\"event\"}]","ContractName":"MarriageRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://914e31c06d20522b4fd7b8da7f995217eb0c50256fe1ad87c97fb60cab8dfe62"}]}