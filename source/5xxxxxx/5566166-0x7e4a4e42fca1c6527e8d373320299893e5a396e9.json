{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ParallelWorld {\r\n  using SafeMath for uint256;\r\n\r\n  event TransactionOccured(uint256 indexed _itemId, uint256 _price, address indexed _oldowner, address indexed _newowner);\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  address private owner;\r\n  address public referraltokencontract;\r\n  mapping (address => bool) private admins;\r\n  IItemRegistry private itemRegistry;\r\n  bool private erc721Enabled = false;\r\n\r\n  uint256 private increaseLimit1 = 0.02 ether;\r\n  uint256 private increaseLimit2 = 0.5 ether;\r\n  uint256 private increaseLimit3 = 2.0 ether;\r\n  uint256 private increaseLimit4 = 5.0 ether;\r\n\r\n  uint256 public enddate = 1531673100; //World Cup Finals game end date/time\r\n\r\n  uint256[] private listedItems;\r\n  mapping (uint256 => address) private ownerOfItem;\r\n  mapping (uint256 => uint256) private startingPriceOfItem;\r\n  mapping (uint256 => uint256) private priceOfItem;\r\n  mapping (uint256 => address) private approvedOfItem;\r\n  mapping (uint256 => bytes32) private nameofItem;\r\n\r\n  mapping (address => bytes32) private ownerAlias;\r\n  mapping (address => bytes32) private ownerEmail;\r\n  mapping (address => bytes32) private ownerPhone;\r\n\r\n  function ParallelWorld () public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier onlyERC721() {\r\n    require(erc721Enabled);\r\n    _;\r\n  }\r\n\r\n  /* Owner */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function getOwner() public view returns (address){\r\n    return owner;\r\n  }\r\n\r\n  function setReferralTokenContract (address _referraltokencontract) onlyOwner() public {\r\n    referraltokencontract = _referraltokencontract;\r\n  }\r\n\r\n  function setItemRegistry (address _itemRegistry) onlyOwner() public {\r\n    itemRegistry = IItemRegistry(_itemRegistry);\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n\r\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\r\n  function enableERC721 () onlyOwner() public {\r\n    erc721Enabled = true;\r\n  }\r\n\r\n\r\n  //award prize to winner, and developer already took 10% from individual transactions\r\n  function awardprize(uint256 _itemId) onlyOwner() public{\r\n    uint256 winneramount;\r\n\r\n    winneramount = this.balance;\r\n\r\n    if (ownerOf(_itemId) != address(this))\r\n    {\r\n      //winner gets the prize amount minus developer cut\r\n      ownerOf(_itemId).transfer(winneramount);\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  /* Listing */\r\n  function populateFromItemRegistry (uint256[] _itemIds) onlyOwner() public {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      if (priceOfItem[_itemIds[i]] > 0 || itemRegistry.priceOf(_itemIds[i]) == 0) {\r\n        continue;\r\n      }\r\n\r\n      listItemFromRegistry(_itemIds[i]);\r\n    }\r\n  }\r\n\r\n  function listItemFromRegistry (uint256 _itemId) onlyOwner() public {\r\n    require(itemRegistry != address(0));\r\n    require(itemRegistry.ownerOf(_itemId) != address(0));\r\n    require(itemRegistry.priceOf(_itemId) > 0);\r\n    require(itemRegistry.nameOf(_itemId).length > 0 );\r\n\r\n    uint256 price = itemRegistry.priceOf(_itemId);\r\n    address itemOwner = itemRegistry.ownerOf(_itemId);\r\n    bytes32 nameofItemlocal = itemRegistry.nameOf(_itemId);\r\n    listItem(_itemId, price, itemOwner, nameofItemlocal);\r\n  }\r\n\r\n  function listMultipleItems (uint256[] _itemIds, uint256[] _price, address _owner, bytes32[] _nameofItem) onlyAdmins() external {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      listItem(_itemIds[i], _price[i], _owner, _nameofItem[i]);\r\n    }\r\n  }\r\n\r\n  function listItem (uint256 _itemId, uint256 _price, address _owner, bytes32 _nameofItem) onlyAdmins() public {\r\n    require(_price > 0);\r\n    require(priceOfItem[_itemId] == 0);\r\n    require(ownerOfItem[_itemId] == address(0));\r\n    \r\n\r\n    ownerOfItem[_itemId] = this; //set the contract as original owner of teams\r\n    priceOfItem[_itemId] = _price;\r\n    startingPriceOfItem[_itemId] = _price;\r\n    nameofItem[_itemId] = _nameofItem;\r\n    listedItems.push(_itemId);\r\n  }\r\n\r\n  function addItem(uint256 _itemId, uint256 _price) onlyAdmins() public returns (uint256 _pricereturn){\r\n    priceOfItem[_itemId] = _price;\r\n    return priceOfItem[_itemId];\r\n  }\r\n\r\n  /* Buying */\r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(210).div(100); //added 110%\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(140).div(100); //added 40%\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(128).div(100); //added 28%\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(120).div(100); //added 20%\r\n    } else {\r\n      return _price.mul(117).div(100); //added 17%\r\n    }\r\n  }\r\n\r\n  function calculatePrizeCut (uint256 _price) public view returns (uint256 _devCut) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(26).div(100); // 26%\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(14).div(100); // 14%\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(10).div(100); // 10%\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(8).div(100); // 8%\r\n    } else {\r\n      return _price.mul(7).div(100); // 7%\r\n    }\r\n  }\r\n\r\n  function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\r\n    return _price.mul(10).div(100); //10%\r\n  }\r\n\r\n\r\n  function buy (uint256 _itemId) payable public {\r\n    require(priceOf(_itemId) > 0);\r\n    require(ownerOf(_itemId) != address(0));\r\n    require(msg.value >= nextPriceOf(_itemId));\r\n    require(ownerOf(_itemId) != msg.sender);\r\n    require(!isContract(msg.sender));\r\n    require(msg.sender != address(0));\r\n    require(now < enddate); //team buying can only happen before end date\r\n\r\n    address oldOwner = ownerOf(_itemId);\r\n    address newOwner = msg.sender;\r\n    uint256 price = priceOf(_itemId);\r\n    \r\n    _transfer(oldOwner, newOwner, _itemId);\r\n    priceOfItem[_itemId] = nextPriceOf(_itemId);\r\n    \r\n    uint256 excess = msg.value.sub(priceOfItem[_itemId]);\r\n\r\n    TransactionOccured(_itemId, priceOfItem[_itemId], oldOwner, newOwner);\r\n\r\n    // Transfer payment to old owner minus the cut for the final prize.  Don't transfer funds though if old owner is this contract\r\n    if (oldOwner != address(this))\r\n    {\r\n      uint256 pricedifference = priceOfItem[_itemId].sub(price);\r\n      //send to old owner,the original amount they paid, plus 20% of the price difference between what they paid and new owner pays\r\n      uint256 oldOwnercut = priceOfItem[_itemId].sub(pricedifference.mul(80).div(100));\r\n      oldOwner.transfer(oldOwnercut);\r\n      \r\n      //send to developer, 10% of price diff\r\n      owner.transfer(calculateDevCut(pricedifference));\r\n    \r\n    }\r\n    else\r\n    {\r\n      //first transaction to purchase from contract, send 10% of tx to dev\r\n      owner.transfer(calculateDevCut(msg.value));\r\n    \r\n    }\r\n\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n    \r\n  }\r\n\r\n  /* ERC721 */\r\n  function implementsERC721() public view returns (bool _implements) {\r\n    return erc721Enabled;\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"Parallel World Cup\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"PWC\";\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return listedItems.length;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return ownerOfItem[_itemId];\r\n  }\r\n\r\n  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\r\n    uint256[] memory items = new uint256[](balanceOf(_owner));\r\n\r\n    uint256 itemCounter = 0;\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        items[itemCounter] = listedItems[i];\r\n        itemCounter += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function tokenExists (uint256 _itemId) public view returns (bool _exists) {\r\n    return priceOf(_itemId) > 0;\r\n  }\r\n\r\n  function approvedFor(uint256 _itemId) public view returns (address _approved) {\r\n    return approvedOfItem[_itemId];\r\n  }\r\n\r\n  function approve(address _to, uint256 _itemId) onlyERC721() public {\r\n    require(msg.sender != _to);\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == msg.sender);\r\n\r\n    if (_to == 0) {\r\n      if (approvedOfItem[_itemId] != 0) {\r\n        delete approvedOfItem[_itemId];\r\n        Approval(msg.sender, 0, _itemId);\r\n      }\r\n    } else {\r\n      approvedOfItem[_itemId] = _to;\r\n      Approval(msg.sender, _to, _itemId);\r\n    }\r\n  }\r\n\r\n  /* Transferring a team to another owner will entitle the new owner the profits from `buy` */\r\n  function transfer(address _to, uint256 _itemId) onlyERC721() public {\r\n    require(msg.sender == ownerOf(_itemId));\r\n    _transfer(msg.sender, _to, _itemId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _itemId) onlyERC721() public {\r\n    require(approvedFor(_itemId) == msg.sender);\r\n    _transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _itemId) internal {\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    ownerOfItem[_itemId] = _to;\r\n    approvedOfItem[_itemId] = 0;\r\n\r\n    Transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function setownerInfo(address _ownerAddress, bytes32 _ownerAlias, bytes32 _ownerEmail, bytes32 _ownerPhone) public\r\n  {\r\n      ownerAlias[_ownerAddress] = _ownerAlias;\r\n      ownerEmail[_ownerAddress] = _ownerEmail;\r\n      ownerPhone[_ownerAddress] = _ownerPhone;\r\n  }\r\n\r\n  /* Read */\r\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n    return admins[_admin];\r\n  }\r\n\r\n  function startingPriceOf (uint256 _itemId) public view returns (uint256 _startingPrice) {\r\n    return startingPriceOfItem[_itemId];\r\n  }\r\n\r\n  function priceOf (uint256 _itemId) public view returns (uint256 _price) {\r\n    return priceOfItem[_itemId];\r\n  }\r\n\r\n  function nextPriceOf (uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_itemId));\r\n  }\r\n\r\n  function nameOf (uint256 _itemId) public view returns (bytes32 _name) {\r\n    return nameofItem[_itemId];\r\n  }\r\n\r\n  function allOf (uint256 _itemId) external view returns (uint256 _itemIdreturn, address _owner, uint256 _startingPrice, uint256 _price, uint256 _nextPrice, bytes32 _name) {\r\n    return (_itemId, ownerOf(_itemId), startingPriceOf(_itemId), priceOf(_itemId), nextPriceOf(_itemId), nameOf(_itemId));\r\n  }\r\n\r\n  function getenddate () public view returns (uint256 _enddate) {\r\n    return enddate;\r\n  }\r\n\r\n  function getlistedItems() external view returns(uint256[] _listedItems){\r\n    return(listedItems);\r\n  }\r\n\r\n  function itemsForSaleLimit (uint256 _from, uint256 _take) public view returns (uint256[] _items) {\r\n    uint256[] memory items = new uint256[](_take);\r\n\r\n    for (uint256 i = 0; i < _take; i++) {\r\n      items[i] = listedItems[_from + i];\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function getprizeamount() public view returns(uint256 _prizeamount)\r\n  {\r\n    return this.balance;\r\n  }\r\n\r\n  function getownerInfo (address _owner) public view returns (bytes32 _name, bytes32 _email, bytes32 _phone) {\r\n    return (ownerAlias[_owner], ownerEmail[_owner], ownerPhone[_owner]);\r\n  }\r\n\r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n\r\n  \r\n}\r\n\r\ninterface IItemRegistry {\r\n  function itemsForSaleLimit (uint256 _from, uint256 _take) public view returns (uint256[] _items);\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner);\r\n  function priceOf (uint256 _itemId) public view returns (uint256 _price);\r\n  function nameOf (uint256 _itemId) public view returns (bytes32 _nameofItemlocal);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nameOf\",\"outputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getenddate\",\"outputs\":[{\"name\":\"_enddate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implements\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemRegistry\",\"type\":\"address\"}],\"name\":\"setItemRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_itemIdreturn\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"listItemFromRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"awardprize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getlistedItems\",\"outputs\":[{\"name\":\"_listedItems\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"_ownerAlias\",\"type\":\"bytes32\"},{\"name\":\"_ownerEmail\",\"type\":\"bytes32\"},{\"name\":\"_ownerPhone\",\"type\":\"bytes32\"}],\"name\":\"setownerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"}],\"name\":\"itemsForSaleLimit\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_nameofItem\",\"type\":\"bytes32\"}],\"name\":\"listItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculatePrizeCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_nameofItem\",\"type\":\"bytes32[]\"}],\"name\":\"listMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"}],\"name\":\"populateFromItemRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[{\"name\":\"_pricereturn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"startingPriceOf\",\"outputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getprizeamount\",\"outputs\":[{\"name\":\"_prizeamount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getownerInfo\",\"outputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_email\",\"type\":\"bytes32\"},{\"name\":\"_phone\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referraltokencontract\",\"type\":\"address\"}],\"name\":\"setReferralTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referraltokencontract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_oldowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"TransactionOccured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ParallelWorld","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5507cfead0df4f8ba1d44eee1406d0b06986976e92e305987ea71c853fae33e"}]}