{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract AddressProxy {\r\n\r\n    /**\r\n    * @dev The owner owns the address proxy and has the highest access\r\n    */\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The client is the address that has day to day access\r\n    */\r\n    address public client;\r\n\r\n    /**\r\n    * @dev If the proxy is locked, the client can't access the proxy anymore\r\n    */\r\n    bool public locked;\r\n\r\n    /**\r\n    * @param _owner the address that \"own\" the proxy and interact with it most of the time\r\n    * @param _client this is the \"master\" address and can swap the client address\r\n    */\r\n    constructor(address _owner, address _client) public {\r\n        owner = _owner;\r\n        client = _client;\r\n        locked = false;\r\n    }\r\n\r\n    modifier auth() {\r\n        require(msg.sender == owner || msg.sender == client);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n        require(locked == false);\r\n        _;\r\n    }\r\n\r\n    event ChangedOwner(address _newOwner);\r\n    event ChangedClient(address _newClient);\r\n\r\n    //make contract payable\r\n    function() payable public {}\r\n\r\n    /**\r\n    * @param _location is the target contract address\r\n    * @param _data is \"what\" you want to execute on the target contract\r\n    * @param _ether the amount of ether to send with the execution (IN WEI)\r\n    */\r\n    function exec(address _location, bytes _data, uint256 _ether) payable external auth() isUnlocked() {\r\n        require(_location.call.value(_ether)(_data));\r\n    }\r\n\r\n    /**\r\n    * @param _to the address to where you want to send ether\r\n    * @param _amount the amount of ether you want to send IN WEI\r\n    */\r\n    function sendEther(address _to, uint _amount) external auth() isUnlocked() {\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n    * @param _location is the target contract address\r\n    * @param _data is \"what\" you want to execute on the target contract\r\n    * @param _value how much ether should be transferred (in wei)\r\n    * @param _gas the amount of gas in wei\r\n    */\r\n    function execCustom(address _location, bytes _data, uint256 _value, uint256 _gas) payable external auth() isUnlocked() {\r\n        require(_location.call.value(_value).gas(_gas)(_data));\r\n    }\r\n\r\n    /**\r\n    * @dev lock's down the proxy and prevent the call of \"exec\" by ownerAddress and recoveryAddress\r\n    */\r\n    function lock() external auth() {\r\n        locked = true;\r\n    }\r\n\r\n    /**\r\n    * @dev unlock's the proxy. Can only be done by recovery address\r\n    */\r\n    function unlock() external onlyOwner() {\r\n        locked = false;\r\n    }\r\n\r\n    /**\r\n    * @dev set new owner of proxy contract and remove the old one\r\n    * @param _newOwner the new owner\r\n    */\r\n    function changeOwner(address _newOwner) external onlyOwner() {\r\n        owner = _newOwner;\r\n        emit ChangedOwner(owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the client address\r\n    * @param _newClient the new client\r\n    */\r\n    function changeClient(address _newClient) external onlyOwner() {\r\n        client = _newClient;\r\n        emit ChangedClient(client);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newClient\",\"type\":\"address\"}],\"name\":\"changeClient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_location\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"exec\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_location\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"execCustom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_client\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newClient\",\"type\":\"address\"}],\"name\":\"ChangedClient\",\"type\":\"event\"}]","ContractName":"AddressProxy","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000059f01d09fad0e47c8144bb5d4059873308b0900000000000000000000000000059f01d09fad0e47c8144bb5d4059873308b0900","Library":"","SwarmSource":"bzzr://9cf9b9fa51fce8b667c36820b64468895bec4ee79f63fd037538661cb27c4b52"}]}