{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/NetworkSettings.sol\r\n\r\n// solhint-disable-line\r\n\r\n\r\n\r\n/// @title Atonomi Network Settings\r\n/// @notice This contract controls all owner configurable variables in the network\r\ncontract NetworkSettings is Ownable {\r\n    /// @title Registration Fee\r\n    /// @notice Manufacturer pays token to register a device\r\n    /// @notice Manufacturer will recieve a share in any reputation updates for a device\r\n    uint256 public registrationFee;\r\n\r\n    /// @title Activiation Fee\r\n    /// @notice Manufacturer or Device Owner pays token to activate device\r\n    uint256 public activationFee;\r\n\r\n    /// @title Default Reputation Reward\r\n    /// @notice The default reputation reward set for new manufacturers\r\n    uint256 public defaultReputationReward;\r\n\r\n    /// @title Reputation Share for IRN Nodes\r\n    /// @notice percentage that the irn node or auditor receives (remaining goes to manufacturer)\r\n    uint256 public reputationIRNNodeShare;\r\n\r\n    /// @title Block threshold\r\n    /// @notice the number of blocks that need to pass between reputation updates to gain the full reward\r\n    uint256 public blockThreshold;\r\n\r\n    /// @notice emitted everytime the registration fee changes\r\n    /// @param _sender ethereum account of participant that made the change\r\n    /// @param _amount new fee value in ATMI tokens\r\n    event RegistrationFeeUpdated(\r\n        address indexed _sender,\r\n        uint256 _amount\r\n    );\r\n\r\n    /// @notice emitted everytime the activation fee changes\r\n    /// @param _sender ethereum account of participant that made the change\r\n    /// @param _amount new fee value in ATMI tokens\r\n    event ActivationFeeUpdated(\r\n        address indexed _sender,\r\n        uint256 _amount\r\n    );\r\n\r\n    /// @notice emitted everytime the default reputation reward changes\r\n    /// @param _sender ethereum account of participant that made the change\r\n    /// @param _amount new fee value in ATMI tokens\r\n    event DefaultReputationRewardUpdated(\r\n        address indexed _sender,\r\n        uint256 _amount\r\n    );\r\n\r\n    /// @notice emitted everytime owner changes the contributation share for reputation authors\r\n    /// @param _sender ethereum account of participant that made the change\r\n    /// @param _percentage new percentage value\r\n    event ReputationIRNNodeShareUpdated(\r\n        address indexed _sender,\r\n        uint256 _percentage\r\n    );\r\n\r\n    /// @notice emitted everytime the block threshold is changed\r\n    /// @param _sender ethereum account who made the change\r\n    /// @param _newBlockThreshold new value for all token pools\r\n    event RewardBlockThresholdChanged(\r\n        address indexed _sender,\r\n        uint256 _newBlockThreshold\r\n    );\r\n\r\n    /// @notice Constructor for Atonomi Reputation contract\r\n    /// @param _registrationFee initial registration fee on the network\r\n    /// @param _activationFee initial activation fee on the network\r\n    /// @param _defaultReputationReward initial reputation reward on the network\r\n    /// @param _reputationIRNNodeShare share that the reputation author recieves (remaining goes to manufacturer)\r\n    /// @param _blockThreshold the number of blocks that need to pass to receive the full reward\r\n    constructor(\r\n        uint256 _registrationFee,\r\n        uint256 _activationFee,\r\n        uint256 _defaultReputationReward,\r\n        uint256 _reputationIRNNodeShare,\r\n        uint256 _blockThreshold) public {\r\n        require(_activationFee > 0, \"activation fee must be greater than 0\");\r\n        require(_registrationFee > 0, \"registration fee must be greater than 0\");\r\n        require(_defaultReputationReward > 0, \"default reputation reward must be greater than 0\");\r\n        require(_reputationIRNNodeShare > 0, \"new share must be larger than zero\");\r\n        require(_reputationIRNNodeShare < 100, \"new share must be less than 100\");\r\n\r\n        activationFee = _activationFee;\r\n        registrationFee = _registrationFee;\r\n        defaultReputationReward = _defaultReputationReward;\r\n        reputationIRNNodeShare = _reputationIRNNodeShare;\r\n        blockThreshold = _blockThreshold;\r\n    }\r\n\r\n    /// @notice sets the global registration fee\r\n    /// @param _registrationFee new fee for registrations in ATMI tokens\r\n    /// @return true if successful, otherwise false\r\n    function setRegistrationFee(uint256 _registrationFee) public onlyOwner returns (bool) {\r\n        require(_registrationFee > 0, \"new registration fee must be greater than zero\");\r\n        require(_registrationFee != registrationFee, \"new registration fee must be different\");\r\n        registrationFee = _registrationFee;\r\n        emit RegistrationFeeUpdated(msg.sender, _registrationFee);\r\n        return true;\r\n    }\r\n\r\n    /// @notice sets the global activation fee\r\n    /// @param _activationFee new fee for activations in ATMI tokens\r\n    /// @return true if successful, otherwise false\r\n    function setActivationFee(uint256 _activationFee) public onlyOwner returns (bool) {\r\n        require(_activationFee > 0, \"new activation fee must be greater than zero\");\r\n        require(_activationFee != activationFee, \"new activation fee must be different\");\r\n        activationFee = _activationFee;\r\n        emit ActivationFeeUpdated(msg.sender, _activationFee);\r\n        return true;\r\n    }\r\n\r\n    /// @notice sets the default reputation reward for new manufacturers\r\n    /// @param _defaultReputationReward new reward for reputation score changes in ATMI tokens\r\n    /// @return true if successful, otherwise false\r\n    function setDefaultReputationReward(uint256 _defaultReputationReward) public onlyOwner returns (bool) {\r\n        require(_defaultReputationReward > 0, \"new reputation reward must be greater than zero\");\r\n        require(_defaultReputationReward != defaultReputationReward, \"new reputation reward must be different\");\r\n        defaultReputationReward = _defaultReputationReward;\r\n        emit DefaultReputationRewardUpdated(msg.sender, _defaultReputationReward);\r\n        return true;\r\n    }\r\n\r\n    /// @notice sets the global reputation reward share allotted to the authors and manufacturers\r\n    /// @param _reputationIRNNodeShare new percentage of the reputation reward allotted to author\r\n    /// @return true if successful, otherwise false\r\n    function setReputationIRNNodeShare(uint256 _reputationIRNNodeShare) public onlyOwner returns (bool) {\r\n        require(_reputationIRNNodeShare > 0, \"new share must be larger than zero\");\r\n        require(_reputationIRNNodeShare < 100, \"new share must be less than to 100\");\r\n        require(reputationIRNNodeShare != _reputationIRNNodeShare, \"new share must be different\");\r\n        reputationIRNNodeShare = _reputationIRNNodeShare;\r\n        emit ReputationIRNNodeShareUpdated(msg.sender, _reputationIRNNodeShare);\r\n        return true;\r\n    }\r\n\r\n    /// @notice sets the global block threshold for rewards\r\n    /// @param _newBlockThreshold new value for all token pools\r\n    /// @return true if successful, otherwise false\r\n    function setRewardBlockThreshold(uint _newBlockThreshold) public onlyOwner returns (bool) {\r\n        require(_newBlockThreshold != blockThreshold, \"must be different\");\r\n        blockThreshold = _newBlockThreshold;\r\n        emit RewardBlockThresholdChanged(msg.sender, _newBlockThreshold);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBlockThreshold\",\"type\":\"uint256\"}],\"name\":\"setRewardBlockThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultReputationReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reputationIRNNodeShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrationFee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_activationFee\",\"type\":\"uint256\"}],\"name\":\"setActivationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reputationIRNNodeShare\",\"type\":\"uint256\"}],\"name\":\"setReputationIRNNodeShare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_defaultReputationReward\",\"type\":\"uint256\"}],\"name\":\"setDefaultReputationReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registrationFee\",\"type\":\"uint256\"},{\"name\":\"_activationFee\",\"type\":\"uint256\"},{\"name\":\"_defaultReputationReward\",\"type\":\"uint256\"},{\"name\":\"_reputationIRNNodeShare\",\"type\":\"uint256\"},{\"name\":\"_blockThreshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RegistrationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ActivationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DefaultReputationRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"ReputationIRNNodeShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newBlockThreshold\",\"type\":\"uint256\"}],\"name\":\"RewardBlockThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NetworkSettings","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000001680","Library":"","SwarmSource":"bzzr://a6d695a0bac10f8e2e87b71bc668767ac5c749003e22c6083a3f7289bce02c9b"}]}