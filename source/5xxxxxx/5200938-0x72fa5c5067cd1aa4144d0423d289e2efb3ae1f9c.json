{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Owned contract with safe ownership pass.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public contractOwner;\r\n\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public pendingContractOwner;\r\n\r\n    function Owned() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner check modifier\r\n    */\r\n    modifier onlyContractOwner() {\r\n        if (contractOwner == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only owner can call it\r\n     */\r\n    function destroy() onlyContractOwner {\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Prepares ownership pass.\r\n     *\r\n     * Can only be called by current owner.\r\n     *\r\n     * @param _to address of the next owner. 0x0 is not allowed.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\r\n        if (_to  == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize ownership pass.\r\n     *\r\n     * Can only be called by pending owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function claimContractOwnership() returns(bool) {\r\n        if (pendingContractOwner != msg.sender) {\r\n            return false;\r\n        }\r\n\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    string public symbol;\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned {\r\n    /**\r\n    *  Common result code. Means everything is fine.\r\n    */\r\n    uint constant OK = 1;\r\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\r\n\r\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\r\n        for(uint i=0;i<tokens.length;i++) {\r\n            address token = tokens[i];\r\n            uint balance = ERC20Interface(token).balanceOf(this);\r\n            if(balance != 0)\r\n                ERC20Interface(token).transfer(_to,balance);\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    function checkOnlyContractOwner() internal constant returns(uint) {\r\n        if (contractOwner == msg.sender) {\r\n            return OK;\r\n        }\r\n\r\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\r\n    }\r\n}\r\n\r\n\r\n\r\n//import \"../contracts/ContractsManagerInterface.sol\";\r\n\r\n/**\r\n * @title General MultiEventsHistory user.\r\n *\r\n */\r\ncontract MultiEventsHistoryAdapter {\r\n\r\n    /**\r\n    *   @dev It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    */\r\n    function _self() constant internal returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract DelayedPaymentsEmitter is MultiEventsHistoryAdapter {\r\n        event Error(bytes32 message);\r\n\r\n        function emitError(bytes32 _message) {\r\n           Error(_message);\r\n        }\r\n}\r\n\r\ncontract Lockup6m_20180801 is Object {\r\n\r\n    uint constant TIME_LOCK_SCOPE = 51000;\r\n    uint constant TIME_LOCK_TRANSFER_ERROR = TIME_LOCK_SCOPE + 10;\r\n    uint constant TIME_LOCK_TRANSFERFROM_ERROR = TIME_LOCK_SCOPE + 11;\r\n    uint constant TIME_LOCK_BALANCE_ERROR = TIME_LOCK_SCOPE + 12;\r\n    uint constant TIME_LOCK_TIMESTAMP_ERROR = TIME_LOCK_SCOPE + 13;\r\n    uint constant TIME_LOCK_INVALID_INVOCATION = TIME_LOCK_SCOPE + 17;\r\n\r\n\r\n    // custom data structure to hold locked funds and time\r\n    struct accountData {\r\n        uint balance;\r\n        uint releaseTime;\r\n    }\r\n\r\n    // Should use interface of the emitter, but address of events history.\r\n    address public eventsHistory;\r\n\r\n    address asset;\r\n\r\n    accountData lock;\r\n\r\n    function Lockup6m_20180801(address _asset) {\r\n        asset = _asset;\r\n    }\r\n\r\n    /**\r\n     * Emits Error event with specified error message.\r\n     *\r\n     * Should only be used if no state changes happened.\r\n     *\r\n     * @param _errorCode code of an error\r\n     * @param _message error message.\r\n     */\r\n    function _error(uint _errorCode, bytes32 _message) internal returns(uint) {\r\n        DelayedPaymentsEmitter(eventsHistory).emitError(_message);\r\n        return _errorCode;\r\n    }\r\n\r\n    /**\r\n     * Sets EventsHstory contract address.\r\n     *\r\n     * Can be set only once, and only by contract owner.\r\n     *\r\n     * @param _eventsHistory MultiEventsHistory contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupEventsHistory(address _eventsHistory) returns(uint errorCode) {\r\n        errorCode = checkOnlyContractOwner();\r\n        if (errorCode != OK) {\r\n            return errorCode;\r\n        }\r\n        if (eventsHistory != 0x0 && eventsHistory != _eventsHistory) {\r\n            return TIME_LOCK_INVALID_INVOCATION;\r\n        }\r\n        eventsHistory = _eventsHistory;\r\n        return OK;\r\n    }\r\n\r\n    function payIn() onlyContractOwner returns(uint errorCode) {\r\n        // send some amount (in Wei) when calling this function.\r\n        // the amount will then be placed in a locked account\r\n        // the funds will be released once the indicated lock time in seconds\r\n        // passed and can only be retrieved by the same account which was\r\n        // depositing them - highlighting the intrinsic security model\r\n        // offered by a blockchain system like Ethereum\r\n        uint amount = ERC20Interface(asset).balanceOf(this);\r\n        if(lock.balance != 0) {\r\n            if(lock.balance != amount) {\r\n                lock.balance = amount;\r\n                return OK;\r\n            }\r\n            return TIME_LOCK_INVALID_INVOCATION;\r\n        }\r\n        if (amount == 0) {\r\n            return TIME_LOCK_BALANCE_ERROR;\r\n        }\r\n        //1533081600 => 2018-08-01\r\n        lock = accountData(amount, 1533081600);\r\n        return OK;\r\n    }\r\n\r\n    function payOut(address _getter) onlyContractOwner returns(uint errorCode) {\r\n        // check if user has funds due for pay out because lock time is over\r\n        uint amount = lock.balance;\r\n        if (now < lock.releaseTime) {\r\n            return TIME_LOCK_TIMESTAMP_ERROR;\r\n        }\r\n        if (amount == 0) {\r\n            return TIME_LOCK_BALANCE_ERROR;\r\n        }\r\n        if(!ERC20Interface(asset).transfer(_getter,amount)) {\r\n            return TIME_LOCK_TRANSFER_ERROR;\r\n        } \r\n        selfdestruct(msg.sender);     \r\n        return OK;\r\n    }\r\n\r\n    function getLockedFunds() constant returns (uint) {\r\n        return lock.balance;\r\n    }\r\n    \r\n    function getLockedFundsReleaseTime() constant returns (uint) {\r\n\t    return lock.releaseTime;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_eventsHistory\",\"type\":\"address\"}],\"name\":\"setupEventsHistory\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_getter\",\"type\":\"address\"}],\"name\":\"payOut\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedFundsReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payIn\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"Lockup6m_20180801","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000df6ef343350780bf8c3410bf062e0c015b1dd671","Library":"","SwarmSource":"bzzr://07406496f65cd286084db55d8bcd5e1bbcd63200d007566e273ea332282fd5c5"}]}