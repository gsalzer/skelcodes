{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract Genesis {\r\n\r\n  event registrationEvent(address addr, address parent);\r\n\r\n  event dieEvent(address whoDied, address whoReplaced);\r\n\r\n  event getFundsEvent(address addr, uint256 amount);\r\n\r\n  mapping (address => address[]) public children;\r\n\r\n  mapping (address => address) public parents;\r\n\r\n  mapping (address => uint256) public funds;\r\n\r\n  mapping (address => string) public nicknames;\r\n\r\n  mapping (address => uint256) public lastActivity;\r\n\r\n  uint256 public capital; //all enters\r\n\r\n  uint256 public customers; //count of customers\r\n\r\n  uint256 public constant deadLine = 50 days; //bring him child\r\n\r\n  address public genesis; //first element in genesis net\r\n\r\n  modifier onlyGenesis() {\r\n    require(msg.sender == genesis);\r\n    _;\r\n  }\r\n\r\n  modifier withFunds() {\r\n    //funds for me?\r\n    require(funds[msg.sender] > 0);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  //create first element\r\n  function Genesis(address firstChild) {\r\n\r\n    require(msg.sender != firstChild);\r\n    genesis = msg.sender;\r\n    nicknames[genesis] = 'Genesis';\r\n    parents[genesis] = 0x0;\r\n    customers++;\r\n    registerAdmin(firstChild, 'First');\r\n\r\n  }\r\n\r\n\r\n  function isNotRegistered(address addr) constant  public returns (bool){\r\n    if (parents[addr] == 0x0 && children[addr].length == 0) return true;\r\n    return false;\r\n  }\r\n\r\n  function currentPayment() public constant returns (uint payment){\r\n\r\n    if (capital > 1000 ether) {\r\n      return 2 ether;\r\n    }\r\n    else\r\n    if (capital > 200 ether) {\r\n      return 1.33 ether;\r\n    }\r\n    else\r\n    if (capital > 30 ether) {\r\n      return 0.66 ether;\r\n    }\r\n    else\r\n    if (capital > 4 ether) {\r\n      return 0.33 ether;\r\n    }\r\n    else\r\n    if (capital > 0.5 ether) {\r\n      return 0.17 ether;\r\n    }\r\n    else\r\n    if (capital > 0.1 ether) {\r\n      return 0.05 ether;\r\n    }\r\n    return 0.01 ether;\r\n\r\n  }\r\n\r\n\r\n  function registerAdmin(address admin, string name) onlyGenesis public {\r\n    require(isNotRegistered(admin));\r\n    nicknames[admin] = name;\r\n    parents[admin] = msg.sender;\r\n    lastActivity[genesis] = now;\r\n    children[genesis].push(admin);\r\n    customers++;\r\n    lastActivity[admin] = now;\r\n  }\r\n\r\n  function registerUser(address child, address parent, string nickname, uint value) private {\r\n    //parent is member (and is not genesis)\r\n    require(isNotRegistered(child));\r\n\r\n    nicknames[child] = nickname;\r\n\r\n    parents[child] = parent;\r\n\r\n    children[parent].push(child);\r\n\r\n    funds[parent] += value;\r\n\r\n    capital += value;\r\n\r\n    customers++;\r\n\r\n    registrationEvent(child, parent);\r\n\r\n    lastActivity[child] = now;\r\n  }\r\n\r\n  //user registration\r\n  function registration(address parent, string nickname) payable public {\r\n\r\n    //payment is equal\r\n    require(msg.value == currentPayment());\r\n\r\n    registerUser(msg.sender, parent, nickname, msg.value);\r\n\r\n\r\n  }\r\n\r\n  //every user\r\n  function getMine() public withFunds {\r\n\r\n    require(!isNotRegistered(msg.sender));\r\n    //is not genesis\r\n    require(msg.sender != genesis);\r\n\r\n\r\n    //for me\r\n    uint256 mine = funds[msg.sender] / 2;\r\n\r\n    funds[parents[msg.sender]] += (funds[msg.sender] - mine);\r\n    funds[msg.sender] = 0;\r\n\r\n    msg.sender.transfer(mine);\r\n\r\n    getFundsEvent(msg.sender, mine);\r\n\r\n    lastActivity[msg.sender] = now;\r\n\r\n  }\r\n\r\n  function myAvailableFunds() public constant returns (uint256 myFunds) {\r\n    return funds[msg.sender] / 2;\r\n  }\r\n\r\n\r\n  function getMineGenesis() public onlyGenesis withFunds {\r\n\r\n\r\n    //for me\r\n    uint256 mine = funds[msg.sender];\r\n\r\n    funds[msg.sender] = 0;\r\n\r\n    msg.sender.transfer(mine);\r\n\r\n    getFundsEvent(msg.sender, mine);\r\n\r\n    lastActivity[msg.sender] = now;\r\n\r\n  }\r\n\r\n  function transferGenesis(address newGen) public onlyGenesis {\r\n\r\n    //new genesis is not member\r\n    require(isNotRegistered(newGen));\r\n\r\n    for (uint i = 0; i < children[genesis].length; i++) {\r\n\r\n      children[newGen].push(children[genesis][i]);\r\n      parents[children[genesis][i]] = newGen;\r\n      children[genesis][i] = 0x0;\r\n\r\n    }\r\n\r\n    children[genesis].length = 0;\r\n\r\n    funds[newGen] = funds[genesis];\r\n    funds[genesis] = 0;\r\n\r\n    nicknames[newGen] = nicknames[genesis];\r\n    nicknames[genesis] = '';\r\n\r\n    lastActivity[newGen] = now;\r\n    lastActivity[genesis] = 0;\r\n\r\n    genesis = newGen;\r\n\r\n  }\r\n\r\n  function transferChildren(address child) public {\r\n    require(parents[child] == msg.sender);\r\n    require(now - lastActivity[child] > deadLine);\r\n    require(children[child].length > 0);\r\n\r\n    for (uint256 i = 0; i < children[child].length; i++) {\r\n\r\n      children[msg.sender].push(children[child][i]);\r\n      parents[children[child][i]] = msg.sender;\r\n      children[child][i] = 0x0;\r\n    }\r\n\r\n    children[child].length = 0;\r\n\r\n    parents[child] = 0x0;\r\n\r\n    funds[msg.sender] += funds[child];\r\n\r\n    funds[child] = 0;\r\n\r\n    //nicknames[child] = '';\r\n\r\n    //lastActivity[child] = 0;\r\n\r\n    //customers--;\r\n\r\n    dieEvent(child, msg.sender);\r\n\r\n    lastActivity[msg.sender] = now;\r\n\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"customers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"parents\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"children\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPayment\",\"outputs\":[{\"name\":\"payment\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myAvailableFunds\",\"outputs\":[{\"name\":\"myFunds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nicknames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGen\",\"type\":\"address\"}],\"name\":\"transferGenesis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capital\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNotRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMineGenesis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActivity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parent\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"child\",\"type\":\"address\"}],\"name\":\"transferChildren\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"firstChild\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"registrationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whoDied\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whoReplaced\",\"type\":\"address\"}],\"name\":\"dieEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFundsEvent\",\"type\":\"event\"}]","ContractName":"Genesis","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000023b3d7671b37ea2a270fbeba084f1668db3201f7","Library":"","SwarmSource":"bzzr://74905b7cf84ef33d4cd6e6ee201e4cfcb5624d88ed311213634d599a4ba372e8"}]}