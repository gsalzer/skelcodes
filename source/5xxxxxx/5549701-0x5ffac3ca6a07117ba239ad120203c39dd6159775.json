{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * The (GGC - Google Chain) has a fixed supply\r\n *\r\n * The owner can associate the token with a token sale contract. In that\r\n * case, the token balance is moved to the token sale contract, which\r\n * in turn can transfer its tokens to contributors to the sale.\r\n */\r\ncontract GoogleChainToken is StandardToken, BurnableToken, Ownable {\r\n\r\n    // Constants\r\n    string  public constant name = \"Google Chain\";\r\n    string  public constant symbol = \"GGC\";\r\n    uint8   public constant decimals = 18;\r\n    //string  public website = \"\"; \r\n    uint256 public constant INITIAL_SUPPLY      =  200000000 * (10 ** uint256(decimals));\r\n    uint256 public constant CROWDSALE_ALLOWANCE =  160000000 * (10 ** uint256(decimals));\r\n    uint256 public constant ADMIN_ALLOWANCE     =   40000000 * (10 ** uint256(decimals));\r\n\r\n    // Properties\r\n    uint256 public totalSupply;\r\n    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\r\n    uint256 public adminAllowance;          // the number of tokens available for the administrator\r\n    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\r\n    address public adminAddr;               // the address of a crowdsale currently selling this token\r\n    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\r\n    bool    public transferEnabled = true;  // Enables everyone to transfer tokens \r\n\r\n    // Modifiers\r\n\r\n    /**\r\n     * The listed addresses are not valid recipients of tokens.\r\n     *\r\n     * 0x0           - the zero address is not valid\r\n     * this          - the contract itself should not receive tokens\r\n     * owner         - the owner has all the initial tokens, but cannot receive any back\r\n     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\r\n     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\r\n     */\r\n    modifier validDestination(address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        require(_to != owner);\r\n        require(_to != address(adminAddr));\r\n        require(_to != address(crowdSaleAddr));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor - instantiates token supply and allocates balanace of\r\n     * to the owner (msg.sender).\r\n     */\r\n    function GoogleChainToken(address _admin) public {\r\n        // the owner is a custodian of tokens that can\r\n        // give an allowance of tokens for crowdsales\r\n        // or to the admin, but cannot itself transfer\r\n        // tokens; hence, this requirement\r\n        require(msg.sender != _admin);\r\n\r\n        totalSupply = INITIAL_SUPPLY;\r\n        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\r\n        adminAllowance = ADMIN_ALLOWANCE;\r\n\r\n        // mint all tokens\r\n        balances[msg.sender] = totalSupply.sub(adminAllowance);\r\n        Transfer(address(0x0), msg.sender, totalSupply.sub(adminAllowance));\r\n\r\n        balances[_admin] = adminAllowance;\r\n        Transfer(address(0x0), _admin, adminAllowance);\r\n\r\n        adminAddr = _admin;\r\n        approve(adminAddr, adminAllowance);\r\n    }\r\n\r\n    /**\r\n     * Associates this token with a current crowdsale, giving the crowdsale\r\n     * an allowance of tokens from the crowdsale supply. This gives the\r\n     * crowdsale the ability to call transferFrom to transfer tokens to\r\n     * whomever has purchased them.\r\n     *\r\n     * Note that if _amountForSale is 0, then it is assumed that the full\r\n     * remaining crowdsale supply is made available to the crowdsale.\r\n     *\r\n     * @param _crowdSaleAddr The address of a crowdsale contract that will sell this token\r\n     * @param _amountForSale The supply of tokens provided to the crowdsale\r\n     */\r\n    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\r\n        require(_amountForSale <= crowdSaleAllowance);\r\n\r\n        // if 0, then full available crowdsale supply is assumed\r\n        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\r\n\r\n        // Clear allowance of old, and set allowance of new\r\n        approve(crowdSaleAddr, 0);\r\n        approve(_crowdSaleAddr, amount);\r\n\r\n        crowdSaleAddr = _crowdSaleAddr;\r\n    }\r\n\r\n    /**\r\n     * Overrides ERC20 transfer function with modifier that prevents the\r\n     * ability to transfer tokens until after transfers have been enabled.\r\n     */\r\n    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Overrides ERC20 transferFrom function with modifier that prevents the\r\n     * ability to transfer tokens until after transfers have been enabled.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n        if (result) {\r\n            if (msg.sender == crowdSaleAddr)\r\n                crowdSaleAllowance = crowdSaleAllowance.sub(_value);\r\n            if (msg.sender == adminAddr)\r\n                adminAllowance = adminAllowance.sub(_value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Overrides the burn function so that it cannot be called until after\r\n     * transfers have been enabled.\r\n     *\r\n     * @param _value    The amount of tokens to burn in wei-UIWish\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(transferEnabled || msg.sender == owner);\r\n        super.burn(_value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n    }\r\n\r\n    /**\r\n     * These helper functions are exposed for changing the website dynamically   \r\n     */\r\n    //function changeWebsite(string _website) external onlyOwner {website = _website;}\r\n}\r\n\r\n\r\n/**\r\n * The GoogleChainSale smart contract is used for selling GoogleChain tokens (GGC).\r\n * It does so by converting ETH received into a quantity of\r\n * tokens that are transferred to the contributor via the ERC20-compatible\r\n * transferFrom() function.\r\n */\r\ncontract GoogleChainSale is Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // The beneficiary is the future recipient of the funds\r\n    address public beneficiary;\r\n\r\n    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\r\n    uint public fundingGoal;\r\n    uint public fundingCap;\r\n    uint public minContribution;\r\n    bool public fundingGoalReached = false;\r\n    bool public fundingCapReached = false;\r\n    bool public saleClosed = false;\r\n\r\n    // Time period of sale (UNIX timestamps)\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    // Keeps track of the amount of wei raised\r\n    uint public amountRaised;\r\n\r\n    // Refund amount, should it be required\r\n    uint public refundAmount;\r\n\r\n    // The ratio of GGC to Ether\r\n    uint public rate = 10000;\r\n    uint public constant LOW_RANGE_RATE = 1;\r\n    uint public constant HIGH_RANGE_RATE = 30000;\r\n\r\n    // prevent certain functions from being recursively called\r\n    bool private rentrancy_lock = false;\r\n\r\n    // The token being sold\r\n    GoogleChainToken public tokenReward;\r\n\r\n    // A map that tracks the amount of wei contributed by address\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => uint256) public contributions;\r\n    //uint public maxUserContribution = 20 * 1 ether;\r\n    //mapping(address => uint256) public caps;\r\n\r\n    // Events\r\n    event GoalReached(address _beneficiary, uint _amountRaised);\r\n    event CapReached(address _beneficiary, uint _amountRaised);\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n\r\n    // Modifiers\r\n    modifier beforeDeadline()   { require (currentTime() < endTime); _; }\r\n    modifier afterDeadline()    { require (currentTime() >= endTime); _; }\r\n    modifier afterStartTime()    { require (currentTime() >= startTime); _; }\r\n\r\n    modifier saleNotClosed()    { require (!saleClosed); _; }\r\n\r\n    modifier nonReentrant() {\r\n        require(!rentrancy_lock);\r\n        rentrancy_lock = true;\r\n        _;\r\n        rentrancy_lock = false;\r\n    }\r\n\r\n    /**\r\n     * Constructor for a crowdsale of GoogleChain tokens.\r\n     *\r\n     * @param ifSuccessfulSendTo            the beneficiary of the fund\r\n     * @param fundingGoalInEthers           the minimum goal to be reached\r\n     * @param fundingCapInEthers            the cap (maximum) size of the fund\r\n     * @param minimumContributionInWei      minimum contribution (in wei)\r\n     * @param start                         the start time (UNIX timestamp)\r\n     * @param end                           the end time (UNIX timestamp)\r\n     * @param rateGGCToEther                 the conversion rate from GGC to Ether\r\n     * @param addressOfTokenUsedAsReward    address of the token being sold\r\n     */\r\n    function GoogleChainSale(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint fundingCapInEthers,\r\n        uint minimumContributionInWei,\r\n        uint start,\r\n        uint end,\r\n        uint rateGGCToEther,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\r\n        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\r\n        require(fundingGoalInEthers <= fundingCapInEthers);\r\n        require(end > 0);\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        fundingCap = fundingCapInEthers * 1 ether;\r\n        minContribution = minimumContributionInWei;\r\n        startTime = start;\r\n        endTime = end; // TODO double check\r\n        setRate(rateGGCToEther);\r\n        tokenReward = GoogleChainToken(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * This fallback function is called whenever Ether is sent to the\r\n     * smart contract. It can only be executed when the crowdsale is\r\n     * not paused, not closed, and before the deadline has been reached.\r\n     *\r\n     * This function will update state variables for whether or not the\r\n     * funding goal or cap have been reached. It also ensures that the\r\n     * tokens are transferred to the sender, and that the correct\r\n     * number of tokens are sent according to the current rate.\r\n     */\r\n    function () public payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\r\n        require(msg.value >= minContribution);\r\n        //require(contributions[msg.sender].add(msg.value) <= maxUserContribution);\r\n\r\n        // Update the sender's balance of wei contributed and the amount raised\r\n        uint amount = msg.value;\r\n        uint currentBalance = balanceOf[msg.sender];\r\n        balanceOf[msg.sender] = currentBalance.add(amount);\r\n        amountRaised = amountRaised.add(amount);\r\n\r\n        // Compute the number of tokens to be rewarded to the sender\r\n        // Note: it's important for this calculation that both wei\r\n        // and GGC have the same number of decimal places (18)\r\n        uint numTokens = amount.mul(rate);\r\n\r\n        // Transfer the tokens from the crowdsale supply to the sender\r\n        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\r\n            FundTransfer(msg.sender, amount, true);\r\n            contributions[msg.sender] = contributions[msg.sender].add(amount);\r\n            // Following code is to automatically transfer ETH to beneficiary\r\n            uint balanceToSend = this.balance;\r\n            beneficiary.transfer(balanceToSend);\r\n            FundTransfer(beneficiary, balanceToSend, false);\r\n            // Check if the funding goal or cap have been reached\r\n            // TODO check impact on gas cost\r\n            checkFundingGoal();\r\n            checkFundingCap();\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The owner can terminate the crowdsale at any time.\r\n     */\r\n    function terminate() external onlyOwner {\r\n        saleClosed = true;\r\n    }\r\n\r\n    /**\r\n     * The owner can update the rate (GGC to ETH).\r\n     *\r\n     * @param _rate  the new rate for converting GGC to ETH\r\n     */\r\n    function setRate(uint _rate) public onlyOwner {\r\n        require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\r\n        rate = _rate;\r\n    }\r\n\r\n    /**\r\n     * The owner can allocate the specified amount of tokens from the\r\n     * crowdsale allowance to the recipient (_to).\r\n     *\r\n     * NOTE: be extremely careful to get the amounts correct, which\r\n     * are in units of wei and mini-GGC. Every digit counts.\r\n     *\r\n     * @param _to            the recipient of the tokens\r\n     * @param amountWei     the amount contributed in wei\r\n     * @param amountMiniGGC the amount of tokens transferred in mini-GGC (18 decimals)\r\n     */\r\n    function ownerAllocateTokens(address _to, uint amountWei, uint amountMiniGGC) external\r\n            onlyOwner nonReentrant\r\n    {\r\n        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniGGC)) {\r\n            revert();\r\n        }\r\n        balanceOf[_to] = balanceOf[_to].add(amountWei);\r\n        amountRaised = amountRaised.add(amountWei);\r\n        FundTransfer(_to, amountWei, true);\r\n        checkFundingGoal();\r\n        checkFundingCap();\r\n    }\r\n\r\n    /**\r\n     * The owner can call this function to withdraw the funds that\r\n     * have been sent to this contract for the crowdsale subject to\r\n     * the funding goal having been reached. The funds will be sent\r\n     * to the beneficiary specified when the crowdsale was created.\r\n     */\r\n    function ownerSafeWithdrawal() external onlyOwner nonReentrant {\r\n        require(fundingGoalReached);\r\n        uint balanceToSend = this.balance;\r\n        beneficiary.transfer(balanceToSend);\r\n        FundTransfer(beneficiary, balanceToSend, false);\r\n    }\r\n\r\n    /**\r\n     * The owner can unlock the fund with this function. The use-\r\n     * case for this is when the owner decides after the deadline\r\n     * to allow contributors to be refunded their contributions.\r\n     * Note that the fund would be automatically unlocked if the\r\n     * minimum funding goal were not reached.\r\n     */\r\n    function ownerUnlockFund() external afterDeadline onlyOwner {\r\n        fundingGoalReached = false;\r\n    }\r\n\r\n    /**\r\n     * This function permits anybody to withdraw the funds they have\r\n     * contributed if and only if the deadline has passed and the\r\n     * funding goal was not reached.\r\n     */\r\n    function safeWithdrawal() external afterDeadline nonReentrant {\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                msg.sender.transfer(amount);\r\n                FundTransfer(msg.sender, amount, false);\r\n                refundAmount = refundAmount.add(amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the funding goal has been reached. If it has, then\r\n     * the GoalReached event is triggered.\r\n     */\r\n    function checkFundingGoal() internal {\r\n        if (!fundingGoalReached) {\r\n            if (amountRaised >= fundingGoal) {\r\n                fundingGoalReached = true;\r\n                GoalReached(beneficiary, amountRaised);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the funding cap has been reached. If it has, then\r\n     * the CapReached event is triggered.\r\n     */\r\n    function checkFundingCap() internal {\r\n        if (!fundingCapReached) {\r\n            if (amountRaised >= fundingCap) {\r\n                fundingCapReached = true;\r\n                saleClosed = true;\r\n                CapReached(beneficiary, amountRaised);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current time.\r\n     * Useful to abstract calls to \"now\" for tests.\r\n    */\r\n    function currentTime() public constant returns (uint _currentTime) {\r\n        return now;\r\n    }\r\n\r\n\r\n    /**\r\n     * Given an amount in GGC, this method returns the equivalent amount\r\n     * in mini-GGC.\r\n     *\r\n     * @param amount    an amount expressed in units of GGC\r\n     */\r\n    function convertToMiniGGC(uint amount) internal constant returns (uint) {\r\n        return amount * (10 ** uint(tokenReward.decimals()));\r\n    }\r\n\r\n    /**\r\n     * These helper functions are exposed for changing the start and end time dynamically   \r\n     */\r\n    function changeStartTime(uint256 _startTime) external onlyOwner {startTime = _startTime;}\r\n    function changeEndTime(uint256 _endTime) external onlyOwner {endTime = _endTime;}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerUnlockFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amountWei\",\"type\":\"uint256\"},{\"name\":\"amountMiniGGC\",\"type\":\"uint256\"}],\"name\":\"ownerAllocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerSafeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOW_RANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGH_RANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"fundingCapInEthers\",\"type\":\"uint256\"},{\"name\":\"minimumContributionInWei\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"rateGGCToEther\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GoogleChainSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f1c26ab70d0303dc62e17b4f96b862f21827f06900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e0ff000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000005ae7ae00fffffffffffffffffffffffffffffffffffffffffffffffffffffffff485058000000000000000000000000000000000000000000000000000000000000027100000000000000000000000003c1999d19401469693cb8d8acd14fd3aec34dd15","Library":"","SwarmSource":"bzzr://ef5779dec1db9e2482a35fe8d78046df46c9dec92d0934327413032070490fbf"}]}