{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/// @title A base contract to control ownership\r\n/// @author cuilichen\r\ncontract OwnerBase {\r\n\r\n    // The addresses of the accounts that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n    \r\n    /// constructor\r\n    function OwnerBase() public {\r\n       ceoAddress = msg.sender;\r\n       cfoAddress = msg.sender;\r\n       cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n    \r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new COO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n    \r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCOO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCOO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\t\r\n\t\r\n\t/// @dev check wether target address is a contract or not\r\n    function isNormalUser(address addr) internal view returns (bool) {\r\n\t\tif (addr == address(0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n        uint size = 0;\r\n        assembly { \r\n\t\t    size := extcodesize(addr) \r\n\t\t} \r\n        return size == 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n \r\n}\r\n\r\n\r\n\r\n/// @title Interface of contract for partner\r\n/// @author cuilichen\r\ncontract PartnerHolder {\r\n    //\r\n    function isHolder() public pure returns (bool);\r\n    \r\n    // Required methods\r\n    function bonusAll() payable public ;\r\n\t\r\n\t\r\n\tfunction bonusOne(uint id) payable public ;\r\n    \r\n}\r\n\r\n/// @title Contract for partner. Holds all partner structs, events and base variables.\r\n/// @author cuilichen\r\ncontract Partners is OwnerBase, SafeMath, PartnerHolder {\r\n\r\n    event Bought(uint16 id, address newOwner, uint price, address oldOwner);\r\n    \r\n\t// data of Casino\r\n    struct Casino {\r\n\t\tuint16 id;\r\n\t\tuint16 star;\r\n\t\taddress owner;\r\n\t\tuint price;\r\n\t\tstring name;\r\n\t\tstring desc;\r\n    }\r\n\t\r\n\t// address to balance.\r\n\tmapping(address => uint) public balances;\r\n\t\r\n\t\r\n\tmapping(uint => Casino) public allCasinos; // key is id\r\n\t\r\n\t// all ids of casinos\r\n\tuint[] public ids;\r\n\t\r\n\t\r\n\tuint public masterCut = 200;\r\n\t\r\n\t// master balance;\r\n\tuint public masterHas = 0;\r\n\t\r\n\t\r\n\tfunction Partners() public {\r\n\t\tceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        cfoAddress = msg.sender;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction initCasino() public onlyCOO {\r\n\t\taddCasino(5, 100000000000000000, 'Las Vegas Bellagio Casino', 'Five star Casino');\r\n\t\taddCasino(4, 70000000000000000, 'London Ritz Club Casino', 'Four star Casino');\r\n\t\taddCasino(4, 70000000000000000, 'Las Vegas Metropolitan Casino', 'Four star Casino');\r\n\t\taddCasino(4, 70000000000000000, 'Argentina Park Hyatt Mendoza Casino', 'Four star Casino');\r\n\t\taddCasino(3, 30000000000000000, 'Canada Golf Thalasso & Casino Resort', 'Three star Casino');\r\n\t\taddCasino(3, 30000000000000000, 'Monaco Monte-Carlo Casino', 'Three star Casino');\r\n\t\taddCasino(3, 30000000000000000, 'Las Vegas Flamingo Casino', 'Three star Casino');\r\n\t\taddCasino(3, 30000000000000000, 'New Jersey Bogota Casino', 'Three star Casino');\r\n\t\taddCasino(3, 30000000000000000, 'Atlantic City Taj Mahal Casino', 'Three star Casino');\r\n\t\taddCasino(2, 20000000000000000, 'Dubai Atlantis Casino', 'Two star Casino');\r\n\t\taddCasino(2, 20000000000000000, 'Germany Baden-Baden Casino', 'Two star Casino');\r\n\t\taddCasino(2, 20000000000000000, 'South Korea Paradise Walker Hill Casino', 'Two star Casino');\r\n\t\taddCasino(2, 20000000000000000, 'Las Vegas Paris Casino', 'Two star Casino');\r\n\t\taddCasino(2, 20000000000000000, 'Las Vegas Caesars Palace Casino', 'Two star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Las Vegas Riviera Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Las Vegas Mandalay Bay Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Las Vegas MGM Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Las Vegas New York Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Las Vegas  Renaissance Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Las Vegas Venetian Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Melbourne Crown Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Macao Grand Lisb Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Singapore Marina Bay Sands Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Malaysia Cloud Top Mountain Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'South Africa Sun City Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Vietnam Smear Peninsula Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Macao Sands Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Bahamas Paradise Island Casino', 'One star Casino');\r\n\t\taddCasino(1, 10000000000000000, 'Philippines Manila Casinos', 'One star Casino');\r\n\t}\r\n\t///\r\n\tfunction () payable public {\r\n\t\t//receive ether.\r\n\t\tmasterHas = safeAdd(masterHas, msg.value);\r\n\t}\r\n\t\r\n\t/// @dev add a new casino \r\n\tfunction addCasino(uint16 _star, uint _price, string _name, string _desc) internal \r\n\t{\r\n\t\tuint newID = ids.length + 1;\r\n\t\tCasino memory item = Casino({\r\n\t\t\tid:uint16(newID),\r\n\t\t\tstar:_star,\r\n\t\t\towner:cooAddress,\r\n\t\t\tprice:_price,\r\n\t\t\tname:_name,\r\n\t\t\tdesc:_desc\r\n\t\t});\r\n\t\tallCasinos[newID] = item;\r\n\t\tids.push(newID);\r\n\t}\r\n\t\r\n\t/// @dev set casino name and description by coo\r\n\tfunction setCasinoName(uint16 id, string _name, string _desc) public onlyCOO \r\n\t{\r\n\t\tCasino storage item = allCasinos[id];\r\n\t\trequire(item.id > 0);\r\n\t\titem.name = _name;\r\n\t\titem.desc = _desc;\r\n\t}\r\n\t\r\n\t/// @dev check wether the address is a casino owner.\r\n\tfunction isOwner( address addr) public view returns (uint16) \r\n\t{\r\n\t\tfor(uint16 id = 1; id <= 29; id++) {\r\n\t\t\tCasino storage item = allCasinos[id];\r\n\t\t\tif ( item.owner == addr) {\r\n\t\t\t\treturn id;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\t/// @dev identify this contract is a partner holder.\r\n\tfunction isHolder() public pure returns (bool) {\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\t/// @dev give bonus to all partners, and the owners can withdraw it soon.\r\n\tfunction bonusAll() payable public {\r\n\t\tuint total = msg.value;\r\n\t\tuint remain = total;\r\n\t\tif (total > 0) {\r\n\t\t\tfor (uint i = 0; i < ids.length; i++) {\r\n\t\t\t\tuint id = ids[i];\r\n\t\t\t\tCasino storage item = allCasinos[id];\r\n\t\t\t\tuint fund = 0;\r\n\t\t\t\tif (item.star == 5) {\r\n\t\t\t\t\tfund = safeDiv(safeMul(total, 2000), 10000);\r\n\t\t\t\t} else if (item.star == 4) {\r\n\t\t\t\t\tfund = safeDiv(safeMul(total, 1000), 10000);\r\n\t\t\t\t} else if (item.star == 3) {\r\n\t\t\t\t\tfund = safeDiv(safeMul(total, 500), 10000);\r\n\t\t\t\t} else if (item.star == 2) {\r\n\t\t\t\t\tfund = safeDiv(safeMul(total, 200), 10000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfund = safeDiv(safeMul(total, 100), 10000);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (remain >= fund) {\r\n\t\t\t\t\tremain -= fund;\r\n\t\t\t\t\taddress owner = item.owner;\r\n\t\t\t\t\tif (owner != address(0)) {\r\n\t\t\t\t\t\tuint oldVal = balances[owner];\r\n\t\t\t\t\t\tbalances[owner] = safeAdd(oldVal, fund);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/// @dev bonus to casino which has the specific id\r\n\tfunction bonusOne(uint id) payable public {\r\n\t\tCasino storage item = allCasinos[id];\r\n\t\taddress owner = item.owner;\r\n\t\tif (owner != address(0)) {\r\n\t\t\tuint oldVal = balances[owner];\r\n\t\t\tbalances[owner] = safeAdd(oldVal, msg.value);\r\n\t\t} else {\r\n\t\t\tmasterHas = safeAdd(masterHas, msg.value);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/// @dev user withdraw, \r\n\tfunction userWithdraw() public {\r\n\t\tuint fund = balances[msg.sender];\r\n\t\trequire (fund > 0);\r\n\t\tdelete balances[msg.sender];\r\n\t\tmsg.sender.transfer(fund);\r\n\t}\r\n\t\r\n\t\r\n    \r\n    /// @dev buy a casino without any agreement.\r\n    function buy(uint16 _id) payable public returns (bool) {\r\n\t\tCasino storage item = allCasinos[_id];\r\n\t\tuint oldPrice = item.price;\r\n\t\trequire(oldPrice > 0);\r\n\t\trequire(msg.value >= oldPrice);\r\n\t\t\r\n\t\taddress oldOwner = item.owner;\r\n\t\taddress newOwner = msg.sender;\r\n\t\trequire(oldOwner != address(0));\r\n\t\trequire(oldOwner != newOwner);\r\n\t\trequire(isNormalUser(newOwner));\r\n\t\t\r\n\t\titem.price = calcNextPrice(oldPrice);\r\n\t\titem.owner = newOwner;\r\n\t\temit Bought(_id, newOwner, oldPrice, oldOwner);\r\n\t\t\r\n\t\t// Transfer payment to old owner minus the developer's cut.\r\n\t\tuint256 devCut = safeDiv(safeMul(oldPrice, masterCut), 10000);\r\n\t\toldOwner.transfer(safeSub(oldPrice, devCut));\r\n\t\tmasterHas = safeAdd(masterHas, devCut);\r\n\t\t\r\n\t\tuint256 excess = msg.value - oldPrice;\r\n\t\tif (excess > 0) {\r\n\t\t\tnewOwner.transfer(excess);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t/// @dev calculate next price \r\n\tfunction calcNextPrice (uint _price) public pure returns (uint nextPrice) {\r\n\t\tif (_price >= 5 ether ) {\r\n\t\t\treturn safeDiv(safeMul(_price, 110), 100);\r\n\t\t} else if (_price >= 2 ether ) {\r\n\t\t\treturn safeDiv(safeMul(_price, 120), 100);\r\n\t\t} else if (_price >= 500 finney ) {\r\n\t\t\treturn safeDiv(safeMul(_price, 130), 100);\r\n\t\t} else if (_price >= 20 finney ) {\r\n\t\t\treturn safeDiv(safeMul(_price, 140), 100);\r\n\t\t} else {\r\n\t\t\treturn safeDiv(safeMul(_price, 200), 100);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t// @dev Allows the CFO to capture the balance.\r\n    function cfoWithdraw() external onlyCFO {\r\n\t\tcfoAddress.transfer(masterHas);\r\n\t\tmasterHas = 0;\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t/// @dev cfo withdraw dead ether. \r\n    function withdrawDeadFund( address addr) external onlyCFO {\r\n        uint fund = balances[addr];\r\n        require (fund > 0);\r\n        delete balances[addr];\r\n        cfoAddress.transfer(fund);\r\n    }\r\n\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterHas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawDeadFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"bonusOne\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"setCasinoName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bonusAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cfoWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initCasino\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calcNextPrice\",\"outputs\":[{\"name\":\"nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCasinos\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint16\"},{\"name\":\"star\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"Bought\",\"type\":\"event\"}]","ContractName":"Partners","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f22b18a54b0cfe2e8f6a56f3f1af72863cb3060a45815600a30b143244440d12"}]}