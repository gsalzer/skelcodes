{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations that are safe for uint256 against overflow and negative values\r\n * @dev https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Moderated\r\n * @dev restricts execution of 'onlyModerator' modified functions to the contract moderator\r\n * @dev restricts execution of 'ifUnrestricted' modified functions to when unrestricted\r\n *      boolean state is true\r\n * @dev allows for the extraction of ether or other ERC20 tokens mistakenly sent to this address\r\n */\r\ncontract Moderated {\r\n\r\n    address public moderator;\r\n\r\n    bool public unrestricted;\r\n\r\n    modifier onlyModerator {\r\n        require(msg.sender == moderator);\r\n        _;\r\n    }\r\n\r\n    modifier ifUnrestricted {\r\n        require(unrestricted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    function Moderated() public {\r\n        moderator = msg.sender;\r\n        unrestricted = true;\r\n    }\r\n\r\n    function reassignModerator(address newModerator) public onlyModerator {\r\n        moderator = newModerator;\r\n    }\r\n\r\n    function restrict() public onlyModerator {\r\n        unrestricted = false;\r\n    }\r\n\r\n    function unrestrict() public onlyModerator {\r\n        unrestricted = true;\r\n    }\r\n\r\n    /// This method can be used to extract tokens mistakenly sent to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    function extract(address _token) public returns (bool) {\r\n        require(_token != address(0x0));\r\n        Token token = Token(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        return token.transfer(moderator, balance);\r\n    }\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_addr) }\r\n        return (size > 0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n// @dev Assign moderation of contract to CrowdSale\r\n\r\ncontract Touch is Moderated {\r\n\tusing SafeMath for uint256;\r\n\r\n\t\tstring public name = \"Touch. Token\";\r\n\t\tstring public symbol = \"TST\";\r\n\t\tuint8 public decimals = 18;\r\n\r\n        uint256 public maximumTokenIssue = 1000000000 * 10**18;\r\n\r\n\t\tmapping(address => uint256) internal balances;\r\n\t\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t\tuint256 internal totalSupply_;\r\n\r\n\t\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\t\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t\t/**\r\n\t\t* @dev total number of tokens in existence\r\n\t\t*/\r\n\t\tfunction totalSupply() public view returns (uint256) {\r\n\t\t\treturn totalSupply_;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev transfer token for a specified address\r\n\t\t* @param _to The address to transfer to.\r\n\t\t* @param _value The amount to be transferred.\r\n\t\t*/\r\n\t\tfunction transfer(address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\r\n\t\t    return _transfer(msg.sender, _to, _value);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Transfer tokens from one address to another\r\n\t\t* @param _from address The address which you want to send tokens from\r\n\t\t* @param _to address The address which you want to transfer to\r\n\t\t* @param _value uint256 the amount of tokens to be transferred\r\n\t\t*/\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(3) returns (bool) {\r\n\t\t    require(_value <= allowed[_from][msg.sender]);\r\n\t\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\t    return _transfer(_from, _to, _value);\r\n\t\t}\r\n\r\n\t\tfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n\t\t\t// Do not allow transfers to 0x0 or to this contract\r\n\t\t\trequire(_to != address(0x0) && _to != address(this));\r\n\t\t\t// Do not allow transfer of value greater than sender's current balance\r\n\t\t\trequire(_value <= balances[_from]);\r\n\t\t\t// Update balance of sending address\r\n\t\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\t\t// Update balance of receiving address\r\n\t\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\t\t// An event to make the transfer easy to find on the blockchain\r\n\t\t\tTransfer(_from, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Gets the balance of the specified address.\r\n\t\t* @param _owner The address to query the the balance of.\r\n\t\t* @return An uint256 representing the amount owned by the passed address.\r\n\t\t*/\r\n\t\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\t\treturn balances[_owner];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t\t*\r\n\t\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _value The amount of tokens to be spent.\r\n\t\t*/\r\n\t\tfunction approve(address _spender, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool sucess) {\r\n\t\t\t// Can only approve when value has not already been set or is zero\r\n\t\t\trequire(allowed[msg.sender][_spender] == 0 || _value == 0);\r\n\t\t\tallowed[msg.sender][_spender] = _value;\r\n\t\t\tApproval(msg.sender, _spender, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t\t* @param _owner address The address which owns the funds.\r\n\t\t* @param _spender address The address which will spend the funds.\r\n\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t\t*/\r\n\t\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t\t*\r\n\t\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t\t* the first transaction is mined)\r\n\t\t* From MonolithDAO Token.sol\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _addedValue The amount of tokens to increase the allowance by.\r\n\t\t*/\r\n\t\tfunction increaseApproval(address _spender, uint256 _addedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\r\n\t\t\trequire(_addedValue > 0);\r\n\t\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t\t*\r\n\t\t* approve should be called when allowed[_spender] == 0. To decrement\r\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t\t* the first transaction is mined)\r\n\t\t* From MonolithDAO Token.sol\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t\t*/\r\n\t\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\r\n\t\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t\t\trequire(_subtractedValue > 0);\r\n\t\t\tif (_subtractedValue > oldValue) {\r\n\t\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t\t}\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* @dev Function to mint tokens\r\n\t\t* @param _to The address that will receive the minted tokens.\r\n\t\t* @param _amount The amount of tokens to mint.\r\n\t\t* @return A boolean that indicates if the operation was successful.\r\n\t\t*/\r\n\t\tfunction generateTokens(address _to, uint _amount) internal returns (bool) {\r\n\t\t\ttotalSupply_ = totalSupply_.add(_amount);\r\n\t\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\t\tTransfer(address(0x0), _to, _amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t/**\r\n\t\t* @dev fallback function - reverts transaction\r\n\t\t*/\r\n    \tfunction () external payable {\r\n    \t    revert();\r\n    \t}\r\n\r\n    \tfunction Touch () public {\r\n    \t\tgenerateTokens(msg.sender, maximumTokenIssue);\r\n    \t}\r\n\r\n}\r\n\r\ncontract CrowdSale is Moderated {\r\n\tusing SafeMath for uint256;\r\n\r\n        address public recipient1 = 0x375D7f6bf5109E8e7d27d880EC4E7F362f77D275; // @TODO: replace this!\r\n        address public recipient2 = 0x2D438367B806537a76B97F50B94086898aE5C518; // @TODO: replace this!\r\n        address public recipient3 = 0xd198258038b2f96F8d81Bb04e1ccbfC2B3c46760; // @TODO: replace this!\r\n        uint public percentageRecipient1 = 35;\r\n        uint public percentageRecipient2 = 35;\r\n        uint public percentageRecipient3 = 30;\r\n\r\n\t// Touch ERC20 smart contract\r\n\tTouch public tokenContract;\r\n\r\n    uint256 public startDate;\r\n\r\n    uint256 public endDate;\r\n\r\n    // crowdsale aims to sell 100 Million TST\r\n    uint256 public constant crowdsaleTarget = 22289 ether;\r\n    // running total of tokens sold\r\n    uint256 public etherRaised;\r\n\r\n    // address to receive accumulated ether given a successful crowdsale\r\n\taddress public etherVault;\r\n\r\n    // minimum of 0.005 ether to participate in crowdsale\r\n\tuint256 constant purchaseThreshold = 5 finney;\r\n\r\n    // boolean to indicate crowdsale finalized state\r\n\tbool public isFinalized = false;\r\n\r\n\tbool public active = false;\r\n\r\n\t// finalization event\r\n\tevent Finalized();\r\n\r\n\t// purchase event\r\n\tevent Purchased(address indexed purchaser, uint256 indexed tokens);\r\n\r\n    // checks that crowd sale is live\r\n    modifier onlyWhileActive {\r\n        require(now >= startDate && now <= endDate && active);\r\n        _;\r\n    }\r\n\r\n    function CrowdSale( address _tokenAddr,\r\n                        uint256 start,\r\n                        uint256 end) public {\r\n        require(_tokenAddr != address(0x0));\r\n        require(now < start && start < end);\r\n        // the Touch token contract\r\n        tokenContract = Touch(_tokenAddr);\r\n\r\n        etherVault = msg.sender;\r\n\r\n        startDate = start;\r\n        endDate = end;\r\n    }\r\n\r\n\t// fallback function invokes buyTokens method\r\n\tfunction () external payable {\r\n\t    buyTokens(msg.sender);\r\n\t}\r\n\r\n\tfunction buyTokens(address _purchaser) public payable ifUnrestricted onlyWhileActive returns (bool) {\r\n\t    require(!targetReached());\r\n\t    require(msg.value > purchaseThreshold);\r\n\t   // etherVault.transfer(msg.value);\r\n\t   splitPayment();\r\n\r\n\t    uint256 _tokens = calculate(msg.value);\r\n        // approve CrowdSale to spend 100 000 000 tokens on behalf of moderator\r\n        require(tokenContract.transferFrom(moderator,_purchaser,_tokens));\r\n\t\t//require(tokenContract.generateTokens(_purchaser, _tokens));\r\n        Purchased(_purchaser, _tokens);\r\n        return true;\r\n\t}\r\n\r\n\tfunction calculate(uint256 weiAmount) internal returns(uint256) {\r\n\t    uint256 excess;\r\n\t    uint256 numTokens;\r\n\t    uint256 excessTokens;\r\n        if(etherRaised < 5572 ether) {\r\n            etherRaised = etherRaised.add(weiAmount);\r\n            if(etherRaised > 5572 ether) {\r\n                excess = etherRaised.sub(5572 ether);\r\n                numTokens = weiAmount.sub(excess).mul(5608);\r\n                etherRaised = etherRaised.sub(excess);\r\n                excessTokens = calculate(excess);\r\n                return numTokens + excessTokens;\r\n            } else {\r\n                return weiAmount.mul(5608);\r\n            }\r\n        } else if(etherRaised < 11144 ether) {\r\n            etherRaised = etherRaised.add(weiAmount);\r\n            if(etherRaised > 11144 ether) {\r\n                excess = etherRaised.sub(11144 ether);\r\n                numTokens = weiAmount.sub(excess).mul(4807);\r\n                etherRaised = etherRaised.sub(excess);\r\n                excessTokens = calculate(excess);\r\n                return numTokens + excessTokens;\r\n            } else {\r\n                return weiAmount.mul(4807);\r\n            }\r\n        } else if(etherRaised < 16716 ether) {\r\n            etherRaised = etherRaised.add(weiAmount);\r\n            if(etherRaised > 16716 ether) {\r\n                excess = etherRaised.sub(16716 ether);\r\n                numTokens = weiAmount.sub(excess).mul(4206);\r\n                etherRaised = etherRaised.sub(excess);\r\n                excessTokens = calculate(excess);\r\n                return numTokens + excessTokens;\r\n            } else {\r\n                return weiAmount.mul(4206);\r\n            }\r\n        } else if(etherRaised < 22289 ether) {\r\n            etherRaised = etherRaised.add(weiAmount);\r\n            if(etherRaised > 22289 ether) {\r\n                excess = etherRaised.sub(22289 ether);\r\n                numTokens = weiAmount.sub(excess).mul(3738);\r\n                etherRaised = etherRaised.sub(excess);\r\n                excessTokens = calculate(excess);\r\n                return numTokens + excessTokens;\r\n            } else {\r\n                return weiAmount.mul(3738);\r\n            }\r\n        } else {\r\n            etherRaised = etherRaised.add(weiAmount);\r\n            return weiAmount.mul(3738);\r\n        }\r\n\t}\r\n\r\n\r\n    function changeEtherVault(address newEtherVault) public onlyModerator {\r\n        require(newEtherVault != address(0x0));\r\n        etherVault = newEtherVault;\r\n\r\n}\r\n\r\n\r\n    function initialize() public onlyModerator {\r\n        // assign Touch moderator to this contract address\r\n        // assign moderator of this contract to crowdsale manager address\r\n        require(tokenContract.allowance(moderator, address(this)) == 102306549000000000000000000);\r\n        active = true;\r\n        // send approve from moderator account allowing for 100 million tokens\r\n        // spendable by this contract\r\n    }\r\n\r\n\t// activates end of crowdsale state\r\n    function finalize() public onlyModerator {\r\n        // cannot have been invoked before\r\n        require(!isFinalized);\r\n        // can only be invoked after end date or if target has been reached\r\n        require(hasEnded() || targetReached());\r\n\r\n        active = false;\r\n\r\n        // emit Finalized event\r\n        Finalized();\r\n        // set isFinalized boolean to true\r\n        isFinalized = true;\r\n    }\r\n\r\n\t// checks if end date of crowdsale is passed\r\n    function hasEnded() internal view returns (bool) {\r\n        return (now > endDate);\r\n    }\r\n\r\n    // checks if crowdsale target is reached\r\n    function targetReached() internal view returns (bool) {\r\n        return (etherRaised >= crowdsaleTarget);\r\n    }\r\n    function splitPayment() internal {\r\n        recipient1.transfer(msg.value * percentageRecipient1 / 100);\r\n        recipient2.transfer(msg.value * percentageRecipient2 / 100);\r\n        recipient3.transfer(msg.value * percentageRecipient3 / 100);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unrestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageRecipient1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"reassignModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEtherVault\",\"type\":\"address\"}],\"name\":\"changeEtherVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restrict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageRecipient2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unrestrict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"extract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageRecipient3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005e0af01930c8dc676a6dc7133bd86370a0be3953000000000000000000000000000000000000000000000000000000005ad833e4000000000000000000000000000000000000000000000000000000005b027c80","Library":"","SwarmSource":"bzzr://9ffe0569f4359463677ee374d48a49b4929aa1258ae42d97c0f60041134e0859"}]}