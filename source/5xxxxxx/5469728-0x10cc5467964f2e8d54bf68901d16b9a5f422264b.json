{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\ncontract TtestaryToken is MintableToken {\r\n    \r\n    string public constant name = \"Ttestary\";\r\n    string public constant symbol = \"TTARY\";\r\n    uint32 public constant decimals = 18;\r\n    \r\n}\r\n\r\n\r\ncontract Ttestary is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    TtestaryToken public token = new TtestaryToken();\r\n    \r\n    address eth_addr;\r\n    uint devs_percent;\r\n    uint start;\r\n    uint period;\r\n    uint hardcap;\r\n    uint rate;\r\n\r\n    function Crowdsale() {\r\n        eth_addr = 0x785862CEBCEcE601c6E1f79315c9320A6721Ea92;\r\n        devs_percent = 3;\r\n        rate = 5000e18;\r\n        start = 1524060501;\r\n        period = 30;\r\n        hardcap = 500 ether;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n    \trequire(now > start && now < start + period * 1 days);\r\n    \t_;\r\n    }\r\n\t\r\n    modifier isUnderHardCap() {\r\n        require(eth_addr.balance <= hardcap);\r\n        _;\r\n    }\r\n \r\n    function finishMinting() public onlyOwner {\r\n\tuint issuedTokenSupply = token.totalSupply();\r\n\tuint restrictedTokens = issuedTokenSupply.mul(devs_percent).div(100 - devs_percent);\r\n\ttoken.mint(eth_addr, restrictedTokens);\r\n        token.finishMinting();\r\n    }\r\n \r\n   function createTokens() isUnderHardCap saleIsOn payable {\r\n        eth_addr.transfer(msg.value);\r\n        uint tokens = rate.mul(msg.value).div(1 ether);\r\n        uint bonusTokens = 0;\r\n        if(now < start + (period * 1 days).div(5)) {\r\n          bonusTokens = tokens.div(5);\r\n        } else {\r\n          bonusTokens = 0;\r\n        } \r\n        tokens += bonusTokens;\r\n        token.mint(msg.sender, tokens);\r\n    }\r\n \r\n    function() payable {\r\n        createTokens();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Crowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Ttestary","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8851f5feedd97b39605a5bd2deaec7a438afae6dba8838b7f4d7401398c27014"}]}