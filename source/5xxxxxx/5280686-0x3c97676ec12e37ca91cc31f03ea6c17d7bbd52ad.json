{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n*   Basic PHX-Ethereum Exchange\r\n*\r\n*   This contract keeps a list of buy/sell orders for PHX coins\r\n*   and acts as a market-maker matching sellers to buyers.\r\n*   \r\n* //*** Developed By:\r\n*   _____       _         _         _ ___ _         \r\n*  |_   _|__ __| |_  _ _ (_)__ __ _| | _ (_)___ ___ \r\n*    | |/ -_) _| ' \\| ' \\| / _/ _` | |   / (_-</ -_)\r\n*    |_|\\___\\__|_||_|_||_|_\\__\\__,_|_|_|_\\_/__/\\___|\r\n*   \r\n*   Â© 2018 TechnicalRise.  Written in March 2018.  \r\n*   All rights reserved.  Do not copy, adapt, or otherwise use without permission.\r\n*   https://www.reddit.com/user/TechnicalRise/\r\n*  \r\n*   Thanks to Ogu, TocSick, and Norsefire.\r\n*/\r\n\r\ncontract ERC20Token {\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract SimplePHXExchange {\r\n    \r\n    // ScaleFactor\r\n    // It needs to be possible to make PHX cost less than 1 Wei / Rise\r\n    // And vice-versa, make ETH cost less than 1 Rise / Wei\r\n    uint public ScaleFactor = 10 ** 18;  \r\n    \r\n    // ****  Maps for the Token-Seller Side of the Contract\r\n    // Array of offerors\r\n    address[] public tknOfferors;\r\n\tmapping(address => uint256) public tknAddrNdx;\r\n\r\n\t// Array between each address and their tokens offered and buy prices.\r\n\tmapping(address => uint256) public tknTokensOffered;\r\n\tmapping(address => uint256) public tknPricePerToken; // In qWeiPerRise (need to multiply by 10 ** 36 to get it to ETH / PHX)\r\n\r\n    // ****  Maps for the Token-Buyer Side of the Contract\r\n    // Array of offerors\r\n    address[] public ethOfferors;\r\n\tmapping(address => uint256) public ethAddrNdx;\r\n\r\n\t// Array between each address and their tokens offered and buy prices.\r\n\tmapping(address => uint256) public ethEtherOffered;\r\n\tmapping(address => uint256) public ethPricePerToken; // In qRisePerWei (need to multiply by 10 ** 36 to get it to PHX / ETH)\r\n    // ****\r\n\r\n    ERC20Token public phxCoin;\r\n\r\n    function SimplePHXExchange() public {\r\n        phxCoin = ERC20Token(0x14b759A158879B133710f4059d32565b4a66140C); // Initiates a PHX Coin !important -- Make sure this is the PHX contract!\r\n        tknOfferors.push(0x0); // This is because all IDs in tknAddrNdx will initialize to zero\r\n        ethOfferors.push(0x0); // This is because all IDs in ethAddrNdx will initialize to zero\r\n    }\r\n\r\n    function offerTkn(uint _tokensOffered, uint _tokenPrice) public {\r\n        require(_humanSender(msg.sender));\r\n        require(tknAddrNdx[msg.sender] == 0); // Make sure that this offeror has cancelled all previous offers\r\n        require(0 < _tokensOffered); // Make sure some number of tokens are offered\r\n        require(phxCoin.transferFrom(msg.sender, this, _tokensOffered)); // Require that transfer can be and is made\r\n        tknTokensOffered[msg.sender] = _tokensOffered;\r\n        tknPricePerToken[msg.sender] = _tokenPrice; // in qWeiPerRise\r\n        tknOfferors.push(msg.sender);\r\n        tknAddrNdx[msg.sender] = tknOfferors.length - 1;\r\n    }\r\n    \r\n    function offerEth(uint _tokenPrice) public payable {\r\n        require(_humanSender(msg.sender));\r\n        require(ethAddrNdx[msg.sender] == 0); // Make sure that this offeror has cancelled all previous offers\r\n        require(0 < msg.value); // Make sure some amount of eth is offered\r\n        ethEtherOffered[msg.sender]  = msg.value;\r\n        ethPricePerToken[msg.sender] = _tokenPrice; // in qRisesPerWei\r\n        ethOfferors.push(msg.sender);\r\n        ethAddrNdx[msg.sender] = ethOfferors.length - 1;\r\n    }\r\n\r\n    function cancelTknOffer() public {\r\n        if(tknAddrNdx[msg.sender] == 0) return; // No need to cancel non-existent offer\r\n        phxCoin.transfer(msg.sender, tknTokensOffered[msg.sender]); // Return the Tokens\r\n        _cancelTknOffer(msg.sender);\r\n    }\r\n\r\n    function _cancelTknOffer(address _offeror) internal {\r\n        delete tknTokensOffered[_offeror];\r\n        delete tknPricePerToken[_offeror];\r\n\r\n        uint ndx = tknAddrNdx[_offeror];\r\n\r\n        // If this isn't the only offer, reshuffle the array\r\n        // Moving the last entry to the middle of the list\r\n        tknOfferors[ndx] = tknOfferors[tknOfferors.length - 1];\r\n        tknAddrNdx[tknOfferors[tknOfferors.length - 1]] = ndx;\r\n        delete tknOfferors[tknOfferors.length - 1];\r\n        delete tknAddrNdx[_offeror]; // !important\r\n    }\r\n\r\n    function cancelEthOffer() public {\r\n        if(ethAddrNdx[msg.sender] == 0) return; // No need to cancel non-existent offer\r\n        msg.sender.transfer(ethEtherOffered[msg.sender]); // Return the Tokens\r\n        _cancelEthOffer(msg.sender);\r\n    }\r\n\r\n    function _cancelEthOffer(address _offeror) internal {\r\n        delete ethEtherOffered[_offeror];\r\n        delete ethPricePerToken[_offeror];\r\n        \r\n        uint ndx = ethAddrNdx[_offeror];\r\n\r\n        // If this isn't the only offer, reshuffle the array\r\n        // Moving the last entry to the middle of the list\r\n        ethOfferors[ndx] = ethOfferors[ethOfferors.length - 1];\r\n        ethAddrNdx[ethOfferors[ethOfferors.length - 1]] = ndx;\r\n        delete ethOfferors[ethOfferors.length - 1];\r\n        delete ethAddrNdx[_offeror]; // !important\r\n    }\r\n    \r\n    function buyTkn(uint _ndx) payable public {\r\n        require(_humanSender(msg.sender));\r\n        address _offeror = tknOfferors[_ndx];\r\n        uint _purchasePrice = tknTokensOffered[_offeror] * tknPricePerToken[_offeror] / ScaleFactor; // i.e. # of Wei Required = Rises * (qWei/Rise) / 10**18\r\n        require(msg.value >= _purchasePrice);\r\n        require(phxCoin.transfer(msg.sender, tknTokensOffered[_offeror])); // Successful transfer of tokens to purchaser\r\n        _offeror.transfer(_purchasePrice);\r\n        _cancelTknOffer(_offeror);\r\n    }\r\n    \r\n    function buyEth(uint _ndx) public {\r\n        require(_humanSender(msg.sender));\r\n        address _offeror = ethOfferors[_ndx];\r\n        uint _purchasePrice = ethEtherOffered[_offeror] * ethPricePerToken[_offeror] / ScaleFactor;  // i.e. # of Rises Required = Wei * (qTRs/Wei) / 10**18\r\n        require(phxCoin.transferFrom(msg.sender, _offeror, _purchasePrice)); // Successful transfer of tokens to offeror\r\n        msg.sender.transfer(ethEtherOffered[_offeror]);\r\n        _cancelEthOffer(_offeror);\r\n    }\r\n    \r\n    function updateTknPrice(uint _newPrice) public {\r\n        // Make sure that this offeror has an offer out there\r\n        require(tknTokensOffered[msg.sender] != 0); \r\n        tknPricePerToken[msg.sender] = _newPrice;\r\n    }\r\n    \r\n    function updateEthPrice(uint _newPrice) public {\r\n        // Make sure that this offeror has an offer out there\r\n        require(ethEtherOffered[msg.sender] != 0); \r\n        ethPricePerToken[msg.sender] = _newPrice;\r\n    }\r\n    \r\n    // Getter Functions\r\n    \r\n    function getTknOfferor(uint _ndx) public constant returns (address _offeror) {\r\n        return tknOfferors[_ndx];\r\n    }\r\n    \r\n    function getTknOfferPrice(uint _ndx) public constant returns (uint _tokenPrice) {\r\n        return tknPricePerToken[tknOfferors[_ndx]];\r\n    }\r\n    \r\n    function getTknOfferAmount(uint _ndx) public constant returns (uint _tokensOffered) {\r\n        return tknTokensOffered[tknOfferors[_ndx]];\r\n    }\r\n    \r\n    function getEthOfferor(uint _ndx) public constant returns (address _offeror) {\r\n        return ethOfferors[_ndx];\r\n    }\r\n    \r\n    function getEthOfferPrice(uint _ndx) public constant returns (uint _etherPrice) {\r\n        return ethPricePerToken[ethOfferors[_ndx]];\r\n    }\r\n    \r\n    function getEthOfferAmount(uint _ndx) public constant returns (uint _etherOffered) {\r\n        return ethEtherOffered[ethOfferors[_ndx]];\r\n    }\r\n    \r\n    // **\r\n    \r\n    // A Security Precaution -- Don't interact with contracts unless you\r\n    // Have a need to / desire to.\r\n    // Determine if the \"_from\" address is a contract\r\n    function _humanSender(address _from) private view returns (bool) {\r\n      uint codeLength;\r\n      assembly {\r\n          codeLength := extcodesize(_from)\r\n      }\r\n      return (codeLength == 0); // If this is \"true\" sender is most likely a Wallet\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getTknOfferor\",\"outputs\":[{\"name\":\"_offeror\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethAddrNdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateEthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getTknOfferAmount\",\"outputs\":[{\"name\":\"_tokensOffered\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"buyTkn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getEthOfferor\",\"outputs\":[{\"name\":\"_offeror\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getEthOfferAmount\",\"outputs\":[{\"name\":\"_etherOffered\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getTknOfferPrice\",\"outputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelTknOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phxCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"buyEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tknAddrNdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"offerEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensOffered\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"offerTkn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTknPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getEthOfferPrice\",\"outputs\":[{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tknPricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tknTokensOffered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethEtherOffered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethOfferors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tknOfferors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelEthOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ScaleFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SimplePHXExchange","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85e5e649802eba8d894fdeb269e2c241c97131926e23ba4e1d6d3f1790b8d297"}]}