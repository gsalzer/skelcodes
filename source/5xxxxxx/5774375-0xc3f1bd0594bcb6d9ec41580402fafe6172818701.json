{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/subscription/Subscription.sol\r\n\r\ncontract Subscription is Ownable {\r\n  uint256 constant UINT256_MAX = ~uint256(0);\r\n  using SafeMath for uint256;\r\n\r\n  /// @dev The token being use (C8)\r\n  ERC20 public token;\r\n\r\n  /// @dev Address where fee are collected\r\n  address public wallet;\r\n\r\n  /// @dev Cost per day of membership for C8 token\r\n  uint256 public subscriptionRate;\r\n\r\n  uint public fee;\r\n\r\n  uint256 lastAppId;\r\n\r\n  struct Pricing {\r\n    uint256 day;\r\n    uint256 price;\r\n  }\r\n\r\n  struct Application {\r\n    /// @dev Application Id.\r\n    uint256 appId;\r\n\r\n    /// @dev Application name.\r\n    bytes32 appName;\r\n\r\n    /// @dev Beneficiary address.\r\n    address beneficiary;\r\n\r\n    /// @dev Owner address.\r\n    address owner;\r\n\r\n    /// @dev Timestamp of when Membership expires UserId=>timestamp of expire.\r\n    mapping(uint256 => uint256) subscriptionExpiration;\r\n\r\n    Pricing[] prices;\r\n  }\r\n\r\n  mapping(uint256 => Application) public applications;\r\n\r\n  /**\r\n   * Event for subscription purchase logging\r\n   * @param purchaser who paid for the subscription\r\n   * @param userId user id who will benefit from purchase\r\n   * @param day day of subscription purchased\r\n   * @param amount amount of subscription purchased in wei\r\n   * @param expiration expiration of user subscription.\r\n   */\r\n  event SubscriptionPurchase(\r\n    address indexed purchaser,\r\n    uint256 indexed _appId,\r\n    uint256 indexed userId,\r\n    uint256 day,\r\n    uint256 amount,\r\n    uint256 expiration\r\n  );\r\n\r\n  event Registration(\r\n    address indexed creator,\r\n    uint256 _appId,\r\n    bytes32 _appName,\r\n    uint256 _price,\r\n    address _beneficiary\r\n  );\r\n\r\n  function Subscription(\r\n    uint _fee,\r\n    address _fundWallet,\r\n    ERC20 _token) public\r\n  {\r\n    require(_token != address(0));\r\n    require(_fundWallet != address(0));\r\n    require(_fee > 0);\r\n    token = _token;\r\n    wallet = _fundWallet;\r\n    fee = _fee;\r\n    lastAppId = 0;\r\n  }\r\n\r\n  function renewSubscriptionByDays(uint256 _appId, uint256 _userId, uint _day) external {\r\n    Application storage app = applications[_appId];\r\n    require(app.appId == _appId);\r\n    require(_day >= 1);\r\n    uint256 amount = getPrice(_appId, _day);\r\n    require(amount > 0);\r\n\r\n    uint256 currentExpiration = app.subscriptionExpiration[_userId];\r\n    // If their membership already expired...\r\n    if (currentExpiration < now) {\r\n      // ...use `now` as the starting point of their new subscription\r\n      currentExpiration = now;\r\n    }\r\n    uint256 newExpiration = currentExpiration.add(_day.mul(1 days));\r\n    app.subscriptionExpiration[_userId] = newExpiration;\r\n    uint256 txFee = processFee(amount);\r\n    uint256 toAppOwner = amount.sub(txFee);\r\n    require(token.transferFrom(msg.sender, app.beneficiary, toAppOwner));\r\n    emit SubscriptionPurchase(\r\n      msg.sender,\r\n      _appId,\r\n      _userId,\r\n      _day,\r\n      amount,\r\n      newExpiration);\r\n  }\r\n\r\n  function registration(\r\n    bytes32 _appName,\r\n    uint256 _price,\r\n    address _beneficiary)\r\n  external\r\n  {\r\n    require(_appName != \"\");\r\n    require(_price > 0);\r\n    require(_beneficiary != address(0));\r\n    lastAppId = lastAppId.add(1);\r\n    Application storage app = applications[lastAppId];\r\n    app.appId = lastAppId;\r\n    app.appName = _appName;\r\n    app.beneficiary = _beneficiary;\r\n    app.owner = msg.sender;\r\n    app.prices.push(Pricing({\r\n      day : 1,\r\n      price : _price\r\n      }));\r\n    emit Registration(\r\n      msg.sender,\r\n      lastAppId,\r\n      _appName,\r\n      _price,\r\n      _beneficiary);\r\n  }\r\n\r\n  function setPrice(uint256 _appId, uint256[] _days, uint256[] _prices) external {\r\n    Application storage app = applications[_appId];\r\n    require(app.owner == msg.sender);\r\n    app.prices.length = 0;\r\n    for (uint i = 0; i < _days.length; i++) {\r\n      require(_days[i] > 0);\r\n      require(_prices[i] > 0);\r\n      app.prices.push(Pricing({\r\n        day : _days[i],\r\n        price : _prices[i]\r\n        }));\r\n    }\r\n  }\r\n\r\n  /// @dev Set fee percent for Carboneum team.\r\n  function setFee(uint _fee) external onlyOwner {\r\n    fee = _fee;\r\n  }\r\n\r\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\r\n    Application storage app = applications[_appId];\r\n    return app.subscriptionExpiration[_userId];\r\n  }\r\n\r\n  function getPrice(uint256 _appId, uint256 _day) public view returns (uint256) {\r\n    Application storage app = applications[_appId];\r\n    uint256 amount = UINT256_MAX;\r\n    for (uint i = 0; i < app.prices.length; i++) {\r\n      if (_day == app.prices[i].day) {\r\n        amount = app.prices[i].price;\r\n        return amount;\r\n      } else if (_day > app.prices[i].day) {\r\n        uint256 rate = app.prices[i].price.div(app.prices[i].day);\r\n        uint256 amountInPrice = _day.mul(rate);\r\n        if (amountInPrice < amount) {\r\n          amount = amountInPrice;\r\n        }\r\n      }\r\n    }\r\n    if (amount == UINT256_MAX) {\r\n      amount = 0;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  function processFee(uint256 _weiAmount) internal returns (uint256) {\r\n    uint256 txFee = _weiAmount.mul(fee).div(100);\r\n    require(token.transferFrom(msg.sender, wallet, txFee));\r\n    return txFee;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_appId\",\"type\":\"uint256\"},{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"getExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_appId\",\"type\":\"uint256\"},{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_appId\",\"type\":\"uint256\"},{\"name\":\"_userId\",\"type\":\"uint256\"},{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"renewSubscriptionByDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_appId\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subscriptionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_appName\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"name\":\"appId\",\"type\":\"uint256\"},{\"name\":\"appName\",\"type\":\"bytes32\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_fundWallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_appId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"SubscriptionPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_appId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_appName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Subscription","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005023cfabaea4d331fa78d50cc5de5102341df649000000000000000000000000d42debe4edc92bd5a3fbb4243e1eccf6d63a4a5d","Library":"","SwarmSource":"bzzr://6a7c03f7c2bfcb1275fbe73be567466d7ed619c2dd7f2c66852675d6cf5fb5ad"}]}