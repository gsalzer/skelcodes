{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24; // 23 May 2018\r\n\r\n/*    Copyright Â© 2018  -  All Rights Reserved\r\n  High-Capacity IonChain Transactional System\r\n*/\r\n\r\ncontract InCodeWeTrust {\r\n  modifier onlyPayloadSize(uint256 size) {\r\n    if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n  uint256 public totalSupply;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function transfer_Different_amounts_of_assets_to_many (address[] _recipients, uint[] _amount_comma_space_amount) public payable;\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public payable;\r\n  function early_supporters_distribution (address[] address_to_comma_space_address_to_, uint256 _value) public payable;\r\n  function balanceOf(address _owner) constant public returns (uint256 balance);\r\n  function buy_fromContract() payable public returns (uint256 _amount_);                                    \r\n  function sell_toContract (uint256 amount_toSell)  public; \r\n  function show_Balance_available_for_Sale_in_ETH_equivalent () constant public returns (uint256 you_can_buy_all_the_available_assets_with_this_amount_in_ETH);\r\n  function Show_automated_Sell_price() constant public returns (uint256 assets_per_1_ETH);\r\n  function show_automated_Buy_price() constant public returns (uint256 assets_per_1_ETH);\r\n  \r\n\r\n  function developer_edit_text_price (string edit_text_Price)   public;\r\n  function developer_edit_text_crowdsale (string string_crowdsale)   public;\r\n  function developer_edit_text_Exchanges_links (string update_links)   public;\r\n  function developer_string_contract_verified (string string_contract_verified) public;\r\n  function developer_update_Terms_of_service (string update_text_Terms_of_service)   public;\r\n  function developer_edit_name (string edit_text_name)   public;\r\n  function developer_How_To  (string edit_text_How_to)   public;\r\n  function totally_decrease_the_supply(uint256 amount_to_burn_from_supply) public payable;\r\n }\r\n\r\ncontract investor is InCodeWeTrust {\r\n  address internal owner; \r\n\r\n  mapping(address => uint256) balances;\r\n}\r\n/*  SafeMath - the lowest risk library\r\n  Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Satoshi is investor {\r\n  using SafeMath for uint256;\r\n  uint256 totalFund = 112 ** 3; \r\n  uint256 buyPrice =   2857 * 10 ** 12 ;   // 0,002857 ETH per 1 Asset  or 350,02 Assets per 1 ETH\r\n  uint256 public Buy_Wall_level_in_wei = (2800 * 10 ** 12) / 35 ; // 0,00008 ETH per 1 Asset\r\n \r\n    /* Batch assets transfer. Used  to distribute  assets to holders */\r\n  function transfer_Different_amounts_of_assets_to_many (address[] _recipients, uint[] _amount_comma_space_amount) public payable {\r\n        require( _recipients.length > 0 && _recipients.length == _amount_comma_space_amount.length);\r\n\r\n        uint256 total = 0;\r\n        for(uint i = 0; i < _amount_comma_space_amount.length; i++){\r\n            total = total.add(_amount_comma_space_amount[i]);\r\n        }\r\n        require(total <= balances[msg.sender]);\r\n\r\n        for(uint j = 0; j < _recipients.length; j++){\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_amount_comma_space_amount[j]);\r\n            Transfer(msg.sender, _recipients[j], _amount_comma_space_amount[j]);\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n       \r\n  } \r\n \r\n  function early_supporters_distribution (address[] address_to_comma_space_address_to_, uint256 _value) public payable { \r\n        require(_value <= balances[msg.sender]);\r\n        for (uint i = 0; i < address_to_comma_space_address_to_.length; i++){\r\n         if(balances[msg.sender] >= _value)  { \r\n         balances[msg.sender] = balances[msg.sender].sub(_value);\r\n         balances[address_to_comma_space_address_to_[i]] = balances[address_to_comma_space_address_to_[i]].add(_value);\r\n           Transfer(msg.sender, address_to_comma_space_address_to_[i], _value);\r\n         }\r\n        }\r\n  }\r\n}\r\n \r\ncontract Inventor is Satoshi {\r\n function Inventor() internal {\r\n    owner = msg.sender;\r\n }\r\n modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n }\r\n function developer_Transfer_ownership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n }\r\n function developer_increase_prices (uint256 _increase, uint256 increase) onlyOwner public {\r\n   Buy_Wall_level_in_wei = _increase; \r\n   buyPrice = increase;\r\n }\r\n} \r\n\r\ncontract Transparent is Inventor {\r\n    function Show_automated_Sell_price() constant public returns (uint256 assets_per_1_ETH) {\r\n        assets_per_1_ETH = 1e18 / Buy_Wall_level_in_wei;\r\n        return assets_per_1_ETH;\r\n    }\r\n  \r\n    function show_automated_Buy_price() constant public returns (uint256 assets_per_1_ETH) {\r\n        assets_per_1_ETH = 1e18 / buyPrice;\r\n        return assets_per_1_ETH;\r\n    }   \r\n    \r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract TheSmartAsset is Transparent {\r\n  uint256 internal initialSupply;\r\n  \r\n  function totally_decrease_the_supply(uint256 amount_to_burn_from_supply) public payable {\r\n        require(balances[msg.sender] >= amount_to_burn_from_supply);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount_to_burn_from_supply);\r\n        totalSupply = totalSupply.sub(amount_to_burn_from_supply);\r\n  }\r\n}\r\n\r\ncontract ERC20 is TheSmartAsset {\r\n string public name = \"IonChain\";\r\n string public positive_terms_of_Service;\r\n string public crowdsale;\r\n string public alternative_Exchanges_links;\r\n string public How_to_interact_with_Smartcontract;\r\n string public Price;  \r\n string public contract_verified;\r\n uint constant internal decimals = 6;\r\n string public symbol = \"IONC\";\r\n  function Voter () {\r\n      balances[this] = 0;  // this is the total initial assets sale limit\r\n      balances[owner] = 1 * (10 ** 9) * decimals;  // total amount for all bounty programs\r\n      initialSupply =  balances[owner];\r\n      totalSupply  =  balances[this]  + balances[owner];\r\n      Transfer(0x0, owner, totalSupply);    \r\n  }\r\n  \r\n  //Show_Available_balance_for_Sale_in_ETH_equivalent\r\n  function show_Balance_available_for_Sale_in_ETH_equivalent () constant public returns (uint256 you_can_buy_all_the_available_assets_with_this_amount_in_ETH) {\r\n     you_can_buy_all_the_available_assets_with_this_amount_in_ETH =  buyPrice * balances[this] / 1e18;\r\n  }\r\n  \r\n} \r\n\r\ncontract Assets is  ERC20 {\r\n\r\n function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public payable {\r\n        if (balances[msg.sender] < _value) {\r\n            _value = balances[msg.sender];\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n       \r\n }\r\n\r\n}\r\n\r\ncontract Functions is Assets {\r\n \r\n  \r\n  function developer_string_symbol (string symbol_new)   public {\r\n    if (msg.sender == owner) symbol = symbol_new;\r\n  }\r\n  function developer_edit_text_price (string edit_text_Price)   public {\r\n    if (msg.sender == owner) Price = edit_text_Price;\r\n  }\r\n  \r\n  function developer_edit_text_crowdsale (string string_crowdsale)   public {\r\n    if (msg.sender == owner) crowdsale = string_crowdsale;\r\n  }\r\n  function developer_edit_text_Exchanges_links (string update_links)   public {\r\n    if (msg.sender == owner) alternative_Exchanges_links = update_links;\r\n  }\r\n  function developer_string_contract_verified (string string_contract_verified) public {\r\n    if (msg.sender == owner) contract_verified = string_contract_verified;\r\n  }\r\n  function developer_update_Terms_of_service (string update_text_Terms_of_service)   public {\r\n    if (msg.sender == owner) positive_terms_of_Service = update_text_Terms_of_service;\r\n  }\r\n  function developer_edit_name (string edit_text_name)   public {\r\n    if (msg.sender == owner) name = edit_text_name;\r\n  }\r\n  function developer_How_To  (string edit_text_How_to)   public {\r\n    if (msg.sender == owner) How_to_interact_with_Smartcontract = edit_text_How_to;\r\n  }\r\n \r\n\r\n function () payable {\r\n    uint256 assets =  msg.value/(buyPrice);\r\n     if (assets > (balances[this])) {\r\n        assets = balances[this];\r\n        uint valueWei = assets * buyPrice ;\r\n        msg.sender.transfer(msg.value - valueWei);\r\n    }\r\n    require(msg.value >= (10 ** 15));\r\n    balances[msg.sender] += assets;\r\n    balances[this] -= assets;\r\n    Transfer(this, msg.sender, assets);\r\n }\r\n}\r\n\r\n\r\ncontract IonChain is Functions {\r\n\r\n function buy_fromContract() payable public returns (uint256 _amount_) {\r\n        require (msg.value >= 0);\r\n        _amount_ =  msg.value / buyPrice;                 // calculates the amount\r\n        if (_amount_ > balances[this]) {\r\n            _amount_ = balances[this];\r\n            uint256 valueWei = _amount_ * buyPrice;\r\n            msg.sender.transfer(msg.value - valueWei);\r\n        }\r\n        balances[msg.sender] += _amount_;                  // adds the amount to buyer's balance\r\n        balances[this] -= _amount_;                        // subtracts amount from seller's balance\r\n        Transfer(this, msg.sender, _amount_);              \r\n        \r\n         uint64 _now = uint64(now);\r\n        return _amount_;                                    \r\n }\r\n\r\n function sell_toContract (uint256 amount_toSell)  public { \r\n        if (balances[msg.sender] < amount_toSell) {\r\n            amount_toSell = balances[msg.sender];\r\n        }\r\n        require (amount_toSell <= (8 * 1e18 / Buy_Wall_level_in_wei)); // max to sell by 1 function's call is 100 000 assets  \r\n        balances[this] += amount_toSell;                           // adds the amount to owner's balance\r\n        balances[msg.sender] -= amount_toSell;  \r\n        msg.sender.transfer(amount_toSell * Buy_Wall_level_in_wei);          \r\n        Transfer(msg.sender, this, amount_toSell);              \r\n   \r\n        \r\n }\r\n /* \r\n  High-Capacity IonChain Transactional System\r\n*/\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_fromContract\",\"outputs\":[{\"name\":\"_amount_\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"alternative_Exchanges_links\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"show_automated_Buy_price\",\"outputs\":[{\"name\":\"assets_per_1_ETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Buy_Wall_level_in_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"show_Balance_available_for_Sale_in_ETH_equivalent\",\"outputs\":[{\"name\":\"you_can_buy_all_the_available_assets_with_this_amount_in_ETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Show_automated_Sell_price\",\"outputs\":[{\"name\":\"assets_per_1_ETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_to_burn_from_supply\",\"type\":\"uint256\"}],\"name\":\"totally_decrease_the_supply\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positive_terms_of_Service\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_toSell\",\"type\":\"uint256\"}],\"name\":\"sell_toContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amount_comma_space_amount\",\"type\":\"uint256[]\"}],\"name\":\"transfer_Different_amounts_of_assets_to_many\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Price\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"edit_text_name\",\"type\":\"string\"}],\"name\":\"developer_edit_name\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"edit_text_How_to\",\"type\":\"string\"}],\"name\":\"developer_How_To\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"string_contract_verified\",\"type\":\"string\"}],\"name\":\"developer_string_contract_verified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"developer_Transfer_ownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"update_text_Terms_of_service\",\"type\":\"string\"}],\"name\":\"developer_update_Terms_of_service\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_increase\",\"type\":\"uint256\"},{\"name\":\"increase\",\"type\":\"uint256\"}],\"name\":\"developer_increase_prices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"string_crowdsale\",\"type\":\"string\"}],\"name\":\"developer_edit_text_crowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"How_to_interact_with_Smartcontract\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"edit_text_Price\",\"type\":\"string\"}],\"name\":\"developer_edit_text_price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Voter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbol_new\",\"type\":\"string\"}],\"name\":\"developer_string_symbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_to_comma_space_address_to_\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"early_supporters_distribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"update_links\",\"type\":\"string\"}],\"name\":\"developer_edit_text_Exchanges_links\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_verified\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"IonChain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2c2282aea21b1bb3d50e811d668665636e07fc59483635536ef2676ac4e6346"}]}