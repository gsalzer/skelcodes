{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\tevent Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 _balance);\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\tfunction transfer(address _to, uint256 _tokenId) public;\r\n\tfunction approve(address _to, uint256 _tokenId) public;\r\n\tfunction takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev this version copied from zeppelin-solidity, constant changed to pure\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ERC721Token is ERC721 {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// Total amount of tokens\r\n\tuint256 internal totalTokens;\r\n\r\n\t// Mapping from token ID to owner\r\n\tmapping (uint256 => address) private tokenOwner;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping (uint256 => address) private tokenApprovals;\r\n\r\n\t// Mapping from owner to list of owned token IDs\r\n\tmapping (address => uint256[]) private ownedTokens;\r\n\r\n\t// Mapping from token ID to index of the owner tokens list\r\n\tmapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n\t/**\r\n\t* @dev Guarantees msg.sender is owner of the given token\r\n\t* @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n\t*/\r\n\tmodifier onlyOwnerOf(uint256 _tokenId) {\r\n\t\trequire(ownerOf(_tokenId) == msg.sender);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the total amount of tokens stored by the contract\r\n\t* @return uint256 representing the total amount of tokens\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalTokens;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address\r\n\t* @param _owner address to query the balance of\r\n\t* @return uint256 representing the amount owned by the passed address\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn ownedTokens[_owner].length;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the list of tokens owned by a given address\r\n\t* @param _owner address to query the tokens of\r\n\t* @return uint256[] representing the list of tokens owned by the passed address\r\n\t*/\r\n\tfunction tokensOf(address _owner) public view returns (uint256[]) {\r\n\t\treturn ownedTokens[_owner];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the owner of the specified token ID\r\n\t* @param _tokenId uint256 ID of the token to query the owner of\r\n\t* @return owner address currently marked as the owner of the given token ID\r\n\t*/\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address) {\r\n\t\taddress owner = tokenOwner[_tokenId];\r\n\t\trequire(owner != address(0));\r\n\t\treturn owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Gets the approved address to take ownership of a given token ID\r\n\t * @param _tokenId uint256 ID of the token to query the approval of\r\n\t * @return address currently approved to take ownership of the given token ID\r\n\t */\r\n\tfunction approvedFor(uint256 _tokenId) public view returns (address) {\r\n\t\treturn tokenApprovals[_tokenId];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfers the ownership of a given token ID to another address\r\n\t* @param _to address to receive the ownership of the given token ID\r\n\t* @param _tokenId uint256 ID of the token to be transferred\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n\t\tclearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Approves another address to claim for the ownership of the given token ID\r\n\t* @param _to address to be approved for the given token ID\r\n\t* @param _tokenId uint256 ID of the token to be approved\r\n\t*/\r\n\tfunction approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n\t\taddress owner = ownerOf(_tokenId);\r\n\t\trequire(_to != owner);\r\n\t\tif (approvedFor(_tokenId) != 0 || _to != 0) {\r\n\t\t\ttokenApprovals[_tokenId] = _to;\r\n\t\t\tApproval(owner, _to, _tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Claims the ownership of a given token ID\r\n\t* @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n\t*/\r\n\tfunction takeOwnership(uint256 _tokenId) public {\r\n\t\trequire(isApprovedFor(msg.sender, _tokenId));\r\n\t\tclearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Mint token function\r\n\t* @param _to The address that will own the minted token\r\n\t* @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n\t*/\r\n\tfunction _mint(address _to, uint256 _tokenId) internal {\r\n\t\trequire(_to != address(0));\r\n\t\taddToken(_to, _tokenId);\r\n\t\tTransfer(0x0, _to, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Burns a specific token\r\n\t* @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n\t*/\r\n\tfunction _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n\t\tif (approvedFor(_tokenId) != 0) {\r\n\t\t\tclearApproval(msg.sender, _tokenId);\r\n\t\t}\r\n\t\tremoveToken(msg.sender, _tokenId);\r\n\t\tTransfer(msg.sender, 0x0, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n\t * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n\t * @param _owner address of the owner to query the approval of\r\n\t * @param _tokenId uint256 ID of the token to query the approval of\r\n\t * @return bool whether the msg.sender is approved for the given token ID or not\r\n\t */\r\n\tfunction isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n\t\treturn approvedFor(_tokenId) == _owner;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n\t* @param _from address which you want to send tokens from\r\n\t* @param _to address which you want to transfer the token to\r\n\t* @param _tokenId uint256 ID of the token to be transferred\r\n\t*/\r\n\tfunction clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_to != ownerOf(_tokenId));\r\n\t\trequire(ownerOf(_tokenId) == _from);\r\n\r\n\t\tclearApproval(_from, _tokenId);\r\n\t\tremoveToken(_from, _tokenId);\r\n\t\taddToken(_to, _tokenId);\r\n\t\tTransfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function to clear current approval of a given token ID\r\n\t* @param _tokenId uint256 ID of the token to be transferred\r\n\t*/\r\n\tfunction clearApproval(address _owner, uint256 _tokenId) private {\r\n\t\trequire(ownerOf(_tokenId) == _owner);\r\n\t\ttokenApprovals[_tokenId] = 0;\r\n\t\tApproval(_owner, 0, _tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function to add a token ID to the list of a given address\r\n\t* @param _to address representing the new owner of the given token ID\r\n\t* @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\t*/\r\n\tfunction addToken(address _to, uint256 _tokenId) private {\r\n\t\trequire(tokenOwner[_tokenId] == address(0));\r\n\t\ttokenOwner[_tokenId] = _to;\r\n\t\tuint256 length = balanceOf(_to);\r\n\t\townedTokens[_to].push(_tokenId);\r\n\t\townedTokensIndex[_tokenId] = length;\r\n\t\ttotalTokens = totalTokens.add(1);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Internal function to remove a token ID from the list of a given address\r\n\t* @param _from address representing the previous owner of the given token ID\r\n\t* @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\t*/\r\n\tfunction removeToken(address _from, uint256 _tokenId) private {\r\n\t\trequire(ownerOf(_tokenId) == _from);\r\n\r\n\t\tuint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n\t\tuint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n\t\tuint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n\t\ttokenOwner[_tokenId] = 0;\r\n\t\townedTokens[_from][tokenIndex] = lastToken;\r\n\t\townedTokens[_from][lastTokenIndex] = 0;\r\n\t\t// Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n\t\t// be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n\t\t// the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n\t\townedTokens[_from].length--;\r\n\t\townedTokensIndex[_tokenId] = 0;\r\n\t\townedTokensIndex[lastToken] = tokenIndex;\r\n\t\ttotalTokens = totalTokens.sub(1);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\r\n */\r\ncontract Ownable {\r\n    modifier onlyOwner() {\r\n        checkOwner();\r\n        _;\r\n    }\r\n\r\n    function checkOwner() internal;\r\n}\r\n\r\n/**\r\n * @title OwnableImpl\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableImpl is Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function OwnableImpl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function checkOwner() internal {\r\n        require(msg.sender == owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract DragonToken is OwnableImpl, ERC721Token {\r\n\tuint256 public price;\r\n\tuint256 public cap;\r\n\tstring public name;\r\n\tstring public symbol;\r\n\r\n\tfunction DragonToken(uint256 _price, uint256 _cap, string _name, string _symbol) public {\r\n\t\tprice = _price;\r\n\t\tcap = _cap;\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\trequire(totalTokens < cap);\r\n\t\trequire(msg.value >= price);\r\n\t\t_mint(msg.sender, totalTokens + 1);\r\n\t\tif (msg.value > price) {\r\n\t\t\tmsg.sender.transfer(msg.value - price);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw(address beneficiary, uint256 amount) onlyOwner public {\r\n\t\tbeneficiary.transfer(amount);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DragonToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a447261676f6e484f444c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064448524152450000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://aa9f692d544328f9199caf2ecd4fec58366dfcc6a9d7ec5cbeceb049d17fceb8"}]}