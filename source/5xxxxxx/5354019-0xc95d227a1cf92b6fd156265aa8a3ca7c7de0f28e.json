{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface ConflictResolutionInterface {\r\n    function minHouseStake(uint activeGames) public pure returns(uint);\r\n\r\n    function maxBalance() public pure returns(int);\r\n\r\n    function isValidBet(uint8 _gameType, uint _betNum, uint _betValue) public pure returns(bool);\r\n\r\n    function endGameConflict(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _playerSeed\r\n    )\r\n        public\r\n        view\r\n        returns(int);\r\n\r\n    function serverForceGameEnd(\r\n        uint8 gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        uint _endInitiatedTime\r\n    )\r\n        public\r\n        view\r\n        returns(int);\r\n\r\n    function playerForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        uint _endInitiatedTime\r\n    )\r\n        public\r\n        view\r\n        returns(int);\r\n}\r\n\r\nlibrary MathUtil {\r\n    /**\r\n     * @dev Returns the absolute value of _val.\r\n     * @param _val value\r\n     * @return The absolute value of _val.\r\n     */\r\n    function abs(int _val) internal pure returns(uint) {\r\n        if (_val < 0) {\r\n            return uint(-_val);\r\n        } else {\r\n            return uint(_val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate maximum.\r\n     */\r\n    function max(uint _val1, uint _val2) internal pure returns(uint) {\r\n        return _val1 >= _val2 ? _val1 : _val2;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate minimum.\r\n     */\r\n    function min(uint _val1, uint _val2) internal pure returns(uint) {\r\n        return _val1 <= _val2 ? _val1 : _val2;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event LogOwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Modifier, which throws if called by other account than owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set contract creator as initial owner\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the\r\n     * contract to a newOwner _newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        LogOwnerShipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract ConflictResolutionManager is Ownable {\r\n    /// @dev Conflict resolution contract.\r\n    ConflictResolutionInterface public conflictRes;\r\n\r\n    /// @dev New Conflict resolution contract.\r\n    address public newConflictRes = 0;\r\n\r\n    /// @dev Time update of new conflict resolution contract was initiated.\r\n    uint public updateTime = 0;\r\n\r\n    /// @dev Min time before new conflict res contract can be activated after initiating update.\r\n    uint public constant MIN_TIMEOUT = 3 days;\r\n\r\n    /// @dev Min time before new conflict res contract can be activated after initiating update.\r\n    uint public constant MAX_TIMEOUT = 6 days;\r\n\r\n    /// @dev Update of conflict resolution contract was initiated.\r\n    event LogUpdatingConflictResolution(address newConflictResolutionAddress);\r\n\r\n    /// @dev New conflict resolution contract is active.\r\n    event LogUpdatedConflictResolution(address newConflictResolutionAddress);\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _conflictResAddress conflict resolution contract address.\r\n     */\r\n    function ConflictResolutionManager(address _conflictResAddress) public {\r\n        conflictRes = ConflictResolutionInterface(_conflictResAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Initiate conflict resolution contract update.\r\n     * @param _newConflictResAddress New conflict resolution contract address.\r\n     */\r\n    function updateConflictResolution(address _newConflictResAddress) public onlyOwner {\r\n        newConflictRes = _newConflictResAddress;\r\n        updateTime = block.timestamp;\r\n\r\n        LogUpdatingConflictResolution(_newConflictResAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Active new conflict resolution contract.\r\n     */\r\n    function activateConflictResolution() public onlyOwner {\r\n        require(newConflictRes != 0);\r\n        require(updateTime != 0);\r\n        require(updateTime + MIN_TIMEOUT <= block.timestamp && block.timestamp <= updateTime + MAX_TIMEOUT);\r\n\r\n        conflictRes = ConflictResolutionInterface(newConflictRes);\r\n        newConflictRes = 0;\r\n        updateTime = 0;\r\n\r\n        LogUpdatedConflictResolution(newConflictRes);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    /// @dev Is contract paused.\r\n    bool public paused = false;\r\n\r\n    /// @dev Time pause was called\r\n    uint public timePaused = 0;\r\n\r\n    /// @dev Modifier, which only allows function execution if not paused.\r\n    modifier onlyNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier, which only allows function execution if paused.\r\n    modifier onlyPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier, which only allows function execution if paused longer than timeSpan.\r\n    modifier onlyPausedSince(uint timeSpan) {\r\n        require(paused && timePaused + timeSpan <= block.timestamp);\r\n        _;\r\n    }\r\n\r\n    /// @dev Event is fired if paused.\r\n    event LogPause();\r\n\r\n    /// @dev Event is fired if pause is ended.\r\n    event LogUnpause();\r\n\r\n    /**\r\n     * @dev Pause contract. No new game sessions can be created.\r\n     */\r\n    function pause() public onlyOwner onlyNotPaused {\r\n        paused = true;\r\n        timePaused = block.timestamp;\r\n        LogPause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpause contract.\r\n     */\r\n    function unpause() public onlyOwner onlyPaused {\r\n        paused = false;\r\n        timePaused = 0;\r\n        LogUnpause();\r\n    }\r\n}\r\n\r\ncontract Destroyable is Pausable {\r\n    /// @dev After pausing the contract for 20 days owner can selfdestruct it.\r\n    uint public constant TIMEOUT_DESTROY = 20 days;\r\n\r\n    /**\r\n     * @dev Destroy contract and transfer ether to address _targetAddress.\r\n     */\r\n    function destroy() public onlyOwner onlyPausedSince(TIMEOUT_DESTROY) {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract GameChannelBase is Destroyable, ConflictResolutionManager {\r\n    /// @dev Different game session states.\r\n    enum GameStatus {\r\n        ENDED, ///< @dev Game session is ended.\r\n        ACTIVE, ///< @dev Game session is active.\r\n        WAITING_FOR_SERVER, ///< @dev Waiting for server to accept game session.\r\n        PLAYER_INITIATED_END, ///< @dev Player initiated non regular end.\r\n        SERVER_INITIATED_END ///< @dev Server initiated non regular end.\r\n    }\r\n\r\n    /// @dev Reason game session ended.\r\n    enum ReasonEnded {\r\n        REGULAR_ENDED, ///< @dev Game session is regularly ended.\r\n        END_FORCED_BY_SERVER, ///< @dev Player did not respond. Server forced end.\r\n        END_FORCED_BY_PLAYER, ///< @dev Server did not respond. Player forced end.\r\n        REJECTED_BY_SERVER, ///< @dev Server rejected game session.\r\n        CANCELLED_BY_PLAYER ///< @dev Player canceled game session before server accepted it.\r\n    }\r\n\r\n    struct Game {\r\n        /// @dev Game session status.\r\n        GameStatus status;\r\n\r\n        /// @dev Reason game session ended.\r\n        ReasonEnded reasonEnded;\r\n\r\n        /// @dev Player's stake.\r\n        uint stake;\r\n\r\n        /// @dev Last game round info if not regularly ended.\r\n        /// If game session is ended normally this data is not used.\r\n        uint8 gameType;\r\n        uint32 roundId;\r\n        uint16 betNum;\r\n        uint betValue;\r\n        int balance;\r\n        bytes32 playerSeed;\r\n        bytes32 serverSeed;\r\n        uint endInitiatedTime;\r\n    }\r\n\r\n    /// @dev Minimal time span between profit transfer.\r\n    uint public constant MIN_TRANSFER_TIMESPAN = 1 days;\r\n\r\n    /// @dev Maximal time span between profit transfer.\r\n    uint public constant MAX_TRANSFER_TIMSPAN = 6 * 30 days;\r\n\r\n    /// @dev Current active game sessions.\r\n    uint public activeGames = 0;\r\n\r\n    /// @dev Game session id counter. Points to next free game session slot. So gameIdCntr -1 is the\r\n    // number of game sessions created.\r\n    uint public gameIdCntr;\r\n\r\n    /// @dev Only this address can accept and end games.\r\n    address public serverAddress;\r\n\r\n    /// @dev Address to transfer profit to.\r\n    address public houseAddress;\r\n\r\n    /// @dev Current house stake.\r\n    uint public houseStake = 0;\r\n\r\n    /// @dev House profit since last profit transfer.\r\n    int public houseProfit = 0;\r\n\r\n    /// @dev Min value player needs to deposit for creating game session.\r\n    uint public minStake;\r\n\r\n    /// @dev Max value player can deposit for creating game session.\r\n    uint public maxStake;\r\n\r\n    /// @dev Timeout until next profit transfer is allowed.\r\n    uint public profitTransferTimeSpan = 14 days;\r\n\r\n    /// @dev Last time profit transferred to house.\r\n    uint public lastProfitTransferTimestamp;\r\n\r\n    bytes32 public typeHash;\r\n\r\n    /// @dev Maps gameId to game struct.\r\n    mapping (uint => Game) public gameIdGame;\r\n\r\n    /// @dev Maps player address to current player game id.\r\n    mapping (address => uint) public playerGameId;\r\n\r\n    /// @dev Maps player address to pending returns.\r\n    mapping (address => uint) public pendingReturns;\r\n\r\n    /// @dev Modifier, which only allows to execute if house stake is high enough.\r\n    modifier onlyValidHouseStake(uint _activeGames) {\r\n        uint minHouseStake = conflictRes.minHouseStake(_activeGames);\r\n        require(houseStake >= minHouseStake);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to check if value send fulfills player stake requirements.\r\n    modifier onlyValidValue() {\r\n        require(minStake <= msg.value && msg.value <= maxStake);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier, which only allows server to call function.\r\n    modifier onlyServer() {\r\n        require(msg.sender == serverAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier, which only allows to set valid transfer timeouts.\r\n    modifier onlyValidTransferTimeSpan(uint transferTimeout) {\r\n        require(transferTimeout >= MIN_TRANSFER_TIMESPAN\r\n                && transferTimeout <= MAX_TRANSFER_TIMSPAN);\r\n        _;\r\n    }\r\n\r\n    /// @dev This event is fired when player creates game session.\r\n    event LogGameCreated(address indexed player, uint indexed gameId, uint stake, bytes32 endHash);\r\n\r\n    /// @dev This event is fired when server rejects player's game.\r\n    event LogGameRejected(address indexed player, uint indexed gameId);\r\n\r\n    /// @dev This event is fired when server accepts player's game.\r\n    event LogGameAccepted(address indexed player, uint indexed gameId, bytes32 endHash);\r\n\r\n    /// @dev This event is fired when player requests conflict end.\r\n    event LogPlayerRequestedEnd(address indexed player, uint indexed gameId);\r\n\r\n    /// @dev This event is fired when server requests conflict end.\r\n    event LogServerRequestedEnd(address indexed player, uint indexed gameId);\r\n\r\n    /// @dev This event is fired when game session is ended.\r\n    event LogGameEnded(address indexed player, uint indexed gameId, ReasonEnded reason);\r\n\r\n    /// @dev this event is fired when owner modifies player's stake limits.\r\n    event LogStakeLimitsModified(uint minStake, uint maxStake);\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param _serverAddress Server address.\r\n     * @param _minStake Min value player needs to deposit to create game session.\r\n     * @param _maxStake Max value player can deposit to create game session.\r\n     * @param _conflictResAddress Conflict resolution contract address.\r\n     * @param _houseAddress House address to move profit to.\r\n     */\r\n    function GameChannelBase(\r\n        address _serverAddress,\r\n        uint _minStake,\r\n        uint _maxStake,\r\n        address _conflictResAddress,\r\n        address _houseAddress,\r\n        uint _gameIdCntr\r\n    )\r\n        public\r\n        ConflictResolutionManager(_conflictResAddress)\r\n    {\r\n        require(_minStake > 0 && _minStake <= _maxStake);\r\n        require(_gameIdCntr > 0);\r\n\r\n        gameIdCntr = _gameIdCntr;\r\n        serverAddress = _serverAddress;\r\n        houseAddress = _houseAddress;\r\n        lastProfitTransferTimestamp = block.timestamp;\r\n        minStake = _minStake;\r\n        maxStake = _maxStake;\r\n\r\n        typeHash = keccak256(\r\n            \"uint32 Round Id\",\r\n            \"uint8 Game Type\",\r\n            \"uint16 Number\",\r\n            \"uint Value (Wei)\",\r\n            \"int Current Balance (Wei)\",\r\n            \"bytes32 Server Hash\",\r\n            \"bytes32 Player Hash\",\r\n            \"uint Game Id\",\r\n            \"address Contract Address\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw pending returns.\r\n     */\r\n    function withdraw() public {\r\n        uint toTransfer = pendingReturns[msg.sender];\r\n        require(toTransfer > 0);\r\n\r\n        pendingReturns[msg.sender] = 0;\r\n        msg.sender.transfer(toTransfer);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer house profit to houseAddress.\r\n     */\r\n    function transferProfitToHouse() public {\r\n        require(lastProfitTransferTimestamp + profitTransferTimeSpan <= block.timestamp);\r\n\r\n        if (houseProfit <= 0) {\r\n            // update last transfer timestamp\r\n            lastProfitTransferTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        // houseProfit is gt 0 => safe to cast\r\n        uint toTransfer = uint(houseProfit);\r\n        assert(houseStake >= toTransfer);\r\n\r\n        houseProfit = 0;\r\n        lastProfitTransferTimestamp = block.timestamp;\r\n        houseStake = houseStake - toTransfer;\r\n\r\n        houseAddress.transfer(toTransfer);\r\n    }\r\n\r\n    /**\r\n     * @dev Set profit transfer time span.\r\n     */\r\n    function setProfitTransferTimeSpan(uint _profitTransferTimeSpan)\r\n        public\r\n        onlyOwner\r\n        onlyValidTransferTimeSpan(_profitTransferTimeSpan)\r\n    {\r\n        profitTransferTimeSpan = _profitTransferTimeSpan;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase house stake by msg.value\r\n     */\r\n    function addHouseStake() public payable onlyOwner {\r\n        houseStake += msg.value;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw house stake.\r\n     */\r\n    function withdrawHouseStake(uint value) public onlyOwner {\r\n        uint minHouseStake = conflictRes.minHouseStake(activeGames);\r\n\r\n        require(value <= houseStake && houseStake - value >= minHouseStake);\r\n        require(houseProfit <= 0 || uint(houseProfit) <= houseStake - value);\r\n\r\n        houseStake = houseStake - value;\r\n        owner.transfer(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw house stake and profit.\r\n     */\r\n    function withdrawAll() public onlyOwner onlyPausedSince(3 days) {\r\n        houseProfit = 0;\r\n        uint toTransfer = houseStake;\r\n        houseStake = 0;\r\n        owner.transfer(toTransfer);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new house address.\r\n     * @param _houseAddress New house address.\r\n     */\r\n    function setHouseAddress(address _houseAddress) public onlyOwner {\r\n        houseAddress = _houseAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Set stake min and max value.\r\n     * @param _minStake Min stake.\r\n     * @param _maxStake Max stake.\r\n     */\r\n    function setStakeRequirements(uint _minStake, uint _maxStake) public onlyOwner {\r\n        require(_minStake > 0 && _minStake <= _maxStake);\r\n        minStake = _minStake;\r\n        maxStake = _maxStake;\r\n        LogStakeLimitsModified(minStake, maxStake);\r\n    }\r\n\r\n    /**\r\n     * @dev Close game session.\r\n     * @param _game Game session data.\r\n     * @param _gameId Id of game session.\r\n     * @param _playerAddress Player's address of game session.\r\n     * @param _reason Reason for closing game session.\r\n     * @param _balance Game session balance.\r\n     */\r\n    function closeGame(\r\n        Game storage _game,\r\n        uint _gameId,\r\n        address _playerAddress,\r\n        ReasonEnded _reason,\r\n        int _balance\r\n    )\r\n        internal\r\n    {\r\n        _game.status = GameStatus.ENDED;\r\n        _game.reasonEnded = _reason;\r\n        _game.balance = _balance;\r\n\r\n        assert(activeGames > 0);\r\n        activeGames = activeGames - 1;\r\n\r\n        LogGameEnded(_playerAddress, _gameId, _reason);\r\n    }\r\n\r\n    /**\r\n     * @dev End game by paying out player and server.\r\n     * @param _game Game session to payout.\r\n     * @param _playerAddress Player's address.\r\n     */\r\n    function payOut(Game storage _game, address _playerAddress) internal {\r\n        assert(_game.balance <= conflictRes.maxBalance());\r\n        assert(_game.status == GameStatus.ENDED);\r\n        assert(_game.stake <= maxStake);\r\n        assert((int(_game.stake) + _game.balance) >= 0);\r\n\r\n        uint valuePlayer = uint(int(_game.stake) + _game.balance);\r\n\r\n        if (_game.balance > 0 && int(houseStake) < _game.balance) {\r\n            // Should never happen!\r\n            // House is bankrupt.\r\n            // Payout left money.\r\n            valuePlayer = houseStake;\r\n        }\r\n\r\n        houseProfit = houseProfit - _game.balance;\r\n\r\n        int newHouseStake = int(houseStake) - _game.balance;\r\n        assert(newHouseStake >= 0);\r\n        houseStake = uint(newHouseStake);\r\n\r\n        pendingReturns[_playerAddress] += valuePlayer;\r\n        if (pendingReturns[_playerAddress] > 0) {\r\n            safeSend(_playerAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Send value of pendingReturns[_address] to _address.\r\n     * @param _address Address to send value to.\r\n     */\r\n    function safeSend(address _address) internal {\r\n        uint valueToSend = pendingReturns[_address];\r\n        assert(valueToSend > 0);\r\n\r\n        pendingReturns[_address] = 0;\r\n        if (_address.send(valueToSend) == false) {\r\n            pendingReturns[_address] = valueToSend;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Verify signature of given data. Throws on verification failure.\r\n     * @param _sig Signature of given data in the form of rsv.\r\n     * @param _address Address of signature signer.\r\n     */\r\n    function verifySig(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        uint _gameId,\r\n        address _contractAddress,\r\n        bytes _sig,\r\n        address _address\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        // check if this is the correct contract\r\n        address contractAddress = this;\r\n        require(_contractAddress == contractAddress);\r\n\r\n        bytes32 roundHash = calcHash(\r\n                _roundId,\r\n                _gameType,\r\n                _num,\r\n                _value,\r\n                _balance,\r\n                _serverHash,\r\n                _playerHash,\r\n                _gameId,\r\n                _contractAddress\r\n        );\r\n\r\n        verify(\r\n                roundHash,\r\n                _sig,\r\n                _address\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate typed hash of given data (compare eth_signTypedData).\r\n     * @return Hash of given data.\r\n     */\r\n    function calcHash(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        uint _gameId,\r\n        address _contractAddress\r\n    )\r\n        private\r\n        view\r\n        returns(bytes32)\r\n    {\r\n        bytes32 dataHash = keccak256(\r\n            _roundId,\r\n            _gameType,\r\n            _num,\r\n            _value,\r\n            _balance,\r\n            _serverHash,\r\n            _playerHash,\r\n            _gameId,\r\n            _contractAddress\r\n        );\r\n\r\n        return keccak256(typeHash, dataHash);\r\n    }\r\n\r\n     /**\r\n     * @dev Check if _sig is valid signature of _hash. Throws if invalid signature.\r\n     * @param _hash Hash to check signature of.\r\n     * @param _sig Signature of _hash.\r\n     * @param _address Address of signer.\r\n     */\r\n    function verify(\r\n        bytes32 _hash,\r\n        bytes _sig,\r\n        address _address\r\n    )\r\n        private\r\n        pure\r\n    {\r\n        var (r, s, v) = signatureSplit(_sig);\r\n        address addressRecover = ecrecover(_hash, v, r, s);\r\n        require(addressRecover == _address);\r\n    }\r\n\r\n    /**\r\n     * @dev Split the given signature of the form rsv in r s v. v is incremented with 27 if\r\n     * it is below 2.\r\n     * @param _signature Signature to split.\r\n     * @return r s v\r\n     */\r\n    function signatureSplit(bytes _signature)\r\n        private\r\n        pure\r\n        returns (bytes32 r, bytes32 s, uint8 v)\r\n    {\r\n        require(_signature.length == 65);\r\n\r\n        assembly {\r\n            r := mload(add(_signature, 32))\r\n            s := mload(add(_signature, 64))\r\n            v := and(mload(add(_signature, 65)), 0xff)\r\n        }\r\n        if (v < 2) {\r\n            v = v + 27;\r\n        }\r\n    }\r\n}\r\n\r\ncontract GameChannelConflict is GameChannelBase {\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param _serverAddress Server address.\r\n     * @param _minStake Min value player needs to deposit to create game session.\r\n     * @param _maxStake Max value player can deposit to create game session.\r\n     * @param _conflictResAddress Conflict resolution contract address\r\n     * @param _houseAddress House address to move profit to\r\n     */\r\n    function GameChannelConflict(\r\n        address _serverAddress,\r\n        uint _minStake,\r\n        uint _maxStake,\r\n        address _conflictResAddress,\r\n        address _houseAddress,\r\n        uint _gameIdCtr\r\n    )\r\n        public\r\n        GameChannelBase(_serverAddress, _minStake, _maxStake, _conflictResAddress, _houseAddress, _gameIdCtr)\r\n    {\r\n        // nothing to do\r\n    }\r\n\r\n    /**\r\n     * @dev Used by server if player does not end game session.\r\n     * @param _roundId Round id of bet.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Balance before this bet.\r\n     * @param _serverHash Hash of server seed for this bet.\r\n     * @param _playerHash Hash of player seed for this bet.\r\n     * @param _gameId Game session id.\r\n     * @param _contractAddress Address of this contract.\r\n     * @param _playerSig Player signature of this bet.\r\n     * @param _playerAddress Address of player.\r\n     * @param _serverSeed Server seed for this bet.\r\n     * @param _playerSeed Player seed for this bet.\r\n     */\r\n    function serverEndGameConflict(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        uint _gameId,\r\n        address _contractAddress,\r\n        bytes _playerSig,\r\n        address _playerAddress,\r\n        bytes32 _serverSeed,\r\n        bytes32 _playerSeed\r\n    )\r\n        public\r\n        onlyServer\r\n    {\r\n        verifySig(\r\n                _roundId,\r\n                _gameType,\r\n                _num,\r\n                _value,\r\n                _balance,\r\n                _serverHash,\r\n                _playerHash,\r\n                _gameId,\r\n                _contractAddress,\r\n                _playerSig,\r\n                _playerAddress\r\n        );\r\n\r\n        serverEndGameConflictImpl(\r\n                _roundId,\r\n                _gameType,\r\n                _num,\r\n                _value,\r\n                _balance,\r\n                _serverHash,\r\n                _playerHash,\r\n                _serverSeed,\r\n                _playerSeed,\r\n                _gameId,\r\n                _playerAddress\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Can be used by player if server does not answer to the end game session request.\r\n     * @param _roundId Round id of bet.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Balance before this bet.\r\n     * @param _serverHash Hash of server seed for this bet.\r\n     * @param _playerHash Hash of player seed for this bet.\r\n     * @param _gameId Game session id.\r\n     * @param _contractAddress Address of this contract.\r\n     * @param _serverSig Server signature of this bet.\r\n     * @param _playerSeed Player seed for this bet.\r\n     */\r\n    function playerEndGameConflict(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        uint _gameId,\r\n        address _contractAddress,\r\n        bytes _serverSig,\r\n        bytes32 _playerSeed\r\n    )\r\n        public\r\n    {\r\n        verifySig(\r\n            _roundId,\r\n            _gameType,\r\n            _num,\r\n            _value,\r\n            _balance,\r\n            _serverHash,\r\n            _playerHash,\r\n            _gameId,\r\n            _contractAddress,\r\n            _serverSig,\r\n            serverAddress\r\n        );\r\n\r\n        playerEndGameConflictImpl(\r\n            _roundId,\r\n            _gameType,\r\n            _num,\r\n            _value,\r\n            _balance,\r\n            _playerHash,\r\n            _playerSeed,\r\n            _gameId,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel active game without playing. Useful if server stops responding before\r\n     * one game is played.\r\n     * @param _gameId Game session id.\r\n     */\r\n    function playerCancelActiveGame(uint _gameId) public {\r\n        address playerAddress = msg.sender;\r\n        uint gameId = playerGameId[playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(gameId == _gameId);\r\n\r\n        if (game.status == GameStatus.ACTIVE) {\r\n            game.endInitiatedTime = block.timestamp;\r\n            game.status = GameStatus.PLAYER_INITIATED_END;\r\n\r\n            LogPlayerRequestedEnd(msg.sender, gameId);\r\n        } else if (game.status == GameStatus.SERVER_INITIATED_END && game.roundId == 0) {\r\n            closeGame(game, gameId, playerAddress, ReasonEnded.REGULAR_ENDED, 0);\r\n            payOut(game, playerAddress);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel active game without playing. Useful if player starts game session and\r\n     * does not play.\r\n     * @param _playerAddress Players' address.\r\n     * @param _gameId Game session id.\r\n     */\r\n    function serverCancelActiveGame(address _playerAddress, uint _gameId) public onlyServer {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(gameId == _gameId);\r\n\r\n        if (game.status == GameStatus.ACTIVE) {\r\n            game.endInitiatedTime = block.timestamp;\r\n            game.status = GameStatus.SERVER_INITIATED_END;\r\n\r\n            LogServerRequestedEnd(msg.sender, gameId);\r\n        } else if (game.status == GameStatus.PLAYER_INITIATED_END && game.roundId == 0) {\r\n            closeGame(game, gameId, _playerAddress, ReasonEnded.REGULAR_ENDED, 0);\r\n            payOut(game, _playerAddress);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Force end of game if player does not respond. Only possible after a certain period of time\r\n    * to give the player a chance to respond.\r\n    * @param _playerAddress Player's address.\r\n    */\r\n    function serverForceGameEnd(address _playerAddress, uint _gameId) public onlyServer {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(gameId == _gameId);\r\n        require(game.status == GameStatus.SERVER_INITIATED_END);\r\n\r\n        // theoretically we have enough data to calculate winner\r\n        // but as player did not respond assume he has lost.\r\n        int newBalance = conflictRes.serverForceGameEnd(\r\n            game.gameType,\r\n            game.betNum,\r\n            game.betValue,\r\n            game.balance,\r\n            game.stake,\r\n            game.endInitiatedTime\r\n        );\r\n\r\n        closeGame(game, gameId, _playerAddress, ReasonEnded.END_FORCED_BY_SERVER, newBalance);\r\n        payOut(game, _playerAddress);\r\n    }\r\n\r\n    /**\r\n    * @notice Force end of game if server does not respond. Only possible after a certain period of time\r\n    * to give the server a chance to respond.\r\n    */\r\n    function playerForceGameEnd(uint _gameId) public {\r\n        address playerAddress = msg.sender;\r\n        uint gameId = playerGameId[playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(gameId == _gameId);\r\n        require(game.status == GameStatus.PLAYER_INITIATED_END);\r\n\r\n        int newBalance = conflictRes.playerForceGameEnd(\r\n            game.gameType,\r\n            game.betNum,\r\n            game.betValue,\r\n            game.balance,\r\n            game.stake,\r\n            game.endInitiatedTime\r\n        );\r\n\r\n        closeGame(game, gameId, playerAddress, ReasonEnded.END_FORCED_BY_PLAYER, newBalance);\r\n        payOut(game, playerAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Conflict handling implementation. Stores game data and timestamp if game\r\n     * is active. If server has already marked conflict for game session the conflict\r\n     * resolution contract is used (compare conflictRes).\r\n     * @param _roundId Round id of bet.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Balance before this bet.\r\n     * @param _playerHash Hash of player's seed for this bet.\r\n     * @param _playerSeed Player's seed for this bet.\r\n     * @param _gameId game Game session id.\r\n     * @param _playerAddress Player's address.\r\n     */\r\n    function playerEndGameConflictImpl(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _playerHash,\r\n        bytes32 _playerSeed,\r\n        uint _gameId,\r\n        address _playerAddress\r\n    )\r\n        private\r\n    {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n        int maxBalance = conflictRes.maxBalance();\r\n\r\n        require(gameId == _gameId);\r\n        require(_roundId > 0);\r\n        require(keccak256(_playerSeed) == _playerHash);\r\n        require(_value <= game.stake);\r\n        require(-int(game.stake) <= _balance && _balance <= maxBalance); // save to cast as ranges are fixed\r\n        require(int(game.stake) + _balance - int(_value) >= 0); // save to cast as ranges are fixed\r\n        require(conflictRes.isValidBet(_gameType, _num, _value));\r\n\r\n        if (game.status == GameStatus.SERVER_INITIATED_END && game.roundId == _roundId) {\r\n            game.playerSeed = _playerSeed;\r\n            endGameConflict(game, gameId, _playerAddress);\r\n        } else if (game.status == GameStatus.ACTIVE\r\n                || (game.status == GameStatus.SERVER_INITIATED_END && game.roundId < _roundId)) {\r\n            game.status = GameStatus.PLAYER_INITIATED_END;\r\n            game.endInitiatedTime = block.timestamp;\r\n            game.roundId = _roundId;\r\n            game.gameType = _gameType;\r\n            game.betNum = _num;\r\n            game.betValue = _value;\r\n            game.balance = _balance;\r\n            game.playerSeed = _playerSeed;\r\n            game.serverSeed = bytes32(0);\r\n\r\n            LogPlayerRequestedEnd(msg.sender, gameId);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Conflict handling implementation. Stores game data and timestamp if game\r\n     * is active. If player has already marked conflict for game session the conflict\r\n     * resolution contract is used (compare conflictRes).\r\n     * @param _roundId Round id of bet.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Balance before this bet.\r\n     * @param _serverHash Hash of server's seed for this bet.\r\n     * @param _playerHash Hash of player's seed for this bet.\r\n     * @param _serverSeed Server's seed for this bet.\r\n     * @param _playerSeed Player's seed for this bet.\r\n     * @param _playerAddress Player's address.\r\n     */\r\n    function serverEndGameConflictImpl(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        bytes32 _serverSeed,\r\n        bytes32 _playerSeed,\r\n        uint _gameId,\r\n        address _playerAddress\r\n    )\r\n        private\r\n    {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n        int maxBalance = conflictRes.maxBalance();\r\n\r\n        require(gameId == _gameId);\r\n        require(_roundId > 0);\r\n        require(keccak256(_serverSeed) == _serverHash);\r\n        require(keccak256(_playerSeed) == _playerHash);\r\n        require(_value <= game.stake);\r\n        require(-int(game.stake) <= _balance && _balance <= maxBalance); // save to cast as ranges are fixed\r\n        require(int(game.stake) + _balance - int(_value) >= 0); // save to cast as ranges are fixed\r\n        require(conflictRes.isValidBet(_gameType, _num, _value));\r\n\r\n\r\n        if (game.status == GameStatus.PLAYER_INITIATED_END && game.roundId == _roundId) {\r\n            game.serverSeed = _serverSeed;\r\n            endGameConflict(game, gameId, _playerAddress);\r\n        } else if (game.status == GameStatus.ACTIVE\r\n                || (game.status == GameStatus.PLAYER_INITIATED_END && game.roundId < _roundId)) {\r\n            game.status = GameStatus.SERVER_INITIATED_END;\r\n            game.endInitiatedTime = block.timestamp;\r\n            game.roundId = _roundId;\r\n            game.gameType = _gameType;\r\n            game.betNum = _num;\r\n            game.betValue = _value;\r\n            game.balance = _balance;\r\n            game.serverSeed = _serverSeed;\r\n            game.playerSeed = _playerSeed;\r\n\r\n            LogServerRequestedEnd(_playerAddress, gameId);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev End conflicting game.\r\n     * @param _game Game session data.\r\n     * @param _gameId Game session id.\r\n     * @param _playerAddress Player's address.\r\n     */\r\n    function endGameConflict(Game storage _game, uint _gameId, address _playerAddress) private {\r\n        int newBalance = conflictRes.endGameConflict(\r\n            _game.gameType,\r\n            _game.betNum,\r\n            _game.betValue,\r\n            _game.balance,\r\n            _game.stake,\r\n            _game.serverSeed,\r\n            _game.playerSeed\r\n        );\r\n\r\n        closeGame(_game, _gameId, _playerAddress, ReasonEnded.REGULAR_ENDED, newBalance);\r\n        payOut(_game, _playerAddress);\r\n    }\r\n}\r\n\r\ncontract GameChannel is GameChannelConflict {\r\n    /**\r\n     * @dev contract constructor\r\n     * @param _serverAddress Server address.\r\n     * @param _minStake Min value player needs to deposit to create game session.\r\n     * @param _maxStake Max value player can deposit to create game session.\r\n     * @param _conflictResAddress Conflict resolution contract address.\r\n     * @param _houseAddress House address to move profit to.\r\n     */\r\n    function GameChannel(\r\n        address _serverAddress,\r\n        uint _minStake,\r\n        uint _maxStake,\r\n        address _conflictResAddress,\r\n        address _houseAddress,\r\n        uint _gameIdCntr\r\n    )\r\n        public\r\n        GameChannelConflict(_serverAddress, _minStake, _maxStake, _conflictResAddress, _houseAddress, _gameIdCntr)\r\n    {\r\n        // nothing to do\r\n    }\r\n\r\n    /**\r\n     * @notice Create games session request. msg.value needs to be valid stake value.\r\n     * @param _endHash Last hash of the hash chain generated by the player.\r\n     */\r\n    function createGame(bytes32 _endHash)\r\n        public\r\n        payable\r\n        onlyValidValue\r\n        onlyValidHouseStake(activeGames + 1)\r\n        onlyNotPaused\r\n    {\r\n        address playerAddress = msg.sender;\r\n        uint previousGameId = playerGameId[playerAddress];\r\n        Game storage game = gameIdGame[previousGameId];\r\n\r\n        require(game.status == GameStatus.ENDED);\r\n\r\n        uint gameId = gameIdCntr++;\r\n        playerGameId[playerAddress] = gameId;\r\n        Game storage newGame = gameIdGame[gameId];\r\n\r\n        newGame.stake = msg.value;\r\n        newGame.status = GameStatus.WAITING_FOR_SERVER;\r\n\r\n        activeGames = activeGames + 1;\r\n\r\n        LogGameCreated(playerAddress, gameId, msg.value, _endHash);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel game session waiting for server acceptance.\r\n     * @param _gameId Game session id.\r\n     */\r\n    function cancelGame(uint _gameId) public {\r\n        address playerAddress = msg.sender;\r\n        uint gameId = playerGameId[playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(gameId == _gameId);\r\n        require(game.status == GameStatus.WAITING_FOR_SERVER);\r\n\r\n        closeGame(game, gameId, playerAddress, ReasonEnded.CANCELLED_BY_PLAYER, 0);\r\n        payOut(game, playerAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the server to reject game session created by player with address\r\n     * _playerAddress.\r\n     * @param _playerAddress Players's address who created the game session.\r\n     * @param _gameId Game session id.\r\n     */\r\n    function rejectGame(address _playerAddress, uint _gameId) public onlyServer {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(_gameId == gameId);\r\n        require(game.status == GameStatus.WAITING_FOR_SERVER);\r\n\r\n        closeGame(game, gameId, _playerAddress, ReasonEnded.REJECTED_BY_SERVER, 0);\r\n        payOut(game, _playerAddress);\r\n\r\n        LogGameRejected(_playerAddress, gameId);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by server to accept game session created by player with\r\n     * address _playerAddress.\r\n     * @param _playerAddress Player's address who created the game.\r\n     * @param _gameId Game id of game session.\r\n     * @param _endHash Last hash of the hash chain generated by the server.\r\n     */\r\n    function acceptGame(address _playerAddress, uint _gameId, bytes32 _endHash)\r\n        public\r\n        onlyServer\r\n    {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n\r\n        require(_gameId == gameId);\r\n        require(game.status == GameStatus.WAITING_FOR_SERVER);\r\n\r\n        game.status = GameStatus.ACTIVE;\r\n\r\n        LogGameAccepted(_playerAddress, gameId, _endHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Regular end game session. Used if player and house have both\r\n     * accepted current game session state.\r\n     * The game session with gameId _gameId is closed\r\n     * and the player paid out. This functions is called by the server after\r\n     * the player requested the termination of the current game session.\r\n     * @param _roundId Round id of bet.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _serverHash Hash of server's seed for this bet.\r\n     * @param _playerHash Hash of player's seed for this bet.\r\n     * @param _gameId Game session id.\r\n     * @param _contractAddress Address of this contract.\r\n     * @param _playerAddress Address of player.\r\n     * @param _playerSig Player's signature of this bet.\r\n     */\r\n    function serverEndGame(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        uint _gameId,\r\n        address _contractAddress,\r\n        address _playerAddress,\r\n        bytes _playerSig\r\n    )\r\n        public\r\n        onlyServer\r\n    {\r\n        verifySig(\r\n                _roundId,\r\n                _gameType,\r\n                _num,\r\n                _value,\r\n                _balance,\r\n                _serverHash,\r\n                _playerHash,\r\n                _gameId,\r\n                _contractAddress,\r\n                _playerSig,\r\n                _playerAddress\r\n        );\r\n\r\n        regularEndGame(_playerAddress, _roundId, _gameType, _num, _value, _balance, _gameId, _contractAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Regular end game session. Normally not needed as server ends game (@see serverEndGame).\r\n     * Can be used by player if server does not end game session.\r\n     * @param _roundId Round id of bet.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _serverHash Hash of server's seed for this bet.\r\n     * @param _playerHash Hash of player's seed for this bet.\r\n     * @param _gameId Game session id.\r\n     * @param _contractAddress Address of this contract.\r\n     * @param _serverSig Server's signature of this bet.\r\n     */\r\n    function playerEndGame(\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        bytes32 _serverHash,\r\n        bytes32 _playerHash,\r\n        uint _gameId,\r\n        address _contractAddress,\r\n        bytes _serverSig\r\n    )\r\n        public\r\n    {\r\n        verifySig(\r\n                _roundId,\r\n                _gameType,\r\n                _num,\r\n                _value,\r\n                _balance,\r\n                _serverHash,\r\n                _playerHash,\r\n                _gameId,\r\n                _contractAddress,\r\n                _serverSig,\r\n                serverAddress\r\n        );\r\n\r\n        regularEndGame(msg.sender, _roundId, _gameType, _num, _value, _balance, _gameId, _contractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Regular end game session implementation. Used if player and house have both\r\n     * accepted current game session state. The game session with gameId _gameId is closed\r\n     * and the player paid out.\r\n     * @param _playerAddress Address of player.\r\n     * @param _gameType Game type of bet.\r\n     * @param _num Number of bet.\r\n     * @param _value Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _gameId Game session id.\r\n     * @param _contractAddress Address of this contract.\r\n     */\r\n    function regularEndGame(\r\n        address _playerAddress,\r\n        uint32 _roundId,\r\n        uint8 _gameType,\r\n        uint16 _num,\r\n        uint _value,\r\n        int _balance,\r\n        uint _gameId,\r\n        address _contractAddress\r\n    )\r\n        private\r\n    {\r\n        uint gameId = playerGameId[_playerAddress];\r\n        Game storage game = gameIdGame[gameId];\r\n        address contractAddress = this;\r\n        int maxBalance = conflictRes.maxBalance();\r\n\r\n        require(_gameId == gameId);\r\n        require(_roundId > 0);\r\n        // save to cast as game.stake hash fixed range\r\n        require(-int(game.stake) <= _balance && _balance <= maxBalance);\r\n        require((_gameType == 0) && (_num == 0) && (_value == 0));\r\n        require(_contractAddress == contractAddress);\r\n        require(game.status == GameStatus.ACTIVE);\r\n\r\n        closeGame(game, gameId, _playerAddress, ReasonEnded.REGULAR_ENDED, _balance);\r\n        payOut(game, _playerAddress);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_roundId\",\"type\":\"uint32\"},{\"name\":\"_gameType\",\"type\":\"uint8\"},{\"name\":\"_num\",\"type\":\"uint16\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"int256\"},{\"name\":\"_serverHash\",\"type\":\"bytes32\"},{\"name\":\"_playerHash\",\"type\":\"bytes32\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_serverSig\",\"type\":\"bytes\"},{\"name\":\"_playerSeed\",\"type\":\"bytes32\"}],\"name\":\"playerEndGameConflict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TRANSFER_TIMESPAN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitTransferTimeSpan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastProfitTransferTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endHash\",\"type\":\"bytes32\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addHouseStake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conflictRes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"playerForceGameEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawHouseStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameIdGame\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"reasonEnded\",\"type\":\"uint8\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"gameType\",\"type\":\"uint8\"},{\"name\":\"roundId\",\"type\":\"uint32\"},{\"name\":\"betNum\",\"type\":\"uint16\"},{\"name\":\"betValue\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"int256\"},{\"name\":\"playerSeed\",\"type\":\"bytes32\"},{\"name\":\"serverSeed\",\"type\":\"bytes32\"},{\"name\":\"endInitiatedTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minStake\",\"type\":\"uint256\"},{\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"setStakeRequirements\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TRANSFER_TIMSPAN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitTransferTimeSpan\",\"type\":\"uint256\"}],\"name\":\"setProfitTransferTimeSpan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateConflictResolution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newConflictRes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"serverCancelActiveGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundId\",\"type\":\"uint32\"},{\"name\":\"_gameType\",\"type\":\"uint8\"},{\"name\":\"_num\",\"type\":\"uint16\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"int256\"},{\"name\":\"_serverHash\",\"type\":\"bytes32\"},{\"name\":\"_playerHash\",\"type\":\"bytes32\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_serverSig\",\"type\":\"bytes\"}],\"name\":\"playerEndGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"playerCancelActiveGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundId\",\"type\":\"uint32\"},{\"name\":\"_gameType\",\"type\":\"uint8\"},{\"name\":\"_num\",\"type\":\"uint16\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"int256\"},{\"name\":\"_serverHash\",\"type\":\"bytes32\"},{\"name\":\"_playerHash\",\"type\":\"bytes32\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_playerSig\",\"type\":\"bytes\"},{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"name\":\"_playerSeed\",\"type\":\"bytes32\"}],\"name\":\"serverEndGameConflict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMEOUT_DESTROY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_endHash\",\"type\":\"bytes32\"}],\"name\":\"acceptGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newConflictResAddress\",\"type\":\"address\"}],\"name\":\"updateConflictResolution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"serverForceGameEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundId\",\"type\":\"uint32\"},{\"name\":\"_gameType\",\"type\":\"uint8\"},{\"name\":\"_num\",\"type\":\"uint16\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"int256\"},{\"name\":\"_serverHash\",\"type\":\"bytes32\"},{\"name\":\"_playerHash\",\"type\":\"bytes32\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_playerSig\",\"type\":\"bytes\"}],\"name\":\"serverEndGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TIMEOUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"setHouseAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameIdCntr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"rejectGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferProfitToHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_serverAddress\",\"type\":\"address\"},{\"name\":\"_minStake\",\"type\":\"uint256\"},{\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"name\":\"_conflictResAddress\",\"type\":\"address\"},{\"name\":\"_houseAddress\",\"type\":\"address\"},{\"name\":\"_gameIdCntr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endHash\",\"type\":\"bytes32\"}],\"name\":\"LogGameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"LogGameRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endHash\",\"type\":\"bytes32\"}],\"name\":\"LogGameAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"LogPlayerRequestedEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"LogServerRequestedEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"LogGameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxStake\",\"type\":\"uint256\"}],\"name\":\"LogStakeLimitsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newConflictResolutionAddress\",\"type\":\"address\"}],\"name\":\"LogUpdatingConflictResolution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newConflictResolutionAddress\",\"type\":\"address\"}],\"name\":\"LogUpdatedConflictResolution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferred\",\"type\":\"event\"}]","ContractName":"GameChannel","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cef260a5fed7a896bbe07b933b3a5c17aec094d8000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000007e4d9a47477ea0ad97971595957d52cc0f58d99100000000000000000000000071be1ace87248f3950bdfc4c89b4b3eed059f6f30000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://682898e219c188e1a3941dd8f5783501c9a3ad591c994b6aa3936c1180689e32"}]}