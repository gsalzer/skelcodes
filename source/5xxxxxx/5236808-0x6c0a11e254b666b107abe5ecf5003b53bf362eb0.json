{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract BdpBaseData {\r\n\r\n\taddress public ownerAddress;\r\n\r\n\taddress public managerAddress;\r\n\r\n\taddress[16] public contracts;\r\n\r\n\tbool public paused = false;\r\n\r\n\tbool public setupComplete = false;\r\n\r\n\tbytes8 public version;\r\n\r\n}\r\nlibrary BdpContracts {\r\n\r\n\tfunction getBdpEntryPoint(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[0];\r\n\t}\r\n\r\n\tfunction getBdpController(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[1];\r\n\t}\r\n\r\n\tfunction getBdpControllerHelper(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[3];\r\n\t}\r\n\r\n\tfunction getBdpDataStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[4];\r\n\t}\r\n\r\n\tfunction getBdpImageStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[5];\r\n\t}\r\n\r\n\tfunction getBdpOwnershipStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[6];\r\n\t}\r\n\r\n\tfunction getBdpPriceStorage(address[16] _contracts) pure internal returns (address) {\r\n\t\treturn _contracts[7];\r\n\t}\r\n\r\n}\r\n\r\ncontract BdpBase is BdpBaseData {\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == ownerAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyAuthorized() {\r\n\t\trequire(msg.sender == ownerAddress || msg.sender == managerAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenContractActive() {\r\n\t\trequire(!paused && setupComplete);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier storageAccessControl() {\r\n\t\trequire(\r\n\t\t\t(! setupComplete && (msg.sender == ownerAddress || msg.sender == managerAddress))\r\n\t\t\t|| (setupComplete && !paused && (msg.sender == BdpContracts.getBdpEntryPoint(contracts)))\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setOwner(address _newOwner) external onlyOwner {\r\n\t\trequire(_newOwner != address(0));\r\n\t\townerAddress = _newOwner;\r\n\t}\r\n\r\n\tfunction setManager(address _newManager) external onlyOwner {\r\n\t\trequire(_newManager != address(0));\r\n\t\tmanagerAddress = _newManager;\r\n\t}\r\n\r\n\tfunction setContracts(address[16] _contracts) external onlyOwner {\r\n\t\tcontracts = _contracts;\r\n\t}\r\n\r\n\tfunction pause() external onlyAuthorized {\r\n\t\tpaused = true;\r\n\t}\r\n\r\n\tfunction unpause() external onlyOwner {\r\n\t\tpaused = false;\r\n\t}\r\n\r\n\tfunction setSetupComplete() external onlyOwner {\r\n\t\tsetupComplete = true;\r\n\t}\r\n\r\n\tfunction kill() public onlyOwner {\r\n\t\tselfdestruct(ownerAddress);\r\n\t}\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BdpDataStorage is BdpBase {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Region {\r\n\t\tuint256 x1;\r\n\t\tuint256 y1;\r\n\t\tuint256 x2;\r\n\t\tuint256 y2;\r\n\t\tuint256 currentImageId;\r\n\t\tuint256 nextImageId;\r\n\t\tuint8[128] url;\r\n\t\tuint256 currentPixelPrice;\r\n\t\tuint256 blockUpdatedAt;\r\n\t\tuint256 updatedAt;\r\n\t\tuint256 purchasedAt;\r\n\t\tuint256 purchasedPixelPrice;\r\n\t}\r\n\r\n\tuint256 public lastRegionId = 0;\r\n\r\n\tmapping (uint256 => Region) public data;\r\n\r\n\r\n\tfunction getLastRegionId() view public returns (uint256) {\r\n\t\treturn lastRegionId;\r\n\t}\r\n\r\n\tfunction getNextRegionId() public storageAccessControl returns (uint256) {\r\n\t\tlastRegionId = lastRegionId.add(1);\r\n\t\treturn lastRegionId;\r\n\t}\r\n\r\n\tfunction deleteRegionData(uint256 _id) public storageAccessControl {\r\n\t\tdelete data[_id];\r\n\t}\r\n\r\n\tfunction getRegionCoordinates(uint256 _id) view public returns (uint256, uint256, uint256, uint256) {\r\n\t\treturn (data[_id].x1, data[_id].y1, data[_id].x2, data[_id].y2);\r\n\t}\r\n\r\n\tfunction setRegionCoordinates(uint256 _id, uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) public storageAccessControl {\r\n\t\tdata[_id].x1 = _x1;\r\n\t\tdata[_id].y1 = _y1;\r\n\t\tdata[_id].x2 = _x2;\r\n\t\tdata[_id].y2 = _y2;\r\n\t}\r\n\r\n\tfunction getRegionCurrentImageId(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].currentImageId;\r\n\t}\r\n\r\n\tfunction setRegionCurrentImageId(uint256 _id, uint256 _currentImageId) public storageAccessControl {\r\n\t\tdata[_id].currentImageId = _currentImageId;\r\n\t}\r\n\r\n\tfunction getRegionNextImageId(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].nextImageId;\r\n\t}\r\n\r\n\tfunction setRegionNextImageId(uint256 _id, uint256 _nextImageId) public storageAccessControl {\r\n\t\tdata[_id].nextImageId = _nextImageId;\r\n\t}\r\n\r\n\tfunction getRegionUrl(uint256 _id) view public returns (uint8[128]) {\r\n\t\treturn data[_id].url;\r\n\t}\r\n\r\n\tfunction setRegionUrl(uint256 _id, uint8[128] _url) public storageAccessControl {\r\n\t\tdata[_id].url = _url;\r\n\t}\r\n\r\n\tfunction getRegionCurrentPixelPrice(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].currentPixelPrice;\r\n\t}\r\n\r\n\tfunction setRegionCurrentPixelPrice(uint256 _id, uint256 _currentPixelPrice) public storageAccessControl {\r\n\t\tdata[_id].currentPixelPrice = _currentPixelPrice;\r\n\t}\r\n\r\n\tfunction getRegionBlockUpdatedAt(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].blockUpdatedAt;\r\n\t}\r\n\r\n\tfunction setRegionBlockUpdatedAt(uint256 _id, uint256 _blockUpdatedAt) public storageAccessControl {\r\n\t\tdata[_id].blockUpdatedAt = _blockUpdatedAt;\r\n\t}\r\n\r\n\tfunction getRegionUpdatedAt(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].updatedAt;\r\n\t}\r\n\r\n\tfunction setRegionUpdatedAt(uint256 _id, uint256 _updatedAt) public storageAccessControl {\r\n\t\tdata[_id].updatedAt = _updatedAt;\r\n\t}\r\n\r\n\tfunction getRegionPurchasedAt(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].purchasedAt;\r\n\t}\r\n\r\n\tfunction setRegionPurchasedAt(uint256 _id, uint256 _purchasedAt) public storageAccessControl {\r\n\t\tdata[_id].purchasedAt = _purchasedAt;\r\n\t}\r\n\r\n\tfunction getRegionUpdatedAtPurchasedAt(uint256 _id) view public returns (uint256 _updatedAt, uint256 _purchasedAt) {\r\n\t\treturn (data[_id].updatedAt, data[_id].purchasedAt);\r\n\t}\r\n\r\n\tfunction getRegionPurchasePixelPrice(uint256 _id) view public returns (uint256) {\r\n\t\treturn data[_id].purchasedPixelPrice;\r\n\t}\r\n\r\n\tfunction setRegionPurchasedPixelPrice(uint256 _id, uint256 _purchasedPixelPrice) public storageAccessControl {\r\n\t\tdata[_id].purchasedPixelPrice = _purchasedPixelPrice;\r\n\t}\r\n\r\n\tfunction BdpDataStorage(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}\r\n\r\ncontract BdpPriceStorage is BdpBase {\r\n\r\n\tuint64[1001] public pricePoints;\r\n\r\n\tuint256 public pricePointsLength = 0;\r\n\r\n\taddress public forwardPurchaseFeesTo = address(0);\r\n\r\n\taddress public forwardUpdateFeesTo = address(0);\r\n\r\n\r\n\tfunction getPricePointsLength() view public returns (uint256) {\r\n\t\treturn pricePointsLength;\r\n\t}\r\n\r\n\tfunction getPricePoint(uint256 _i) view public returns (uint256) {\r\n\t\treturn pricePoints[_i];\r\n\t}\r\n\r\n\tfunction setPricePoints(uint64[] _pricePoints) public storageAccessControl {\r\n\t\tpricePointsLength = 0;\r\n\t\tappendPricePoints(_pricePoints);\r\n\t}\r\n\r\n\tfunction appendPricePoints(uint64[] _pricePoints) public storageAccessControl {\r\n\t\tfor (uint i = 0; i < _pricePoints.length; i++) {\r\n\t\t\tpricePoints[pricePointsLength++] = _pricePoints[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getForwardPurchaseFeesTo() view public returns (address) {\r\n\t\treturn forwardPurchaseFeesTo;\r\n\t}\r\n\r\n\tfunction setForwardPurchaseFeesTo(address _forwardPurchaseFeesTo) public storageAccessControl {\r\n\t\tforwardPurchaseFeesTo = _forwardPurchaseFeesTo;\r\n\t}\r\n\r\n\tfunction getForwardUpdateFeesTo() view public returns (address) {\r\n\t\treturn forwardUpdateFeesTo;\r\n\t}\r\n\r\n\tfunction setForwardUpdateFeesTo(address _forwardUpdateFeesTo) public storageAccessControl {\r\n\t\tforwardUpdateFeesTo = _forwardUpdateFeesTo;\r\n\t}\r\n\r\n\tfunction BdpPriceStorage(bytes8 _version) public {\r\n\t\townerAddress = msg.sender;\r\n\t\tmanagerAddress = msg.sender;\r\n\t\tversion = _version;\r\n\t}\r\n\r\n}\r\n\r\nlibrary BdpCalculator {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction calculateArea(address[16] _contracts, uint256 _regionId) view public returns (uint256 _area, uint256 _width, uint256 _height) {\r\n\t\tvar (x1, y1, x2, y2) = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionCoordinates(_regionId);\r\n\t\t_width = x2 - x1 + 1;\r\n\t\t_height = y2 - y1 + 1;\r\n\t\t_area = _width * _height;\r\n\t}\r\n\r\n\tfunction countPurchasedPixels(address[16] _contracts) view public returns (uint256 _count) {\r\n\t\tvar lastRegionId = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getLastRegionId();\r\n\t\tfor (uint256 i = 0; i <= lastRegionId; i++) {\r\n\t\t\tif(BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionPurchasedAt(i) > 0) { // region is purchased\r\n\t\t\t\tvar (area,,) = calculateArea(_contracts, i);\r\n\t\t\t\t_count += area;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateCurrentMarketPixelPrice(address[16] _contracts) view public returns(uint) {\r\n\t\treturn calculateMarketPixelPrice(_contracts, countPurchasedPixels(_contracts));\r\n\t}\r\n\r\n\tfunction calculateMarketPixelPrice(address[16] _contracts, uint _pixelsSold) view public returns(uint) {\r\n\t\tvar pricePointsLength = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getPricePointsLength();\r\n\t\tuint mod = _pixelsSold % (1000000 / (pricePointsLength - 1));\r\n\t\tuint div = _pixelsSold * (pricePointsLength - 1) / 1000000;\r\n\t\tvar divPoint = BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getPricePoint(div);\r\n\t\tif(mod == 0) return divPoint;\r\n\t\treturn divPoint + mod * (BdpPriceStorage(BdpContracts.getBdpPriceStorage(_contracts)).getPricePoint(div+1) - divPoint) * (pricePointsLength - 1) / 1000000;\r\n\t}\r\n\r\n\tfunction calculateAveragePixelPrice(address[16] _contracts, uint _a, uint _b) view public returns (uint _price) {\r\n\t\t_price = (calculateMarketPixelPrice(_contracts, _a) + calculateMarketPixelPrice(_contracts, _b)) / 2;\r\n\t}\r\n\r\n\t/** Current market price per pixel for this region if it is the first sale of this region\r\n\t  */\r\n\tfunction calculateRegionInitialSalePixelPrice(address[16] _contracts, uint256 _regionId) view public returns (uint256) {\r\n\t\trequire(BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionUpdatedAt(_regionId) > 0); // region exists\r\n\t\tvar purchasedPixels = countPurchasedPixels(_contracts);\r\n\t\tvar (area,,) = calculateArea(_contracts, _regionId);\r\n\t\treturn calculateAveragePixelPrice(_contracts, purchasedPixels, purchasedPixels + area);\r\n\t}\r\n\r\n\t/** Current market price or (Current market price)*3 if the region was sold\r\n\t  */\r\n\tfunction calculateRegionSalePixelPrice(address[16] _contracts, uint256 _regionId) view public returns (uint256) {\r\n\t\tvar pixelPrice = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionCurrentPixelPrice(_regionId);\r\n\t\tif(pixelPrice > 0) {\r\n\t\t\treturn pixelPrice * 3;\r\n\t\t} else {\r\n\t\t\treturn calculateRegionInitialSalePixelPrice(_contracts, _regionId);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Setup is allowed one whithin one day after purchase\r\n\t  */\r\n\tfunction calculateSetupAllowedUntil(address[16] _contracts, uint256 _regionId) view public returns (uint256) {\r\n\t\tvar (updatedAt, purchasedAt) = BdpDataStorage(BdpContracts.getBdpDataStorage(_contracts)).getRegionUpdatedAtPurchasedAt(_regionId);\r\n\t\tif(updatedAt != purchasedAt) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\treturn purchasedAt + 1 days;\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"},{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"calculateAveragePixelPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"},{\"name\":\"_regionId\",\"type\":\"uint256\"}],\"name\":\"calculateSetupAllowedUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"}],\"name\":\"countPurchasedPixels\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"},{\"name\":\"_regionId\",\"type\":\"uint256\"}],\"name\":\"calculateRegionSalePixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"},{\"name\":\"_regionId\",\"type\":\"uint256\"}],\"name\":\"calculateArea\",\"outputs\":[{\"name\":\"_area\",\"type\":\"uint256\"},{\"name\":\"_width\",\"type\":\"uint256\"},{\"name\":\"_height\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"},{\"name\":\"_regionId\",\"type\":\"uint256\"}],\"name\":\"calculateRegionInitialSalePixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"},{\"name\":\"_pixelsSold\",\"type\":\"uint256\"}],\"name\":\"calculateMarketPixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[16]\"}],\"name\":\"calculateCurrentMarketPixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BdpCalculator","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7838287f5ce419ea717f65c584e9cef905652c5634a378ce739045731d02da13"}]}