{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n\r\n  function totalSupply () constant returns (uint256 _totalSupply);\r\n\r\n  function balanceOf (address _owner) constant returns (uint256 balance);\r\n\r\n  function transfer (address _to, uint256 _value) returns (bool success);\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n  function approve (address _spender, uint256 _value) returns (bool success);\r\n\r\n  function allowance (address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval (address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  function safeAdd (uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n    assert (x <= MAX_UINT256 - y);\r\n    return x + y;\r\n  }\r\n\r\n  function safeSub (uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n    assert (x >= y);\r\n    return x - y;\r\n  }\r\n\r\n  function safeMul (uint256 x, uint256 y)  constant internal  returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    assert (x <= MAX_UINT256 / y);\r\n    return x * y;\r\n  }\r\n  \r\n  \r\n   function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract AbstractToken is Token, SafeMath {\r\n\r\n  function AbstractToken () {\r\n    // Do nothing\r\n  }\r\n \r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value)  returns (bool success) {\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n \r\n  function approve (address _spender, uint256 _value) returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function allowance (address _owner, address _spender) constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n   * to these token holders.\r\n   */\r\n  mapping (address => uint256) accounts;\r\n\r\n  /**\r\n   * Mapping from addresses of token holders to the mapping of addresses of\r\n   * spenders to the allowances set by these token holders to these spenders.\r\n   */\r\n  mapping (address => mapping (address => uint256)) private allowances;\r\n}\r\n\r\n\r\ncontract RebateCoin is AbstractToken {\r\n    \r\n     address public owner;\r\n     \r\n     uint256 tokenCount = 0;\r\n     \r\n     bool frozen = false;\r\n     \r\n     uint256 constant MAX_TOKEN_COUNT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n     \r\n\tuint public constant _decimals = (10**18);\r\n     \r\n    modifier onlyOwner() {\r\n\t    require(owner == msg.sender);\r\n\t    _;\r\n\t}\r\n     \r\n     function RebateCoin() {\r\n         owner = msg.sender;\r\n     }\r\n     \r\n     function totalSupply () constant returns (uint256 _totalSupply) {\r\n        return tokenCount;\r\n     }\r\n     \r\n    function name () constant returns (string result) {\r\n\t\treturn \"Rebate Coin\";\r\n\t}\r\n\t\r\n\tfunction symbol () constant returns (string result) {\r\n\t\treturn \"RBC\";\r\n\t}\r\n\t\r\n\tfunction decimals () constant returns (uint result) {\r\n        return 18;\r\n    }\r\n    \r\n    function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (frozen) return false;\r\n    else return AbstractToken.transfer (_to, _value);\r\n  }\r\n\r\n  \r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n    if (frozen) return false;\r\n    else return AbstractToken.transferFrom (_from, _to, _value);\r\n  }\r\n\r\n  \r\n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\r\n    returns (bool success) {\r\n    if (allowance (msg.sender, _spender) == _currentValue)\r\n      return approve (_spender, _newValue);\r\n    else return false;\r\n  }\r\n\r\n  function burnTokens (uint256 _value) returns (bool success) {\r\n    if (_value > accounts [msg.sender]) return false;\r\n    else if (_value > 0) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      tokenCount = safeSub (tokenCount, _value);\r\n      return true;\r\n    } else return true;\r\n  }\r\n\r\n\r\n  function createTokens (uint256 _value) returns (bool success) {\r\n\r\n    if (_value > 0) {\r\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\r\n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\r\n      tokenCount = safeAdd (tokenCount, _value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  function setOwner (address _newOwner) {\r\n    require (msg.sender == owner);\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function freezeTransfers () {\r\n    require (msg.sender == owner);\r\n\r\n    if (!frozen) {\r\n      frozen = true;\r\n      Freeze ();\r\n    }\r\n  }\r\n\r\n\r\n  function unfreezeTransfers () {\r\n    require (msg.sender == owner);\r\n\r\n    if (frozen) {\r\n      frozen = false;\r\n      Unfreeze ();\r\n    }\r\n  }\r\n\r\n  event Freeze ();\r\n\r\n  event Unfreeze ();\r\n\r\n}\r\n\r\n\r\ncontract TokenSale is RebateCoin  {\r\n \r\n    enum State { PRE_ICO, ICO_FIRST, ICO_SECOND, STOPPED, CLOSED }\r\n    \r\n    // 0 , 1 , 2 , 3 , 4 \r\n    \r\n    State public currentState = State.STOPPED;\r\n\r\n    uint public tokenPrice = 1000000000000000; // wei , 0.0001 eth , 0.6 usd\r\n \r\n    address public beneficiary;\r\n\t\r\n\tuint256 private BountyFound = 10 * (10**24);\r\n\tuint256 private SaleFound = 70 * (10**24);\r\n\tuint256 private PartnersFound = 5 * (10**24);\r\n\tuint256 private TeamFound = 15 * (10**24);\r\n\t\r\n\tuint256 public totalSold = 0;\r\n\t\r\n\tuint256 private _hardcap = 22800 ether;\r\n\tuint256 private _softcap = 62250 ether;\r\n\t\r\n\tbool private _allowedTransfers = true;\r\n\r\n    modifier saleIsOn() {\r\n        require(currentState != State.STOPPED && currentState != State.CLOSED && totalSold < SaleFound);\r\n        _;\r\n    }\r\n    \r\n\tfunction TokenSale() {\r\n\t    owner = msg.sender;\r\n\t    beneficiary = msg.sender;\r\n\t}\r\n\t\r\n\tfunction setState(State _newState) public onlyOwner {\r\n\t    require(currentState != State.CLOSED);\r\n\t    currentState = _newState;\r\n\t}\r\n\t\r\n\t\r\n\tfunction allowTransfers() public onlyOwner {\r\n\t\t_allowedTransfers = true;\t\t\r\n\t}\r\n\t\r\n\tfunction stopTransfers() public onlyOwner {\r\n\t\t_allowedTransfers = false;\r\n\t}\r\n\t\r\n\tfunction stopSale() public onlyOwner {\r\n\t    currentState = State.CLOSED;\r\n\t}\r\n\t\r\n    function setBeneficiaryAddress(address _new) public onlyOwner {\r\n        \r\n        beneficiary = _new;\r\n        \r\n    }\r\n    \r\n    function setTokenPrice(uint _price) public onlyOwner {\r\n        \r\n        tokenPrice = _price;\r\n        \r\n    }\r\n    \r\n\t\r\n\tfunction transferPayable(uint _amount) private returns (bool) {\r\n\t    \r\n\t    if(SaleFound < _amount) return false;\r\n\r\n\t    return true;\r\n\t    \r\n\t}\r\n\t\r\n\t\r\n\tfunction buyRBCTokens() public saleIsOn() payable {\r\n\r\n\t    uint tokens = get_tokens_count(msg.value);\r\n\t\trequire(transferPayable(tokens));\r\n\t\tcreateTokens(tokens);\r\n\t\tif(_allowedTransfers) {\r\n\t\t\tbeneficiary.transfer(msg.value);\r\n\t\t\temit Transfer(owner, msg.sender, tokens);\r\n\t    }\r\n\t    \r\n\t}\r\n\t\r\n\t\r\n\tfunction get_tokens_count(uint _amount) private returns (uint) {\r\n\t    \r\n\t     uint currentPrice = tokenPrice;\r\n\t     uint tokens = safeDiv( safeMul(_amount, _decimals), currentPrice ) ;\r\n    \t return tokens;\r\n\t    \r\n\t}\r\n\t\r\n\t\r\n\tfunction() external payable {\r\n      buyRBCTokens();\r\n    }\r\n\t\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyRBCTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setBeneficiaryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab227309853efa342aa67f50acec10bb26ea923b979ae99e691533dbc184ef6f"}]}