{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; \r\n\r\n\r\ncontract CEO_Trader{\r\n    address public ceoAddress;\r\n    address public dev1 = 0x3b6B7E115EF186Aa4151651468e34f0E92084852;\r\n    address public hotPotatoHolder;\r\n    address public lastHotPotatoHolder;\r\n    uint256 public lastBidTime;\r\n    uint256 public contestStartTime;\r\n    uint256 public lastPot;\r\n    mapping (address => uint256) public cantBidUntil;\r\n    Potato[] public potatoes;\r\n    \r\n    uint256 public TIME_TO_COOK=6 hours; \r\n    uint256 public NUM_POTATOES=9;\r\n    uint256 public START_PRICE=0.005 ether;\r\n    uint256 public CONTEST_INTERVAL=12 hours;\r\n    \r\n    /*** DATATYPES ***/\r\n    struct Potato {\r\n        address owner;\r\n        uint256 price;\r\n    }\r\n    \r\n     /// Access modifier for contract owner only functionality\r\n     modifier onlyContractOwner() {\r\n         require(msg.sender == ceoAddress);\r\n        _;\r\n     }\r\n    \r\n    /*** CONSTRUCTOR ***/\r\n    function CEO_Trader() public{\r\n        ceoAddress=msg.sender;\r\n        hotPotatoHolder=0;\r\n        contestStartTime=1520799754;//sunday march 11\r\n        for(uint i = 0; i<NUM_POTATOES; i++){\r\n            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\r\n            potatoes.push(newpotato);\r\n        }\r\n    }\r\n    \r\n    /*** PUBLIC FUNCTIONS ***/\r\n    function buyPotato(uint256 index) public payable{\r\n        require(block.timestamp>contestStartTime);\r\n        if(_endContestIfNeeded()){ \r\n\r\n        }\r\n        else{\r\n            Potato storage potato=potatoes[index];\r\n            require(msg.value >= potato.price);\r\n            //allow calling transfer() on these addresses without risking re-entrancy attacks\r\n            require(msg.sender != potato.owner);\r\n            require(msg.sender != ceoAddress);\r\n            uint256 sellingPrice=potato.price;\r\n            uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n            uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 80), 100));\r\n            //20 percent remaining in the contract goes to the pot\r\n            //if the owner is the contract, this is the first purchase, and payment should go to the pot\r\n            if(potato.owner!=address(this)){\r\n                potato.owner.transfer(payment);\r\n            }\r\n            potato.price= SafeMath.div(SafeMath.mul(sellingPrice, 140), 80);\r\n            potato.owner=msg.sender;//transfer ownership\r\n            hotPotatoHolder=msg.sender;//becomes holder with potential to win the pot\r\n            lastBidTime=block.timestamp;\r\n            msg.sender.transfer(purchaseExcess);//returns excess eth\r\n        }\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256 value){\r\n        return this.balance;\r\n    }\r\n    function timePassed() public view returns(uint256 time){\r\n        if(lastBidTime==0){\r\n            return 0;\r\n        }\r\n        return SafeMath.sub(block.timestamp,lastBidTime);\r\n    }\r\n    function timeLeftToContestStart() public view returns(uint256 time){\r\n        if(block.timestamp>contestStartTime){\r\n            return 0;\r\n        }\r\n        return SafeMath.sub(contestStartTime,block.timestamp);\r\n    }\r\n    function timeLeftToCook() public view returns(uint256 time){\r\n        return SafeMath.sub(TIME_TO_COOK,timePassed());\r\n    }\r\n    function contestOver() public view returns(bool){\r\n        return _endContestIfNeeded();\r\n    }\r\n    function payout() public onlyContractOwner {\r\n    ceoAddress.transfer(this.balance);\r\n    }\r\n    \r\n    /*** PRIVATE FUNCTIONS ***/\r\n    function _endContestIfNeeded() private returns(bool){\r\n        if(timePassed()>=TIME_TO_COOK){\r\n            //contest over, refund anything paid\r\n            uint256 devFee = uint256(SafeMath.div(SafeMath.mul(this.balance, 10), 100));\r\n            ceoAddress.transfer(devFee); //To pump winning stock\r\n            dev1.transfer(devFee); //To pump winning stock\r\n            uint256 faucetFee = uint256(SafeMath.div(SafeMath.mul(this.balance, 1), 100));\r\n            msg.sender.transfer(faucetFee); \r\n            msg.sender.transfer(msg.value); \r\n            lastPot=this.balance;\r\n            lastHotPotatoHolder=hotPotatoHolder;\r\n            uint256 potRevard = uint256(SafeMath.div(SafeMath.mul(this.balance, 90), 100));\r\n            hotPotatoHolder.transfer(potRevard);\r\n            hotPotatoHolder=0;\r\n            lastBidTime=0;\r\n            _resetPotatoes();\r\n            _setNewStartTime();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _resetPotatoes() private{\r\n        for(uint i = 0; i<NUM_POTATOES; i++){\r\n            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\r\n            potatoes[i]=newpotato;\r\n        }\r\n    }\r\n    function _setNewStartTime() private{\r\n        uint256 start=contestStartTime;\r\n        while(start<block.timestamp){\r\n            start=SafeMath.add(start,CONTEST_INTERVAL);\r\n        }\r\n        contestStartTime=start;\r\n    }\r\n\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_POTATOES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLeftToContestStart\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBidTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cantBidUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastHotPotatoHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyPotato\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTEST_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hotPotatoHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contestStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLeftToCook\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_COOK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timePassed\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contestOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"potatoes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CEO_Trader","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bffbd5eb056f7d53a5695d6dcde8603531e725ccf8f6392bcf17128e630c51ed"}]}