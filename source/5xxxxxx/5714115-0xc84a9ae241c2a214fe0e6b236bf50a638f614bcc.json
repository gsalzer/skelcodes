{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ParticipantToken is StandardToken, Pausable {\r\n  uint16 public totalParticipants = 0;\r\n  mapping(address => bool) internal participants;\r\n\r\n  modifier onlyParticipant() {\r\n    require(isParticipant(msg.sender));\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    addParticipant(owner);\r\n  }\r\n  \r\n  function transfer(address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\r\n    require(isParticipant(_to));\r\n    \r\n    super.transfer(_to, _value);\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\r\n    require(isParticipant(_from));\r\n    require(isParticipant(_to));\r\n    \r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function isParticipant(address _address) public view returns (bool) {\r\n    return participants[_address] == true;\r\n  }\r\n  \r\n  function addParticipant(address _address) public onlyOwner whenNotPaused {\r\n    require(isParticipant(_address) == false);\r\n    \r\n    participants[_address] = true;\r\n    totalParticipants++;\r\n  }\r\n  \r\n  function removeParticipant(address _address) public onlyOwner whenNotPaused {\r\n    require(isParticipant(_address));\r\n    require(balances[_address] == 0);\r\n    \r\n    participants[_address] = false;\r\n    totalParticipants--;\r\n  }\r\n}\r\n\r\ncontract DistributionToken is ParticipantToken {\r\n  uint256 public tokenDistributionDuration = 30 days;\r\n  uint256 public currentDistributionAmount;\r\n  uint256 public tokenDistributionStartTime;\r\n  uint256 public tokenDistributionEndTime;\r\n  address public tokenDistributionPool;\r\n  \r\n  mapping(address => uint256) private unclaimedTokens;\r\n  mapping(address => uint256) private lastUnclaimedTokenUpdates;\r\n  \r\n  event TokenDistribution(address participant, uint256 value);\r\n  \r\n  constructor() public {\r\n    tokenDistributionPool = owner;\r\n  }\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require((_to != tokenDistributionPool && msg.sender != tokenDistributionPool) || now >= tokenDistributionEndTime);\r\n    \r\n    super.transfer(_to, _value);\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require((_to != tokenDistributionPool && _from != tokenDistributionPool) || now >= tokenDistributionEndTime);\r\n    \r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function claimTokens() public onlyParticipant whenNotPaused returns (bool) {\r\n    require(tokenDistributionEndTime > 0 && now < tokenDistributionEndTime);\r\n    require(msg.sender != tokenDistributionPool);\r\n    require(lastUnclaimedTokenUpdates[msg.sender] < tokenDistributionStartTime);\r\n    \r\n    unclaimedTokens[msg.sender] = calcClaimableTokens();\r\n    lastUnclaimedTokenUpdates[msg.sender] = now;\r\n    \r\n    uint256 value = unclaimedTokens[msg.sender];\r\n    unclaimedTokens[msg.sender] = 0;\r\n    \r\n    balances[tokenDistributionPool] = balances[tokenDistributionPool].sub(value);\r\n    balances[msg.sender] = balances[msg.sender].add(value);\r\n    emit TokenDistribution(msg.sender, value);\r\n    return true;\r\n  }\r\n  \r\n  function claimableTokens() public view onlyParticipant returns (uint256) {\r\n    if (lastUnclaimedTokenUpdates[msg.sender] >= tokenDistributionStartTime) {\r\n      return unclaimedTokens[msg.sender];\r\n    }\r\n    \r\n    return calcClaimableTokens();\r\n  }\r\n  \r\n  function setTokenDistributionPool(address _tokenDistributionPool) public onlyOwner whenNotPaused returns (bool) {\r\n    require(tokenDistributionEndTime < now);\r\n    require(isParticipant(_tokenDistributionPool));\r\n    \r\n    tokenDistributionPool = _tokenDistributionPool;\r\n    return true;\r\n  }\r\n  \r\n  function startTokenDistribution() public onlyOwner whenNotPaused returns(bool) {\r\n    require(tokenDistributionEndTime < now);\r\n    require(balanceOf(tokenDistributionPool) > 0);\r\n    \r\n    currentDistributionAmount = balanceOf(tokenDistributionPool);\r\n    tokenDistributionEndTime = now.add(tokenDistributionDuration);\r\n    tokenDistributionStartTime = now;\r\n    return true;\r\n  }\r\n\r\n  function calcClaimableTokens() private view onlyParticipant returns(uint256) {\r\n    return (currentDistributionAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\r\n  }\r\n}\r\n\r\ncontract DividendToken is DistributionToken {\r\n  uint256 public dividendDistributionDuration = 30 days;\r\n  uint256 public currentDividendAmount;\r\n  uint256 public dividendDistributionStartTime;\r\n  uint256 public dividendDistributionEndTime;\r\n  address public dividendDistributionPool;\r\n  \r\n  mapping(address => uint256) private unclaimedDividends;\r\n  mapping(address => uint256) private lastUnclaimedDividendUpdates;\r\n  mapping(address => uint256) private unclaimedOCDividends;\r\n  mapping(address => uint256) private lastUnclaimedOCDividendUpdates;\r\n  \r\n  event DividendDistribution(address participant, uint256 value);\r\n  event OCDividendClaim(address participant, uint256 value);\r\n  event OCDividendDistribution(address participant, uint256 value);\r\n  \r\n  constructor() public {\r\n    dividendDistributionPool = owner;\r\n  }\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require((_to != dividendDistributionPool && msg.sender != dividendDistributionPool) || now >= dividendDistributionEndTime);\r\n    \r\n    super.transfer(_to, _value);\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require((_to != dividendDistributionPool && _from != dividendDistributionPool) || now >= dividendDistributionEndTime);\r\n    \r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function claimDividend() public onlyParticipant whenNotPaused returns (bool) {\r\n    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\r\n    require(msg.sender != dividendDistributionPool);\r\n    \r\n    updateUnclaimedDividend();\r\n    \r\n    uint256 value = unclaimedDividends[msg.sender];\r\n    unclaimedDividends[msg.sender] = 0;\r\n    \r\n    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\r\n    balances[msg.sender] = balances[msg.sender].add(value);\r\n    emit DividendDistribution(msg.sender, value);\r\n    return true;\r\n  }\r\n  \r\n  function claimableDividend() public view onlyParticipant returns (uint256) {\r\n    if (lastUnclaimedDividendUpdates[msg.sender] >= dividendDistributionStartTime) {\r\n      return unclaimedDividends[msg.sender];\r\n    }\r\n    \r\n    return calcDividend();\r\n  }\r\n  \r\n  function claimOCDividend() public onlyParticipant whenNotPaused returns (bool) {\r\n    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\r\n    require(msg.sender != dividendDistributionPool);\r\n    \r\n    updateUnclaimedDividend();\r\n    \r\n    uint256 value = unclaimedDividends[msg.sender];\r\n    unclaimedDividends[msg.sender] = 0;\r\n    \r\n    unclaimedOCDividends[msg.sender] = value;\r\n    lastUnclaimedOCDividendUpdates[msg.sender] = now;\r\n    \r\n    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\r\n    balances[owner] = balances[owner].add(value);\r\n    emit OCDividendClaim(msg.sender, value);\r\n    return true;\r\n  }\r\n  \r\n  function claimableOCDividend(address _address) public view onlyOwner returns (uint256) {\r\n    if (isParticipant(_address) == false) {\r\n      return 0;\r\n    }\r\n    \r\n    if (dividendDistributionEndTime <= 0 || now >= dividendDistributionEndTime) {\r\n      return 0;\r\n    }\r\n    \r\n    if (lastUnclaimedOCDividendUpdates[_address] < dividendDistributionStartTime) {\r\n      return 0;\r\n    }\r\n    \r\n    return unclaimedOCDividends[_address];\r\n  }\r\n  \r\n  function payoutOCDividend(address _address) public onlyOwner whenNotPaused returns (bool) {\r\n    require(isParticipant(_address));\r\n    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\r\n    require(unclaimedOCDividends[_address] > 0);\r\n    \r\n    uint256 value = unclaimedOCDividends[_address];\r\n    unclaimedOCDividends[_address] = 0;\r\n    emit OCDividendDistribution(_address, value);\r\n    return true;\r\n  }\r\n  \r\n  function setDividendDistributionPool(address _dividendDistributionPool) public onlyOwner whenNotPaused returns (bool) {\r\n    require(dividendDistributionEndTime < now);\r\n    require(isParticipant(_dividendDistributionPool));\r\n    \r\n    dividendDistributionPool = _dividendDistributionPool;\r\n    return true;\r\n  }\r\n  \r\n  function startDividendDistribution() public onlyOwner whenNotPaused returns(bool) {\r\n    require(dividendDistributionEndTime < now);\r\n    require(balanceOf(dividendDistributionPool) > 0);\r\n    \r\n    currentDividendAmount = balanceOf(dividendDistributionPool);\r\n    dividendDistributionEndTime = now.add(dividendDistributionDuration);\r\n    dividendDistributionStartTime = now;\r\n    return true;\r\n  }\r\n\r\n  function calcDividend() private view onlyParticipant returns(uint256) {\r\n    return (currentDividendAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\r\n  }\r\n  \r\n  function updateUnclaimedDividend() private whenNotPaused {\r\n    require(lastUnclaimedDividendUpdates[msg.sender] < dividendDistributionStartTime);\r\n    \r\n    unclaimedDividends[msg.sender] = calcDividend();\r\n    lastUnclaimedDividendUpdates[msg.sender] = now;\r\n  }\r\n}\r\n\r\ncontract ThisToken is DividendToken {\r\n  string public name = \"ThisToken\";\r\n  string public symbol = \"THIS\";\r\n  uint8 public decimals = 18;\r\n\r\n  function setTotalSupply(uint256 _totalSupply) public onlyOwner whenNotPaused {\r\n    require(_totalSupply != totalSupply_);\r\n\r\n    uint256 diff;\r\n\r\n    if (_totalSupply < totalSupply_) {\r\n      diff = totalSupply_.sub(_totalSupply);\r\n      balances[owner] = balances[owner].sub(diff);\r\n    } else {\r\n      diff = _totalSupply.sub(totalSupply_);\r\n      balances[owner] = balances[owner].add(diff);\r\n    }\r\n\r\n    totalSupply_ = _totalSupply;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendDistributionPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistributionPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendDistributionEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimableOCDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendDistributionPool\",\"type\":\"address\"}],\"name\":\"setDividendDistributionPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOCDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendDistributionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDividendAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTokenDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenDistributionPool\",\"type\":\"address\"}],\"name\":\"setTokenDistributionPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDistributionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistributionStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isParticipant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDividendDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendDistributionStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistributionEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"payoutOCDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimableDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistributionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DividendDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OCDividendClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OCDividendDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ThisToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e3b6bf26661187e5af7356672b81030d74fcb9320a03a0d5c4f7713065a95623"}]}