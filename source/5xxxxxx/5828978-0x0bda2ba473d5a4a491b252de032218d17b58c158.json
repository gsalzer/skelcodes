{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n* @title CryptolottoToken\r\n* This smart contract is a part of Cryptolotto (cryptolotto.cc) product.\r\n*\r\n* Cryptolotto is a blockchain-based, Ethereum powered lottery which gives to users the most \r\n* transparent and honest chances of winning.\r\n*\r\n* The main idea of Cryptolotto is straightforward: people from all over the world during the \r\n* set period of time are contributing an equal amount of ETH to one wallet. When a timer ends \r\n* this smart-contract powered wallet automatically sends all received ETHs to a one randomly \r\n* chosen wallet-participant.\r\n*\r\n* Due to the fact that Cryptolotto is built on a blockchain technology, it eliminates any \r\n* potential for intervention by third parties and gives 100% guarantee of an honest game.\r\n* There are no backdoors and no human or computer soft can interfere the process of picking a winner.\r\n*\r\n* If during the game only one player joins it, then the player will receive all his ETH back.\r\n* If a player sends not the exact amount of ETH - he will receive all his ETH back.\r\n* Creators of the product can change the entrance price for the game. If the price is changed \r\n* then new rules are applied when a new game starts.\r\n*\r\n* The original idea of Cryptolotto belongs to t.me/crypto_god and t.me/crypto_creator - Founders.\r\n* Cryptolotto smart-contracts are the property of Founders and are protected by copyright,\r\n* trademark, patent, trade secret, other intellectual property, proprietary rights laws and other applicable laws.\r\n*\r\n* All information related to the product can be found only on: \r\n* - cryptolotto.cc\r\n* - github.com/cryptolotto\r\n* - instagram.com/cryptolotto\r\n* - facebook.com/cryptolotto\r\n*\r\n* Crytolotto was designed and developed by erde.group (t.me/erdegroup).\r\n**/\r\ncontract CryptolottoToken is StandardToken {\r\n    /**\r\n    * @dev Token name.\r\n    */\r\n    string public constant name = \"Cryptolotto\";\r\n    \r\n    /**\r\n    * @dev Token symbol.\r\n    */\r\n    string public constant symbol = \"CRY\";\r\n    \r\n    /**\r\n    * @dev Amount of decimals.\r\n    */\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Amount of tokens supply.\r\n    */\r\n    uint256 public constant INITIAL_SUPPLY = 100000 * (10 ** uint256(decimals));\r\n \r\n    /**\r\n    * @dev Token holder struct.\r\n    */\r\n    struct TokenHolder {\r\n        uint balance;\r\n        uint balanceUpdateTime;\r\n        uint rewardWithdrawTime;\r\n    }\r\n\r\n    /**\r\n    * @dev Store token holder balances updates time.\r\n    */\r\n    mapping(address => TokenHolder) holders;\r\n\r\n    /**\r\n    * @dev Amount of not distributed wei on this dividends period.\r\n    */\r\n    uint256 public weiToDistribute;\r\n\r\n    /**\r\n    * @dev Amount of wei that will be distributed on this dividends period.\r\n    */\r\n    uint256 public totalDividends;\r\n\r\n    /**\r\n    * @dev Didents period.\r\n    */\r\n    uint256 public period = 2592000;\r\n\r\n    /**\r\n    * @dev Store last period start date in timestamp.\r\n    */\r\n    uint256 public lastPeriodStarDate;\r\n\r\n    /**\r\n    * @dev Checks tokens balance.\r\n    */\r\n    modifier tokenHolder() {\r\n        require(balanceOf(msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    function CryptolottoToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n        lastPeriodStarDate = now - period;\r\n    }\r\n\r\n    /**\r\n    * @dev Starts dividends period and allow withdraw dividends.\r\n    */\r\n    function startDividendsPeriod() public {\r\n        require(lastPeriodStarDate + period < now);\r\n        weiToDistribute += address(this).balance - weiToDistribute;\r\n        totalDividends = weiToDistribute;\r\n        lastPeriodStarDate += period;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer coins.\r\n    *\r\n    * @param receiver The address to transfer to.\r\n    * @param amount The amount to be transferred.\r\n    */\r\n    function transfer(address receiver, uint256 amount) public returns (bool) {\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(receiver);\r\n\r\n        return super.transfer(receiver, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer coins.\r\n    *\r\n    * @param from Address from which will be withdrawn tokens.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) \r\n        public \r\n        returns (bool) \r\n    {\r\n        beforeBalanceChanges(from);\r\n        beforeBalanceChanges(to);\r\n\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Fix last balance updates.\r\n    */\r\n    function beforeBalanceChanges(address _who) internal {\r\n        if (holders[_who].balanceUpdateTime <= lastPeriodStarDate) {\r\n            holders[_who].balanceUpdateTime = now;\r\n            holders[_who].balance = balanceOf(_who);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate token holder reward.\r\n    */\r\n    function reward() view public returns (uint) {\r\n        if (holders[msg.sender].rewardWithdrawTime >= lastPeriodStarDate) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 balance;\r\n        if (holders[msg.sender].balanceUpdateTime <= lastPeriodStarDate) {\r\n            balance = balanceOf(msg.sender);\r\n        } else {\r\n            balance = holders[msg.sender].balance;\r\n        }\r\n\r\n        return totalDividends * balance / INITIAL_SUPPLY;\r\n    }\r\n\r\n    /**\r\n    * @dev Allow withdraw reward.\r\n    */\r\n    function withdrawReward() public returns (uint) {\r\n        uint value = reward();\r\n        if (value == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        if (!msg.sender.send(value)) {\r\n            return 0;\r\n        }\r\n        \r\n        if (balanceOf(msg.sender) == 0) {\r\n            // garbage collector\r\n            delete holders[msg.sender];\r\n        } else {\r\n            holders[msg.sender].rewardWithdrawTime = now;\r\n        }\r\n\r\n        weiToDistribute -= value;\r\n\r\n        return value;\r\n    }\r\n    /**\r\n    * @dev Simple payable function that allows accept ether.\r\n    */\r\n    function() public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDividendsPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToDistribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPeriodStarDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptolottoToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a156d42e2d777983b9b561a2a988909b72f4f103853a1a18ab3f8777d857795"}]}