{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract AddressLottery{\r\n    struct SeedComponents{\r\n        uint component1;\r\n        uint component2;\r\n        uint component3;\r\n        uint component4;\r\n    }\r\n    \r\n    address owner;\r\n    uint private secretSeed;\r\n    uint private lastReseed;\r\n    \r\n    uint luckyNumber = 13;\r\n        \r\n    mapping (address => bool) participated;\r\n\r\n\r\n    function AddressLottery() {\r\n        owner = msg.sender;\r\n        reseed(SeedComponents(12345678, 0x12345678, 0xabbaeddaacdc, 0x333333));\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n  \r\n    function participate() payable { \r\n        require(msg.value == 0.1 ether);\r\n        \r\n        // every address can only win once, obviously\r\n        require(!participated[msg.sender]);\r\n        \r\n        if ( luckyNumberOfAddress(msg.sender) == luckyNumber)\r\n        {\r\n            participated[msg.sender] = true;\r\n            require(msg.sender.call.value(this.balance)());\r\n        }\r\n    }\r\n    \r\n    function luckyNumberOfAddress(address addr) internal returns(uint n){\r\n        // 1 in 16 chance\r\n        n = uint(keccak256(uint(addr), secretSeed)[0]) % 16;\r\n    }\r\n    \r\n    function reseed(SeedComponents components) internal{\r\n        secretSeed = uint256(keccak256(\r\n            components.component1,\r\n            components.component2,\r\n            components.component3,\r\n            components.component4\r\n        ));\r\n        lastReseed = block.number;\r\n    }\r\n    \r\n    function kill() onlyOwner {\r\n        suicide(owner);\r\n    }\r\n    \r\n    function forceReseed() onlyOwner{\r\n        SeedComponents s;\r\n        s.component1 = uint(msg.sender);\r\n        s.component2 = uint256(block.blockhash(block.number - 1));\r\n        s.component3 = block.number * 1337;\r\n        s.component4 = tx.gasprice * 13;\r\n        reseed(s);\r\n    }\r\n    \r\n    function () payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceReseed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AddressLottery","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0ae6e3f46874bc8bdf6bf426e8a7ec4ee013ffb1d224df8cb3077c19af0e815"}]}