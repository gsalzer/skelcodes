{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) public pure returns (uint256) {\r\n     if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert( c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) public pure returns (uint256) {\r\n    //assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    //assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) public pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) public pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) public pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) public pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) external pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) external pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n     constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner public{\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOnwership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner,newOwner);\r\n        owner=newOwner;\r\n        newOwner=address(0);\r\n    }\r\n\r\n}\r\n\r\ncontract ContractReceiver { function tokenFallback(address _from,uint _value,bytes _data)  external;}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC223 is Owned{\r\n    //Use safemath library to check overflows and underflows\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the token\r\n\r\n    string  public name=\"Littafi Token\";\r\n    string  public symbol=\"LITT\";\r\n    uint8   public decimals = 18;// 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply=1000000000; //1,000,000,000 tokens\r\n    address[] public littHolders;\r\n    uint256 public buyRate=10000;\r\n    bool    public saleIsOn=true;\r\n\r\n     //Admin structure\r\n    struct Admin{\r\n        bool isAdmin;\r\n        address beAdmin;\r\n    }\r\n\r\n    //Contract mutation access modifier\r\n    modifier onlyAdmin{\r\n        require(msg.sender == owner || admins[msg.sender].isAdmin);\r\n        _;\r\n    }\r\n\r\n    //Create an array of admins\r\n    mapping(address => Admin) admins;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    //This notifies clients about an approval request for transferFrom()\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //Notifies contract owner about a successfult terminated/destroyed contract\r\n    event LogContractDestroyed(address indexed contractAddress, bytes30 _extraData);\r\n\r\n    //Notifies clients about token sale\r\n    event LogTokenSale(address indexed _client, uint256 _amountTransacted);\r\n\r\n    //Notifies clients of newly set buy/sell prices\r\n    event LogNewPrices(address indexed _admin, uint256 _buyRate);\r\n\r\n    //Notifies of newly minted tokensevent\r\n    event LogMintedTokens(address indexed _this, uint256 _amount);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor() public {\r\n        totalSupply = totalSupply*10**uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[this]=totalSupply;\r\n        Owned(msg.sender);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n     require(!frozenAccount[msg.sender] && !frozenAccount[_to]);\r\n\r\n    if(isContract(_to)) {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n     }\r\n   }\r\n    \r\n    function transfer(address _to, uint256 _value, bytes _data)public  returns (bool success) {\r\n     require(!frozenAccount[msg.sender] && !frozenAccount[_to]);\r\n     \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n  \r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint256 _value)public returns (bool success) {\r\n     require(!frozenAccount[msg.sender] && !frozenAccount[_to]);\r\n      \r\n     bytes memory empty;\r\n     if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n     }\r\n     else {\r\n        return transferToAddress(_to, _value, empty);\r\n     }\r\n   }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) public view returns (bool) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n    //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n     require(balanceOf[msg.sender] > _value); \r\n     \r\n     balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n     balanceOf[_to] = balanceOf[_to].add(_value);\r\n     emit Transfer(msg.sender, _to, _value, _data);\r\n     emit Transfer(msg.sender, _to, _value);\r\n     return true;\r\n    }\r\n  \r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n     require(balanceOf[msg.sender] > _value); \r\n       \r\n     balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n     balanceOf[_to] = balanceOf[_to].add(_value);\r\n     ContractReceiver receiver = ContractReceiver(_to);\r\n     receiver.tokenFallback(msg.sender, _value, _data);\r\n     emit Transfer(msg.sender, _to, _value);\r\n     emit Transfer(msg.sender, _to, _value, _data);\r\n     return true;\r\n    }\r\n\r\n    function transferToOwner(uint256 _amount) public onlyOwner(){\r\n        require(balanceOf[this] > convert(_amount));\r\n        uint256 amount=convert(_amount);\r\n        balanceOf[this]=balanceOf[this].sub(amount);\r\n        balanceOf[owner]=balanceOf[owner].add(amount);\r\n        emit Transfer(this,owner,amount);\r\n    }\r\n    /**\r\n     * Conversion\r\n     *\r\n     * @param _value convert to proper value for math operations\r\n     *///0x44b6782dde9118baafe20a39098b1b46589cd378\r\n    function convert(uint256 _value) internal view returns (uint256) {\r\n         return _value*10**uint256(decimals);\r\n     }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public onlyOwner {\r\n        require(balanceOf[this] >= convert(_value)); \r\n        uint256 value=convert(_value);\r\n        // Check if the contract has enough\r\n        balanceOf[this]=balanceOf[this].sub(value);    // Subtract from the contract\r\n        totalSupply=totalSupply.sub(value);     // Updates totalSupply\r\n        emit Burn(this, value);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyAdmin {\r\n        require(target != owner);\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function mintToken(uint256 mintedAmount) public onlyOwner {\r\n        uint256 mint=convert(mintedAmount);\r\n        balanceOf[this] =balanceOf[this].add(mint);\r\n        totalSupply =totalSupply.add(mint);\r\n\r\n        emit LogMintedTokens(this, mint);\r\n    }\r\n\r\n    function setPrices(uint256 newBuyRate) public onlyAdmin{\r\n        buyRate = newBuyRate;\r\n        emit LogNewPrices(msg.sender,buyRate);\r\n    }\r\n\r\n    function buy() payable public {\r\n        require(msg.value > 0);\r\n        require(msg.sender != owner && saleIsOn == true);\r\n        uint256 amount=msg.value.mul(buyRate);\r\n        uint256 percentile=amount.add(getEthRate(msg.value).mul(amount).div(100));\r\n        balanceOf[msg.sender]=balanceOf[msg.sender].add(percentile);  // calculates the amount and makes the transaction\r\n        balanceOf[this]=balanceOf[this].sub(percentile);\r\n        littHolders.push(msg.sender);\r\n        owner.transfer(msg.value);\r\n        emit LogTokenSale(msg.sender,percentile);\r\n    }\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n    function destroyContract() public onlyOwner {\r\n       selfdestruct(owner);\r\n       transferOwnership(0x0);\r\n       emit LogContractDestroyed(this, \"Contract has been destroyed\");\r\n   }\r\n   \r\n    function getEthRate(uint256 _value) private pure returns(uint256){\r\n       require(_value > 0 );\r\n       if(_value < 3 ether)\r\n         return 10;\r\n       if(_value >= 3 ether && _value < 5 ether )\r\n         return 20;\r\n       if(_value >= 5 ether && _value < 24 ether )\r\n         return 30;\r\n       if(_value >= 24 ether )\r\n         return 40;\r\n   }\r\n   \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] =allowance[_from][msg.sender].sub(_value);\r\n        transfer(_to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender,_spender,_value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n   \r\n    function setName(string _name) public onlyOwner() returns (bool success) {\r\n        name=_name;\r\n        return true;\r\n    }\r\n    \r\n    function setSaleStatus(bool _bool) public onlyOwner() returns (bool success){\r\n        saleIsOn=_bool;\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"littHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleIsOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOnwership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyRate\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setSaleStatus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes30\"}],\"name\":\"LogContractDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountTransacted\",\"type\":\"uint256\"}],\"name\":\"LogTokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyRate\",\"type\":\"uint256\"}],\"name\":\"LogNewPrices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_this\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogMintedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenERC223","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"SafeMath:9d9f7f857d77f6cf59905b139c6992a3abfd8d9e","SwarmSource":"bzzr://b3a710af8416453515f81a9d94509dfd19afee85a61606d37c0d47c13faf4ba6"}]}