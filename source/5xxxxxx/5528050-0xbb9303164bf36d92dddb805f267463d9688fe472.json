{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**************************\r\n * SATURN ICO smart contract *\r\n **************************/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n\r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n  function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\ncontract ERC223Token is ERC223 {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n\r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        if(length>0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract TokenSale is ContractReceiver {\r\n  using SafeMath for uint256;\r\n\r\n  bool    public active = false;\r\n  address public tokenAddress;\r\n  uint256 public hardCap;\r\n  uint256 public sold;\r\n\r\n  // 1 eth = 50,000 SATURN\r\n  uint256 private priceDiv = 2000000000;\r\n  address private stn;\r\n  address private owner;\r\n  address private treasury;\r\n\r\n  struct Ref {\r\n    uint256 amount;\r\n    uint256 rewardDiv;\r\n    uint256 etherAmount;\r\n  }\r\n\r\n  mapping(address => Ref) private referrals;\r\n\r\n  event Activated(uint256 time);\r\n  event Finished(uint256 time);\r\n  event Purchase(address indexed purchaser, uint256 amount);\r\n  event Referral(address indexed referrer, uint256 amount);\r\n\r\n  function TokenSale(address token, address presaleToken, address ethRecepient, uint256 cap) public {\r\n    tokenAddress  = token;\r\n    stn           = presaleToken;\r\n    owner         = msg.sender;\r\n    treasury      = ethRecepient;\r\n    hardCap       = cap;\r\n  }\r\n\r\n  function tokenFallback(address _from, uint _value, bytes /* _data */) public {\r\n    if (active && msg.sender == stn) {\r\n      stnExchange(_from, _value);\r\n    } else {\r\n      if (msg.sender != tokenAddress) { revert(); }\r\n      if (active) { revert(); }\r\n      if (_value != hardCap) { revert(); }\r\n\r\n      active = true;\r\n      Activated(now);\r\n    }\r\n  }\r\n\r\n  function stnExchange(address buyer, uint256 value) private {\r\n    uint256 purchasedAmount = value.mul(50000);\r\n    if (purchasedAmount == 0) { revert(); } // not enough STN sent\r\n    if (purchasedAmount > hardCap - sold) { revert(); } // too much STN sent\r\n\r\n    sold += purchasedAmount;\r\n\r\n    ERC223 token = ERC223(tokenAddress);\r\n    token.transfer(buyer, purchasedAmount);\r\n    Purchase(buyer, purchasedAmount);\r\n  }\r\n\r\n  function refAmount(address user) constant public returns (uint256 amount) {\r\n    return referrals[user].amount;\r\n  }\r\n\r\n  function refPercentage(address user) constant public returns (uint256 percentage) {\r\n    uint256 rewardDiv = referrals[user].rewardDiv;\r\n    if (rewardDiv == 0)   { return 1; }\r\n    if (rewardDiv == 100) { return 1; }\r\n    if (rewardDiv == 50)  { return 2; }\r\n    if (rewardDiv == 20)  { return 5; }\r\n    if (rewardDiv == 10)  { return 10; }\r\n  }\r\n\r\n  function () external payable {\r\n    processPurchase(0x0);\r\n  }\r\n\r\n  function processPurchase(address referrer) payable public {\r\n    if (!active) { revert(); }\r\n    if (msg.value == 0) { revert(); }\r\n\r\n    uint256 purchasedAmount = msg.value.div(priceDiv);\r\n    if (purchasedAmount == 0) { revert(); } // not enough ETH sent\r\n    if (purchasedAmount > hardCap - sold) { revert(); } // too much ETH sent\r\n\r\n    sold += purchasedAmount;\r\n    treasury.transfer(msg.value);\r\n\r\n    ERC223 token = ERC223(tokenAddress);\r\n    token.transfer(msg.sender, purchasedAmount);\r\n    Purchase(msg.sender, purchasedAmount);\r\n    processReferral(referrer, purchasedAmount, msg.value);\r\n  }\r\n\r\n  function processReferral(address referrer, uint256 tokenAmount, uint256 etherAmount) private returns (bool success) {\r\n    if (referrer == 0x0) { return true; }\r\n    Ref memory ref = referrals[referrer];\r\n    if (ref.rewardDiv == 0) { ref.rewardDiv = 100; } // on your first referral you get 1%\r\n    uint256 referralAmount = tokenAmount.div(ref.rewardDiv);\r\n    if (referralAmount == 0) { return true; }\r\n    // cannot pay more than the contract has itself\r\n    if (referralAmount > hardCap - sold) { referralAmount = hardCap - sold; }\r\n    ref.amount = ref.amount.add(referralAmount);\r\n    ref.etherAmount = ref.etherAmount.add(etherAmount);\r\n\r\n    // ugly block of code that handles variable referral commisions\r\n    if (ref.etherAmount > 5 ether)   { ref.rewardDiv = 50; } // 2% from 5 eth\r\n    if (ref.etherAmount > 10 ether)  { ref.rewardDiv = 20; } // 5% from 10 eth\r\n    if (ref.etherAmount > 100 ether) { ref.rewardDiv = 10; } // 10% from 100 eth\r\n    // end referral updates\r\n\r\n    sold += referralAmount;\r\n    referrals[referrer] = ref; // update the mapping and store our changes\r\n    ERC223 token = ERC223(tokenAddress);\r\n    token.transfer(referrer, referralAmount);\r\n    Referral(referrer, referralAmount);\r\n    return true;\r\n  }\r\n\r\n  function endSale() public {\r\n    // only the creator of the smart contract can end the crowdsale\r\n    if (msg.sender != owner) { revert(); }\r\n    // can only stop an active crowdsale\r\n    if (!active) { revert(); }\r\n    _end();\r\n  }\r\n\r\n  function _end() private {\r\n    // if there are any tokens remaining - return them to the treasury\r\n    if (sold < hardCap) {\r\n      ERC223 token = ERC223(tokenAddress);\r\n      token.transfer(treasury, hardCap.sub(sold));\r\n    }\r\n    active = false;\r\n    Finished(now);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refPercentage\",\"outputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"processPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"presaleToken\",\"type\":\"address\"},{\"name\":\"ethRecepient\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Finished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b9440022a095343b440d590fcd2d7a3794bd76c8000000000000000000000000599346779e90fc3f5f997b5ea715349820f91571000000000000000000000000d7537928b6ad4185c63f52050ab2f1d0068f8abc0000000000000000000000000000000000000000000000000000048c27395000","Library":"","SwarmSource":"bzzr://dff65e424410cf75922cec5e864118532b15396523519e325f63d453660ee624"}]}