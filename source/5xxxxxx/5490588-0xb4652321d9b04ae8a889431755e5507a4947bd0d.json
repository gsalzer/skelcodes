{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title Kakushin Solidity Token\r\n/// @author PriusLabs\r\ncontract KakushinToken {\r\n   \r\n   using SafeMath for uint256 ;\r\n   \r\n    string public name ;\r\n    string public symbol ;\r\n    uint8 public decimals = 18;\r\n   \r\n   \r\n    uint256 public totalSupply = 2400000000;\r\n    \r\n    address public constant companyWallet = 0xd9240Ac690F7764fC53e151863b5f79105c50E3d ;\r\n    \r\n    address public constant founder1Wallet = 0xcE13BC6f7168B309584b70Ae996ec6168c296427 ;    \r\n    \r\n    address public constant founder2Wallet = 0xa520044662761ad83b8cfA8Cd63c156F64104B9E ;    \r\n    \r\n    address public constant founder3Wallet = 0xF9e2d35b4C23446929330EA327895D754E17784D ;    \r\n    \r\n    address public constant founder4Wallet = 0xcc3870Ec7Cc86Cd3f267f17c5d78467d49B9FA2b ;   \r\n    \r\n    address public constant owner1 = 0x9c27c3465a7dE3E653417234A60a51C51C9E978e;\r\n\t\r\n\taddress public constant owner2 = 0x36F7f9cD70b52f4b2b8Ca861fAa4A44D8C1E4Be3;   //Address of Admin Wallet---- //\r\n    \r\n    uint startDate;\r\n    \r\n    uint endDate = 1530403199 ;\r\n    \r\n    \r\n\r\n  \r\n  \r\n    mapping (address => uint256) public balances;\r\n\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @notice Function that implements SafeMath for exponent operations\r\n    /// @param a Value to be raised to the power of @param b\r\n    /// @return uint256 result of the operation\r\n    function safeExp(uint256 a, uint256 b) private pure returns(uint256){\r\n        if(a == 0) { return 0; }\r\n        uint256 c = a;\r\n        uint i;\r\n        if(b == 0) {\r\n            c = 1;\r\n        }\r\n        else if(b < 0) {\r\n            for(i = 0; i >= b; i--) {\r\n                c = c.div(a);\r\n            }\r\n        }\r\n        else {\r\n            for(i = 1; i < b; i++) {\r\n                c = c.mul(a);\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n    \r\n   /// @dev constructor function for contract, initializes the totalSupply for the owners, sets name and symbol for smart contract token\r\n    function KakushinToken() public {\r\n        totalSupply = totalSupply.mul(safeExp(10, uint256(decimals)));  // Update total supply with the decimal amount\r\n                      // Give the creator all initial tokens\r\n        name = \"KAKUSHIN\";                                   // Set the name for display purposes\r\n        symbol = \"KKN\";                               // Set the symbol for display purposes\r\n        balances[owner1] = uint256(59).mul(totalSupply.div(100));\r\n        balances[companyWallet] = uint256(28).mul(totalSupply.div(100));  \r\n        balances[founder1Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\r\n        balances[founder2Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\r\n        balances[founder3Wallet] = uint256(124800000).mul(safeExp(10, uint256(decimals)));\r\n        balances[founder4Wallet] = uint256(62400000).mul(safeExp(10, uint256(decimals)));\r\n        startDate = now;\r\n        \r\n    }\r\n    \r\n    /// @notice send `value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to , uint value) public returns (bool success){\r\n        \r\n        require(_to != 0x0);\r\n        \r\n        require(balances[msg.sender] >= value);\r\n        \r\n        startDate = now ;\r\n        \r\n       \r\n        if(msg.sender == owner1 || msg.sender == owner2){\r\n            \r\n            balances[_to] = balances[_to].add(value); \r\n            balances[msg.sender] = balances[msg.sender].sub(value);\r\n            \r\n        }else if(startDate > endDate){\r\n                  \r\n            balances[_to] = balances[_to].add(value) ; \r\n            balances[msg.sender] = balances[msg.sender].sub(value) ; \r\n                  \r\n        }\r\n              \r\n        emit Transfer(msg.sender, _to, value);\r\n              \r\n        return true ;\r\n        \r\n    }\r\n    \r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /// @notice Checks sale is greater than end date\r\n    /// @return Boolean result of the checking\r\n    function checkSale() public view returns(bool success) {\r\n        \r\n        \r\n        if(startDate > endDate){\r\n            return true ;\r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n  \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder1Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder3Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder4Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder2Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KakushinToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18635278606987f7dc6d5c1a934c154ce85e6687cb913e21e8fc85462d1c1c19"}]}