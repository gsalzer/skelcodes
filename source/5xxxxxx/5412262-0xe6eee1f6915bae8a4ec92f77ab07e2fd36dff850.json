{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\r\n}\r\ncontract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}\r\n\r\ncontract IBattleboardData is AccessControl  {\r\n\r\n  \r\n\r\n      // write functions\r\n  \r\nfunction createBattleboard(uint prize, uint8 restrictions) onlySERAPHIM external returns (uint16);\r\nfunction killMonster(uint16 battleboardId, uint8 monsterId)  onlySERAPHIM external;\r\nfunction createNullTile(uint16 _battleboardId) private ;\r\nfunction createTile(uint16 _battleboardId, uint8 _tileType, uint8 _value, uint8 _position, uint32 _hp, uint16 _petPower, uint64 _angelId, uint64 _petId, address _owner, uint8 _team) onlySERAPHIM external  returns (uint8);\r\nfunction killTile(uint16 battleboardId, uint8 tileId) onlySERAPHIM external ;\r\nfunction addTeamtoBoard(uint16 battleboardId, address owner, uint8 team) onlySERAPHIM external;\r\nfunction setTilePosition (uint16 battleboardId, uint8 tileId, uint8 _positionTo) onlySERAPHIM public ;\r\nfunction setTileHp(uint16 battleboardId, uint8 tileId, uint32 _hp) onlySERAPHIM external ;\r\nfunction addMedalBurned(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction setLastMoveTime(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction iterateTurn(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction killBoard(uint16 battleboardId) onlySERAPHIM external ;\r\nfunction clearAngelsFromBoard(uint16 battleboardId) private;\r\n//Read functions\r\n     \r\nfunction getTileHp(uint16 battleboardId, uint8 tileId) constant external returns (uint32) ;\r\nfunction getMedalsBurned(uint16 battleboardId) constant external returns (uint8) ;\r\nfunction getTeam(uint16 battleboardId, uint8 tileId) constant external returns (uint8) ;\r\nfunction getMaxFreeTeams() constant public returns (uint8);\r\nfunction getBarrierNum(uint16 battleboardId) public constant returns (uint8) ;\r\nfunction getTileFromBattleboard(uint16 battleboardId, uint8 tileId) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint16 petPower, uint64 angelId, uint64 petId, bool isLive, address owner)   ;\r\nfunction getTileIDByOwner(uint16 battleboardId, address _owner) constant public returns (uint8) ;\r\nfunction getPetbyTileId( uint16 battleboardId, uint8 tileId) constant public returns (uint64) ;\r\nfunction getOwner (uint16 battleboardId, uint8 team,  uint8 ownerNumber) constant external returns (address);\r\nfunction getTileIDbyPosition(uint16 battleboardId, uint8 position) public constant returns (uint8) ;\r\nfunction getPositionFromBattleboard(uint16 battleboardId, uint8 _position) public constant returns (uint8 tileType, uint8 value, uint8 id, uint8 position, uint32 hp, uint32 petPower, uint64 angelId, uint64 petId, bool isLive)  ;\r\nfunction getBattleboard(uint16 id) public constant returns (uint8 turn, bool isLive, uint prize, uint8 numTeams, uint8 numTiles, uint8 createdBarriers, uint8 restrictions, uint lastMoveTime, uint8 numTeams1, uint8 numTeams2, uint8 monster1, uint8 monster2) ;\r\nfunction isBattleboardLive(uint16 battleboardId) constant public returns (bool);\r\nfunction isTileLive(uint16 battleboardId, uint8 tileId) constant  external returns (bool) ;\r\nfunction getLastMoveTime(uint16 battleboardId) constant public returns (uint) ;\r\nfunction getNumTilesFromBoard (uint16 _battleboardId) constant public returns (uint8) ; \r\nfunction angelOnBattleboards(uint64 angelID) external constant returns (bool) ;\r\nfunction getTurn(uint16 battleboardId) constant public returns (address) ;\r\nfunction getNumTeams(uint16 battleboardId, uint8 team) public constant returns (uint8);\r\nfunction getMonsters(uint16 BattleboardId) external constant returns (uint8 monster1, uint8 monster2) ;\r\nfunction getTotalBattleboards() public constant returns (uint16) ;\r\n  \r\n        \r\n \r\n   \r\n}\r\n\r\n\r\ncontract IAccessoryData is AccessControl, Enums {\r\n    uint8 public totalAccessorySeries;    \r\n    uint32 public totalAccessories;\r\n    \r\n \r\n    /*** FUNCTIONS ***/\r\n    //*** Write Access ***//\r\n    function createAccessorySeries(uint8 _AccessorySeriesId, uint32 _maxTotal, uint _price) onlyCREATOR public returns(uint8) ;\r\n\tfunction setAccessory(uint8 _AccessorySeriesId, address _owner) onlySERAPHIM external returns(uint64);\r\n   function addAccessoryIdMapping(address _owner, uint64 _accessoryId) private;\r\n\tfunction transferAccessory(address _from, address _to, uint64 __accessoryId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAccessoryTransfer (address _to, uint64 __accessoryId)  public;\r\n    function updateAccessoryLock (uint64 _accessoryId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n    \r\n    //*** Read Access ***//\r\n    function getAccessorySeries(uint8 _accessorySeriesId) constant public returns(uint8 accessorySeriesId, uint32 currentTotal, uint32 maxTotal, uint price) ;\r\n\tfunction getAccessory(uint _accessoryId) constant public returns(uint accessoryID, uint8 AccessorySeriesID, address owner);\r\n\tfunction getOwnerAccessoryCount(address _owner) constant public returns(uint);\r\n\tfunction getAccessoryByIndex(address _owner, uint _index) constant public returns(uint) ;\r\n    function getTotalAccessorySeries() constant public returns (uint8) ;\r\n    function getTotalAccessories() constant public returns (uint);\r\n    function getAccessoryLockStatus(uint64 _acessoryId) constant public returns (bool);\r\n}\r\n\r\n\r\n//This contract is to Manage (open, close, add teams, etc) battleboards. Call the Battleboards contract to make moves. Both of these contracts \r\n//interface with the battleboards data contract. \r\n\r\ncontract ManageBattleboards is AccessControl, SafeMath  {\r\n\r\n    /*** DATA TYPES ***/\r\n    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\r\n    address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926;\r\n    address public accessoryDataContract = 0x466c44812835f57b736ef9F63582b8a6693A14D0;\r\n    address public battleboardDataContract = 0xE60fC4632bD6713E923FE93F8c244635E6d5009e;\r\n\r\n   \r\n    \r\n    //The reserved balance is the total balance outstanding on all open battleboards. \r\n    //We keep track of this figure to prevent the developers from pulling out money currently pledged\r\n    //This only features in the paid boards. \r\n    uint public contractReservedBalance;\r\n    \r\n    \r\n \r\n    \r\n      \r\n          // Utility Functions\r\n    function DataContacts(address _angelCardDataContract, address _petCardDataContract, address _accessoryDataContract, address _battleboardDataContract) onlyCREATOR external {\r\n        angelCardDataContract = _angelCardDataContract;\r\n        petCardDataContract = _petCardDataContract;\r\n        accessoryDataContract = _accessoryDataContract;\r\n        battleboardDataContract = _battleboardDataContract;\r\n\r\n    }\r\n    \r\n    function checkExistsOwnedAngel (uint64 angelId) private constant returns (bool) {\r\n        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n       \r\n        if ((angelId <= 0) || (angelId > angelCardData.getTotalAngels())) {return false;}\r\n        address angelowner;\r\n        (,,,,,,,,,,angelowner) = angelCardData.getAngel(angelId);\r\n        if (angelowner == msg.sender) {return true;}\r\n        \r\n       else  return false;\r\n}\r\n  \r\n    function checkExistsOwnedPet (uint64 petId) private constant returns (bool) {\r\n          IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n       \r\n        if ((petId <= 0) || (petId > petCardData.getTotalPets())) {return false;}\r\n        address petowner;\r\n         (,,,,,,,petowner) = petCardData.getPet(petId);\r\n        if (petowner == msg.sender) {return true;}\r\n        \r\n       else  return false;\r\n}\r\n\r\n    function checkExistsOwnedAccessory (uint64 accessoryId) private constant returns (bool) {\r\n          IAccessoryData accessoryData = IAccessoryData(accessoryDataContract);\r\n       if (accessoryId == 0) {return true;}\r\n       //Not sending an accessory is valid. \r\n        if ((accessoryId < 0) || (accessoryId > accessoryData.getTotalAccessories())) {return false;}\r\n        address owner;\r\n         (,,owner) = accessoryData.getAccessory(accessoryId);\r\n        if (owner == msg.sender) {return true;}\r\n        \r\n       else  return false;\r\n}\r\n\r\n\r\n function takePet(uint64 petId) private {\r\n           //This contract takes ownership of pets who are entered into battleboards and later distributes the losers' pets to the winners. \r\n               IPetCardData PetCardData = IPetCardData(petCardDataContract);\r\n                PetCardData.transferPet(msg.sender, address(this), petId);\r\n        }\r\n           \r\n           \r\n       function restrictionsAllow(uint64 angelId, uint8 restrictions) private constant returns (bool) {\r\n       //This function returns true if the restrictions of the board allow the angel and false if not. Basically\r\n       //Angel card series IDs get stronger BP over time, with the exception of Michael and Lucifer. \r\n       //Note: Zadkiel is allowed on boards where she might be stronger - this is a rare case that will balance against\r\n       //EVERY player needing to pay this gas to check every time ANY angel is added to the board. \r\n       \r\n        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n        uint8 angelCardSeries;\r\n        (,angelCardSeries,,,,,,,,,) = angelCardData.getAngel(angelId);\r\n        \r\n        if (angelCardSeries > restrictions) {return false;}\r\n        if ((angelCardSeries == 2) && (restrictions < 19)) {return false;} //Lucifer Card \r\n        if ((angelCardSeries == 3) && (restrictions < 21)) {return false;} //Michael Card\r\n        return true;\r\n       }\r\n       \r\n       \r\n       //Opening and Closing Functions\r\n      \r\n  \r\n       function createBattleboard(uint8 restrictions) external payable returns (uint16) {\r\n           if (restrictions <0) {revert();}\r\n           IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n           return battleboardData.createBattleboard(msg.value, restrictions);\r\n           \r\n       }\r\n       \r\n        function closeBattleboard(uint16 battleboardId) external {\r\n       //This function can be called by ANYONE once either team 1 or team 2 has no more team members left. \r\n        IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n       \r\n       if (battleboardData.isBattleboardLive(battleboardId) == false) {revert();}\r\n       battleboardData.killBoard(battleboardId); \r\n        if ((battleboardData.getNumTeams(battleboardId,1) != 0) && (battleboardData.getNumTeams(battleboardId,2) != 0)) {revert();}\r\n        //No teams are out, function shouldn't be called. \r\n        uint8 id;\r\n        uint64 petId;\r\n        address ownerWon;\r\n        address ownerLost;\r\n        uint8 i = 0;\r\n        IPetCardData PetCardData = IPetCardData(petCardDataContract);\r\n        if ((battleboardData.getNumTeams(battleboardId,1) == 0) && (battleboardData.getNumTeams(battleboardId,2) == 0)) {\r\n              //Something odd happened and BOTH teams have lost - this is a tie. \r\n              \r\n              for (i =0; i<battleboardData.getMaxFreeTeams(); i++) {\r\n                  ownerWon = battleboardData.getOwner(battleboardId, 0, i);\r\n                  id = battleboardData.getTileIDByOwner(battleboardId,ownerWon);\r\n                 petId = battleboardData.getPetbyTileId(battleboardId, id);\r\n                 PetCardData.transferPet(address(this), ownerWon, petId);\r\n              }\r\n        }\r\n       if ((battleboardData.getNumTeams(battleboardId,1) != 0) && (battleboardData.getNumTeams(battleboardId,2) == 0)) {\r\n       //Team 1 won \r\n       //Give team 1 back their pets. \r\n        for (i =0; i<3; i++) {\r\n                  ownerWon = battleboardData.getOwner(battleboardId, 1, i);\r\n                  id = battleboardData.getTileIDByOwner(battleboardId,ownerWon);\r\n                 petId = battleboardData.getPetbyTileId(battleboardId, id);\r\n                 PetCardData.transferPet(address(this), ownerWon, petId);\r\n            \r\n            //give team 2's pets to team 1.   \r\n       \r\n                  ownerLost = battleboardData.getOwner(battleboardId, 2, i);\r\n                  id = battleboardData.getTileIDByOwner(battleboardId,ownerLost);\r\n                 petId = battleboardData.getPetbyTileId(battleboardId, id);\r\n                 PetCardData.transferPet(address(this), ownerWon, petId);\r\n              }    \r\n       }\r\n          if ((battleboardData.getNumTeams(battleboardId,1) == 0) && (battleboardData.getNumTeams(battleboardId,2) != 0)) {\r\n       //Team 2 won \r\n        //Give team 2 back their pets. \r\n            for (i =0; i<3; i++) {\r\n                  ownerWon = battleboardData.getOwner(battleboardId, 2 ,i);\r\n                  id = battleboardData.getTileIDByOwner(battleboardId,ownerWon);\r\n                 petId = battleboardData.getPetbyTileId(battleboardId, id);\r\n                 PetCardData.transferPet(address(this), ownerWon, petId);\r\n            \r\n            //give team 1's pets to team 2   \r\n       \r\n                  ownerLost = battleboardData.getOwner(battleboardId, 1, i);\r\n                  id = battleboardData.getTileIDByOwner(battleboardId,ownerLost);\r\n                 petId = battleboardData.getPetbyTileId(battleboardId, id);\r\n                 PetCardData.transferPet(address(this), ownerWon, petId);\r\n              } \r\n         \r\n       }\r\n   }\r\n       \r\n   \r\n        function getInitialHP (uint64 angelId, uint64 petId, uint64 accessoryId) public constant returns (uint32 hp, uint16 petAuraComposite) {\r\n           IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n           \r\n           //need to reuse local variables to avoid stack too deep;\r\n           uint16 temp;\r\n           uint16 tempComposite;\r\n           uint8 aura;\r\n           (,,temp,aura,,,,,,,) = angelCardData.getAngel(angelId);\r\n           if (aura == 3) {temp += 100;} //plus 100 initial HP to orange aura angels. \r\n           tempComposite = temp;\r\n           //first add battlePower;\r\n           (,,,,temp,,,,,,) = angelCardData.getAngel(angelId);\r\n           tempComposite += temp;\r\n           //now temp is experience\r\n            uint8 petAuraColor;\r\n             (petAuraComposite, petAuraColor) = findAuraComposite (petId, accessoryId);\r\n            hp = (aurasCompatible(angelId,petAuraColor)+ petAuraComposite + tempComposite);\r\n            \r\n            return;\r\n        }\r\n       \r\n       function addTeam1(uint64 angelId, uint64 petId, uint64 accessoryId, uint16 battleboardId) external payable {\r\n           //call this function to add your angel/pet/accessory to team 1. \r\n           checkTeamToAdd(angelId,petId,accessoryId);\r\n            IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n            // check if battleboard is full/open first and see where the new tesm should be placed. \r\n           uint32 hp;\r\n           uint16 petPower;\r\n           uint16 speed = getSpeed(petId,accessoryId);\r\n           (hp, petPower) = getInitialHP(angelId,petId, accessoryId);\r\n           battleboardData.createTile(battleboardId, 1, uint8(speed), getNewTeamPositionAndCheck(battleboardId, 1, angelId), hp, petPower + speed,angelId, petId, msg.sender, 1);\r\n           battleboardData.addTeamtoBoard(battleboardId, msg.sender,1);\r\n           //now add one random tile to the board. \r\n           addRandomTile(battleboardId, 1);\r\n           takePet(petId);\r\n       }\r\n       \r\n          function addTeam2(uint64 angelId, uint64 petId, uint64 accessoryId, uint16 battleboardId) external payable {\r\n           \r\n           checkTeamToAdd(angelId,petId,accessoryId);\r\n            IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n            // check if battleboard is full/open first and see where the new tesm should be placed. \r\n           uint32 hp;\r\n           uint16 petPower;\r\n           uint16 speed = getSpeed(petId,accessoryId);\r\n           (hp, petPower) = getInitialHP(angelId,petId, accessoryId);\r\n           battleboardData.createTile(battleboardId, 1, uint8(speed), getNewTeamPositionAndCheck(battleboardId, 2, angelId), hp, petPower + speed,angelId, petId, msg.sender, 2);\r\n           battleboardData.addTeamtoBoard(battleboardId, msg.sender,2);\r\n           //now add one random tile to the board. \r\n           addRandomTile(battleboardId, 1);\r\n           takePet(petId);\r\n       }\r\n       \r\n       function getSpeed(uint64 petId, uint64 accessoryId) private constant returns (uint16) {\r\n           //this speed function returns pet's base Luck + any accessory boost from the clovers;\r\n           IAccessoryData accessoryData = IAccessoryData(accessoryDataContract);\r\n           IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n\r\n       uint16 temp;\r\n       uint8 accessorySeriesId;\r\n         (,,,temp,,,,,,) = petCardData.getPet(petId);\r\n         //first get the pet's base luck. \r\n           (,accessorySeriesId,) = accessoryData.getAccessory(accessoryId);\r\n           if (accessorySeriesId == 5) {temp += 5;}\r\n            if (accessorySeriesId == 6) {temp += 10;}\r\n            return temp;\r\n  \r\n       }\r\n          \r\n        function getNewTeamPositionAndCheck (uint16 battleboardId,uint8 team, uint64 angelId) private constant returns (uint8) {\r\n            IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n            uint8 numTeams1;\r\n            uint8 numTeams2;\r\n             uint8 position;\r\n             uint8 restrictions;\r\n            bool isLive;\r\n        \r\n           //Now see which tile to add the new team. Teams are added in a specified place besed on when they join. \r\n             (,isLive,,,,,restrictions,, numTeams1,numTeams2,,) = battleboardData.getBattleboard(battleboardId);\r\n               \r\n             if (restrictionsAllow(angelId, restrictions) == false) {revert();} \r\n            if (isLive== true) {revert();} //Can't add a team to a board that's already live.\r\n             if (team == 1) {\r\n                if (numTeams1 == 0) {position = 10;}\r\n               if (numTeams1 ==1) {position = 12;}\r\n               if (numTeams1 == 2) {position = 14;}\r\n               if (numTeams1 >=3) {revert();}\r\n           }\r\n               if (team == 2) {\r\n               if (numTeams2 == 0) {position = 50;}\r\n               if (numTeams2 == 1) {position = 52;}\r\n               if (numTeams2 == 2) {position = 54;}\r\n               if (numTeams2 >=3) {revert();}\r\n           }\r\n           return position;\r\n        }  \r\n          \r\n          function checkTeamToAdd(uint64 angelId, uint64 petId, uint64 accessoryId) private constant {\r\n               if ((checkExistsOwnedAngel(angelId) == false) || (checkExistsOwnedPet(petId)== false) || (checkExistsOwnedAccessory(accessoryId) == false)) {revert();}\r\n          }\r\n          \r\n             \r\n             function addRandomTile(uint16 _battleboardId, uint8 seed) private  {\r\n             IBattleboardData battleboardData = IBattleboardData(battleboardDataContract);\r\n    \r\n           uint8 newTileType;\r\n           uint8 newTilePower;\r\n           \r\n            \r\n             //Tile TYPES\r\n    // 0 - Empty Space\r\n    // 1 - Team (Angel + Pet)\r\n    // 3 - Red Barrier (red is hurt)\r\n    // 4 - Yellow barrier (yellow is hurt)\r\n    // 5 - Blue barrier (blue is hurt)\r\n    // 6 - Exp Boost (permanent)\r\n    // 7 - HP boost (temp)\r\n    // 8 - Eth boost\r\n    // 9 - Warp\r\n    // 10 - Medal\r\n    // 11 - Pet permanent Aura boost random color\r\n    \r\n           \r\n           uint8 chance = getRandomNumber(100,0,seed);\r\n             \r\n              if (chance <=30)  {\r\n                //Barrier tile\r\n                newTileType = getRandomNumber(5,3,seed);\r\n                newTilePower = getRandomNumber(30,10,seed);\r\n            }\r\n                if ((chance >=30) && (chance <50)) {\r\n                //HP boost\r\n                newTileType = 7;\r\n                newTilePower = getRandomNumber(45,15,seed);\r\n            }\r\n             if ((chance >=50) && (chance <60)) {\r\n                //EXP boost\r\n                newTileType = 6;\r\n                newTilePower = getRandomNumber(5,1,seed);\r\n            }\r\n            if ((chance >=60) && (chance <80)) {\r\n                //Warp\r\n                newTileType = 9;\r\n                newTilePower = getRandomNumber(64,1,seed);\r\n            }\r\n            if ((chance >=80) && (chance <90)) {\r\n                //Medal\r\n                newTileType = 10;\r\n                newTilePower = getRandomNumber(2,0,seed);\r\n            }\r\n            if (chance >=90) {\r\n                //Pet Aura boost \r\n                newTileType = 11;\r\n                newTilePower = getRandomNumber(4,1,seed);\r\n            }\r\n            \r\n                \r\n         uint8 position = getRandomNumber(49,15,seed);\r\n          //if desided position is already full, try three times to place them in an open spot. Odds are max 0.6% that the tx reverts. \r\n          //Random tiles are in the middle of the board and won't conflict with anangels. \r\n          //Random tiels CAN be on the same position as a monster, though. \r\n           if (battleboardData.getTileIDbyPosition(_battleboardId, position)!= 0) {\r\n              \r\n              position = getRandomNumber(49,15,msg.sender);\r\n              if (battleboardData.getTileIDbyPosition(_battleboardId, position)!= 0) {\r\n               position = getRandomNumber(49,15,msg.sender);\r\n                if (battleboardData.getTileIDbyPosition(_battleboardId, position)!= 0) { \r\n                   position = getRandomNumber(49,15,msg.sender);\r\n                if (battleboardData.getTileIDbyPosition(_battleboardId, position)!= 0) {revert();}\r\n              }\r\n           }\r\n           }\r\n         battleboardData.createTile(_battleboardId,newTileType, newTilePower, position, 0, 0, 0, 0, address(this),0);\r\n       }\r\n       \r\n       function aurasCompatible(uint64 angel1ID, uint8  _petAuraColor ) private constant returns (uint8) {\r\n            uint8 compatibility = 0;\r\n            \r\n        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n          uint8 _angel1Aura;\r\n         (,,,_angel1Aura,,,,,,,) = angelCardData.getAngel(angel1ID);\r\n            if (_petAuraColor == 1) {\r\n                if ((_angel1Aura == 2) || (_angel1Aura == 3) || (_angel1Aura == 4)) {compatibility++;}\r\n            }\r\n            if (_petAuraColor == 2) {\r\n                if ((_angel1Aura == 0) || (_angel1Aura == 2) || (_angel1Aura == 5)) {compatibility++;}\r\n            }\r\n            if (_petAuraColor == 3) {\r\n                if ((_angel1Aura == 1) || (_angel1Aura == 3) || (_angel1Aura == 5)) {compatibility++;}\r\n            }\r\n        return compatibility*12;\r\n            \r\n        }\r\n        \r\n        function findAuraComposite(uint64 pet1ID, uint64 accessoryId) private constant returns (uint16 composite, uint8 color) {\r\n        IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n        \r\n       uint16 pet1auraRed;\r\n       uint16 pet1auraBlue;\r\n       uint16 pet1auraYellow;\r\n        (,,,,pet1auraRed,pet1auraBlue,pet1auraYellow,,,) = petCardData.getPet(pet1ID);\r\n        \r\n          IAccessoryData accessoryData = IAccessoryData(accessoryDataContract);\r\n           \r\n           uint8 accessorySeriesID;\r\n           \r\n           (,accessorySeriesID,) = accessoryData.getAccessory(accessoryId);\r\n        \r\n        if (accessorySeriesID == 7) {pet1auraRed += 6;}\r\n        if (accessorySeriesID == 8) {pet1auraRed += 12;}\r\n        if (accessorySeriesID == 9) {pet1auraYellow += 6;}\r\n        if (accessorySeriesID == 10) {pet1auraYellow += 12;}\r\n        if (accessorySeriesID == 11) {pet1auraBlue += 6;}\r\n        if (accessorySeriesID == 12) {pet1auraBlue += 12;}\r\n        \r\n       \r\n            color = 1; //assume red to start \r\n            if (((pet1auraBlue) > (pet1auraRed)) && ((pet1auraBlue) > (pet1auraYellow))) {color = 2;}\r\n            if (((pet1auraYellow)> (pet1auraRed)) && ((pet1auraYellow)> (pet1auraBlue))) {color = 3;}\r\n            composite = (pet1auraRed) + (pet1auraYellow) + (pet1auraBlue);\r\n            return;\r\n            }\r\n        \r\n          function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n                function withdrawEther()  onlyCREATOR external {\r\n   //shouldn't have any eth here but just in case. \r\n    creatorAddress.transfer(this.balance);\r\n}\r\n          \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"accessoryId\",\"type\":\"uint64\"},{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"addTeam1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardDataContract\",\"type\":\"address\"},{\"name\":\"_petCardDataContract\",\"type\":\"address\"},{\"name\":\"_accessoryDataContract\",\"type\":\"address\"},{\"name\":\"_battleboardDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"accessoryId\",\"type\":\"uint64\"}],\"name\":\"getInitialHP\",\"outputs\":[{\"name\":\"hp\",\"type\":\"uint32\"},{\"name\":\"petAuraComposite\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"restrictions\",\"type\":\"uint8\"}],\"name\":\"createBattleboard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleboardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractReservedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessoryDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"accessoryId\",\"type\":\"uint64\"},{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"addTeam2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"battleboardId\",\"type\":\"uint16\"}],\"name\":\"closeBattleboard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ManageBattleboards","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db48bb21f5f41518e4b435eb095974b9268eb57ead1d5010eb3ecaed4c87848d"}]}