{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title SafeMath library\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal constant returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/// @title Roles contract\r\ncontract Roles {\r\n  \r\n  /// Address of owner - All privileges\r\n  address public owner;\r\n\r\n  /// Global operator address\r\n  address public globalOperator;\r\n\r\n  /// Crowdsale address\r\n  address public crowdsale;\r\n  \r\n  function Roles() public {\r\n    owner = msg.sender;\r\n    /// Initially set to 0x0\r\n    globalOperator = address(0); \r\n    /// Initially set to 0x0    \r\n    crowdsale = address(0); \r\n  }\r\n\r\n  // modifier to enforce only owner function access\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // modifier to enforce only global operator function access\r\n  modifier onlyGlobalOperator() {\r\n    require(msg.sender == globalOperator);\r\n    _;\r\n  }\r\n\r\n  // modifier to enforce any of 3 specified roles to access function\r\n  modifier anyRole() {\r\n    require(msg.sender == owner || msg.sender == globalOperator || msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  /// @dev Change the owner\r\n  /// @param newOwner Address of the new owner\r\n  function changeOwner(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnerChanged(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /// @dev Change global operator - initially set to 0\r\n  /// @param newGlobalOperator Address of the new global operator\r\n  function changeGlobalOperator(address newGlobalOperator) onlyOwner public {\r\n    require(newGlobalOperator != address(0));\r\n    GlobalOperatorChanged(globalOperator, newGlobalOperator);\r\n    globalOperator = newGlobalOperator;\r\n  }\r\n\r\n  /// @dev Change crowdsale address - initially set to 0\r\n  /// @param newCrowdsale Address of crowdsale contract\r\n  function changeCrowdsale(address newCrowdsale) onlyOwner public {\r\n    require(newCrowdsale != address(0));\r\n    CrowdsaleChanged(crowdsale, newCrowdsale);\r\n    crowdsale = newCrowdsale;\r\n  }\r\n\r\n  /// Events\r\n  event OwnerChanged(address indexed _previousOwner, address indexed _newOwner);\r\n  event GlobalOperatorChanged(address indexed _previousGlobalOperator, address indexed _newGlobalOperator);\r\n  event CrowdsaleChanged(address indexed _previousCrowdsale, address indexed _newCrowdsale);\r\n\r\n}\r\n\r\n/// @title ERC20 contract\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  \r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title ExtendedToken contract\r\ncontract ExtendedToken is ERC20, Roles {\r\n  using SafeMath for uint;\r\n\r\n  /// Max amount of minted tokens (6 billion tokens)\r\n  uint256 public constant MINT_CAP = 6 * 10**27;\r\n\r\n  /// Minimum amount to lock (100 000 tokens)\r\n  uint256 public constant MINIMUM_LOCK_AMOUNT = 100000 * 10**18;\r\n\r\n  /// Structure that describes locking of tokens\r\n  struct Locked {\r\n      //// Amount of tokens locked\r\n      uint256 lockedAmount; \r\n      /// Time when tokens were last locked\r\n      uint256 lastUpdated; \r\n      /// Time when bonus was last claimed\r\n      uint256 lastClaimed; \r\n  }\r\n  \r\n  /// Used to pause the transfer\r\n  bool public transferPaused = false;\r\n\r\n  /// Mapping for balances\r\n  mapping (address => uint) public balances;\r\n  /// Mapping for locked amounts\r\n  mapping (address => Locked) public locked;\r\n  /// Mapping for allowance\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n  /// @dev Pause token transfer\r\n  function pause() public onlyOwner {\r\n      transferPaused = true;\r\n      Pause();\r\n  }\r\n\r\n  /// @dev Unpause token transfer\r\n  function unpause() public onlyOwner {\r\n      transferPaused = false;\r\n      Unpause();\r\n  }\r\n\r\n  /// @dev Mint new tokens. Owner, Global operator and Crowdsale can mint new tokens and update totalSupply\r\n  /// @param _to Address where the tokens will be minted\r\n  /// @param _amount Amount of tokens to be minted\r\n  /// @return True if successfully minted\r\n  function mint(address _to, uint _amount) public anyRole returns (bool) {\r\n      _mint(_to, _amount);\r\n      Mint(_to, _amount);\r\n      return true;\r\n  }\r\n  \r\n  /// @dev Used by mint function\r\n  function _mint(address _to, uint _amount) internal returns (bool) {\r\n      require(_to != address(0));\r\n\t    require(totalSupply.add(_amount) <= MINT_CAP);\r\n      totalSupply = totalSupply.add(_amount);\r\n      balances[_to] = balances[_to].add(_amount);\r\n      return true;\r\n  }\r\n\r\n  /// @dev Burns the amount of tokens. Tokens can be only burned from Global operator\r\n  /// @param _amount Amount of tokens to be burned\r\n  /// @return True if successfully burned\r\n  function burn(uint _amount) public onlyGlobalOperator returns (bool) {\r\n\t    require(balances[msg.sender] >= _amount);\r\n\t    uint256 newBalance = balances[msg.sender].sub(_amount);      \r\n      balances[msg.sender] = newBalance;\r\n      totalSupply = totalSupply.sub(_amount);\r\n      Burn(msg.sender, _amount);\r\n      return true;\r\n  }\r\n\r\n  /// @dev Checks the amount of locked tokens\r\n  /// @param _from Address that we wish to check the locked amount\r\n  /// @return Number of locked tokens\r\n  function lockedAmount(address _from) public constant returns (uint256) {\r\n      return locked[_from].lockedAmount;\r\n  }\r\n\r\n  // token lock\r\n  /// @dev Locking tokens\r\n  /// @param _amount Amount of tokens to be locked\r\n  /// @return True if successfully locked\r\n  function lock(uint _amount) public returns (bool) {\r\n      require(_amount >= MINIMUM_LOCK_AMOUNT);\r\n      uint newLockedAmount = locked[msg.sender].lockedAmount.add(_amount);\r\n      require(balances[msg.sender] >= newLockedAmount);\r\n      _checkLock(msg.sender);\r\n      locked[msg.sender].lockedAmount = newLockedAmount;\r\n      locked[msg.sender].lastUpdated = now;\r\n      Lock(msg.sender, _amount);\r\n      return true;\r\n  }\r\n\r\n  /// @dev Used by lock, claimBonus and unlock functions\r\n  function _checkLock(address _from) internal returns (bool) {\r\n    if (locked[_from].lockedAmount >= MINIMUM_LOCK_AMOUNT) {\r\n      return _mintBonus(_from, locked[_from].lockedAmount);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /// @dev Used by lock and unlock functions\r\n  function _mintBonus(address _from, uint256 _amount) internal returns (bool) {\r\n      uint referentTime = max(locked[_from].lastUpdated, locked[_from].lastClaimed);\r\n      uint timeDifference = now.sub(referentTime);\r\n      uint amountTemp = (_amount.mul(timeDifference)).div(30 days); \r\n      uint mintableAmount = amountTemp.div(100);\r\n\r\n      locked[_from].lastClaimed = now;\r\n      _mint(_from, mintableAmount);\r\n      LockClaimed(_from, mintableAmount);\r\n      return true;\r\n  }\r\n\r\n  /// @dev Claim bonus from locked amount\r\n  /// @return True if successful\r\n  function claimBonus() public returns (bool) {\r\n      require(msg.sender != address(0));\r\n      return _checkLock(msg.sender);\r\n  }\r\n\r\n  /// @dev Unlocking the locked amount of tokens\r\n  /// @param _amount Amount of tokens to be unlocked\r\n  /// @return True if successful\r\n  function unlock(uint _amount) public returns (bool) {\r\n      require(msg.sender != address(0));\r\n      require(locked[msg.sender].lockedAmount >= _amount);\r\n      uint newLockedAmount = locked[msg.sender].lockedAmount.sub(_amount);\r\n      if (newLockedAmount < MINIMUM_LOCK_AMOUNT) {\r\n        Unlock(msg.sender, locked[msg.sender].lockedAmount);\r\n        _checkLock(msg.sender);\r\n        locked[msg.sender].lockedAmount = 0;\r\n      } else {\r\n        locked[msg.sender].lockedAmount = newLockedAmount;\r\n        Unlock(msg.sender, _amount);\r\n        _mintBonus(msg.sender, _amount);\r\n      }\r\n      return true;\r\n  }\r\n\r\n  /// @dev Used by transfer function\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n    require(!transferPaused);\r\n    require(_to != address(0));\r\n    require(balances[_from] >= _value.add(locked[_from].lockedAmount));\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n  \r\n  /// @dev Transfer tokens\r\n  /// @param _to Address to receive the tokens\r\n  /// @param _value Amount of tokens to be sent\r\n  /// @return True if successful\r\n  function transfer(address _to, uint _value) public returns (bool) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Check balance of an address\r\n  /// @param _owner Address to be checked\r\n  /// @return Number of tokens\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Get max number\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return The bigger one :)\r\n  function max(uint a, uint b) pure internal returns(uint) {\r\n    return (a > b) ? a : b;\r\n  }\r\n\r\n  /// @dev Don't accept ether\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n  /// @dev Claim tokens that have been sent to contract mistakenly\r\n  /// @param _token Token address that we want to claim\r\n  function claimTokens(address _token) public onlyOwner {\r\n    if (_token == address(0)) {\r\n         owner.transfer(this.balance);\r\n         return;\r\n    }\r\n\r\n    ERC20 token = ERC20(_token);\r\n    uint balance = token.balanceOf(this);\r\n    token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  /// Events\r\n  event Mint(address _to, uint _amount);\r\n  event Burn(address _from, uint _amount);\r\n  event Lock(address _from, uint _amount);\r\n  event LockClaimed(address _from, uint _amount);\r\n  event Unlock(address _from, uint _amount);\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event Pause();\r\n  event Unpause();\r\n\r\n}\r\n\r\n/// @title Wizzle Infinity Token contract\r\ncontract WizzleInfinityToken is ExtendedToken {\r\n    string public constant name = \"Wizzle Infinity Token\";\r\n    string public constant symbol = \"WZI\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant version = \"v1\";\r\n\r\n    function WizzleInfinityToken() public { \r\n      totalSupply = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LOCK_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGlobalOperator\",\"type\":\"address\"}],\"name\":\"changeGlobalOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCrowdsale\",\"type\":\"address\"}],\"name\":\"changeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"name\":\"lastClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LockClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousGlobalOperator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newGlobalOperator\",\"type\":\"address\"}],\"name\":\"GlobalOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousCrowdsale\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newCrowdsale\",\"type\":\"address\"}],\"name\":\"CrowdsaleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WizzleInfinityToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65f6d53fe9001f8f89a4378ae0315daa1817b3483cc4a26e8a044c1ee84fdef6"}]}