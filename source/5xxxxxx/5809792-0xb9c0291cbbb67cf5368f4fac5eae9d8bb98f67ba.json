{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract safeSend {\r\n    bool private txMutex3847834;\r\n\r\n    // we want to be able to call outside contracts (e.g. the admin proxy contract)\r\n    // but reentrency is bad, so here's a mutex.\r\n    function doSafeSend(address toAddr, uint amount) internal {\r\n        doSafeSendWData(toAddr, \"\", amount);\r\n    }\r\n\r\n    function doSafeSendWData(address toAddr, bytes data, uint amount) internal {\r\n        require(txMutex3847834 == false, \"ss-guard\");\r\n        txMutex3847834 = true;\r\n        // we need to use address.call.value(v)() because we want\r\n        // to be able to send to other contracts, even with no data,\r\n        // which might use more than 2300 gas in their fallback function.\r\n        require(toAddr.call.value(amount)(data), \"ss-failed\");\r\n        txMutex3847834 = false;\r\n    }\r\n}\r\n\r\ncontract payoutAllC is safeSend {\r\n    address private _payTo;\r\n\r\n    event PayoutAll(address payTo, uint value);\r\n\r\n    constructor(address initPayTo) public {\r\n        // DEV NOTE: you can overwrite _getPayTo if you want to reuse other storage vars\r\n        assert(initPayTo != address(0));\r\n        _payTo = initPayTo;\r\n    }\r\n\r\n    function _getPayTo() internal view returns (address) {\r\n        return _payTo;\r\n    }\r\n\r\n    function _setPayTo(address newPayTo) internal {\r\n        _payTo = newPayTo;\r\n    }\r\n\r\n    function payoutAll() external {\r\n        address a = _getPayTo();\r\n        uint bal = address(this).balance;\r\n        doSafeSend(a, bal);\r\n        emit PayoutAll(a, bal);\r\n    }\r\n}\r\n\r\ncontract payoutAllCSettable is payoutAllC {\r\n    constructor (address initPayTo) payoutAllC(initPayTo) public {\r\n    }\r\n\r\n    function setPayTo(address) external;\r\n    function getPayTo() external view returns (address) {\r\n        return _getPayTo();\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address newOwner);\r\n\r\n    modifier only_owner() {\r\n        require(msg.sender == owner, \"only_owner: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier owner_or(address addr) {\r\n        require(msg.sender == addr || msg.sender == owner, \"!owner-or\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address newOwner) only_owner() external {\r\n        owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n}\r\n\r\ncontract CanReclaimToken is owned {\r\n\r\n    /**\r\n    * @dev Reclaim all ERC20Basic compatible tokens\r\n    * @param token ERC20Basic The address of the token contract\r\n    */\r\n    function reclaimToken(ERC20Interface token) external only_owner {\r\n        uint256 balance = token.balanceOf(this);\r\n        require(token.approve(owner, balance));\r\n    }\r\n\r\n}\r\n\r\ncontract controlledIface {\r\n    function controller() external view returns (address);\r\n}\r\n\r\ncontract hasAdmins is owned {\r\n    mapping (uint => mapping (address => bool)) admins;\r\n    uint public currAdminEpoch = 0;\r\n    bool public adminsDisabledForever = false;\r\n    address[] adminLog;\r\n\r\n    event AdminAdded(address indexed newAdmin);\r\n    event AdminRemoved(address indexed oldAdmin);\r\n    event AdminEpochInc();\r\n    event AdminDisabledForever();\r\n\r\n    modifier only_admin() {\r\n        require(adminsDisabledForever == false, \"admins must not be disabled\");\r\n        require(isAdmin(msg.sender), \"only_admin: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _setAdmin(msg.sender, true);\r\n    }\r\n\r\n    function isAdmin(address a) view public returns (bool) {\r\n        return admins[currAdminEpoch][a];\r\n    }\r\n\r\n    function getAdminLogN() view external returns (uint) {\r\n        return adminLog.length;\r\n    }\r\n\r\n    function getAdminLog(uint n) view external returns (address) {\r\n        return adminLog[n];\r\n    }\r\n\r\n    function upgradeMeAdmin(address newAdmin) only_admin() external {\r\n        // note: already checked msg.sender has admin with `only_admin` modifier\r\n        require(msg.sender != owner, \"owner cannot upgrade self\");\r\n        _setAdmin(msg.sender, false);\r\n        _setAdmin(newAdmin, true);\r\n    }\r\n\r\n    function setAdmin(address a, bool _givePerms) only_admin() external {\r\n        require(a != msg.sender && a != owner, \"cannot change your own (or owner's) permissions\");\r\n        _setAdmin(a, _givePerms);\r\n    }\r\n\r\n    function _setAdmin(address a, bool _givePerms) internal {\r\n        admins[currAdminEpoch][a] = _givePerms;\r\n        if (_givePerms) {\r\n            emit AdminAdded(a);\r\n            adminLog.push(a);\r\n        } else {\r\n            emit AdminRemoved(a);\r\n        }\r\n    }\r\n\r\n    // safety feature if admins go bad or something\r\n    function incAdminEpoch() only_owner() external {\r\n        currAdminEpoch++;\r\n        admins[currAdminEpoch][msg.sender] = true;\r\n        emit AdminEpochInc();\r\n    }\r\n\r\n    // this is internal so contracts can all it, but not exposed anywhere in this\r\n    // contract.\r\n    function disableAdminForever() internal {\r\n        currAdminEpoch++;\r\n        adminsDisabledForever = true;\r\n        emit AdminDisabledForever();\r\n    }\r\n}\r\n\r\ncontract permissioned is owned, hasAdmins {\r\n    mapping (address => bool) editAllowed;\r\n    bool public adminLockdown = false;\r\n\r\n    event PermissionError(address editAddr);\r\n    event PermissionGranted(address editAddr);\r\n    event PermissionRevoked(address editAddr);\r\n    event PermissionsUpgraded(address oldSC, address newSC);\r\n    event SelfUpgrade(address oldSC, address newSC);\r\n    event AdminLockdown();\r\n\r\n    modifier only_editors() {\r\n        require(editAllowed[msg.sender], \"only_editors: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier no_lockdown() {\r\n        require(adminLockdown == false, \"no_lockdown: check failed\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() owned() hasAdmins() public {\r\n    }\r\n\r\n\r\n    function setPermissions(address e, bool _editPerms) no_lockdown() only_admin() external {\r\n        editAllowed[e] = _editPerms;\r\n        if (_editPerms)\r\n            emit PermissionGranted(e);\r\n        else\r\n            emit PermissionRevoked(e);\r\n    }\r\n\r\n    function upgradePermissionedSC(address oldSC, address newSC) no_lockdown() only_admin() external {\r\n        editAllowed[oldSC] = false;\r\n        editAllowed[newSC] = true;\r\n        emit PermissionsUpgraded(oldSC, newSC);\r\n    }\r\n\r\n    // always allow SCs to upgrade themselves, even after lockdown\r\n    function upgradeMe(address newSC) only_editors() external {\r\n        editAllowed[msg.sender] = false;\r\n        editAllowed[newSC] = true;\r\n        emit SelfUpgrade(msg.sender, newSC);\r\n    }\r\n\r\n    function hasPermissions(address a) public view returns (bool) {\r\n        return editAllowed[a];\r\n    }\r\n\r\n    function doLockdown() external only_owner() no_lockdown() {\r\n        disableAdminForever();\r\n        adminLockdown = true;\r\n        emit AdminLockdown();\r\n    }\r\n}\r\n\r\ncontract upgradePtr {\r\n    address ptr = address(0);\r\n\r\n    modifier not_upgraded() {\r\n        require(ptr == address(0), \"upgrade pointer is non-zero\");\r\n        _;\r\n    }\r\n\r\n    function getUpgradePointer() view external returns (address) {\r\n        return ptr;\r\n    }\r\n\r\n    function doUpgradeInternal(address nextSC) internal {\r\n        ptr = nextSC;\r\n    }\r\n}\r\n\r\ninterface ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() constant external returns (uint256 _totalSupply);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function subToZero(uint a, uint b) internal pure returns (uint) {\r\n        if (a < b) {  // then (a - b) would overflow\r\n            return 0;\r\n        }\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract ixPaymentEvents {\r\n    event UpgradedToPremium(bytes32 indexed democHash);\r\n    event GrantedAccountTime(bytes32 indexed democHash, uint additionalSeconds, bytes32 ref);\r\n    event AccountPayment(bytes32 indexed democHash, uint additionalSeconds);\r\n    event SetCommunityBallotFee(uint amount);\r\n    event SetBasicCentsPricePer30Days(uint amount);\r\n    event SetPremiumMultiplier(uint8 multiplier);\r\n    event DowngradeToBasic(bytes32 indexed democHash);\r\n    event UpgradeToPremium(bytes32 indexed democHash);\r\n    event SetExchangeRate(uint weiPerCent);\r\n    event FreeExtension(bytes32 democHash);\r\n    event SetBallotsPer30Days(uint amount);\r\n    event SetFreeExtension(bytes32 democHash, bool hasFreeExt);\r\n    event SetDenyPremium(bytes32 democHash, bool isPremiumDenied);\r\n    event SetPayTo(address payTo);\r\n    event SetMinorEditsAddr(address minorEditsAddr);\r\n    event SetMinWeiForDInit(uint amount);\r\n}\r\n\r\ninterface hasVersion {\r\n    function getVersion() external pure returns (uint);\r\n}\r\n\r\ncontract IxPaymentsIface is hasVersion, ixPaymentEvents, permissioned, CanReclaimToken, payoutAllCSettable {\r\n    /* in emergency break glass */\r\n    function emergencySetOwner(address newOwner) external;\r\n\r\n    /* financial calcluations */\r\n    function weiBuysHowManySeconds(uint amount) public view returns (uint secs);\r\n    function weiToCents(uint w) public view returns (uint);\r\n    function centsToWei(uint c) public view returns (uint);\r\n\r\n    /* account management */\r\n    function payForDemocracy(bytes32 democHash) external payable;\r\n    function doFreeExtension(bytes32 democHash) external;\r\n    function downgradeToBasic(bytes32 democHash) external;\r\n    function upgradeToPremium(bytes32 democHash) external;\r\n\r\n    /* account status - getters */\r\n    function accountInGoodStanding(bytes32 democHash) external view returns (bool);\r\n    function getSecondsRemaining(bytes32 democHash) external view returns (uint);\r\n    function getPremiumStatus(bytes32 democHash) external view returns (bool);\r\n    function getFreeExtension(bytes32 democHash) external view returns (bool);\r\n    function getAccount(bytes32 democHash) external view returns (bool isPremium, uint lastPaymentTs, uint paidUpTill, bool hasFreeExtension);\r\n    function getDenyPremium(bytes32 democHash) external view returns (bool);\r\n\r\n    /* admin utils for accounts */\r\n    function giveTimeToDemoc(bytes32 democHash, uint additionalSeconds, bytes32 ref) external;\r\n\r\n    /* admin setters global */\r\n    function setPayTo(address) external;\r\n    function setMinorEditsAddr(address) external;\r\n    function setBasicCentsPricePer30Days(uint amount) external;\r\n    function setBasicBallotsPer30Days(uint amount) external;\r\n    function setPremiumMultiplier(uint8 amount) external;\r\n    function setWeiPerCent(uint) external;\r\n    function setFreeExtension(bytes32 democHash, bool hasFreeExt) external;\r\n    function setDenyPremium(bytes32 democHash, bool isPremiumDenied) external;\r\n    function setMinWeiForDInit(uint amount) external;\r\n\r\n    /* global getters */\r\n    function getBasicCentsPricePer30Days() external view returns(uint);\r\n    function getBasicExtraBallotFeeWei() external view returns (uint);\r\n    function getBasicBallotsPer30Days() external view returns (uint);\r\n    function getPremiumMultiplier() external view returns (uint8);\r\n    function getPremiumCentsPricePer30Days() external view returns (uint);\r\n    function getWeiPerCent() external view returns (uint weiPerCent);\r\n    function getUsdEthExchangeRate() external view returns (uint centsPerEth);\r\n    function getMinWeiForDInit() external view returns (uint);\r\n\r\n    /* payments stuff */\r\n    function getPaymentLogN() external view returns (uint);\r\n    function getPaymentLog(uint n) external view returns (bool _external, bytes32 _democHash, uint _seconds, uint _ethValue);\r\n}\r\n\r\ncontract SVPayments is IxPaymentsIface {\r\n    uint constant VERSION = 2;\r\n\r\n    struct Account {\r\n        bool isPremium;\r\n        uint lastPaymentTs;\r\n        uint paidUpTill;\r\n        uint lastUpgradeTs;  // timestamp of the last time it was upgraded to premium\r\n    }\r\n\r\n    struct PaymentLog {\r\n        bool _external;\r\n        bytes32 _democHash;\r\n        uint _seconds;\r\n        uint _ethValue;\r\n    }\r\n\r\n    // this is an address that's only allowed to make minor edits\r\n    // e.g. setExchangeRate, setDenyPremium, giveTimeToDemoc\r\n    address public minorEditsAddr;\r\n\r\n    // payment details\r\n    uint basicCentsPricePer30Days = 125000; // $1250/mo\r\n    uint basicBallotsPer30Days = 10;\r\n    uint8 premiumMultiplier = 5;\r\n    uint weiPerCent = 0.000016583747 ether;  // $603, 4th June 2018\r\n\r\n    uint minWeiForDInit = 1;  // minimum 1 wei - match existing behaviour in SVIndex\r\n\r\n    mapping (bytes32 => Account) accounts;\r\n    PaymentLog[] payments;\r\n\r\n    // can set this on freeExtension democs to deny them premium upgrades\r\n    mapping (bytes32 => bool) denyPremium;\r\n    // this is used for non-profits or organisations that have perpetual licenses, etc\r\n    mapping (bytes32 => bool) freeExtension;\r\n\r\n\r\n    /* BREAK GLASS IN CASE OF EMERGENCY */\r\n    // this is included here because something going wrong with payments is possibly\r\n    // the absolute worst case. Note: does this have negligable benefit if the other\r\n    // contracts are compromised? (e.g. by a leaked privkey)\r\n    address public emergencyAdmin;\r\n    function emergencySetOwner(address newOwner) external {\r\n        require(msg.sender == emergencyAdmin, \"!emergency-owner\");\r\n        owner = newOwner;\r\n    }\r\n    /* END BREAK GLASS */\r\n\r\n\r\n    constructor(address _emergencyAdmin) payoutAllCSettable(msg.sender) public {\r\n        emergencyAdmin = _emergencyAdmin;\r\n        assert(_emergencyAdmin != address(0));\r\n    }\r\n\r\n    /* base SCs */\r\n\r\n    function getVersion() external pure returns (uint) {\r\n        return VERSION;\r\n    }\r\n\r\n    function() payable public {\r\n        _getPayTo().transfer(msg.value);\r\n    }\r\n\r\n    function _modAccountBalance(bytes32 democHash, uint additionalSeconds) internal {\r\n        uint prevPaidTill = accounts[democHash].paidUpTill;\r\n        if (prevPaidTill < now) {\r\n            prevPaidTill = now;\r\n        }\r\n\r\n        accounts[democHash].paidUpTill = prevPaidTill + additionalSeconds;\r\n        accounts[democHash].lastPaymentTs = now;\r\n    }\r\n\r\n    /* Financial Calculations */\r\n\r\n    function weiBuysHowManySeconds(uint amount) public view returns (uint) {\r\n        uint centsPaid = weiToCents(amount);\r\n        // multiply by 10**18 to ensure we make rounding errors insignificant\r\n        uint monthsOffsetPaid = ((10 ** 18) * centsPaid) / basicCentsPricePer30Days;\r\n        uint secondsOffsetPaid = monthsOffsetPaid * (30 days);\r\n        uint additionalSeconds = secondsOffsetPaid / (10 ** 18);\r\n        return additionalSeconds;\r\n    }\r\n\r\n    function weiToCents(uint w) public view returns (uint) {\r\n        return w / weiPerCent;\r\n    }\r\n\r\n    function centsToWei(uint c) public view returns (uint) {\r\n        return c * weiPerCent;\r\n    }\r\n\r\n    /* account management */\r\n\r\n    function payForDemocracy(bytes32 democHash) external payable {\r\n        require(msg.value > 0, \"need to send some ether to make payment\");\r\n\r\n        uint additionalSeconds = weiBuysHowManySeconds(msg.value);\r\n\r\n        if (accounts[democHash].isPremium) {\r\n            additionalSeconds /= premiumMultiplier;\r\n        }\r\n\r\n        if (additionalSeconds >= 1) {\r\n            _modAccountBalance(democHash, additionalSeconds);\r\n        }\r\n        payments.push(PaymentLog(false, democHash, additionalSeconds, msg.value));\r\n        emit AccountPayment(democHash, additionalSeconds);\r\n\r\n        _getPayTo().transfer(msg.value);\r\n    }\r\n\r\n    function doFreeExtension(bytes32 democHash) external {\r\n        require(freeExtension[democHash], \"!free\");\r\n        uint newPaidUpTill = now + 60 days;\r\n        accounts[democHash].paidUpTill = newPaidUpTill;\r\n        emit FreeExtension(democHash);\r\n    }\r\n\r\n    function downgradeToBasic(bytes32 democHash) only_editors() external {\r\n        require(accounts[democHash].isPremium, \"!premium\");\r\n        accounts[democHash].isPremium = false;\r\n        // convert premium minutes to basic\r\n        uint paidTill = accounts[democHash].paidUpTill;\r\n        uint timeRemaining = SafeMath.subToZero(paidTill, now);\r\n        // if we have time remaining: convert it\r\n        if (timeRemaining > 0) {\r\n            // prevent accounts from downgrading if they have time remaining\r\n            // and upgraded less than 24hrs ago\r\n            require(accounts[democHash].lastUpgradeTs < (now - 24 hours), \"downgrade-too-soon\");\r\n            timeRemaining *= premiumMultiplier;\r\n            accounts[democHash].paidUpTill = now + timeRemaining;\r\n        }\r\n        emit DowngradeToBasic(democHash);\r\n    }\r\n\r\n    function upgradeToPremium(bytes32 democHash) only_editors() external {\r\n        require(denyPremium[democHash] == false, \"upgrade-denied\");\r\n        require(!accounts[democHash].isPremium, \"!basic\");\r\n        accounts[democHash].isPremium = true;\r\n        // convert basic minutes to premium minutes\r\n        uint paidTill = accounts[democHash].paidUpTill;\r\n        uint timeRemaining = SafeMath.subToZero(paidTill, now);\r\n        // if we have time remaning then convert it - otherwise don't need to do anything\r\n        if (timeRemaining > 0) {\r\n            timeRemaining /= premiumMultiplier;\r\n            accounts[democHash].paidUpTill = now + timeRemaining;\r\n        }\r\n        accounts[democHash].lastUpgradeTs = now;\r\n        emit UpgradedToPremium(democHash);\r\n    }\r\n\r\n    /* account status - getters */\r\n\r\n    function accountInGoodStanding(bytes32 democHash) external view returns (bool) {\r\n        return accounts[democHash].paidUpTill >= now;\r\n    }\r\n\r\n    function getSecondsRemaining(bytes32 democHash) external view returns (uint) {\r\n        return SafeMath.subToZero(accounts[democHash].paidUpTill, now);\r\n    }\r\n\r\n    function getPremiumStatus(bytes32 democHash) external view returns (bool) {\r\n        return accounts[democHash].isPremium;\r\n    }\r\n\r\n    function getFreeExtension(bytes32 democHash) external view returns (bool) {\r\n        return freeExtension[democHash];\r\n    }\r\n\r\n    function getAccount(bytes32 democHash) external view returns (bool isPremium, uint lastPaymentTs, uint paidUpTill, bool hasFreeExtension) {\r\n        isPremium = accounts[democHash].isPremium;\r\n        lastPaymentTs = accounts[democHash].lastPaymentTs;\r\n        paidUpTill = accounts[democHash].paidUpTill;\r\n        hasFreeExtension = freeExtension[democHash];\r\n    }\r\n\r\n    function getDenyPremium(bytes32 democHash) external view returns (bool) {\r\n        return denyPremium[democHash];\r\n    }\r\n\r\n    /* admin utils for accounts */\r\n\r\n    function giveTimeToDemoc(bytes32 democHash, uint additionalSeconds, bytes32 ref) owner_or(minorEditsAddr) external {\r\n        _modAccountBalance(democHash, additionalSeconds);\r\n        payments.push(PaymentLog(true, democHash, additionalSeconds, 0));\r\n        emit GrantedAccountTime(democHash, additionalSeconds, ref);\r\n    }\r\n\r\n    /* admin setters global */\r\n\r\n    function setPayTo(address newPayTo) only_owner() external {\r\n        _setPayTo(newPayTo);\r\n        emit SetPayTo(newPayTo);\r\n    }\r\n\r\n    function setMinorEditsAddr(address a) only_owner() external {\r\n        minorEditsAddr = a;\r\n        emit SetMinorEditsAddr(a);\r\n    }\r\n\r\n    function setBasicCentsPricePer30Days(uint amount) only_owner() external {\r\n        basicCentsPricePer30Days = amount;\r\n        emit SetBasicCentsPricePer30Days(amount);\r\n    }\r\n\r\n    function setBasicBallotsPer30Days(uint amount) only_owner() external {\r\n        basicBallotsPer30Days = amount;\r\n        emit SetBallotsPer30Days(amount);\r\n    }\r\n\r\n    function setPremiumMultiplier(uint8 m) only_owner() external {\r\n        premiumMultiplier = m;\r\n        emit SetPremiumMultiplier(m);\r\n    }\r\n\r\n    function setWeiPerCent(uint wpc) owner_or(minorEditsAddr) external {\r\n        weiPerCent = wpc;\r\n        emit SetExchangeRate(wpc);\r\n    }\r\n\r\n    function setFreeExtension(bytes32 democHash, bool hasFreeExt) owner_or(minorEditsAddr) external {\r\n        freeExtension[democHash] = hasFreeExt;\r\n        emit SetFreeExtension(democHash, hasFreeExt);\r\n    }\r\n\r\n    function setDenyPremium(bytes32 democHash, bool isPremiumDenied) owner_or(minorEditsAddr) external {\r\n        denyPremium[democHash] = isPremiumDenied;\r\n        emit SetDenyPremium(democHash, isPremiumDenied);\r\n    }\r\n\r\n    function setMinWeiForDInit(uint amount) owner_or(minorEditsAddr) external {\r\n        minWeiForDInit = amount;\r\n        emit SetMinWeiForDInit(amount);\r\n    }\r\n\r\n    /* global getters */\r\n\r\n    function getBasicCentsPricePer30Days() external view returns (uint) {\r\n        return basicCentsPricePer30Days;\r\n    }\r\n\r\n    function getBasicExtraBallotFeeWei() external view returns (uint) {\r\n        return centsToWei(basicCentsPricePer30Days / basicBallotsPer30Days);\r\n    }\r\n\r\n    function getBasicBallotsPer30Days() external view returns (uint) {\r\n        return basicBallotsPer30Days;\r\n    }\r\n\r\n    function getPremiumMultiplier() external view returns (uint8) {\r\n        return premiumMultiplier;\r\n    }\r\n\r\n    function getPremiumCentsPricePer30Days() external view returns (uint) {\r\n        return _premiumPricePer30Days();\r\n    }\r\n\r\n    function _premiumPricePer30Days() internal view returns (uint) {\r\n        return uint(premiumMultiplier) * basicCentsPricePer30Days;\r\n    }\r\n\r\n    function getWeiPerCent() external view returns (uint) {\r\n        return weiPerCent;\r\n    }\r\n\r\n    function getUsdEthExchangeRate() external view returns (uint) {\r\n        // this returns cents per ether\r\n        return 1 ether / weiPerCent;\r\n    }\r\n\r\n    function getMinWeiForDInit() external view returns (uint) {\r\n        return minWeiForDInit;\r\n    }\r\n\r\n    /* payments stuff */\r\n\r\n    function getPaymentLogN() external view returns (uint) {\r\n        return payments.length;\r\n    }\r\n\r\n    function getPaymentLog(uint n) external view returns (bool _external, bytes32 _democHash, uint _seconds, uint _ethValue) {\r\n        _external = payments[n]._external;\r\n        _democHash = payments[n]._democHash;\r\n        _seconds = payments[n]._seconds;\r\n        _ethValue = payments[n]._ethValue;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"payForDemocracy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"additionalSeconds\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"bytes32\"}],\"name\":\"giveTimeToDemoc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBasicCentsPricePer30Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doLockdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getDenyPremium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emergencySetOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minorEditsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"centsToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"hasPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getAdminLog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"isPremiumDenied\",\"type\":\"bool\"}],\"name\":\"setDenyPremium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"accountInGoodStanding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setMinorEditsAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currAdminEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"downgradeToBasic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminLogN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incAdminEpoch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"_givePerms\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"upgradeMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasicBallotsPer30Days\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsDisabledForever\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinWeiForDInit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"_editPerms\",\"type\":\"bool\"}],\"name\":\"setPermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPayTo\",\"type\":\"address\"}],\"name\":\"setPayTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getFreeExtension\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaymentLogN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"w\",\"type\":\"uint256\"}],\"name\":\"weiToCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getPremiumStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPremiumMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminLockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiPerCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"upgradeMeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBasicBallotsPer30Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasicExtraBallotFeeWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldSC\",\"type\":\"address\"},{\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"upgradePermissionedSC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"},{\"name\":\"hasFreeExt\",\"type\":\"bool\"}],\"name\":\"setFreeExtension\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"upgradeToPremium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wpc\",\"type\":\"uint256\"}],\"name\":\"setWeiPerCent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getAccount\",\"outputs\":[{\"name\":\"isPremium\",\"type\":\"bool\"},{\"name\":\"lastPaymentTs\",\"type\":\"uint256\"},{\"name\":\"paidUpTill\",\"type\":\"uint256\"},{\"name\":\"hasFreeExtension\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdEthExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"m\",\"type\":\"uint8\"}],\"name\":\"setPremiumMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasicCentsPricePer30Days\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPremiumCentsPricePer30Days\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondsRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinWeiForDInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"weiBuysHowManySeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPaymentLog\",\"outputs\":[{\"name\":\"_external\",\"type\":\"bool\"},{\"name\":\"_democHash\",\"type\":\"bytes32\"},{\"name\":\"_seconds\",\"type\":\"uint256\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"doFreeExtension\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_emergencyAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editAddr\",\"type\":\"address\"}],\"name\":\"PermissionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editAddr\",\"type\":\"address\"}],\"name\":\"PermissionGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"editAddr\",\"type\":\"address\"}],\"name\":\"PermissionRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldSC\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"PermissionsUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldSC\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"SelfUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminLockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminEpochInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminDisabledForever\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"UpgradedToPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"additionalSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref\",\"type\":\"bytes32\"}],\"name\":\"GrantedAccountTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"additionalSeconds\",\"type\":\"uint256\"}],\"name\":\"AccountPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetCommunityBallotFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetBasicCentsPricePer30Days\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"multiplier\",\"type\":\"uint8\"}],\"name\":\"SetPremiumMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"DowngradeToBasic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"UpgradeToPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weiPerCent\",\"type\":\"uint256\"}],\"name\":\"SetExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"democHash\",\"type\":\"bytes32\"}],\"name\":\"FreeExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetBallotsPer30Days\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hasFreeExt\",\"type\":\"bool\"}],\"name\":\"SetFreeExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"democHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isPremiumDenied\",\"type\":\"bool\"}],\"name\":\"SetDenyPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payTo\",\"type\":\"address\"}],\"name\":\"SetPayTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minorEditsAddr\",\"type\":\"address\"}],\"name\":\"SetMinorEditsAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetMinWeiForDInit\",\"type\":\"event\"}]","ContractName":"SVPayments","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eb25836be37e8dd1163f5a2c0f5e3d92af5bb4d5","Library":"","SwarmSource":"bzzr://817a340653e8675ee5f9693d5cb4a65a798735734ba68e010bcc232756932504"}]}