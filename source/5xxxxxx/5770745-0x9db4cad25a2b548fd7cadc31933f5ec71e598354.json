{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract TokenDistributor is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    address public targetToken;\r\n    address[] public stakeHolders;\r\n    uint256 public maxStakeHolders;\r\n    event InsufficientTokenBalance( address indexed _token, uint256 _time );\r\n    event TokensDistributed( address indexed _token, uint256 _total, uint256 _time );\r\n\r\n    constructor ( address _targetToken, uint256 _totalStakeHolders, address[] _stakeHolders) public Ownable() {\r\n        setTargetToken(_targetToken);\r\n        maxStakeHolders = _totalStakeHolders;\r\n        if (_stakeHolders.length > 0) {\r\n            for (uint256 count = 0; count < _stakeHolders.length && count < _totalStakeHolders; count++) {\r\n                if (_stakeHolders[count] != 0x0) {\r\n                    _setStakeHolder(_stakeHolders[count]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isDistributionDue (address _token) public view returns (bool) {\r\n        return getTokenBalance(_token) > 1;\r\n    }\r\n\r\n    function isDistributionDue () public view returns (bool) {\r\n        return getTokenBalance(targetToken) > 1;\r\n    }\r\n\r\n    function countStakeHolders () public view returns (uint256) {\r\n        return stakeHolders.length;\r\n    }\r\n\r\n    function getTokenBalance(address _token) public view returns (uint256) {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getPortion (uint256 _total) public view returns (uint256) {\r\n        return _total.div(stakeHolders.length);\r\n    }\r\n\r\n    function setTargetToken (address _targetToken) public onlyOwner returns (bool) {\r\n        if(_targetToken != 0x0 && targetToken == 0x0) {\r\n          targetToken = _targetToken;\r\n          return true;\r\n        }\r\n    }\r\n\r\n    function _setStakeHolder (address _stakeHolder) internal onlyOwner returns (bool) {\r\n        require(countStakeHolders() < maxStakeHolders, \"Max StakeHolders set\");\r\n        stakeHolders.push(_stakeHolder);\r\n        return true;\r\n    }\r\n\r\n    function _transfer (address _token, address _recipient, uint256 _value) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        token.transfer(_recipient, _value);\r\n    }\r\n\r\n    function distribute (address _token) public returns (bool) {\r\n        uint256 balance = getTokenBalance(_token);\r\n        uint256 perStakeHolder = getPortion(balance);\r\n\r\n        if (balance < 1) {\r\n            emit InsufficientTokenBalance(_token, block.timestamp);\r\n            return false;\r\n        } else {\r\n            for (uint256 count = 0; count < stakeHolders.length; count++) {\r\n                _transfer(_token, stakeHolders[count], perStakeHolder);\r\n            }\r\n\r\n            uint256 newBalance = getTokenBalance(_token);\r\n            if (newBalance > 0 && getPortion(newBalance) == 0) {\r\n                _transfer(_token, owner, newBalance);\r\n            }\r\n\r\n            emit TokensDistributed(_token, balance, block.timestamp);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function () public {\r\n        distribute(targetToken);\r\n    }\r\n}\r\n\r\ncontract WeightedTokenDistributor is TokenDistributor {\r\n    using SafeMath for uint;\r\n\r\n    mapping( address => uint256) public stakeHoldersWeight;\r\n\r\n    constructor ( address _targetToken, uint256 _totalStakeHolders, address[] _stakeHolders, uint256[] _weights) public\r\n    TokenDistributor(_targetToken, _totalStakeHolders, stakeHolders)\r\n    {\r\n        if (_stakeHolders.length > 0) {\r\n            for (uint256 count = 0; count < _stakeHolders.length && count < _totalStakeHolders; count++) {\r\n                if (_stakeHolders[count] != 0x0) {\r\n                  _setStakeHolder( _stakeHolders[count], _weights[count] );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTotalWeight () public view returns (uint256 _total) {\r\n        for (uint256 count = 0; count < stakeHolders.length; count++) {\r\n            _total = _total.add(stakeHoldersWeight[stakeHolders[count]]);\r\n        }\r\n    }\r\n\r\n    function getPortion (uint256 _total, uint256 _totalWeight, address _stakeHolder) public view returns (uint256) {\r\n        uint256 weight = stakeHoldersWeight[_stakeHolder];\r\n        return (_total.mul(weight)).div(_totalWeight);\r\n    }\r\n\r\n    function getPortion (uint256 _total) public view returns (uint256) {\r\n        revert(\"Kindly indicate stakeHolder and totalWeight\");\r\n    }\r\n\r\n    function _setStakeHolder (address _stakeHolder, uint256 _weight) internal onlyOwner returns (bool) {\r\n        stakeHoldersWeight[_stakeHolder] = _weight;\r\n        require(super._setStakeHolder(_stakeHolder));\r\n        return true;\r\n    }\r\n\r\n    function _setStakeHolder (address _stakeHolder) internal onlyOwner returns (bool) {\r\n        revert(\"Kindly set Weights for stakeHolder\");\r\n    }\r\n\r\n    function distribute (address _token) public returns (bool) {\r\n        uint256 balance = getTokenBalance(_token);\r\n        uint256 totalWeight = getTotalWeight();\r\n\r\n        if (balance < 1) {\r\n            emit InsufficientTokenBalance(_token, block.timestamp);\r\n            return false;\r\n        } else {\r\n            for (uint256 count = 0; count < stakeHolders.length; count++) {\r\n                uint256 perStakeHolder = getPortion(balance, totalWeight, stakeHolders[count]);\r\n                _transfer(_token, stakeHolders[count], perStakeHolder);\r\n            }\r\n\r\n            uint256 newBalance = getTokenBalance(_token);\r\n            if (newBalance > 0) {\r\n                _transfer(_token, owner, newBalance);\r\n            }\r\n\r\n            emit TokensDistributed(_token, balance, block.timestamp);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWeight\",\"outputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"setTargetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countStakeHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStakeHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isDistributionDue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_total\",\"type\":\"uint256\"},{\"name\":\"_totalWeight\",\"type\":\"uint256\"},{\"name\":\"_stakeHolder\",\"type\":\"address\"}],\"name\":\"getPortion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDistributionDue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeHoldersWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"getPortion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_targetToken\",\"type\":\"address\"},{\"name\":\"_totalStakeHolders\",\"type\":\"uint256\"},{\"name\":\"_stakeHolders\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"TokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WeightedTokenDistributor","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000ec66d98e5a7ddbfea66345cea8626b5403af1315000000000000000000000000d6facd899f03c4afce389ea51d73e8fd7d8a53e20000000000000000000000008c3720060f8cfdf8b8d4da5698f4f51a48a0828a0000000000000000000000009a9e6588af6d1bc42572b0e3c3d2f827daba64ac0000000000000000000000004a7a9f1ac903a94f8ed8e91bd0c7b5307d29ec1800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000018","Library":"","SwarmSource":"bzzr://4c59db332c576adf98e6e89e3ca84a6cc3cacdbdb2fe827bdffa6cf3fe0eea7f"}]}