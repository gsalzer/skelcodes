{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface Token {\r\n    function totalSupply() constant external returns (uint256 ts);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n    function burn(uint256 amount) external returns (bool success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      uint256 z = x + y;\r\n      require((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSub(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      require(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMul(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n      uint z = x * y;\r\n      require((x == 0) || (z / x == y));\r\n      return z;\r\n    }\r\n    \r\n    function safeDiv(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        require(y > 0);\r\n        return x / y;\r\n    }\r\n\r\n    function random(uint N, uint salt)\r\n        internal\r\n        view\r\n    returns(uint) {\r\n      bytes32 hash = keccak256(block.number, msg.sender, salt);\r\n      return uint(hash) % N;\r\n    }\r\n}\r\n\r\ninterface Baliv {\r\n    function agentMakeOrder(address fromToken, address toToken, uint256 price, uint256 amount, address representor) external payable returns(bool);\r\n    function userTakeOrder(address fromToken, address toToken, uint256 price, uint256 amount, address representor) external payable returns(bool);\r\n    function getPrice(address fromToken_, address toToken_) external view returns(uint256);\r\n}\r\n\r\ninterface TokenFactory {\r\n    function getPrice(address token_) external view returns(uint256);\r\n}\r\n\r\ncontract Authorization {\r\n    mapping(address => bool) internal authbook;\r\n    address[] public operators;\r\n    address owner;\r\n\r\n    function Authorization()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n        assignOperator(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyOperator\r\n    {\r\n        assert(checkOperator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner_)\r\n        onlyOwner\r\n        public\r\n    {\r\n        owner = newOwner_;\r\n    }\r\n    \r\n    function assignOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if(user_ != address(0) && !authbook[user_]) {\r\n            authbook[user_] = true;\r\n            operators.push(user_);\r\n        }\r\n    }\r\n    \r\n    function dismissOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        delete authbook[user_];\r\n        for(uint i = 0; i < operators.length; i++) {\r\n            if(operators[i] == user_) {\r\n                operators[i] = operators[operators.length - 1];\r\n                operators.length -= 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function checkOperator(address user_)\r\n        public\r\n        view\r\n    returns(bool) {\r\n        return authbook[user_];\r\n    }\r\n}\r\n\r\ncontract FundAccount is Authorization, SafeMath {\r\n    string public version = \"0.5.0\";\r\n\r\n    address public tokenFactory = 0x0036B86289ccCE0984251CCCA62871b589B0F52d68;\r\n    address public xpaExchange = 0x008ea74569c1b9bbb13780114b6b5e93396910070a;\r\n    address public XPA = 0x0090528aeb3a2b736b780fd1b6c478bb7e1d643170;\r\n    function FundAccount() public {}\r\n\r\n    /*\r\n        10% - 110% price\r\n        20% - 105% price\r\n        40% - 100% price\r\n        20% -  95% price\r\n        10% -  90% price\r\n     */\r\n    function burn(\r\n        address token_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n        onlyOperator\r\n    returns(bool) {\r\n        uint256 price = TokenFactory(tokenFactory).getPrice(token_);\r\n        uint256 xpaAmount = amount_ * 1 ether / price;\r\n        if(\r\n            Token(token_).burn(amount_) &&\r\n            xpaAmount > 0 &&\r\n            Token(XPA).balanceOf(this) >= xpaAmount\r\n        ) {\r\n            uint256 orderAmount = safeDiv(xpaAmount, 10);\r\n            Token(XPA).approve(xpaExchange, orderAmount);\r\n            Baliv(xpaExchange).agentMakeOrder(XPA, token_, safeDiv(safeMul(price, 110), 100), orderAmount, this);\r\n\r\n            orderAmount = safeDiv(xpaAmount, 5);\r\n            Token(XPA).approve(xpaExchange, orderAmount);\r\n            Baliv(xpaExchange).agentMakeOrder(XPA, token_, safeDiv(safeMul(price, 105), 100), orderAmount, this);\r\n\r\n            orderAmount = safeDiv(xpaAmount, 2);\r\n            Token(XPA).approve(xpaExchange, orderAmount);\r\n            Baliv(xpaExchange).agentMakeOrder(XPA, token_, price, orderAmount, this);\r\n\r\n            orderAmount = safeDiv(xpaAmount, 10);\r\n            Token(XPA).approve(xpaExchange, orderAmount);\r\n            Baliv(xpaExchange).agentMakeOrder(XPA, token_, safeDiv(safeMul(price, 95), 100), orderAmount, this);\r\n\r\n            orderAmount = safeDiv(xpaAmount, 10);\r\n            Token(XPA).approve(xpaExchange, orderAmount);\r\n            Baliv(xpaExchange).agentMakeOrder(XPA, token_, safeDiv(safeMul(price, 90), 100), orderAmount, this);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function withdraw(\r\n        address token_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n        onlyOperator\r\n    returns(bool) {\r\n        if(token_ == address(0)) {\r\n            msg.sender.transfer(amount_);\r\n            return true;\r\n        } else {\r\n            return Token(token_).transfer(msg.sender, amount_);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"xpaExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"XPA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"assignOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"dismissOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"checkOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FundAccount","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://28b65c7ab40ba2fb647dd43ce1d9ceb53ded1e8fe994d0e191395a7760121aa8"}]}