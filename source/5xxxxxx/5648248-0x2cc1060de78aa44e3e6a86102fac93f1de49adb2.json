{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @param _rate Number of token units a buyer gets per wei\r\n     * @param _wallet Address where collected funds will be forwarded to\r\n     * @param _token Address of the token being sold\r\n     */\r\n    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = _token;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Crowdsale external interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * @param _beneficiary Address performing the token purchase\r\n     */\r\n    function buyTokens(address _beneficiary) public payable {\r\n\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(\r\n        msg.sender,\r\n        _beneficiary,\r\n        weiAmount,\r\n        tokens\r\n        );\r\n\r\n        _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n     * @param _beneficiary Address receiving the tokens\r\n     * @param _tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n     * @param _beneficiary Address receiving the tokens\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title UbexCrowdsale\r\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\r\n */\r\ncontract UbexCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Map of all purchaiser's balances (doesn't include bounty amounts)\r\n    mapping(address => uint256) public balances;\r\n\r\n    // Amount of issued tokens\r\n    uint256 public tokensIssued;\r\n\r\n    // Bonus tokens rate multiplier x1000 (i.e. 1200 is 1.2 x 1000 = 120% x1000 = +20% bonus)\r\n    uint256 public bonusMultiplier;\r\n\r\n    // Is a crowdsale closed?\r\n    bool public closed;\r\n\r\n    /**\r\n     * Event for token withdrawal logging\r\n     * @param receiver who receive the tokens\r\n     * @param amount amount of tokens sent\r\n     */\r\n    event TokenDelivered(address indexed receiver, uint256 amount);\r\n\r\n    /**\r\n   * Event for token adding by referral program\r\n   * @param beneficiary who got the tokens\r\n   * @param amount amount of tokens added\r\n   */\r\n    event TokenAdded(address indexed beneficiary, uint256 amount);\r\n\r\n    /**\r\n    * Init crowdsale by setting its params\r\n    *\r\n    * @param _rate Number of token units a buyer gets per wei\r\n    * @param _wallet Address where collected funds will be forwarded to\r\n    * @param _token Address of the token being sold\r\n    * @param _bonusMultiplier bonus tokens rate multiplier x1000\r\n    */\r\n    function UbexCrowdsale(\r\n        uint256 _rate,\r\n        address _wallet,\r\n        ERC20 _token,\r\n        uint256 _bonusMultiplier\r\n    ) Crowdsale(\r\n        _rate,\r\n        _wallet,\r\n        _token\r\n    ) {\r\n        bonusMultiplier = _bonusMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens only after crowdsale ends.\r\n     */\r\n    function withdrawTokens() public {\r\n        _withdrawTokensFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n     * @param _beneficiary Token purchaser\r\n     * @param _tokenAmount Amount of tokens purchased\r\n     */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        require(!hasClosed());\r\n        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\r\n        tokensIssued = tokensIssued.add(_tokenAmount);\r\n    }\r\n\r\n    /**\r\n   * @dev Overrides the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate).mul(bonusMultiplier).div(1000);\r\n    }\r\n\r\n    /**\r\n     * @dev Deliver tokens to receiver_ after crowdsale ends.\r\n     */\r\n    function withdrawTokensFor(address receiver_) public onlyOwner {\r\n        _withdrawTokensFor(receiver_);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        return closed;\r\n    }\r\n\r\n    /**\r\n     * @dev Closes the period in which the crowdsale is open.\r\n     */\r\n    function closeCrowdsale(bool closed_) public onlyOwner {\r\n        closed = closed_;\r\n    }\r\n\r\n    /**\r\n     * @dev set the bonus multiplier.\r\n     */\r\n    function setBonusMultiplier(uint256 bonusMultiplier_) public onlyOwner {\r\n        bonusMultiplier = bonusMultiplier_;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens excess on the contract after crowdsale.\r\n     */\r\n    function postCrowdsaleWithdraw(uint256 _tokenAmount) public onlyOwner {\r\n        token.transfer(wallet, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Add tokens for specified beneficiary (referral system tokens, for example).\r\n     * @param _beneficiary Token purchaser\r\n     * @param _tokenAmount Amount of tokens added\r\n     */\r\n    function addTokens(address _beneficiary, uint256 _tokenAmount) public onlyOwner {\r\n        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\r\n        tokensIssued = tokensIssued.add(_tokenAmount);\r\n        emit TokenAdded(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw tokens for receiver_ after crowdsale ends.\r\n     */\r\n    function _withdrawTokensFor(address receiver_) internal {\r\n        require(hasClosed());\r\n        uint256 amount = balances[receiver_];\r\n        require(amount > 0);\r\n        balances[receiver_] = 0;\r\n        emit TokenDelivered(receiver_, amount);\r\n        _deliverTokens(receiver_, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"withdrawTokensFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"closed_\",\"type\":\"bool\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"postCrowdsaleWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"}],\"name\":\"setBonusMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_bonusMultiplier\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"UbexCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000f8eed1ae306a07d8899de8dabc3783974a6808300000000000000000000000006704b673c70de9bf74c8fba4b4bd748f0e2190e100000000000000000000000000000000000000000000000000000000000004b0","Library":"","SwarmSource":"bzzr://baa4a37d3da925cedb264518049ba932aa27e3e212c088d5d74050730d847f75"}]}