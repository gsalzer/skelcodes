{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/* ==================================================================== */\r\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\r\n/* \r\n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \r\n/*  \r\n/* authors rainy@livestar.com/fanny.zheng@livestar.com\r\n/*                 \r\n/* ==================================================================== */\r\n\r\ninterface CardsInterface {\r\n  function getJadeProduction(address player) external constant returns (uint256);\r\n  function getOwnedCount(address player, uint256 cardId) external view returns (uint256);\r\n  function getUintCoinProduction(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitCoinProductionMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitCoinProductionIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitAttackIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitAttackMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitDefenseIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitDefenseMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitJadeStealingIncreases(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitJadeStealingMultiplier(address _address, uint256 cardId) external view returns (uint256);\r\n  function getUnitsProduction(address player, uint256 cardId, uint256 amount) external constant returns (uint256);\r\n}\r\n\r\ninterface GameConfigInterface {\r\n  function productionCardIdRange() external constant returns (uint256, uint256);\r\n  function battleCardIdRange() external constant returns (uint256, uint256);\r\n  function unitCoinProduction(uint256 cardId) external constant returns (uint256);\r\n  function unitAttack(uint256 cardId) external constant returns (uint256);\r\n  function unitDefense(uint256 cardId) external constant returns (uint256); \r\n  function unitStealingCapacity(uint256 cardId) external constant returns (uint256);\r\n}\r\n\r\ncontract CardsRead {\r\n  CardsInterface public cards;\r\n  GameConfigInterface public schema;\r\n  address owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function CardsRead() public {\r\n    owner = msg.sender;\r\n  }\r\n    //setting configuration\r\n  function setConfigAddress(address _address) external onlyOwner {\r\n    schema = GameConfigInterface(_address);\r\n  }\r\n\r\n     //setting configuration\r\n  function setCardsAddress(address _address) external onlyOwner {\r\n    cards = CardsInterface(_address);\r\n  }\r\n  function getNormalCard(address _owner) private view returns (uint256) {\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.productionCardIdRange(); \r\n    uint256 icount;\r\n    while (startId <= endId) {\r\n      if (cards.getOwnedCount(_owner,startId)>=1) {\r\n        icount++;\r\n      }\r\n      startId++;\r\n    }\r\n    return icount;\r\n  }\r\n\r\n  function getBattleCard(address _owner) private view returns (uint256) {\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.battleCardIdRange(); \r\n    uint256 icount;\r\n    while (startId <= endId) {\r\n      if (cards.getOwnedCount(_owner,startId)>=1) {\r\n        icount++;\r\n      }\r\n      startId++;\r\n    }\r\n    return icount;\r\n  }\r\n  // get normal cardlist;\r\n  function getNormalCardList(address _owner) external view returns(uint256[],uint256[]){\r\n    uint256 len = getNormalCard(_owner);\r\n    uint256[] memory itemId = new uint256[](len);\r\n    uint256[] memory itemNumber = new uint256[](len);\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.productionCardIdRange(); \r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      if (cards.getOwnedCount(_owner,startId)>=1) {\r\n        itemId[i] = startId;\r\n        itemNumber[i] = cards.getOwnedCount(_owner,startId);\r\n        i++;\r\n      }\r\n      startId++;\r\n      }   \r\n    return (itemId, itemNumber);\r\n  }\r\n\r\n  // get normal cardlist;\r\n  function getBattleCardList(address _owner) external view returns(uint256[],uint256[]){\r\n    uint256 len = getBattleCard(_owner);\r\n    uint256[] memory itemId = new uint256[](len);\r\n    uint256[] memory itemNumber = new uint256[](len);\r\n\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId,endId) = schema.battleCardIdRange(); \r\n\r\n    uint256 i;\r\n    while (startId <= endId) {\r\n      if (cards.getOwnedCount(_owner,startId)>=1) {\r\n        itemId[i] = startId;\r\n        itemNumber[i] = cards.getOwnedCount(_owner,startId);\r\n        i++;\r\n      }\r\n      startId++;\r\n      }   \r\n    return (itemId, itemNumber);\r\n  }\r\n\r\n  //get up value\r\n  function getUpgradeValue(address player, uint256 upgradeClass, uint256 unitId, uint256 upgradeValue) external view returns (uint256) {\r\n    uint256 icount = cards.getOwnedCount(player,unitId);\r\n    uint256 unitProduction = cards.getUintCoinProduction(player,unitId);\r\n    if (upgradeClass == 0) {\r\n      if (icount!=0) {\r\n        return (icount * upgradeValue * 10000 * (10 + cards.getUnitCoinProductionMultiplier(player, unitId))/unitProduction);\r\n      } else {\r\n        return (upgradeValue * 10000) / schema.unitCoinProduction(unitId);\r\n      }\r\n     } else if (upgradeClass == 1) {\r\n      if (icount!=0) {\r\n        return (icount * upgradeValue * 10000 * (schema.unitCoinProduction(unitId) + cards.getUnitCoinProductionIncreases(player,unitId))/unitProduction);\r\n      }else{\r\n        return (upgradeValue * 10000) / schema.unitCoinProduction(unitId);  \r\n      }\r\n    } else if (upgradeClass == 2) {\r\n      return (upgradeValue  * 10000)/(schema.unitAttack(unitId) + cards.getUnitAttackIncreases(player,unitId));\r\n    } else if (upgradeClass == 3) {\r\n      return (upgradeValue  * 10000)/(10 + cards.getUnitAttackMultiplier(player,unitId));\r\n    } else if (upgradeClass == 4) {\r\n      return (upgradeValue  * 10000)/(schema.unitDefense(unitId) + cards.getUnitDefenseIncreases(player,unitId));\r\n    } else if (upgradeClass == 5) {\r\n      return (upgradeValue  * 10000)/(10 + cards.getUnitDefenseMultiplier(player,unitId));\r\n    } else if (upgradeClass == 6) {\r\n      return (upgradeValue  * 10000)/(schema.unitStealingCapacity(unitId) + cards.getUnitJadeStealingIncreases(player,unitId));\r\n    } else if (upgradeClass == 7) {\r\n      return (upgradeValue  * 10000)/(10 + cards.getUnitJadeStealingMultiplier(player,unitId));\r\n      \r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBattleCardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCardsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"upgradeClass\",\"type\":\"uint256\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"upgradeValue\",\"type\":\"uint256\"}],\"name\":\"getUpgradeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNormalCardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"schema\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CardsRead","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b25d4723c007fbd7cf8732e44f54c19f61d8e0caa8023f4363ccb81eb975cfbd"}]}