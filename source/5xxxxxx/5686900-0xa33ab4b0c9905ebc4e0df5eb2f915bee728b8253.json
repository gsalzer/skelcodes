{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract CelebrityToken is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new person comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CryptoCelebrities\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"CelebrityToken\"; // solhint-disable-line\r\n\r\n  uint256 private startingPrice = 0.001 ether;\r\n  uint256 private constant PROMO_CREATION_LIMIT = 5000;\r\n  uint256 private firstStepLimit =  0.053613 ether;\r\n  uint256 private secondStepLimit = 0.564957 ether;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from person IDs to the address that owns them. All persons have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public personIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from PersonIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Person can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public personIndexToApproved;\r\n\r\n  // @dev A mapping from PersonIDs to the price of the token.\r\n  mapping (uint256 => uint256) private personIndexToPrice;\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  uint256 public promoCreatedCount;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Person {\r\n    string name;\r\n  }\r\n\r\n  Person[] private persons;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function CelebrityToken() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    personIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new promo Person with the given name, with given _price and assignes it to an address.\r\n  function createPromoPerson(address _owner, string _name, uint256 _price) public onlyCOO {\r\n    require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n    address personOwner = _owner;\r\n    if (personOwner == address(0)) {\r\n      personOwner = cooAddress;\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      _price = startingPrice;\r\n    }\r\n\r\n    promoCreatedCount++;\r\n    _createPerson(_name, personOwner, _price);\r\n  }\r\n\r\n  /// @dev Creates a new Person with the given name.\r\n  function createContractPerson(string _name) public onlyCOO {\r\n    _createPerson(_name, address(this), startingPrice);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific person.\r\n  /// @param _tokenId The tokenId of the person of interest.\r\n  function getPerson(uint256 _tokenId) public view returns (\r\n    string personName,\r\n    uint256 sellingPrice,\r\n    address owner\r\n  ) {\r\n    Person storage person = persons[_tokenId];\r\n    personName = person.name;\r\n    sellingPrice = personIndexToPrice[_tokenId];\r\n    owner = personIndexToOwner[_tokenId];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = personIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = personIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = personIndexToPrice[_tokenId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 94), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    // Update prices\r\n    if (sellingPrice < firstStepLimit) {\r\n      // first stage\r\n      personIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 94);\r\n    } else if (sellingPrice < secondStepLimit) {\r\n      // second stage\r\n      personIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 94);\r\n    } else {\r\n      // third stage\r\n      personIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 94);\r\n    }\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.06)\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, personIndexToPrice[_tokenId], oldOwner, newOwner, persons[_tokenId].name);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return personIndexToPrice[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = personIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Persons array looking for persons belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalPersons = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 personId;\r\n      for (personId = 0; personId <= totalPersons; personId++) {\r\n        if (personIndexToOwner[personId] == _owner) {\r\n          result[resultIndex] = personId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return persons.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return personIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating Person\r\n  function _createPerson(string _name, address _owner, uint256 _price) private {\r\n    Person memory _person = Person({\r\n      name: _name\r\n    });\r\n    uint256 newPersonId = persons.push(_person) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newPersonId == uint256(uint32(newPersonId)));\r\n\r\n    Birth(newPersonId, _name, _owner);\r\n\r\n    personIndexToPrice[newPersonId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newPersonId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == personIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Person to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of persons is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    personIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new persons _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete personIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @author Artyom Harutyunyan <artyomharutyunyans@gmail.com>\r\n\r\ncontract CelebrityBreederToken is ERC721 {\r\n  \r\n   /// @dev The Birth event is fired whenever a new person comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n  event Trained(address caller, uint256 tokenId, bool generation);\r\n  event Beaten(address caller, uint256 tokenId, bool generation);\r\n  event SiringPriceEvent(address caller, uint256 tokenId, bool generation, uint price);\r\n  event SellingPriceEvent(address caller, uint256 tokenId, bool generation, uint price);\r\n  event GenesInitialisedEvent(address caller, uint256 tokenId, bool generation, uint genes);\r\n  \r\n  CelebrityToken private CelGen0=CelebrityToken(0xbb5Ed1EdeB5149AF3ab43ea9c7a6963b3C1374F7); //@Artyom Pointing to original CC\r\n  CelebrityBreederToken private CelBetta=CelebrityBreederToken(0xdab64dc4a02225f76fccce35ab9ba53b3735c684); //@Artyom Pointing to betta \r\n \r\n  string public constant NAME = \"CryptoCelebrityBreederCards\"; \r\n  string public constant SYMBOL = \"CeleBreedCard\"; \r\n\r\n  uint256 public breedingFee = 0.01 ether;\r\n  uint256 public initialTraining = 0.00001 ether;\r\n  uint256 public initialBeating = 0.00002 ether;\r\n  uint256 private constant CreationLimitGen0 = 5000;\r\n  uint256 private constant CreationLimitGen1 = 2500000;\r\n  uint256 public constant MaxValue =  100000000 ether;\r\n  \r\n  mapping (uint256 => address) public personIndexToOwnerGen1;\r\n  mapping (address => uint256) private ownershipTokenCountGen1;\r\n  mapping (uint256 => address) public personIndexToApprovedGen1;\r\n  mapping (uint256 => uint256) private personIndexToPriceGen1;\r\n  mapping (uint256 => address) public ExternalAllowdContractGen0;\r\n  mapping (uint256 => address) public ExternalAllowdContractGen1; \r\n  mapping (uint256 => uint256) public personIndexToSiringPrice0;\r\n  mapping (uint256 => uint256) public personIndexToSiringPrice1;\r\n  address public CeoAddress; \r\n  address public DevAddress;\r\n  \r\n   struct Person {\r\n    string name;\r\n    string surname; \r\n    uint64 genes; \r\n    uint64 birthTime;\r\n    uint32 fatherId;\r\n    uint32 motherId;\r\n    uint32 readyToBreedWithId;\r\n    uint32 trainedcount;\r\n    uint32 beatencount;\r\n    bool readyToBreedWithGen;\r\n    bool gender;\r\n    bool fatherGeneration;\r\n    bool motherGeneration;\r\n  }\r\n  \r\n  Person[] private PersonsGen0;\r\n  Person[] private PersonsGen1;\r\n  \r\n    modifier onlyCEO() {\r\n    require(msg.sender == CeoAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyDEV() {\r\n    require(msg.sender == DevAddress);\r\n    _;\r\n  }\r\n  \r\n   modifier onlyPlayers() {\r\n    require(ownershipTokenCountGen1[msg.sender]>0 || CelGen0.balanceOf(msg.sender)>0);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n /* modifier onlyTopLevel() {\r\n    require(\r\n      msg.sender == CeoAddress ||\r\n      msg.sender == DevAddress\r\n    );\r\n    _;\r\n  }\r\n  */\r\n  function masscreate(uint256 fromindex, uint256 toindex) external onlyCEO{ \r\n      string memory name; string memory surname; uint64 genes;  bool gender;\r\n      for(uint256 i=fromindex;i<=toindex;i++)\r\n      {\r\n          ( name, surname, genes, , ,  , , ,  gender)=CelBetta.getPerson(i,false);\r\n         _birthPerson(name, surname ,genes, gender, false);\r\n      }\r\n  }\r\n  function CelebrityBreederToken() public { \r\n      CeoAddress= msg.sender;\r\n      DevAddress= msg.sender;\r\n  }\r\n    function setBreedingFee(uint256 newfee) external onlyCEO{\r\n      breedingFee=newfee;\r\n  }\r\n  function allowexternalContract(address _to, uint256 _tokenId,bool _tokengeneration) public { \r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId, _tokengeneration));\r\n    \r\n    if(_tokengeneration) {\r\n        if(_addressNotNull(_to)) {\r\n            ExternalAllowdContractGen1[_tokenId]=_to;\r\n        }\r\n        else {\r\n             delete ExternalAllowdContractGen1[_tokenId];\r\n        }\r\n    }\r\n    else {\r\n       if(_addressNotNull(_to)) {\r\n            ExternalAllowdContractGen0[_tokenId]=_to;\r\n        }\r\n        else {\r\n             delete ExternalAllowdContractGen0[_tokenId];\r\n        }\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  //@Artyom Required for ERC-721 compliance.\r\n  function approve(address _to, uint256 _tokenId) public { //@Artyom only gen1\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId, true));\r\n\r\n    personIndexToApprovedGen1[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n  // @Artyom Required for ERC-721 compliance.\r\n  //@Artyom only gen1\r\n   function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCountGen1[_owner];\r\n  }\r\n  \r\n    function getPerson(uint256 _tokenId,bool generation) public view returns ( string name, string surname, uint64 genes,uint64 birthTime, uint32 readyToBreedWithId, uint32 trainedcount,uint32 beatencount,bool readyToBreedWithGen, bool gender) {\r\n    Person person;\r\n    if(generation==false) {\r\n        person = PersonsGen0[_tokenId];\r\n    }\r\n    else {\r\n        person = PersonsGen1[_tokenId];\r\n    }\r\n         \r\n    name = person.name;\r\n    surname=person.surname;\r\n    genes=person.genes;\r\n    birthTime=person.birthTime;\r\n    readyToBreedWithId=person.readyToBreedWithId;\r\n    trainedcount=person.trainedcount;\r\n    beatencount=person.beatencount;\r\n    readyToBreedWithGen=person.readyToBreedWithGen;\r\n    gender=person.gender;\r\n\r\n  }\r\n   function getPersonParents(uint256 _tokenId, bool generation) public view returns ( uint32 fatherId, uint32 motherId, bool fatherGeneration, bool motherGeneration) {\r\n    Person person;\r\n    if(generation==false) {\r\n        person = PersonsGen0[_tokenId];\r\n    }\r\n    else {\r\n        person = PersonsGen1[_tokenId];\r\n    }\r\n         \r\n    fatherId=person.fatherId;\r\n    motherId=person.motherId;\r\n    fatherGeneration=person.fatherGeneration;\r\n    motherGeneration=person.motherGeneration;\r\n  }\r\n  // @Artyom Required for ERC-721 compliance.\r\n   function implementsERC721() public pure returns (bool) { \r\n    return true;\r\n  }\r\n\r\n  // @Artyom Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n// @Artyom Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n  {\r\n    owner = personIndexToOwnerGen1[_tokenId];\r\n    require(_addressNotNull(owner));\r\n  }\r\n  \r\n  //@Artyom only gen1\r\n   function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = personIndexToOwnerGen1[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = personIndexToPriceGen1[_tokenId];\r\n    personIndexToPriceGen1[_tokenId]=MaxValue;\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n   // uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 94), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n    //  oldOwner.transfer(payment); //(1-0.06) //old code for holding some percents\r\n    oldOwner.transfer(sellingPrice);\r\n    }\r\n    blankbreedingdata(_tokenId,true);\r\n\r\n    TokenSold(_tokenId, sellingPrice, personIndexToPriceGen1[_tokenId], oldOwner, newOwner, PersonsGen1[_tokenId].name);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n  \r\n   //@Artyom only gen1\r\n   function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return personIndexToPriceGen1[_tokenId];\r\n  }\r\n\r\n \r\n  function setCEO(address _newCEO) external onlyCEO {\r\n    require(_addressNotNull(_newCEO));\r\n\r\n    CeoAddress = _newCEO;\r\n  }\r\n\r\n //@Artyom only gen1\r\n function setprice(uint256 _tokenId, uint256 _price) public {\r\n    require(_owns(msg.sender, _tokenId, true));\r\n    if(_price<=0 || _price>=MaxValue) {\r\n        personIndexToPriceGen1[_tokenId]=MaxValue;\r\n    }\r\n    else {\r\n        personIndexToPriceGen1[_tokenId]=_price;\r\n    }\r\n    SellingPriceEvent(msg.sender,_tokenId,true,_price);\r\n }\r\n \r\n  function setDEV(address _newDEV) external onlyDEV {\r\n    require(_addressNotNull(_newDEV));\r\n\r\n    DevAddress = _newDEV;\r\n  }\r\n  \r\n    // @Artyom Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n\r\n  // @Artyom Required for ERC-721 compliance.\r\n   //@Artyom only gen1\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = personIndexToOwnerGen1[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approvedGen1(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n  \r\n  //@Artyom only gen1\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } \r\n    else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalPersons = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 personId;\r\n      for (personId = 0; personId <= totalPersons; personId++) {\r\n        if (personIndexToOwnerGen1[personId] == _owner) {\r\n          result[resultIndex] = personId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n  \r\n   // @Artyom Required for ERC-721 compliance.\r\n   //@Artyom only gen1\r\n   function totalSupply() public view returns (uint256 total) {\r\n    return PersonsGen1.length;\r\n  }\r\n\r\n   // @Artyom Required for ERC-721 compliance.\r\n   //@Artyom only gen1\r\n  function transfer( address _to, uint256 _tokenId) public {\r\n    require(_owns(msg.sender, _tokenId, true));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n  \r\n   // @Artyom Required for ERC-721 compliance.\r\n   //@Artyom only gen1\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(_owns(_from, _tokenId, true));\r\n    require(_approvedGen1(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n   function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approvedGen1(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return personIndexToApprovedGen1[_tokenId] == _to;\r\n  }\r\n  //@Artyom only gen0\r\n   function createPersonGen0(string _name, string _surname,uint64 _genes, bool _gender) external onlyCEO returns(uint256) {\r\n    return _birthPerson(_name, _surname ,_genes, _gender, false);\r\n  }\r\n  function SetGene(uint256 tokenId,bool generation, uint64 newgene) public {\r\n     require(_owns(msg.sender, tokenId, generation) || msg.sender==CeoAddress);\r\n     require(newgene<=9999999999 && newgene>=10);\r\n     Person person; //@Artyom reference\r\n    if (generation==false) { \r\n        person = PersonsGen0[tokenId];\r\n    }\r\n    else {\r\n        person = PersonsGen1[tokenId];\r\n    }\r\n    require(person.genes<=90);\r\n     \r\n    uint64 _gene=newgene;\r\n    uint64 _pointCount=0;\r\n   \r\n   \r\n      for(uint i=0;i<10;i++) {\r\n           _pointCount+=_gene%10;\r\n           _gene=_gene/10;\r\n      }\r\n    //  log(_pointCount,person.genes);\r\n    require(_pointCount==person.genes);\r\n           \r\n    person.genes=newgene;\r\n    GenesInitialisedEvent(msg.sender,tokenId,generation,newgene);\r\n}\r\n \r\n   function breed(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool  _withpersongeneration, string _boyname, string _girlname) public payable { //@Artyom mother\r\n       require(_owns(msg.sender, _mypersonid, _mypersongeneration));\r\n       require(CreationLimitGen1>totalSupply()+1);\r\n    \r\n    //Mother\r\n    Person person; //@Artyom reference\r\n    if(_mypersongeneration==false) { \r\n        person = PersonsGen0[_mypersonid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[_mypersonid];\r\n        require(person.gender==false); //@Artyom checking gender for gen1 to be mother in this case\r\n    }\r\n\r\n    require(person.genes>90);//@Artyom if its unlocked\r\n    \r\n    uint64 genes1=person.genes;\r\n    //Father\r\n        if(_withpersongeneration==false) { \r\n        person = PersonsGen0[_withpersonid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[_withpersonid];\r\n       \r\n    }\r\n     \r\n   \r\n     require(readyTobreed(_mypersonid, _mypersongeneration, _withpersonid,  _withpersongeneration));\r\n     require(breedingFee<=msg.value);\r\n   \r\n    \r\n    delete person.readyToBreedWithId;\r\n    person.readyToBreedWithGen=false;\r\n    \r\n   // uint64 genes2=person.genes;\r\n    \r\n       uint64 _generatedGen;\r\n       bool _gender; \r\n       (_generatedGen,_gender)=_generateGene(genes1,person.genes,_mypersonid,_withpersonid); \r\n       \r\n     if(_gender) {\r\n       _girlname=_boyname; //@Artyom if gender is true/1 then it should take the boyname\r\n     }\r\n       uint newid=_birthPerson(_girlname, person.surname, _generatedGen, _gender, true);\r\n            PersonsGen1[newid].fatherGeneration=_withpersongeneration; // @ Artyom, did here because stack too deep for function\r\n            PersonsGen1[newid].motherGeneration=_mypersongeneration;\r\n            PersonsGen1[newid].fatherId=uint32(_withpersonid); \r\n            PersonsGen1[newid].motherId=uint32(_mypersonid);\r\n        \r\n        \r\n       _payout();\r\n  }\r\n  \r\n    function breedOnAuction(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool  _withpersongeneration, string _boyname, string _girlname) public payable { //@Artyom mother\r\n       require(_owns(msg.sender, _mypersonid, _mypersongeneration));\r\n       require(CreationLimitGen1>totalSupply()+1);\r\n       require(!(_mypersonid==_withpersonid && _mypersongeneration==_withpersongeneration));// @Artyom not to breed with self\r\n       require(!((_mypersonid==0 && _mypersongeneration==false) || (_withpersonid==0 && _withpersongeneration==false))); //Not to touch Satoshi\r\n    //Mother\r\n    Person person; //@Artyom reference\r\n    if(_mypersongeneration==false) { \r\n        person = PersonsGen0[_mypersonid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[_mypersonid];\r\n        require(person.gender==false); //@Artyom checking gender for gen1 to be mother in this case\r\n    }\r\n    \r\n    require(person.genes>90);//@Artyom if its unlocked\r\n    \r\n    address owneroffather;\r\n    uint256 _siringprice;\r\n    uint64 genes1=person.genes;\r\n    //Father\r\n        if(_withpersongeneration==false) { \r\n        person = PersonsGen0[_withpersonid];\r\n        _siringprice=personIndexToSiringPrice0[_withpersonid];\r\n        owneroffather=CelGen0.ownerOf(_withpersonid);\r\n    }\r\n    else {\r\n        person = PersonsGen1[_withpersonid];\r\n        _siringprice=personIndexToSiringPrice1[_withpersonid];\r\n        owneroffather= personIndexToOwnerGen1[_withpersonid];\r\n    }\r\n     \r\n   require(_siringprice>0 && _siringprice<MaxValue);\r\n   require((breedingFee+_siringprice)<=msg.value);\r\n    \r\n    \r\n//    uint64 genes2=;\r\n    \r\n       uint64 _generatedGen;\r\n       bool _gender; \r\n       (_generatedGen,_gender)=_generateGene(genes1,person.genes,_mypersonid,_withpersonid); \r\n       \r\n     if(_gender) {\r\n       _girlname=_boyname; //@Artyom if gender is true/1 then it should take the boyname\r\n     }\r\n       uint newid=_birthPerson(_girlname, person.surname, _generatedGen, _gender, true);\r\n            PersonsGen1[newid].fatherGeneration=_withpersongeneration; // @ Artyom, did here because stack too deep for function\r\n            PersonsGen1[newid].motherGeneration=_mypersongeneration;\r\n            PersonsGen1[newid].fatherId=uint32(_withpersonid); \r\n            PersonsGen1[newid].motherId=uint32(_mypersonid);\r\n        \r\n        \r\n        owneroffather.transfer(_siringprice);\r\n       _payout();\r\n  }\r\n \r\n  \r\n  \r\n  function prepareToBreed(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool _withpersongeneration, uint256 _siringprice) external { //@Artyom father\r\n      require(_owns(msg.sender, _mypersonid, _mypersongeneration)); \r\n      \r\n       Person person; //@Artyom reference\r\n    if(_mypersongeneration==false) {\r\n        person = PersonsGen0[_mypersonid];\r\n        personIndexToSiringPrice0[_mypersonid]=_siringprice;\r\n    }\r\n    else {\r\n        person = PersonsGen1[_mypersonid];\r\n        \r\n        require(person.gender==true);//@Artyom for gen1 checking genders to be male\r\n        personIndexToSiringPrice1[_mypersonid]=_siringprice;\r\n    }\r\n      require(person.genes>90);//@Artyom if its unlocked\r\n\r\n       person.readyToBreedWithId=uint32(_withpersonid); \r\n       person.readyToBreedWithGen=_withpersongeneration;\r\n       SiringPriceEvent(msg.sender,_mypersonid,_mypersongeneration,_siringprice);\r\n      \r\n  }\r\n  \r\n  function readyTobreed(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool _withpersongeneration) public view returns(bool) {\r\n\r\nif (_mypersonid==_withpersonid && _mypersongeneration==_withpersongeneration) //Not to fuck Themselves \r\nreturn false;\r\n\r\nif((_mypersonid==0 && _mypersongeneration==false) || (_withpersonid==0 && _withpersongeneration==false)) //Not to touch Satoshi\r\nreturn false;\r\n\r\n    Person withperson; //@Artyom reference\r\n    if(_withpersongeneration==false) {\r\n        withperson = PersonsGen0[_withpersonid];\r\n    }\r\n    else {\r\n        withperson = PersonsGen1[_withpersonid];\r\n    }\r\n   \r\n   \r\n   if(withperson.readyToBreedWithGen==_mypersongeneration) {\r\n       if(withperson.readyToBreedWithId==_mypersonid) {\r\n       return true;\r\n   }\r\n   }\r\n  \r\n    \r\n    return false;\r\n    \r\n  }\r\n  function _birthPerson(string _name, string _surname, uint64 _genes, bool _gender, bool _generation) private returns(uint256) { // about this steps   \r\n    Person memory _person = Person({\r\n        name: _name,\r\n        surname: _surname,\r\n        genes: _genes,\r\n        birthTime: uint64(now),\r\n        fatherId: 0,\r\n        motherId: 0,\r\n        readyToBreedWithId: 0,\r\n        trainedcount: 0,\r\n        beatencount: 0,\r\n        readyToBreedWithGen: false,\r\n        gender: _gender,\r\n        fatherGeneration: false,\r\n        motherGeneration: false\r\n\r\n        \r\n    });\r\n    \r\n    uint256 newPersonId;\r\n    if(_generation==false) {\r\n         newPersonId = PersonsGen0.push(_person) - 1;\r\n    }\r\n    else {\r\n         newPersonId = PersonsGen1.push(_person) - 1;\r\n         personIndexToPriceGen1[newPersonId] = MaxValue; //@Artyom indicating not for sale\r\n          // per ERC721 draft-This will assign ownership, and also emit the Transfer event as\r\n        _transfer(address(0), msg.sender, newPersonId);\r\n        \r\n\r\n    }\r\n\r\n    Birth(newPersonId, _name, msg.sender);\r\n    return newPersonId;\r\n  }\r\n  function _generateGene(uint64 _genes1,uint64 _genes2,uint256 _mypersonid,uint256 _withpersonid) private returns(uint64,bool) {\r\n       uint64 _gene;\r\n       uint64 _gene1;\r\n       uint64 _gene2;\r\n       uint64 _rand;\r\n       uint256 _finalGene=0;\r\n       bool gender=false;\r\n\r\n       for(uint i=0;i<10;i++) {\r\n           _gene1 =_genes1%10;\r\n           _gene2=_genes2%10;\r\n           _genes1=_genes1/10;\r\n           _genes2=_genes2/10;\r\n           _rand=uint64(keccak256(block.blockhash(block.number), i, now,_mypersonid,_withpersonid))%10000;\r\n           \r\n          _gene=(_gene1+_gene2)/2;\r\n           \r\n           if(_rand<26) {\r\n               _gene-=3;\r\n           }\r\n            else if(_rand<455) {\r\n                _gene-=2;\r\n           }\r\n            else if(_rand<3173) {\r\n                _gene-=1;\r\n           }\r\n            else if(_rand<6827) {\r\n                \r\n           }\r\n            else if(_rand<9545) {\r\n                _gene+=1;\r\n           }\r\n            else if(_rand<9974) {\r\n                _gene+=2;\r\n           }\r\n            else if(_rand<10000) {\r\n                _gene+=3;\r\n           }\r\n           \r\n           if(_gene>12) //@Artyom to avoid negative overflow\r\n           _gene=0;\r\n           if(_gene>9)\r\n           _gene=9;\r\n           \r\n           _finalGene+=(uint(10)**i)*_gene;\r\n       }\r\n      \r\n      if(uint64(keccak256(block.blockhash(block.number), 11, now,_mypersonid,_withpersonid))%2>0)\r\n      gender=true;\r\n      \r\n      return(uint64(_finalGene),gender);  \r\n  } \r\n  function _owns(address claimant, uint256 _tokenId,bool _tokengeneration) private view returns (bool) {\r\n   if(_tokengeneration) {\r\n        return ((claimant == personIndexToOwnerGen1[_tokenId]) || (claimant==ExternalAllowdContractGen1[_tokenId]));\r\n   }\r\n   else {\r\n       return ((claimant == CelGen0.personIndexToOwner(_tokenId)) || (claimant==ExternalAllowdContractGen0[_tokenId]));\r\n   }\r\n  }\r\n      \r\n  function _payout() private {\r\n    DevAddress.transfer((this.balance/10)*3);\r\n    CeoAddress.transfer((this.balance/10)*7); \r\n  }\r\n  \r\n   // @Artyom Required for ERC-721 compliance.\r\n   //@Artyom only gen1\r\n   function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of persons is capped to 2^32 we can't overflow this\r\n    ownershipTokenCountGen1[_to]++;\r\n    //transfer ownership\r\n    personIndexToOwnerGen1[_tokenId] = _to;\r\n\r\n    // When creating new persons _from is 0x0, but we can't account that address.\r\n    if (_addressNotNull(_from)) {\r\n      ownershipTokenCountGen1[_from]--;\r\n      // clear any previously approved ownership exchange\r\n     blankbreedingdata(_tokenId,true);\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n  function blankbreedingdata(uint256 _personid, bool _persongeneration) private{\r\n      Person person;\r\n      if(_persongeneration==false) { \r\n        person = PersonsGen0[_personid];\r\n        delete ExternalAllowdContractGen0[_personid];\r\n        delete personIndexToSiringPrice0[_personid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[_personid];\r\n        delete ExternalAllowdContractGen1[_personid];\r\n        delete personIndexToSiringPrice1[_personid];\r\n    \tdelete personIndexToApprovedGen1[_personid];\r\n    }\r\n     delete person.readyToBreedWithId;\r\n     delete person.readyToBreedWithGen; \r\n  }\r\n    function train(uint256 personid, bool persongeneration, uint8 gene) external payable onlyPlayers {\r\n        \r\n        require(gene>=0 && gene<10);\r\n        uint256 trainingPrice=checkTrainingPrice(personid,persongeneration);\r\n        require(msg.value >= trainingPrice);\r\n         Person person; \r\n    if(persongeneration==false) {\r\n        person = PersonsGen0[personid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[personid];\r\n    }\r\n    \r\n     require(person.genes>90);//@Artyom if its unlocked\r\n     uint gensolo=person.genes/(uint(10)**gene);\r\n    gensolo=gensolo%10;\r\n    require(gensolo<9); //@Artyom not to train after 9\r\n    \r\n          person.genes+=uint64(10)**gene;\r\n          person.trainedcount++;\r\n\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, trainingPrice);\r\n    msg.sender.transfer(purchaseExcess);\r\n    _payout();\r\n    Trained(msg.sender, personid, persongeneration);\r\n    }\r\n    \r\n     function beat(uint256 personid, bool persongeneration, uint8 gene) external payable onlyPlayers {\r\n        require(gene>=0 && gene<10);\r\n        uint256 beatingPrice=checkBeatingPrice(personid,persongeneration);\r\n        require(msg.value >= beatingPrice);\r\n         Person person; \r\n    if(persongeneration==false) {\r\n        person = PersonsGen0[personid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[personid];\r\n    }\r\n    \r\n    require(person.genes>90);//@Artyom if its unlocked\r\n    uint gensolo=person.genes/(uint(10)**gene);\r\n    gensolo=gensolo%10;\r\n    require(gensolo>0);\r\n          person.genes-=uint64(10)**gene;\r\n          person.beatencount++;\r\n\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, beatingPrice);\r\n    msg.sender.transfer(purchaseExcess);\r\n    _payout();\r\n    Beaten(msg.sender, personid, persongeneration);    \r\n    }\r\n    \r\n    \r\n    function checkTrainingPrice(uint256 personid, bool persongeneration) view returns (uint256) {\r\n         Person person;\r\n    if(persongeneration==false) {\r\n        person = PersonsGen0[personid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[personid];\r\n    }\r\n    \r\n    uint256 _trainingprice= (uint(2)**person.trainedcount) * initialTraining;\r\n    if (_trainingprice > 5 ether)\r\n    _trainingprice=5 ether;\r\n    \r\n    return _trainingprice;\r\n    }\r\n    function checkBeatingPrice(uint256 personid, bool persongeneration) view returns (uint256) {\r\n         Person person;\r\n    if(persongeneration==false) {\r\n        person = PersonsGen0[personid];\r\n    }\r\n    else {\r\n        person = PersonsGen1[personid];\r\n    }\r\n    uint256 _beatingprice=(uint(2)**person.beatencount) * initialBeating;\r\n     if (_beatingprice > 7 ether)\r\n    _beatingprice=7 ether;\r\n    return _beatingprice;\r\n    } \r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"personid\",\"type\":\"uint256\"},{\"name\":\"persongeneration\",\"type\":\"bool\"},{\"name\":\"gene\",\"type\":\"uint8\"}],\"name\":\"beat\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CeoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ExternalAllowdContractGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mypersonid\",\"type\":\"uint256\"},{\"name\":\"_mypersongeneration\",\"type\":\"bool\"},{\"name\":\"_withpersonid\",\"type\":\"uint256\"},{\"name\":\"_withpersongeneration\",\"type\":\"bool\"}],\"name\":\"readyTobreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToSiringPrice0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"bool\"}],\"name\":\"getPersonParents\",\"outputs\":[{\"name\":\"fatherId\",\"type\":\"uint32\"},{\"name\":\"motherId\",\"type\":\"uint32\"},{\"name\":\"fatherGeneration\",\"type\":\"bool\"},{\"name\":\"motherGeneration\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfee\",\"type\":\"uint256\"}],\"name\":\"setBreedingFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokengeneration\",\"type\":\"bool\"}],\"name\":\"allowexternalContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToOwnerGen1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_surname\",\"type\":\"string\"},{\"name\":\"_genes\",\"type\":\"uint64\"},{\"name\":\"_gender\",\"type\":\"bool\"}],\"name\":\"createPersonGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDEV\",\"type\":\"address\"}],\"name\":\"setDEV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setprice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"bool\"},{\"name\":\"newgene\",\"type\":\"uint64\"}],\"name\":\"SetGene\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"personid\",\"type\":\"uint256\"},{\"name\":\"persongeneration\",\"type\":\"bool\"}],\"name\":\"checkBeatingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ExternalAllowdContractGen1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTraining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mypersonid\",\"type\":\"uint256\"},{\"name\":\"_mypersongeneration\",\"type\":\"bool\"},{\"name\":\"_withpersonid\",\"type\":\"uint256\"},{\"name\":\"_withpersongeneration\",\"type\":\"bool\"},{\"name\":\"_boyname\",\"type\":\"string\"},{\"name\":\"_girlname\",\"type\":\"string\"}],\"name\":\"breedOnAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breedingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToSiringPrice1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromindex\",\"type\":\"uint256\"},{\"name\":\"toindex\",\"type\":\"uint256\"}],\"name\":\"masscreate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"bool\"}],\"name\":\"getPerson\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"genes\",\"type\":\"uint64\"},{\"name\":\"birthTime\",\"type\":\"uint64\"},{\"name\":\"readyToBreedWithId\",\"type\":\"uint32\"},{\"name\":\"trainedcount\",\"type\":\"uint32\"},{\"name\":\"beatencount\",\"type\":\"uint32\"},{\"name\":\"readyToBreedWithGen\",\"type\":\"bool\"},{\"name\":\"gender\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"personid\",\"type\":\"uint256\"},{\"name\":\"persongeneration\",\"type\":\"bool\"},{\"name\":\"gene\",\"type\":\"uint8\"}],\"name\":\"train\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mypersonid\",\"type\":\"uint256\"},{\"name\":\"_mypersongeneration\",\"type\":\"bool\"},{\"name\":\"_withpersonid\",\"type\":\"uint256\"},{\"name\":\"_withpersongeneration\",\"type\":\"bool\"},{\"name\":\"_boyname\",\"type\":\"string\"},{\"name\":\"_girlname\",\"type\":\"string\"}],\"name\":\"breed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBeating\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToApprovedGen1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"personid\",\"type\":\"uint256\"},{\"name\":\"persongeneration\",\"type\":\"bool\"}],\"name\":\"checkTrainingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mypersonid\",\"type\":\"uint256\"},{\"name\":\"_mypersongeneration\",\"type\":\"bool\"},{\"name\":\"_withpersonid\",\"type\":\"uint256\"},{\"name\":\"_withpersongeneration\",\"type\":\"bool\"},{\"name\":\"_siringprice\",\"type\":\"uint256\"}],\"name\":\"prepareToBreed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"bool\"}],\"name\":\"Trained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"bool\"}],\"name\":\"Beaten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SiringPriceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellingPriceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"GenesInitialisedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CelebrityBreederToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5933c9bac1772928ed8a489652f6b8d336b6483d85ba07c576af10d6b9921a1"}]}