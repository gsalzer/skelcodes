{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/*\r\n\r\nLIGO CrowdSale - Wave 1\r\n\r\n*/\r\n\r\n// interface to represent the LIGO token contract, so we can call functions on it\r\ninterface ligoToken {\r\n    function transfer(address receiver, uint amount) external;\r\n    function balanceOf(address holder) external returns(uint); \r\n}\r\n\r\ncontract Crowdsale {\r\n\t// Public visible variables\r\n    address public beneficiary;\r\n    uint public fundingGoal;\r\n    uint public startTime;\r\n    uint public deadline;\r\n    ligoToken public tokenReward;\r\n    uint public amountRaised;\r\n    uint public buyerCount = 0;\r\n    bool public fundingGoalReached = false;\r\n\tuint public withdrawlDeadline;\r\n    // bool public hasStarted = false; // not needed, automatically start wave 1 when deployed\r\n\t// public array of buyers\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public fundedAmount;\r\n    mapping(uint => address) public buyers;\r\n\t// private variables\r\n    bool crowdsaleClosed = false;\r\n\t// crowdsale settings\r\n\tuint constant minContribution  = 20000000000000000; // 0.02 ETH\r\n\tuint constant maxContribution = 100 ether; \r\n\tuint constant fundsOnHoldAfterDeadline = 30 days; //Escrow period\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint startUnixTime,\r\n        uint durationInMinutes,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        startTime = startUnixTime;\r\n        deadline = startTime + durationInMinutes * 1 minutes;\r\n\t\twithdrawlDeadline = deadline + fundsOnHoldAfterDeadline;\r\n        tokenReward = ligoToken(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () public payable {\r\n        require(!crowdsaleClosed);\r\n        require(!(now <= startTime));\r\n\t\trequire(!(amountRaised >= fundingGoal)); // stop accepting payments when the goal is reached.\r\n\r\n\t\t// get the total for this contributor so far\r\n        uint totalContribution = balanceOf[msg.sender];\r\n\t\t// if total > 0, this user already contributed\r\n\t\tbool exstingContributor = totalContribution > 0;\r\n\r\n        uint amount = msg.value;\r\n        bool moreThanMinAmount = amount >= minContribution; //> 0.02 Ether\r\n        bool lessThanMaxTotalContribution = amount + totalContribution <= maxContribution; // < 100 Ether total, including this amount\r\n\r\n        require(moreThanMinAmount);\r\n        require(lessThanMaxTotalContribution);\r\n\r\n        if (lessThanMaxTotalContribution && moreThanMinAmount) {\r\n            // Add to buyer's balance\r\n            balanceOf[msg.sender] += amount;\r\n            // Add to tracking array\r\n            fundedAmount[msg.sender] += amount;\r\n            emit FundTransfer(msg.sender, amount, true);\r\n\t\t\tif (!exstingContributor) {\r\n\t\t\t\t// this is a new contributor, add to the count and the buyers array\r\n\t\t\t\tbuyers[buyerCount] = msg.sender;\r\n\t\t\t\tbuyerCount += 1;\r\n\t\t\t}\r\n            amountRaised += amount;\r\n\t\t}\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n    modifier afterWithdrawalDeadline() { if (now >= withdrawlDeadline) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() public afterDeadline {\r\n\t\tif (beneficiary == msg.sender) {\r\n\t\t\tif (amountRaised >= fundingGoal){\r\n\t\t\t\tfundingGoalReached = true;\r\n\t\t\t\temit GoalReached(beneficiary, amountRaised);\r\n\t\t\t}\r\n\t\t\tcrowdsaleClosed = true;\r\n\t\t}\r\n    }\r\n\r\n    /**\r\n     * returns contract's LIGO balance\r\n     */\r\n    function getContractTokenBalance() public constant returns (uint) {\r\n        return tokenReward.balanceOf(address(this));\r\n    }\r\n    \r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if time limit has been reached, and if so, \r\n     * sends the entire amount to the beneficiary, and send LIGO to buyers. \r\n     */\r\n    function safeWithdrawal() public afterWithdrawalDeadline {\r\n\t\t\r\n\t\t// Only the beneficiery can withdraw from Wave 1\r\n\t\tif (beneficiary == msg.sender) {\r\n\r\n\t\t\t// first send all the ETH to beneficiary\r\n            if (beneficiary.send(amountRaised)) {\r\n                emit FundTransfer(beneficiary, amountRaised, false);\r\n            }\r\n\r\n\t\t\t// Read amount of total LIGO in this contract\r\n\t\t\tuint totalTokens = tokenReward.balanceOf(address(this));\r\n\t\t\tuint remainingTokens = totalTokens;\r\n\r\n\t\t\t// send the LIGO to each buyer\r\n\t\t\tfor (uint i=0; i<buyerCount; i++) {\r\n\t\t\t\taddress buyerId = buyers[i];\r\n\t\t\t\tuint amount = ((balanceOf[buyerId] * 500) * 125) / 100; //Modifier is 100->125% so divide by 100.\r\n\t\t\t\t// Make sure there are enough remaining tokens in the contract before trying to send\r\n\t\t\t\tif (remainingTokens >= amount) {\r\n\t\t\t\t\ttokenReward.transfer(buyerId, amount); \r\n\t\t\t\t\t// subtract from the total\r\n\t\t\t\t\tremainingTokens -= amount;\r\n\t\t\t\t\t// clear out buyer's balance\r\n\t\t\t\t\tbalanceOf[buyerId] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// send unsold tokens back to contract init wallet\r\n\t\t\tif (remainingTokens > 0) {\r\n\t\t\t\ttokenReward.transfer(beneficiary, remainingTokens);\r\n\t\t\t}\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawlDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"startUnixTime\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000a0ed229f5efd91361d600f9c6b56242c92c5af600000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000000000000000000000000000000000005afb9eb00000000000000000000000000000000000000000000000000000000000015180000000000000000000000000e04bfe83a49a9a242635c0759df99ea44b0feb06","Library":"","SwarmSource":"bzzr://4333769544f33b32c3136a50e44f0e447b25629b952257412c7d605594c67184"}]}