{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// File: contracts/helpers/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n  * @dev The Constructor sets the original owner of the contract to the\r\n  * sender account.\r\n  */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any other account other than owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/helpers/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20Interface.sol\r\n\r\ncontract ERC20Interface {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/token/BaseToken.sol\r\n\r\ncontract BaseToken is ERC20Interface {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Obtain total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(_spender != address(0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is BaseToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/CappedToken.sol\r\n\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedToken(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/helpers/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev BaseToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is BaseToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/token/SignedTransferToken.sol\r\n\r\n/**\r\n* @title SignedTransferToken\r\n* @dev The SignedTransferToken enables collection of fees for token transfers\r\n* in native token currency. User will provide a signature that allows the third\r\n* party to settle the transaction in his name and collect fee for provided\r\n* serivce.\r\n*/\r\ncontract SignedTransferToken is BaseToken {\r\n\r\n  event TransferPreSigned(\r\n    address indexed from,\r\n    address indexed to,\r\n    address indexed settler,\r\n    uint256 value,\r\n    uint256 fee\r\n  );\r\n\r\n  event TransferPreSignedMany(\r\n    address indexed from,\r\n    address indexed settler,\r\n    uint256 value,\r\n    uint256 fee\r\n  );\r\n\r\n\r\n  // Mapping of already executed settlements for a given address\r\n  mapping(address => mapping(bytes32 => bool)) executedSettlements;\r\n\r\n  /**\r\n  * @dev Will settle a pre-signed transfer\r\n  */\r\n  function transferPreSigned(address _from,\r\n                             address _to,\r\n                             uint256 _value,\r\n                             uint256 _fee,\r\n                             uint256 _nonce,\r\n                             uint8 _v,\r\n                             bytes32 _r,\r\n                             bytes32 _s) public returns (bool) {\r\n    uint256 total = _value.add(_fee);\r\n    bytes32 calcHash = calculateHash(_from, _to, _value, _fee, _nonce);\r\n\r\n    require(_to != address(0));\r\n    require(isValidSignature(_from, calcHash, _v, _r, _s));\r\n    require(balances[_from] >= total);\r\n    require(!executedSettlements[_from][calcHash]);\r\n\r\n    executedSettlements[_from][calcHash] = true;\r\n\r\n    // Move tokens\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n\r\n    // Move fee\r\n    balances[_from] = balances[_from].sub(_fee);\r\n    balances[msg.sender] = balances[msg.sender].add(_fee);\r\n    Transfer(_from, msg.sender, _fee);\r\n\r\n    TransferPreSigned(_from, _to, msg.sender, _value, _fee);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Settle multiple transactions in a single call. Please note that\r\n  * should a single one fail the full state will be reverted. Your client\r\n  * implementation should always first check for balances, correct signatures\r\n  * and any other conditions that might result in failed transaction.\r\n  */\r\n  function transferPreSignedBulk(address[] _from,\r\n                                 address[] _to,\r\n                                 uint256[] _values,\r\n                                 uint256[] _fees,\r\n                                 uint256[] _nonces,\r\n                                 uint8[] _v,\r\n                                 bytes32[] _r,\r\n                                 bytes32[] _s) public returns (bool) {\r\n    // Make sure all the arrays are of the same length\r\n    require(_from.length == _to.length &&\r\n            _to.length ==_values.length &&\r\n            _values.length == _fees.length &&\r\n            _fees.length == _nonces.length &&\r\n            _nonces.length == _v.length &&\r\n            _v.length == _r.length &&\r\n            _r.length == _s.length);\r\n\r\n    for(uint i; i < _from.length; i++) {\r\n      transferPreSigned(_from[i],\r\n                        _to[i],\r\n                        _values[i],\r\n                        _fees[i],\r\n                        _nonces[i],\r\n                        _v[i],\r\n                        _r[i],\r\n                        _s[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  function transferPreSignedMany(address _from,\r\n                                 address[] _tos,\r\n                                 uint256[] _values,\r\n                                 uint256 _fee,\r\n                                 uint256 _nonce,\r\n                                 uint8 _v,\r\n                                 bytes32 _r,\r\n                                 bytes32 _s) public returns (bool) {\r\n   require(_tos.length == _values.length);\r\n   uint256 total = getTotal(_tos, _values, _fee);\r\n\r\n   bytes32 calcHash = calculateManyHash(_from, _tos, _values, _fee, _nonce);\r\n\r\n   require(isValidSignature(_from, calcHash, _v, _r, _s));\r\n   require(balances[_from] >= total);\r\n   require(!executedSettlements[_from][calcHash]);\r\n\r\n   executedSettlements[_from][calcHash] = true;\r\n\r\n   // transfer to each recipient and take fee at the end\r\n   for(uint i; i < _tos.length; i++) {\r\n     // Move tokens\r\n     balances[_from] = balances[_from].sub(_values[i]);\r\n     balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\r\n     Transfer(_from, _tos[i], _values[i]);\r\n   }\r\n\r\n   // Move fee\r\n   balances[_from] = balances[_from].sub(_fee);\r\n   balances[msg.sender] = balances[msg.sender].add(_fee);\r\n   Transfer(_from, msg.sender, _fee);\r\n\r\n   TransferPreSignedMany(_from, msg.sender, total, _fee);\r\n\r\n   return true;\r\n  }\r\n\r\n  function getTotal(address[] _tos, uint256[] _values, uint256 _fee) private view returns (uint256)  {\r\n    uint256 total = _fee;\r\n\r\n    for(uint i; i < _tos.length; i++) {\r\n      total = total.add(_values[i]); // sum of all the values + fee\r\n      require(_tos[i] != address(0)); // check that the recipient is a valid address\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculates transfer hash for transferPreSignedMany\r\n  */\r\n  function calculateManyHash(address _from, address[] _tos, uint256[] _values, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\r\n    return keccak256(uint256(1), address(this), _from, _tos, _values, _fee, _nonce);\r\n  }\r\n\r\n  /**\r\n  * @dev Calculates transfer hash.\r\n  */\r\n  function calculateHash(address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\r\n    return keccak256(uint256(0), address(this), _from, _to, _value, _fee, _nonce);\r\n  }\r\n\r\n  /**\r\n  * @dev Validates the signature\r\n  */\r\n  function isValidSignature(address _signer, bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (bool) {\r\n    return _signer == ecrecover(\r\n            keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash),\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n  }\r\n\r\n  /**\r\n  * @dev Allows you to check whether a certain transaction has been already\r\n  * settled or not.\r\n  */\r\n  function isTransactionAlreadySettled(address _from, bytes32 _calcHash) public view returns (bool) {\r\n    return executedSettlements[_from][_calcHash];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/PausableSignedTransferToken.sol\r\n\r\ncontract PausableSignedTransferToken is SignedTransferToken, PausableToken {\r\n\r\n  function transferPreSigned(address _from,\r\n                             address _to,\r\n                             uint256 _value,\r\n                             uint256 _fee,\r\n                             uint256 _nonce,\r\n                             uint8 _v,\r\n                             bytes32 _r,\r\n                             bytes32 _s) public whenNotPaused returns (bool) {\r\n    return super.transferPreSigned(_from, _to, _value, _fee, _nonce, _v, _r, _s);\r\n  }\r\n\r\n  function transferPreSignedBulk(address[] _from,\r\n                                 address[] _to,\r\n                                 uint256[] _values,\r\n                                 uint256[] _fees,\r\n                                 uint256[] _nonces,\r\n                                 uint8[] _v,\r\n                                 bytes32[] _r,\r\n                                 bytes32[] _s) public whenNotPaused returns (bool) {\r\n    return super.transferPreSignedBulk(_from, _to, _values, _fees, _nonces, _v, _r, _s);\r\n  }\r\n\r\n  function transferPreSignedMany(address _from,\r\n                                 address[] _tos,\r\n                                 uint256[] _values,\r\n                                 uint256 _fee,\r\n                                 uint256 _nonce,\r\n                                 uint8 _v,\r\n                                 bytes32 _r,\r\n                                 bytes32 _s) public whenNotPaused returns (bool) {\r\n    return super.transferPreSignedMany(_from, _tos, _values, _fee, _nonce, _v, _r, _s);\r\n  }\r\n}\r\n\r\n// File: contracts/FourToken.sol\r\n\r\ncontract FourToken is CappedToken, PausableSignedTransferToken  {\r\n  string public name = 'The 4th Pillar Token';\r\n  string public symbol = 'FOUR';\r\n  uint256 public decimals = 18;\r\n\r\n  // Max supply of 400 million\r\n  uint256 public maxSupply = 400000000 * 10**decimals;\r\n\r\n  function FourToken()\r\n    CappedToken(maxSupply) public {\r\n      paused = true;\r\n  }\r\n\r\n  // @dev Recover any mistakenly sent ERC20 tokens to the Token address\r\n  function recoverERC20Tokens(address _erc20, uint256 _amount) public onlyOwner {\r\n    ERC20Interface(_erc20).transfer(msg.sender, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param tokens amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps in UNIX.\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // how many tokens does a buyer get per wei\r\n  uint256 public rate;\r\n\r\n  // wallet where funds are forwarded\r\n  address public wallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  // amount of sold tokens\r\n  uint256 public tokensSold;\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _token) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = MintableToken(_token);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokens);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Finalized();\r\n\r\n  bool public isFinalized = false;\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/TokenCappedCrowdsale.sol\r\n\r\ncontract TokenCappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public tokenCap;\r\n\r\n  function TokenCappedCrowdsale(uint256 _tokenCap) public {\r\n    require(_tokenCap > 0);\r\n    tokenCap = _tokenCap;\r\n  }\r\n\r\n  function isCapReached() public view returns (bool) {\r\n    return tokensSold >= tokenCap;\r\n  }\r\n\r\n  function hasEnded() public view returns (bool) {\r\n    return isCapReached() || super.hasEnded();\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinCap = tokensSold.add(getTokenAmount(msg.value)) <= tokenCap;\r\n    return withinCap && super.validPurchase();\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/WhitelistCrowdsale.sol\r\n\r\ncontract WhitelistCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event WhitelistUpdated(uint256 timestamp, string operation, uint256 totalAddresses);\r\n\r\n  // Mapping of whitelisted addresses\r\n  mapping(address => bool) whitelisted;\r\n\r\n  // Total count of whitelisted participants\r\n  uint256 public whitelistedCount;\r\n\r\n  function isWhitelisted(address _addr) public view returns (bool) {\r\n    return whitelisted[_addr];\r\n  }\r\n\r\n  function addAddress(address _addr) external onlyOwner {\r\n    whitelisted[_addr] = true;\r\n    whitelistedCount++;\r\n    WhitelistUpdated(block.timestamp, \"Added\", whitelistedCount);\r\n  }\r\n\r\n  function addAddresses(address[] _addrs) external onlyOwner {\r\n    for (uint256 i = 0; i < _addrs.length; i++) {\r\n      whitelisted[_addrs[i]] = true;\r\n      whitelistedCount++;\r\n    }\r\n\r\n    WhitelistUpdated(block.timestamp, \"Added\", whitelistedCount);\r\n  }\r\n\r\n  function removeAddress(address _addr) external onlyOwner {\r\n    whitelisted[_addr] = false;\r\n    whitelistedCount--;\r\n    WhitelistUpdated(block.timestamp, \"Removed\", whitelistedCount);\r\n  }\r\n\r\n  function removeAddresses(address[] _addrs) external onlyOwner {\r\n    for (uint256 i = 0; i < _addrs.length; i++) {\r\n      whitelisted[_addrs[i]] = false;\r\n      whitelistedCount--;\r\n    }\r\n\r\n    WhitelistUpdated(block.timestamp, \"Removed\", whitelistedCount);\r\n  }\r\n\r\n  function validPurchase() internal view returns (bool) {\r\n    return isWhitelisted(msg.sender) && super.validPurchase();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/FourCrowdsale.sol\r\n\r\ncontract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale {\r\n  event RateChanged(uint256 newRate, string name);\r\n\r\n  uint256 private constant E18 = 10**18;\r\n\r\n  // Max tokens sold = 152 million\r\n  uint256 private TOKEN_SALE_CAP = 152000000 * E18;\r\n\r\n  uint256 public constant TEAM_TOKENS = 50000000 * E18;\r\n  address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427;\r\n\r\n  // Vault tokens have been pre-minted\r\n//  uint256 public constant VAULT_TOKENS = 152000000 * E18;\r\n//  address public constant VAULT_ADDRESS = 0x545baa8e4Fff675711CB92Af33e5850aDD913b76;\r\n\r\n  uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18;\r\n  address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999;\r\n\r\n  // Bounty tokens have been pre-minted\r\n//  uint256 public constant BOUNTY_TOKENS = 7000000 * E18;\r\n//  address public constant BOUNTY_ADDRESS = 0x18f260a71c282bc4d5fe4ee1187658a06e9d1a59;\r\n\r\n  // Unsold tokens will be transfered to the VAULT\r\n  address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46;\r\n\r\n  // Bonus amount. The first 24h there will be a bonus of 10%\r\n  uint256 public bonus;\r\n\r\n  function FourCrowdsale(uint256 _startTime,\r\n                         uint256 _endTime,\r\n                         uint256 _rate,\r\n                         uint256 _bonus,\r\n                         address _wallet,\r\n                         address _token)\r\n        TokenCappedCrowdsale(TOKEN_SALE_CAP)\r\n        Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public {\r\n    bonus = _bonus;\r\n  }\r\n\r\n  function setCrowdsaleWallet(address _wallet) public onlyOwner {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function changeStartAndEndTime(uint256 _newStartTime, uint256 _newEndTime) public onlyOwner {\r\n    require(_newStartTime >= now);\r\n    require(_newEndTime >= _newStartTime);\r\n\r\n    startTime = _newStartTime;\r\n    endTime = _newEndTime;\r\n  }\r\n\r\n  function changeEndTime(uint256 _newEndTime) public onlyOwner {\r\n    require(_newEndTime > startTime);\r\n    endTime = _newEndTime;\r\n  }\r\n\r\n  function setRate(uint256 _rate) public onlyOwner  {\r\n    require(now < startTime); // cant change once the sale has started\r\n    rate = _rate;\r\n    RateChanged(_rate, 'rate');\r\n  }\r\n\r\n  function setBonus(uint256 _bonus) public onlyOwner  {\r\n    require(now < startTime); // cant change once the sale has started\r\n    bonus = _bonus;\r\n    RateChanged(_bonus, 'bonus');\r\n  }\r\n\r\n  function processPresaleOrEarlyContributors(address[] _beneficiaries, uint256[] _tokenAmounts) public onlyOwner {\r\n    // Cant process anymore after the crowdsale has finished\r\n    require(now <= endTime);\r\n\r\n    for (uint i = 0; i < _beneficiaries.length; i++) {\r\n      // update state\r\n      tokensSold = tokensSold.add(_tokenAmounts[i]);\r\n      token.mint(_beneficiaries[i], _tokenAmounts[i]);\r\n\r\n      TokenPurchase(msg.sender, _beneficiaries[i], 0, _tokenAmounts[i]);\r\n    }\r\n  }\r\n\r\n\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    uint256 actualRate = rate;\r\n\r\n    // For the first 24 hours of the crowdsale there is a bonus\r\n    if (now <= startTime + 1 days) {\r\n      actualRate = actualRate.add(bonus);\r\n    }\r\n\r\n    return weiAmount.mul(actualRate);\r\n  }\r\n\r\n  function finalization() internal {\r\n    // transfer tokens to team\r\n    token.mint(TEAM_ADDRESS, TEAM_TOKENS);\r\n\r\n    // transfer tokens to the 4th pillar vault\r\n    // already minted before crowdsale\r\n    // token.mint(VAULT_ADDRESS, VAULT_TOKENS);\r\n\r\n    // transfer advisors and contributors tokens\r\n    token.mint(ADVISORS_AND_CONTRIBUTORS_ADDRESS, ADVISORS_AND_CONTRIBUTORS_TOKENS);\r\n\r\n    // transfer bounty tokens\r\n    // already minted before crowdsale\r\n    //token.mint(BOUNTY_ADDRESS, BOUNTY_TOKENS);\r\n\r\n    // transfer all unsold tokens to the unsold address for the airdrop\r\n    uint256 unsold_tokens = TOKEN_SALE_CAP - tokensSold;\r\n    token.mint(UNSOLD_ADDRESS, unsold_tokens);\r\n\r\n    // finish minting\r\n    token.finishMinting();\r\n    // release ownership back to owner\r\n    token.transferOwnership(owner);\r\n    // finalize\r\n    super.finalization();\r\n  }\r\n\r\n  // @dev Recover any mistakenly sent ERC20 tokens to the Crowdsale address\r\n  function recoverERC20Tokens(address _erc20, uint256 _amount) public onlyOwner {\r\n    ERC20Interface(_erc20).transfer(msg.sender, _amount);\r\n  }\r\n\r\n  function releaseTokenOwnership() public onlyOwner {\r\n    token.transferOwnership(owner);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"processPresaleOrEarlyContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStartTime\",\"type\":\"uint256\"},{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"changeStartAndEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_AND_CONTRIBUTORS_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setCrowdsaleWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_AND_CONTRIBUTORS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNSOLD_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"totalAddresses\",\"type\":\"uint256\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"FourCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b1fb5c0000000000000000000000000000000000000000000000000000000005b28f0400000000000000000000000000000000000000000000000000000000000001d4c00000000000000000000000000000000000000000000000000000000000002ee000000000000000000000000252e863fcea6ed8aedca218e802d8ba2246a051d0000000000000000000000004730fb1463a6f1f44aeb45f6c5c422427f37f4d0","Library":"","SwarmSource":"bzzr://3fcf424aa028b0d0830ce530fce90d76fec82bea697c28ac3e90a90c677dd980"}]}