{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title manages special access privileges.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See KittyAccessControl\r\n\r\ncontract AccessControl {\r\n      /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\ncontract EggFactory is AccessControl{\r\n    \r\n    event EggOpened(address eggOwner, uint256 eggId, uint256 amount);\r\n    event EggBought(address eggOwner, uint256 eggId, uint256 amount);\r\n    \r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setEggFactoryAddress() call.\r\n    bool public isEggFactory = true;\r\n\r\n    address public vaultAddress;\r\n\r\n    // @dev Scheme of egg\r\n    struct EggScheme{\r\n        uint256 id;\r\n        uint256 stock; // max available eggs. zero for unlimited\r\n        uint256 purchased; // purchased eggs\r\n        uint256 customGene; // custom gene for future beast\r\n        uint256 maxAllowedToBuy; // max amount allowed to buy on single transaction. zero for unnlimited\r\n        \r\n        uint256 increase; // price increase. zero for no increase\r\n        uint256 price; // base price of the egg\r\n        \r\n        bool active; // is the egg active to be bought\r\n        bool open; // is the egg active to be opened \r\n        bool isEggScheme;\r\n    }\r\n\r\n    // Mapping of existing eggs \r\n    // @dev: uint256 is the ID of the egg scheme\r\n    mapping (uint256 => EggScheme) public eggs;\r\n    uint256[] public eggsIndexes;\r\n    \r\n    uint256[] public activeEggs;\r\n    mapping (uint256 => uint256) indexesActiveEggs;\r\n\r\n    // Mapping of eggs owned by an address\r\n    // @dev: owner => ( eggId => eggsAmount )\r\n    mapping ( address => mapping ( uint256 => uint256 ) ) public eggsOwned;\r\n    \r\n\r\n    // Extend constructor\r\n    function EggFactory(address _vaultAddress) public {\r\n        vaultAddress = _vaultAddress;\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    // Verify existence of id to avoid collision\r\n    function eggExists( uint _eggId) internal view returns(bool) {\r\n        return eggs[_eggId].isEggScheme;\r\n    }\r\n\r\n    function listEggsIds() external view returns(uint256[]){\r\n        return eggsIndexes;\r\n    }\r\n    \r\n    function listActiveEggs() external view returns(uint256[]){\r\n        return activeEggs;\r\n    }\r\n\r\n    // Get the amount of purchased eggs of a struct\r\n    function getPurchased(uint256 _eggId) external view returns(uint256){\r\n        return eggs[_eggId].purchased;\r\n    }\r\n\r\n    // Set a new address for vault contract\r\n    function setVaultAddress(address _vaultAddress) public onlyCEO returns (bool) {\r\n        require( _vaultAddress != address(0x0) );\r\n        vaultAddress = _vaultAddress;\r\n    }\r\n    \r\n    function setActiveStatusEgg( uint256 _eggId, bool state ) public onlyCEO returns (bool){\r\n        require(eggExists(_eggId));\r\n        eggs[_eggId].active = state;\r\n\r\n        if(state) {\r\n            uint newIndex = activeEggs.push(_eggId);\r\n            indexesActiveEggs[_eggId] = uint256(newIndex-1);\r\n        }\r\n        else {\r\n            indexesActiveEggs[activeEggs[activeEggs.length-1]] = indexesActiveEggs[_eggId];\r\n            activeEggs[indexesActiveEggs[_eggId]] = activeEggs[activeEggs.length-1]; \r\n            delete activeEggs[activeEggs.length-1];\r\n            activeEggs.length--;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function setOpenStatusEgg( uint256 _eggId, bool state ) public onlyCEO returns (bool){\r\n        require(eggExists(_eggId));\r\n        eggs[_eggId].open = state;\r\n        return true;\r\n    }\r\n\r\n    // Add modifier of onlyCOO\r\n    function createEggScheme( uint256 _eggId, uint256 _stock, uint256 _maxAllowedToBuy, uint256 _customGene, uint256 _price, uint256 _increase, bool _active, bool _open ) public onlyCEO returns (bool){\r\n        require(!eggExists(_eggId));\r\n        \r\n        eggs[_eggId].isEggScheme = true;\r\n        \r\n        eggs[_eggId].id = _eggId;\r\n        eggs[_eggId].stock = _stock;\r\n        eggs[_eggId].maxAllowedToBuy = _maxAllowedToBuy;\r\n        eggs[_eggId].purchased = 0;\r\n        eggs[_eggId].customGene = _customGene;\r\n        eggs[_eggId].price = _price;\r\n        eggs[_eggId].increase = _increase;\r\n        \r\n        setActiveStatusEgg(_eggId,_active);\r\n        setOpenStatusEgg(_eggId,_open);\r\n        \r\n        eggsIndexes.push(_eggId);\r\n        return true;\r\n    }\r\n\r\n    function buyEgg(uint256 _eggId, uint256 _amount) public payable returns(bool){\r\n        require(eggs[_eggId].active == true);\r\n        require((currentEggPrice(_eggId)*_amount) == msg.value);\r\n        require(eggs[_eggId].maxAllowedToBuy == 0 || _amount<=eggs[_eggId].maxAllowedToBuy);\r\n        require(eggs[_eggId].stock == 0 || eggs[_eggId].purchased+_amount<=eggs[_eggId].stock); // until max\r\n        \r\n        vaultAddress.transfer(msg.value); // transfer the amount to vault\r\n        \r\n        eggs[_eggId].purchased += _amount;\r\n        eggsOwned[msg.sender][_eggId] += _amount;\r\n\r\n        emit EggBought(msg.sender, _eggId, _amount);\r\n    } \r\n    \r\n    function currentEggPrice( uint256 _eggId ) public view returns (uint256) {\r\n        return eggs[_eggId].price + (eggs[_eggId].purchased * eggs[_eggId].increase);\r\n    }\r\n    \r\n    function openEgg(uint256 _eggId, uint256 _amount) external {\r\n        require(eggs[_eggId].open == true);\r\n        require(eggsOwned[msg.sender][_eggId] >= _amount);\r\n        \r\n        eggsOwned[msg.sender][_eggId] -= _amount;\r\n        emit EggOpened(msg.sender, _eggId, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listEggsIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOpenStatusEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setActiveStatusEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"}],\"name\":\"currentEggPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEggFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggsIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"openEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggsOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"}],\"name\":\"getPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"stock\",\"type\":\"uint256\"},{\"name\":\"purchased\",\"type\":\"uint256\"},{\"name\":\"customGene\",\"type\":\"uint256\"},{\"name\":\"maxAllowedToBuy\",\"type\":\"uint256\"},{\"name\":\"increase\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"isEggScheme\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"},{\"name\":\"_stock\",\"type\":\"uint256\"},{\"name\":\"_maxAllowedToBuy\",\"type\":\"uint256\"},{\"name\":\"_customGene\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_increase\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"},{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"createEggScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listActiveEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eggOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EggOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eggOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EggBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"EggFactory","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000096c35ce071cfdb641445f905386f1fd99d453de9","Library":"","SwarmSource":"bzzr://7782e19a9999de81da5dc744934e45ef614a1e81ea41e3f2e04312ebbb0524bf"}]}