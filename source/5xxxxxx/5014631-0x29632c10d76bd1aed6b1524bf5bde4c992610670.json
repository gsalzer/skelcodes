{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Entity Generic Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n    Used for the ABI interface when assets need to call Application Entity.\r\n\r\n    This is required, otherwise we end up loading the assets themselves when we load the ApplicationEntity contract\r\n    and end up in a loop\r\n*/\r\n\r\n\r\n\r\ncontract ApplicationEntityABI {\r\n\r\n    address public ProposalsEntity;\r\n    address public FundingEntity;\r\n    address public MilestonesEntity;\r\n    address public MeetingsEntity;\r\n    address public BountyManagerEntity;\r\n    address public TokenManagerEntity;\r\n    address public ListingContractEntity;\r\n    address public FundingManagerEntity;\r\n    address public NewsContractEntity;\r\n\r\n    bool public _initialized = false;\r\n    bool public _locked = false;\r\n    uint8 public CurrentEntityState;\r\n    uint8 public AssetCollectionNum;\r\n    address public GatewayInterfaceAddress;\r\n    address public deployerAddress;\r\n    address testAddressAllowUpgradeFrom;\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n    mapping (bytes32 => address) public AssetCollection;\r\n    mapping (uint8 => bytes32) public AssetCollectionIdToName;\r\n    mapping (bytes32 => uint256) public BylawsUint256;\r\n    mapping (bytes32 => bytes32) public BylawsBytes32;\r\n\r\n    function ApplicationEntity() public;\r\n    function getEntityState(bytes32 name) public view returns (uint8);\r\n    function linkToGateway( address _GatewayInterfaceAddress, bytes32 _sourceCodeUrl ) external;\r\n    function setUpgradeState(uint8 state) public ;\r\n    function addAssetProposals(address _assetAddresses) external;\r\n    function addAssetFunding(address _assetAddresses) external;\r\n    function addAssetMilestones(address _assetAddresses) external;\r\n    function addAssetMeetings(address _assetAddresses) external;\r\n    function addAssetBountyManager(address _assetAddresses) external;\r\n    function addAssetTokenManager(address _assetAddresses) external;\r\n    function addAssetFundingManager(address _assetAddresses) external;\r\n    function addAssetListingContract(address _assetAddresses) external;\r\n    function addAssetNewsContract(address _assetAddresses) external;\r\n    function getAssetAddressByName(bytes32 _name) public view returns (address);\r\n    function setBylawUint256(bytes32 name, uint256 value) public;\r\n    function getBylawUint256(bytes32 name) public view returns (uint256);\r\n    function setBylawBytes32(bytes32 name, bytes32 value) public;\r\n    function getBylawBytes32(bytes32 name) public view returns (bytes32);\r\n    function initialize() external returns (bool);\r\n    function getParentAddress() external view returns(address);\r\n    function createCodeUpgradeProposal( address _newAddress, bytes32 _sourceCodeUrl ) external returns (uint256);\r\n    function acceptCodeUpgradeProposal(address _newAddress) external;\r\n    function initializeAssetsToThisApplication() external returns (bool);\r\n    function transferAssetsToNewApplication(address _newAddress) external returns (bool);\r\n    function lock() external returns (bool);\r\n    function canInitiateCodeUpgrade(address _sender) public view returns(bool);\r\n    function doStateChanges() public;\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function anyAssetHasChanges() public view returns (bool);\r\n    function extendedAnyAssetHasChanges() internal view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8, uint8);\r\n    function getTimestamp() view public returns (uint256);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Gateway Interface Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Used as a resolver to retrieve the latest deployed version of the Application\r\n\r\n ENS: gateway.main.blockbits.eth will point directly to this contract.\r\n\r\n    ADD ENS domain ownership / transfer methods\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIGatewayInterface {\r\n    address public currentApplicationEntityAddress;\r\n    ApplicationEntityABI private currentApp;\r\n    address public deployerAddress;\r\n\r\n    function getApplicationAddress() external view returns (address);\r\n    function requestCodeUpgrade( address _newAddress, bytes32 _sourceCodeUrl ) external returns (bool);\r\n    function approveCodeUpgrade( address _newAddress ) external returns (bool);\r\n    function link( address _newAddress ) internal returns (bool);\r\n    function getNewsContractAddress() external view returns (address);\r\n    function getListingContractAddress() external view returns (address);\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Asset Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Any contract inheriting this will be usable as an Asset in the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\ncontract ABIApplicationAsset {\r\n\r\n    bytes32 public assetName;\r\n    uint8 public CurrentEntityState;\r\n    uint8 public RecordNum;\r\n    bool public _initialized;\r\n    bool public _settingsApplied;\r\n    address public owner;\r\n    address public deployerAddress;\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n    mapping (bytes32 => uint8) public RecordStates;\r\n\r\n    function setInitialApplicationAddress(address _ownerAddress) public;\r\n    function setInitialOwnerAndName(bytes32 _name) external returns (bool);\r\n    function getRecordState(bytes32 name) public view returns (uint8);\r\n    function getEntityState(bytes32 name) public view returns (uint8);\r\n    function applyAndLockSettings() public returns(bool);\r\n    function transferToNewOwner(address _newOwner) public returns (bool);\r\n    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);\r\n    function getApplicationState() public view returns (uint8);\r\n    function getApplicationEntityState(bytes32 name) public view returns (uint8);\r\n    function getAppBylawUint256(bytes32 name) public view returns (uint256);\r\n    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);\r\n    function getTimestamp() view public returns (uint256);\r\n\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Proposals Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the Proposals Contract code deployed and linked to the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIProposals is ABIApplicationAsset {\r\n\r\n    address public Application;\r\n    address public ListingContractEntity;\r\n    address public FundingEntity;\r\n    address public FundingManagerEntity;\r\n    address public TokenManagerEntity;\r\n    address public TokenEntity;\r\n    address public MilestonesEntity;\r\n\r\n    struct ProposalRecord {\r\n        address creator;\r\n        bytes32 name;\r\n        uint8 actionType;\r\n        uint8 state;\r\n        bytes32 hash;                       // action name + args hash\r\n        address addr;\r\n        bytes32 sourceCodeUrl;\r\n        uint256 extra;\r\n        uint256 time_start;\r\n        uint256 time_end;\r\n        uint256 index;\r\n    }\r\n\r\n    struct VoteStruct {\r\n        address voter;\r\n        uint256 time;\r\n        bool    vote;\r\n        uint256 power;\r\n        bool    annulled;\r\n        uint256 index;\r\n    }\r\n\r\n    struct ResultRecord {\r\n        uint256 totalAvailable;\r\n        uint256 requiredForResult;\r\n        uint256 totalSoFar;\r\n        uint256 yes;\r\n        uint256 no;\r\n        bool    requiresCounting;\r\n    }\r\n\r\n    uint8 public ActiveProposalNum;\r\n    uint256 public VoteCountPerProcess;\r\n    bool public EmergencyFundingReleaseApproved;\r\n\r\n    mapping (bytes32 => uint8) public ActionTypes;\r\n    mapping (uint8 => uint256) public ActiveProposalIds;\r\n    mapping (uint256 => bool) public ExpiredProposalIds;\r\n    mapping (uint256 => ProposalRecord) public ProposalsById;\r\n    mapping (bytes32 => uint256) public ProposalIdByHash;\r\n    mapping (uint256 => mapping (uint256 => VoteStruct) ) public VotesByProposalId;\r\n    mapping (uint256 => mapping (address => VoteStruct) ) public VotesByCaster;\r\n    mapping (uint256 => uint256) public VotesNumByProposalId;\r\n    mapping (uint256 => ResultRecord ) public ResultsByProposalId;\r\n    mapping (uint256 => uint256) public lastProcessedVoteIdByProposal;\r\n    mapping (uint256 => uint256) public ProcessedVotesByProposal;\r\n    mapping (uint256 => uint256) public VoteCountAtProcessingStartByProposal;\r\n\r\n    function getRecordState(bytes32 name) public view returns (uint8);\r\n    function getActionType(bytes32 name) public view returns (uint8);\r\n    function getProposalState(uint256 _proposalId) public view returns (uint8);\r\n    function getBylawsProposalVotingDuration() public view returns (uint256);\r\n    function getBylawsMilestoneMinPostponing() public view returns (uint256);\r\n    function getBylawsMilestoneMaxPostponing() public view returns (uint256);\r\n    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 );\r\n    function process() public;\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8);\r\n    function addCodeUpgradeProposal(address _addr, bytes32 _sourceCodeUrl) external returns (uint256);\r\n    function createMilestoneAcceptanceProposal() external returns (uint256);\r\n    function createMilestonePostponingProposal(uint256 _duration) external returns (uint256);\r\n    function getCurrentMilestonePostponingProposalDuration() public view returns (uint256);\r\n    function getCurrentMilestoneProposalStatusForType(uint8 _actionType ) public view returns (uint8);\r\n    function createEmergencyFundReleaseProposal() external returns (uint256);\r\n    function createDelistingProposal(uint256 _projectId) external returns (uint256);\r\n    function RegisterVote(uint256 _proposalId, bool _myVote) public;\r\n    function hasPreviousVote(uint256 _proposalId, address _voter) public view returns (bool);\r\n    function getTotalTokenVotingPower(address _voter) public view returns ( uint256 );\r\n    function getVotingPower(uint256 _proposalId, address _voter) public view returns ( uint256 );\r\n    function setVoteCountPerProcess(uint256 _perProcess) external;\r\n    function ProcessVoteTotals(uint256 _proposalId, uint256 length) public;\r\n    function canEndVoting(uint256 _proposalId) public view returns (bool);\r\n    function getProposalType(uint256 _proposalId) public view returns (uint8);\r\n    function expiryChangesState(uint256 _proposalId) public view returns (bool);\r\n    function needsProcessing(uint256 _proposalId) public view returns (bool);\r\n    function getMyVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);\r\n    function getHasVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);\r\n    function getMyVote(uint256 _proposalId, address _voter) public view returns (bool);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Funding Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the Funding Contract code deployed and linked to the Application Entity\r\n\r\n\r\n    !!! Links directly to Milestones\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIFunding is ABIApplicationAsset {\r\n\r\n    address public multiSigOutputAddress;\r\n    address public DirectInput;\r\n    address public MilestoneInput;\r\n    address public TokenManagerEntity;\r\n    address public FundingManagerEntity;\r\n\r\n    struct FundingStage {\r\n        bytes32 name;\r\n        uint8   state;\r\n        uint256 time_start;\r\n        uint256 time_end;\r\n        uint256 amount_cap_soft;            // 0 = not enforced\r\n        uint256 amount_cap_hard;            // 0 = not enforced\r\n        uint256 amount_raised;              // 0 = not enforced\r\n        // funding method settings\r\n        uint256 minimum_entry;\r\n        uint8   methods;                    // FundingMethodIds\r\n        // token settings\r\n        uint256 fixed_tokens;\r\n        uint8   price_addition_percentage;  //\r\n        uint8   token_share_percentage;\r\n        uint8   index;\r\n    }\r\n\r\n    mapping (uint8 => FundingStage) public Collection;\r\n    uint8 public FundingStageNum;\r\n    uint8 public currentFundingStage;\r\n    uint256 public AmountRaised;\r\n    uint256 public MilestoneAmountRaised;\r\n    uint256 public GlobalAmountCapSoft;\r\n    uint256 public GlobalAmountCapHard;\r\n    uint8 public TokenSellPercentage;\r\n    uint256 public Funding_Setting_funding_time_start;\r\n    uint256 public Funding_Setting_funding_time_end;\r\n    uint256 public Funding_Setting_cashback_time_start;\r\n    uint256 public Funding_Setting_cashback_time_end;\r\n    uint256 public Funding_Setting_cashback_before_start_wait_duration;\r\n    uint256 public Funding_Setting_cashback_duration;\r\n\r\n\r\n    function addFundingStage(\r\n        bytes32 _name,\r\n        uint256 _time_start,\r\n        uint256 _time_end,\r\n        uint256 _amount_cap_soft,\r\n        uint256 _amount_cap_hard,   // required > 0\r\n        uint8   _methods,\r\n        uint256 _minimum_entry,\r\n        uint256 _fixed_tokens,\r\n        uint8   _price_addition_percentage,\r\n        uint8   _token_share_percentage\r\n    )\r\n    public;\r\n\r\n    function addSettings(address _outputAddress, uint256 soft_cap, uint256 hard_cap, uint8 sale_percentage, address _direct, address _milestone ) public;\r\n    function getStageAmount(uint8 StageId) public view returns ( uint256 );\r\n    function allowedPaymentMethod(uint8 _payment_method) public pure returns (bool);\r\n    function receivePayment(address _sender, uint8 _payment_method) payable public returns(bool);\r\n    function canAcceptPayment(uint256 _amount) public view returns (bool);\r\n    function getValueOverCurrentCap(uint256 _amount) public view returns (uint256);\r\n    function isFundingStageUpdateAllowed(uint8 _new_state ) public view returns (bool);\r\n    function getRecordStateRequiredChanges() public view returns (uint8);\r\n    function doStateChanges() public;\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8, uint8, uint8);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Meetings Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the Meetings Contract code deployed and linked to the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIMeetings is ABIApplicationAsset {\r\n    struct Record {\r\n        bytes32 hash;\r\n        bytes32 name;\r\n        uint8 state;\r\n        uint256 time_start;                     // start at unixtimestamp\r\n        uint256 duration;\r\n        uint8 index;\r\n    }\r\n    mapping (uint8 => Record) public Collection;\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Milestones Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the Milestones Contract code deployed and linked to the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIMilestones is ABIApplicationAsset {\r\n\r\n    struct Record {\r\n        bytes32 name;\r\n        string description;                     // will change to hash pointer ( external storage )\r\n        uint8 state;\r\n        uint256 duration;\r\n        uint256 time_start;                     // start at unixtimestamp\r\n        uint256 last_state_change_time;         // time of last state change\r\n        uint256 time_end;                       // estimated end time >> can be increased by proposal\r\n        uint256 time_ended;                     // actual end time\r\n        uint256 meeting_time;\r\n        uint8 funding_percentage;\r\n        uint8 index;\r\n    }\r\n\r\n    uint8 public currentRecord;\r\n    uint256 public MilestoneCashBackTime = 0;\r\n    mapping (uint8 => Record) public Collection;\r\n    mapping (bytes32 => bool) public MilestonePostponingHash;\r\n    mapping (bytes32 => uint256) public ProposalIdByHash;\r\n\r\n    function getBylawsProjectDevelopmentStart() public view returns (uint256);\r\n    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256);\r\n    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256);\r\n    function addRecord( bytes32 _name, string _description, uint256 _duration, uint8 _perc ) public;\r\n    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8);\r\n    function doStateChanges() public;\r\n    function getRecordStateRequiredChanges() public view returns (uint8);\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function afterVoteNoCashBackTime() public view returns ( bool );\r\n    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 );\r\n    function getCurrentHash() public view returns ( bytes32 );\r\n    function getCurrentProposalId() internal view returns ( uint256 );\r\n    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public;\r\n    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8, uint8, uint8);\r\n    function ApplicationIsInDevelopment() public view returns(bool);\r\n    function MeetingTimeSetFailure() public view returns (bool);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Bounty Program Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n  Bounty program contract that holds and distributes tokens upon successful funding.\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIBountyManager is ABIApplicationAsset {\r\n    function sendBounty( address _receiver, uint256 _amount ) public;\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Token Manager Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABITokenManager is ABIApplicationAsset {\r\n\r\n    address public TokenSCADAEntity;\r\n    address public TokenEntity;\r\n    address public MarketingMethodAddress;\r\n    bool OwnerTokenBalancesReleased = false;\r\n\r\n    function addSettings(address _scadaAddress, address _tokenAddress, address _marketing ) public;\r\n    function getTokenSCADARequiresHardCap() public view returns (bool);\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function finishMinting() public returns (bool);\r\n    function mintForMarketingPool(address _to, uint256 _amount) external returns (bool);\r\n    function ReleaseOwnersLockedTokens(address _multiSigOutputAddress) public returns (bool);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Funding Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the Funding Contract code deployed and linked to the Application Entity\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIFundingManager is ABIApplicationAsset {\r\n\r\n    bool public fundingProcessed;\r\n    bool FundingPoolBalancesAllocated;\r\n    uint8 public VaultCountPerProcess;\r\n    uint256 public lastProcessedVaultId;\r\n    uint256 public vaultNum;\r\n    uint256 public LockedVotingTokens;\r\n    bytes32 public currentTask;\r\n    mapping (bytes32 => bool) public taskByHash;\r\n    mapping  (address => address) public vaultList;\r\n    mapping  (uint256 => address) public vaultById;\r\n\r\n    function receivePayment(address _sender, uint8 _payment_method, uint8 _funding_stage) payable public returns(bool);\r\n    function getMyVaultAddress(address _sender) public view returns (address);\r\n    function setVaultCountPerProcess(uint8 _perProcess) external;\r\n    function getHash(bytes32 actionType, bytes32 arg1) public pure returns ( bytes32 );\r\n    function getCurrentMilestoneProcessed() public view returns (bool);\r\n    function processFundingFailedFinished() public view returns (bool);\r\n    function processFundingSuccessfulFinished() public view returns (bool);\r\n    function getCurrentMilestoneIdHash() internal view returns (bytes32);\r\n    function processMilestoneFinished() public view returns (bool);\r\n    function processEmergencyFundReleaseFinished() public view returns (bool);\r\n    function getAfterTransferLockedTokenBalances(address vaultAddress, bool excludeCurrent) public view returns (uint256);\r\n    function VaultRequestedUpdateForLockedVotingTokens(address owner) public;\r\n    function doStateChanges() public;\r\n    function hasRequiredStateChanges() public view returns (bool);\r\n    function getRequiredStateChanges() public view returns (uint8, uint8);\r\n    function ApplicationInFundingOrDevelopment() public view returns(bool);\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Listing Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABIListingContract is ABIApplicationAsset {\r\n\r\n    address public managerAddress;\r\n    // child items\r\n    struct item {\r\n        bytes32 name;\r\n        address itemAddress;\r\n        bool    status;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping ( uint256 => item ) public items;\r\n    uint256 public itemNum;\r\n\r\n    function setManagerAddress(address _manager) public;\r\n    function addItem(bytes32 _name, address _address) public;\r\n    function getNewsContractAddress(uint256 _childId) external view returns (address);\r\n    function canBeDelisted(uint256 _childId) public view returns (bool);\r\n    function getChildStatus( uint256 _childId ) public view returns (bool);\r\n    function delistChild( uint256 _childId ) public;\r\n\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        News Contract ABI\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract ABINewsContract is ABIApplicationAsset {\r\n\r\n    struct item {\r\n        string hash;\r\n        uint8 itemType;\r\n        uint256 length;\r\n    }\r\n\r\n    uint256 public itemNum = 0;\r\n    mapping ( uint256 => item ) public items;\r\n\r\n    function addInternalMessage(uint8 state) public;\r\n    function addItem(string _hash, uint256 _length) public;\r\n}\r\n\r\n/*\r\n\r\n * source       https://github.com/blockbitsio/\r\n\r\n * @name        Application Entity Contract\r\n * @package     BlockBitsIO\r\n * @author      Micky Socaci <micky@nowlive.ro>\r\n\r\n Contains the main company Entity Contract code deployed and linked to the Gateway Interface.\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ApplicationEntity {\r\n\r\n    /* Source Code Url */\r\n    bytes32 sourceCodeUrl;\r\n\r\n    /* Entity initialised or not */\r\n    bool public _initialized = false;\r\n\r\n    /* Entity locked or not */\r\n    bool public _locked = false;\r\n\r\n    /* Current Entity State */\r\n    uint8 public CurrentEntityState;\r\n\r\n    /* Available Entity State */\r\n    mapping (bytes32 => uint8) public EntityStates;\r\n\r\n    /* GatewayInterface address */\r\n    address public GatewayInterfaceAddress;\r\n\r\n    /* Parent Entity Instance */\r\n    ABIGatewayInterface GatewayInterfaceEntity;\r\n\r\n    /* Asset Entities */\r\n    ABIProposals public ProposalsEntity;\r\n    ABIFunding public FundingEntity;\r\n    ABIMilestones public MilestonesEntity;\r\n    ABIMeetings public MeetingsEntity;\r\n    ABIBountyManager public BountyManagerEntity;\r\n    ABITokenManager public TokenManagerEntity;\r\n    ABIListingContract public ListingContractEntity;\r\n    ABIFundingManager public FundingManagerEntity;\r\n    ABINewsContract public NewsContractEntity;\r\n\r\n    /* Asset Collection */\r\n    mapping (bytes32 => address) public AssetCollection;\r\n    mapping (uint8 => bytes32) public AssetCollectionIdToName;\r\n    uint8 public AssetCollectionNum = 0;\r\n\r\n    event EventAppEntityReady ( address indexed _address );\r\n    event EventAppEntityCodeUpgradeProposal ( address indexed _address, bytes32 indexed _sourceCodeUrl );\r\n    event EventAppEntityInitAsset ( bytes32 indexed _name, address indexed _address );\r\n    event EventAppEntityInitAssetsToThis ( uint8 indexed _assetNum );\r\n    event EventAppEntityAssetsToNewApplication ( address indexed _address );\r\n    event EventAppEntityLocked ( address indexed _address );\r\n\r\n    address public deployerAddress;\r\n\r\n    function ApplicationEntity() public {\r\n        deployerAddress = msg.sender;\r\n        setEntityStates();\r\n        CurrentEntityState = getEntityState(\"NEW\");\r\n    }\r\n\r\n    function setEntityStates() internal {\r\n\r\n        // ApplicationEntity States\r\n        EntityStates[\"__IGNORED__\"]                 = 0;\r\n        EntityStates[\"NEW\"]                         = 1;\r\n        EntityStates[\"WAITING\"]                     = 2;\r\n\r\n        EntityStates[\"IN_FUNDING\"]                  = 3;\r\n\r\n        EntityStates[\"IN_DEVELOPMENT\"]              = 5;\r\n        EntityStates[\"IN_CODE_UPGRADE\"]             = 50;\r\n\r\n        EntityStates[\"UPGRADED\"]                    = 100;\r\n\r\n        EntityStates[\"IN_GLOBAL_CASHBACK\"]          = 150;\r\n        EntityStates[\"LOCKED\"]                      = 200;\r\n\r\n        EntityStates[\"DEVELOPMENT_COMPLETE\"]        = 250;\r\n    }\r\n\r\n    function getEntityState(bytes32 name) public view returns (uint8) {\r\n        return EntityStates[name];\r\n    }\r\n\r\n    /*\r\n    * Initialize Application and it's assets\r\n    * If gateway is freshly deployed, just link\r\n    * else, create a voting proposal that needs to be accepted for the linking\r\n    *\r\n    * @param        address _newAddress\r\n    * @param        bytes32 _sourceCodeUrl\r\n    *\r\n    * @modifiers    requireNoParent, requireNotInitialised\r\n    */\r\n    function linkToGateway(\r\n        address _GatewayInterfaceAddress,\r\n        bytes32 _sourceCodeUrl\r\n    )\r\n        external\r\n        requireNoParent\r\n        requireNotInitialised\r\n        onlyDeployer\r\n    {\r\n        GatewayInterfaceAddress = _GatewayInterfaceAddress;\r\n        sourceCodeUrl = _sourceCodeUrl;\r\n\r\n        // init gateway entity and set app address\r\n        GatewayInterfaceEntity = ABIGatewayInterface(GatewayInterfaceAddress);\r\n        GatewayInterfaceEntity.requestCodeUpgrade( address(this), sourceCodeUrl );\r\n    }\r\n\r\n    function setUpgradeState(uint8 state) public onlyGatewayInterface {\r\n        CurrentEntityState = state;\r\n    }\r\n\r\n    /*\r\n        For the sake of simplicity, and solidity warnings about \"unknown gas usage\" do this.. instead of sending\r\n        an array of addresses\r\n    */\r\n    function addAssetProposals(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        ProposalsEntity = ABIProposals(_assetAddresses);\r\n        assetInitialized(\"Proposals\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetFunding(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        FundingEntity = ABIFunding(_assetAddresses);\r\n        assetInitialized(\"Funding\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetMilestones(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        MilestonesEntity = ABIMilestones(_assetAddresses);\r\n        assetInitialized(\"Milestones\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetMeetings(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        MeetingsEntity = ABIMeetings(_assetAddresses);\r\n        assetInitialized(\"Meetings\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetBountyManager(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        BountyManagerEntity = ABIBountyManager(_assetAddresses);\r\n        assetInitialized(\"BountyManager\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetTokenManager(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        TokenManagerEntity = ABITokenManager(_assetAddresses);\r\n        assetInitialized(\"TokenManager\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetFundingManager(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        FundingManagerEntity = ABIFundingManager(_assetAddresses);\r\n        assetInitialized(\"FundingManager\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetListingContract(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        ListingContractEntity = ABIListingContract(_assetAddresses);\r\n        assetInitialized(\"ListingContract\", _assetAddresses);\r\n    }\r\n\r\n    function addAssetNewsContract(address _assetAddresses) external requireNotInitialised onlyDeployer {\r\n        NewsContractEntity = ABINewsContract(_assetAddresses);\r\n        assetInitialized(\"NewsContract\", _assetAddresses);\r\n    }\r\n\r\n    function assetInitialized(bytes32 name, address _assetAddresses) internal {\r\n        if(AssetCollection[name] == 0x0) {\r\n            AssetCollectionIdToName[AssetCollectionNum] = name;\r\n            AssetCollection[name] = _assetAddresses;\r\n            AssetCollectionNum++;\r\n        } else {\r\n            // just replace\r\n            AssetCollection[name] = _assetAddresses;\r\n        }\r\n        EventAppEntityInitAsset(name, _assetAddresses);\r\n    }\r\n\r\n    function getAssetAddressByName(bytes32 _name) public view returns (address) {\r\n        return AssetCollection[_name];\r\n    }\r\n\r\n    /* Application Bylaws mapping */\r\n    mapping (bytes32 => uint256) public BylawsUint256;\r\n    mapping (bytes32 => bytes32) public BylawsBytes32;\r\n\r\n\r\n    function setBylawUint256(bytes32 name, uint256 value) public requireNotInitialised onlyDeployer {\r\n        BylawsUint256[name] = value;\r\n    }\r\n\r\n    function getBylawUint256(bytes32 name) public view requireInitialised returns (uint256) {\r\n        return BylawsUint256[name];\r\n    }\r\n\r\n    function setBylawBytes32(bytes32 name, bytes32 value) public requireNotInitialised onlyDeployer {\r\n        BylawsBytes32[name] = value;\r\n    }\r\n\r\n    function getBylawBytes32(bytes32 name) public view requireInitialised returns (bytes32) {\r\n        return BylawsBytes32[name];\r\n    }\r\n\r\n    function initialize() external requireNotInitialised onlyGatewayInterface returns (bool) {\r\n        _initialized = true;\r\n        EventAppEntityReady( address(this) );\r\n        return true;\r\n    }\r\n\r\n    function getParentAddress() external view returns(address) {\r\n        return GatewayInterfaceAddress;\r\n    }\r\n\r\n    function createCodeUpgradeProposal(\r\n        address _newAddress,\r\n        bytes32 _sourceCodeUrl\r\n    )\r\n        external\r\n        requireInitialised\r\n        onlyGatewayInterface\r\n        returns (uint256)\r\n    {\r\n        // proposals create new.. code upgrade proposal\r\n        EventAppEntityCodeUpgradeProposal ( _newAddress, _sourceCodeUrl );\r\n\r\n        // return true;\r\n        return ProposalsEntity.addCodeUpgradeProposal(_newAddress, _sourceCodeUrl);\r\n    }\r\n\r\n    /*\r\n    * Only a proposal can update the ApplicationEntity Contract address\r\n    *\r\n    * @param        address _newAddress\r\n    * @modifiers    onlyProposalsAsset\r\n    */\r\n    function acceptCodeUpgradeProposal(address _newAddress) external onlyProposalsAsset  {\r\n        GatewayInterfaceEntity.approveCodeUpgrade( _newAddress );\r\n    }\r\n\r\n    function initializeAssetsToThisApplication() external onlyGatewayInterface returns (bool) {\r\n\r\n        for(uint8 i = 0; i < AssetCollectionNum; i++ ) {\r\n            bytes32 _name = AssetCollectionIdToName[i];\r\n            address current = AssetCollection[_name];\r\n            if(current != address(0x0)) {\r\n                if(!current.call(bytes4(keccak256(\"setInitialOwnerAndName(bytes32)\")), _name) ) {\r\n                    revert();\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n        EventAppEntityInitAssetsToThis( AssetCollectionNum );\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferAssetsToNewApplication(address _newAddress) external onlyGatewayInterface returns (bool){\r\n        for(uint8 i = 0; i < AssetCollectionNum; i++ ) {\r\n            \r\n            bytes32 _name = AssetCollectionIdToName[i];\r\n            address current = AssetCollection[_name];\r\n            if(current != address(0x0)) {\r\n                if(!current.call(bytes4(keccak256(\"transferToNewOwner(address)\")), _newAddress) ) {\r\n                    revert();\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n        EventAppEntityAssetsToNewApplication ( _newAddress );\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    * Only the gateway interface can lock current app after a successful code upgrade proposal\r\n    *\r\n    * @modifiers    onlyGatewayInterface\r\n    */\r\n    function lock() external onlyGatewayInterface returns (bool) {\r\n        _locked = true;\r\n        CurrentEntityState = getEntityState(\"UPGRADED\");\r\n        EventAppEntityLocked(address(this));\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        DUMMY METHOD, to be replaced in a future Code Upgrade with a check to determine if sender should be able to initiate a code upgrade\r\n        specifically used after milestone development completes\r\n    */\r\n    address testAddressAllowUpgradeFrom;\r\n    function canInitiateCodeUpgrade(address _sender) public view returns(bool) {\r\n        // suppress warning\r\n        if(testAddressAllowUpgradeFrom != 0x0 && testAddressAllowUpgradeFrom == _sender) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n    * Throws if called by any other entity except GatewayInterface\r\n    */\r\n    modifier onlyGatewayInterface() {\r\n        require(GatewayInterfaceAddress != address(0) && msg.sender == GatewayInterfaceAddress);\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * Throws if called by any other entity except Proposals Asset Contract\r\n    */\r\n    modifier onlyProposalsAsset() {\r\n        require(msg.sender == address(ProposalsEntity));\r\n        _;\r\n    }\r\n\r\n    modifier requireNoParent() {\r\n        require(GatewayInterfaceAddress == address(0x0));\r\n        _;\r\n    }\r\n\r\n    modifier requireNotInitialised() {\r\n        require(_initialized == false && _locked == false);\r\n        _;\r\n    }\r\n\r\n    modifier requireInitialised() {\r\n        require(_initialized == true && _locked == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployerAddress);\r\n        _;\r\n    }\r\n\r\n    event DebugApplicationRequiredChanges( uint8 indexed _current, uint8 indexed _required );\r\n    event EventApplicationEntityProcessor(uint8 indexed _current, uint8 indexed _required);\r\n\r\n    /*\r\n        We could create a generic method that iterates through all assets, and using assembly language get the return\r\n        value of the \"hasRequiredStateChanges\" method on each asset. Based on return, run doStateChanges on them or not.\r\n\r\n        Or we could be using a generic ABI contract that only defines the \"hasRequiredStateChanges\" and \"doStateChanges\"\r\n        methods thus not requiring any assembly variable / memory management\r\n\r\n        Problem with both cases is the fact that our application needs to change only specific asset states depending\r\n        on it's own current state, thus making a generic call wasteful in gas usage.\r\n\r\n        Let's stay away from that and follow the same approach as we do inside an asset.\r\n        - view method: -> get required state changes\r\n        - view method: -> has state changes\r\n        - processor that does the actual changes.\r\n        - doStateChanges recursive method that runs the processor if views require it to.\r\n\r\n        // pretty similar to FundingManager\r\n    */\r\n\r\n    function doStateChanges() public {\r\n\r\n        if(!_locked) {\r\n            // process assets first so we can initialize them from NEW to WAITING\r\n            AssetProcessor();\r\n\r\n            var (returnedCurrentEntityState, EntityStateRequired) = getRequiredStateChanges();\r\n            bool callAgain = false;\r\n\r\n            DebugApplicationRequiredChanges( returnedCurrentEntityState, EntityStateRequired );\r\n\r\n            if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\r\n                EntityProcessor(EntityStateRequired);\r\n                callAgain = true;\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function hasRequiredStateChanges() public view returns (bool) {\r\n        bool hasChanges = false;\r\n        if(!_locked) {\r\n            var (returnedCurrentEntityState, EntityStateRequired) = getRequiredStateChanges();\r\n            // suppress unused local variable warning\r\n            returnedCurrentEntityState = 0;\r\n            if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\r\n                hasChanges = true;\r\n            }\r\n\r\n            if(anyAssetHasChanges()) {\r\n                hasChanges = true;\r\n            }\r\n        }\r\n        return hasChanges;\r\n    }\r\n\r\n    function anyAssetHasChanges() public view returns (bool) {\r\n        if( FundingEntity.hasRequiredStateChanges() ) {\r\n            return true;\r\n        }\r\n        if( FundingManagerEntity.hasRequiredStateChanges() ) {\r\n            return true;\r\n        }\r\n        if( MilestonesEntity.hasRequiredStateChanges() ) {\r\n            return true;\r\n        }\r\n        if( ProposalsEntity.hasRequiredStateChanges() ) {\r\n            return true;\r\n        }\r\n\r\n        return extendedAnyAssetHasChanges();\r\n    }\r\n\r\n    // use this when extending \"has changes\"\r\n    function extendedAnyAssetHasChanges() internal view returns (bool) {\r\n        if(_initialized) {}\r\n        return false;\r\n    }\r\n\r\n    // use this when extending \"asset state processor\"\r\n    function extendedAssetProcessor() internal  {\r\n        // does not exist, but we check anyway to bypass compier warning about function state mutability\r\n        if ( CurrentEntityState == 255 ) {\r\n            ProposalsEntity.process();\r\n        }\r\n    }\r\n\r\n    // view methods decide if changes are to be made\r\n    // in case of tasks, we do them in the Processors.\r\n\r\n    function AssetProcessor() internal {\r\n\r\n\r\n        if ( CurrentEntityState == getEntityState(\"NEW\") ) {\r\n\r\n            // move all assets that have states to \"WAITING\"\r\n            if(FundingEntity.hasRequiredStateChanges()) {\r\n                FundingEntity.doStateChanges();\r\n            }\r\n\r\n            if(FundingManagerEntity.hasRequiredStateChanges()) {\r\n                FundingManagerEntity.doStateChanges();\r\n            }\r\n\r\n            if( MilestonesEntity.hasRequiredStateChanges() ) {\r\n                MilestonesEntity.doStateChanges();\r\n            }\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"WAITING\") ) {\r\n\r\n            if( FundingEntity.hasRequiredStateChanges() ) {\r\n                FundingEntity.doStateChanges();\r\n            }\r\n        }\r\n        else if ( CurrentEntityState == getEntityState(\"IN_FUNDING\") ) {\r\n\r\n            if( FundingEntity.hasRequiredStateChanges() ) {\r\n                FundingEntity.doStateChanges();\r\n            }\r\n\r\n            if( FundingManagerEntity.hasRequiredStateChanges() ) {\r\n                FundingManagerEntity.doStateChanges();\r\n            }\r\n        }\r\n        else if ( CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ) {\r\n\r\n            if( FundingManagerEntity.hasRequiredStateChanges() ) {\r\n                FundingManagerEntity.doStateChanges();\r\n            }\r\n\r\n            if(MilestonesEntity.hasRequiredStateChanges()) {\r\n                MilestonesEntity.doStateChanges();\r\n            }\r\n\r\n            if(ProposalsEntity.hasRequiredStateChanges()) {\r\n                ProposalsEntity.process();\r\n            }\r\n        }\r\n        else if ( CurrentEntityState == getEntityState(\"DEVELOPMENT_COMPLETE\") ) {\r\n\r\n            if(ProposalsEntity.hasRequiredStateChanges()) {\r\n                ProposalsEntity.process();\r\n            }\r\n        }\r\n\r\n        extendedAssetProcessor();\r\n    }\r\n\r\n    function EntityProcessor(uint8 EntityStateRequired) internal {\r\n\r\n        EventApplicationEntityProcessor( CurrentEntityState, EntityStateRequired );\r\n\r\n        // Update our Entity State\r\n        CurrentEntityState = EntityStateRequired;\r\n\r\n        // Do State Specific Updates\r\n\r\n        if ( EntityStateRequired == getEntityState(\"IN_FUNDING\") ) {\r\n            // run Funding state changer\r\n            // doStateChanges\r\n        }\r\n\r\n        // EntityStateRequired = getEntityState(\"IN_FUNDING\");\r\n\r\n\r\n        // Funding Failed\r\n        /*\r\n        if ( EntityStateRequired == getEntityState(\"FUNDING_FAILED_START\") ) {\r\n            // set ProcessVaultList Task\r\n            currentTask = getHash(\"FUNDING_FAILED_START\", \"\");\r\n            CurrentEntityState = getEntityState(\"FUNDING_FAILED_PROGRESS\");\r\n        } else if ( EntityStateRequired == getEntityState(\"FUNDING_FAILED_PROGRESS\") ) {\r\n            ProcessVaultList(VaultCountPerProcess);\r\n\r\n            // Funding Successful\r\n        } else if ( EntityStateRequired == getEntityState(\"FUNDING_SUCCESSFUL_START\") ) {\r\n\r\n            // init SCADA variable cache.\r\n            if(TokenSCADAEntity.initCacheForVariables()) {\r\n                // start processing vaults\r\n                currentTask = getHash(\"FUNDING_SUCCESSFUL_START\", \"\");\r\n                CurrentEntityState = getEntityState(\"FUNDING_SUCCESSFUL_PROGRESS\");\r\n            } else {\r\n                // something went really wrong, just bail out for now\r\n                CurrentEntityState = getEntityState(\"FUNDING_FAILED_START\");\r\n            }\r\n        } else if ( EntityStateRequired == getEntityState(\"FUNDING_SUCCESSFUL_PROGRESS\") ) {\r\n            ProcessVaultList(VaultCountPerProcess);\r\n            // Milestones\r\n        } else if ( EntityStateRequired == getEntityState(\"MILESTONE_PROCESS_START\") ) {\r\n            currentTask = getHash(\"MILESTONE_PROCESS_START\", getCurrentMilestoneId() );\r\n            CurrentEntityState = getEntityState(\"MILESTONE_PROCESS_PROGRESS\");\r\n        } else if ( EntityStateRequired == getEntityState(\"MILESTONE_PROCESS_PROGRESS\") ) {\r\n            ProcessVaultList(VaultCountPerProcess);\r\n\r\n            // Completion\r\n        } else if ( EntityStateRequired == getEntityState(\"COMPLETE_PROCESS_START\") ) {\r\n            currentTask = getHash(\"COMPLETE_PROCESS_START\", \"\");\r\n            CurrentEntityState = getEntityState(\"COMPLETE_PROCESS_PROGRESS\");\r\n        } else if ( EntityStateRequired == getEntityState(\"COMPLETE_PROCESS_PROGRESS\") ) {\r\n            ProcessVaultList(VaultCountPerProcess);\r\n        }\r\n        */\r\n    }\r\n\r\n    /*\r\n     * Method: Get Entity Required State Changes\r\n     *\r\n     * @access       public\r\n     * @type         method\r\n     *\r\n     * @return       ( uint8 CurrentEntityState, uint8 EntityStateRequired )\r\n     */\r\n    function getRequiredStateChanges() public view returns (uint8, uint8) {\r\n\r\n        uint8 EntityStateRequired = getEntityState(\"__IGNORED__\");\r\n\r\n        if( CurrentEntityState == getEntityState(\"NEW\") ) {\r\n            // general so we know we initialized\r\n            EntityStateRequired = getEntityState(\"WAITING\");\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"WAITING\") ) {\r\n\r\n            // Funding Started\r\n            if( FundingEntity.CurrentEntityState() == FundingEntity.getEntityState(\"IN_PROGRESS\") ) {\r\n                EntityStateRequired = getEntityState(\"IN_FUNDING\");\r\n            }\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"IN_FUNDING\") ) {\r\n\r\n            if(FundingEntity.CurrentEntityState() == FundingEntity.getEntityState(\"SUCCESSFUL_FINAL\")) {\r\n                // SUCCESSFUL_FINAL means FUNDING was successful, and FundingManager has finished distributing tokens and ether\r\n                EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\r\n\r\n            } else if(FundingEntity.CurrentEntityState() == FundingEntity.getEntityState(\"FAILED_FINAL\")) {\r\n                // Funding failed..\r\n                EntityStateRequired = getEntityState(\"IN_GLOBAL_CASHBACK\");\r\n            }\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ) {\r\n\r\n            // this is where most things happen\r\n            // milestones get developed\r\n            // code upgrades get initiated\r\n            // proposals get created and voted\r\n\r\n            /*\r\n            if(ProposalsEntity.CurrentEntityState() == ProposalsEntity.getEntityState(\"CODE_UPGRADE_ACCEPTED\")) {\r\n                // check if we have an upgrade proposal that is accepted and move into said state\r\n                EntityStateRequired = getEntityState(\"START_CODE_UPGRADE\");\r\n            }\r\n            else\r\n            */\r\n\r\n            if(MilestonesEntity.CurrentEntityState() == MilestonesEntity.getEntityState(\"DEVELOPMENT_COMPLETE\")) {\r\n                // check if we finished developing all milestones .. and if so move state to complete.\r\n                EntityStateRequired = getEntityState(\"DEVELOPMENT_COMPLETE\");\r\n            }\r\n\r\n            if(MilestonesEntity.CurrentEntityState() == MilestonesEntity.getEntityState(\"DEADLINE_MEETING_TIME_FAILED\")) {\r\n                EntityStateRequired = getEntityState(\"IN_GLOBAL_CASHBACK\");\r\n            }\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"START_CODE_UPGRADE\") ) {\r\n\r\n            // check stuff to move into IN_CODE_UPGRADE\r\n            // EntityStateRequired = getEntityState(\"IN_CODE_UPGRADE\");\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"IN_CODE_UPGRADE\") ) {\r\n\r\n            // check stuff to finish\r\n            // EntityStateRequired = getEntityState(\"FINISHED_CODE_UPGRADE\");\r\n\r\n        } else if ( CurrentEntityState == getEntityState(\"FINISHED_CODE_UPGRADE\") ) {\r\n\r\n            // move to IN_DEVELOPMENT or DEVELOPMENT_COMPLETE based on state before START_CODE_UPGRADE.\r\n            // EntityStateRequired = getEntityState(\"DEVELOPMENT_COMPLETE\");\r\n            // EntityStateRequired = getEntityState(\"FINISHED_CODE_UPGRADE\");\r\n\r\n        }\r\n\r\n        return (CurrentEntityState, EntityStateRequired);\r\n    }\r\n\r\n    function getTimestamp() view public returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_GatewayInterfaceAddress\",\"type\":\"address\"},{\"name\":\"_sourceCodeUrl\",\"type\":\"bytes32\"}],\"name\":\"linkToGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BountyManagerEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetMeetings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeAssetsToThisApplication\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MilestonesEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"transferAssetsToNewApplication\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ListingContractEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AssetCollectionNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"BylawsUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenManagerEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anyAssetHasChanges\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_sourceCodeUrl\",\"type\":\"bytes32\"}],\"name\":\"createCodeUpgradeProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"canInitiateCodeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAssetAddressByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FundingManagerEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"EntityStates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentEntityState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"acceptCodeUpgradeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequiredStateChanges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"BylawsBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ProposalsEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetBountyManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GatewayInterfaceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetNewsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBylawUint256\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FundingEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getBylawUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"AssetCollectionIdToName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MeetingsEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setUpgradeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetMilestones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetListingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getEntityState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setBylawBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddresses\",\"type\":\"address\"}],\"name\":\"addAssetFundingManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NewsContractEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getBylawBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"AssetCollection\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doStateChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasRequiredStateChanges\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"EventAppEntityReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sourceCodeUrl\",\"type\":\"bytes32\"}],\"name\":\"EventAppEntityCodeUpgradeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"EventAppEntityInitAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assetNum\",\"type\":\"uint8\"}],\"name\":\"EventAppEntityInitAssetsToThis\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"EventAppEntityAssetsToNewApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"EventAppEntityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_current\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_required\",\"type\":\"uint8\"}],\"name\":\"DebugApplicationRequiredChanges\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_current\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_required\",\"type\":\"uint8\"}],\"name\":\"EventApplicationEntityProcessor\",\"type\":\"event\"}]","ContractName":"ApplicationEntity","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d817e64af6b8957e9bbd4b19125be99bd840aec25bfa2feb8291c4428f98fa6"}]}