{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\ncontract AppCoins {\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function balanceOf (address _owner) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * The Advertisement contract collects campaigns registered by developers\r\n * and executes payments to users using campaign registered applications\r\n * after proof of Attention.\r\n */\r\ncontract Advertisement {\r\n\r\n\tstruct Filters {\r\n\t\tstring countries;\r\n\t\tstring packageName;\r\n\t\tuint[] vercodes;\r\n\t}\r\n\r\n\tstruct ValidationRules {\r\n\t\tbool vercode;\r\n\t\tbool ipValidation;\r\n\t\tbool country;\r\n\t\tuint constipDailyConversions;\r\n\t\tuint walletDailyConversions;\r\n\t}\r\n\r\n\tstruct Campaign {\r\n\t\tbytes32 bidId;\r\n\t\tuint price;\r\n\t\tuint budget;\r\n\t\tuint startDate;\r\n\t\tuint endDate;\r\n\t\tstring ipValidator;\r\n\t\tbool valid;\r\n\t\taddress  owner;\r\n\t\tFilters filters;\r\n\t}\r\n\r\n\tValidationRules public rules;\r\n\tbytes32[] bidIdList;\r\n\tmapping (bytes32 => Campaign) campaigns;\r\n\tmapping (bytes => bytes32[]) campaignsByCountry;\r\n\tAppCoins appc;\r\n\tbytes2[] countryList;\r\n    address public owner;\r\n\tmapping (address => mapping (bytes32 => bool)) userAttributions;\r\n\r\n\r\n\r\n\t// This notifies clients about a newly created campaign\r\n\tevent CampaignCreated(bytes32 bidId, string packageName,\r\n\t\t\t\t\t\t\tstring countries, uint[] vercodes,\r\n\t\t\t\t\t\t\tuint price, uint budget,\r\n\t\t\t\t\t\t\tuint startDate, uint endDate);\r\n\r\n\tevent PoARegistered(bytes32 bidId, string packageName,\r\n\t\t\t\t\t\tuint64[] timestampList,uint64[] nonceList,\r\n\t\t\t\t\t\tstring walletName);\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract with default validation rules\r\n    */\r\n    function Advertisement () public {\r\n        rules = ValidationRules(false, true, true, 2, 1);\r\n        owner = msg.sender;\r\n\tappc = AppCoins(0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db);\r\n    }\r\n\r\n\r\n\t/**\r\n\t* Creates a campaign for a certain package name with\r\n\t* a defined price and budget and emits a CampaignCreated event\r\n\t*/\r\n\tfunction createCampaign (string packageName, string countries,\r\n\t\t\t\t\t\t\tuint[] vercodes, uint price, uint budget,\r\n\t\t\t\t uint startDate, uint endDate) external {\r\n\t\tCampaign memory newCampaign;\r\n\t\tnewCampaign.filters.packageName = packageName;\r\n\t\tnewCampaign.filters.countries = countries;\r\n\t\tnewCampaign.filters.vercodes = vercodes;\r\n\t\tnewCampaign.price = price;\r\n\t\tnewCampaign.startDate = startDate;\r\n\t\tnewCampaign.endDate = endDate;\r\n\r\n\t\t//Transfers the budget to contract address\r\n        require(appc.allowance(msg.sender, address(this)) >= budget);\r\n\r\n        appc.transferFrom(msg.sender, address(this), budget);\r\n\r\n\t\tnewCampaign.budget = budget;\r\n\t\tnewCampaign.owner = msg.sender;\r\n\t\tnewCampaign.valid = true;\r\n\t\tnewCampaign.bidId = uintToBytes(bidIdList.length);\r\n\t\taddCampaign(newCampaign);\r\n\r\n\t\tCampaignCreated(\r\n\t\t\tnewCampaign.bidId,\r\n\t\t\tpackageName,\r\n\t\t\tcountries,\r\n\t\t\tvercodes,\r\n\t\t\tprice,\r\n\t\t\tbudget,\r\n\t\t\tstartDate,\r\n\t\t\tendDate);\r\n\r\n\t}\r\n\r\n\tfunction addCampaign(Campaign campaign) internal {\r\n\t\t//Add to bidIdList\r\n\t\tbidIdList.push(campaign.bidId);\r\n\t\t//Add to campaign map\r\n\t\tcampaigns[campaign.bidId] = campaign;\r\n\r\n\t\t//Assuming each country is represented in ISO country codes\r\n\t\tbytes memory country =  new bytes(2);\r\n\t\tbytes memory countriesInBytes = bytes(campaign.filters.countries);\r\n\t\tuint countryLength = 0;\r\n\r\n\t\tfor (uint i=0; i<countriesInBytes.length; i++){\r\n\r\n\t\t\t//if ',' is found, new country ahead\r\n\t\t\tif(countriesInBytes[i]==\",\" || i == countriesInBytes.length-1){\r\n\r\n\t\t\t\tif(i == countriesInBytes.length-1){\r\n\t\t\t\t\tcountry[countryLength]=countriesInBytes[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\taddCampaignToCountryMap(campaign,country);\r\n\r\n\t\t\t\tcountry =  new bytes(2);\r\n\t\t\t\tcountryLength = 0;\r\n\t\t\t} else {\r\n\t\t\t\tcountry[countryLength]=countriesInBytes[i];\r\n\t\t\t\tcountryLength++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction addCampaignToCountryMap (Campaign newCampaign,bytes country) internal {\r\n\t\t// Adds a country to countryList if the country is not in this list\r\n\t\tif (campaignsByCountry[country].length == 0){\r\n\t\t\tbytes2 countryCode;\r\n\t\t\tassembly {\r\n\t\t\t       countryCode := mload(add(country, 32))\r\n\t\t\t}\r\n\r\n\t\t\tcountryList.push(countryCode);\r\n\t\t}\r\n\r\n\t\t//Adds Campaign to campaignsByCountry map\r\n\t\tcampaignsByCountry[country].push(newCampaign.bidId);\r\n\r\n\t}\r\n\r\n\tfunction registerPoA (string packageName, bytes32 bidId,\r\n\t\t\t\t\t\tuint64[] timestampList, uint64[] nonces,\r\n\t\t\t\t\t\taddress appstore, address oem,\r\n\t\t\t      string walletName) external {\r\n\r\n\r\n         require (isCampaignValid(bidId));\r\n\t\trequire (timestampList.length == nonces.length);\r\n\t\t//Expect ordered array arranged in ascending order\r\n\t\tfor(uint i = 0; i < timestampList.length-1; i++){\r\n\t\t        uint timestamp_diff = (timestampList[i+1]-timestampList[i]);\r\n\t\t\trequire((timestamp_diff / 1000) == 10);\r\n\t\t}\r\n\r\n\t \t// verifyNonces(bytes(packageName),timestampList,nonces);\r\n\r\n\t\trequire(!userAttributions[msg.sender][bidId]);\r\n\t\t//atribute\r\n\t\tuserAttributions[msg.sender][bidId] = true;\r\n\r\n\t\tpayFromCampaign(bidId,appstore, oem);\r\n\r\n\t\tPoARegistered(bidId,packageName,timestampList,nonces, walletName);\r\n\t}\r\n\r\n\tfunction cancelCampaign (bytes32 bidId) external {\r\n\t\taddress campaignOwner = getOwnerOfCampaign(bidId);\r\n\r\n\t\t// Only contract owner or campaign owner can cancel a campaign\r\n\t\trequire (owner == msg.sender || campaignOwner == msg.sender);\r\n\t\tuint budget = getBudgetOfCampaign(bidId);\r\n\r\n\t\tappc.transfer(campaignOwner, budget);\r\n\r\n\t\tsetBudgetOfCampaign(bidId,0);\r\n\t\tsetCampaignValidity(bidId,false);\r\n\r\n\r\n\r\n\t}\r\n\r\n\tfunction setBudgetOfCampaign (bytes32 bidId, uint budget) internal {\r\n\t\tcampaigns[bidId].budget = budget;\r\n\t}\r\n\r\n\tfunction setCampaignValidity (bytes32 bidId, bool val) internal {\r\n\t\tcampaigns[bidId].valid = val;\r\n\t}\r\n\r\n\tfunction getCampaignValidity(bytes32 bidId) public view returns(bool){\r\n\t\treturn campaigns[bidId].valid;\r\n\t}\r\n\r\n\r\n\tfunction getCountryList () public view returns(bytes2[]) {\r\n\t\t\treturn countryList;\r\n\t}\r\n\r\n\tfunction getCampaignsByCountry(string country)\r\n\t\t\tpublic view returns (bytes32[]){\r\n\t\tbytes memory countryInBytes = bytes(country);\r\n\r\n\t\treturn campaignsByCountry[countryInBytes];\r\n\t}\r\n\r\n\r\n\tfunction getTotalCampaignsByCountry (string country)\r\n\t\t\tpublic view returns (uint){\r\n\t\tbytes memory countryInBytes = bytes(country);\r\n\r\n\t\treturn campaignsByCountry[countryInBytes].length;\r\n\t}\r\n\r\n\tfunction getPackageNameOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(string) {\r\n\r\n\t\treturn campaigns[bidId].filters.packageName;\r\n\t}\r\n\r\n\tfunction getCountriesOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(string){\r\n\r\n\t\treturn campaigns[bidId].filters.countries;\r\n\t}\r\n\r\n\tfunction getVercodesOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(uint[]) {\r\n\r\n\t\treturn campaigns[bidId].filters.vercodes;\r\n\t}\r\n\r\n\tfunction getPriceOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(uint) {\r\n\r\n\t\treturn campaigns[bidId].price;\r\n\t}\r\n\r\n\tfunction getStartDateOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(uint) {\r\n\r\n\t\treturn campaigns[bidId].startDate;\r\n\t}\r\n\r\n\tfunction getEndDateOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(uint) {\r\n\r\n\t\treturn campaigns[bidId].endDate;\r\n\t}\r\n\r\n\tfunction getBudgetOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(uint) {\r\n\r\n\t\treturn campaigns[bidId].budget;\r\n\t}\r\n\r\n\tfunction getOwnerOfCampaign (bytes32 bidId)\r\n\t\t\tpublic view returns(address) {\r\n\r\n\t\treturn campaigns[bidId].owner;\r\n\t}\r\n\r\n\tfunction getBidIdList ()\r\n\t\t\tpublic view returns(bytes32[]) {\r\n\t\treturn bidIdList;\r\n\t}\r\n\r\n    function isCampaignValid(bytes32 bidId) public view returns(bool) {\r\n        Campaign storage campaign = campaigns[bidId];\r\n        uint nowInMilliseconds = now * 1000;\r\n        return campaign.valid && campaign.startDate < nowInMilliseconds && campaign.endDate > nowInMilliseconds;\r\n\t}\r\n\r\n    function payFromCampaign (bytes32 bidId, address appstore, address oem)\r\n\t\t\tinternal{\r\n\t\tuint dev_share = 85;\r\n                uint appstore_share = 10;\r\n                uint oem_share = 5;\r\n\r\n\t\t//Search bid price\r\n\t\tCampaign storage campaign = campaigns[bidId];\r\n\r\n\t\trequire (campaign.budget > 0);\r\n\t\trequire (campaign.budget >= campaign.price);\r\n\r\n\t\t//transfer to user, appstore and oem\r\n\t\tappc.transfer(msg.sender, division(campaign.price * dev_share,100));\r\n\t\tappc.transfer(appstore, division(campaign.price * appstore_share,100));\r\n\t\tappc.transfer(oem, division(campaign.price * oem_share,100));\r\n\r\n\t\t//subtract from campaign\r\n\t\tcampaign.budget -= campaign.price;\r\n\t}\r\n\r\n    function verifyNonces (bytes packageName,uint64[] timestampList, uint64[] nonces) internal {\r\n\r\n\t\tfor(uint i = 0; i < nonces.length; i++){\r\n\t\t\tbytes8 timestamp = bytes8(timestampList[i]);\r\n\t\t\tbytes8 nonce = bytes8(nonces[i]);\r\n\t\t\tbytes memory byteList = new bytes(packageName.length + timestamp.length);\r\n\r\n\t\t\tfor(uint j = 0; j < packageName.length;j++){\r\n\t\t\t\tbyteList[j] = packageName[j];\r\n\t\t\t}\r\n\r\n\t\t\tfor(j = 0; j < timestamp.length; j++ ){\r\n\t\t\t\tbyteList[j + packageName.length] = timestamp[j];\r\n\t\t\t}\r\n\r\n\t\t\tbytes32 result = sha256(byteList);\r\n\r\n\t\t\tbytes memory noncePlusHash = new bytes(result.length + nonce.length);\r\n\r\n\t\t\tfor(j = 0; j < nonce.length; j++){\r\n\t\t\t\tnoncePlusHash[j] = nonce[j];\r\n\t\t\t}\r\n\r\n\t\t\tfor(j = 0; j < result.length; j++){\r\n\t\t\t\tnoncePlusHash[j + nonce.length] = result[j];\r\n\t\t\t}\r\n\r\n\t\t\tresult = sha256(noncePlusHash);\r\n\r\n\t\t\tbytes2[1] memory leadingBytes = [bytes2(0)];\r\n\t\t\tbytes2 comp = 0x0000;\r\n\r\n\t\t\tassembly{\r\n\t\t\t\tmstore(leadingBytes,result)\r\n\t\t\t}\r\n\r\n\t\t\trequire(comp == leadingBytes[0]);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction division(uint numerator, uint denominator) public constant returns (uint) {\r\n                uint _quotient = numerator / denominator;\r\n        return _quotient;\r\n    }\r\n\r\n\tfunction uintToBytes (uint256 i) constant returns(bytes32 b)  {\r\n\t\tb = bytes32(i);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCountryList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getEndDateOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"packageName\",\"type\":\"string\"},{\"name\":\"countries\",\"type\":\"string\"},{\"name\":\"vercodes\",\"type\":\"uint256[]\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"budget\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getPackageNameOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBidIdList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rules\",\"outputs\":[{\"name\":\"vercode\",\"type\":\"bool\"},{\"name\":\"ipValidation\",\"type\":\"bool\"},{\"name\":\"country\",\"type\":\"bool\"},{\"name\":\"constipDailyConversions\",\"type\":\"uint256\"},{\"name\":\"walletDailyConversions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getPriceOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getCampaignValidity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"packageName\",\"type\":\"string\"},{\"name\":\"bidId\",\"type\":\"bytes32\"},{\"name\":\"timestampList\",\"type\":\"uint64[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"appstore\",\"type\":\"address\"},{\"name\":\"oem\",\"type\":\"address\"},{\"name\":\"walletName\",\"type\":\"string\"}],\"name\":\"registerPoA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getVercodesOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"uintToBytes\",\"outputs\":[{\"name\":\"b\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"country\",\"type\":\"string\"}],\"name\":\"getCampaignsByCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getOwnerOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getCountriesOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"isCampaignValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"cancelCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"division\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getStartDateOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidId\",\"type\":\"bytes32\"}],\"name\":\"getBudgetOfCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"country\",\"type\":\"string\"}],\"name\":\"getTotalCampaignsByCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"packageName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"countries\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"vercodes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"packageName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestampList\",\"type\":\"uint64[]\"},{\"indexed\":false,\"name\":\"nonceList\",\"type\":\"uint64[]\"},{\"indexed\":false,\"name\":\"walletName\",\"type\":\"string\"}],\"name\":\"PoARegistered\",\"type\":\"event\"}]","ContractName":"Advertisement","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0afd1ea57238d704d1edf67aef834fdc7a46655a0786bf7b03936bb41647a5a"}]}