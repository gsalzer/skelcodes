{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by requiring a state.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted = false;\r\n\r\n  modifier inNormalState {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier inEmergencyState {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner inNormalState {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner inEmergencyState {\r\n    halted = false;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable\r\n *\r\n * @dev Standard ERC20 token\r\n */\r\ncontract Burnable is StandardToken {\r\n  using SafeMath for uint;\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed from, uint value);\r\n\r\n  function burn(uint _value) returns (bool success) {\r\n    require(_value > 0 && balances[msg.sender] >= _value);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint _value) returns (bool success) {\r\n    require(_from != 0x0 && _value > 0 && balances[_from] >= _value);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Burn(_from, _value);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    require(_to != 0x0); //use burn\r\n\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    require(_to != 0x0); //use burn\r\n\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n\r\ncontract ERC223ReceivingContract {\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\n/**\r\n * @title AnythingAppToken\r\n *\r\n * @dev Burnable Ownable ERC20 token\r\n */\r\ncontract AnythingAppToken is Burnable, Ownable {\r\n\r\n  string public constant name = \"AnythingApp Token\";\r\n  string public constant symbol = \"ANY\";\r\n  uint8 public constant decimals = 18;\r\n  uint public constant INITIAL_SUPPLY = 400000000 * 1 ether;\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n    require(released || transferAgents[_sender]);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been released */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function AnythingAppToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    require(addr != 0x0);\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  function release() onlyReleaseAgent inReleaseState(false) public {\r\n    released = true;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    require(addr != 0x0);\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n    // Call Burnable.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n\r\n  /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) canTransfer(msg.sender) returns (bool success) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[msg.sender]);\r\n      uint codeLength;\r\n      assembly {\r\n          codeLength := extcodesize(_to)\r\n      }\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      if(codeLength>0) {\r\n          ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n          receiver.tokenFallback(msg.sender, _value, _data);\r\n      }\r\n      Transfer(msg.sender, _to, _value, _data);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      uint codeLength;\r\n      bytes memory empty;\r\n\r\n      assembly {\r\n          codeLength := extcodesize(_to)\r\n      }\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      if(codeLength>0) {\r\n          ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n          receiver.tokenFallback(msg.sender, _value, empty);\r\n      }\r\n      Transfer(msg.sender, _to, _value, empty);\r\n      return true;\r\n    }\r\n\r\n  function burn(uint _value) onlyOwner returns (bool success) {\r\n    return super.burn(_value);\r\n  }\r\n\r\n  function burnFrom(address _from, uint _value) onlyOwner returns (bool success) {\r\n    return super.burnFrom(_from, _value);\r\n  }\r\n}\r\n\r\ncontract InvestorWhiteList is Ownable {\r\n  mapping (address => bool) public investorWhiteList;\r\n\r\n  mapping (address => address) public referralList;\r\n\r\n  function InvestorWhiteList() {\r\n\r\n  }\r\n\r\n  function addInvestorToWhiteList(address investor) external onlyOwner {\r\n    require(investor != 0x0 && !investorWhiteList[investor]);\r\n    investorWhiteList[investor] = true;\r\n  }\r\n\r\n  function removeInvestorFromWhiteList(address investor) external onlyOwner {\r\n    require(investor != 0x0 && investorWhiteList[investor]);\r\n    investorWhiteList[investor] = false;\r\n  }\r\n\r\n  //when new user will contribute ICO contract will automatically send bonus to referral\r\n  function addReferralOf(address investor, address referral) external onlyOwner {\r\n    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\r\n    referralList[investor] = referral;\r\n  }\r\n\r\n  function isAllowed(address investor) constant external returns (bool result) {\r\n    return investorWhiteList[investor];\r\n  }\r\n\r\n  function getReferralOf(address investor) constant external returns (address result) {\r\n    return referralList[investor];\r\n  }\r\n}\r\n\r\ncontract PriceReceiver {\r\n  address public ethPriceProvider;\r\n\r\n  modifier onlyEthPriceProvider() {\r\n    require(msg.sender == ethPriceProvider);\r\n    _;\r\n  }\r\n\r\n  function receiveEthPrice(uint ethUsdPrice) external;\r\n\r\n  function setEthPriceProvider(address provider) external;\r\n}\r\n\r\ncontract AnythingAppTokenPreSale is Haltable, PriceReceiver {\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = \"AnythingAppTokenPreSale\";\r\n\r\n  AnythingAppToken public token;\r\n  InvestorWhiteList public investorWhiteList;\r\n  address public beneficiary;\r\n\r\n  uint public tokenPriceUsd;\r\n  uint public totalTokens;//in wei\r\n\r\n  uint public ethUsdRate;\r\n\r\n  uint public collected = 0;\r\n  uint public withdrawn = 0;\r\n  uint public tokensSold = 0;\r\n  uint public investorCount = 0;\r\n  uint public weiRefunded = 0;\r\n\r\n  uint public startTime;\r\n  uint public endTime;\r\n\r\n  bool public crowdsaleFinished = false;\r\n\r\n  mapping (address => bool) public refunded;\r\n  mapping (address => uint) public deposited;\r\n\r\n  uint public constant BONUS_LEVEL_1 = 40;\r\n  uint public constant BONUS_LEVEL_2 = 35;\r\n  uint public constant BONUS_LEVEL_3 = 30;\r\n\r\n  uint public firstStage;\r\n  uint public secondStage;\r\n  uint public thirdStage;\r\n\r\n  uint public constant MINIMAL_PURCHASE = 250 ether;\r\n  uint public constant LIMIT_PER_USER = 500000 ether;\r\n\r\n  event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\r\n  event NewReferralTransfer(address indexed investor, address indexed referral, uint tokenAmount);\r\n  event Refunded(address indexed holder, uint amount);\r\n  event Deposited(address indexed holder, uint amount);\r\n\r\n  modifier preSaleActive() {\r\n    require(block.timestamp >= startTime && block.timestamp < endTime);\r\n    _;\r\n  }\r\n\r\n  modifier preSaleEnded() {\r\n    require(block.timestamp >= endTime);\r\n    _;\r\n  }\r\n\r\n  modifier inWhiteList() {\r\n    require(investorWhiteList.isAllowed(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function AnythingAppTokenPreSale(\r\n    address _token,\r\n    address _beneficiary,\r\n    address _investorWhiteList,\r\n\r\n    uint _totalTokens,\r\n    uint _tokenPriceUsd,\r\n\r\n    uint _baseEthUsdPrice,\r\n\r\n    uint _firstStage,\r\n    uint _secondStage,\r\n    uint _thirdStage,\r\n\r\n    uint _startTime,\r\n    uint _endTime\r\n  ) {\r\n    ethUsdRate = _baseEthUsdPrice;\r\n    tokenPriceUsd = _tokenPriceUsd;\r\n\r\n    totalTokens = _totalTokens.mul(1 ether);\r\n\r\n    token = AnythingAppToken(_token);\r\n    investorWhiteList = InvestorWhiteList(_investorWhiteList);\r\n    beneficiary = _beneficiary;\r\n\r\n    firstStage = _firstStage.mul(1 ether);\r\n    secondStage = _secondStage.mul(1 ether);\r\n    thirdStage = _thirdStage.mul(1 ether);\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n  }\r\n\r\n  function() payable inWhiteList {\r\n    doPurchase(msg.sender);\r\n  }\r\n\r\n  function tokenFallback(address _from, uint _value, bytes _data) public pure { }\r\n\r\n  function doPurchase(address _owner) private preSaleActive inNormalState {\r\n    if (token.balanceOf(msg.sender) == 0) investorCount++;\r\n\r\n    uint tokens = msg.value.mul(ethUsdRate).div(tokenPriceUsd);\r\n    address referral = investorWhiteList.getReferralOf(msg.sender);\r\n    uint referralBonus = calculateReferralBonus(tokens);\r\n    uint bonus = calculateBonus(tokens, referral);\r\n\r\n    tokens = tokens.add(bonus);\r\n\r\n    uint newTokensSold = tokensSold.add(tokens);\r\n    if (referralBonus > 0 && referral != 0x0) {\r\n      newTokensSold = newTokensSold.add(referralBonus);\r\n    }\r\n\r\n    require(newTokensSold <= totalTokens);\r\n    require(token.balanceOf(msg.sender).add(tokens) <= LIMIT_PER_USER);\r\n\r\n    tokensSold = newTokensSold;\r\n\r\n    collected = collected.add(msg.value);\r\n    deposited[msg.sender] = deposited[msg.sender].add(msg.value);\r\n\r\n    token.transfer(msg.sender, tokens);\r\n    NewContribution(_owner, tokens, msg.value);\r\n\r\n    if (referralBonus > 0 && referral != 0x0) {\r\n      token.transfer(referral, referralBonus);\r\n      NewReferralTransfer(msg.sender, referral, referralBonus);\r\n    }\r\n  }\r\n\r\n  function calculateBonus(uint _tokens, address _referral) private returns (uint _bonuses) {\r\n    uint bonus;\r\n\r\n    if (tokensSold < firstStage) {\r\n      bonus = BONUS_LEVEL_1;\r\n    } else if (tokensSold >= firstStage && tokensSold < secondStage) {\r\n      bonus = BONUS_LEVEL_2;\r\n    } else {\r\n      bonus = BONUS_LEVEL_3;\r\n    }\r\n\r\n    if (_referral != 0x0) {\r\n      bonus += 5;\r\n    }\r\n\r\n    return _tokens.mul(bonus).div(100);\r\n  }\r\n\r\n  function calculateReferralBonus(uint _tokens) internal constant returns (uint _bonus) {\r\n    return _tokens.mul(20).div(100);\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    uint withdrawLimit = 500 ether;\r\n    if (withdrawn < withdrawLimit) {\r\n      uint toWithdraw = collected.sub(withdrawn);\r\n      if (toWithdraw + withdrawn > withdrawLimit) {\r\n        toWithdraw = withdrawLimit.sub(withdrawn);\r\n      }\r\n      beneficiary.transfer(toWithdraw);\r\n      withdrawn = withdrawn.add(toWithdraw);\r\n      return;\r\n    }\r\n    require(block.timestamp >= endTime);\r\n    beneficiary.transfer(collected);\r\n    token.transfer(beneficiary, token.balanceOf(this));\r\n    crowdsaleFinished = true;\r\n  }\r\n\r\n  function refund() external preSaleEnded inNormalState {\r\n    require(refunded[msg.sender] == false);\r\n\r\n    uint refund = deposited[msg.sender];\r\n    require(refund > 0);\r\n\r\n    deposited[msg.sender] = 0;\r\n    refunded[msg.sender] = true;\r\n    weiRefunded = weiRefunded.add(refund);\r\n    msg.sender.transfer(refund);\r\n    Refunded(msg.sender, refund);\r\n  }\r\n\r\n  function receiveEthPrice(uint ethUsdPrice) external onlyEthPriceProvider {\r\n    require(ethUsdPrice > 0);\r\n    ethUsdRate = ethUsdPrice;\r\n  }\r\n\r\n  function setEthPriceProvider(address provider) external onlyOwner {\r\n    require(provider != 0x0);\r\n    ethPriceProvider = provider;\r\n  }\r\n\r\n  function setNewWhiteList(address newWhiteList) external onlyOwner {\r\n    require(newWhiteList != 0x0);\r\n    investorWhiteList = InvestorWhiteList(newWhiteList);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AnythingAppToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://77b156f72280f12ee063da241dec64d917e30e08884c4b0c5334ade4881ca168"}]}