{"status":"1","message":"OK","result":[{"SourceCode":"// File: vendors/strings.sol\r\n\r\n/*\r\n * @title String & slice utility library for Solidity contracts.\r\n * @author Nick Johnson <arachnid@notdot.net>\r\n *\r\n * @dev Functionality in this library is largely implemented using an\r\n *      abstraction called a 'slice'. A slice represents a part of a string -\r\n *      anything from the entire string to a single character, or even no\r\n *      characters at all (a 0-length slice). Since a slice only has to specify\r\n *      an offset and a length, copying and manipulating slices is a lot less\r\n *      expensive than copying and manipulating the strings they reference.\r\n *\r\n *      To further reduce gas costs, most functions on slice that need to return\r\n *      a slice modify the original one instead of allocating a new one; for\r\n *      instance, `s.split(\".\")` will return the text up to the first '.',\r\n *      modifying s to only contain the remainder of the string after the '.'.\r\n *      In situations where you do not want to modify the original slice, you\r\n *      can make a copy first with `.copy()`, for example:\r\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\r\n *      Solidity has no memory management, it will result in allocating many\r\n *      short-lived slices that are later discarded.\r\n *\r\n *      Functions that return two slices come in two versions: a non-allocating\r\n *      version that takes the second slice as an argument, modifying it in\r\n *      place, and an allocating version that allocates and returns the second\r\n *      slice; see `nextRune` for example.\r\n *\r\n *      Functions that have to copy string data will return strings rather than\r\n *      slices; these can be cast back to slices for further processing if\r\n *      required.\r\n *\r\n *      For convenience, some functions are provided with non-modifying\r\n *      variants that create a new slice and return both; for instance,\r\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\r\n *      corresponding to the left and right parts of the string.\r\n */\r\n\r\npragma solidity ^0.4.7;\r\n\r\nlibrary strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret += 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (self & 0xffffffffffffffff == 0) {\r\n            ret += 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (self & 0xffffffff == 0) {\r\n            ret += 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (self & 0xffff == 0) {\r\n            ret += 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (self & 0xff == 0) {\r\n            ret += 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-termintaed utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal returns (slice ret) {\r\n        // Allocate space for `self` in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as `self`.\r\n     */\r\n    function copy(slice self) internal returns (slice) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call `slice.empty()` if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice self) internal returns (uint) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        var ptr = self._ptr - 31;\r\n        var end = ptr + self._len;\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice self) internal returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a positive number if `other` comes lexicographically after\r\n     *      `self`, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice self, slice other) internal returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len < self._len)\r\n            shortest = other._len;\r\n\r\n        var selfptr = self._ptr;\r\n        var otherptr = other._ptr;\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                var diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice self, slice other) internal returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\r\n     *      slice to point to the next rune and returning `self`.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint len;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b < 0x80) {\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            len = 3;\r\n        } else {\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += len;\r\n        self._len -= len;\r\n        rune._len = len;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from `self`.\r\n     */\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice self) internal returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint len;\r\n        uint div = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        var b = word / div;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            len = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i < len; i++) {\r\n            div = div / 256;\r\n            b = (word / div) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice self) internal returns (bytes32 ret) {\r\n        assembly {\r\n            ret := sha3(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if `self` starts with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice ends with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` ends with `needle`, `needle` is removed from the\r\n     *      end of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function until(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // `needle` in `self`, or the address of `self` if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 69 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    ptr := add(selfptr, sub(selflen, needlelen))\r\n                    loop:\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := sub(ptr, 1)\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ptr := selfptr\r\n                    jump(exit)\r\n                    ret:\r\n                    ptr := add(ptr, needlelen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr + (selflen - needlelen);\r\n                while (ptr >= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr + needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function find(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain the part of the string from the start of\r\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\r\n     *      is not found, `self` is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function rfind(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and `token` to everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and returning everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` after the last occurrence of `delim`.\r\n     */\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            count++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns True if `self` contains `needle`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return True if `needle` is found in `self`, false otherwise.\r\n     */\r\n    function contains(slice self, slice needle) internal returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in `parts`,\r\n     *         joined with `self`.\r\n     */\r\n    function join(slice self, slice[] parts) internal returns (string) {\r\n        if (parts.length == 0)\r\n            return \"\";\r\n\r\n        uint len = self._len * (parts.length - 1);\r\n        for(uint i = 0; i < parts.length; i++)\r\n            len += parts[i]._len;\r\n\r\n        var ret = new string(len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(i = 0; i < parts.length; i++) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr += parts[i]._len;\r\n            if (i < parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr += self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayAccessControllerInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tAccessControllerInterface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayAccessControllerInterface {\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id) public;\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id, bool _access) public;\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr) public;\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr, bool _access) public;\r\n\r\n    function checkPermission(uint8 _perm, address _addr) public returns (bool _success);\r\n}\r\n\r\n// File: contracts/FlightDelayConstants.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tEvents and Constants\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayConstants {\r\n\r\n    /*\r\n    * General events\r\n    */\r\n\r\n// --> test-mode\r\n//        event LogUint(string _message, uint _uint);\r\n//        event LogUintEth(string _message, uint ethUint);\r\n//        event LogUintTime(string _message, uint timeUint);\r\n//        event LogInt(string _message, int _int);\r\n//        event LogAddress(string _message, address _address);\r\n//        event LogBytes32(string _message, bytes32 hexBytes32);\r\n//        event LogBytes(string _message, bytes hexBytes);\r\n//        event LogBytes32Str(string _message, bytes32 strBytes32);\r\n//        event LogString(string _message, string _string);\r\n//        event LogBool(string _message, bool _bool);\r\n//        event Log(address);\r\n// <-- test-mode\r\n\r\n    event LogPolicyApplied(\r\n        uint _policyId,\r\n        address _customer,\r\n        bytes32 strCarrierFlightNumber,\r\n        uint ethPremium\r\n    );\r\n    event LogPolicyAccepted(\r\n        uint _policyId,\r\n        uint _statistics0,\r\n        uint _statistics1,\r\n        uint _statistics2,\r\n        uint _statistics3,\r\n        uint _statistics4,\r\n        uint _statistics5\r\n    );\r\n    event LogPolicyPaidOut(\r\n        uint _policyId,\r\n        uint ethAmount\r\n    );\r\n    event LogPolicyExpired(\r\n        uint _policyId\r\n    );\r\n    event LogPolicyDeclined(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogPolicyManualPayout(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogSendFunds(\r\n        address _recipient,\r\n        uint8 _from,\r\n        uint ethAmount\r\n    );\r\n    event LogReceiveFunds(\r\n        address _sender,\r\n        uint8 _to,\r\n        uint ethAmount\r\n    );\r\n    event LogSendFail(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogOraclizeCall(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _oraclizeUrl,\r\n        uint256 _oraclizeTime\r\n    );\r\n    event LogOraclizeCallback(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _result,\r\n        bytes hexProof\r\n    );\r\n    event LogSetState(\r\n        uint _policyId,\r\n        uint8 _policyState,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    );\r\n    event LogExternal(\r\n        uint256 _policyId,\r\n        address _address,\r\n        bytes32 _externalId\r\n    );\r\n\r\n    /*\r\n    * General constants\r\n    */\r\n    // contracts release version\r\n    uint public constant MAJOR_VERSION = 1;\r\n    uint public constant MINOR_VERSION = 0;\r\n    uint public constant PATCH_VERSION = 2;\r\n\r\n    // minimum observations for valid prediction\r\n    uint constant MIN_OBSERVATIONS = 10;\r\n    // minimum premium to cover costs\r\n    uint constant MIN_PREMIUM = 50 finney;\r\n    // maximum premium\r\n    uint constant MAX_PREMIUM = 1 ether;\r\n    // maximum payout\r\n    uint constant MAX_PAYOUT = 1100 finney;\r\n\r\n    uint constant MIN_PREMIUM_EUR = 1500 wei;\r\n    uint constant MAX_PREMIUM_EUR = 29000 wei;\r\n    uint constant MAX_PAYOUT_EUR = 30000 wei;\r\n\r\n    uint constant MIN_PREMIUM_USD = 1700 wei;\r\n    uint constant MAX_PREMIUM_USD = 34000 wei;\r\n    uint constant MAX_PAYOUT_USD = 35000 wei;\r\n\r\n    uint constant MIN_PREMIUM_GBP = 1300 wei;\r\n    uint constant MAX_PREMIUM_GBP = 25000 wei;\r\n    uint constant MAX_PAYOUT_GBP = 270 wei;\r\n\r\n    // maximum cumulated weighted premium per risk\r\n    uint constant MAX_CUMULATED_WEIGHTED_PREMIUM = 60 ether;\r\n    // 1 percent for DAO, 1 percent for maintainer\r\n    uint8 constant REWARD_PERCENT = 2;\r\n    // reserve for tail risks\r\n    uint8 constant RESERVE_PERCENT = 1;\r\n    // the weight pattern; in future versions this may become part of the policy struct.\r\n    // currently can't be constant because of compiler restrictions\r\n    // WEIGHT_PATTERN[0] is not used, just to be consistent\r\n    uint8[6] WEIGHT_PATTERN = [\r\n        0,\r\n        0,\r\n        0,\r\n        30,\r\n        50,\r\n        50\r\n    ];\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    // minimum time before departure for applying\r\n    uint constant MIN_TIME_BEFORE_DEPARTURE\t= 24 hours; // for production\r\n    // check for delay after .. minutes after scheduled arrival\r\n    uint constant CHECK_PAYOUT_OFFSET = 15 minutes; // for production\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        // minimum time before departure for applying\r\n//        uint constant MIN_TIME_BEFORE_DEPARTURE = 1 seconds; // for testing\r\n//        // check for delay after .. minutes after scheduled arrival\r\n//        uint constant CHECK_PAYOUT_OFFSET = 1 seconds; // for testing\r\n// <-- test-mode\r\n\r\n    // maximum duration of flight\r\n    uint constant MAX_FLIGHT_DURATION = 2 days;\r\n    // Deadline for acceptance of policies: 31.12.2030 (Testnet)\r\n    uint constant CONTRACT_DEAD_LINE = 1922396399;\r\n\r\n    // gas Constants for oraclize\r\n    uint constant ORACLIZE_GAS = 700000;\r\n    uint constant ORACLIZE_GASPRICE = 4000000000;\r\n\r\n\r\n    /*\r\n    * URLs and query strings for oraclize\r\n    */\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    string constant ORACLIZE_RATINGS_BASE_URL =\r\n        // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n        \"[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/\";\r\n    string constant ORACLIZE_RATINGS_QUERY =\r\n        \"?${[decrypt] BCGB+KxK9Hi0+HSuAjqUImcDiycjuUNPi8ibBGo6KFP/m9gOK6xtJbyi5lbPxPfDypCywVtTwe13VZbu02337Lw0mhTFO0OkUltmxGxi2mWgDBwN+VZdiXjtStOwuNYnhj8hjm71ppPGCVKXExvl1z3qDXkSbMMYZNBG+JNVFP7/YWhSZCXW}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\";\r\n    string constant ORACLIZE_STATUS_BASE_URL =\r\n        // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n        \"[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n    string constant ORACLIZE_STATUS_QUERY =\r\n        // pattern:\r\n        \"?${[decrypt] BKc9+sMSvpu/p3qUjdu0QrHliQpNylhoQmHqL/8mQ/jKfsf7wdIiwwdMizp5u6LoP8rIvGhRfEcjK1SgotQDGFqws/5+9S9D5OXdEPXnkEsjQZJsyu8uhRRWg/0QSSP6LYP2ONUQc92QncGJbPCDxOcf3lGiNRrhznHfjFW7n+lwz4mVxN76}&utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        string constant ORACLIZE_RATINGS_BASE_URL =\r\n//            // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/ratings/rest/v1/json/flight/\";\r\n//        string constant ORACLIZE_RATINGS_QUERY =\r\n//            // for testrpc:\r\n//            \").ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\";\r\n//        string constant ORACLIZE_STATUS_BASE_URL =\r\n//            // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n//        string constant ORACLIZE_STATUS_QUERY =\r\n//            // for testrpc:\r\n//            \"?utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- test-mode\r\n}\r\n\r\n// File: contracts/FlightDelayControllerInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayControllerInterface {\r\n\r\n    function isOwner(address _addr) public returns (bool _isOwner);\r\n\r\n    function selfRegister(bytes32 _id) public returns (bool result);\r\n\r\n    function getContract(bytes32 _id) public returns (address _addr);\r\n}\r\n\r\n// File: contracts/FlightDelayDatabaseModel.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Database model\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayDatabaseModel {\r\n\r\n    // Ledger accounts.\r\n    enum Acc {\r\n        Premium,      // 0\r\n        RiskFund,     // 1\r\n        Payout,       // 2\r\n        Balance,      // 3\r\n        Reward,       // 4\r\n        OraclizeCosts // 5\r\n    }\r\n\r\n    // policy Status Codes and meaning:\r\n    //\r\n    // 00 = Applied:\t  the customer has payed a premium, but the oracle has\r\n    //\t\t\t\t\t        not yet checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 01 = Accepted:\t  the oracle has checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 02 = Revoked:\t  The customer has revoked the policy.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 03 = PaidOut:\t  The flight has ended with delay.\r\n    //\t\t\t\t\t        The oracle has checked and payed out.\r\n    // 04 = Expired:\t  The flight has endet with <15min. delay.\r\n    //\t\t\t\t\t        No payout.\r\n    // 05 = Declined:\t  The application was invalid.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 06 = SendFailed:\tDuring Revoke, Decline or Payout, sending ether failed\r\n    //\t\t\t\t\t        for unknown reasons.\r\n    //\t\t\t\t\t        The funds remain in the contracts RiskFund.\r\n\r\n\r\n    //                   00       01        02       03        04      05           06\r\n    enum policyState { Applied, Accepted, Revoked, PaidOut, Expired, Declined, SendFailed }\r\n\r\n    // oraclize callback types:\r\n    enum oraclizeState { ForUnderwriting, ForPayout }\r\n\r\n    //               00   01   02   03\r\n    enum Currency { ETH, EUR, USD, GBP }\r\n\r\n    // the policy structure: this structure keeps track of the individual parameters of a policy.\r\n    // typically customer address, premium and some status information.\r\n    struct Policy {\r\n        // 0 - the customer\r\n        address customer;\r\n\r\n        // 1 - premium\r\n        uint premium;\r\n        // risk specific parameters:\r\n        // 2 - pointer to the risk in the risks mapping\r\n        bytes32 riskId;\r\n        // custom payout pattern\r\n        // in future versions, customer will be able to tamper with this array.\r\n        // to keep things simple, we have decided to hard-code the array for all policies.\r\n        // uint8[5] pattern;\r\n        // 3 - probability weight. this is the central parameter\r\n        uint weight;\r\n        // 4 - calculated Payout\r\n        uint calculatedPayout;\r\n        // 5 - actual Payout\r\n        uint actualPayout;\r\n\r\n        // status fields:\r\n        // 6 - the state of the policy\r\n        policyState state;\r\n        // 7 - time of last state change\r\n        uint stateTime;\r\n        // 8 - state change message/reason\r\n        bytes32 stateMessage;\r\n        // 9 - TLSNotary Proof\r\n        bytes proof;\r\n        // 10 - Currency\r\n        Currency currency;\r\n        // 10 - External customer id\r\n        bytes32 customerExternalId;\r\n    }\r\n\r\n    // the risk structure; this structure keeps track of the risk-\r\n    // specific parameters.\r\n    // several policies can share the same risk structure (typically\r\n    // some people flying with the same plane)\r\n    struct Risk {\r\n        // 0 - Airline Code + FlightNumber\r\n        bytes32 carrierFlightNumber;\r\n        // 1 - scheduled departure and arrival time in the format /dep/YYYY/MM/DD\r\n        bytes32 departureYearMonthDay;\r\n        // 2 - the inital arrival time\r\n        uint arrivalTime;\r\n        // 3 - the final delay in minutes\r\n        uint delayInMinutes;\r\n        // 4 - the determined delay category (0-5)\r\n        uint8 delay;\r\n        // 5 - we limit the cumulated weighted premium to avoid cluster risks\r\n        uint cumulatedWeightedPremium;\r\n        // 6 - max cumulated Payout for this risk\r\n        uint premiumMultiplier;\r\n    }\r\n\r\n    // the oraclize callback structure: we use several oraclize calls.\r\n    // all oraclize calls will result in a common callback to __callback(...).\r\n    // to keep track of the different querys we have to introduce this struct.\r\n    struct OraclizeCallback {\r\n        // for which policy have we called?\r\n        uint policyId;\r\n        // for which purpose did we call? {ForUnderwrite | ForPayout}\r\n        oraclizeState oState;\r\n        // time\r\n        uint oraclizeTime;\r\n    }\r\n\r\n    struct Customer {\r\n        bytes32 customerExternalId;\r\n        bool identityConfirmed;\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayControlledContract.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Controlled contract Interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\ncontract FlightDelayControlledContract is FlightDelayDatabaseModel {\r\n\r\n    address public controller;\r\n    FlightDelayControllerInterface FD_CI;\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    function setController(address _controller) internal returns (bool _result) {\r\n        controller = _controller;\r\n        FD_CI = FlightDelayControllerInterface(_controller);\r\n        _result = true;\r\n    }\r\n\r\n    function destruct() public onlyController {\r\n        selfdestruct(controller);\r\n    }\r\n\r\n    function setContracts() public onlyController {}\r\n\r\n    function getContract(bytes32 _id) internal returns (address _addr) {\r\n        _addr = FD_CI.getContract(_id);\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayDatabaseInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Database contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract FlightDelayDatabaseInterface is FlightDelayDatabaseModel {\r\n\r\n    uint public MIN_DEPARTURE_LIM;\r\n\r\n    uint public MAX_DEPARTURE_LIM;\r\n\r\n    bytes32[] public validOrigins;\r\n\r\n    bytes32[] public validDestinations;\r\n\r\n    function countOrigins() public constant returns (uint256 _length);\r\n\r\n    function getOriginByIndex(uint256 _i) public constant returns (bytes32 _origin);\r\n\r\n    function countDestinations() public constant returns (uint256 _length);\r\n\r\n    function getDestinationByIndex(uint256 _i) public constant returns (bytes32 _destination);\r\n\r\n    function setAccessControl(address _contract, address _caller, uint8 _perm) public;\r\n\r\n    function setAccessControl(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) public;\r\n\r\n    function getAccessControl(address _contract, address _caller, uint8 _perm) public returns (bool _allowed) ;\r\n\r\n    function setLedger(uint8 _index, int _value) public;\r\n\r\n    function getLedger(uint8 _index) public returns (int _value) ;\r\n\r\n    function getCustomerPremium(uint _policyId) public returns (address _customer, uint _premium) ;\r\n\r\n    function getPolicyData(uint _policyId) public returns (address _customer, uint _weight, uint _premium);\r\n\r\n    function getPolicyState(uint _policyId) public returns (policyState _state) ;\r\n\r\n    function getRiskId(uint _policyId) public returns (bytes32 _riskId);\r\n\r\n    function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) public returns (uint _policyId) ;\r\n\r\n    function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) public;\r\n\r\n    function setWeight(uint _policyId, uint _weight, bytes _proof) public;\r\n\r\n    function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) public;\r\n\r\n    function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) public;\r\n\r\n    function getRiskParameters(bytes32 _riskId)\r\n        public returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) ;\r\n\r\n    function getPremiumFactors(bytes32 _riskId)\r\n        public returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier);\r\n\r\n    function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)\r\n        public returns (bytes32 _riskId);\r\n\r\n    function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) public;\r\n\r\n    function getOraclizeCallback(bytes32 _queryId)\r\n        public returns (uint _policyId, uint _oraclizeTime) ;\r\n\r\n    function getOraclizePolicyId(bytes32 _queryId)\r\n        public returns (uint _policyId) ;\r\n\r\n    function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime\r\n    ) public;\r\n\r\n    function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset)\r\n        public returns (bool _result) ;\r\n}\r\n\r\n// File: contracts/FlightDelayLedgerInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tLedger contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract FlightDelayLedgerInterface is FlightDelayDatabaseModel {\r\n\r\n    function receiveFunds(Acc _to) public payable;\r\n\r\n    function sendFunds(address _recipient, Acc _from, uint _amount) public returns (bool _success);\r\n\r\n    function bookkeeping(Acc _from, Acc _to, uint amount) public;\r\n}\r\n\r\n// File: vendors/usingOraclize.sol\r\n\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.0;//please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\r\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\r\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n    function setConfig(bytes32 _config);\r\n    function setCustomGasPrice(uint _gasPrice);\r\n    function randomDS_getSessionPubKeyHash() returns(bytes32);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofType_Android = 0x20;\r\n    byte constant proofType_Ledger = 0x30;\r\n    byte constant proofType_Native = 0xF0;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n\r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n            oraclize_setNetworkName(\"eth_mainnet\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n            oraclize_setNetworkName(\"eth_ropsten3\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\r\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\r\n            oraclize_setNetworkName(\"eth_kovan\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\r\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\r\n            oraclize_setNetworkName(\"eth_rinkeby\");\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\r\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n\r\n    function oraclize_useCoupon(string code) oraclizeAPI internal {\r\n        oraclize.useCoupon(code);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = stra2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        string[] memory dynargs = new string[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(0, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        bytes memory args = ba2cbor(argN);\r\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](1);\r\n        dynargs[0] = args[0];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](2);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](3);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](4);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\r\n        bytes[] memory dynargs = new bytes[](5);\r\n        dynargs[0] = args[0];\r\n        dynargs[1] = args[1];\r\n        dynargs[2] = args[2];\r\n        dynargs[3] = args[3];\r\n        dynargs[4] = args[4];\r\n        return oraclize_query(datasource, dynargs, gaslimit);\r\n    }\r\n\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\r\n        return oraclize.randomDS_getSessionPubKeyHash();\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int) {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;\r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }\r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n\r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function stra2cbor(string[] arr) internal returns (bytes) {\r\n            uint arrlen = arr.length;\r\n\r\n            // get correct cbor output length\r\n            uint outputlen = 0;\r\n            bytes[] memory elemArray = new bytes[](arrlen);\r\n            for (uint i = 0; i < arrlen; i++) {\r\n                elemArray[i] = (bytes(arr[i]));\r\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\r\n            }\r\n            uint ctr = 0;\r\n            uint cborlen = arrlen + 0x80;\r\n            outputlen += byte(cborlen).length;\r\n            bytes memory res = new bytes(outputlen);\r\n\r\n            while (byte(cborlen).length > ctr) {\r\n                res[ctr] = byte(cborlen)[ctr];\r\n                ctr++;\r\n            }\r\n            for (i = 0; i < arrlen; i++) {\r\n                res[ctr] = 0x5F;\r\n                ctr++;\r\n                for (uint x = 0; x < elemArray[i].length; x++) {\r\n                    // if there's a bug with larger strings, this may be the culprit\r\n                    if (x % 23 == 0) {\r\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\r\n                        elemcborlen += 0x40;\r\n                        uint lctr = ctr;\r\n                        while (byte(elemcborlen).length > ctr - lctr) {\r\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\r\n                            ctr++;\r\n                        }\r\n                    }\r\n                    res[ctr] = elemArray[i][x];\r\n                    ctr++;\r\n                }\r\n                res[ctr] = 0xFF;\r\n                ctr++;\r\n            }\r\n            return res;\r\n        }\r\n\r\n    function ba2cbor(bytes[] arr) internal returns (bytes) {\r\n            uint arrlen = arr.length;\r\n\r\n            // get correct cbor output length\r\n            uint outputlen = 0;\r\n            bytes[] memory elemArray = new bytes[](arrlen);\r\n            for (uint i = 0; i < arrlen; i++) {\r\n                elemArray[i] = (bytes(arr[i]));\r\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\r\n            }\r\n            uint ctr = 0;\r\n            uint cborlen = arrlen + 0x80;\r\n            outputlen += byte(cborlen).length;\r\n            bytes memory res = new bytes(outputlen);\r\n\r\n            while (byte(cborlen).length > ctr) {\r\n                res[ctr] = byte(cborlen)[ctr];\r\n                ctr++;\r\n            }\r\n            for (i = 0; i < arrlen; i++) {\r\n                res[ctr] = 0x5F;\r\n                ctr++;\r\n                for (uint x = 0; x < elemArray[i].length; x++) {\r\n                    // if there's a bug with larger strings, this may be the culprit\r\n                    if (x % 23 == 0) {\r\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\r\n                        elemcborlen += 0x40;\r\n                        uint lctr = ctr;\r\n                        while (byte(elemcborlen).length > ctr - lctr) {\r\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\r\n                            ctr++;\r\n                        }\r\n                    }\r\n                    res[ctr] = elemArray[i][x];\r\n                    ctr++;\r\n                }\r\n                res[ctr] = 0xFF;\r\n                ctr++;\r\n            }\r\n            return res;\r\n        }\r\n\r\n\r\n    string oraclize_network_name;\r\n    function oraclize_setNetworkName(string _network_name) internal {\r\n        oraclize_network_name = _network_name;\r\n    }\r\n\r\n    function oraclize_getNetworkName() internal returns (string) {\r\n        return oraclize_network_name;\r\n    }\r\n\r\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\r\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\r\n        bytes memory nbytes = new bytes(1);\r\n        nbytes[0] = byte(_nbytes);\r\n        bytes memory unonce = new bytes(32);\r\n        bytes memory sessionKeyHash = new bytes(32);\r\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\r\n        assembly {\r\n            mstore(unonce, 0x20)\r\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\r\n            mstore(sessionKeyHash, 0x20)\r\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\r\n        }\r\n        bytes[3] memory args = [unonce, nbytes, sessionKeyHash];\r\n        bytes32 queryId = oraclize_query(_delay, \"random\", args, _customGasLimit);\r\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n        return queryId;\r\n    }\r\n\r\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\r\n        oraclize_randomDS_args[queryId] = commitment;\r\n    }\r\n\r\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\r\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\r\n\r\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\r\n        bool sigok;\r\n        address signer;\r\n\r\n        bytes32 sigr;\r\n        bytes32 sigs;\r\n\r\n        bytes memory sigr_ = new bytes(32);\r\n        uint offset = 4+(uint(dersig[3]) - 0x20);\r\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\r\n        bytes memory sigs_ = new bytes(32);\r\n        offset += 32 + 2;\r\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\r\n\r\n        assembly {\r\n            sigr := mload(add(sigr_, 32))\r\n            sigs := mload(add(sigs_, 32))\r\n        }\r\n\r\n\r\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\r\n        if (address(sha3(pubkey)) == signer) return true;\r\n        else {\r\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\r\n            return (address(sha3(pubkey)) == signer);\r\n        }\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\r\n        bool sigok;\r\n\r\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\r\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\r\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\r\n\r\n        bytes memory appkey1_pubkey = new bytes(64);\r\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\r\n\r\n        bytes memory tosign2 = new bytes(1+65+32);\r\n        tosign2[0] = 1; //role\r\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\r\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\r\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\r\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\r\n\r\n        if (sigok == false) return false;\r\n\r\n\r\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\r\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\r\n\r\n        bytes memory tosign3 = new bytes(1+65);\r\n        tosign3[0] = 0xFE;\r\n        copyBytes(proof, 3, 65, tosign3, 1);\r\n\r\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\r\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\r\n\r\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\r\n\r\n        return sigok;\r\n    }\r\n\r\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) throw;\r\n\r\n        _;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\r\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\r\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\r\n\r\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\r\n        if (proofVerified == false) return 2;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function matchBytes32Prefix(bytes32 content, bytes prefix) internal returns (bool){\r\n        bool match_ = true;\r\n\r\n        for (var i=0; i<prefix.length; i++){\r\n            if (content[i] != prefix[i]) match_ = false;\r\n        }\r\n\r\n        return match_;\r\n    }\r\n\r\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\r\n        bool checkok;\r\n\r\n\r\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\r\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\r\n        bytes memory keyhash = new bytes(32);\r\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\r\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n        if (checkok == false) return false;\r\n\r\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\r\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\r\n\r\n\r\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\r\n        checkok = matchBytes32Prefix(sha256(sig1), result);\r\n        if (checkok == false) return false;\r\n\r\n\r\n        // Step 4: commitment match verification, sha3(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\r\n        // This is to verify that the computed args match with the ones specified in the query.\r\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\r\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\r\n\r\n        bytes memory sessionPubkey = new bytes(64);\r\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\r\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\r\n\r\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\r\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n            delete oraclize_randomDS_args[queryId];\r\n        } else return false;\r\n\r\n\r\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\r\n        bytes memory tosign1 = new bytes(32+8+1+32);\r\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\r\n        checkok = verifySig(sha256(tosign1), sig1, sessionPubkey);\r\n        if (checkok == false) return false;\r\n\r\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\r\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\r\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\r\n        }\r\n\r\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\r\n    }\r\n\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {\r\n        uint minLength = length + toOffset;\r\n\r\n        if (to.length < minLength) {\r\n            // Buffer too small\r\n            throw; // Should be a better way?\r\n        }\r\n\r\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\r\n        uint i = 32 + fromOffset;\r\n        uint j = 32 + toOffset;\r\n\r\n        while (i < (32 + fromOffset + length)) {\r\n            assembly {\r\n                let tmp := mload(add(from, i))\r\n                mstore(add(to, j), tmp)\r\n            }\r\n            i += 32;\r\n            j += 32;\r\n        }\r\n\r\n        return to;\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\r\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\r\n        // We do our own memory management here. Solidity uses memory offset\r\n        // 0x40 to store the current end of memory. We write past it (as\r\n        // writes are memory extensions), but don't update the offset so\r\n        // Solidity will reuse it. The memory used here is only needed for\r\n        // this context.\r\n\r\n        // FIXME: inline assembly can't access return values\r\n        bool ret;\r\n        address addr;\r\n\r\n        assembly {\r\n            let size := mload(0x40)\r\n            mstore(size, hash)\r\n            mstore(add(size, 32), v)\r\n            mstore(add(size, 64), r)\r\n            mstore(add(size, 96), s)\r\n\r\n            // NOTE: we can reuse the request memory because we deal with\r\n            //       the return code\r\n            ret := call(3000, 1, 0, size, 128, size, 32)\r\n            addr := mload(size)\r\n        }\r\n\r\n        return (ret, addr);\r\n    }\r\n\r\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\r\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (sig.length != 65)\r\n          return (false, 0);\r\n\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n\r\n            // Here we are loading the last 32 bytes. We exploit the fact that\r\n            // 'mload' will pad with zeroes if we overread.\r\n            // There is no 'mload8' to do this, but that would be nicer.\r\n            v := byte(0, mload(add(sig, 96)))\r\n\r\n            // Alternative solution:\r\n            // 'byte' is not working due to the Solidity parser, so lets\r\n            // use the second best option, 'and'\r\n            // v := and(mload(add(sig, 65)), 255)\r\n        }\r\n\r\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\r\n        // to match the YP range of [27, 28]\r\n        //\r\n        // geth uses [0, 1] and some clients have followed. This might change, see:\r\n        //  https://github.com/ethereum/go-ethereum/issues/2053\r\n        if (v < 27)\r\n          v += 27;\r\n\r\n        if (v != 27 && v != 28)\r\n            return (false, 0);\r\n\r\n        return safer_ecrecover(hash, v, r, s);\r\n    }\r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\n// File: contracts/FlightDelayOraclizeInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tOcaclize API interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract FlightDelayOraclizeInterface is usingOraclize {\r\n\r\n    modifier onlyOraclizeOr (address _emergency) {\r\n// --> prod-mode\r\n        require(msg.sender == oraclize_cbAddress() || msg.sender == _emergency);\r\n// <-- prod-mode\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayPayoutInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tPayout contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayPayoutInterface {\r\n\r\n    function schedulePayoutOraclizeCall(uint _policyId, bytes32 _riskId, uint _offset) public;\r\n}\r\n\r\n// File: contracts/convertLib.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tConversions\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract ConvertLib {\r\n\r\n    // .. since beginning of the year\r\n    uint16[12] days_since = [\r\n        11,\r\n        42,\r\n        70,\r\n        101,\r\n        131,\r\n        162,\r\n        192,\r\n        223,\r\n        254,\r\n        284,\r\n        315,\r\n        345\r\n    ];\r\n\r\n    function b32toString(bytes32 x) internal returns (string) {\r\n        // gas usage: about 1K gas per char.\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    function b32toHexString(bytes32 x) returns (string) {\r\n        bytes memory b = new bytes(64);\r\n        for (uint i = 0; i < 32; i++) {\r\n            uint8 by = uint8(uint(x) / (2**(8*(31 - i))));\r\n            uint8 high = by/16;\r\n            uint8 low = by - 16*high;\r\n            if (high > 9) {\r\n                high += 39;\r\n            }\r\n            if (low > 9) {\r\n                low += 39;\r\n            }\r\n            b[2*i] = byte(high+48);\r\n            b[2*i+1] = byte(low+48);\r\n        }\r\n\r\n        return string(b);\r\n    }\r\n\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i<bresult.length; i++) {\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) {\r\n                        break;\r\n                    } else {\r\n                        _b--;\r\n                    }\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) {\r\n                decimals = true;\r\n            }\r\n        }\r\n        if (_b > 0) {\r\n            mint *= 10**_b;\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    // the following function yields correct results in the time between 1.3.2016 and 28.02.2020,\r\n    // so within the validity of the contract its correct.\r\n    function toUnixtime(bytes32 _dayMonthYear) constant returns (uint unixtime) {\r\n        // _day_month_year = /dep/2016/09/10\r\n        bytes memory bDmy = bytes(b32toString(_dayMonthYear));\r\n        bytes memory temp2 = bytes(new string(2));\r\n        bytes memory temp4 = bytes(new string(4));\r\n\r\n        temp4[0] = bDmy[5];\r\n        temp4[1] = bDmy[6];\r\n        temp4[2] = bDmy[7];\r\n        temp4[3] = bDmy[8];\r\n        uint year = parseInt(string(temp4));\r\n\r\n        temp2[0] = bDmy[10];\r\n        temp2[1] = bDmy[11];\r\n        uint month = parseInt(string(temp2));\r\n\r\n        temp2[0] = bDmy[13];\r\n        temp2[1] = bDmy[14];\r\n        uint day = parseInt(string(temp2));\r\n\r\n        unixtime = ((year - 1970) * 365 + days_since[month-1] + day) * 86400;\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayPayout.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tPayout contract\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FlightDelayPayout is FlightDelayControlledContract, FlightDelayConstants, FlightDelayOraclizeInterface, ConvertLib {\r\n\r\n    using strings for *;\r\n\r\n    FlightDelayDatabaseInterface FD_DB;\r\n    FlightDelayLedgerInterface FD_LG;\r\n    FlightDelayAccessControllerInterface FD_AC;\r\n\r\n    /*\r\n     * @dev Contract constructor sets its controller\r\n     * @param _controller FD.Controller\r\n     */\r\n    function FlightDelayPayout(address _controller) public {\r\n        setController(_controller);\r\n        oraclize_setCustomGasPrice(ORACLIZE_GASPRICE);\r\n    }\r\n\r\n    /*\r\n     * Public methods\r\n     */\r\n\r\n    /*\r\n     * @dev Set access permissions for methods\r\n     */\r\n    function setContracts() public onlyController {\r\n        FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"));\r\n        FD_DB = FlightDelayDatabaseInterface(getContract(\"FD.Database\"));\r\n        FD_LG = FlightDelayLedgerInterface(getContract(\"FD.Ledger\"));\r\n\r\n        FD_AC.setPermissionById(101, \"FD.Underwrite\");\r\n        FD_AC.setPermissionByAddress(101, oraclize_cbAddress());\r\n        FD_AC.setPermissionById(102, \"FD.Funder\");\r\n        FD_AC.setPermissionById(103, \"FD.Owner\");\r\n    }\r\n\r\n    /*\r\n     * @dev Fund contract\r\n     */\r\n    function () public payable {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        // todo: bookkeeping\r\n        // todo: fire funding event\r\n    }\r\n\r\n    /*\r\n     * @dev Schedule oraclize call for payout\r\n     * @param _policyId\r\n     * @param _riskId\r\n     * @param _oraclizeTime\r\n     */\r\n    function schedulePayoutOraclizeCall(uint _policyId, bytes32 _riskId, uint _oraclizeTime) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        var (carrierFlightNumber, departureYearMonthDay,) = FD_DB.getRiskParameters(_riskId);\r\n\r\n        string memory oraclizeUrl = strConcat(\r\n            ORACLIZE_STATUS_BASE_URL,\r\n            b32toString(carrierFlightNumber),\r\n            b32toString(departureYearMonthDay),\r\n            ORACLIZE_STATUS_QUERY\r\n        );\r\n\r\n        bytes32 queryId = oraclize_query(\r\n            _oraclizeTime,\r\n            \"nested\",\r\n            oraclizeUrl,\r\n            ORACLIZE_GAS\r\n        );\r\n\r\n        FD_DB.createOraclizeCallback(\r\n            queryId,\r\n            _policyId,\r\n            oraclizeState.ForPayout,\r\n            _oraclizeTime\r\n        );\r\n\r\n        LogOraclizeCall(_policyId, queryId, oraclizeUrl, _oraclizeTime);\r\n    }\r\n\r\n    /*\r\n     * @dev Oraclize callback. In an emergency case, we can call this directly from FD.Emergency Account.\r\n     * @param _queryId\r\n     * @param _result\r\n     * @param _proof\r\n     */\r\n    function __callback(bytes32 _queryId, string _result, bytes _proof) public onlyOraclizeOr(getContract('FD.Emergency')) {\r\n\r\n        var (policyId, oraclizeTime) = FD_DB.getOraclizeCallback(_queryId);\r\n        LogOraclizeCallback(policyId, _queryId, _result, _proof);\r\n\r\n        // check if policy was declined after this callback was scheduled\r\n        var state = FD_DB.getPolicyState(policyId);\r\n        require(uint8(state) != 5);\r\n\r\n        bytes32 riskId = FD_DB.getRiskId(policyId);\r\n\r\n// --> debug-mode\r\n//            LogBytes32(\"riskId\", riskId);\r\n// <-- debug-mode\r\n\r\n        var slResult = _result.toSlice();\r\n\r\n        if (bytes(_result).length == 0) { // empty Result\r\n            if (FD_DB.checkTime(_queryId, riskId, 180 minutes)) {\r\n                LogPolicyManualPayout(policyId, \"No Callback at +120 min\");\r\n                return;\r\n            } else {\r\n                schedulePayoutOraclizeCall(policyId, riskId, oraclizeTime + 45 minutes);\r\n            }\r\n        } else {\r\n            // first check status\r\n            // extract the status field:\r\n            slResult.find(\"\\\"\".toSlice()).beyond(\"\\\"\".toSlice());\r\n            slResult.until(slResult.copy().find(\"\\\"\".toSlice()));\r\n            bytes1 status = bytes(slResult.toString())[0];\t// s = L\r\n            if (status == \"C\") {\r\n                // flight cancelled --> payout\r\n                payOut(policyId, 4, 0);\r\n                return;\r\n            } else if (status == \"D\") {\r\n                // flight diverted --> payout\r\n                payOut(policyId, 5, 0);\r\n                return;\r\n            } else if (status != \"L\" && status != \"A\" && status != \"C\" && status != \"D\") {\r\n                LogPolicyManualPayout(policyId, \"Unprocessable status\");\r\n                return;\r\n            }\r\n\r\n            // process the rest of the response:\r\n            slResult = _result.toSlice();\r\n            bool arrived = slResult.contains(\"actualGateArrival\".toSlice());\r\n\r\n            if (status == \"A\" || (status == \"L\" && !arrived)) {\r\n                // flight still active or not at gate --> reschedule\r\n                if (FD_DB.checkTime(_queryId, riskId, 180 minutes)) {\r\n                    LogPolicyManualPayout(policyId, \"No arrival at +180 min\");\r\n                } else {\r\n                    schedulePayoutOraclizeCall(policyId, riskId, oraclizeTime + 45 minutes);\r\n                }\r\n            } else if (status == \"L\" && arrived) {\r\n                var aG = \"\\\"arrivalGateDelayMinutes\\\": \".toSlice();\r\n                if (slResult.contains(aG)) {\r\n                    slResult.find(aG).beyond(aG);\r\n                    slResult.until(slResult.copy().find(\"\\\"\".toSlice()).beyond(\"\\\"\".toSlice()));\r\n                    // truffle bug, replace by \"}\" as soon as it is fixed.\r\n                    slResult.until(slResult.copy().find(\"\\x7D\".toSlice()));\r\n                    slResult.until(slResult.copy().find(\",\".toSlice()));\r\n                    uint delayInMinutes = parseInt(slResult.toString());\r\n                } else {\r\n                    delayInMinutes = 0;\r\n                }\r\n\r\n                if (delayInMinutes < 15) {\r\n                    payOut(policyId, 0, 0);\r\n                } else if (delayInMinutes < 30) {\r\n                    payOut(policyId, 1, delayInMinutes);\r\n                } else if (delayInMinutes < 45) {\r\n                    payOut(policyId, 2, delayInMinutes);\r\n                } else {\r\n                    payOut(policyId, 3, delayInMinutes);\r\n                }\r\n            } else { // no delay info\r\n                payOut(policyId, 0, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal methods\r\n     */\r\n\r\n    /*\r\n     * @dev Payout\r\n     * @param _policyId\r\n     * @param _delay\r\n     * @param _delayInMinutes\r\n     */\r\n    function payOut(uint _policyId, uint8 _delay, uint _delayInMinutes)\tinternal {\r\n// --> debug-mode\r\n//            LogString(\"im payOut\", \"\");\r\n//            LogUint(\"policyId\", _policyId);\r\n//            LogUint(\"delay\", _delay);\r\n//            LogUint(\"in minutes\", _delayInMinutes);\r\n// <-- debug-mode\r\n\r\n        FD_DB.setDelay(_policyId, _delay, _delayInMinutes);\r\n\r\n        if (_delay == 0 || WEIGHT_PATTERN[_delay] == 0) {\r\n            FD_DB.setState(\r\n                _policyId,\r\n                policyState.Expired,\r\n                now,\r\n                \"Expired - no delay!\"\r\n            );\r\n        } else {\r\n            var (customer, weight, premium) = FD_DB.getPolicyData(_policyId);\r\n\r\n// --> debug-mode\r\n//                LogUint(\"weight\", weight);\r\n// <-- debug-mode\r\n\r\n            if (weight == 0) {\r\n                weight = 20000;\r\n            }\r\n\r\n            uint payout = premium * WEIGHT_PATTERN[_delay] * 10000 / weight;\r\n            uint calculatedPayout = payout;\r\n\r\n            if (payout > MAX_PAYOUT) {\r\n                payout = MAX_PAYOUT;\r\n            }\r\n\r\n            FD_DB.setPayouts(_policyId, calculatedPayout, payout);\r\n\r\n            if (!FD_LG.sendFunds(customer, Acc.Payout, payout)) {\r\n                FD_DB.setState(\r\n                    _policyId,\r\n                    policyState.SendFailed,\r\n                    now,\r\n                    \"Payout, send failed!\"\r\n                );\r\n\r\n                FD_DB.setPayouts(_policyId, calculatedPayout, 0);\r\n            } else {\r\n                FD_DB.setState(\r\n                    _policyId,\r\n                    policyState.PaidOut,\r\n                    now,\r\n                    \"Payout successful!\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function setOraclizeGasPrice(uint _gasPrice) external returns (bool _success) {\r\n        require(FD_AC.checkPermission(103, msg.sender));\r\n\r\n        oraclize_setCustomGasPrice(_gasPrice);\r\n        _success = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PATCH_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setOraclizeGasPrice\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_riskId\",\"type\":\"bytes32\"},{\"name\":\"_oraclizeTime\",\"type\":\"uint256\"}],\"name\":\"schedulePayoutOraclizeCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"b32toHexString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dayMonthYear\",\"type\":\"bytes32\"}],\"name\":\"toUnixtime\",\"outputs\":[{\"name\":\"unixtime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINOR_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAJOR_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"strCarrierFlightNumber\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethPremium\",\"type\":\"uint256\"}],\"name\":\"LogPolicyApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics0\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics4\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics5\",\"type\":\"uint256\"}],\"name\":\"LogPolicyAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogPolicyPaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"LogPolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogPolicyDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogPolicyManualPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogSendFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogReceiveFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogSendFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_oraclizeUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_oraclizeTime\",\"type\":\"uint256\"}],\"name\":\"LogOraclizeCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hexProof\",\"type\":\"bytes\"}],\"name\":\"LogOraclizeCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_policyState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_stateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stateMessage\",\"type\":\"bytes32\"}],\"name\":\"LogSetState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_externalId\",\"type\":\"bytes32\"}],\"name\":\"LogExternal\",\"type\":\"event\"}]","ContractName":"FlightDelayPayout","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000091eae0f4e0900a77ee24606567f6f32e8afa3c80","Library":"","SwarmSource":"bzzr://1cf853c242b85aa7ffbad00c5d5cfd3abaee84f1203f4056be14ea566c30af01"}]}