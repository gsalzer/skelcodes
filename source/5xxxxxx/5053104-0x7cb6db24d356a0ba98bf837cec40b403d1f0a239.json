{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n//Token Contract\r\ncontract LoveLockChain {\r\n\r\n\taddress private constant _ceo = 0x41321d1639BA6587185C10b8e589418F46c698C6;\r\n\tmodifier ownerFunc {\r\n\t\trequire(_ceo == msg.sender);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n    function LoveLockChain() public ownerFunc {\r\n        for(uint8 i = 1; i<=3; i++){\r\n            grantToken(_ceo);\r\n            newAuction(lastAuctionId+1,currentStartPrice, currentMinPrice, currentSpawnDuration, LastTokenId,_ceo);\r\n            AuctionIds[lastAuctionId+1].isSpawn = true;\r\n            lastAuctionId = lastAuctionId +1;\r\n        }\r\n    }\r\n\r\n\r\n    // Token Info\r\n\tstring public constant name = \"Love Locks\";\r\n\tstring public constant symbol = \"LOCKS\";\r\n\tuint8 public constant decimals = 0;\r\n\tuint64 public totalSupply = 0;\r\n\tuint64 public LastTokenId = 0;\r\n\tuint64 public constant maxSupply = 520;\r\n\t\r\n\t\r\n\t// Spawn vars\r\n    uint256 private constant currentStartPrice = 0.1 ether;\r\n    uint256 private constant currentMinPrice = 0.01 ether;\r\n    uint256 private constant currentSpawnDuration = 60 minutes ;//60 minutes;\r\n\r\n    // Desgign attributes\r\n\tmapping(uint64 => uint16) private tokenBackground;\r\n\tmapping(uint64 => uint16) private tokenLock;\r\n\tmapping(uint64 => uint16) private tokenNote;\r\n\tuint16 private maxIdBackground = 19;\r\n\tuint16 private maxIdLock = 18;\r\n\tuint16 private maxIdNote = 22;\r\n\r\n\t// User Wallet\r\n\tmapping (address => uint64[]) private TokenBalanceOf;\r\n\tmapping (uint64 => uint64) private TokenBalanceIndex; // TokenID => TokenBalanceIndex\r\n\tmapping (address => uint64) public balanceOf;\r\n\tmapping (uint64 => Message) internal LoveLocks;\r\n\tmapping (uint64 => address) private Tokens;\r\n\tmapping (address => uint64[]) private _userLoveLocks;\r\n\r\n\t// Auction Storage \r\n\tmapping (uint64 => uint64) private tokenAuctions;\r\n    mapping (uint64 => Auction) private AuctionIds;\r\n    mapping (address => uint64[]) private userAuctionIds;\r\n    uint64 private lastAuctionId = 0;\r\n\r\n\t// Events\r\n\tevent Spend(uint64 indexed _TokenId, address _from, string _Message);\r\n\tevent PriceChanged(uint indexed _time, uint64 newPrice);\r\n\tevent AuctionStarted(uint64 indexed _AuctionId, uint64 _TokenId, address _from);\r\n\tevent AuctionWon(uint64 indexed _AuctionId, uint64 _TokenId, address _winner, uint256 price);\r\n\tevent Transfer(address indexed from, address indexed to, uint64 _TokenId);\r\n\r\n    // Balance function\r\n\tfunction TokenBalance(address _addr) public view returns (uint64[]){\r\n\t\treturn TokenBalanceOf[_addr];\r\n\t}\r\n    \r\n    // User Love Locks\r\n\tfunction userLoveLocks(address _addr) public view returns (uint64[]){\r\n\t\treturn _userLoveLocks[_addr];\r\n\t}\r\n\r\n\r\n\t// Grants token\r\n\tfunction grantToken(address _to) private {\r\n\t\tuint64 _TokenId = LastTokenId + 1;\r\n\t\tLastTokenId += 1;\r\n\t\tAddTokenId(_to, _TokenId);\r\n\t\ttotalSupply += 1;\r\n\r\n\t}\r\n\r\n\t// Transfer Token\r\n\tfunction transfer(address _to, uint64 _TokenId) public {\r\n\t\t_transfer(msg.sender, _to, _TokenId);\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint64 _TokenId) internal {\r\n\t\trequire(_to != 0x0);// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(RemoveTokenId(_from,_TokenId));\r\n\t\trequire(!HasLiveAuction(_TokenId));\r\n\t\tAddTokenId(_to,_TokenId);\r\n\r\n\t\tTransfer(_from, _to, _TokenId); // Event\r\n\t}\r\n\t// Token Spending:\r\n\t// TODO: Return bool\r\n\tfunction sendLoveToken( uint64 _TokenId, string _Message,string _To, string _From) public {\r\n\t\trequire(RemoveTokenId(msg.sender,_TokenId));\r\n\t\trequire(!HasLiveAuction(_TokenId));\r\n\r\n\t\tLoveLocks[_TokenId]._To = _To;\r\n\t\tLoveLocks[_TokenId]._From = _From;\r\n\t\tLoveLocks[_TokenId]._Message = _Message;\r\n\r\n\t\t_userLoveLocks[msg.sender].push(_TokenId);\r\n\t\tSpend(_TokenId, msg.sender, _Message);\r\n\t}\r\n\r\n    // Get LoveLock\r\n\tfunction getLoveLock(uint64 _TokenId)\r\n\tpublic view\r\n\treturns (string _To, string _From, string _Message, uint16 _background, uint16 _lock, uint16 _note){\r\n\t    _To = LoveLocks[_TokenId]._To;\r\n\t    _From = LoveLocks[_TokenId]._From;\r\n\t    _Message = LoveLocks[_TokenId]._Message;\r\n\t    _background = tokenBackground[_TokenId];\r\n\t    _lock =  tokenLock[_TokenId];\r\n\t    _note =  tokenNote[_TokenId];\r\n\t}\r\n\r\n    // Last Auction Id neeeded for external loops\r\n    function getLastAuctionId() public view returns (uint64){\r\n        return lastAuctionId;\r\n    }\r\n\r\n    // User's Auctions used for wallet\r\n\tfunction getUserAuctionIds(address _addr) public view returns (uint64[]){\r\n\t    return userAuctionIds[_addr];\r\n\t}\r\n\r\n\r\n    // Get Auction Info\r\n\tfunction getAuctionByAuctionId(uint64 _AuctionId)\r\n\tpublic view \r\n\treturns\r\n\t(uint64 _TokenId, uint256 _startTime, uint256 _endTime,\r\n\tbool _sold, uint256 _finalPrice, uint256 _startPrice,\tuint256 _minPrice, uint256 _currentPrice,\r\n\tbool _cancelled, bool _expired, uint16[3] preview ){\r\n\t      //object auction: {TokenId, starttime, endtime, sold, finalPrice}\r\n\t      Auction storage auc = AuctionIds[_AuctionId];\r\n\t      _TokenId = auc.TokenId;\r\n\t      \r\n\t      \r\n\t      _sold = auc.sold;\r\n\t      _finalPrice = auc.finalPrice;\r\n\t      _startPrice = auc.startPrice;\r\n\t      _minPrice = auc.minPrice;\r\n\t      _cancelled = auc.cancelled;\r\n\t     \r\n\t      _currentPrice = auctionCurrentPrice(_AuctionId);\r\n\r\n            if(auc.isSpawn){\r\n                _startTime = auc.startTime + auc.duration * SpawnCycles(_AuctionId); \r\n                _expired=false;\r\n                var a = uint64(_TokenId + SpawnCycles(_AuctionId));\r\n                preview[0] = rand(1, maxIdBackground, a);\r\n        \t\tpreview[1] = rand(1, maxIdLock, a);\r\n        \t\tpreview[2] = rand(1, maxIdNote, a);\r\n            } else{\r\n                _startTime = auc.startTime;\r\n                _expired = isExpired(_AuctionId);\r\n            \tpreview[0] = tokenBackground[_TokenId];\r\n                preview[1] = tokenLock[_TokenId];\r\n                preview[2] = tokenNote[_TokenId];\r\n            }\r\n            \r\n            _endTime = auc.duration + _startTime;\r\n\r\n\t}\r\n\r\n\r\n    // Start an auction\r\n\tfunction startNewAuction(uint64 _startPrice, uint64 _minPrice, uint64 _duration, uint64 _TokenId) public {\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(HasTokenId(_from, _TokenId)); // user has token\r\n\t\trequire(!HasLiveAuction(_TokenId)); // no concurrent auctions\r\n\r\n\r\n\t\tnewAuction(lastAuctionId+1,_startPrice, _minPrice, _duration, _TokenId,_from);\r\n\t\tlastAuctionId = lastAuctionId +1;\r\n\r\n\r\n\t\tAuctionStarted(lastAuctionId, _TokenId, _from );\r\n\t}\r\n\r\n    // Buy from auction\r\n\tfunction placeBid(uint64 _AuctionId) public payable {\r\n\t\trequire(_placeBid(_AuctionId,msg.value));\r\n\r\n\t\t// Make trade\r\n        uint256 finalPrice = AuctionIds[_AuctionId].finalPrice;\r\n        address _owner = AuctionIds[_AuctionId].owner;\r\n        uint64 _TokenId = AuctionIds[_AuctionId].TokenId;\r\n\r\n\t\tmsg.sender.transfer(msg.value - finalPrice);\r\n\t\t_owner.transfer(finalPrice);\r\n\t\t_transfer(_owner, msg.sender, _TokenId);\r\n\r\n\t\tAuctionWon(_AuctionId, _TokenId, msg.sender, finalPrice);\r\n\t}\r\n\r\n    // Run bid on auction\r\n\tfunction _placeBid(uint64 _AuctionId, uint256 _bid) private returns (bool) {\r\n\t\tif(setBid(_AuctionId, _bid)){\r\n\t\t    var SoldAuc = AuctionIds[_AuctionId];\r\n\t\t    if(SoldAuc.isSpawn){\r\n\t\t      var SoldTokenId = SoldAuc.TokenId;\r\n                tokenBackground[SoldTokenId]    = rand(1, maxIdBackground, uint64(SoldTokenId + SpawnCycles(_AuctionId)));\r\n        \t\ttokenLock[SoldTokenId]          = rand(1, maxIdLock, uint64(SoldTokenId + SpawnCycles(_AuctionId)));\r\n        \t\ttokenNote[SoldTokenId]          = rand(1, maxIdNote, uint64(SoldTokenId + SpawnCycles(_AuctionId)));\r\n\t\t        \r\n\t\t        //Spawn new\r\n\t\t        if(LastTokenId <maxSupply){\r\n    \t\t        grantToken(_ceo);\r\n    \t\t        newAuction(lastAuctionId+1,currentStartPrice, currentMinPrice, currentSpawnDuration, LastTokenId,_ceo);\r\n                    AuctionIds[lastAuctionId+1].isSpawn = true;\r\n                    lastAuctionId = lastAuctionId +1;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    \r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Misc help functions -----------------------------\r\n\tfunction AddTokenId(address _addr, uint64 _TokenId) internal returns (bool){\r\n\t\tTokens[_TokenId] = _addr; // Set token belonging to new user\r\n\t\tuint64[] storage curUserTokenBalance=TokenBalanceOf[_addr];\r\n\t\tuint64 UserBalance = uint64(curUserTokenBalance.length);\r\n\t\tbalanceOf[_addr] = balanceOf[_addr]+1;\r\n\t\tcurUserTokenBalance.push(_TokenId);\r\n\t\tTokenBalanceIndex[_TokenId] = UserBalance;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction HasTokenId(address _addr , uint64 _TokenId) internal view returns (bool){\r\n\t\tif(Tokens[_TokenId] == _addr)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction RemoveTokenId(address _addr , uint64 _TokenId) internal returns (bool){\r\n\t\tif(Tokens[_TokenId] != _addr)\treturn false;\r\n\t\tTokens[_TokenId] = address(0);\r\n\t\tbalanceOf[_addr] = balanceOf[_addr]-1;\r\n\r\n\t\tuint64 curIndex = TokenBalanceIndex[_TokenId];\r\n\t\tTokenBalanceOf[_addr][curIndex] = 0;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction HasLiveAuction(uint64 _TokenId) internal view returns(bool) {\r\n\t    uint64 _AuctionId = tokenAuctions[_TokenId];\r\n\t    if(!AuctionIds[_AuctionId].created) return false;\r\n\t\tif(isExpired(_AuctionId)) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tstruct Auction {\r\n\t    uint64 AuctionId;\r\n    \tuint256 startTime;\r\n    \tuint256 duration;\r\n\r\n    \tuint64 TokenId;\r\n    \tuint256 startPrice;\r\n    \tuint256 minPrice;\r\n    \tbool created;\r\n    \tbool cancelled;\r\n    \tbool sold;\r\n    \tuint256 finalPrice;\r\n    \taddress owner;\r\n    \tbool isSpawn;\r\n\t}\r\n\r\n\r\n\r\n\tfunction newAuction(uint64 _AuctionId,uint256 _startPrice, uint256 _minPrice, uint256 _duration, uint64 _TokenId, address _owner) internal returns (Auction _out){\r\n\t\trequire(_duration >= 600 && _duration <= 24 hours ); //10min to 1 day\r\n\t\trequire(_TokenId > 0);\r\n\t\trequire(_minPrice > 0);\r\n\t\trequire(_startPrice > _minPrice);\r\n\r\n        _out.AuctionId = _AuctionId;\r\n\t\t_out.startTime = block.timestamp;\r\n\t\t_out.duration = _duration;\r\n\t\t_out.minPrice = _minPrice;\r\n\t\t_out.startPrice = _startPrice;\r\n\t\t_out.TokenId = _TokenId;\r\n\t\t_out.owner = _owner;\r\n\t\t_out.created = true;\r\n\t\t_out.cancelled = false;\r\n\t\t\t\r\n\r\n\t\tAuctionIds[_AuctionId] = _out;\r\n\t\ttokenAuctions[_TokenId] = _AuctionId;\r\n\t\tuserAuctionIds[_owner].push(_AuctionId);\r\n\r\n\t}\r\n\r\n\tfunction setBid(uint64 _AuctionId, uint256 bid) internal returns (bool) {\r\n\t\trequire(bid>0);\r\n\t\trequire(AuctionIds[_AuctionId].created);\r\n\t\trequire(!AuctionIds[_AuctionId].sold);\r\n\t\trequire(!AuctionIds[_AuctionId].cancelled);\r\n\t\tuint256 curPrice = auctionCurrentPrice(_AuctionId);\r\n\t\tif(bid > curPrice){\r\n\t\t\tAuctionIds[_AuctionId].sold = true;\r\n\t\t\tAuctionIds[_AuctionId].finalPrice = curPrice;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction auctionCurrentPrice(uint64 _AuctionId) internal view returns (uint256){\r\n\t    require(AuctionIds[_AuctionId].created);\r\n\r\n\t\tuint256 DeltaP = (AuctionIds[_AuctionId].startPrice - AuctionIds[_AuctionId].minPrice);\r\n\t\tuint256 DeltaT = (now - AuctionIds[_AuctionId].startTime) % AuctionIds[_AuctionId].duration ;\r\n\t\t\r\n\t\t\r\n\t\treturn AuctionIds[_AuctionId].startPrice - (DeltaT* DeltaP)/AuctionIds[_AuctionId].duration;\r\n\t}\r\n\r\n\r\n\tfunction isExpired(uint64 _AuctionId) internal view returns (bool) {\r\n\t\tif(AuctionIds[_AuctionId].sold) return true;\r\n\t\tif(AuctionIds[_AuctionId].cancelled) return true;\r\n\t\tif(AuctionIds[_AuctionId].isSpawn) return false;\r\n\t\tif(block.timestamp >= AuctionIds[_AuctionId].duration + AuctionIds[_AuctionId].startTime) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction cancelAuction(uint64 _AuctionId) public {\r\n\t    require(AuctionIds[_AuctionId].created);\r\n\t    require(!AuctionIds[_AuctionId].sold);\r\n\t    require(!AuctionIds[_AuctionId].cancelled);\r\n\t    require(AuctionIds[_AuctionId].owner == msg.sender);\r\n\t    AuctionIds[_AuctionId].cancelled = true;\r\n\t}\r\n\r\n\tstruct Message {\r\n\t    string _Message;\r\n\t    string _To;\r\n\t    string _From;\r\n\t}\r\n\r\n\tfunction setTokenTypes(uint16 _maxIdBackground, uint16 _maxIdLock,uint16 _maxIdNote) public ownerFunc {\r\n\t    require(_maxIdBackground >= maxIdBackground);\r\n\t    require(_maxIdLock >= maxIdLock);\r\n\t    require(_maxIdNote >= maxIdNote);\r\n\t    maxIdBackground = _maxIdBackground;\r\n\t    maxIdLock = _maxIdLock;\r\n        maxIdNote = _maxIdNote;\r\n\t}\r\n\r\n\r\n    function rand(uint16 min, uint16 max,uint64 _seed) private pure returns (uint16){\r\n        return (uint16(keccak256(_seed+max)) % (max-min+1))+min;\r\n    }\r\n    \r\n    function SpawnCycles(uint64 _AuctionId) private view returns (uint256){\r\n        var a = AuctionIds[_AuctionId];\r\n        return ((now-a.startTime)/a.duration);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_AuctionId\",\"type\":\"uint64\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastAuctionId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_TokenId\",\"type\":\"uint64\"}],\"name\":\"getLoveLock\",\"outputs\":[{\"name\":\"_To\",\"type\":\"string\"},{\"name\":\"_From\",\"type\":\"string\"},{\"name\":\"_Message\",\"type\":\"string\"},{\"name\":\"_background\",\"type\":\"uint16\"},{\"name\":\"_lock\",\"type\":\"uint16\"},{\"name\":\"_note\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userLoveLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_TokenId\",\"type\":\"uint64\"},{\"name\":\"_Message\",\"type\":\"string\"},{\"name\":\"_To\",\"type\":\"string\"},{\"name\":\"_From\",\"type\":\"string\"}],\"name\":\"sendLoveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_AuctionId\",\"type\":\"uint64\"}],\"name\":\"getAuctionByAuctionId\",\"outputs\":[{\"name\":\"_TokenId\",\"type\":\"uint64\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_sold\",\"type\":\"bool\"},{\"name\":\"_finalPrice\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_cancelled\",\"type\":\"bool\"},{\"name\":\"_expired\",\"type\":\"bool\"},{\"name\":\"preview\",\"type\":\"uint16[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_TokenId\",\"type\":\"uint64\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_AuctionId\",\"type\":\"uint64\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startPrice\",\"type\":\"uint64\"},{\"name\":\"_minPrice\",\"type\":\"uint64\"},{\"name\":\"_duration\",\"type\":\"uint64\"},{\"name\":\"_TokenId\",\"type\":\"uint64\"}],\"name\":\"startNewAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserAuctionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"TokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxIdBackground\",\"type\":\"uint16\"},{\"name\":\"_maxIdLock\",\"type\":\"uint16\"},{\"name\":\"_maxIdNote\",\"type\":\"uint16\"}],\"name\":\"setTokenTypes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_TokenId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_Message\",\"type\":\"string\"}],\"name\":\"Spend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint64\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_AuctionId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_TokenId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_AuctionId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_TokenId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_TokenId\",\"type\":\"uint64\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LoveLockChain","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2af77a3e723aaf8d264b13d0ee37f9ae2dda7175177471d175adc757ee005859"}]}