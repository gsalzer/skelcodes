{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary safeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract DBC {\r\n\r\n    // MODIFIERS\r\n\r\n    modifier pre_cond(bool condition) {\r\n        require(condition);\r\n        _;\r\n    }\r\n\r\n    modifier post_cond(bool condition) {\r\n        _;\r\n        assert(condition);\r\n    }\r\n\r\n    modifier invariant(bool condition) {\r\n        require(condition);\r\n        _;\r\n        assert(condition);\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    // EVENTS\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // CONSTANT METHODS\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    // NON-CONSTANT METHODS\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n}\r\n\r\ncontract ERC20 is ERC20Interface {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { throw; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { throw; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263555598\r\n        if (_value > 0) {\r\n            require(allowed[msg.sender][_spender] == 0);\r\n        }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\ncontract Vesting is DBC {\r\n    using safeMath for uint;\r\n\r\n    // FIELDS\r\n\r\n    // Constructor fields\r\n    ERC20 public MELON_CONTRACT; // Melon as ERC20 contract\r\n    // Methods fields\r\n    uint public totalVestedAmount; // Quantity of vested Melon in total\r\n    uint public vestingStartTime; // Timestamp when vesting is set\r\n    uint public vestingPeriod; // Total vesting period in seconds\r\n    address public beneficiary; // Address of the beneficiary\r\n    uint public withdrawn; // Quantity of Melon withdrawn so far\r\n\r\n    // CONSTANT METHODS\r\n\r\n    function isBeneficiary() constant returns (bool) { return msg.sender == beneficiary; }\r\n    function isVestingStarted() constant returns (bool) { return vestingStartTime != 0; }\r\n\r\n    /// @notice Calculates the quantity of Melon asset that's currently withdrawable\r\n    /// @return withdrawable Quantity of withdrawable Melon asset\r\n    function calculateWithdrawable() constant returns (uint withdrawable) {\r\n        uint timePassed = now.sub(vestingStartTime);\r\n\r\n        if (timePassed < vestingPeriod) {\r\n            uint vested = totalVestedAmount.mul(timePassed).div(vestingPeriod);\r\n            withdrawable = vested.sub(withdrawn);\r\n        } else {\r\n            withdrawable = totalVestedAmount.sub(withdrawn);\r\n        }\r\n    }\r\n\r\n    // NON-CONSTANT METHODS\r\n\r\n    /// @param ofMelonAsset Address of Melon asset\r\n    function Vesting(address ofMelonAsset) {\r\n        MELON_CONTRACT = ERC20(ofMelonAsset);\r\n    }\r\n\r\n    /// @param ofBeneficiary Address of beneficiary\r\n    /// @param ofMelonQuantity Address of Melon asset\r\n    /// @param ofVestingPeriod Vesting period in seconds from vestingStartTime\r\n    function setVesting(address ofBeneficiary, uint ofMelonQuantity, uint ofVestingPeriod)\r\n        pre_cond(!isVestingStarted())\r\n        pre_cond(ofMelonQuantity > 0)\r\n    {\r\n        require(MELON_CONTRACT.transferFrom(msg.sender, this, ofMelonQuantity));\r\n        vestingStartTime = now;\r\n        totalVestedAmount = ofMelonQuantity;\r\n        vestingPeriod = ofVestingPeriod;\r\n        beneficiary = ofBeneficiary;\r\n    }\r\n\r\n    /// @notice Withdraw\r\n    function withdraw()\r\n        pre_cond(isBeneficiary())\r\n        pre_cond(isVestingStarted())\r\n    {\r\n        uint withdrawable = calculateWithdrawable();\r\n        withdrawn = withdrawn.add(withdrawable);\r\n        require(MELON_CONTRACT.transfer(beneficiary, withdrawable));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isVestingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MELON_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ofBeneficiary\",\"type\":\"address\"},{\"name\":\"ofMelonQuantity\",\"type\":\"uint256\"},{\"name\":\"ofVestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateWithdrawable\",\"outputs\":[{\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ofMelonAsset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Vesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000beb9ef514a379b997e0798fdcc901ee474b6d9a1","Library":"","SwarmSource":"bzzr://fce3c93b5dfff4df8d53b06b6ac73af1fbe1b9fc3e01792fb139381e5857291d"}]}