{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// Turn the usage of callcode\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b) internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n}\r\n\r\ncontract CreatorEnabled {\r\n     address public creator = 0x0;\r\n\r\n     modifier onlyCreator() { require(msg.sender==creator); _; }\r\n\r\n     function changeCreator(address _to) public onlyCreator {\r\n          creator = _to;\r\n     }\r\n}\r\n\r\n// ERC20 standard\r\ncontract StdToken is SafeMath {\r\n// Fields:\r\n     mapping(address => uint256) public balances;\r\n     mapping (address => mapping (address => uint256)) internal allowed;\r\n     uint public totalSupply = 0;\r\n\r\n// Events:\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n// Functions:\r\n     function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool) {\r\n          require(0x0!=_to);\r\n\r\n          balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n\r\n          Transfer(msg.sender, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) returns(bool) {\r\n          require(0x0!=_to);\r\n\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n          balances[_from] = safeSub(balances[_from],_value);\r\n          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n\r\n          Transfer(_from, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256) {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool) {\r\n          // To change the approve amount you first have to reduce the addresses`\r\n          //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n          //  already 0 to mitigate the race condition described here:\r\n          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n          require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint256) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n\r\n     modifier onlyPayloadSize(uint _size) {\r\n          require(msg.data.length >= _size + 4);\r\n          _;\r\n     }\r\n}\r\n\r\ncontract IGoldFee {\r\n     function calculateFee(\r\n          bool _isMigrationStarted, bool _isMigrationFinished, \r\n          uint _mntpBalance, uint _value) public constant returns(uint);\r\n}\r\n\r\ncontract GoldFee is CreatorEnabled {\r\n// Functions: \r\n     function GoldFee() {\r\n          creator = msg.sender;\r\n     }\r\n\r\n     function getMin(uint out)returns (uint) {\r\n          // 0.002 GOLD is min fee\r\n          uint minFee = (2 * 1 ether) / 1000;\r\n          if (out < minFee) {\r\n               return minFee;\r\n          }\r\n          return out;\r\n     }\r\n\r\n     function getMax(uint out)returns (uint) {\r\n          // 0.02 GOLD is max fee\r\n          uint maxFee = (2 * 1 ether) / 100;\r\n          if (out >= maxFee) {\r\n               return maxFee;\r\n          }\r\n          return out;\r\n     }\r\n\r\n     function calculateFee(\r\n          bool _isMigrationStarted, bool _isMigrationFinished, \r\n          uint _mntpBalance, uint _value) public constant returns(uint) \r\n     {\r\n          // When migration process is finished (1 year from Goldmint blockchain launch), then transaction fee is 1% GOLD.\r\n          if (_isMigrationFinished) {\r\n               return (_value / 100); \r\n          }\r\n\r\n          // If the sender holds 0 MNTP, then the transaction fee is 1% GOLD.\r\n\r\n          // If the sender holds at least 10 MNTP, then the transaction fee is 0.333333% GOLD, \r\n          // but not less than 0.002 MNTP\r\n\r\n          // If the sender holds at least 1000 MNTP, then the transaction fee is 0.033333% GOLD,\r\n          // but not less than 0.002 MNTP\r\n\r\n          // If the sender holds at least 10000 MNTP, then the transaction fee is 0.0333333% GOLD,\r\n          // but not more than 0.02 MNTP\r\n          if (_mntpBalance >= (10000 * 1 ether)) {\r\n               return getMax((_value / 100) / 30);\r\n          }\r\n          if (_mntpBalance >= (1000 * 1 ether)) {\r\n               return getMin((_value / 100) / 30);\r\n          }\r\n          if (_mntpBalance >= (10 * 1 ether)) {\r\n               return getMin((_value / 100) / 3);\r\n          }\r\n          \r\n          // 1%\r\n          return getMin(_value / 100);\r\n     }\r\n}\r\n\r\ncontract Gold is StdToken, CreatorEnabled {\r\n// Fields:\r\n     string public constant name = \"Goldmint GOLD Token\";\r\n     string public constant symbol = \"GOLD\";\r\n     uint8 public constant decimals = 18;\r\n\r\n     // this is used to send fees (that is then distributed as rewards)\r\n     address public migrationAddress = 0x0;\r\n     address public storageControllerAddress = 0x0;\r\n\r\n     address public goldmintTeamAddress = 0x0;\r\n     IMNTP public mntpToken;\r\n     IGoldFee public goldFee;\r\n     \r\n\r\n     bool public transfersLocked = false;\r\n     bool public contractLocked = false;\r\n     bool public migrationStarted = false;\r\n     bool public migrationFinished = false;\r\n\r\n     uint public totalIssued = 0;\r\n     uint public totalBurnt = 0;\r\n\r\n\r\n// Modifiers:\r\n     modifier onlyMigration() { require(msg.sender == migrationAddress); _; }\r\n     modifier onlyCreator() { require(msg.sender == creator); _; }\r\n     modifier onlyMigrationOrStorageController() { require(msg.sender == migrationAddress || msg.sender == storageControllerAddress); _; }\r\n     modifier onlyCreatorOrStorageController() { require(msg.sender == creator || msg.sender == storageControllerAddress); _; }\r\n     modifier onlyIfUnlocked() { require(!transfersLocked); _; }\r\n\r\n// Functions:\r\n     function Gold(address _mntpContractAddress, address _goldmintTeamAddress, address _goldFeeAddress) public {\r\n          creator = msg.sender;\r\n\r\n          mntpToken = IMNTP(_mntpContractAddress);\r\n          goldmintTeamAddress = _goldmintTeamAddress; \r\n          goldFee = IGoldFee(_goldFeeAddress);\r\n     }\r\n\r\n     function setCreator(address _address) public onlyCreator {\r\n         creator = _address;\r\n     }\r\n\r\n    function lockContract(bool _contractLocked) public onlyCreator {\r\n         contractLocked = _contractLocked;\r\n     }\r\n\r\n     function setStorageControllerContractAddress(address _address) public onlyCreator {\r\n          storageControllerAddress = _address;\r\n     }\r\n\r\n     function setMigrationContractAddress(address _migrationAddress) public onlyCreator {\r\n          migrationAddress = _migrationAddress;\r\n     }\r\n\r\n     function setGoldmintTeamAddress(address _teamAddress) public onlyCreator {\r\n          goldmintTeamAddress = _teamAddress;\r\n     }\r\n\r\n     function setGoldFeeAddress(address _goldFeeAddress) public onlyCreator {\r\n          goldFee = IGoldFee(_goldFeeAddress);\r\n     }\r\n     \r\n     function issueTokens(address _who, uint _tokens) public onlyCreatorOrStorageController {\r\n          require(!contractLocked);\r\n\r\n          balances[_who] = safeAdd(balances[_who],_tokens);\r\n          totalSupply = safeAdd(totalSupply,_tokens);\r\n          totalIssued = safeAdd(totalIssued,_tokens);\r\n\r\n          Transfer(0x0, _who, _tokens);\r\n     }\r\n\r\n     function burnTokens(address _who, uint _tokens) public onlyMigrationOrStorageController {\r\n          require(!contractLocked);\r\n          balances[_who] = safeSub(balances[_who],_tokens);\r\n          totalSupply = safeSub(totalSupply,_tokens);\r\n          totalBurnt = safeAdd(totalBurnt,_tokens);\r\n     }\r\n\r\n     // there is no way to revert that\r\n     function startMigration() public onlyMigration {\r\n          require(false == migrationStarted);\r\n          migrationStarted = true;\r\n     }\r\n\r\n     // there is no way to revert that\r\n     function finishMigration() public onlyMigration {\r\n          require(true == migrationStarted);\r\n\r\n          migrationFinished = true;\r\n     }\r\n\r\n     function lockTransfer(bool _lock) public onlyMigration {\r\n          transfersLocked = _lock;\r\n     }\r\n\r\n     function transfer(address _to, uint256 _value) public onlyIfUnlocked onlyPayloadSize(2 * 32) returns(bool) {\r\n\r\n          uint yourCurrentMntpBalance = mntpToken.balanceOf(msg.sender);\r\n\r\n          // you can transfer if fee is ZERO \r\n          uint fee = goldFee.calculateFee(migrationStarted, migrationFinished, yourCurrentMntpBalance, _value);\r\n          uint sendThis = _value;\r\n          if (0 != fee) { \r\n               sendThis = safeSub(_value,fee);\r\n          \r\n               // 1.Transfer fee\r\n               // A -> rewards account\r\n               // \r\n               // Each GOLD token transfer should send transaction fee to\r\n               // GoldmintMigration contract if Migration process is not started.\r\n               // Goldmint team if Migration process is started.\r\n               if (migrationStarted) {\r\n                    super.transfer(goldmintTeamAddress, fee);\r\n               } else {\r\n                    super.transfer(migrationAddress, fee);\r\n               }\r\n          }\r\n\r\n          // 2.Transfer\r\n          // A -> B\r\n          return super.transfer(_to, sendThis);\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) public onlyIfUnlocked returns(bool) {\r\n\r\n          uint yourCurrentMntpBalance = mntpToken.balanceOf(_from);\r\n\r\n          uint fee = goldFee.calculateFee(migrationStarted, migrationFinished, yourCurrentMntpBalance, _value);\r\n          if (0 != fee) { \r\n               // 1.Transfer fee\r\n               // A -> rewards account\r\n               // \r\n               // Each GOLD token transfer should send transaction fee to\r\n               // GoldmintMigration contract if Migration process is not started.\r\n               // Goldmint team if Migration process is started.\r\n               if (migrationStarted) {\r\n                    super.transferFrom(_from, goldmintTeamAddress, fee);\r\n               } else {\r\n                    super.transferFrom(_from, migrationAddress, fee);\r\n               }\r\n          }\r\n          \r\n          // 2.Transfer\r\n          // A -> B\r\n          uint sendThis = safeSub(_value,fee);\r\n          return super.transferFrom(_from, _to, sendThis);\r\n     }\r\n\r\n     // Used to send rewards)\r\n     function transferRewardWithoutFee(address _to, uint _value) public onlyMigration onlyPayloadSize(2*32) {\r\n          require(0x0!=_to);\r\n\r\n          balances[migrationAddress] = safeSub(balances[migrationAddress],_value);\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n\r\n          Transfer(migrationAddress, _to, _value);\r\n     }\r\n\r\n     // This is an emergency function that can be called by Creator only \r\n     function rescueAllRewards(address _to) public onlyCreator {\r\n          require(0x0!=_to);\r\n\r\n          uint totalReward = balances[migrationAddress];\r\n\r\n          balances[_to] = safeAdd(balances[_to],totalReward);\r\n          balances[migrationAddress] = 0;\r\n\r\n          Transfer(migrationAddress, _to, totalReward);\r\n     }\r\n\r\n\r\n     function getTotalIssued() public constant returns (uint) {\r\n          return totalIssued; \r\n     }\r\n\r\n     function getTotalBurnt() public constant returns (uint) {\r\n          return totalBurnt; \r\n     }\r\n\r\n\r\n}\r\n\r\ncontract IMNTP is StdToken {\r\n// Additional methods that MNTP contract provides\r\n     function lockTransfer(bool _lock);\r\n     function issueTokens(address _who, uint _tokens);\r\n     function burnTokens(address _who, uint _tokens);\r\n}\r\n\r\ncontract GoldmintMigration is CreatorEnabled {\r\n// Fields:\r\n     IMNTP public mntpToken;\r\n     Gold public goldToken;\r\n\r\n     enum State {\r\n          Init,\r\n          MigrationStarted,\r\n          MigrationPaused,\r\n          MigrationFinished\r\n     }\r\n\r\n     State public state = State.Init;\r\n     \r\n     // this is total collected GOLD rewards (launch to migration start)\r\n     uint public mntpToMigrateTotal = 0;\r\n     uint public migrationRewardTotal = 0;\r\n     uint64 public migrationStartedTime = 0;\r\n     uint64 public migrationFinishedTime = 0;\r\n\r\n     struct Migration {\r\n          address ethAddress;\r\n          string gmAddress;\r\n          uint tokensCount;\r\n          bool migrated;\r\n          uint64 date;\r\n          string comment;\r\n     }\r\n\r\n     mapping (uint=>Migration) public mntpMigrations;\r\n     mapping (address=>uint) public mntpMigrationIndexes;\r\n     uint public mntpMigrationsCount = 0;\r\n\r\n     mapping (uint=>Migration) public goldMigrations;\r\n     mapping (address=>uint) public goldMigrationIndexes;\r\n     uint public goldMigrationsCount = 0;\r\n\r\n     event MntpMigrateWanted(address _ethAddress, string _gmAddress, uint256 _value);\r\n     event MntpMigrated(address _ethAddress, string _gmAddress, uint256 _value);\r\n\r\n     event GoldMigrateWanted(address _ethAddress, string _gmAddress, uint256 _value);\r\n     event GoldMigrated(address _ethAddress, string _gmAddress, uint256 _value);\r\n\r\n// Access methods\r\n     function getMntpMigration(uint index) public constant returns(address,string,uint,bool,uint64,string){\r\n          Migration memory mig = mntpMigrations[index];\r\n          return (mig.ethAddress, mig.gmAddress, mig.tokensCount, mig.migrated, mig.date, mig.comment);\r\n     }\r\n\r\n     function getGoldMigration(uint index) public constant returns(address,string,uint,bool,uint64,string){\r\n          Migration memory mig = goldMigrations[index];\r\n          return (mig.ethAddress, mig.gmAddress, mig.tokensCount, mig.migrated, mig.date, mig.comment);\r\n     }\r\n\r\n// Functions:\r\n     // Constructor\r\n     function GoldmintMigration(address _mntpContractAddress, address _goldContractAddress) public {\r\n          creator = msg.sender;\r\n\r\n          require(_mntpContractAddress != 0);\r\n          require(_goldContractAddress != 0);\r\n\r\n          mntpMigrationIndexes[address(0x0)] = 0;\r\n          goldMigrationIndexes[address(0x0)] = 0;\r\n\r\n          mntpToken = IMNTP(_mntpContractAddress);\r\n          goldToken = Gold(_goldContractAddress);\r\n     }\r\n\r\n     function lockMntpTransfers(bool _lock) public onlyCreator {\r\n          mntpToken.lockTransfer(_lock);\r\n     }\r\n\r\n     function lockGoldTransfers(bool _lock) public onlyCreator {\r\n          goldToken.lockTransfer(_lock);\r\n     }\r\n\r\n     // This method is called when migration to Goldmint's blockchain\r\n     // process is started...\r\n     function startMigration() public onlyCreator {\r\n          require((State.Init == state) || (State.MigrationPaused == state));\r\n\r\n          if (State.Init == state) {\r\n               // 1 - change fees\r\n               goldToken.startMigration();\r\n               \r\n               // 2 - store the current values \r\n               migrationRewardTotal = goldToken.balanceOf(this);\r\n               migrationStartedTime = uint64(now);\r\n               mntpToMigrateTotal = mntpToken.totalSupply();\r\n          }\r\n\r\n          state = State.MigrationStarted;\r\n     }\r\n\r\n     function pauseMigration() public onlyCreator {\r\n          require((state == State.MigrationStarted) || (state == State.MigrationFinished));\r\n\r\n          state = State.MigrationPaused;\r\n     }\r\n\r\n     // that doesn't mean that you cant migrate from Ethereum -> Goldmint blockchain\r\n     // that means that you will get no reward\r\n     function finishMigration() public onlyCreator {\r\n          require((State.MigrationStarted == state) || (State.MigrationPaused == state));\r\n\r\n          if (State.MigrationStarted == state) {\r\n               goldToken.finishMigration();\r\n               migrationFinishedTime = uint64(now);\r\n          }\r\n\r\n          state = State.MigrationFinished;\r\n     }\r\n\r\n     function destroyMe() public onlyCreator {\r\n          selfdestruct(msg.sender);          \r\n     }\r\n\r\n// MNTP\r\n     // Call this to migrate your MNTP tokens to Goldmint MNT\r\n     // (this is one-way only)\r\n     // _gmAddress is something like that - \"BTS7yRXCkBjKxho57RCbqYE3nEiprWXXESw3Hxs5CKRnft8x7mdGi\"\r\n     //\r\n     // !!! WARNING: will not allow anyone to migrate tokens partly\r\n     // !!! DISCLAIMER: check goldmint blockchain address format. You will not be able to change that!\r\n     function migrateMntp(string _gmAddress) public {\r\n          require((state==State.MigrationStarted) || (state==State.MigrationFinished));\r\n\r\n          // 1 - calculate current reward\r\n          uint myBalance = mntpToken.balanceOf(msg.sender);\r\n          require(0!=myBalance);\r\n\r\n          uint myRewardMax = calculateMyRewardMax(msg.sender);        \r\n          uint myReward = calculateMyReward(myRewardMax);\r\n\r\n          // 2 - pay the reward to our user\r\n          goldToken.transferRewardWithoutFee(msg.sender, myReward);\r\n\r\n          // 3 - burn tokens \r\n          // WARNING: burn will reduce totalSupply\r\n          // \r\n          // WARNING: creator must call \r\n          // setIcoContractAddress(migrationContractAddress)\r\n          // of the mntpToken\r\n          mntpToken.burnTokens(msg.sender,myBalance);\r\n\r\n          // save tuple \r\n          Migration memory mig;\r\n          mig.ethAddress = msg.sender;\r\n          mig.gmAddress = _gmAddress;\r\n          mig.tokensCount = myBalance;\r\n          mig.migrated = false;\r\n          mig.date = uint64(now);\r\n          mig.comment = '';\r\n\r\n          mntpMigrations[mntpMigrationsCount + 1] = mig;\r\n          mntpMigrationIndexes[msg.sender] = mntpMigrationsCount + 1;\r\n          mntpMigrationsCount++;\r\n\r\n          // send an event\r\n          MntpMigrateWanted(msg.sender, _gmAddress, myBalance);\r\n     }\r\n\r\n     function isMntpMigrated(address _who) public constant returns(bool) {\r\n          uint index = mntpMigrationIndexes[_who];\r\n\r\n          Migration memory mig = mntpMigrations[index];\r\n          return mig.migrated;\r\n     }\r\n\r\n     function setMntpMigrated(address _who, bool _isMigrated, string _comment) public onlyCreator { \r\n          uint index = mntpMigrationIndexes[_who];\r\n          require(index > 0);\r\n\r\n          mntpMigrations[index].migrated = _isMigrated; \r\n          mntpMigrations[index].comment = _comment; \r\n\r\n          // send an event\r\n          if (_isMigrated) {\r\n               MntpMigrated(  mntpMigrations[index].ethAddress, \r\n                              mntpMigrations[index].gmAddress, \r\n                              mntpMigrations[index].tokensCount);\r\n          }\r\n     }\r\n\r\n// GOLD\r\n     function migrateGold(string _gmAddress) public {\r\n          require((state==State.MigrationStarted) || (state==State.MigrationFinished));\r\n\r\n          // 1 - get balance\r\n          uint myBalance = goldToken.balanceOf(msg.sender);\r\n          require(0!=myBalance);\r\n\r\n          // 2 - burn tokens \r\n          // WARNING: burn will reduce totalSupply\r\n          // \r\n          goldToken.burnTokens(msg.sender,myBalance);\r\n\r\n          // save tuple \r\n          Migration memory mig;\r\n          mig.ethAddress = msg.sender;\r\n          mig.gmAddress = _gmAddress;\r\n          mig.tokensCount = myBalance;\r\n          mig.migrated = false;\r\n          mig.date = uint64(now);\r\n          mig.comment = '';\r\n\r\n          goldMigrations[goldMigrationsCount + 1] = mig;\r\n          goldMigrationIndexes[msg.sender] = goldMigrationsCount + 1;\r\n          goldMigrationsCount++;\r\n\r\n          // send an event\r\n          GoldMigrateWanted(msg.sender, _gmAddress, myBalance);\r\n     }\r\n\r\n     function isGoldMigrated(address _who) public constant returns(bool) {\r\n          uint index = goldMigrationIndexes[_who];\r\n\r\n          Migration memory mig = goldMigrations[index];\r\n          return mig.migrated;\r\n     }\r\n\r\n     function setGoldMigrated(address _who, bool _isMigrated, string _comment) public onlyCreator { \r\n          uint index = goldMigrationIndexes[_who];\r\n          require(index > 0);\r\n\r\n          goldMigrations[index].migrated = _isMigrated; \r\n          goldMigrations[index].comment = _comment; \r\n\r\n          // send an event\r\n          if (_isMigrated) {\r\n               GoldMigrated(  goldMigrations[index].ethAddress, \r\n                              goldMigrations[index].gmAddress, \r\n                              goldMigrations[index].tokensCount);\r\n          }\r\n     }\r\n\r\n     // Each MNTP token holder gets a GOLD reward as a percent of all rewards\r\n     // proportional to his MNTP token stake\r\n     function calculateMyRewardMax(address _of) public constant returns(uint){\r\n          if (0 == mntpToMigrateTotal) {\r\n               return 0;\r\n          }\r\n\r\n          uint myCurrentMntpBalance = mntpToken.balanceOf(_of);\r\n          if (0 == myCurrentMntpBalance) {\r\n               return 0;\r\n          }\r\n\r\n          return (migrationRewardTotal * myCurrentMntpBalance) / mntpToMigrateTotal;\r\n     }\r\n\r\n     // Migration rewards decreased linearly. \r\n     // \r\n     // The formula is: rewardPercents = max(100 - 100 * day / 365, 0)\r\n     //\r\n     // On 1st day of migration, you will get: 100 - 100 * 0/365 = 100% of your rewards\r\n     // On 2nd day of migration, you will get: 100 - 100 * 1/365 = 99.7261% of your rewards\r\n     // On 365th day of migration, you will get: 100 - 100 * 364/365 = 0.274%\r\n     function calculateMyRewardDecreased(uint _day, uint _myRewardMax) public constant returns(uint){\r\n          if (_day >= 365) {\r\n               return 0;\r\n          }\r\n\r\n          uint x = ((100 * 1000000000 * _day) / 365);\r\n          return (_myRewardMax * ((100 * 1000000000) - x)) / (100 * 1000000000);\r\n     }\r\n     \r\n     function calculateMyReward(uint _myRewardMax) public constant returns(uint){\r\n          // day starts from 0\r\n          uint day = (uint64(now) - migrationStartedTime) / uint64(1 days);  \r\n          return calculateMyRewardDecreased(day, _myRewardMax);\r\n     }\r\n\r\n/////////\r\n     // do not allow to send money to this contract...\r\n     function() external payable {\r\n          revert();\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueAllRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_goldFeeAddress\",\"type\":\"address\"}],\"name\":\"setGoldFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"lockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationAddress\",\"type\":\"address\"}],\"name\":\"setMigrationContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"storageControllerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldFee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractLocked\",\"type\":\"bool\"}],\"name\":\"lockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldmintTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStorageControllerContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBurnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setGoldmintTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRewardWithoutFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mntpToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mntpContractAddress\",\"type\":\"address\"},{\"name\":\"_goldmintTeamAddress\",\"type\":\"address\"},{\"name\":\"_goldFeeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Gold","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083cee9e086a77e492ee0bb93c2b0437ad6fdeccc000000000000000000000000fcccda87ba479fa3e2e60ee613932dc14d4fb3fc000000000000000000000000567e0fd483c9891d574d975a9944006c0794a602","Library":"","SwarmSource":"bzzr://375758a890b63df74aa2218e20a99d26ad7edf070be3efd7d68074cab3c3d07a"}]}