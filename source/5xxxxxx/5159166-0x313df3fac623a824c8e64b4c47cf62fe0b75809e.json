{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/examples/SimpleToken.sol\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract SimpleToken is StandardToken {\r\n\r\n  string public constant name = \"SimpleToken\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"SIM\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function SimpleToken() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/LockedOutTokens.sol\r\n\r\n// for unit test purposes only\r\n\r\n\r\n\r\ncontract LockedOutTokens is Ownable {\r\n\r\n    address public wallet;\r\n    uint8 public tranchesCount;\r\n    uint256 public trancheSize;\r\n    uint256 public period;\r\n\r\n    uint256 public startTimestamp;\r\n    uint8 public tranchesPayedOut = 0;\r\n\r\n    ERC20Basic internal token;\r\n    \r\n    function LockedOutTokens(\r\n        address _wallet,\r\n        address _tokenAddress,\r\n        uint256 _startTimestamp,\r\n        uint8 _tranchesCount,\r\n        uint256 _trancheSize,\r\n        uint256 _periodSeconds\r\n    ) {\r\n        require(_wallet != address(0));\r\n        require(_tokenAddress != address(0));\r\n        require(_startTimestamp > 0);\r\n        require(_tranchesCount > 0);\r\n        require(_trancheSize > 0);\r\n        require(_periodSeconds > 0);\r\n\r\n        wallet = _wallet;\r\n        tranchesCount = _tranchesCount;\r\n        startTimestamp = _startTimestamp;\r\n        trancheSize = _trancheSize;\r\n        period = _periodSeconds;\r\n\r\n        token = ERC20Basic(_tokenAddress);\r\n    }\r\n\r\n    function grant()\r\n        public\r\n    {\r\n        require(wallet == msg.sender);\r\n        require(tranchesPayedOut < tranchesCount);\r\n        require(startTimestamp > 0);\r\n        require(now >= startTimestamp + (period * (tranchesPayedOut + 1)));\r\n\r\n        tranchesPayedOut = tranchesPayedOut + 1;\r\n        token.transfer(wallet, trancheSize);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/TiqpitToken.sol\r\n\r\ncontract TiqpitToken is StandardToken, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = \"Tiqpit Token\";\r\n    string constant public symbol = \"PIT\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    string constant public smallestUnitName = \"TIQ\";\r\n\r\n    uint256 constant public INITIAL_TOTAL_SUPPLY = 500e6 * (uint256(10) ** decimals);\r\n\r\n    address private addressIco;\r\n\r\n    modifier onlyIco() {\r\n        require(msg.sender == addressIco);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Create TiqpitToken contract and set pause\r\n    * @param _ico The address of ICO contract.\r\n    */\r\n    function TiqpitToken (address _ico) public {\r\n        require(_ico != address(0));\r\n\r\n        addressIco = _ico;\r\n\r\n        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\r\n        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\r\n        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\r\n\r\n        pause();\r\n    }\r\n\r\n     /**\r\n    * @dev Transfer token for a specified address with pause feature for owner.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another with pause feature for owner.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from ICO address to another address.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn a specific amount of tokens of other token holders if refund process enable.\r\n    * @param _from The address of token holder whose tokens to be burned.\r\n    */\r\n    function burnFromAddress(address _from) onlyIco public {\r\n        uint256 amount = balances[_from];\r\n\r\n        require(_from != address(0));\r\n        require(amount > 0);\r\n        require(amount <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(amount);\r\n        totalSupply_ = totalSupply_.sub(amount);\r\n        Transfer(_from, address(0), amount);\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist contract\r\n * @dev Whitelist for wallets.\r\n*/\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n\r\n    uint256 public whitelistLength = 0;\r\n\r\n    address public backendAddress;\r\n\r\n    /**\r\n    * @dev Add wallet to whitelist.\r\n    * @dev Accept request from the owner only.\r\n    * @param _wallet The address of wallet to add.\r\n    */  \r\n    function addWallet(address _wallet) public onlyPrivilegedAddresses {\r\n        require(_wallet != address(0));\r\n        require(!isWhitelisted(_wallet));\r\n        whitelist[_wallet] = true;\r\n        whitelistLength++;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove wallet from whitelist.\r\n    * @dev Accept request from the owner only.\r\n    * @param _wallet The address of whitelisted wallet to remove.\r\n    */  \r\n    function removeWallet(address _wallet) public onlyOwner {\r\n        require(_wallet != address(0));\r\n        require(isWhitelisted(_wallet));\r\n        whitelist[_wallet] = false;\r\n        whitelistLength--;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the specified wallet whether it is in the whitelist.\r\n    * @param _wallet The address of wallet to check.\r\n    */ \r\n    function isWhitelisted(address _wallet) constant public returns (bool) {\r\n        return whitelist[_wallet];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the backend address for automated operations.\r\n    * @param _backendAddress The backend address to allow.\r\n    */\r\n    function setBackendAddress(address _backendAddress) public onlyOwner {\r\n        require(_backendAddress != address(0));\r\n        backendAddress = _backendAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the function to be called only by the owner and backend.\r\n    */\r\n    modifier onlyPrivilegedAddresses() {\r\n        require(msg.sender == owner || msg.sender == backendAddress);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelistable.sol\r\n\r\ncontract Whitelistable {\r\n    Whitelist public whitelist;\r\n\r\n    modifier whenWhitelisted(address _wallet) {\r\n        require(whitelist.isWhitelisted(_wallet));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor for Whitelistable contract.\r\n    */\r\n    function Whitelistable() public {\r\n        whitelist = new Whitelist();\r\n    }\r\n}\r\n\r\n// File: contracts/TiqpitCrowdsale.sol\r\n\r\ncontract TiqpitCrowdsale is Pausable, Whitelistable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant private DECIMALS = 18;\r\n    \r\n    uint256 constant public RESERVED_TOKENS_BOUNTY = 10e6 * (10 ** DECIMALS);\r\n    uint256 constant public RESERVED_TOKENS_FOUNDERS = 25e6 * (10 ** DECIMALS);\r\n    uint256 constant public RESERVED_TOKENS_ADVISORS = 25e5 * (10 ** DECIMALS);\r\n    uint256 constant public RESERVED_TOKENS_TIQPIT_SOLUTIONS = 625e5 * (10 ** DECIMALS);\r\n\r\n    uint256 constant public MIN_INVESTMENT = 200 * (10 ** DECIMALS);\r\n    \r\n    uint256 constant public MINCAP_TOKENS_PRE_ICO = 1e6 * (10 ** DECIMALS);\r\n    uint256 constant public MAXCAP_TOKENS_PRE_ICO = 75e5 * (10 ** DECIMALS);\r\n    \r\n    uint256 constant public MINCAP_TOKENS_ICO = 5e6 * (10 ** DECIMALS);    \r\n    uint256 constant public MAXCAP_TOKENS_ICO = 3925e5 * (10 ** DECIMALS);\r\n\r\n    uint256 public tokensRemainingIco = MAXCAP_TOKENS_ICO;\r\n    uint256 public tokensRemainingPreIco = MAXCAP_TOKENS_PRE_ICO;\r\n\r\n    uint256 public soldTokensPreIco = 0;\r\n    uint256 public soldTokensIco = 0;\r\n    uint256 public soldTokensTotal = 0;\r\n\r\n    uint256 public preIcoRate = 2857;        // 1 PIT = 0.00035 ETH //Base rate for  Pre-ICO stage.\r\n\r\n    // ICO rates\r\n    uint256 public firstRate = 2500;         // 1 PIT = 0.0004 ETH\r\n    uint256 public secondRate = 2222;        // 1 PIT = 0.00045 ETH\r\n    uint256 public thirdRate = 2000;         // 1 PIT = 0.0005 ETH\r\n\r\n    uint256 public startTimePreIco = 0;\r\n    uint256 public endTimePreIco = 0;\r\n\r\n    uint256 public startTimeIco = 0;\r\n    uint256 public endTimeIco = 0;\r\n\r\n    uint256 public weiRaisedPreIco = 0;\r\n    uint256 public weiRaisedIco = 0;\r\n    uint256 public weiRaisedTotal = 0;\r\n\r\n    TiqpitToken public token = new TiqpitToken(this);\r\n\r\n    // Key - address of wallet, Value - address of  contract.\r\n    mapping (address => address) private lockedList;\r\n\r\n    address private tiqpitSolutionsWallet;\r\n    address private foundersWallet;\r\n    address private advisorsWallet;\r\n    address private bountyWallet;\r\n\r\n    address public backendAddress;\r\n\r\n    bool private hasPreIcoFailed = false;\r\n    bool private hasIcoFailed = false;\r\n\r\n    bool private isInitialDistributionDone = false;\r\n\r\n    struct Purchase {\r\n        uint256 refundableWei;\r\n        uint256 burnableTiqs;\r\n    }\r\n\r\n    mapping(address => Purchase) private preIcoPurchases;\r\n    mapping(address => Purchase) private icoPurchases;\r\n\r\n    /**\r\n    * @dev Constructor for TiqpitCrowdsale contract.\r\n    * @dev Set the owner who can manage whitelist and token.\r\n    * @param _startTimePreIco The pre-ICO start time.\r\n    * @param _endTimePreIco The pre-ICO end time.\r\n    * @param _foundersWallet The address to which reserved tokens for founders will be transferred.\r\n    * @param _advisorsWallet The address to which reserved tokens for advisors.\r\n    * @param _tiqpitSolutionsWallet The address to which reserved tokens for Tiqpit Solutions.\r\n    */\r\n    function TiqpitCrowdsale(\r\n        uint256 _startTimePreIco,\r\n        uint256 _endTimePreIco,\r\n        uint256 _startTimeIco,\r\n        uint256 _endTimeIco,\r\n        address _foundersWallet,\r\n        address _advisorsWallet,\r\n        address _tiqpitSolutionsWallet,\r\n        address _bountyWallet\r\n    ) Whitelistable() public\r\n    {\r\n        require(_bountyWallet != address(0) && _foundersWallet != address(0) && _tiqpitSolutionsWallet != address(0) && _advisorsWallet != address(0));\r\n        \r\n        require(_startTimePreIco >= now && _endTimePreIco > _startTimePreIco);\r\n        require(_startTimeIco >= _endTimePreIco && _endTimeIco > _startTimeIco);\r\n\r\n        startTimePreIco = _startTimePreIco;\r\n        endTimePreIco = _endTimePreIco;\r\n\r\n        startTimeIco = _startTimeIco;\r\n        endTimeIco = _endTimeIco;\r\n\r\n        tiqpitSolutionsWallet = _tiqpitSolutionsWallet;\r\n        advisorsWallet = _advisorsWallet;\r\n        foundersWallet = _foundersWallet;\r\n        bountyWallet = _bountyWallet;\r\n\r\n        whitelist.transferOwnership(msg.sender);\r\n        token.transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function can be used to buy tokens.\r\n    */\r\n    function() public payable {\r\n        sellTokens();\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether the pre-ICO is active at the moment.\r\n    */\r\n    function isPreIco() public view returns (bool) {\r\n        return now >= startTimePreIco && now <= endTimePreIco;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether the ICO is active at the moment.\r\n    */\r\n    function isIco() public view returns (bool) {\r\n        return now >= startTimeIco && now <= endTimeIco;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn Remaining Tokens.\r\n    */\r\n    function burnRemainingTokens() onlyOwner public {\r\n        require(tokensRemainingIco > 0);\r\n        require(now > endTimeIco);\r\n\r\n        token.burnFromAddress(this);\r\n\r\n        tokensRemainingIco = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Send tokens to Advisors & Tiqpit Solutions Wallets.\r\n    * @dev Locked  tokens for Founders wallet.\r\n    */\r\n    function initialDistribution() onlyOwner public {\r\n        require(!isInitialDistributionDone);\r\n\r\n        token.transferFromIco(bountyWallet, RESERVED_TOKENS_BOUNTY);\r\n\r\n        token.transferFromIco(advisorsWallet, RESERVED_TOKENS_ADVISORS);\r\n        token.transferFromIco(tiqpitSolutionsWallet, RESERVED_TOKENS_TIQPIT_SOLUTIONS);\r\n        \r\n        lockTokens(foundersWallet, RESERVED_TOKENS_FOUNDERS, 1 years);\r\n\r\n        isInitialDistributionDone = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get Purchase by investor's address.\r\n    * @param _address The address of a ICO investor.\r\n    */\r\n    function getIcoPurchase(address _address) view public returns(uint256 weis, uint256 tokens) {\r\n        return (icoPurchases[_address].refundableWei, icoPurchases[_address].burnableTiqs);\r\n    }\r\n\r\n    /**\r\n    * @dev Get Purchase by investor's address.\r\n    * @param _address The address of a Pre-ICO investor.\r\n    */\r\n    function getPreIcoPurchase(address _address) view public returns(uint256 weis, uint256 tokens) {\r\n        return (preIcoPurchases[_address].refundableWei, preIcoPurchases[_address].burnableTiqs);\r\n    }\r\n\r\n    /**\r\n    * @dev Refund Ether invested in pre-ICO to the sender if pre-ICO failed.\r\n    */\r\n    function refundPreIco() public {\r\n        require(hasPreIcoFailed);\r\n\r\n        require(preIcoPurchases[msg.sender].burnableTiqs > 0 && preIcoPurchases[msg.sender].refundableWei > 0);\r\n        \r\n        uint256 amountWei = preIcoPurchases[msg.sender].refundableWei;\r\n        msg.sender.transfer(amountWei);\r\n\r\n        preIcoPurchases[msg.sender].refundableWei = 0;\r\n        preIcoPurchases[msg.sender].burnableTiqs = 0;\r\n\r\n        token.burnFromAddress(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Refund Ether invested in ICO to the sender if ICO failed.\r\n    */\r\n    function refundIco() public {\r\n        require(hasIcoFailed);\r\n\r\n        require(icoPurchases[msg.sender].burnableTiqs > 0 && icoPurchases[msg.sender].refundableWei > 0);\r\n        \r\n        uint256 amountWei = icoPurchases[msg.sender].refundableWei;\r\n        msg.sender.transfer(amountWei);\r\n\r\n        icoPurchases[msg.sender].refundableWei = 0;\r\n        icoPurchases[msg.sender].burnableTiqs = 0;\r\n\r\n        token.burnFromAddress(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Manual burn tokens from specified address.\r\n    * @param _address The address of a investor.\r\n    */\r\n    function burnTokens(address _address) onlyOwner public {\r\n        require(hasIcoFailed);\r\n\r\n        require(icoPurchases[_address].burnableTiqs > 0 || preIcoPurchases[_address].burnableTiqs > 0);\r\n\r\n        icoPurchases[_address].burnableTiqs = 0;\r\n        preIcoPurchases[_address].burnableTiqs = 0;\r\n\r\n        token.burnFromAddress(_address);\r\n    }\r\n\r\n    /**\r\n    * @dev Manual send tokens  for  specified address.\r\n    * @param _address The address of a investor.\r\n    * @param _tokensAmount Amount of tokens.\r\n    */\r\n    function manualSendTokens(address _address, uint256 _tokensAmount) whenWhitelisted(_address) public onlyPrivilegedAddresses {\r\n        require(_tokensAmount > 0);\r\n        \r\n        if (isPreIco() && _tokensAmount <= tokensRemainingPreIco) {\r\n            token.transferFromIco(_address, _tokensAmount);\r\n\r\n            addPreIcoPurchaseInfo(_address, 0, _tokensAmount);\r\n        } else if (isIco() && _tokensAmount <= tokensRemainingIco && soldTokensPreIco >= MINCAP_TOKENS_PRE_ICO) {\r\n            token.transferFromIco(_address, _tokensAmount);\r\n\r\n            addIcoPurchaseInfo(_address, 0, _tokensAmount);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Get Locked Contract Address.\r\n    */\r\n    function getLockedContractAddress(address wallet) public view returns(address) {\r\n        return lockedList[wallet];\r\n    }\r\n\r\n    /**\r\n    * @dev Enable refund process.\r\n    */\r\n    function triggerFailFlags() onlyOwner public {\r\n        if (!hasPreIcoFailed && now > endTimePreIco && soldTokensPreIco < MINCAP_TOKENS_PRE_ICO) {\r\n            hasPreIcoFailed = true;\r\n        }\r\n\r\n        if (!hasIcoFailed && now > endTimeIco && soldTokensIco < MINCAP_TOKENS_ICO) {\r\n            hasIcoFailed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate rate for ICO phase.\r\n    */\r\n    function currentIcoRate() public view returns(uint256) {     \r\n        if (now > startTimeIco && now <= startTimeIco + 5 days) {\r\n            return firstRate;\r\n        }\r\n\r\n        if (now > startTimeIco + 5 days && now <= startTimeIco + 10 days) {\r\n            return secondRate;\r\n        }\r\n\r\n        if (now > startTimeIco + 10 days) {\r\n            return thirdRate;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Sell tokens during Pre-ICO && ICO stages.\r\n    * @dev Sell tokens only for whitelisted wallets.\r\n    */\r\n    function sellTokens() whenWhitelisted(msg.sender) whenNotPaused public payable {\r\n        require(msg.value > 0);\r\n        \r\n        bool preIco = isPreIco();\r\n        bool ico = isIco();\r\n\r\n        if (ico) {require(soldTokensPreIco >= MINCAP_TOKENS_PRE_ICO);}\r\n        \r\n        require((preIco && tokensRemainingPreIco > 0) || (ico && tokensRemainingIco > 0));\r\n        \r\n        uint256 currentRate = preIco ? preIcoRate : currentIcoRate();\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokensAmount = weiAmount.mul(currentRate);\r\n\r\n        require(tokensAmount >= MIN_INVESTMENT);\r\n\r\n        if (ico) {\r\n            // Move unsold Pre-Ico tokens for current phase.\r\n            if (tokensRemainingPreIco > 0) {\r\n                tokensRemainingIco = tokensRemainingIco.add(tokensRemainingPreIco);\r\n                tokensRemainingPreIco = 0;\r\n            }\r\n        }\r\n       \r\n        uint256 tokensRemaining = preIco ? tokensRemainingPreIco : tokensRemainingIco;\r\n        if (tokensAmount > tokensRemaining) {\r\n            uint256 tokensRemainder = tokensAmount.sub(tokensRemaining);\r\n            tokensAmount = tokensAmount.sub(tokensRemainder);\r\n            \r\n            uint256 overpaidWei = tokensRemainder.div(currentRate);\r\n            msg.sender.transfer(overpaidWei);\r\n\r\n            weiAmount = msg.value.sub(overpaidWei);\r\n        }\r\n\r\n        token.transferFromIco(msg.sender, tokensAmount);\r\n\r\n        if (preIco) {\r\n            addPreIcoPurchaseInfo(msg.sender, weiAmount, tokensAmount);\r\n\r\n            if (soldTokensPreIco >= MINCAP_TOKENS_PRE_ICO) {\r\n                owner.transfer(this.balance);\r\n            }\r\n        }\r\n\r\n        if (ico) {\r\n            addIcoPurchaseInfo(msg.sender, weiAmount, tokensAmount);\r\n\r\n            if (soldTokensIco >= MINCAP_TOKENS_ICO) {\r\n                owner.transfer(this.balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Add new investment to the Pre-ICO investments storage.\r\n    * @param _address The address of a Pre-ICO investor.\r\n    * @param _amountWei The investment received from a Pre-ICO investor.\r\n    * @param _amountTokens The tokens that will be sent to Pre-ICO investor.\r\n    */\r\n    function addPreIcoPurchaseInfo(address _address, uint256 _amountWei, uint256 _amountTokens) internal {\r\n        preIcoPurchases[_address].refundableWei = preIcoPurchases[_address].refundableWei.add(_amountWei);\r\n        preIcoPurchases[_address].burnableTiqs = preIcoPurchases[_address].burnableTiqs.add(_amountTokens);\r\n\r\n        soldTokensPreIco = soldTokensPreIco.add(_amountTokens);\r\n        tokensRemainingPreIco = tokensRemainingPreIco.sub(_amountTokens);\r\n\r\n        weiRaisedPreIco = weiRaisedPreIco.add(_amountWei);\r\n\r\n        soldTokensTotal = soldTokensTotal.add(_amountTokens);\r\n        weiRaisedTotal = weiRaisedTotal.add(_amountWei);\r\n    }\r\n\r\n    /**\r\n    * @dev Add new investment to the ICO investments storage.\r\n    * @param _address The address of a ICO investor.\r\n    * @param _amountWei The investment received from a ICO investor.\r\n    * @param _amountTokens The tokens that will be sent to ICO investor.\r\n    */\r\n    function addIcoPurchaseInfo(address _address, uint256 _amountWei, uint256 _amountTokens) internal {\r\n        icoPurchases[_address].refundableWei = icoPurchases[_address].refundableWei.add(_amountWei);\r\n        icoPurchases[_address].burnableTiqs = icoPurchases[_address].burnableTiqs.add(_amountTokens);\r\n\r\n        soldTokensIco = soldTokensIco.add(_amountTokens);\r\n        tokensRemainingIco = tokensRemainingIco.sub(_amountTokens);\r\n\r\n        weiRaisedIco = weiRaisedIco.add(_amountWei);\r\n\r\n        soldTokensTotal = soldTokensTotal.add(_amountTokens);\r\n        weiRaisedTotal = weiRaisedTotal.add(_amountWei);\r\n    }\r\n\r\n    /**\r\n    * @dev Locked specified amount  of  tokens for  specified wallet.\r\n    * @param _wallet The address of wallet.\r\n    * @param _amount The tokens  for locked.\r\n    * @param _time The time for locked period.\r\n    */\r\n    function lockTokens(address _wallet, uint256 _amount, uint256 _time) internal {\r\n        LockedOutTokens locked = new LockedOutTokens(_wallet, token, endTimePreIco, 1, _amount, _time);\r\n        lockedList[_wallet] = locked;\r\n        token.transferFromIco(locked, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the backend address for automated operations.\r\n    * @param _backendAddress The backend address to allow.\r\n    */\r\n    function setBackendAddress(address _backendAddress) public onlyOwner {\r\n        require(_backendAddress != address(0));\r\n        backendAddress = _backendAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the function to be called only by the owner and backend.\r\n    */\r\n    modifier onlyPrivilegedAddresses() {\r\n        require(msg.sender == owner || msg.sender == backendAddress);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"backendAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backendAddress\",\"type\":\"address\"}],\"name\":\"setBackendAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c8e85bf3e779dd2ef3758538fecc28db62a333cb8fb93f3c971307279d0a5e8e"}]}