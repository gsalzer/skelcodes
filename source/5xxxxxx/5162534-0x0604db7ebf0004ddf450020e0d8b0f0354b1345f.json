{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract BurritoToken is ERC721, Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n  uint256[] private listed;\r\n  uint256 public devOwed;\r\n  uint256 public burritoPoolTotal;\r\n  uint256 public tacoPoolTotal;\r\n  uint256 public saucePoolTotal;\r\n  uint256 public lastPurchase;\r\n\r\n  // Burrito Data\r\n  mapping (uint256 => Token) private tokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  // Balances from % payouts.\r\n  mapping (address => uint256) private payoutBalances; \r\n\r\n  // Events\r\n  event Purchased(uint256 indexed _tokenId, address indexed _owner, uint256 _purchasePrice);\r\n\r\n  // Purchasing Caps for Determining Next Pool Cut\r\n  uint256 private firstCap  = 0.5 ether;\r\n  uint256 private secondCap = 1.0 ether;\r\n  uint256 private thirdCap  = 3.0 ether;\r\n  uint256 private finalCap  = 5.0 ether;\r\n\r\n  // Percentages\r\n  uint256 public feePercentage = 5;\r\n  uint256 public dividendCutPercentage = 100; // 100 / 10000\r\n  uint256 public dividendDecreaseFactor = 2;\r\n  uint256 public megabossCutPercentage = 1;\r\n  uint256 public bossCutPercentage = 1;\r\n  uint256 public mainPoolCutPercentage = 15;\r\n\r\n  // Bosses\r\n  uint256 private megabossTokenId = 10000000;\r\n\r\n  uint256 private BURRITO_KIND = 1;\r\n  uint256 private TACO_KIND = 2;\r\n  uint256 private SAUCE_KIND = 3;\r\n\r\n  // Struct to store Burrito Data\r\n  struct Token {\r\n      uint256 price;         // Current price of the item.\r\n      uint256 lastPrice;     // lastPrice this was sold for, used for adding to pool.\r\n      uint256 payout;        // The percent of the pool rewarded.\r\n      uint256 withdrawn;     // The amount of Eth this token has withdrawn from the pool.\r\n      address owner;         // Current owner of the item.\r\n      uint256 bossTokenId;   // Current boss of the token - 1% bossCut\r\n      uint8   kind;          // 1 - burrito, 2 - taco, 3 - sauce\r\n      address[5] previousOwners;\r\n  }\r\n\r\n  /**\r\n  * @dev createListing Adds new ERC721 Token\r\n  * @param _tokenId uint256 ID of new token\r\n  * @param _price uint256 starting price in wei\r\n  * @param _payoutPercentage uint256 payout percentage (divisible by 10)\r\n  * @param _owner address of new owner\r\n  */\r\n  function createToken(uint256 _tokenId, uint256 _price, uint256 _lastPrice, uint256 _payoutPercentage, uint8 _kind, uint256 _bossTokenId, address _owner) onlyOwner() public {\r\n    require(_price > 0);\r\n    require(_lastPrice < _price);\r\n    // make sure token hasn't been used yet\r\n    require(tokens[_tokenId].price == 0);\r\n    // check for kinds\r\n    require(_kind > 0 && _kind <= 3);\r\n    \r\n    // create new token\r\n    Token storage newToken = tokens[_tokenId];\r\n\r\n    newToken.owner = _owner;\r\n    newToken.price = _price;\r\n    newToken.lastPrice = _lastPrice;\r\n    newToken.payout = _payoutPercentage;\r\n    newToken.kind = _kind;\r\n    newToken.bossTokenId = _bossTokenId;\r\n    newToken.previousOwners = [address(this), address(this), address(this), address(this), address(this)];\r\n\r\n    // store burrito in storage\r\n    listed.push(_tokenId);\r\n    \r\n    // mint new token\r\n    _mint(_owner, _tokenId);\r\n  }\r\n\r\n  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _lastPrices, uint256[] _payouts, uint8[] _kinds, uint256[] _bossTokenIds, address[] _owners) onlyOwner() external {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      createToken(_itemIds[i], _prices[i], _lastPrices[i], _payouts[i], _kinds[i], _bossTokenIds[i], _owners[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Determines next price of token\r\n  * @param _price uint256 ID of current price\r\n  */\r\n  function getNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < firstCap) {\r\n      return _price.mul(200).div(100 - feePercentage);\r\n    } else if (_price < secondCap) {\r\n      return _price.mul(135).div(100 - feePercentage);\r\n    } else if (_price < thirdCap) {\r\n      return _price.mul(125).div(100 - feePercentage);\r\n    } else if (_price < finalCap) {\r\n      return _price.mul(117).div(100 - feePercentage);\r\n    } else {\r\n      return _price.mul(115).div(100 - feePercentage);\r\n    }\r\n  }\r\n\r\n  function calculatePoolCut (uint256 _price) public view returns (uint256 _poolCut) {\r\n    if (_price < firstCap) {\r\n      return _price.mul(10).div(100);\r\n    } else if (_price < secondCap) {\r\n      return _price.mul(9).div(100);\r\n    } else if (_price < thirdCap) {\r\n      return _price.mul(8).div(100);\r\n    } else if (_price < finalCap) {\r\n      return _price.mul(7).div(100);\r\n    } else {\r\n      return _price.mul(5).div(100);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Purchase burrito from previous owner\r\n  * @param _tokenId uint256 of token\r\n  */\r\n  function purchase(uint256 _tokenId) public \r\n    payable\r\n    isNotContract(msg.sender)\r\n  {\r\n    require(!paused);\r\n\r\n    // get data from storage\r\n    Token storage token = tokens[_tokenId];\r\n    uint256 price = token.price;\r\n    address oldOwner = token.owner;\r\n\r\n    // revert checks\r\n    require(price > 0);\r\n    require(msg.value >= price);\r\n    require(oldOwner != msg.sender);\r\n\r\n    // Calculate pool cut for taxes.\r\n    uint256 priceDelta = price.sub(token.lastPrice);\r\n    uint256 poolCut = calculatePoolCut(priceDelta);\r\n    \r\n    _updatePools(token.kind, poolCut);\r\n    \r\n    uint256 fee = price.mul(feePercentage).div(100);\r\n    devOwed = devOwed.add(fee);\r\n\r\n    // Dividends\r\n    uint256 taxesPaid = _payDividendsAndBosses(token, price);\r\n\r\n    _shiftPreviousOwners(token, msg.sender);\r\n\r\n    transferToken(oldOwner, msg.sender, _tokenId);\r\n\r\n    // Transfer payment to old owner minus the developer's and pool's cut.\r\n    // Calculate the winnings for the previous owner.\r\n    uint256 finalPayout = price.sub(fee).sub(poolCut).sub(taxesPaid);\r\n\r\n    // set new prices\r\n    token.lastPrice = price;\r\n    token.price = getNextPrice(price);\r\n\r\n    // raise event\r\n    Purchased(_tokenId, msg.sender, price);\r\n\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(finalPayout);\r\n    }\r\n\r\n    // Calculate overspending\r\n    uint256 excess = msg.value - price;\r\n    \r\n    if (excess > 0) {\r\n        // Refund overspending\r\n        msg.sender.transfer(excess);\r\n    }\r\n    \r\n    // set last purchase price to storage\r\n    lastPurchase = now;\r\n  }\r\n\r\n    /// @dev Shift the 6 most recent buyers, and add the new buyer\r\n  /// to the front.\r\n  /// @param _newOwner The buyer to add to the front of the recent\r\n  /// buyers list.\r\n  function _shiftPreviousOwners(Token storage _token, address _newOwner) private {\r\n      _token.previousOwners[4] = _token.previousOwners[3];\r\n      _token.previousOwners[3] = _token.previousOwners[2];\r\n      _token.previousOwners[2] = _token.previousOwners[1];\r\n      _token.previousOwners[1] = _token.previousOwners[0];\r\n      _token.previousOwners[0] = _newOwner;\r\n  }\r\n\r\n  function _updatePools(uint8 _kind, uint256 _poolCut) internal {\r\n    uint256 poolCutToMain = _poolCut.mul(mainPoolCutPercentage).div(100);\r\n\r\n    if (_kind == BURRITO_KIND) {\r\n      burritoPoolTotal += _poolCut;\r\n    } else if (_kind == TACO_KIND) {\r\n      burritoPoolTotal += poolCutToMain;\r\n\r\n      tacoPoolTotal += _poolCut.sub(poolCutToMain);\r\n    } else if (_kind == SAUCE_KIND) {\r\n      burritoPoolTotal += poolCutToMain;\r\n\r\n      saucePoolTotal += _poolCut.sub(poolCutToMain);\r\n    }\r\n  }\r\n\r\n  // 1%, 0.5%, 0.25%, 0.125%, 0.0625%\r\n  function _payDividendsAndBosses(Token _token, uint256 _price) private returns (uint256 paid) {\r\n    uint256 dividend0 = _price.mul(dividendCutPercentage).div(10000);\r\n    uint256 dividend1 = dividend0.div(dividendDecreaseFactor);\r\n    uint256 dividend2 = dividend1.div(dividendDecreaseFactor);\r\n    uint256 dividend3 = dividend2.div(dividendDecreaseFactor);\r\n    uint256 dividend4 = dividend3.div(dividendDecreaseFactor);\r\n\r\n    // Pay first dividend.\r\n    if (_token.previousOwners[0] != address(this)) {_token.previousOwners[0].transfer(dividend0); paid = paid.add(dividend0);}\r\n    if (_token.previousOwners[1] != address(this)) {_token.previousOwners[1].transfer(dividend1); paid = paid.add(dividend1);}\r\n    if (_token.previousOwners[2] != address(this)) {_token.previousOwners[2].transfer(dividend2); paid = paid.add(dividend2);}\r\n    if (_token.previousOwners[3] != address(this)) {_token.previousOwners[3].transfer(dividend3); paid = paid.add(dividend3);}\r\n    if (_token.previousOwners[4] != address(this)) {_token.previousOwners[4].transfer(dividend4); paid = paid.add(dividend4);}\r\n\r\n    uint256 tax = _price.mul(1).div(100);\r\n\r\n    if (tokens[megabossTokenId].owner != address(0)) {\r\n      tokens[megabossTokenId].owner.transfer(tax);\r\n      paid = paid.add(tax);\r\n    }\r\n\r\n    if (tokens[_token.bossTokenId].owner != address(0)) { \r\n      tokens[_token.bossTokenId].owner.transfer(tax);\r\n      paid = paid.add(tax);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer Token from Previous Owner to New Owner\r\n  * @param _from previous owner address\r\n  * @param _to new owner address\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function transferToken(address _from, address _to, uint256 _tokenId) internal {\r\n\r\n    // check token exists\r\n    require(tokenExists(_tokenId));\r\n\r\n    // make sure previous owner is correct\r\n    require(tokens[_tokenId].owner == _from);\r\n\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    // pay any unpaid payouts to previous owner of burrito\r\n    updateSinglePayout(_from, _tokenId);\r\n\r\n    // clear approvals linked to this token\r\n    clearApproval(_from, _tokenId);\r\n\r\n    // remove token from previous owner\r\n    removeToken(_from, _tokenId);\r\n\r\n    // update owner and add token to new owner\r\n    tokens[_tokenId].owner = _to;\r\n    addToken(_to, _tokenId);\r\n\r\n   //raise event\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw dev's cut\r\n  */\r\n  function withdraw() onlyOwner public {\r\n    owner.transfer(devOwed);\r\n    devOwed = 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Updates the payout for the burritos the owner has\r\n  * @param _owner address of token owner\r\n  */\r\n  // function updatePayout(address _owner) public {\r\n  //   uint256[] memory ownerTokens = ownedTokens[_owner];\r\n  //   uint256 owed;\r\n  //   for (uint256 i = 0; i < ownerTokens.length; i++) {\r\n  //     owed += _calculateOnePayout(ownerTokens[i]);\r\n  //   }\r\n\r\n  //   payoutBalances[_owner] += owed;\r\n  // }\r\n\r\n  function updatePayout(address _owner) public {\r\n    uint256[] memory ownerTokens = ownedTokens[_owner];\r\n    uint256 owed;\r\n    for (uint256 i = 0; i < ownerTokens.length; i++) {\r\n        uint256 totalOwed;\r\n        \r\n        if (tokens[ownerTokens[i]].kind == BURRITO_KIND) {\r\n          totalOwed = burritoPoolTotal * tokens[ownerTokens[i]].payout / 10000;\r\n        } else if (tokens[ownerTokens[i]].kind == TACO_KIND) {\r\n          totalOwed = tacoPoolTotal * tokens[ownerTokens[i]].payout / 10000;\r\n        } else if (tokens[ownerTokens[i]].kind == SAUCE_KIND) {\r\n          totalOwed = saucePoolTotal * tokens[ownerTokens[i]].payout / 10000;\r\n        }\r\n\r\n        uint256 totalTokenOwed = totalOwed.sub(tokens[ownerTokens[i]].withdrawn);\r\n        owed += totalTokenOwed;\r\n        \r\n        tokens[ownerTokens[i]].withdrawn += totalTokenOwed;\r\n    }\r\n    payoutBalances[_owner] += owed;\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256) {\r\n    return tokens[_tokenId].price;\r\n  }\r\n\r\n  /**\r\n   * @dev Update a single burrito payout for transfers.\r\n   * @param _owner Address of the owner of the burrito.\r\n   * @param _tokenId Unique Id of the token.\r\n  **/\r\n  function updateSinglePayout(address _owner, uint256 _tokenId) internal {\r\n    uint256 totalOwed;\r\n        \r\n    if (tokens[_tokenId].kind == BURRITO_KIND) {\r\n      totalOwed = burritoPoolTotal * tokens[_tokenId].payout / 10000;\r\n    } else if (tokens[_tokenId].kind == TACO_KIND) {\r\n      totalOwed = tacoPoolTotal * tokens[_tokenId].payout / 10000;\r\n    } else if (tokens[_tokenId].kind == SAUCE_KIND) {\r\n      totalOwed = saucePoolTotal * tokens[_tokenId].payout / 10000;\r\n    }\r\n\r\n    uint256 totalTokenOwed = totalOwed.sub(tokens[_tokenId].withdrawn);\r\n        \r\n    tokens[_tokenId].withdrawn += totalTokenOwed;\r\n    payoutBalances[_owner] += totalTokenOwed;\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can withdraw their accumulated payouts\r\n  * @param _owner address of token owner\r\n  */\r\n  function withdrawRent(address _owner) public {\r\n    require(_owner != address(0));\r\n    updatePayout(_owner);\r\n    uint256 payout = payoutBalances[_owner];\r\n    payoutBalances[_owner] = 0;\r\n    _owner.transfer(payout);\r\n  }\r\n\r\n  function getRentOwed(address _owner) public view returns (uint256 owed) {\r\n    require(_owner != address(0));\r\n    updatePayout(_owner);\r\n    return payoutBalances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Return all burrito data\r\n  * @param _tokenId uint256 of token\r\n  */\r\n  function getToken (uint256 _tokenId) external view \r\n  returns (address _owner, uint256 _price, uint256 _lastPrice, uint256 _nextPrice, uint256 _payout, uint8 _kind, uint256 _bossTokenId, address[5] _previosOwners) \r\n  {\r\n    Token memory token = tokens[_tokenId];\r\n    return (token.owner, token.price, token.lastPrice, getNextPrice(token.price), token.payout, token.kind, token.bossTokenId, token.previousOwners);\r\n  }\r\n\r\n  /**\r\n  * @dev Determines if token exists by checking it's price\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\r\n    return tokens[_tokenId].price > 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is not a contract\r\n  * @param _buyer address of person buying burrito\r\n  */\r\n  modifier isNotContract(address _buyer) {\r\n    uint size;\r\n    assembly { size := extcodesize(_buyer) }\r\n    require(size == 0);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n  \r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    updateSinglePayout(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n\r\n    /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    tokens[_tokenId].owner = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"CryptoBurrito.co\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"MBT\";\r\n  }\r\n\r\n  function setFeePercentage(uint256 _newFee) onlyOwner public {\r\n    require(_newFee <= 5);\r\n    require(_newFee >= 3);\r\n\r\n    feePercentage = _newFee;\r\n  }\r\n  \r\n  function setMainPoolCutPercentage(uint256 _newFee) onlyOwner public {\r\n    require(_newFee <= 30);\r\n    require(_newFee >= 5);\r\n\r\n    mainPoolCutPercentage = _newFee;\r\n  }\r\n\r\n  function setDividendCutPercentage(uint256 _newFee) onlyOwner public {\r\n    require(_newFee <= 200);\r\n    require(_newFee >= 50);\r\n\r\n    dividendCutPercentage = _newFee;\r\n  }\r\n\r\n  // Migration\r\n  OldContract oldContract;\r\n\r\n  function setOldContract(address _addr) onlyOwner public {\r\n    oldContract = OldContract(_addr);\r\n  }\r\n\r\n  function populateFromOldContract(uint256[] _ids) onlyOwner public {\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      // Can't rewrite tokens\r\n      if (tokens[_ids[i]].price == 0) {\r\n        address _owner;\r\n        uint256 _price;\r\n        uint256 _lastPrice;\r\n        uint256 _nextPrice;\r\n        uint256 _payout;\r\n        uint8 _kind;\r\n        uint256 _bossTokenId;\r\n\r\n        (_owner, _price, _lastPrice, _nextPrice, _payout, _kind, _bossTokenId) = oldContract.getToken(_ids[i]);\r\n\r\n        createToken(_ids[i], _price, _lastPrice, _payout, _kind, _bossTokenId, _owner);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface OldContract {\r\n  function getToken (uint256 _tokenId) external view \r\n  returns (address _owner, uint256 _price, uint256 _lastPrice, uint256 _nextPrice, uint256 _payout, uint8 _kind, uint256 _bossTokenId);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_lastPrices\",\"type\":\"uint256[]\"},{\"name\":\"_payouts\",\"type\":\"uint256[]\"},{\"name\":\"_kinds\",\"type\":\"uint8[]\"},{\"name\":\"_bossTokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"createMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getRentOwed\",\"outputs\":[{\"name\":\"owed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"populateFromOldContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainPoolCutPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"megabossCutPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendDecreaseFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burritoPoolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bossCutPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculatePoolCut\",\"outputs\":[{\"name\":\"_poolCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawRent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_lastPrice\",\"type\":\"uint256\"},{\"name\":\"_payoutPercentage\",\"type\":\"uint256\"},{\"name\":\"_kind\",\"type\":\"uint8\"},{\"name\":\"_bossTokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setMainPoolCutPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setDividendCutPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saucePoolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendCutPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOldContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_lastPrice\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_payout\",\"type\":\"uint256\"},{\"name\":\"_kind\",\"type\":\"uint8\"},{\"name\":\"_bossTokenId\",\"type\":\"uint256\"},{\"name\":\"_previosOwners\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updatePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tacoPoolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_purchasePrice\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BurritoToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8e5b604fb0f4c4babd5442eb666411e5908b0623addf40f2449091c7849b4fb"}]}