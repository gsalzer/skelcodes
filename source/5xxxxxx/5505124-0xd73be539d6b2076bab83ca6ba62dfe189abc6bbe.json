{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/// BlockchainCuties: Collectible and breedable cuties on the Ethereum blockchain.\r\n/// https://blockchaincuties.co/\r\n\r\n\r\n/// @title defined the interface that will be referenced in main Cutie contract\r\ncontract GeneMixerInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isGeneMixer() external pure returns (bool);\r\n\r\n    /// @dev given genes of cutie 1 & 2, return a genetic combination - may have a random factor\r\n    /// @param genes1 genes of mom\r\n    /// @param genes2 genes of dad\r\n    /// @return the genes that are supposed to be passed down the child\r\n    function mixGenes(uint256 genes1, uint256 genes2) public view returns (uint256);\r\n\r\n    function canBreed(uint40 momId, uint256 genes1, uint40 dadId, uint256 genes2) public view returns (bool);\r\n}\r\n\r\n\r\n\r\n/// @author https://BlockChainArchitect.iocontract Bank is CutiePluginBase\r\ncontract PluginInterface\r\n{\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isPluginInterface() public pure returns (bool);\r\n\r\n    function onRemove() public;\r\n\r\n    /// @dev Begins new feature.\r\n    /// @param _cutieId - ID of token to auction, sender must be owner.\r\n    /// @param _parameter - arbitrary parameter\r\n    /// @param _seller - Old owner, if not the message sender\r\n    function run(\r\n        uint40 _cutieId,\r\n        uint256 _parameter,\r\n        address _seller\r\n    ) \r\n    public\r\n    payable;\r\n\r\n    /// @dev Begins new feature, approved and signed by COO.\r\n    /// @param _cutieId - ID of token to auction, sender must be owner.\r\n    /// @param _parameter - arbitrary parameter\r\n    function runSigned(\r\n        uint40 _cutieId,\r\n        uint256 _parameter,\r\n        address _owner\r\n    )\r\n    external\r\n    payable;\r\n\r\n    function withdraw() public;\r\n}\r\n\r\n\r\n\r\n/// @title Auction Market for Blockchain Cuties.\r\n/// @author https://BlockChainArchitect.io\r\ncontract MarketInterface \r\n{\r\n    function withdrawEthFromBalance() external;    \r\n\r\n    function createAuction(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller) public payable;\r\n\r\n    function bid(uint40 _cutieId) public payable;\r\n\r\n    function cancelActiveAuctionWhenPaused(uint40 _cutieId) public;\r\n\r\n\tfunction getAuctionInfo(uint40 _cutieId)\r\n        public\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint128 startPrice,\r\n        uint128 endPrice,\r\n        uint40 duration,\r\n        uint40 startedAt,\r\n        uint128 featuringFee\r\n    );\r\n}\r\n\r\n\r\n\r\n/// @title BlockchainCuties: Collectible and breedable cuties on the Ethereum blockchain.\r\n/// @author https://BlockChainArchitect.io\r\n/// @dev This is the BlockchainCuties configuration. It can be changed redeploying another version.\r\ncontract ConfigInterface\r\n{\r\n    function isConfig() public pure returns (bool);\r\n\r\n    function getCooldownIndexFromGeneration(uint16 _generation) public view returns (uint16);\r\n    \r\n    function getCooldownEndTimeFromIndex(uint16 _cooldownIndex) public view returns (uint40);\r\n\r\n    function getCooldownIndexCount() public view returns (uint256);\r\n    \r\n    function getBabyGen(uint16 _momGen, uint16 _dadGen) public pure returns (uint16);\r\n\r\n    function getTutorialBabyGen(uint16 _dadGen) public pure returns (uint16);\r\n\r\n    function getBreedingFee(uint40 _momId, uint40 _dadId) public pure returns (uint256);\r\n}\r\n\r\n\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0xf0b9e5ba\r\ninterface ERC721TokenReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    ///  than the magic value MUST result in the transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _from The sending address \r\n    /// @param _tokenId The NFT identifier which is being transfered\r\n    /// @param data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n\r\n/// @title BlockchainCuties: Collectible and breedable cuties on the Ethereum blockchain.\r\n/// @author https://BlockChainArchitect.io\r\n/// @dev This is the main BlockchainCuties contract. For separated logical sections the code is divided in \r\n// several separately-instantiated sibling contracts that handle auctions and the genetic combination algorithm. \r\n// By keeping auctions separate it is possible to upgrade them without disrupting the main contract that tracks\r\n// the ownership of the cutie. The genetic combination algorithm is kept separate so that all of the rest of the \r\n// code can be open-sourced.\r\n// The contracts:\r\n//\r\n//      - BlockchainCuties: The fundamental code, including main data storage, constants and data types, as well as\r\n//             internal functions for managing these items ans ERC-721 implementation.\r\n//             Various addresses and constraints for operations can be executed only by specific roles - \r\n//             Owner, Operator and Parties.\r\n//             Methods for interacting with additional features (Plugins).\r\n//             The methods for breeding and keeping track of breeding offers, relies on external genetic combination \r\n//             contract.\r\n//             Public methods for auctioning or bidding or breeding. \r\n//\r\n//      - SaleMarket and BreedingMarket: The actual auction functionality is handled in two sibling contracts - one\r\n//             for sales and one for breeding. Auction creation and bidding is mostly mediated through this side of \r\n//             the core contract.\r\n//\r\n//      - Effects: Contracts allow to use item effects on cuties, implemented as plugins. Items are not stored in \r\n//             blockchain to not overload Ethereum network. Operator generates signatures, and Plugins check it\r\n//             and perform effect.\r\n//\r\n//      - ItemMarket: Plugin contract used to transfer money from buyer to seller.\r\n//\r\n//      - Bank: Plugin contract used to receive payments for payed features.\r\n\r\ncontract BlockchainCutiesCore /*is ERC721, CutieCoreInterface*/\r\n{\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external pure returns (string _name) \r\n    {\r\n        return \"BlockchainCuties\"; \r\n    }\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external pure returns (string _symbol)\r\n    {\r\n        return \"BC\";\r\n    }\r\n    \r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool)\r\n    {\r\n        return\r\n            interfaceID == 0x6466353c || \r\n            interfaceID == bytes4(keccak256('supportsInterface(bytes4)'));\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @dev The Birth event is fired as soon as a new cutie is created. This\r\n    ///  is any time a cutie comes into existence through the giveBirth method, as well as\r\n    ///  when a new gen0 cutie is created.\r\n    event Birth(address indexed owner, uint40 cutieId, uint40 momId, uint40 dadId, uint256 genes);\r\n\r\n    /// @dev This struct represents a blockchain Cutie. It was ensured that struct fits well into\r\n    ///  exactly two 256-bit words. The order of the members in this structure\r\n    ///  matters because of the Ethereum byte-packing rules.\r\n    ///  Reference: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Cutie\r\n    {\r\n        // The Cutie's genetic code is in these 256-bits. Cutie's genes never change.\r\n        uint256 genes;\r\n\r\n        // The timestamp from the block when this cutie was created.\r\n        uint40 birthTime;\r\n\r\n        // The minimum timestamp after which the cutie can start breeding\r\n        // again.\r\n        uint40 cooldownEndTime;\r\n\r\n        // The cutie's parents ID is set to 0 for gen0 cuties.\r\n        // Because of using 32-bit unsigned integers the limit is 4 billion cuties. \r\n        // Current Ethereum annual limit is about 500 million transactions.\r\n        uint40 momId;\r\n        uint40 dadId;\r\n\r\n        // Set the index in the cooldown array (see below) that means\r\n        // the current cooldown duration for this Cutie. Starts at 0\r\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\r\n        // Incremented by one for each successful breeding, regardless\r\n        // of being cutie mom or cutie dad.\r\n        uint16 cooldownIndex;\r\n\r\n        // The \"generation number\" of the cutie. Cutioes minted by the contract\r\n        // for sale are called \"gen0\" with generation number of 0. All other cuties' \r\n        // generation number is the larger of their parents' two generation\r\n        // numbers, plus one (i.e. max(mom.generation, dad.generation) + 1)\r\n        uint16 generation;\r\n\r\n        // Some optional data used by external contracts\r\n        // Cutie struct is 2x256 bits long.\r\n        uint64 optional;\r\n    }\r\n\r\n    /// @dev An array containing the Cutie struct for all Cuties in existence. The ID\r\n    ///  of each cutie is actually an index into this array. ID 0 is the parent \r\n    /// of all generation 0 cats, and both parents to itself. It is an invalid genetic code.\r\n    Cutie[] public cuties;\r\n\r\n    /// @dev A mapping from cutie IDs to the address that owns them. All cuties have\r\n    ///  some valid owner address, even gen0 cuties are created with a non-zero owner.\r\n    mapping (uint40 => address) public cutieIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from CutieIDs to an address that has been approved to call\r\n    ///  transferFrom(). A Cutie can have one approved address for transfer\r\n    ///  at any time. A zero value means that there is no outstanding approval.\r\n    mapping (uint40 => address) public cutieIndexToApproved;\r\n\r\n    /// @dev A mapping from CutieIDs to an address that has been approved to use\r\n    ///  this Cutie for breeding via breedWith(). A Cutie can have one approved\r\n    ///  address for breeding at any time. A zero value means that there is no outstanding approval.\r\n    mapping (uint40 => address) public sireAllowedToAddress;\r\n\r\n\r\n    /// @dev The address of the Market contract used to sell cuties. This\r\n    ///  contract used both peer-to-peer sales and the gen0 sales that are\r\n    ///  initiated each 15 minutes.\r\n    MarketInterface public saleMarket;\r\n\r\n    /// @dev The address of a custom Market subclassed contract used for breeding\r\n    ///  auctions. Is to be separated from saleMarket as the actions taken on success\r\n    ///  after a sales and breeding auction are quite different.\r\n    MarketInterface public breedingMarket;\r\n\r\n\r\n    // Modifiers to check that inputs can be safely stored with a certain\r\n    // number of bits.\r\n    modifier canBeStoredIn40Bits(uint256 _value) {\r\n        require(_value <= 0xFFFFFFFFFF);\r\n        _;\r\n    }    \r\n\r\n    /// @notice Returns the total number of Cuties in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() external view returns (uint256)\r\n    {\r\n        return cuties.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the total number of Cuties in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function _totalSupply() internal view returns (uint256)\r\n    {\r\n        return cuties.length - 1;\r\n    }\r\n    \r\n    // Internal utility functions assume that their input arguments\r\n    // are valid. Public methods sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a certain Cutie.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _cutieId cutie id, only valid when > 0\r\n    function _isOwner(address _claimant, uint40 _cutieId) internal view returns (bool)\r\n    {\r\n        return cutieIndexToOwner[_cutieId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a certain Cutie.\r\n    /// @param _claimant the address we are confirming the cutie is approved for.\r\n    /// @param _cutieId cutie id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint40 _cutieId) internal view returns (bool)\r\n    {\r\n        return cutieIndexToApproved[_cutieId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is done on purpose:\r\n    ///  _approve() and transferFrom() are used together for putting Cuties on auction. \r\n    ///  There is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint40 _cutieId, address _approved) internal\r\n    {\r\n        cutieIndexToApproved[_cutieId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of Cuties owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) external view returns (uint256 count)\r\n    {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Cutie to another address. When transferring to a smart\r\n    ///  contract, ensure that it is aware of ERC-721 (or\r\n    ///  BlockchainCuties specifically), otherwise the Cutie may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _cutieId The ID of the Cutie to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _cutieId) external whenNotPaused canBeStoredIn40Bits(_cutieId)\r\n    {\r\n        // You can only send your own cutie.\r\n        require(_isOwner(msg.sender, uint40(_cutieId)));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, uint40(_cutieId));\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a perticular Cutie via transferFrom().\r\n    /// This flow is preferred for transferring NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to clear all approvals.\r\n    /// @param _cutieId The ID of the Cutie that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint256 _cutieId) external whenNotPaused canBeStoredIn40Bits(_cutieId)\r\n    {\r\n        // Only cutie's owner can grant transfer approval.\r\n        require(_isOwner(msg.sender, uint40(_cutieId)));\r\n\r\n        // Registering approval replaces any previous approval.\r\n        _approve(uint40(_cutieId), _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _cutieId);\r\n    }\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address.\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        external whenNotPaused canBeStoredIn40Bits(_tokenId)\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_to != address(saleMarket));\r\n        require(_to != address(breedingMarket));\r\n       \r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, uint40(_tokenId)) || _isApprovedForAll(_from, msg.sender));\r\n        require(_isOwner(_from, uint40(_tokenId)));\r\n\r\n        // Reassign ownership, clearing pending approvals and emitting Transfer event.\r\n        _transfer(_from, _to, uint40(_tokenId));\r\n        ERC721TokenReceiver (_to).onERC721Received(_from, _tokenId, data);\r\n    }\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\"\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \r\n        external whenNotPaused canBeStoredIn40Bits(_tokenId)\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_to != address(saleMarket));\r\n        require(_to != address(breedingMarket));\r\n       \r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, uint40(_tokenId)) || _isApprovedForAll(_from, msg.sender));\r\n        require(_isOwner(_from, uint40(_tokenId)));\r\n\r\n        // Reassign ownership, clearing pending approvals and emitting Transfer event.\r\n        _transfer(_from, _to, uint40(_tokenId));\r\n    }\r\n\r\n    /// @notice Transfer a Cutie owned by another address, for which the calling address\r\n    ///  has been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Cutie to be transfered.\r\n    /// @param _to Any address, including the caller address, can take ownership of the Cutie.\r\n    /// @param _tokenId The ID of the Cutie to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) \r\n        external whenNotPaused canBeStoredIn40Bits(_tokenId) \r\n    {\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, uint40(_tokenId)) || _isApprovedForAll(_from, msg.sender));\r\n        require(_isOwner(_from, uint40(_tokenId)));\r\n\r\n        // Reassign ownership, clearing pending approvals and emitting Transfer event.\r\n        _transfer(_from, _to, uint40(_tokenId));\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Cutie.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _cutieId)\r\n        external\r\n        view\r\n        canBeStoredIn40Bits(_cutieId)\r\n        returns (address owner)\r\n    {\r\n        owner = cutieIndexToOwner[uint40(_cutieId)];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns the nth Cutie assigned to an address, with n specified by the\r\n    ///  _index argument.\r\n    /// @param _owner The owner of the Cuties we are interested in.\r\n    /// @param _index The zero-based index of the cutie within the owner's list of cuties.\r\n    ///  Must be less than balanceOf(_owner).\r\n    /// @dev This method must not be called by smart contract code. It will almost\r\n    ///  certainly blow past the block gas limit once there are a large number of\r\n    ///  Cuties in existence. Exists only to allow off-chain queries of ownership.\r\n    ///  Optional method for ERC-721.\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256 cutieId)\r\n    {\r\n        uint40 count = 0;\r\n        for (uint40 i = 1; i <= _totalSupply(); ++i) {\r\n            if (cutieIndexToOwner[i] == _owner) {\r\n                if (count == _index) {\r\n                    return i;\r\n                } else {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n    /// @notice Enumerate valid NFTs\r\n    /// @dev Throws if `_index` >= `totalSupply()`.\r\n    /// @param _index A counter less than `totalSupply()`\r\n    /// @return The token identifier for the `_index`th NFT,\r\n    ///  (sort order not specified)\r\n    function tokenByIndex(uint256 _index) external pure returns (uint256)\r\n    {\r\n        return _index;\r\n    }\r\n\r\n    /// @dev A mapping from Cuties owner (account) to an address that has been approved to call\r\n    ///  transferFrom() for all cuties, owned by owner.\r\n    ///  Only one approved address is permitted for each account for transfer\r\n    ///  at any time. A zero value means there is no outstanding approval.\r\n    mapping (address => address) public addressToApprovedAll;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all your asset.\r\n    /// @dev Emits the ApprovalForAll event\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external\r\n    {\r\n        if (_approved)\r\n        {\r\n            addressToApprovedAll[msg.sender] = _operator;\r\n        }\r\n        else\r\n        {\r\n            delete addressToApprovedAll[msg.sender];\r\n        }\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) \r\n        external view canBeStoredIn40Bits(_tokenId) \r\n        returns (address)\r\n    {\r\n        require(_tokenId <= _totalSupply());\r\n\r\n        if (cutieIndexToApproved[uint40(_tokenId)] != address(0))\r\n        {\r\n            return cutieIndexToApproved[uint40(_tokenId)];\r\n        }\r\n\r\n        address owner = cutieIndexToOwner[uint40(_tokenId)];\r\n        return addressToApprovedAll[owner];\r\n    }\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool)\r\n    {\r\n        return addressToApprovedAll[_owner] == _operator;\r\n    }\r\n\r\n    function _isApprovedForAll(address _owner, address _operator) internal view returns (bool)\r\n    {\r\n        return addressToApprovedAll[_owner] == _operator;\r\n    }\r\n\r\n    ConfigInterface public config;\r\n\r\n    /// @dev Update the address of the config contract.\r\n    /// @param _address An address of a ConfigInterface contract instance to be used from this point forward.\r\n    function setConfigAddress(address _address) public onlyOwner\r\n    {\r\n        ConfigInterface candidateContract = ConfigInterface(_address);\r\n\r\n        require(candidateContract.isConfig());\r\n\r\n        // Set the new contract address\r\n        config = candidateContract;\r\n    }\r\n\r\n    function getCooldownIndexFromGeneration(uint16 _generation) internal view returns (uint16)\r\n    {\r\n        return config.getCooldownIndexFromGeneration(_generation);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new cutie and stores it. This\r\n    ///  method does not check anything and should only be called when the\r\n    ///  input data is valid for sure. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n    /// @param _momId The cutie ID of the mom of this cutie (zero for gen0)\r\n    /// @param _dadId The cutie ID of the dad of this cutie (zero for gen0)\r\n    /// @param _generation The generation number of this cutie, must be computed by caller.\r\n    /// @param _genes The cutie's genetic code.\r\n    /// @param _owner The initial owner of this cutie, must be non-zero (except for the unCutie, ID 0)\r\n    function _createCutie(\r\n        uint40 _momId,\r\n        uint40 _dadId,\r\n        uint16 _generation,\r\n        uint16 _cooldownIndex,\r\n        uint256 _genes,\r\n        address _owner,\r\n        uint40 _birthTime\r\n    )\r\n        internal\r\n        returns (uint40)\r\n    {\r\n        Cutie memory _cutie = Cutie({\r\n            genes: _genes, \r\n            birthTime: _birthTime, \r\n            cooldownEndTime: 0, \r\n            momId: _momId, \r\n            dadId: _dadId, \r\n            cooldownIndex: _cooldownIndex, \r\n            generation: _generation,\r\n            optional: 0\r\n        });\r\n        uint256 newCutieId256 = cuties.push(_cutie) - 1;\r\n\r\n        // Check if id can fit into 40 bits\r\n        require(newCutieId256 <= 0xFFFFFFFFFF);\r\n\r\n        uint40 newCutieId = uint40(newCutieId256);\r\n\r\n        // emit the birth event\r\n        emit Birth(_owner, newCutieId, _cutie.momId, _cutie.dadId, _cutie.genes);\r\n\r\n        // This will assign ownership, as well as emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, newCutieId);\r\n\r\n        return newCutieId;\r\n    }\r\n  \r\n    /// @notice Returns all the relevant information about a certain cutie.\r\n    /// @param _id The ID of the cutie of interest.\r\n    function getCutie(uint40 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 genes,\r\n        uint40 birthTime,\r\n        uint40 cooldownEndTime,\r\n        uint40 momId,\r\n        uint40 dadId,\r\n        uint16 cooldownIndex,\r\n        uint16 generation\r\n    ) {\r\n        Cutie storage cutie = cuties[_id];\r\n\r\n        genes = cutie.genes;\r\n        birthTime = cutie.birthTime;\r\n        cooldownEndTime = cutie.cooldownEndTime;\r\n        momId = cutie.momId;\r\n        dadId = cutie.dadId;\r\n        cooldownIndex = cutie.cooldownIndex;\r\n        generation = cutie.generation;\r\n    }    \r\n    \r\n    /// @dev Assigns ownership of a particular Cutie to an address.\r\n    function _transfer(address _from, address _to, uint40 _cutieId) internal {\r\n        // since the number of cuties is capped to 2^40\r\n        // there is no way to overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        cutieIndexToOwner[_cutieId] = _to;\r\n        // When creating new cuties _from is 0x0, but we cannot account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // once the cutie is transferred also clear breeding allowances\r\n            delete sireAllowedToAddress[_cutieId];\r\n            // clear any previously approved ownership exchange\r\n            delete cutieIndexToApproved[_cutieId];\r\n        }\r\n        // Emit the transfer event.\r\n        emit Transfer(_from, _to, _cutieId);\r\n    }\r\n\r\n    /// @dev For transferring a cutie owned by this contract to the specified address.\r\n    ///  Used to rescue lost cuties. (There is no \"proper\" flow where this contract\r\n    ///  should be the owner of any Cutie. This function exists for us to reassign\r\n    ///  the ownership of Cuties that users may have accidentally sent to our address.)\r\n    /// @param _cutieId - ID of cutie\r\n    /// @param _recipient - Address to send the cutie to\r\n    function restoreCutieToAddress(uint40 _cutieId, address _recipient) public onlyOperator whenNotPaused {\r\n        require(_isOwner(this, _cutieId));\r\n        _transfer(this, _recipient, _cutieId);\r\n    }\r\n\r\n    address ownerAddress;\r\n    address operatorAddress;\r\n\r\n    bool public paused = false;\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public onlyOwner\r\n    {\r\n        require(_newOwner != address(0));\r\n\r\n        ownerAddress = _newOwner;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress || msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n    function setOperator(address _newOperator) public onlyOwner {\r\n        require(_newOperator != address(0));\r\n\r\n        operatorAddress = _newOperator;\r\n    }\r\n\r\n    modifier whenNotPaused()\r\n    {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused\r\n    {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused\r\n    {\r\n        paused = true;\r\n    }\r\n\r\n    string public metadataUrlPrefix = \"https://blockchaincuties.co/cutie/\";\r\n    string public metadataUrlSuffix = \".svg\";\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenId) external view returns (string infoUrl)\r\n    {\r\n        return \r\n            concat(toSlice(metadataUrlPrefix), \r\n                toSlice(concat(toSlice(uintToString(_tokenId)), toSlice(metadataUrlSuffix))));\r\n    }\r\n\r\n    function setMetadataUrl(string _metadataUrlPrefix, string _metadataUrlSuffix) public onlyOwner\r\n    {\r\n        metadataUrlPrefix = _metadataUrlPrefix;\r\n        metadataUrlSuffix = _metadataUrlSuffix;\r\n    }\r\n\r\n\r\n    mapping(address => PluginInterface) public plugins;\r\n    PluginInterface[] public pluginsArray;\r\n    mapping(uint40 => address) public usedSignes;\r\n    uint40 public minSignId;\r\n\r\n    event GenesChanged(uint40 indexed cutieId, uint256 oldValue, uint256 newValue);\r\n    event CooldownEndTimeChanged(uint40 indexed cutieId, uint40 oldValue, uint40 newValue);\r\n    event CooldownIndexChanged(uint40 indexed cutieId, uint16 ololdValue, uint16 newValue);\r\n    event GenerationChanged(uint40 indexed cutieId, uint16 oldValue, uint16 newValue);\r\n    event OptionalChanged(uint40 indexed cutieId, uint64 oldValue, uint64 newValue);\r\n    event SignUsed(uint40 signId, address sender);\r\n    event MinSignSet(uint40 signId);\r\n\r\n    /// @dev Sets the reference to the plugin contract.\r\n    /// @param _address - Address of plugin contract.\r\n    function addPlugin(address _address) public onlyOwner\r\n    {\r\n        PluginInterface candidateContract = PluginInterface(_address);\r\n\r\n        // verify that a contract is what we expect\r\n        require(candidateContract.isPluginInterface());\r\n\r\n        // Set the new contract address\r\n        plugins[_address] = candidateContract;\r\n        pluginsArray.push(candidateContract);\r\n    }\r\n\r\n    /// @dev Remove plugin and calls onRemove to cleanup\r\n    function removePlugin(address _address) public onlyOwner\r\n    {\r\n        plugins[_address].onRemove();\r\n        delete plugins[_address];\r\n\r\n        uint256 kindex = 0;\r\n        while (kindex < pluginsArray.length)\r\n        {\r\n            if (address(pluginsArray[kindex]) == _address)\r\n            {\r\n                pluginsArray[kindex] = pluginsArray[pluginsArray.length-1];\r\n                pluginsArray.length--;\r\n            }\r\n            else\r\n            {\r\n                kindex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Put a cutie up for plugin feature.\r\n    function runPlugin(\r\n        address _pluginAddress,\r\n        uint40 _cutieId,\r\n        uint256 _parameter\r\n    )\r\n        public\r\n        whenNotPaused\r\n        payable\r\n    {\r\n        // If cutie is already on any auction or in adventure, this will throw\r\n        // because it will be owned by the other contract.\r\n        // If _cutieId is 0, then cutie is not used on this feature.\r\n        require(_cutieId == 0 || _isOwner(msg.sender, _cutieId));\r\n        require(address(plugins[_pluginAddress]) != address(0));\r\n        if (_cutieId > 0)\r\n        {\r\n            _approve(_cutieId, _pluginAddress);\r\n        }\r\n\r\n        // Plugin contract throws if inputs are invalid and clears\r\n        // transfer after escrowing the cutie.\r\n        plugins[_pluginAddress].run.value(msg.value)(\r\n            _cutieId,\r\n            _parameter,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Called from plugin contract when using items as effect\r\n    function getGenes(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint256 genes\r\n    )\r\n    {\r\n        Cutie storage cutie = cuties[_id];\r\n        genes = cutie.genes;\r\n    }\r\n\r\n    /// @dev Called from plugin contract when using items as effect\r\n    function changeGenes(\r\n        uint40 _cutieId,\r\n        uint256 _genes)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // if caller is registered plugin contract\r\n        require(address(plugins[msg.sender]) != address(0));\r\n\r\n        Cutie storage cutie = cuties[_cutieId];\r\n        if (cutie.genes != _genes)\r\n        {\r\n            emit GenesChanged(_cutieId, cutie.genes, _genes);\r\n            cutie.genes = _genes;\r\n        }\r\n    }\r\n\r\n    function getCooldownEndTime(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint40 cooldownEndTime\r\n    ) {\r\n        Cutie storage cutie = cuties[_id];\r\n\r\n        cooldownEndTime = cutie.cooldownEndTime;\r\n    }\r\n\r\n    function changeCooldownEndTime(\r\n        uint40 _cutieId,\r\n        uint40 _cooldownEndTime)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(address(plugins[msg.sender]) != address(0));\r\n\r\n        Cutie storage cutie = cuties[_cutieId];\r\n        if (cutie.cooldownEndTime != _cooldownEndTime)\r\n        {\r\n            emit CooldownEndTimeChanged(_cutieId, cutie.cooldownEndTime, _cooldownEndTime);\r\n            cutie.cooldownEndTime = _cooldownEndTime;\r\n        }\r\n    }\r\n\r\n    function getCooldownIndex(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint16 cooldownIndex\r\n    ) {\r\n        Cutie storage cutie = cuties[_id];\r\n\r\n        cooldownIndex = cutie.cooldownIndex;\r\n    }\r\n\r\n    function changeCooldownIndex(\r\n        uint40 _cutieId,\r\n        uint16 _cooldownIndex)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(address(plugins[msg.sender]) != address(0));\r\n\r\n        Cutie storage cutie = cuties[_cutieId];\r\n        if (cutie.cooldownIndex != _cooldownIndex)\r\n        {\r\n            emit CooldownIndexChanged(_cutieId, cutie.cooldownIndex, _cooldownIndex);\r\n            cutie.cooldownIndex = _cooldownIndex;\r\n        }\r\n    }\r\n\r\n    function changeGeneration(\r\n        uint40 _cutieId,\r\n        uint16 _generation)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(address(plugins[msg.sender]) != address(0));\r\n\r\n        Cutie storage cutie = cuties[_cutieId];\r\n        if (cutie.generation != _generation)\r\n        {\r\n            emit GenerationChanged(_cutieId, cutie.generation, _generation);\r\n            cutie.generation = _generation;\r\n        }\r\n    }\r\n\r\n    function getGeneration(uint40 _id)\r\n        public\r\n        view\r\n        returns (uint16 generation)\r\n    {\r\n        Cutie storage cutie = cuties[_id];\r\n        generation = cutie.generation;\r\n    }\r\n\r\n    function changeOptional(\r\n        uint40 _cutieId,\r\n        uint64 _optional)\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(address(plugins[msg.sender]) != address(0));\r\n\r\n        Cutie storage cutie = cuties[_cutieId];\r\n        if (cutie.optional != _optional)\r\n        {\r\n            emit OptionalChanged(_cutieId, cutie.optional, _optional);\r\n            cutie.optional = _optional;\r\n        }\r\n    }\r\n\r\n    function getOptional(uint40 _id)\r\n        public\r\n        view\r\n        returns (uint64 optional)\r\n    {\r\n        Cutie storage cutie = cuties[_id];\r\n        optional = cutie.optional;\r\n    }\r\n\r\n    /// @dev Common function to be used also in backend\r\n    function hashArguments(\r\n        address _pluginAddress,\r\n        uint40 _signId,\r\n        uint40 _cutieId,\r\n        uint128 _value,\r\n        uint256 _parameter)\r\n        public pure returns (bytes32 msgHash)\r\n    {\r\n        msgHash = keccak256(_pluginAddress, _signId, _cutieId, _value, _parameter);\r\n    }\r\n\r\n    /// @dev Common function to be used also in backend\r\n    function getSigner(\r\n        address _pluginAddress,\r\n        uint40 _signId,\r\n        uint40 _cutieId,\r\n        uint128 _value,\r\n        uint256 _parameter,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n        )\r\n        public pure returns (address)\r\n    {\r\n        bytes32 msgHash = hashArguments(_pluginAddress, _signId, _cutieId, _value, _parameter);\r\n        return ecrecover(msgHash, _v, _r, _s);\r\n    }\r\n\r\n    /// @dev Common function to be used also in backend\r\n    function isValidSignature(\r\n        address _pluginAddress,\r\n        uint40 _signId,\r\n        uint40 _cutieId,\r\n        uint128 _value,\r\n        uint256 _parameter,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return getSigner(_pluginAddress, _signId, _cutieId, _value, _parameter, _v, _r, _s) == operatorAddress;\r\n    }\r\n\r\n    /// @dev Put a cutie up for plugin feature with signature.\r\n    ///  Can be used for items equip, item sales and other features.\r\n    ///  Signatures are generated by Operator role.\r\n    function runPluginSigned(\r\n        address _pluginAddress,\r\n        uint40 _signId,\r\n        uint40 _cutieId,\r\n        uint128 _value,\r\n        uint256 _parameter,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        whenNotPaused\r\n        payable\r\n    {\r\n        // If cutie is already on any auction or in adventure, this will throw\r\n        // as it will be owned by the other contract.\r\n        // If _cutieId is 0, then cutie is not used on this feature.\r\n        require(_cutieId == 0 || _isOwner(msg.sender, _cutieId));\r\n    \r\n        require(address(plugins[_pluginAddress]) != address(0));    \r\n\r\n        require (usedSignes[_signId] == address(0));\r\n        require (_signId >= minSignId);\r\n        // value can also be zero for free calls\r\n        require (_value <= msg.value);\r\n\r\n        require (isValidSignature(_pluginAddress, _signId, _cutieId, _value, _parameter, _v, _r, _s));\r\n        \r\n        usedSignes[_signId] = msg.sender;\r\n        emit SignUsed(_signId, msg.sender);\r\n\r\n        // Plugin contract throws if inputs are invalid and clears\r\n        // transfer after escrowing the cutie.\r\n        plugins[_pluginAddress].runSigned.value(_value)(\r\n            _cutieId,\r\n            _parameter,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Sets minimal signId, than can be used.\r\n    ///       All unused signatures less than signId will be cancelled on off-chain server\r\n    ///       and unused items will be transfered back to owner.\r\n    function setMinSign(uint40 _newMinSignId)\r\n        public\r\n        onlyOperator\r\n    {\r\n        require (_newMinSignId > minSignId);\r\n        minSignId = _newMinSignId;\r\n        emit MinSignSet(minSignId);\r\n    }\r\n\r\n\r\n    event BreedingApproval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public upgradedContractAddress;\r\n\r\n    function isCutieCore() pure public returns (bool) { return true; }\r\n\r\n    /// @notice Creates the main BlockchainCuties smart contract instance.\r\n    function BlockchainCutiesCore() public\r\n    {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial owner\r\n        ownerAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial operator\r\n        operatorAddress = msg.sender;\r\n\r\n        // start with the mythical cutie 0 - so there are no generation-0 parent issues\r\n        _createCutie(0, 0, 0, 0, uint256(-1), address(0), 0);\r\n    }\r\n\r\n    event ContractUpgrade(address newContract);\r\n\r\n    /// @dev Aimed to mark the smart contract as upgraded if there is a crucial\r\n    ///  bug. This keeps track of the new contract and indicates that the new address is set. \r\n    /// Updating to the new contract address is up to the clients. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _newAddress new address\r\n    function setUpgradedAddress(address _newAddress) public onlyOwner whenPaused\r\n    {\r\n        require(_newAddress != address(0));\r\n        upgradedContractAddress = _newAddress;\r\n        emit ContractUpgrade(upgradedContractAddress);\r\n    }\r\n\r\n    /// @dev Import cuties from previous version of Core contract.\r\n    /// @param _oldAddress Old core contract address\r\n    /// @param _fromIndex (inclusive)\r\n    /// @param _toIndex (inclusive)\r\n    function migrate(address _oldAddress, uint40 _fromIndex, uint40 _toIndex) public onlyOwner whenPaused\r\n    {\r\n        require(_totalSupply() + 1 == _fromIndex);\r\n\r\n        BlockchainCutiesCore old = BlockchainCutiesCore(_oldAddress);\r\n\r\n        for (uint40 i = _fromIndex; i <= _toIndex; i++)\r\n        {\r\n            uint256 genes;\r\n            uint40 birthTime;\r\n            uint40 cooldownEndTime;\r\n            uint40 momId;\r\n            uint40 dadId;\r\n            uint16 cooldownIndex;\r\n            uint16 generation;            \r\n            (genes, birthTime, cooldownEndTime, momId, dadId, cooldownIndex, generation) = old.getCutie(i);\r\n\r\n            Cutie memory _cutie = Cutie({\r\n                genes: genes, \r\n                birthTime: birthTime, \r\n                cooldownEndTime: cooldownEndTime, \r\n                momId: momId, \r\n                dadId: dadId, \r\n                cooldownIndex: cooldownIndex, \r\n                generation: generation,\r\n                optional: 0\r\n            });\r\n            cuties.push(_cutie);\r\n        }\r\n    }\r\n\r\n    /// @dev Import cuties from previous version of Core contract (part 2).\r\n    /// @param _oldAddress Old core contract address\r\n    /// @param _fromIndex (inclusive)\r\n    /// @param _toIndex (inclusive)\r\n    function migrate2(address _oldAddress, uint40 _fromIndex, uint40 _toIndex, address saleAddress, address breedingAddress) public onlyOwner whenPaused\r\n    {\r\n        BlockchainCutiesCore old = BlockchainCutiesCore(_oldAddress);\r\n        MarketInterface oldSaleMarket = MarketInterface(saleAddress);\r\n        MarketInterface oldBreedingMarket = MarketInterface(breedingAddress);\r\n\r\n        for (uint40 i = _fromIndex; i <= _toIndex; i++)\r\n        {\r\n            address owner = old.ownerOf(i);\r\n\r\n            if (owner == saleAddress)\r\n            {\r\n                (owner,,,,,) = oldSaleMarket.getAuctionInfo(i);\r\n            }\r\n\r\n            if (owner == breedingAddress)\r\n            {\r\n                (owner,,,,,) = oldBreedingMarket.getAuctionInfo(i);\r\n            }\r\n            _transfer(0, owner, i);\r\n        }\r\n    }\r\n\r\n    /// @dev Override unpause so it requires upgradedContractAddress not set, because then the contract was upgraded.\r\n    function unpause() public onlyOwner whenPaused\r\n    {\r\n        require(upgradedContractAddress == address(0));\r\n\r\n        paused = false;\r\n    }\r\n\r\n    // Counts the number of cuties the contract owner has created.\r\n    uint40 public promoCutieCreatedCount;\r\n    uint40 public gen0CutieCreatedCount;\r\n    uint40 public gen0Limit = 50000;\r\n    uint40 public promoLimit = 5000;\r\n\r\n    /// @dev Creates a new gen0 cutie with the given genes and\r\n    ///  creates an auction for it.\r\n    function createGen0Auction(uint256 _genes, uint128 startPrice, uint128 endPrice, uint40 duration) public onlyOperator\r\n    {\r\n        require(gen0CutieCreatedCount < gen0Limit);\r\n        uint40 cutieId = _createCutie(0, 0, 0, 0, _genes, address(this), uint40(now));\r\n        _approve(cutieId, saleMarket);\r\n\r\n        saleMarket.createAuction(\r\n            cutieId,\r\n            startPrice,\r\n            endPrice,\r\n            duration,\r\n            address(this)\r\n        );\r\n\r\n        gen0CutieCreatedCount++;\r\n    }\r\n\r\n    function createPromoCutie(uint256 _genes, address _owner) public onlyOperator\r\n    {\r\n        require(promoCutieCreatedCount < promoLimit);\r\n        if (_owner == address(0)) {\r\n             _owner = operatorAddress;\r\n        }\r\n        promoCutieCreatedCount++;\r\n        gen0CutieCreatedCount++;\r\n        _createCutie(0, 0, 0, 0, _genes, _owner, uint40(now));\r\n    }\r\n\r\n    /// @dev Put a cutie up for auction to be dad.\r\n    ///  Performs checks to ensure the cutie can be dad, then\r\n    ///  delegates to reverse auction.\r\n    ///  Optional money amount can be sent to contract to feature auction.\r\n    ///  Pricea are available on web.\r\n    function createBreedingAuction(\r\n        uint40 _cutieId,\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint40 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n        payable\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If cutie is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_isOwner(msg.sender, _cutieId));\r\n        require(canBreed(_cutieId));\r\n        _approve(_cutieId, breedingMarket);\r\n        // breeding auction function is called if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the cutie.\r\n        breedingMarket.createAuction.value(msg.value)(\r\n            _cutieId,\r\n            _startPrice,\r\n            _endPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Sets the reference to the breeding auction.\r\n    /// @param _breedingAddress - Address of breeding market contract.\r\n    /// @param _saleAddress - Address of sale market contract.\r\n    function setMarketAddress(address _breedingAddress, address _saleAddress) public onlyOwner\r\n    {\r\n        //require(address(breedingMarket) == address(0));\r\n        //require(address(saleMarket) == address(0));\r\n\r\n        breedingMarket = MarketInterface(_breedingAddress);\r\n        saleMarket = MarketInterface(_saleAddress);\r\n    }\r\n\r\n    /// @dev Completes a breeding auction by bidding.\r\n    ///  Immediately breeds the winning mom with the dad on auction.\r\n    /// @param _dadId - ID of the dad on auction.\r\n    /// @param _momId - ID of the mom owned by the bidder.\r\n    function bidOnBreedingAuction(\r\n        uint40 _dadId,\r\n        uint40 _momId\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        // Auction contract checks input sizes\r\n        require(_isOwner(msg.sender, _momId));\r\n        require(canBreed(_momId));\r\n        require(_canMateViaMarketplace(_momId, _dadId));\r\n        // Take breeding fee\r\n        uint256 fee = getBreedingFee(_momId, _dadId);\r\n        require(msg.value >= fee);\r\n\r\n        // breeding auction will throw if the bid fails.\r\n        breedingMarket.bid.value(msg.value - fee)(_dadId);\r\n        return _breedWith(_momId, _dadId);\r\n    }\r\n\r\n    /// @dev Put a cutie up for auction.\r\n    ///  Does some ownership trickery for creating auctions in one transaction.\r\n    ///  Optional money amount can be sent to contract to feature auction.\r\n    ///  Pricea are available on web.\r\n    function createSaleAuction(\r\n        uint40 _cutieId,\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint40 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n        payable\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If cutie is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_isOwner(msg.sender, _cutieId));\r\n        _approve(_cutieId, saleMarket);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the cutie.\r\n        saleMarket.createAuction.value(msg.value)(\r\n            _cutieId,\r\n            _startPrice,\r\n            _endPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev The address of the sibling contract that is used to implement the genetic combination algorithm.\r\n    GeneMixerInterface geneMixer;\r\n\r\n    /// @dev Check if dad has authorized breeding with the mom. True if both dad\r\n    ///  and mom have the same owner, or if the dad has given breeding permission to\r\n    ///  the mom's owner (via approveBreeding()).\r\n    function _isBreedingPermitted(uint40 _dadId, uint40 _momId) internal view returns (bool)\r\n    {\r\n        address momOwner = cutieIndexToOwner[_momId];\r\n        address dadOwner = cutieIndexToOwner[_dadId];\r\n\r\n        // Breeding is approved if they have same owner, or if the mom's owner was given\r\n        // permission to breed with the dad.\r\n        return (momOwner == dadOwner || sireAllowedToAddress[_dadId] == momOwner);\r\n    }\r\n\r\n    /// @dev Update the address of the genetic contract.\r\n    /// @param _address An address of a GeneMixer contract instance to be used from this point forward.\r\n    function setGeneMixerAddress(address _address) public onlyOwner\r\n    {\r\n        GeneMixerInterface candidateContract = GeneMixerInterface(_address);\r\n\r\n        require(candidateContract.isGeneMixer());\r\n\r\n        // Set the new contract address\r\n        geneMixer = candidateContract;\r\n    }\r\n\r\n    /// @dev Checks that a given cutie is able to breed. Requires that the\r\n    ///  current cooldown is finished (for dads)\r\n    function _canBreed(Cutie _cutie) internal view returns (bool)\r\n    {\r\n        return _cutie.cooldownEndTime <= now;\r\n    }\r\n\r\n    /// @notice Grants approval to another user to sire with one of your Cuties.\r\n    /// @param _addr The address that will be able to sire with your Cutie. Set to\r\n    ///  address(0) to clear all breeding approvals for this Cutie.\r\n    /// @param _dadId A Cutie that you own that _addr will now be able to dad with.\r\n    function approveBreeding(address _addr, uint40 _dadId) public whenNotPaused\r\n    {\r\n        require(_isOwner(msg.sender, _dadId));\r\n        sireAllowedToAddress[_dadId] = _addr;\r\n        emit BreedingApproval(msg.sender, _addr, _dadId);\r\n    }\r\n\r\n    /// @dev Set the cooldownEndTime for the given Cutie, based on its current cooldownIndex.\r\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\r\n    /// @param _cutie A reference to the Cutie in storage which needs its timer started.\r\n    function _triggerCooldown(uint40 _cutieId, Cutie storage _cutie) internal\r\n    {\r\n        // Compute the end of the cooldown time, based on current cooldownIndex\r\n        uint40 oldValue = _cutie.cooldownIndex;\r\n        _cutie.cooldownEndTime = config.getCooldownEndTimeFromIndex(_cutie.cooldownIndex);\r\n        emit CooldownEndTimeChanged(_cutieId, oldValue, _cutie.cooldownEndTime);\r\n\r\n        // Increment the breeding count.\r\n        if (_cutie.cooldownIndex + 1 < config.getCooldownIndexCount()) {\r\n            uint16 oldValue2 = _cutie.cooldownIndex;\r\n            _cutie.cooldownIndex++;\r\n            emit CooldownIndexChanged(_cutieId, oldValue2, _cutie.cooldownIndex);\r\n        }\r\n    }\r\n\r\n    /// @notice Checks that a certain cutie is not\r\n    ///  in the middle of a breeding cooldown and is able to breed.\r\n    /// @param _cutieId reference the id of the cutie, any user can inquire about it\r\n    function canBreed(uint40 _cutieId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_cutieId > 0);\r\n        Cutie storage cutie = cuties[_cutieId];\r\n        return _canBreed(cutie);\r\n    }\r\n\r\n    /// @dev Check if given mom and dad are a valid mating pair.\r\n    function _canPairMate(\r\n        Cutie storage _mom,\r\n        uint40 _momId,\r\n        Cutie storage _dad,\r\n        uint40 _dadId\r\n    )\r\n        private\r\n        view\r\n        returns(bool)\r\n    {\r\n        // A Cutie can't breed with itself.\r\n        if (_dadId == _momId) { \r\n            return false; \r\n        }\r\n\r\n        // Cuties can't breed with their parents.\r\n        if (_mom.momId == _dadId) {\r\n            return false;\r\n        }\r\n        if (_mom.dadId == _dadId) {\r\n            return false;\r\n        }\r\n\r\n        if (_dad.momId == _momId) {\r\n            return false;\r\n        }\r\n        if (_dad.dadId == _momId) {\r\n            return false;\r\n        }\r\n\r\n        // We can short circuit the sibling check (below) if either cat is\r\n        // gen zero (has a mom ID of zero).\r\n        if (_dad.momId == 0) {\r\n            return true;\r\n        }\r\n        if (_mom.momId == 0) {\r\n            return true;\r\n        }\r\n\r\n        // Cuties can't breed with full or half siblings.\r\n        if (_dad.momId == _mom.momId) {\r\n            return false;\r\n        }\r\n        if (_dad.momId == _mom.dadId) {\r\n            return false;\r\n        }\r\n        if (_dad.dadId == _mom.momId) {\r\n            return false;\r\n        }\r\n        if (_dad.dadId == _mom.dadId) {\r\n            return false;\r\n        }\r\n\r\n        if (geneMixer.canBreed(_momId, _mom.genes, _dadId, _dad.genes)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice Checks to see if two cuties can breed together (checks both\r\n    ///  ownership and breeding approvals, but does not check if both cuties are ready for\r\n    ///  breeding).\r\n    /// @param _momId The ID of the proposed mom.\r\n    /// @param _dadId The ID of the proposed dad.\r\n    function canBreedWith(uint40 _momId, uint40 _dadId)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(_momId > 0);\r\n        require(_dadId > 0);\r\n        Cutie storage mom = cuties[_momId];\r\n        Cutie storage dad = cuties[_dadId];\r\n        return _canPairMate(mom, _momId, dad, _dadId) && _isBreedingPermitted(_dadId, _momId);\r\n    }\r\n    \r\n    /// @dev Internal check to see if a given dad and mom are a valid mating pair for\r\n    ///  breeding via market (this method doesn't check ownership and if mating is allowed).\r\n    function _canMateViaMarketplace(uint40 _momId, uint40 _dadId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        Cutie storage mom = cuties[_momId];\r\n        Cutie storage dad = cuties[_dadId];\r\n        return _canPairMate(mom, _momId, dad, _dadId);\r\n    }\r\n\r\n    function getBreedingFee(uint40 _momId, uint40 _dadId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return config.getBreedingFee(_momId, _dadId);\r\n    }\r\n\r\n\r\n    /// @notice Breed cuties that you own, or for which you\r\n    ///  have previously been given Breeding approval. Will either make your cutie give birth, or will\r\n    ///  fail.\r\n    /// @param _momId The ID of the Cutie acting as mom (will end up give birth if successful)\r\n    /// @param _dadId The ID of the Cutie acting as dad (will begin its breeding cooldown if successful)\r\n    function breedWith(uint40 _momId, uint40 _dadId) \r\n        public\r\n        whenNotPaused\r\n        payable\r\n        returns (uint40)\r\n    {\r\n        // Caller must own the mom.\r\n        require(_isOwner(msg.sender, _momId));\r\n\r\n        // Neither dad nor mom can be on auction during\r\n        // breeding.\r\n        // For mom: The caller of this function can't be the owner of the mom\r\n        //   because the owner of a Cutie on auction is the auction house, and the\r\n        //   auction house will never call breedWith().\r\n        // For dad: Similarly, a dad on auction will be owned by the auction house\r\n        //   and the act of transferring ownership will have cleared any outstanding\r\n        //   breeding approval.\r\n        // Thus we don't need check if either cutie\r\n        // is on auction.\r\n\r\n        // Check that mom and dad are both owned by caller, or that the dad\r\n        // has given breeding permission to caller (i.e. mom's owner).\r\n        // Will fail for _dadId = 0\r\n        require(_isBreedingPermitted(_dadId, _momId));\r\n\r\n        // Check breeding fee\r\n        require(getBreedingFee(_momId, _dadId) <= msg.value);\r\n\r\n        // Grab a reference to the potential mom\r\n        Cutie storage mom = cuties[_momId];\r\n\r\n        // Make sure mom's cooldown isn't active, or in the middle of a breeding cooldown\r\n        require(_canBreed(mom));\r\n\r\n        // Grab a reference to the potential dad\r\n        Cutie storage dad = cuties[_dadId];\r\n\r\n        // Make sure dad cooldown isn't active, or in the middle of a breeding cooldown\r\n        require(_canBreed(dad));\r\n\r\n        // Test that these cuties are a valid mating pair.\r\n        require(_canPairMate(\r\n            mom,\r\n            _momId,\r\n            dad,\r\n            _dadId\r\n        ));\r\n\r\n        return _breedWith(_momId, _dadId);\r\n    }\r\n\r\n    /// @dev Internal utility function to start breeding, assumes that all breeding\r\n    ///  requirements have been checked.\r\n    function _breedWith(uint40 _momId, uint40 _dadId) internal returns (uint40)\r\n    {\r\n        // Grab a reference to the Cuties from storage.\r\n        Cutie storage dad = cuties[_dadId];\r\n        Cutie storage mom = cuties[_momId];\r\n\r\n        // Trigger the cooldown for both parents.\r\n        _triggerCooldown(_dadId, dad);\r\n        _triggerCooldown(_momId, mom);\r\n\r\n        // Clear breeding permission for both parents.\r\n        delete sireAllowedToAddress[_momId];\r\n        delete sireAllowedToAddress[_dadId];\r\n\r\n        // Check that the mom is a valid cutie.\r\n        require(mom.birthTime != 0);\r\n\r\n        // Determine the higher generation number of the two parents\r\n        uint16 babyGen = config.getBabyGen(mom.generation, dad.generation);\r\n\r\n        // Call the gene mixing operation.\r\n        uint256 childGenes = geneMixer.mixGenes(mom.genes, dad.genes);\r\n\r\n        // Make the new cutie\r\n        address owner = cutieIndexToOwner[_momId];\r\n        uint40 cutieId = _createCutie(_momId, _dadId, babyGen, getCooldownIndexFromGeneration(babyGen), childGenes, owner, mom.cooldownEndTime);\r\n\r\n        // return the new cutie's ID\r\n        return cutieId;\r\n    }\r\n\r\n    mapping(address => uint40) isTutorialPetUsed;\r\n\r\n    /// @dev Completes a breeding tutorial cutie (non existing in blockchain)\r\n    ///  with auction by bidding. Immediately breeds with dad on auction.\r\n    /// @param _dadId - ID of the dad on auction.\r\n    function bidOnBreedingAuctionTutorial(\r\n        uint40 _dadId\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        returns (uint)\r\n    {\r\n        require(isTutorialPetUsed[msg.sender] == 0);\r\n\r\n        // Take breeding fee\r\n        uint256 fee = getBreedingFee(0, _dadId);\r\n        require(msg.value >= fee);\r\n\r\n        // breeding auction will throw if the bid fails.\r\n        breedingMarket.bid.value(msg.value - fee)(_dadId);\r\n\r\n        // Grab a reference to the Cuties from storage.\r\n        Cutie storage dad = cuties[_dadId];\r\n\r\n        // Trigger the cooldown for parent.\r\n        _triggerCooldown(_dadId, dad);\r\n\r\n        // Clear breeding permission for parent.\r\n        delete sireAllowedToAddress[_dadId];\r\n\r\n        uint16 babyGen = config.getTutorialBabyGen(dad.generation);\r\n\r\n        // tutorial pet genome is zero\r\n        uint256 childGenes = geneMixer.mixGenes(0x0, dad.genes);\r\n\r\n        // tutorial pet id is zero\r\n        uint40 cutieId = _createCutie(0, _dadId, babyGen, getCooldownIndexFromGeneration(babyGen), childGenes, msg.sender, 12);\r\n\r\n        isTutorialPetUsed[msg.sender] = cutieId;\r\n\r\n        // return the new cutie's ID\r\n        return cutieId;\r\n    }\r\n\r\n    address party1address;\r\n    address party2address;\r\n    address party3address;\r\n    address party4address;\r\n    address party5address;\r\n\r\n    /// @dev Setup project owners\r\n    function setParties(address _party1, address _party2, address _party3, address _party4, address _party5) public onlyOwner\r\n    {\r\n        require(_party1 != address(0));\r\n        require(_party2 != address(0));\r\n        require(_party3 != address(0));\r\n        require(_party4 != address(0));\r\n        require(_party5 != address(0));\r\n\r\n        party1address = _party1;\r\n        party2address = _party2;\r\n        party3address = _party3;\r\n        party4address = _party4;\r\n        party5address = _party5;\r\n    }\r\n\r\n    /// @dev Reject all Ether which is not from game contracts from being sent here.\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleMarket) ||\r\n            msg.sender == address(breedingMarket) ||\r\n            address(plugins[msg.sender]) != address(0)\r\n        );\r\n    }\r\n\r\n    /// @dev The balance transfer from the market and plugins contract\r\n    /// to the CutieCore contract.\r\n    function withdrawBalances() external\r\n    {\r\n        require(\r\n            msg.sender == ownerAddress || \r\n            msg.sender == operatorAddress);\r\n\r\n        saleMarket.withdrawEthFromBalance();\r\n        breedingMarket.withdrawEthFromBalance();\r\n        for (uint32 i = 0; i < pluginsArray.length; ++i)        \r\n        {\r\n            pluginsArray[i].withdraw();\r\n        }\r\n    }\r\n\r\n    /// @dev The balance transfer from CutieCore contract to project owners\r\n    function withdrawEthFromBalance() external\r\n    {\r\n        require(\r\n            msg.sender == party1address ||\r\n            msg.sender == party2address ||\r\n            msg.sender == party3address ||\r\n            msg.sender == party4address ||\r\n            msg.sender == party5address ||\r\n            msg.sender == ownerAddress || \r\n            msg.sender == operatorAddress);\r\n\r\n        require(party1address != 0);\r\n        require(party2address != 0);\r\n        require(party3address != 0);\r\n        require(party4address != 0);\r\n        require(party5address != 0);\r\n\r\n        uint256 total = address(this).balance;\r\n\r\n        party1address.transfer(total*105/1000);\r\n        party2address.transfer(total*105/1000);\r\n        party3address.transfer(total*140/1000);\r\n        party4address.transfer(total*140/1000);\r\n        party5address.transfer(total*510/1000);\r\n    }\r\n\r\n/*\r\n * @title String & slice utility library for Solidity contracts.\r\n * @author Nick Johnson <arachnid@notdot.net>\r\n *\r\n * @dev Functionality in this library is largely implemented using an\r\n *      abstraction called a 'slice'. A slice represents a part of a string -\r\n *      anything from the entire string to a single character, or even no\r\n *      characters at all (a 0-length slice). Since a slice only has to specify\r\n *      an offset and a length, copying and manipulating slices is a lot less\r\n *      expensive than copying and manipulating the strings they reference.\r\n *\r\n *      To further reduce gas costs, most functions on slice that need to return\r\n *      a slice modify the original one instead of allocating a new one; for\r\n *      instance, `s.split(\".\")` will return the text up to the first '.',\r\n *      modifying s to only contain the remainder of the string after the '.'.\r\n *      In situations where you do not want to modify the original slice, you\r\n *      can make a copy first with `.copy()`, for example:\r\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\r\n *      Solidity has no memory management, it will result in allocating many\r\n *      short-lived slices that are later discarded.\r\n *\r\n *      Functions that return two slices come in two versions: a non-allocating\r\n *      version that takes the second slice as an argument, modifying it in\r\n *      place, and an allocating version that allocates and returns the second\r\n *      slice; see `nextRune` for example.\r\n *\r\n *      Functions that have to copy string data will return strings rather than\r\n *      slices; these can be cast back to slices for further processing if\r\n *      required.\r\n *\r\n *      For convenience, some functions are provided with non-modifying\r\n *      variants that create a new slice and return both; for instance,\r\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\r\n *      corresponding to the left and right parts of the string.\r\n */\r\n\r\n    struct slice\r\n    {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal pure returns (slice)\r\n    {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private pure\r\n    {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal pure returns (string)\r\n    {\r\n        string memory ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n\r\n    function uintToString(uint256 a) internal pure returns (string result)\r\n    {\r\n        string memory r = \"\";\r\n        do\r\n        {\r\n            uint b = a % 10;\r\n            a /= 10;\r\n\r\n            string memory c = \"\";\r\n\r\n            if (b == 0) c = \"0\";\r\n            else if (b == 1) c = \"1\";\r\n            else if (b == 2) c = \"2\";\r\n            else if (b == 3) c = \"3\";\r\n            else if (b == 4) c = \"4\";\r\n            else if (b == 5) c = \"5\";\r\n            else if (b == 6) c = \"6\";\r\n            else if (b == 7) c = \"7\";\r\n            else if (b == 8) c = \"8\";\r\n            else if (b == 9) c = \"9\";\r\n\r\n            r = concat(toSlice(c), toSlice(r));\r\n        }\r\n        while (a > 0);\r\n        result = r;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gen0CutieCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"canBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party1\",\"type\":\"address\"},{\"name\":\"_party2\",\"type\":\"address\"},{\"name\":\"_party3\",\"type\":\"address\"},{\"name\":\"_party4\",\"type\":\"address\"},{\"name\":\"_party5\",\"type\":\"address\"}],\"name\":\"setParties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToApprovedAll\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"cutieIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dadId\",\"type\":\"uint40\"}],\"name\":\"bidOnBreedingAuctionTutorial\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoCutie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getCooldownIndex\",\"outputs\":[{\"name\":\"cooldownIndex\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"cutieId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getOptional\",\"outputs\":[{\"name\":\"optional\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinSignId\",\"type\":\"uint40\"}],\"name\":\"setMinSign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breedingAddress\",\"type\":\"address\"},{\"name\":\"_saleAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pluginAddress\",\"type\":\"address\"},{\"name\":\"_signId\",\"type\":\"uint40\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_value\",\"type\":\"uint128\"},{\"name\":\"_parameter\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"plugins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCutieCore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint40\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breedingMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_generation\",\"type\":\"uint16\"}],\"name\":\"changeGeneration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setUpgradedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_momId\",\"type\":\"uint40\"},{\"name\":\"_dadId\",\"type\":\"uint40\"}],\"name\":\"getBreedingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_optional\",\"type\":\"uint64\"}],\"name\":\"changeOptional\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint40\"}],\"name\":\"createBreedingAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadataUrlPrefix\",\"type\":\"string\"},{\"name\":\"_metadataUrlSuffix\",\"type\":\"string\"}],\"name\":\"setMetadataUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"},{\"name\":\"_fromIndex\",\"type\":\"uint40\"},{\"name\":\"_toIndex\",\"type\":\"uint40\"},{\"name\":\"saleAddress\",\"type\":\"address\"},{\"name\":\"breedingAddress\",\"type\":\"address\"}],\"name\":\"migrate2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pluginAddress\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_parameter\",\"type\":\"uint256\"}],\"name\":\"runPlugin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSignId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pluginAddress\",\"type\":\"address\"},{\"name\":\"_signId\",\"type\":\"uint40\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_value\",\"type\":\"uint128\"},{\"name\":\"_parameter\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getGenes\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pluginAddress\",\"type\":\"address\"},{\"name\":\"_signId\",\"type\":\"uint40\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_value\",\"type\":\"uint128\"},{\"name\":\"_parameter\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"runPluginSigned\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getGeneration\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint40\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removePlugin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"restoreCutieToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"cutieIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"usedSignes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pluginAddress\",\"type\":\"address\"},{\"name\":\"_signId\",\"type\":\"uint40\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_value\",\"type\":\"uint128\"},{\"name\":\"_parameter\",\"type\":\"uint256\"}],\"name\":\"hashArguments\",\"outputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_momId\",\"type\":\"uint40\"},{\"name\":\"_dadId\",\"type\":\"uint40\"}],\"name\":\"breedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cuties\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint40\"},{\"name\":\"cooldownEndTime\",\"type\":\"uint40\"},{\"name\":\"momId\",\"type\":\"uint40\"},{\"name\":\"dadId\",\"type\":\"uint40\"},{\"name\":\"cooldownIndex\",\"type\":\"uint16\"},{\"name\":\"generation\",\"type\":\"uint16\"},{\"name\":\"optional\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_cooldownEndTime\",\"type\":\"uint40\"}],\"name\":\"changeCooldownEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadataUrlPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_cooldownIndex\",\"type\":\"uint16\"}],\"name\":\"changeCooldownIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadataUrlSuffix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addPlugin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_momId\",\"type\":\"uint40\"},{\"name\":\"_dadId\",\"type\":\"uint40\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCutieCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"changeGenes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneMixerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getCutie\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint40\"},{\"name\":\"cooldownEndTime\",\"type\":\"uint40\"},{\"name\":\"momId\",\"type\":\"uint40\"},{\"name\":\"dadId\",\"type\":\"uint40\"},{\"name\":\"cooldownIndex\",\"type\":\"uint16\"},{\"name\":\"generation\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"},{\"name\":\"_fromIndex\",\"type\":\"uint40\"},{\"name\":\"_toIndex\",\"type\":\"uint40\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pluginsArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dadId\",\"type\":\"uint40\"},{\"name\":\"_momId\",\"type\":\"uint40\"}],\"name\":\"bidOnBreedingAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint40\"}],\"name\":\"getCooldownEndTime\",\"outputs\":[{\"name\":\"cooldownEndTime\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_dadId\",\"type\":\"uint40\"}],\"name\":\"approveBreeding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"momId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"dadId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"GenesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint40\"}],\"name\":\"CooldownEndTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"ololdValue\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"CooldownIndexChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"GenerationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"OptionalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SignUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signId\",\"type\":\"uint40\"}],\"name\":\"MinSignSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"BreedingApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"BlockchainCutiesCore","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fccbe691abb06d9806ab2748d7bf4cc1482eac0cf5def2e6910ac841da66403b"}]}