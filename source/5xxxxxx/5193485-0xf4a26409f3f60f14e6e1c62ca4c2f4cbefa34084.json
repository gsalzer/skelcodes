{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// WhiteListed - SENC Token Sale Whitelisting Contract\r\n//\r\n// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\r\n// http://www.sentinel-chain.org/\r\n//\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// The SENC Token Sale Whitelist Contract is designed to facilitate the features:\r\n//\r\n// 1. Track whitelisted users and allocations\r\n// Each whitelisted user is tracked by its wallet address as well as the maximum\r\n// SENC allocation it can purchase.\r\n//\r\n// 2. Track batches\r\n// To prevent a gas war, each contributor will be assigned a batch number that\r\n// corresponds to the time that the contributor can start purchasing.\r\n//\r\n// 3. Whitelist Operators\r\n// A primary and a secondary operators can be assigned to facilitate the management\r\n// of the whiteList.\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract OperatableBasic {\r\n    function setPrimaryOperator (address addr) public;\r\n    function setSecondaryOperator (address addr) public;\r\n    function isPrimaryOperator(address addr) public view returns (bool);\r\n    function isSecondaryOperator(address addr) public view returns (bool);\r\n}\r\n\r\ncontract Operatable is Ownable, OperatableBasic {\r\n    address public primaryOperator;\r\n    address public secondaryOperator;\r\n\r\n    modifier canOperate() {\r\n        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Operatable() public {\r\n        primaryOperator = owner;\r\n        secondaryOperator = owner;\r\n    }\r\n\r\n    function setPrimaryOperator (address addr) public onlyOwner {\r\n        primaryOperator = addr;\r\n    }\r\n\r\n    function setSecondaryOperator (address addr) public onlyOwner {\r\n        secondaryOperator = addr;\r\n    }\r\n\r\n    function isPrimaryOperator(address addr) public view returns (bool) {\r\n        return (addr == primaryOperator);\r\n    }\r\n\r\n    function isSecondaryOperator(address addr) public view returns (bool) {\r\n        return (addr == secondaryOperator);\r\n    }\r\n}\r\n\r\ncontract WhiteListedBasic is OperatableBasic {\r\n    function addWhiteListed(address[] addrs, uint[] batches, uint[] weiAllocation) external;\r\n    function getAllocated(address addr) public view returns (uint);\r\n    function getBatchNumber(address addr) public view returns (uint);\r\n    function getWhiteListCount() public view returns (uint);\r\n    function isWhiteListed(address addr) public view returns (bool);\r\n    function removeWhiteListed(address addr) public;\r\n    function setAllocation(address[] addrs, uint[] allocation) public;\r\n    function setBatchNumber(address[] addrs, uint[] batch) public;\r\n}\r\n\r\ncontract WhiteListed is Operatable, WhiteListedBasic {\r\n\r\n    struct Batch {\r\n        bool isWhitelisted;\r\n        uint weiAllocated;\r\n        uint batchNumber;\r\n    }\r\n\r\n    uint public count;\r\n    mapping (address => Batch) public batchMap;\r\n\r\n    event Whitelisted(address indexed addr, uint whitelistedCount, bool isWhitelisted, uint indexed batch, uint weiAllocation);\r\n\r\n    function addWhiteListed(address[] addrs, uint[] batches, uint[] weiAllocation) external canOperate {\r\n        require(addrs.length == batches.length);\r\n        require(addrs.length == weiAllocation.length);\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            Batch storage batch = batchMap[addrs[i]];\r\n            if (batch.isWhitelisted != true) {\r\n                batch.isWhitelisted = true;\r\n                batch.weiAllocated = weiAllocation[i];\r\n                batch.batchNumber = batches[i];\r\n                count++;\r\n                Whitelisted(addrs[i], count, true, batches[i], weiAllocation[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAllocated(address addr) public view returns (uint) {\r\n        return batchMap[addr].weiAllocated;\r\n    }\r\n\r\n    function getBatchNumber(address addr) public view returns (uint) {\r\n        return batchMap[addr].batchNumber;\r\n    }\r\n\r\n    function getWhiteListCount() public view returns (uint) {\r\n        return count;\r\n    }\r\n\r\n    function isWhiteListed(address addr) public view returns (bool) {\r\n        return batchMap[addr].isWhitelisted;\r\n    }\r\n\r\n    function removeWhiteListed(address addr) public canOperate {\r\n        Batch storage batch = batchMap[addr];\r\n        require(batch.isWhitelisted == true); \r\n        batch.isWhitelisted = false;\r\n        count--;\r\n        Whitelisted(addr, count, false, batch.batchNumber, batch.weiAllocated);\r\n    }\r\n\r\n    function setAllocation(address[] addrs, uint[] weiAllocation) public canOperate {\r\n        require(addrs.length == weiAllocation.length);\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            if (batchMap[addrs[i]].isWhitelisted == true) {\r\n                batchMap[addrs[i]].weiAllocated = weiAllocation[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function setBatchNumber(address[] addrs, uint[] batch) public canOperate {\r\n        require(addrs.length == batch.length);\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            if (batchMap[addrs[i]].isWhitelisted == true) {\r\n                batchMap[addrs[i]].batchNumber = batch[i];\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSecondaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPrimaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"weiAllocation\",\"type\":\"uint256[]\"}],\"name\":\"setAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSecondaryOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBatchNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"batches\",\"type\":\"uint256[]\"},{\"name\":\"weiAllocation\",\"type\":\"uint256[]\"}],\"name\":\"addWhiteListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhiteListCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPrimaryOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"batch\",\"type\":\"uint256[]\"}],\"name\":\"setBatchNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"batchMap\",\"outputs\":[{\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"name\":\"weiAllocated\",\"type\":\"uint256\"},{\"name\":\"batchNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistedCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAllocation\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhiteListed","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3522fc344f3576da3fe2feb65df0b03eb440fe2429dd5997adda7ae09c22beb2"}]}