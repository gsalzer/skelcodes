{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    \r\n    /// 'owner' is the only address that can call a function with \r\n    /// this modifier\r\n    address public owner;\r\n    address internal newOwner;\r\n    \r\n    ///@notice The constructor assigns the message sender to be 'owner'\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    event updateOwner(address _oldOwner, address _newOwner);\r\n    \r\n    ///change the owner\r\n    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\r\n        require(owner != _newOwner);\r\n        newOwner = _newOwner;\r\n        return true;\r\n    }\r\n    \r\n    /// accept the ownership\r\n    function acceptNewOwner() public returns(bool) {\r\n        require(msg.sender == newOwner);\r\n        emit updateOwner(owner, newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n}\r\n\r\n// Safe maths, borrowed from OpenZeppelin\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract tokenRecipient {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract ERC20Token {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract standardToken is ERC20Token {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfers tokens from your address to other */\r\n    function transfer(address _to, uint256 _value) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        require (balances[msg.sender] >= _value);           // Throw if sender has insufficient balance\r\n        require (balances[_to] + _value >= balances[_to]);  // Throw if owerflow detected\r\n        balances[msg.sender] -= _value;                     // Deduct senders balance\r\n        balances[_to] += _value;                            // Add recivers blaance\r\n        emit Transfer(msg.sender, _to, _value);             // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n    /* Approve other address to spend tokens on your account */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        allowances[msg.sender][_spender] = _value;          // Set allowance\r\n        emit Approval(msg.sender, _spender, _value);        // Raise Approval event\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\r\n        approve(_spender, _value);                                      // Set approval to contract for _value\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require (balances[_from] >= _value);                // Throw if sender does not have enough balance\r\n        require (balances[_to] + _value >= balances[_to]);  // Throw if overflow detected\r\n        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance\r\n        balances[_from] -= _value;                          // Deduct senders balance\r\n        balances[_to] += _value;                            // Add recipient blaance\r\n        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\r\n        emit Transfer(_from, _to, _value);                  // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n    /* Get the amount of allowed tokens to spend */\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract OpticalNetwork is standardToken, Owned {\r\n    using SafeMath for uint;\r\n    \r\n    string public name=\"Optical Network\";\r\n    string public symbol=\"OPTC\";\r\n    uint256 public decimals=18;\r\n    uint256 public totalSupply = 0;\r\n    uint256 public topTotalSupply = 36*10**8*10**decimals;\r\n    /// @dev Fallback to calling deposit when ether is sent directly to contract.\r\n    function() public payable {\r\n        revert();\r\n    }\r\n    \r\n    /// @dev initial function\r\n    function OpticalNetwork(address _tokenAlloc) public {\r\n        owner=msg.sender;\r\n        balances[_tokenAlloc] = topTotalSupply;\r\n        totalSupply = topTotalSupply;\r\n        emit Transfer(0x0, _tokenAlloc, topTotalSupply); \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAlloc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OpticalNetwork","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001116adfe9090d340482db2dd42d6a418f8cb76c9","Library":"","SwarmSource":"bzzr://b58af1680954974066658093a24f370aaa0c09ea8152b9a3ed5153a53afde6d4"}]}