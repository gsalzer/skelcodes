{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n*   CrowdSale DapCar (DAPX)\r\n*   Created by Starlag Labs (www.starlag.com)\r\n*   Copyright Â© DapCar.io 2018. All rights reserved.\r\n*   https://www.dapcar.io\r\n*/\r\n\r\nlibrary Math {\r\n    function mul(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Utils {\r\n    function Utils() public {}\r\n\r\n    modifier greaterThanZero(uint256 _value) \r\n    {\r\n        require(_value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier validUint(uint256 _value) \r\n    {\r\n        require(_value >= 0);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _address) \r\n    {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier notThis(address _address) \r\n    {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    modifier validAddressAndNotThis(address _address) \r\n    {\r\n        require(_address != address(0) && _address != address(this));\r\n        _;\r\n    }\r\n\r\n    modifier notEmpty(string _data)\r\n    {\r\n        require(bytes(_data).length > 0);\r\n        _;\r\n    }\r\n\r\n    modifier stringLength(string _data, uint256 _length)\r\n    {\r\n        require(bytes(_data).length == _length);\r\n        _;\r\n    }\r\n    \r\n    modifier validBytes32(bytes32 _bytes)\r\n    {\r\n        require(_bytes != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validUint64(uint64 _value) \r\n    {\r\n        require(_value >= 0 && _value < 4294967296);\r\n        _;\r\n    }\r\n\r\n    modifier validUint8(uint8 _value) \r\n    {\r\n        require(_value >= 0 && _value < 256);\r\n        _;\r\n    }\r\n\r\n    modifier validBalanceThis(uint256 _value)\r\n    {\r\n        require(_value <= address(this).balance);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Authorizable is Utils {\r\n    using Math for uint256;\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n    mapping (address => Level) authorizeds;\r\n    uint256 public authorizedCount;\r\n\r\n    /*  \r\n    *   ZERO 0 - bug for null object\r\n    *   OWNER 1\r\n    *   ADMIN 2\r\n    *   DAPP 3\r\n    */  \r\n    enum Level {ZERO,OWNER,ADMIN,DAPP}\r\n\r\n    event OwnerTransferred(address indexed _prevOwner, address indexed _newOwner);\r\n    event Authorized(address indexed _address, Level _level);\r\n    event UnAuthorized(address indexed _address);\r\n\r\n    function Authorizable() \r\n    public \r\n    {\r\n        owner = msg.sender;\r\n        authorizeds[msg.sender] = Level.OWNER;\r\n        authorizedCount = authorizedCount.add(1);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(authorizeds[msg.sender] == Level.OWNER);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrThis {\r\n        require(authorizeds[msg.sender] == Level.OWNER || msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier notOwner(address _address) {\r\n        require(authorizeds[_address] != Level.OWNER);\r\n        _;\r\n    }\r\n\r\n    modifier authLevel(Level _level) {\r\n        require((authorizeds[msg.sender] > Level.ZERO) && (authorizeds[msg.sender] <= _level));\r\n        _;\r\n    }\r\n\r\n    modifier authLevelOnly(Level _level) {\r\n        require(authorizeds[msg.sender] == _level);\r\n        _;\r\n    }\r\n    \r\n    modifier notSender(address _address) {\r\n        require(msg.sender != _address);\r\n        _;\r\n    }\r\n\r\n    modifier isSender(address _address) {\r\n        require(msg.sender == _address);\r\n        _;\r\n    }\r\n\r\n    modifier checkLevel(Level _level) {\r\n        require((_level > Level.ZERO) && (Level.DAPP >= _level));\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) \r\n    public \r\n    {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) \r\n    onlyOwner \r\n    validAddress(_newOwner)\r\n    notThis(_newOwner)\r\n    internal \r\n    {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() \r\n    validAddress(newOwner)\r\n    isSender(newOwner)\r\n    public \r\n    {\r\n        OwnerTransferred(owner, newOwner);\r\n        if (authorizeds[owner] == Level.OWNER) {\r\n            delete authorizeds[owner];\r\n        }\r\n        if (authorizeds[newOwner] > Level.ZERO) {\r\n            authorizedCount = authorizedCount.sub(1);\r\n        }\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        authorizeds[owner] = Level.OWNER;\r\n    }\r\n\r\n    function cancelOwnership() \r\n    onlyOwner\r\n    public \r\n    {\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function authorized(address _address, Level _level) \r\n    public  \r\n    {\r\n        _authorized(_address, _level);\r\n    }\r\n\r\n    function _authorized(address _address, Level _level) \r\n    onlyOwner\r\n    validAddress(_address)\r\n    notOwner(_address)\r\n    notThis(_address)\r\n    checkLevel(_level)\r\n    internal  \r\n    {\r\n        if (authorizeds[_address] == Level.ZERO) {\r\n            authorizedCount = authorizedCount.add(1);\r\n        }\r\n        authorizeds[_address] = _level;\r\n        Authorized(_address, _level);\r\n    }\r\n\r\n    function unAuthorized(address _address) \r\n    onlyOwner\r\n    validAddress(_address)\r\n    notOwner(_address)\r\n    notThis(_address)\r\n    public  \r\n    {\r\n        if (authorizeds[_address] > Level.ZERO) {\r\n            authorizedCount = authorizedCount.sub(1);\r\n        }\r\n        delete authorizeds[_address];\r\n        UnAuthorized(_address);\r\n    }\r\n\r\n    function isAuthorized(address _address) \r\n    validAddress(_address)\r\n    notThis(_address)\r\n    public \r\n    constant \r\n    returns (Level) \r\n    {\r\n        return authorizeds[_address];\r\n    }\r\n}\r\n\r\ncontract IERC20 {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ITokenRecipient { function receiveApproval(address _spender, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract ICouponToken {\r\n    function updCouponConsumed(string _code, bool _consumed) public returns (bool success);\r\n    function getCoupon(string _code) public view returns (uint256 bonus, \r\n        bool disposable, bool consumed, bool enabled);\r\n}\r\n\r\ncontract IDapCarToken {\r\n    function mint(address _address, uint256 _value) public returns (bool);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n}\r\n\r\ncontract IAirDropToken {\r\n    function burnAirDrop(address[] _address) public;\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n}\r\n\r\ncontract CrowdSaleDapCar is Authorizable {\r\n    string public version = \"0.1\";\r\n    string public publisher = \"https://www.dapcar.io\";\r\n    string public description = \"This is an official CrowdSale DapCar (DAPX)\";\r\n\r\n    address public walletWithdraw;\r\n    IDapCarToken public dapCarToken;\r\n    IAirDropToken public airDropToken;\r\n    ICouponToken public couponToken;\r\n\r\n    uint256 public weiRaised = 0;\r\n    uint256 public soldToken = 0;\r\n    uint256 public fundToken = 0;\r\n    uint256 public weiDonated = 0;\r\n    uint256 public minPurchaseLimit = 10 finney;\r\n\r\n    bool public crowdSaleEnabled = true;\r\n    bool public crowdSaleFinalized = false;\r\n    bool public crowdSaleInitialized = false;\r\n\r\n    bool public airDropTokenEnabled = true;\r\n    bool public airDropTokenDestroy = true;\r\n    bool public amountBonusEnabled = true;\r\n    bool public couponBonusEnabled = true;\r\n\r\n    mapping (uint8 => Rate) rates;\r\n\r\n    mapping (address => Investor) investors;\r\n    uint256 public investorCount;\r\n\r\n    /*  \r\n    *   ZERO 0 - bug for null object\r\n    *   PRESALE 1\r\n    *   PREICO 2\r\n    *   ICO 3\r\n    *   PRERELEASE 4\r\n    */ \r\n    enum Period {ZERO,PRESALE,PREICO,ICO,PRERELEASE}\r\n\r\n    struct Rate {\r\n        Period period;\r\n        uint256 rate;\r\n        uint256 bonusAirDrop;\r\n        uint64 start;\r\n        uint64 stop;\r\n        uint64 updated;\r\n        bool enabled;\r\n        bool initialized;\r\n    }\r\n\r\n    struct Investor {\r\n        address wallet;\r\n        uint256 bonus;\r\n        uint64 updated;\r\n        bool preSaleEnabled;\r\n        bool enabled;\r\n        bool initialized;\r\n    }\r\n\r\n\r\n    event Donate(address indexed sender, uint256 value);\r\n    event WalletWithdrawChanged(address indexed sender, address indexed oldWallet, address indexed newWallet);\r\n    event Withdraw(address indexed sender, address indexed wallet, uint256 amount);\r\n    event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount);\r\n    event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData);\r\n    event RatePropsChanged(address indexed sender, uint8 period, string props, bool value);\r\n    event RateChanged(address indexed sender, uint8 period, uint256 oldBonus, uint256 newBonus);\r\n    event RateBonusChanged(address indexed sender, uint8 period, uint256 oldBonus, uint256 newBonus);\r\n    event RateTimeChanged(address indexed sender, uint8 period, uint64 oldStart, uint64 oldStop, \r\n        uint64 newStart, uint64 newStop);\r\n    event InvestorDeleted(address indexed sender, address indexed wallet);\r\n    event InvestorPropsChanged(address indexed sender, address indexed wallet, string props, bool value);\r\n    event InvestorBonusChanged(address indexed sender, address indexed wallet, uint256 oldBonus, uint256 newBonus);\r\n    event InvestorCreated(address indexed sender, address indexed wallet, uint256 bonus);\r\n    event Purchase(address indexed sender, uint256 amountWei, uint256 amountToken, uint256 totalBonus);\r\n    event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue);\r\n    event MinPurchaseLimitChanged(address indexed sender, uint256 oldValu, uint256 newValue);\r\n    event Finalized(address indexed sender, uint64 time, uint256 weiRaised, uint256 soldToken, \r\n        uint256 fundToken, uint256 weiDonated);\r\n\r\n    modifier validPeriod(Period _period) \r\n    {\r\n        require(_period > Period.ZERO && _period <= Period.PRERELEASE);\r\n        _;\r\n    }\r\n\r\n    function CrowdSaleDapCar() public {\r\n        crowdSalePeriodInit();\r\n    }\r\n\r\n    /*\r\n    *   PRESALE: 1 DAPX = 1$\r\n    *   Monday, 5 March 2018, 00:00:00 GMT - Sunday, 25 March 2018, 23:59:59 GMT\r\n    *   PREICO: 1 DAPX = 2$\r\n    *   Monday, 9 April 2018, 00:00:00 GMT - Sunday, 29 April 2018, 23:59:59 GMT\r\n    *   ICO: 1 DAPX = 5$\r\n    *   Monday, 7 May 2018, 00:00:00 GMT - Sunday, 17 June 2018, 23:59:59 GMT\r\n    *   PRERELEASE: 1 DAPX = 10$\r\n    *   Monday, 18 June 2018, 00:00:00 GMT - Sunday, 1 July 2018, 23:59:59 GMT\r\n    *   RELEASE GAME: 1 DAPX = 1 DAPBOX >= 15$\r\n    */\r\n    \r\n    function crowdSalePeriodInit()\r\n    onlyOwnerOrThis\r\n    public\r\n    returns (bool success)\r\n    {\r\n        if (!crowdSaleInitialized) {\r\n            Rate memory ratePreSale = Rate({\r\n                period: Period.PRESALE,\r\n                rate: 740,\r\n                bonusAirDrop: 0,\r\n                start: 1520208000,\r\n                stop: 1522022399,\r\n                updated: 0,\r\n                enabled: true,\r\n                initialized: true\r\n            });\r\n            rates[uint8(Period.PRESALE)] = ratePreSale;\r\n\r\n            Rate memory ratePreIco = Rate({\r\n                period: Period.PREICO,\r\n                rate: 370,\r\n                bonusAirDrop: 10,\r\n                start: 1523232000,\r\n                stop: 1525046399,\r\n                updated: 0,\r\n                enabled: true,\r\n                initialized: true\r\n            });\r\n            rates[uint8(Period.PREICO)] = ratePreIco;\r\n\r\n            Rate memory rateIco = Rate({\r\n                period: Period.ICO,\r\n                rate: 148,\r\n                bonusAirDrop: 5,\r\n                start: 1525651200,\r\n                stop: 1529279999,\r\n                updated: 0,\r\n                enabled: true,\r\n                initialized: true\r\n            });\r\n            rates[uint8(Period.ICO)] = rateIco;\r\n\r\n            Rate memory ratePreRelease = Rate({\r\n                period: Period.PRERELEASE,\r\n                rate: 74,\r\n                bonusAirDrop: 0,\r\n                start: 1529280000,\r\n                stop: 1530489599,\r\n                updated: 0,\r\n                enabled: true,\r\n                initialized: true\r\n            });\r\n            rates[uint8(Period.PRERELEASE)] = ratePreRelease;\r\n        \r\n            crowdSaleInitialized = true;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function nowPeriod()\r\n    public\r\n    constant\r\n    returns (Period)\r\n    {\r\n        uint64 now64 = uint64(now);\r\n        Period period = Period.ZERO;\r\n        for (uint8 i = 1; i <= uint8(Period.PRERELEASE); i++) {\r\n            Rate memory rate = rates[i];\r\n            if (!rate.initialized || !rate.enabled) { \r\n                continue; \r\n            }\r\n            if (rate.start == 0 || rate.stop == 0 || rate.rate == 0) { \r\n                continue; \r\n            }\r\n            \r\n            if (now64 >= rate.start && now64 < rate.stop) {\r\n                period = rate.period;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return period;\r\n    }\r\n\r\n    function updCrowdSaleEnabled(bool _value)\r\n    authLevel(Level.ADMIN)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"crowdSaleEnabled\", crowdSaleEnabled, _value);\r\n        crowdSaleEnabled = _value;\r\n        return true;\r\n    }\r\n\r\n    function updAirDropTokenEnabled(bool _value)\r\n    authLevel(Level.ADMIN)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"airDropTokenEnabled\", airDropTokenEnabled, _value);\r\n        airDropTokenEnabled = _value;\r\n        return true;\r\n    }\r\n\r\n    function updAirDropTokenDestroy(bool _value)\r\n    authLevel(Level.ADMIN)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"airDropTokenDestroy\", airDropTokenDestroy, _value);\r\n        airDropTokenDestroy = _value;\r\n        return true;\r\n    }\r\n\r\n    function updAmountBonusEnabled(bool _value)\r\n    authLevel(Level.ADMIN)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"amountBonusEnabled\", amountBonusEnabled, _value);\r\n        amountBonusEnabled = _value;\r\n        return true;\r\n    }\r\n\r\n    function updCouponBonusEnabled(bool _value)\r\n    authLevel(Level.ADMIN)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"couponBonusEnabled\", couponBonusEnabled, _value);\r\n        couponBonusEnabled = _value;\r\n        return true;\r\n    }\r\n\r\n    function updMinPurchaseLimit(uint256 _limit)\r\n    authLevel(Level.ADMIN)\r\n    validUint(_limit)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        MinPurchaseLimitChanged(msg.sender, minPurchaseLimit, _limit);\r\n        minPurchaseLimit = _limit;\r\n        return true;\r\n    }\r\n    \r\n    function getRate(Period _period)\r\n    validPeriod(_period)\r\n    public\r\n    constant\r\n    returns (uint256 rateValue, uint256 bonusAirDrop, uint64 start, uint64 stop, uint64 updated, bool enabled)\r\n    {\r\n        uint8 period = uint8(_period);\r\n        Rate memory rate = rates[period];\r\n        require(rate.initialized);\r\n\r\n        return (rate.rate, rate.bonusAirDrop, rate.start, rate.stop, rate.updated, rate.enabled);\r\n    }\r\n\r\n    function updRate(Period _period, uint256 _rate)\r\n    authLevel(Level.DAPP)\r\n    validPeriod(_period)\r\n    greaterThanZero(_rate)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        uint8 period = uint8(_period);\r\n        require(rates[period].initialized);\r\n\r\n        RateChanged(msg.sender, period, rates[period].rate, _rate);\r\n        rates[period].rate = _rate;\r\n        rates[period].updated = uint64(now);\r\n        return true;\r\n    }\r\n\r\n    function updRateBonusAirDrop(Period _period, uint256 _bonusAirDrop)\r\n    authLevel(Level.DAPP)\r\n    validPeriod(_period)\r\n    validUint(_bonusAirDrop)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        uint8 period = uint8(_period);\r\n        require(rates[period].initialized);\r\n\r\n        RateBonusChanged(msg.sender, period, rates[period].bonusAirDrop, _bonusAirDrop);\r\n        rates[period].bonusAirDrop = _bonusAirDrop;\r\n        rates[period].updated = uint64(now);\r\n        return true;\r\n    }\r\n\r\n    function updRateTimes(Period _period, uint64 _start, uint64 _stop)\r\n    authLevel(Level.ADMIN)\r\n    validPeriod(_period)\r\n    validUint64(_start)\r\n    validUint64(_stop)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        require(_start < _stop);\r\n        uint8 period = uint8(_period);\r\n        require(rates[period].initialized);\r\n\r\n        RateTimeChanged(msg.sender, period, rates[period].start, rates[period].stop, _start, _stop);\r\n        rates[period].start = _start;\r\n        rates[period].stop = _stop;\r\n        rates[period].updated = uint64(now);\r\n        return true;\r\n    }\r\n\r\n    function updRateEnabled(Period _period, bool _enabled)\r\n    authLevel(Level.ADMIN)\r\n    validPeriod(_period)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        uint8 period = uint8(_period);\r\n        require(rates[period].initialized);\r\n\r\n        rates[period].enabled = _enabled;\r\n        rates[period].updated = uint64(now);\r\n        RatePropsChanged(msg.sender, period, \"enabled\", _enabled);\r\n        return true;\r\n    }\r\n\r\n    function setInvestor(address _wallet, uint256 _bonus)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_wallet)\r\n    notThis(_wallet)\r\n    validUint(_bonus)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        uint64 now64 = uint64(now);\r\n        if (investors[_wallet].initialized) {\r\n            InvestorBonusChanged(msg.sender, _wallet, investors[_wallet].bonus, _bonus);\r\n            investors[_wallet].bonus = _bonus;\r\n            investors[_wallet].updated = now64;\r\n        } else {\r\n            Investor memory investor = Investor({\r\n                wallet: _wallet,\r\n                bonus: _bonus,\r\n                updated: now64,\r\n                preSaleEnabled: false,\r\n                enabled: true,\r\n                initialized: true\r\n            });\r\n            investors[_wallet] = investor;\r\n            investorCount = investorCount.add(1);\r\n            InvestorCreated(msg.sender, _wallet, _bonus);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updInvestorEnabled(address _wallet, bool _enabled)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_wallet)\r\n    notThis(_wallet)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        require(investors[_wallet].initialized);\r\n\r\n        investors[_wallet].enabled = _enabled;\r\n        investors[_wallet].updated = uint64(now);\r\n        InvestorPropsChanged(msg.sender, _wallet, \"enabled\", _enabled);\r\n        return true;\r\n    }\r\n\r\n    function updInvestorPreSaleEnabled(address _wallet, bool _preSaleEnabled)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_wallet)\r\n    notThis(_wallet)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        require(investors[_wallet].initialized);\r\n\r\n        investors[_wallet].preSaleEnabled = _preSaleEnabled;\r\n        investors[_wallet].updated = uint64(now);\r\n        InvestorPropsChanged(msg.sender, _wallet, \"preSaleEnabled\", _preSaleEnabled);\r\n        return true;\r\n    }\r\n\r\n    function delInvestor(address _wallet)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_wallet)\r\n    notThis(_wallet)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        require(investors[_wallet].initialized);\r\n\r\n        delete investors[_wallet];\r\n        investorCount = investorCount.sub(1);\r\n        InvestorDeleted(msg.sender, _wallet);\r\n        return true;\r\n    }\r\n\r\n    function getInvestor(address _wallet)\r\n    validAddress(_wallet)\r\n    notThis(_wallet)\r\n    public\r\n    constant\r\n    returns (uint256 bonus, uint64 updated, bool preSaleEnabled, bool enabled)\r\n    {\r\n        Investor memory investor = investors[_wallet];\r\n        require(investor.initialized);\r\n\r\n        return (investor.bonus,\r\n            investor.updated,\r\n            investor.preSaleEnabled,\r\n            investor.enabled);\r\n    }\r\n\r\n    function setWalletWithdraw(address _wallet)\r\n    onlyOwner\r\n    notThis(_wallet)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        WalletWithdrawChanged(msg.sender, walletWithdraw, _wallet);\r\n        walletWithdraw = _wallet;\r\n        return true;\r\n    }\r\n\r\n    function setDapCarToken(address _token)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_token)\r\n    notThis(_token)\r\n    notOwner(_token)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        dapCarToken = IDapCarToken(_token);\r\n        return true;\r\n    }\r\n\r\n    function setCouponToken(address _token)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_token)\r\n    notThis(_token)\r\n    notOwner(_token)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        couponToken = ICouponToken(_token);\r\n        return true;\r\n    }\r\n\r\n    function setAirDropToken(address _token)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_token)\r\n    notThis(_token)\r\n    notOwner(_token)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        airDropToken = IAirDropToken(_token);\r\n        return true;\r\n    }\r\n\r\n    function balanceAirDropToken(address _address)\r\n    validAddress(_address)\r\n    notOwner(_address)\r\n    public\r\n    view\r\n    returns (uint256 balance)\r\n    {\r\n        if (address(airDropToken) != 0) {\r\n            return airDropToken.balanceOf(_address);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function donate() \r\n    internal \r\n    {\r\n        if (msg.value > 0) {\r\n            weiDonated = weiDonated.add(msg.value);\r\n            Donate(msg.sender, msg.value);\r\n            if (walletWithdraw != address(0)) {\r\n                walletWithdraw.transfer(msg.value);\r\n            }\r\n        }\r\n\t}\r\n\r\n    function withdrawTokens(address _token, uint256 _amount)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_token)\r\n    notOwner(_token)\r\n    notThis(_token)\r\n    greaterThanZero(_amount)\r\n    public \r\n    returns (bool success) \r\n    {\r\n        address wallet = walletWithdraw;\r\n        if (wallet == address(0)) {\r\n            wallet = msg.sender;\r\n        }\r\n\r\n        bool result = IERC20(_token).transfer(wallet, _amount);\r\n        if (result) {\r\n            WithdrawTokens(msg.sender, wallet, _token, _amount);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function withdraw() \r\n    public \r\n    returns (bool success)\r\n    {\r\n        return withdrawAmount(address(this).balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) \r\n    authLevel(Level.ADMIN) \r\n    greaterThanZero(address(this).balance)\r\n    greaterThanZero(_amount)\r\n    validBalanceThis(_amount)\r\n    public \r\n    returns (bool success)\r\n    {\r\n        address wallet = walletWithdraw;\r\n        if (wallet == address(0)) {\r\n            wallet = msg.sender;\r\n        }\r\n\r\n        Withdraw(msg.sender, wallet, _amount);\r\n        wallet.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceToken(address _token)\r\n    validAddress(_token)\r\n    notOwner(_token)\r\n    notThis(_token)\r\n    public \r\n    constant\r\n    returns (uint256 amount) \r\n    {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    function getCouponBonus(string _code)\r\n    internal\r\n    view\r\n    returns (uint256) \r\n    {\r\n        uint bonus = 0;\r\n        if (couponToken == address(0) || bytes(_code).length != 8) {\r\n            return bonus;\r\n        }\r\n\r\n        bool disposable;\r\n        bool consumed;\r\n        bool enabled;\r\n        (bonus, disposable, consumed, enabled) = couponToken.getCoupon(_code);\r\n\r\n        if (enabled && (!disposable || (disposable && !consumed))) { \r\n            return bonus;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function updCouponBonusConsumed(string _code, bool _consumed)\r\n    internal\r\n    returns (bool success) \r\n    {\r\n        if (couponToken == address(0) || bytes(_code).length != 8) {\r\n            return false;\r\n        }\r\n        return couponToken.updCouponConsumed(_code, _consumed);\r\n    }\r\n\r\n    function purchase()\r\n    notThis(msg.sender)\r\n    greaterThanZero(msg.value)\r\n    internal\r\n    {\r\n        Period period = nowPeriod();\r\n        if (crowdSaleFinalized || !crowdSaleEnabled || period == Period.ZERO || msg.value <= minPurchaseLimit) {\r\n            donate();\r\n        } else if (dapCarToken == address(0)) {\r\n            donate();\r\n        } else {\r\n            Rate memory rate = rates[uint8(period)];\r\n            Investor memory investor = investors[msg.sender];\r\n            uint256 bonus = 0;\r\n            if (period == Period.PRESALE) {\r\n                if (!investor.preSaleEnabled) {\r\n                    donate();\r\n                    return;\r\n                } \r\n            }\r\n            if (investor.enabled) {\r\n                if (investor.bonus > 0) {\r\n                    bonus = bonus.add(investor.bonus);\r\n                }\r\n            }\r\n            if (msg.data.length == 8) {\r\n                uint256 bonusCoupon = getCouponBonus(string(msg.data));\r\n                if (bonusCoupon > 0 && updCouponBonusConsumed(string(msg.data), true)) {\r\n                    bonus = bonus.add(bonusCoupon);\r\n                }\r\n            }\r\n            if (airDropTokenEnabled) {\r\n                if (balanceAirDropToken(msg.sender) > 0) {\r\n                    bonus = bonus.add(rate.bonusAirDrop);\r\n                    if (airDropTokenDestroy && address(airDropToken) != 0) {\r\n                        address[] memory senders = new address[](1);\r\n                        senders[0] = msg.sender;\r\n                        airDropToken.burnAirDrop(senders);\r\n                    }\r\n                }\r\n            }\r\n            if (amountBonusEnabled) {\r\n                if (msg.value >= 5 ether && msg.value < 10 ether) {\r\n                    bonus = bonus.add(5);\r\n                } else if (msg.value >= 10 ether && msg.value < 50 ether) {\r\n                    bonus = bonus.add(10);\r\n                } else if (msg.value >= 50 ether) {\r\n                    bonus = bonus.add(15);\r\n                }\r\n            }\r\n            \r\n            uint256 purchaseToken = rate.rate.mul(1 ether).mul(msg.value).div(1 ether).div(1 ether);\r\n            if (bonus > 0) {\r\n                purchaseToken = purchaseToken.add(purchaseToken.mul(bonus).div(100));\r\n            }\r\n\r\n            if (walletWithdraw != address(0)) {\r\n                walletWithdraw.transfer(msg.value);\r\n            }\r\n\r\n            dapCarToken.mint(msg.sender, purchaseToken);\r\n            Purchase(msg.sender, msg.value, purchaseToken, bonus);\r\n\r\n            weiRaised = weiRaised.add(msg.value);\r\n            soldToken = soldToken.add(purchaseToken);\r\n        }\r\n    }\r\n\r\n    function () \r\n    notThis(msg.sender)\r\n    greaterThanZero(msg.value)\r\n    external \r\n    payable \r\n    {\r\n        purchase();\r\n\t}\r\n\r\n    function receiveApproval(address _spender, uint256 _value, address _token, bytes _extraData)\r\n    validAddress(_spender)\r\n    validAddress(_token)\r\n    greaterThanZero(_value)\r\n    public \r\n    {\r\n        IERC20 token = IERC20(_token);\r\n        require(token.transferFrom(_spender, address(this), _value));\r\n        ReceiveTokens(_spender, _token, _value, _extraData);\r\n    }\r\n\r\n    function finalize()\r\n    onlyOwner\r\n    public\r\n    returns (bool success)\r\n    {\r\n        return finalization();\r\n    }\r\n\r\n    function finalization()\r\n    internal\r\n    returns (bool success)\r\n    {\r\n        if (address(this).balance > 0) {\r\n            address wallet = walletWithdraw;\r\n            if (wallet == address(0)) {\r\n                wallet = owner;\r\n            }\r\n\r\n            Withdraw(msg.sender, wallet, address(this).balance);\r\n            wallet.transfer(address(this).balance);\r\n        }\r\n\r\n        //42% for Team, Advisor, Bounty, Reserve and Charity funds.\r\n        fundToken = soldToken.mul(42).div(100);\r\n        dapCarToken.mint(walletWithdraw, fundToken);\r\n\r\n        Finalized(msg.sender, uint64(now), weiRaised, soldToken, fundToken, weiDonated);\r\n        crowdSaleFinalized = true;\r\n        return true;\r\n    }\r\n\r\n    function kill() \r\n    onlyOwner \r\n    public \r\n    { \r\n        if (crowdSaleFinalized) {\r\n            selfdestruct(owner);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdSalePeriodInit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"delInvestor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updInvestorEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updAirDropTokenDestroy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setAirDropToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"couponToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setDapCarToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTokenEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updAirDropTokenEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setCouponToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updCouponBonusEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"couponBonusEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_preSaleEnabled\",\"type\":\"bool\"}],\"name\":\"updInvestorPreSaleEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisher\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint8\"},{\"name\":\"_bonusAirDrop\",\"type\":\"uint256\"}],\"name\":\"updRateBonusAirDrop\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountBonusEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setInvestor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getInvestor\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"updated\",\"type\":\"uint64\"},{\"name\":\"preSaleEnabled\",\"type\":\"bool\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint8\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updRateEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTokenDestroy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiDonated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updCrowdSaleEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dapCarToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWalletWithdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint8\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"rateValue\",\"type\":\"uint256\"},{\"name\":\"bonusAirDrop\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"stop\",\"type\":\"uint64\"},{\"name\":\"updated\",\"type\":\"uint64\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"updMinPurchaseLimit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint8\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceAirDropToken\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint8\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_stop\",\"type\":\"uint64\"}],\"name\":\"updRateTimes\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"authorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updAmountBonusEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletWithdrawChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceiveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RatePropsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"oldBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"oldBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"RateBonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"oldStart\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"oldStop\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newStart\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newStop\",\"type\":\"uint64\"}],\"name\":\"RateTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"InvestorDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"InvestorPropsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"InvestorBonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"InvestorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"PropsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValu\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinPurchaseLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"weiRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soldToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fundToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiDonated\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"event\"}]","ContractName":"CrowdSaleDapCar","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://03e4e9bb16d2c7c556238a336a48337eb8df5d1eb83dbf9d143d5fe370c405c9"}]}