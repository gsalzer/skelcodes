{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/******************************************************************************\r\n\r\nILOT - An Interest-paying ERC20 token and Ethereum lottery.\r\n\r\nVisit us at https://ILOT.io/\r\n\r\nERC20 Compatible Token\r\nDecimal places: 18\r\nSymbol: ILOT\r\n\r\n*******************************************************************************\r\n\r\nCopyright (C) 2018 ILOT.io\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n-----\r\n\r\nIf you use this code on your own contracts, please credit the website https://ILOT.io/ - Thank you!\r\n\r\n-----\r\n\r\n////////////////\r\n/B/S/B/J/M/A/F/\r\n//////////////\r\n////PEACE////\r\n////////////\r\n\r\n*/\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint _value, address _token, bytes _extraData) public; }\r\n\r\ncontract ILOTContract {\r\n\r\n    string public name = \"ILOT Interest-Paying Lottery Token\";\r\n    string public symbol = \"ILOT\";\r\n    \r\n    /*\r\n        We've hardcoded our official website into the blockchain!\r\n        Please do not send ETH to scams/clones/copies. \r\n        The website indicated below is the only official ILOT website.\r\n    */\r\n    string public site_url = \"https://ILOT.io/\";\r\n\r\n    bytes32 private current_jackpot_hash = \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\";\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply = 0; // No pre-minted amount.\r\n    uint public interestRate = 15; // 1.5% fixed monthly interest = 15 / 1000\r\n    uint tokensPerEthereum = 147000; // 147k tokens per ETH\r\n    uint public jackpotDifficulty = 6;\r\n    address public owner;\r\n\r\n    function ILOTContract() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    mapping (address => uint) public depositTotal; // total ETH deposited per address\r\n    mapping (address => uint) public lastBlockInterestPaid;\r\n\r\n    /*\r\n        Declare ILOT events.\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint bhtc_value);\r\n    event Burn(address indexed from, uint bhtc_value);\r\n    event GameResult(address player, uint zeroes);\r\n    event BonusPaid(address to, uint bhtc_value);\r\n    event InterestPaid(address to, uint bhtc_value);\r\n    event Jackpot(address winner, uint eth_amount);\r\n\r\n    uint maintenanceDebt;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*\r\n        Return an addresse's current unpaid interest amount in ILOT.\r\n    */\r\n    function getInterest(address _to) public view returns (uint interest) {\r\n\r\n        if (lastBlockInterestPaid[_to] > 0) {\r\n            interest = ((block.number - lastBlockInterestPaid[_to]) * balanceOf[_to] * interestRate) / (86400000);\r\n        } else {\r\n            interest = 0;\r\n        }\r\n\r\n        return interest;\r\n    }\r\n\r\n    /*\r\n        Allows users to check their current deposit bonus amount.\r\n        Formula: 1% bonus over lifetime ETH deposit history\r\n        depositTotal is denominated in ETH\r\n    */\r\n    function getBonus(address _to) public view returns (uint interest) {\r\n        return ((depositTotal[_to] * tokensPerEthereum) / 100);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        /*\r\n            Owed interest is paid before transfers/withdrawals.\r\n            Users may be able to withdraw/transfer more than they publicly see.\r\n            Use getInterest(ETHEREUM_ADDRESS) to check how much interests\r\n            will be paid before transfers or future deposits.\r\n        */\r\n        payInterest(_from);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function setUrl(string u) public onlyOwner {\r\n        site_url = u;\r\n    }\r\n\r\n    function getUrl() public view returns (string) {\r\n        return site_url;\r\n    }\r\n\r\n    /*\r\n        Difficulty adjustment.\r\n    */\r\n    function setDifficulty(uint z) public onlyOwner {\r\n        jackpotDifficulty = z;\r\n    }\r\n\r\n    /*\r\n        Get current difficulty.\r\n        Returns number of zeroes currently required.\r\n    */\r\n    function getDifficulty() public view returns (uint) {\r\n        return jackpotDifficulty;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint _value, bytes _extraData)\r\n    public\r\n    returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function chown(address to) public onlyOwner { owner = to; }\r\n\r\n    function burn(uint _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        Pays interest on available funds.\r\n    */\r\n    function payInterest(address _to) private {\r\n\r\n        uint interest = getInterest(_to);\r\n\r\n        if (interest > 0) {\r\n            require( (balanceOf[_to] + interest) > balanceOf[_to]);\r\n            // pay interest\r\n            balanceOf[msg.sender] += interest;\r\n            totalSupply += interest;\r\n            Transfer(this, msg.sender, interest);\r\n            InterestPaid(_to, interest);\r\n        }\r\n\r\n        lastBlockInterestPaid[_to] = block.number;\r\n\r\n    }\r\n\r\n    /*\r\n        Pays a 1% bonus over lifetime deposits made to this address.\r\n        Does not carry over if you change Ethereum addresses.\r\n    */\r\n    function payBonus(address _to) private {\r\n        if (depositTotal[_to] > 0) {\r\n            uint bonus = getBonus(_to);\r\n            if (bonus > 0) {\r\n                require( (balanceOf[_to] + bonus) > balanceOf[_to]);\r\n                balanceOf[_to] +=  bonus;\r\n                totalSupply += bonus;\r\n                Transfer(this, _to, bonus);\r\n                BonusPaid(_to, bonus);\r\n            }\r\n        }\r\n    }\r\n\r\n    function hashDifficulty(bytes32 hash) public pure returns(uint) {\r\n        uint diff = 0;\r\n\r\n        for (uint i=0;i<32;i++) {\r\n            if (hash[i] == 0) {\r\n                diff++;\r\n            } else {\r\n                return diff;\r\n            }\r\n        }\r\n\r\n        return diff;\r\n    }\r\n\r\n    /*\r\n        Credit to user @eth from StackExchange at:\r\n        https://ethereum.stackexchange.com/questions/8346/convert-address-to-string\r\n        License for addressToString(): CC BY-SA 3.0\r\n    */\r\n    function addressToString(address x) private pure returns (string) {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++)\r\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        return string(b);\r\n    }\r\n\r\n    /*\r\n        Performs token exchange and runs the lottery routine.\r\n\r\n    */\r\n    function () public payable {\r\n\r\n        /*\r\n            Owner cannot play lottery.\r\n        */\r\n        if (msg.sender == owner) {\r\n            return;\r\n        }\r\n\r\n        if (msg.value > 0) {\r\n\r\n            /*\r\n                Maintenance fee 2%\r\n            */\r\n            uint mfee = (2 * msg.value) / 100;\r\n\r\n            /*\r\n                If the contract does not have sufficient balance to pay mfee,\r\n                it will add mfee to maintenanceDebt and will not transfer it\r\n                at this time. During a later transaction, if the fee is enough,\r\n                the previous debt is transferred and zeroed out.\r\n            */\r\n            if (address(this).balance >= mfee) {\r\n                if (address(this).balance >= (mfee + maintenanceDebt) ) {\r\n                    // there's enough to cover previous debt\r\n                    owner.transfer(mfee + maintenanceDebt);\r\n                    maintenanceDebt = 0;\r\n                } else {\r\n                    // enough to pay fee but not previous debts\r\n                    owner.transfer(mfee);\r\n                }\r\n\r\n            } else {\r\n                maintenanceDebt += mfee;\r\n            }\r\n\r\n            /*\r\n                Convert ETH to ILOT at tokensPerEthereum rate.\r\n            */\r\n            uint tokenAmount = tokensPerEthereum * msg.value;\r\n            if (tokenAmount > 0) {\r\n                require( (balanceOf[msg.sender] + tokenAmount) > balanceOf[msg.sender]);\r\n\r\n                /*\r\n                    Pay fidelity bonus.\r\n                */\r\n                payBonus(msg.sender);\r\n\r\n                /*\r\n                    Pay interests on previous balance.\r\n                */\r\n                payInterest(msg.sender);\r\n\r\n                /*\r\n                    Update balance.\r\n                */\r\n                balanceOf[msg.sender] += tokenAmount;\r\n                totalSupply += tokenAmount;\r\n                Transfer(this, msg.sender, tokenAmount);\r\n\r\n                /*\r\n                    Add total after paying bonus.\r\n                    This deposit will count towards the next deposit bonus.\r\n                */\r\n                depositTotal[msg.sender] += msg.value;\r\n\r\n                string memory ats = addressToString(msg.sender);\r\n\r\n                /*\r\n                    Perform lottery routine.\r\n                */\r\n                current_jackpot_hash = keccak256(current_jackpot_hash, ats, block.coinbase, block.number, block.timestamp);\r\n                uint diffx = hashDifficulty(current_jackpot_hash);\r\n\r\n                if (diffx >= jackpotDifficulty) {\r\n                    /*\r\n\r\n                        ********************\r\n                        ****  JACKPOT!  ****\r\n                        ********************\r\n\r\n                        Winner receives the entire contract balance.\r\n                        Jackpot event makes the result public.\r\n\r\n                    */\r\n                    Jackpot(msg.sender, address(this).balance);\r\n                    msg.sender.transfer(address(this).balance);\r\n                }\r\n\r\n                /*\r\n                    Make the game result public for transparency.\r\n                */\r\n                GameResult(msg.sender, diffx);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"site_url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"u\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"setDifficulty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"chown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBlockInterestPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"hashDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bhtc_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bhtc_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"zeroes\",\"type\":\"uint256\"}],\"name\":\"GameResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bhtc_value\",\"type\":\"uint256\"}],\"name\":\"BonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bhtc_value\",\"type\":\"uint256\"}],\"name\":\"InterestPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"}]","ContractName":"ILOTContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cbe0d5b999c821862c06f0cfe41aeb2a2a5cfb24627647e2ded22a990d5bd89b"}]}