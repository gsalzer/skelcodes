{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        //   require(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        //   require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ControlCentreInterface\r\n * @dev ControlCentreInterface is an interface for providing commonly used function\r\n * signatures to the ControlCentre\r\n */\r\ncontract ControllerInterface {\r\n\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256);\r\n    function approve(address owner, address spender, uint256 value) public returns (bool);\r\n    function transfer(address owner, address to, uint value, bytes data) public returns (bool);\r\n    function transferFrom(address owner, address from, address to, uint256 amount, bytes data) public returns (bool);\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n\r\n/*\r\n * ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract ERC223Basic is ERC20Basic {\r\n    function transfer(address to, uint value, bytes data) public returns (bool);\r\n}\r\n\r\ncontract ERC20 is ERC223Basic {\r\n    // active supply of tokens\r\n    function allowance(address _owner, address _spender) public constant returns (uint256);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Token is Ownable, ERC20 {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintToggle(bool status);\r\n\r\n    // Constant Functions\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return ControllerInterface(owner).balanceOf(_owner);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return ControllerInterface(owner).totalSupply();\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return ControllerInterface(owner).allowance(_owner, _spender);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        bytes memory empty;\r\n        _checkDestination(address(this), _to, _amount, empty);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function mintToggle(bool status) onlyOwner public returns (bool) {\r\n        MintToggle(status);\r\n        return true;\r\n    }\r\n\r\n    // public functions\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        ControllerInterface(owner).approve(msg.sender, _spender, _value);\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transfer(_to, _value, empty);\r\n    }\r\n\r\n    function transfer(address to, uint value, bytes data) public returns (bool) {\r\n        ControllerInterface(owner).transfer(msg.sender, to, value, data);\r\n        Transfer(msg.sender, to, value);\r\n        _checkDestination(msg.sender, to, value, data);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transferFrom(_from, _to, _value, empty);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount, bytes _data) public returns (bool) {\r\n        ControllerInterface(owner).transferFrom(msg.sender, _from, _to, _amount, _data);\r\n        Transfer(_from, _to, _amount);\r\n        _checkDestination(_from, _to, _amount, _data);\r\n        return true;\r\n    }\r\n\r\n    // Internal Functions\r\n    function _checkDestination(address _from, address _to, uint256 _value, bytes _data) internal {\r\n        uint256 codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract untrustedReceiver = ERC223ReceivingContract(_to);\r\n            // untrusted contract call\r\n            untrustedReceiver.tokenFallback(_from, _value, _data);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract DataCentre is Ownable {\r\n    struct Container {\r\n        mapping(bytes32 => uint256) values;\r\n        mapping(bytes32 => address) addresses;\r\n        mapping(bytes32 => bool) switches;\r\n        mapping(address => uint256) balances;\r\n        mapping(address => mapping (address => uint)) constraints;\r\n    }\r\n\r\n    mapping(bytes32 => Container) containers;\r\n\r\n    // Owner Functions\r\n    function setValue(bytes32 _container, bytes32 _key, uint256 _value) public onlyOwner {\r\n        containers[_container].values[_key] = _value;\r\n    }\r\n\r\n    function setAddress(bytes32 _container, bytes32 _key, address _value) public onlyOwner {\r\n        containers[_container].addresses[_key] = _value;\r\n    }\r\n\r\n    function setBool(bytes32 _container, bytes32 _key, bool _value) public onlyOwner {\r\n        containers[_container].switches[_key] = _value;\r\n    }\r\n\r\n    function setBalanace(bytes32 _container, address _key, uint256 _value) public onlyOwner {\r\n        containers[_container].balances[_key] = _value;\r\n    }\r\n\r\n\r\n    function setConstraint(bytes32 _container, address _source, address _key, uint256 _value) public onlyOwner {\r\n        containers[_container].constraints[_source][_key] = _value;\r\n    }\r\n\r\n    // Constant Functions\r\n    function getValue(bytes32 _container, bytes32 _key) public constant returns(uint256) {\r\n        return containers[_container].values[_key];\r\n    }\r\n\r\n    function getAddress(bytes32 _container, bytes32 _key) public constant returns(address) {\r\n        return containers[_container].addresses[_key];\r\n    }\r\n\r\n    function getBool(bytes32 _container, bytes32 _key) public constant returns(bool) {\r\n        return containers[_container].switches[_key];\r\n    }\r\n\r\n    function getBalanace(bytes32 _container, address _key) public constant returns(uint256) {\r\n        return containers[_container].balances[_key];\r\n    }\r\n\r\n    function getConstraint(bytes32 _container, address _source, address _key) public constant returns(uint256) {\r\n        return containers[_container].constraints[_source][_key];\r\n    }\r\n}\r\n\r\ncontract Governable {\r\n\r\n    // list of admins, council at first spot\r\n    address[] public admins;\r\n\r\n    modifier onlyAdmins() {\r\n        var(adminStatus, ) = isAdmin(msg.sender);\r\n        require(adminStatus == true);\r\n        _;\r\n    }\r\n\r\n    function Governable() public {\r\n        admins.length = 1;\r\n        admins[0] = msg.sender;\r\n    }\r\n\r\n    function addAdmin(address _admin) public onlyAdmins {\r\n        var(adminStatus, ) = isAdmin(_admin);\r\n        require(!adminStatus);\r\n        require(admins.length < 10);\r\n        admins[admins.length++] = _admin;\r\n    }\r\n\r\n    function removeAdmin(address _admin) public onlyAdmins {\r\n        var(adminStatus, pos) = isAdmin(_admin);\r\n        require(adminStatus);\r\n        require(pos < admins.length);\r\n        // if not last element, switch with last\r\n        if (pos < admins.length - 1) {\r\n            admins[pos] = admins[admins.length - 1];\r\n        }\r\n        // then cut off the tail\r\n        admins.length--;\r\n    }\r\n\r\n    function isAdmin(address _addr) internal returns (bool isAdmin, uint256 pos) {\r\n        isAdmin = false;\r\n        for (uint256 i = 0; i < admins.length; i++) {\r\n            if (_addr == admins[i]) {\r\n            isAdmin = true;\r\n            pos = i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Governable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = true;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused(address _to) {\r\n        var(adminStatus, ) = isAdmin(_to);\r\n        require(!paused || adminStatus);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused(address _to) {\r\n        var(adminStatus, ) = isAdmin(_to);\r\n        require(paused || adminStatus);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyAdmins whenNotPaused(msg.sender) public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyAdmins whenPaused(msg.sender) public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract DataManager is Pausable {\r\n\r\n    // satelite contract addresses\r\n    address public dataCentreAddr;\r\n\r\n    function DataManager(address _dataCentreAddr) {\r\n        dataCentreAddr = _dataCentreAddr;\r\n    }\r\n\r\n    // Constant Functions\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return DataCentre(dataCentreAddr).getBalanace(\"FORCE\", _owner);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return DataCentre(dataCentreAddr).getValue(\"FORCE\", \"totalSupply\");\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return DataCentre(dataCentreAddr).getConstraint(\"FORCE\", _owner, _spender);\r\n    }\r\n\r\n    function _setTotalSupply(uint256 _newTotalSupply) internal {\r\n        DataCentre(dataCentreAddr).setValue(\"FORCE\", \"totalSupply\", _newTotalSupply);\r\n    }\r\n\r\n    function _setBalanceOf(address _owner, uint256 _newValue) internal {\r\n        DataCentre(dataCentreAddr).setBalanace(\"FORCE\", _owner, _newValue);\r\n    }\r\n\r\n    function _setAllowance(address _owner, address _spender, uint256 _newValue) internal {\r\n        require(balanceOf(_owner) >= _newValue);\r\n        DataCentre(dataCentreAddr).setConstraint(\"FORCE\", _owner, _spender, _newValue);\r\n    }\r\n\r\n}\r\n\r\ncontract SimpleControl is DataManager {\r\n    using SafeMath for uint;\r\n\r\n    // not necessary to store in data centre  address public satellite;\r\n\r\n    address public satellite;\r\n\r\n    modifier onlyToken {\r\n        require(msg.sender == satellite);\r\n        _;\r\n    }\r\n\r\n    function SimpleControl(address _satellite, address _dataCentreAddr) public\r\n        DataManager(_dataCentreAddr)\r\n    {\r\n        satellite = _satellite;\r\n    }\r\n\r\n    // public functions\r\n    function approve(address _owner, address _spender, uint256 _value) public onlyToken whenNotPaused(_owner) {\r\n        require(_owner != _spender);\r\n        _setAllowance(_owner, _spender, _value);\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _amount, bytes _data) public onlyToken whenNotPaused(_from) {\r\n        _transfer(_from, _to, _amount, _data);\r\n    }\r\n\r\n    function transferFrom(address _sender, address _from, address _to, uint256 _amount, bytes _data) public onlyToken whenNotPaused(_sender) {\r\n        _setAllowance(_from, _to, allowance(_from, _to).sub(_amount));\r\n        _transfer(_from, _to, _amount, _data);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount, bytes _data) internal {\r\n        require(_to != address(this));\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n        require(_from != _to);\r\n        _setBalanceOf(_from, balanceOf(_from).sub(_amount));\r\n        _setBalanceOf(_to, balanceOf(_to).add(_amount));\r\n    }\r\n}\r\n\r\n\r\ncontract CrowdsaleControl is SimpleControl {\r\n    using SafeMath for uint;\r\n\r\n    // not necessary to store in data centre\r\n    bool public mintingFinished;\r\n\r\n    modifier canMint(bool status, address _to) {\r\n        var(adminStatus, ) = isAdmin(_to);\r\n        require(!mintingFinished == status || adminStatus);\r\n        _;\r\n    }\r\n\r\n    function CrowdsaleControl(address _satellite, address _dataCentreAddr) public\r\n        SimpleControl(_satellite, _dataCentreAddr)\r\n    {\r\n\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) whenNotPaused(_to) canMint(true, msg.sender) onlyAdmins public returns (bool) {\r\n        _setTotalSupply(totalSupply().add(_amount));\r\n        _setBalanceOf(_to, balanceOf(_to).add(_amount));\r\n        Token(satellite).mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function startMinting() onlyAdmins public returns (bool) {\r\n        mintingFinished = false;\r\n        Token(satellite).mintToggle(mintingFinished);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyAdmins public returns (bool) {\r\n        mintingFinished = true;\r\n        Token(satellite).mintToggle(mintingFinished);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n Simple Token based on OpenZeppelin token contract\r\n */\r\ncontract Controller is CrowdsaleControl {\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    function Controller(address _satellite, address _dataCentreAddr) public\r\n        CrowdsaleControl(_satellite, _dataCentreAddr)\r\n    {\r\n\r\n    }\r\n\r\n    // Owner Functions\r\n    function setContracts(address _satellite, address _dataCentreAddr) public onlyAdmins whenPaused(msg.sender) {\r\n        dataCentreAddr = _dataCentreAddr;\r\n        satellite = _satellite;\r\n    }\r\n\r\n    function kill(address _newController) public onlyAdmins whenPaused(msg.sender) {\r\n        if (dataCentreAddr != address(0)) { \r\n            Ownable(dataCentreAddr).transferOwnership(msg.sender);\r\n        }\r\n        if (satellite != address(0)) {\r\n            Ownable(satellite).transferOwnership(msg.sender);\r\n        }\r\n        selfdestruct(_newController);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataCentreAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"satellite\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_satellite\",\"type\":\"address\"},{\"name\":\"_dataCentreAddr\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_satellite\",\"type\":\"address\"},{\"name\":\"_dataCentreAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Controller","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000794eb1f985f472c0b44c4041b4198478366f9940000000000000000000000000b070c9862c7e18e5d9ffe10a3b44cdd814d1e827","Library":"","SwarmSource":"bzzr://ea5e9b3349497096473cb739819e93fc6be35a61c81bc3ea2c93b747f66f1b47"}]}