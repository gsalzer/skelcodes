{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract Beneficiary {\r\n    function payFee() public payable;\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    Beneficiary public beneficiary;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        beneficiary = Beneficiary(_newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Integrity is Owned {\r\n    uint256 public fee;\r\n\r\n    event Engraved(address indexed _from, string _namespace, string _name, bytes32 _hash);\r\n\r\n    struct FileInfo {\r\n        string name;\r\n        bool isValid;\r\n    }\r\n\r\n    struct Namespace {\r\n        mapping(bytes32 => FileInfo) files;\r\n        mapping(address => bool) permissions;\r\n        address owner;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => Namespace) registry;\r\n\r\n    modifier onlyNamespaceOwner(string _namespace) {\r\n        require(msg.sender == registry[_namespace].owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNamespaceMember(string _namespace) {\r\n        require(registry[_namespace].permissions[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function Integrity(uint256 _fee) public {\r\n        owner = msg.sender;\r\n        beneficiary = Beneficiary(msg.sender);\r\n\r\n        fee = _fee;\r\n\r\n        Namespace memory namespace = Namespace({\r\n            owner: 0x0,\r\n            isValid: true\r\n        });\r\n\r\n        registry[\"default\"] = namespace;\r\n    }\r\n\r\n    function updateFee(uint256 _fee) public onlyOwner {\r\n        fee = _fee;\r\n    }\r\n\r\n    function createNamespace(string _namespace) public payable {\r\n        require(!registry[_namespace].isValid);\r\n        require(msg.value >= fee * 10);\r\n\r\n        Namespace memory namespace = Namespace({\r\n            owner: msg.sender,\r\n            isValid: true\r\n        });\r\n\r\n        registry[_namespace] = namespace;\r\n        registry[_namespace].permissions[msg.sender] = true;\r\n\r\n        beneficiary.payFee.value(msg.value)();\r\n    }\r\n\r\n    function changeNamespaceOwner(string _namespace, address _newOwner)\r\n    public onlyNamespaceOwner(_namespace) {\r\n        require(registry[_namespace].isValid);\r\n\r\n        registry[_namespace].owner = _newOwner;\r\n    }\r\n\r\n    function addNamespaceMember(string _namespace, address _newMember)\r\n    public onlyNamespaceOwner(_namespace) {\r\n        require(registry[_namespace].isValid);\r\n\r\n        registry[_namespace].permissions[_newMember] = true;\r\n    }\r\n\r\n    function removeNamespaceMember(string _namespace, address _member)\r\n    public onlyNamespaceOwner(_namespace) {\r\n        require(registry[_namespace].isValid);\r\n        require(registry[_namespace].permissions[_member]);\r\n\r\n        registry[_namespace].permissions[_member] = false;\r\n    }\r\n\r\n    function engraveNamespace(string _namespace, string _name, bytes32 _hash)\r\n    public onlyNamespaceMember(_namespace) payable {\r\n        require(registry[_namespace].isValid);\r\n        require(!registry[_namespace].files[_hash].isValid);\r\n        require(msg.value >= fee);\r\n\r\n        FileInfo memory info = FileInfo({\r\n            name: _name,\r\n            isValid: true\r\n        });\r\n\r\n        registry[_namespace].files[_hash] = info;\r\n\r\n        beneficiary.payFee.value(msg.value)();\r\n\r\n        Engraved(msg.sender, _namespace, _name, _hash);\r\n    }\r\n\r\n    function engrave(string _name, bytes32 _hash) public payable {\r\n        require(registry[\"default\"].isValid);\r\n        require(!registry[\"default\"].files[_hash].isValid);\r\n        require(msg.value >= fee);\r\n\r\n        FileInfo memory info = FileInfo({\r\n            name: _name,\r\n            isValid: true\r\n        });\r\n\r\n        registry[\"default\"].files[_hash] = info;\r\n\r\n        beneficiary.payFee.value(msg.value)();\r\n\r\n        Engraved(msg.sender, \"default\", _name, _hash);\r\n    }\r\n\r\n    function checkFileNamespace(string _namespace, bytes32 _hash)\r\n    public constant returns (string name) {\r\n        return registry[_namespace].files[_hash].name;\r\n    }\r\n\r\n    function checkFile(bytes32 _hash)\r\n    public constant returns (string name) {\r\n        return registry[\"default\"].files[_hash].name;\r\n    }\r\n\r\n    function getHash(string _input) public pure returns (bytes32 hash) {\r\n        return keccak256(_input);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"checkFileNamespace\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeNamespaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"checkFile\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"engrave\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"},{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addNamespaceMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"string\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"},{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeNamespaceMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"engraveNamespace\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"}],\"name\":\"createNamespace\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_namespace\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"Engraved\",\"type\":\"event\"}]","ContractName":"Integrity","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000005af3107a4000","Library":"","SwarmSource":"bzzr://a812aa53d91f872932d4d75dfbcd8092e5ba263ea935cc8b141c5f3466831758"}]}