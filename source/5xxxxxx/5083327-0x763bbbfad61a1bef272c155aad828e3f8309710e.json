{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/flavours/Lockable.sol\r\n\r\n/**\r\n * @title Lockable\r\n * @dev Base contract which allows children to\r\n *      implement main operations locking mechanism.\r\n */\r\ncontract Lockable is Ownable {\r\n  event Lock();\r\n  event Unlock();\r\n\r\n  bool public locked = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable\r\n  *       only when the contract is not locked.\r\n   */\r\n  modifier whenNotLocked() {\r\n    require(!locked);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable\r\n   *      only when the contract is locked.\r\n   */\r\n  modifier whenLocked() {\r\n    require(locked);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to locke, triggers locked state\r\n   */\r\n  function lock() onlyOwner whenNotLocked public {\r\n    locked = true;\r\n    Lock();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner\r\n   *      to unlock, returns to unlocked state\r\n   */\r\n  function unlock() onlyOwner whenLocked public {\r\n    locked = false;\r\n    Unlock();\r\n  }\r\n}\r\n\r\n// File: contracts/base/BaseFixedERC20Token.sol\r\n\r\ncontract BaseFixedERC20Token is Lockable {\r\n  using SafeMath for uint;\r\n\r\n  /// @dev ERC20 Total supply\r\n  uint public totalSupply;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  mapping(address => mapping (address => uint)) private allowed;\r\n\r\n  /// @dev Fired if Token transfered accourding to ERC20\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  /// @dev Fired if Token withdraw is approved accourding to ERC20\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param owner_ The address to query the the balance of.\r\n   * @return An uint representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address owner_) public view returns (uint balance) {\r\n    return balances[owner_];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer token for a specified address\r\n   * @param to_ The address to transfer to.\r\n   * @param value_ The amount to be transferred.\r\n   */\r\n  function transfer(address to_, uint value_) whenNotLocked public returns (bool) {\r\n    require(to_ != address(0) && value_ <= balances[msg.sender]);\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(value_);\r\n    balances[to_] = balances[to_].add(value_);\r\n    Transfer(msg.sender, to_, value_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from_ address The address which you want to send tokens from\r\n   * @param to_ address The address which you want to transfer to\r\n   * @param value_ uint the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address from_, address to_, uint value_) whenNotLocked public returns (bool) {\r\n    require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\r\n    balances[from_] = balances[from_].sub(value_);\r\n    balances[to_] = balances[to_].add(value_);\r\n    allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\r\n    Transfer(from_, to_, value_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering.\r\n   *\r\n   * To change the approve amount you first have to reduce the addresses\r\n   * allowance to zero by calling `approve(spender_, 0)` if it is not\r\n   * already 0 to mitigate the race condition described in:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * @param spender_ The address which will spend the funds.\r\n   * @param value_ The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender_, uint value_) whenNotLocked public returns (bool) {\r\n    if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\r\n      revert();\r\n    }\r\n    allowed[msg.sender][spender_] = value_;\r\n    Approval(msg.sender, spender_, value_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner_ address The address which owns the funds.\r\n   * @param spender_ address The address which will spend the funds.\r\n   * @return A uint specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address owner_, address spender_) view public returns (uint) {\r\n    return allowed[owner_][spender_];\r\n  }\r\n}\r\n\r\n// File: contracts/base/BaseICOToken.sol\r\n\r\n/**\r\n * @dev Not mintable, ERC20 compilant token, distributed by ICO/Pre-ICO.\r\n */\r\ncontract BaseICOToken is BaseFixedERC20Token {\r\n\r\n  /// @dev Available supply of tokens\r\n  uint public availableSupply;\r\n\r\n  /// @dev ICO/Pre-ICO smart contract allowed to distribute public funds for this\r\n  address public ico;\r\n\r\n  /// @dev Fired if investment for `amount` of tokens performed by `to` address\r\n  event ICOTokensInvested(address indexed to, uint amount);\r\n\r\n  /// @dev ICO contract changed for this token\r\n  event ICOChanged(address indexed icoContract);\r\n\r\n  /**\r\n   * @dev Not mintable, ERC20 compilant token, distributed by ICO/Pre-ICO.\r\n   * @param totalSupply_ Total tokens supply.\r\n   */\r\n  function BaseICOToken(uint totalSupply_) public {\r\n    locked = true; // Audit: I'd call lock() for better readability\r\n    totalSupply = totalSupply_;\r\n    availableSupply = totalSupply_;\r\n  }\r\n\r\n  /**\r\n   * @dev Set address of ICO smart-contract which controls token\r\n   * initial token distribution.\r\n   * @param ico_ ICO contract address.\r\n   */\r\n  function changeICO(address ico_) onlyOwner public {\r\n    ico = ico_;\r\n    ICOChanged(ico);\r\n  }\r\n\r\n  // Audit: Keep the sender logic separated from the input validation\r\n  // Audit Create modifier onlyICOAddress -  and use it in the icoInvestment method\r\n  function isValidICOInvestment(address to_, uint amount_) internal view returns(bool) {\r\n    return msg.sender == ico && to_ != address(0) && amount_ <= availableSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Assign `amount_` of tokens to investor identified by `to_` address.\r\n   * @param to_ Investor address.\r\n   * @param amount_ Number of tokens distributed.\r\n   */\r\n  function icoInvestment(address to_, uint amount_) public returns (uint) {\r\n    require(isValidICOInvestment(to_, amount_));\r\n    availableSupply -= amount_; // Audit: Please keep using safe math here too \r\n    balances[to_] = balances[to_].add(amount_);\r\n    ICOTokensInvested(to_, amount_);\r\n    return amount_;\r\n  }\r\n}\r\n\r\n// File: contracts/OTCToken.sol\r\n\r\n/**\r\n * @title ERC20 OTC Token https://otcrit.org\r\n */\r\ncontract OTCToken is BaseICOToken {\r\n  using SafeMath for uint;\r\n\r\n  string public constant name = 'Otcrit token';\r\n\r\n  string public constant symbol = 'OTC';\r\n\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint internal constant ONE_TOKEN = 1e18;\r\n\r\n\r\n  /// @dev Fired some tokens distributed to someone from team,bounty,parthners,others\r\n  event ReservedTokensDistributed(address indexed to, uint8 group, uint amount);\r\n\r\n  /**\r\n   * @dev Constructor\r\n   * @param totalSupplyTokens_ Total amount of tokens supplied\r\n   * @param reservedTeamTokens_ Number of tokens reserved for team\r\n   * @param reservedPartnersTokens_ Number of tokens reserved for partners\r\n   * @param reservedBountyTokens_ Number of tokens reserved for bounty participants\r\n   * @param reservedOtherTokens_ Number of privately distributed tokens reserved for others\r\n   */\r\n  function OTCToken(uint totalSupplyTokens_,\r\n                    uint reservedTeamTokens_,\r\n                    uint reservedPartnersTokens_,\r\n                    uint reservedBountyTokens_,\r\n                    uint reservedOtherTokens_)\r\n    BaseICOToken(totalSupplyTokens_ * ONE_TOKEN) public {\r\n    require(availableSupply == totalSupply);\r\n    availableSupply = availableSupply\r\n                        .sub(reservedTeamTokens_ * ONE_TOKEN)\r\n                        .sub(reservedBountyTokens_ * ONE_TOKEN)\r\n                        .sub(reservedPartnersTokens_ * ONE_TOKEN)\r\n                        .sub(reservedOtherTokens_ * ONE_TOKEN);\r\n    reserved[RESERVED_TEAM_SIDE] = reservedTeamTokens_ * ONE_TOKEN / 2;\r\n    locktime[RESERVED_TEAM_SIDE] = 0;\r\n    reserved[RESERVED_TEAM_LOCKED_SIDE] = reservedTeamTokens_ * ONE_TOKEN / 2;\r\n    locktime[RESERVED_TEAM_LOCKED_SIDE] = block.timestamp + 2 years; // lock part for 2 years\r\n    reserved[RESERVED_BOUNTY_SIDE] = reservedBountyTokens_ * ONE_TOKEN;\r\n    locktime[RESERVED_BOUNTY_SIDE] = 0;\r\n    reserved[RESERVED_PARTNERS_SIDE] = reservedPartnersTokens_ * ONE_TOKEN / 2;\r\n    locktime[RESERVED_PARTNERS_SIDE] = 0;\r\n    reserved[RESERVED_PARTNERS_LOCKED_SIDE] = reservedPartnersTokens_ * ONE_TOKEN / 2;\r\n    locktime[RESERVED_PARTNERS_LOCKED_SIDE] = block.timestamp + 1 years; // lock part for 1 year\r\n    reserved[RESERVED_OTHERS_SIDE] = reservedOtherTokens_ * ONE_TOKEN;\r\n    locktime[RESERVED_OTHERS_SIDE] = 0;\r\n  }\r\n\r\n  // Disable direct payments\r\n  function() external payable {\r\n    revert();\r\n  }\r\n\r\n  //---------------------------- OTC specific\r\n\r\n  /// @dev Tokens for team members\r\n  uint8 public RESERVED_TEAM_SIDE = 0x1;\r\n\r\n  /// @dev Tokens for bounty participants\r\n  uint8 public RESERVED_BOUNTY_SIDE = 0x2;\r\n\r\n  /// @dev Tokens for OTCRIT partners\r\n  uint8 public RESERVED_PARTNERS_SIDE = 0x4;\r\n\r\n  /// @dev Other privately distributed tokens\r\n  uint8 public RESERVED_OTHERS_SIDE = 0x8;\r\n\r\n  /// @dev Tokens for team members (locked)\r\n  uint8 public RESERVED_TEAM_LOCKED_SIDE = 0x10;\r\n\r\n  /// @dev Tokens for OTCRIT partners (locked)\r\n  uint8 public RESERVED_PARTNERS_LOCKED_SIDE = 0x20;\r\n\r\n  /// @dev Token reservation mapping: key(RESERVED_X) => value(number of tokens)\r\n  mapping(uint8 => uint) public reserved;\r\n\r\n  mapping(uint8 => uint) public locktime;\r\n\r\n  /**\r\n   * @dev Get reserved tokens for specific group\r\n   */\r\n  function getReservedTokens(uint8 group_) view public returns (uint) {\r\n    return reserved[group_];\r\n  }\r\n\r\n  function getLockTime(uint8 group_) view public returns (uint) {\r\n    return locktime[group_];\r\n  }\r\n\r\n  /**\r\n   * @dev Assign `amount_` of privately distributed tokens\r\n   *      to someone identified with `to_` address.\r\n   * @param to_   Tokens owner\r\n   * @param group_ Group identifier of privately distributed tokens\r\n   * @param amount_ Number of tokens distributed with decimals part\r\n   */\r\n  function assignReserved(address to_, uint8 group_, uint amount_) onlyOwner public {\r\n    require(to_ != address(0) && (group_ & 0x3f) != 0);\r\n    // check lock\r\n    require(block.timestamp > locktime[group_]);\r\n    // SafeMath will check reserved[group_] >= amount\r\n    reserved[group_] = reserved[group_].sub(amount_);\r\n    balances[to_] = balances[to_].add(amount_);\r\n    ReservedTokensDistributed(to_, group_, amount_);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_\",\"type\":\"uint8\"}],\"name\":\"getReservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"group_\",\"type\":\"uint8\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"assignReserved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_PARTNERS_LOCKED_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico_\",\"type\":\"address\"}],\"name\":\"changeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_TEAM_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"icoInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_PARTNERS_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_\",\"type\":\"uint8\"}],\"name\":\"getLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_BOUNTY_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"locktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_OTHERS_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_TEAM_LOCKED_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupplyTokens_\",\"type\":\"uint256\"},{\"name\":\"reservedTeamTokens_\",\"type\":\"uint256\"},{\"name\":\"reservedPartnersTokens_\",\"type\":\"uint256\"},{\"name\":\"reservedBountyTokens_\",\"type\":\"uint256\"},{\"name\":\"reservedOtherTokens_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservedTokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ICOTokensInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"icoContract\",\"type\":\"address\"}],\"name\":\"ICOChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OTCToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000006acfc000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000004c4b40","Library":"","SwarmSource":"bzzr://929e54977a69b0496c2a4e8a7877ae9a89ca70f09abab042eb7a99835869915e"}]}