{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n// EthernityFinancialOracle v0.2\r\n// @ethernity.live\r\n\r\n\r\ncontract Caller {\r\n    function EFOcallBack(string _response);\r\n}\r\n\r\n\r\ncontract EthernityFinancialOracle{\r\n    \r\n    address public owner;\r\n    address public oracleAddress;\r\n    uint public collectedFee; \r\n    uint public feePrice = 0.0005 ether;\r\n    uint public gasLimit = 50000;\r\n    uint public gasPrice = 40000000000 wei;\r\n    \r\n    struct User {\r\n    \tstring response;\r\n    \tbool callBack;\r\n    \tbool asked;\r\n    \tuint balance;\r\n    \tbool banned;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    \r\n    modifier onlyOwner{\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracle{\r\n        require(msg.sender == oracleAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrOracle {\r\n    \trequire(msg.sender == owner || msg.sender == oracleAddress);\r\n    \t_;\r\n    }\r\n\r\n    modifier notBanned {\r\n        require( users[msg.sender].banned == false );\r\n        _;\r\n    }\r\n\r\n    modifier receivePayment {\r\n        users[msg.sender].balance = users[msg.sender].balance + msg.value;\r\n        _;\r\n    }\r\n\r\n    event Request (string _coin , string _againstCoin , address _address , uint _gasPrice , uint _gasLimit );\r\n    event Response (address _address , string _response);\r\n    event Error (string _error);\r\n    \r\n\r\n    // Main constructor\r\n    function EthernityFinancialOracle() {\r\n        owner = msg.sender;\r\n        oracleAddress = msg.sender; // 0xfb509f6900d0326520c8f88e8f12c83459a199ec;\r\n    }   \r\n\r\n    // Payable to receive payments and stores into the mapping through modifier\r\n    function () payable receivePayment {\r\n    }\r\n\r\n    // REQUESTS\r\n    \r\n    function requestEtherToUSD(bool _callBack , uint _gasPrice , uint _gasLimit) payable receivePayment notBanned {\r\n        (_gasPrice , _gasLimit) = payToOracle (_gasPrice , _gasLimit);\r\n        users[msg.sender].callBack = _callBack;\r\n        users[msg.sender].asked = true;\r\n        Request ('ETH', 'USD', msg.sender , _gasPrice , _gasLimit );\r\n    }\r\n    \r\n    function requestCoinToUSD(string _coin , bool _callBack , uint _gasPrice , uint _gasLimit) payable receivePayment notBanned {\r\n    \t(_gasPrice , _gasLimit) = payToOracle (_gasPrice , _gasLimit);\r\n        users[msg.sender].callBack = _callBack;\r\n        users[msg.sender].asked = true;\r\n        Request (_coin, 'USD', msg.sender , _gasPrice , _gasLimit );\r\n    }\r\n    \r\n    function requestRate(string _coin, string _againstCoin , bool _callBack , uint _gasPrice , uint _gasLimit) payable receivePayment notBanned {\r\n    \t(_gasPrice , _gasLimit) = payToOracle (_gasPrice , _gasLimit);\r\n        users[msg.sender].callBack = _callBack;\r\n        users[msg.sender].asked = true;\r\n        Request (_coin, _againstCoin, msg.sender , _gasPrice , _gasLimit );\r\n    }\r\n\r\n\r\n    function getRefund() {\r\n        if (msg.sender == owner) {\r\n            uint a = collectedFee;\r\n            collectedFee = 0; \r\n            require(owner.send(a));\r\n        } else {\r\n\t        uint b = users[msg.sender].balance;\r\n\t        users[msg.sender].balance = 0;\r\n\t        require(msg.sender.send(b));\r\n\t    \t}\r\n    }\r\n\r\n\r\n    // GETTERS\r\n\r\n    function getResponse() public constant returns(string _response){\r\n        return users[msg.sender].response;\r\n    }\r\n\r\n    function getPrice(uint _gasPrice , uint _gasLimit) public constant returns(uint _price) {\r\n        if (_gasPrice == 0) _gasPrice = gasPrice;\r\n        if (_gasLimit == 0) _gasLimit = gasLimit;\r\n    \tassert(_gasLimit * _gasPrice / _gasLimit == _gasPrice); // To avoid overflow exploitation\r\n    \treturn feePrice + _gasLimit * _gasPrice;\r\n    }\r\n\r\n    function getBalance() public constant returns(uint _balance) {\r\n    \treturn users[msg.sender].balance;\r\n    }\r\n\r\n    function getBalance(address _address) public constant returns(uint _balance) {\r\n\t\treturn users[_address].balance;\r\n    }\r\n\r\n\r\n\r\n    // SET RESPONSE FROM ORACLE\r\n    function setResponse (address _user, string _result) onlyOracle {\r\n\r\n\t\trequire( users[_user].asked );\r\n\t\tusers[_user].asked = false;\r\n\r\n    \tif ( users[_user].callBack ) {\r\n    \t\t// Callback function: passive, expensive, somewhat private\r\n        \tCaller _caller = Caller(_user);\r\n        \t_caller.EFOcallBack(_result);\r\n    \t\t} else {\r\n    \t// Mapping: active, cheap, public\r\n        users[_user].response = _result;\r\n        Response( _user , _result );\r\n    \t}\r\n\r\n    }\r\n\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    function payToOracle (uint _gasPrice , uint _gasLimit) internal returns(uint _price , uint _limit) {\r\n        if (_gasPrice == 0) _gasPrice = gasPrice;\r\n        if (_gasLimit == 0) _gasLimit = gasLimit;\r\n\r\n        uint gp = getPrice(_gasPrice,_gasLimit);\r\n\r\n        require (users[msg.sender].balance >= gp );\r\n\r\n        collectedFee += feePrice;\r\n        users[msg.sender].balance -= gp;\r\n\r\n        require(oracleAddress.send(gp - feePrice));\r\n        return(_gasPrice,_gasLimit);\r\n    }\r\n\r\n\r\n    // ADMIN FUNCTIONS\r\n    \r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeOracleAdd(address _newOracleAdd) onlyOwner {\r\n        oracleAddress = _newOracleAdd;\r\n    }\r\n\r\n    function setFeePrice(uint _feePrice) onlyOwner {\r\n        feePrice = _feePrice;\r\n    }\r\n\r\n    function setGasPrice(uint _gasPrice) onlyOwnerOrOracle {\r\n    \tgasPrice = _gasPrice;\r\n    }\r\n\r\n    function setGasLimit(uint _gasLimit) onlyOwnerOrOracle {\r\n    \tgasLimit = _gasLimit;\r\n    }\r\n\r\n    function emergencyFlush() onlyOwner {\r\n        require(owner.send(this.balance));\r\n    }\r\n\r\n    function ban(address _user) onlyOwner{\r\n        users[_user].banned = true;\r\n    }\r\n    \r\n    function desBan(address _user) onlyOwner{\r\n        users[_user].banned = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"desBan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResponse\",\"outputs\":[{\"name\":\"_response\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePrice\",\"type\":\"uint256\"}],\"name\":\"setFeePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"setResponse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coin\",\"type\":\"string\"},{\"name\":\"_againstCoin\",\"type\":\"string\"},{\"name\":\"_callBack\",\"type\":\"bool\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"requestRate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coin\",\"type\":\"string\"},{\"name\":\"_callBack\",\"type\":\"bool\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"requestCoinToUSD\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ban\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyFlush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"response\",\"type\":\"string\"},{\"name\":\"callBack\",\"type\":\"bool\"},{\"name\":\"asked\",\"type\":\"bool\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"banned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOracleAdd\",\"type\":\"address\"}],\"name\":\"changeOracleAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_callBack\",\"type\":\"bool\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"requestEtherToUSD\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_coin\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_againstCoin\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"Request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_response\",\"type\":\"string\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_error\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"EthernityFinancialOracle","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a279e6700b929cb2446f5041c32ee569a9a2c48e6047b5a0ede98e8b742bcd2e"}]}