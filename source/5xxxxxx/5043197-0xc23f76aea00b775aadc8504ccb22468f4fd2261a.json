{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// import \"./Pausable.sol\";\r\n// import \"./CratePreSale.sol\";\r\n\r\ncontract NewCratePreSale {\r\n    \r\n    // migration functions migrate the data from the previous contract in stages\r\n    // all addresses are included for transparency and easy verification\r\n    // however addresses with no robots (i.e. failed transaction and never bought properly) have been commented out.\r\n    // to view the full list of state assignments, go to etherscan.io/address/{address} and you can view the verified\r\n    mapping (address => uint[]) public userToRobots; \r\n\r\n    function _migrate(uint _index) external onlyOwner {\r\n        bytes4 selector = bytes4(sha3(\"setData()\"));\r\n        address a = migrators[_index];\r\n        require(a.delegatecall(selector));\r\n    }\r\n    // source code - feel free to verify the migration\r\n    address[6] migrators = [\r\n        0x700febd9360ac0a0a72f371615427bec4e4454e5, //0x97ae01893e42d6d33fd9851a28e5627222af7bbb,\r\n        0x72cc898de0a4eac49c46ccb990379099461342f6,\r\n        0xc3cc48da3b8168154e0f14bf0446c7a93613f0a7,\r\n        0x4cc96f2ddf6844323ae0d8461d418a4d473b9ac3,\r\n        0xa52bfcb5ff599e29ee2b9130f1575babaa27de0a,\r\n        0xe503b42aabda22974e2a8b75fa87e010e1b13584\r\n    ];\r\n    \r\n    function NewCratePreSale() public payable {\r\n        \r\n            owner = msg.sender;\r\n        // one time transfer of state from the previous contract\r\n        // var previous = CratePreSale(0x3c7767011C443EfeF2187cf1F2a4c02062da3998); //MAINNET\r\n\r\n        // oldAppreciationRateWei = previous.appreciationRateWei();\r\n        oldAppreciationRateWei = 100000000000000;\r\n        appreciationRateWei = oldAppreciationRateWei;\r\n  \r\n        // oldPrice = previous.currentPrice();\r\n        oldPrice = 232600000000000000;\r\n        currentPrice = oldPrice;\r\n\r\n        // oldCratesSold = previous.cratesSold();\r\n        oldCratesSold = 1075;\r\n        cratesSold = oldCratesSold;\r\n\r\n        // Migration Rationale\r\n        // due to solidity issues with enumerability (contract calls cannot return dynamic arrays etc)\r\n        // no need for trust -> can still use web3 to call the previous contract and check the state\r\n        // will only change in the future if people send more eth\r\n        // and will be obvious due to change in crate count. Any purchases on the old contract\r\n        // after this contract is deployed will be fully refunded, and those robots bought will be voided. \r\n        // feel free to validate any address on the old etherscan:\r\n        // https://etherscan.io/address/0x3c7767011C443EfeF2187cf1F2a4c02062da3998\r\n        // can visit the exact contracts at the addresses listed above\r\n    }\r\n\r\n    // ------ STATE ------\r\n    uint256 constant public MAX_CRATES_TO_SELL = 3900; // Max no. of robot crates to ever be sold\r\n    uint256 constant public PRESALE_END_TIMESTAMP = 1518699600; // End date for the presale - no purchases can be made after this date - Midnight 16 Feb 2018 UTC\r\n\r\n    uint256 public appreciationRateWei;\r\n    uint32 public cratesSold;\r\n    uint256 public currentPrice;\r\n\r\n    // preserve these for later verification\r\n    uint32 public oldCratesSold;\r\n    uint256 public oldPrice;\r\n    uint256 public oldAppreciationRateWei;\r\n    // mapping (address => uint32) public userCrateCount; // replaced with more efficient method\r\n    \r\n\r\n    // store the unopened crates of this user\r\n    // actually stores the blocknumber of each crate \r\n    mapping (address => uint[]) public addressToPurchasedBlocks;\r\n    // store the number of expired crates for each user \r\n    // i.e. crates where the user failed to open the crate within 256 blocks (~1 hour)\r\n    // these crates will be able to be opened post-launch\r\n    mapping (address => uint) public expiredCrates;\r\n    // store the part information of purchased crates\r\n\r\n\r\n\r\n    function openAll() public {\r\n        uint len = addressToPurchasedBlocks[msg.sender].length;\r\n        require(len > 0);\r\n        uint8 count = 0;\r\n        // len > i to stop predicatable wraparound\r\n        for (uint i = len - 1; i >= 0 && len > i; i--) {\r\n            uint crateBlock = addressToPurchasedBlocks[msg.sender][i];\r\n            require(block.number > crateBlock);\r\n            // can't open on the same timestamp\r\n            var hash = block.blockhash(crateBlock);\r\n            if (uint(hash) != 0) {\r\n                // different results for all different crates, even on the same block/same user\r\n                // randomness is already taken care of\r\n                uint rand = uint(keccak256(hash, msg.sender, i)) % (10 ** 20);\r\n                userToRobots[msg.sender].push(rand);\r\n                count++;\r\n            } else {\r\n                // all others will be expired\r\n                expiredCrates[msg.sender] += (i + 1);\r\n                break;\r\n            }\r\n        }\r\n        CratesOpened(msg.sender, count);\r\n        delete addressToPurchasedBlocks[msg.sender];\r\n    }\r\n\r\n    // ------ EVENTS ------\r\n    event CratesPurchased(address indexed _from, uint8 _quantity);\r\n    event CratesOpened(address indexed _from, uint8 _quantity);\r\n\r\n    // ------ FUNCTIONS ------\r\n    function getPrice() view public returns (uint256) {\r\n        return currentPrice;\r\n    }\r\n\r\n    function getRobotCountForUser(address _user) external view returns(uint256) {\r\n        return userToRobots[_user].length;\r\n    }\r\n\r\n    function getRobotForUserByIndex(address _user, uint _index) external view returns(uint) {\r\n        return userToRobots[_user][_index];\r\n    }\r\n\r\n    function getRobotsForUser(address _user) view public returns (uint[]) {\r\n        return userToRobots[_user];\r\n    }\r\n\r\n    function getPendingCratesForUser(address _user) external view returns(uint[]) {\r\n        return addressToPurchasedBlocks[_user];\r\n    }\r\n\r\n    function getPendingCrateForUserByIndex(address _user, uint _index) external view returns(uint) {\r\n        return addressToPurchasedBlocks[_user][_index];\r\n    }\r\n\r\n    function getExpiredCratesForUser(address _user) external view returns(uint) {\r\n        return expiredCrates[_user];\r\n    }\r\n\r\n    function incrementPrice() private {\r\n        // Decrease the rate of increase of the crate price\r\n        // as the crates become more expensive\r\n        // to avoid runaway pricing\r\n        // (halving rate of increase at 0.1 ETH, 0.2 ETH, 0.3 ETH).\r\n        if ( currentPrice == 100000000000000000 ) {\r\n            appreciationRateWei = 200000000000000;\r\n        } else if ( currentPrice == 200000000000000000) {\r\n            appreciationRateWei = 100000000000000;\r\n        } else if (currentPrice == 300000000000000000) {\r\n            appreciationRateWei = 50000000000000;\r\n        }\r\n        currentPrice += appreciationRateWei;\r\n    }\r\n\r\n    function purchaseCrates(uint8 _cratesToBuy) public payable whenNotPaused {\r\n        require(now < PRESALE_END_TIMESTAMP); // Check presale is still ongoing.\r\n        require(_cratesToBuy <= 10); // Can only buy max 10 crates at a time. Don't be greedy!\r\n        require(_cratesToBuy >= 1); // Sanity check. Also, you have to buy a crate. \r\n        require(cratesSold + _cratesToBuy <= MAX_CRATES_TO_SELL); // Check max crates sold is less than hard limit\r\n        uint256 priceToPay = _calculatePayment(_cratesToBuy);\r\n         require(msg.value >= priceToPay); // Check buyer sent sufficient funds to purchase\r\n        if (msg.value > priceToPay) { //overpaid, return excess\r\n            msg.sender.transfer(msg.value-priceToPay);\r\n        }\r\n        //all good, payment received. increment number sold, price, and generate crate receipts!\r\n        cratesSold += _cratesToBuy;\r\n      for (uint8 i = 0; i < _cratesToBuy; i++) {\r\n            incrementPrice();\r\n            addressToPurchasedBlocks[msg.sender].push(block.number);\r\n        }\r\n\r\n        CratesPurchased(msg.sender, _cratesToBuy);\r\n    } \r\n\r\n    function _calculatePayment (uint8 _cratesToBuy) private view returns (uint256) {\r\n        \r\n        uint256 tempPrice = currentPrice;\r\n\r\n        for (uint8 i = 1; i < _cratesToBuy; i++) {\r\n            tempPrice += (currentPrice + (appreciationRateWei * i));\r\n        } // for every crate over 1 bought, add current Price and a multiple of the appreciation rate\r\n          // very small edge case of buying 10 when you the appreciation rate is about to halve\r\n          // is compensated by the great reduction in gas by buying N at a time.\r\n        \r\n        return tempPrice;\r\n    }\r\n\r\n\r\n    //owner only withdrawal function for the presale\r\n    function withdraw() onlyOwner public {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function addFunds() onlyOwner external payable {\r\n\r\n    }\r\n\r\n  event SetPaused(bool paused);\r\n\r\n  // starts unpaused\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() external onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    SetPaused(paused);\r\n    return true;\r\n  }\r\n\r\n  function unpause() external onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    SetPaused(paused);\r\n    return true;\r\n  }\r\n\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRobotCountForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cratesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"expiredCrates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldAppreciationRateWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPendingCrateForUserByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRobotsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToPurchasedBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cratesToBuy\",\"type\":\"uint8\"}],\"name\":\"purchaseCrates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CRATES_TO_SELL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRobotForUserByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"_migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToRobots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appreciationRateWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingCratesForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getExpiredCratesForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldCratesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_quantity\",\"type\":\"uint8\"}],\"name\":\"CratesPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_quantity\",\"type\":\"uint8\"}],\"name\":\"CratesOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NewCratePreSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d83df56e53e4334dd557f8ba9eb22f4efc5c2c3556c6b98d02fd81c91518aa33"}]}