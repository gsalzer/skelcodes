{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/* first version of the FundRequest FundRepository */\r\n\r\n\r\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\r\n///  later changed\r\ncontract Owned {\r\n  /// @dev `owner` is the only address that can call a function with this\r\n  /// modifier\r\n  modifier onlyOwner { require (msg.sender == owner); _; }\r\n\r\n  address public owner;\r\n\r\n  /// @notice The Constructor assigns the message sender to be `owner`\r\n  function Owned() public { owner = msg.sender;}\r\n\r\n  /// @notice `owner` can step down and assign some other address to this role\r\n  /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n  ///  an unowned neutral vault, however that cannot be undone\r\n  function changeOwner(address _newOwner) public onlyOwner {\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Database Contract\r\n * Davy Van Roy\r\n * Quinten De Swaef\r\n */\r\ncontract FundRepository is Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalNumberOfFunders;\r\n\r\n    mapping (address => uint256) funders;\r\n\r\n    uint256 public totalFunded;\r\n\r\n    uint256 public requestsFunded;\r\n\r\n    uint256 public totalBalance;\r\n\r\n    mapping (bytes32 => mapping (string => Funding)) funds;\r\n\r\n    mapping(address => bool) public callers;\r\n\r\n    struct Funding {\r\n        address[] funders;\r\n        mapping (address => uint256) balances;\r\n        uint256 totalBalance;\r\n    }\r\n\r\n    //modifiers\r\n    modifier onlyCaller {\r\n        require(callers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function FundRepository() {\r\n        //constructor\r\n    }\r\n\r\n    function updateFunders(address _from, bytes32 _platform, string _platformId, uint256 _value) public onlyCaller {\r\n        bool existing = funds[_platform][_platformId].balances[_from] > 0;\r\n        if (!existing) {\r\n            funds[_platform][_platformId].funders.push(_from);\r\n        }\r\n        if (funders[_from] <= 0) {\r\n            totalNumberOfFunders = totalNumberOfFunders.add(1);\r\n            funders[_from].add(_value);\r\n        }\r\n    }\r\n\r\n    function updateBalances(address _from, bytes32 _platform, string _platformId, uint256 _value) public onlyCaller {\r\n        if (funds[_platform][_platformId].totalBalance <= 0) {\r\n            requestsFunded = requestsFunded.add(1);\r\n        }\r\n        funds[_platform][_platformId].balances[_from] = funds[_platform][_platformId].balances[_from].add(_value);\r\n        funds[_platform][_platformId].totalBalance = funds[_platform][_platformId].totalBalance.add(_value);\r\n        totalBalance = totalBalance.add(_value);\r\n        totalFunded = totalFunded.add(_value);\r\n    }\r\n\r\n    function resolveFund(bytes32 platform, string platformId) public onlyCaller returns (uint) {\r\n        var funding = funds[platform][platformId];\r\n        var requestBalance = funding.totalBalance;\r\n        totalBalance = totalBalance.sub(requestBalance);\r\n        for (uint i = 0; i < funding.funders.length; i++) {\r\n            var funder = funding.funders[i];\r\n            delete (funding.balances[funder]);\r\n        }\r\n        delete (funds[platform][platformId]);\r\n        return requestBalance;\r\n    }\r\n\r\n    //constants\r\n\r\n    function getFundInfo(bytes32 _platform, string _platformId, address _funder) public view returns (uint256, uint256, uint256) {\r\n        return (\r\n        getFunderCount(_platform, _platformId),\r\n        balance(_platform, _platformId),\r\n        amountFunded(_platform, _platformId, _funder)\r\n        );\r\n    }\r\n\r\n    function getFunderCount(bytes32 _platform, string _platformId) public view returns (uint){\r\n        return funds[_platform][_platformId].funders.length;\r\n    }\r\n\r\n    function amountFunded(bytes32 _platform, string _platformId, address _funder) public view returns (uint256){\r\n        return funds[_platform][_platformId].balances[_funder];\r\n    }\r\n\r\n    function balance(bytes32 _platform, string _platformId) view public returns (uint256) {\r\n        return funds[_platform][_platformId].totalBalance;\r\n    }\r\n\r\n    //management of the repositories\r\n    function updateCaller(address _caller, bool allowed) public onlyOwner {\r\n        callers[_caller] = allowed;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"}],\"name\":\"getFunderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platform\",\"type\":\"bytes32\"},{\"name\":\"platformId\",\"type\":\"string\"}],\"name\":\"resolveFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateFunders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestsFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"amountFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_platform\",\"type\":\"bytes32\"},{\"name\":\"_platformId\",\"type\":\"string\"},{\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"getFundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberOfFunders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FundRepository","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1341f9221492f9bc7036c746018026ff158400eda4ff14237d0dc1ccc8c31fc8"}]}