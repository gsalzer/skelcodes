{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @author https://github.com/Dmitx\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n  \r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n    uint256 public cap;\r\n\r\n    constructor(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DividendPayoutToken is CappedToken {\r\n\r\n    // Dividends already claimed by investor\r\n    mapping(address => uint256) public dividendPayments;\r\n    // Total dividends claimed by all investors\r\n    uint256 public totalDividendPayments;\r\n\r\n    // invoke this function after each dividend payout\r\n    function increaseDividendPayments(address _investor, uint256 _amount) onlyOwner public {\r\n        dividendPayments[_investor] = dividendPayments[_investor].add(_amount);\r\n        totalDividendPayments = totalDividendPayments.add(_amount);\r\n    }\r\n\r\n    //When transfer tokens decrease dividendPayments for sender and increase for receiver\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        // balance before transfer\r\n        uint256 oldBalanceFrom = balances[msg.sender];\r\n\r\n        // invoke super function with requires\r\n        bool isTransferred = super.transfer(_to, _value);\r\n\r\n        uint256 transferredClaims = dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);\r\n        dividendPayments[msg.sender] = dividendPayments[msg.sender].sub(transferredClaims);\r\n        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\r\n\r\n        return isTransferred;\r\n    }\r\n\r\n    //When transfer tokens decrease dividendPayments for token owner and increase for receiver\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        // balance before transfer\r\n        uint256 oldBalanceFrom = balances[_from];\r\n\r\n        // invoke super function with requires\r\n        bool isTransferred = super.transferFrom(_from, _to, _value);\r\n\r\n        uint256 transferredClaims = dividendPayments[_from].mul(_value).div(oldBalanceFrom);\r\n        dividendPayments[_from] = dividendPayments[_from].sub(transferredClaims);\r\n        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\r\n\r\n        return isTransferred;\r\n    }\r\n\r\n}\r\n\r\ncontract IcsToken is DividendPayoutToken {\r\n\r\n    string public constant name = \"Interexchange Crypstock System\";\r\n\r\n    string public constant symbol = \"ICS\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    // set Total Supply in 500 000 000 tokens\r\n    constructor() public\r\n    CappedToken(5e8 * 1e18) {}\r\n\r\n}\r\n\r\ncontract HicsToken is DividendPayoutToken {\r\n\r\n    string public constant name = \"Interexchange Crypstock System Heritage Token\";\r\n\r\n    string public constant symbol = \"HICS\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    // set Total Supply in 50 000 000 tokens\r\n    constructor() public\r\n    CappedToken(5e7 * 1e18) {}\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /**\r\n     * @dev We use a single lock for the whole contract.\r\n     */\r\n    bool private reentrancyLock = false;\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * @notice If you mark a function `nonReentrant`, you should also\r\n     * mark it `external`. Calling one nonReentrant function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and a `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(!reentrancyLock);\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n}\r\n\r\ncontract PreSale is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // T4T Token\r\n    ERC20 public t4tToken;\r\n\r\n    // Tokens being sold\r\n    IcsToken public icsToken;\r\n    HicsToken public hicsToken;\r\n\r\n    // Timestamps of period\r\n    uint64 public startTime;\r\n    uint64 public endTime;\r\n    uint64 public endPeriodA;\r\n    uint64 public endPeriodB;\r\n    uint64 public endPeriodC;\r\n\r\n    // Address where funds are transferred\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per 1 wei\r\n    uint256 public rate;\r\n\r\n    // How many token units a buyer gets per 1 token T4T\r\n    uint256 public rateT4T;\r\n\r\n    uint256 public minimumInvest; // in tokens\r\n\r\n    uint256 public hicsTokenPrice;  // in tokens\r\n\r\n    // Max HICS Token distribution in PreSale\r\n    uint256 public capHicsToken;  // in tokens\r\n\r\n    uint256 public softCap; // in tokens\r\n\r\n    // investors => amount of money\r\n    mapping(address => uint) public balances;  // in tokens\r\n\r\n    // wei which has stored on PreSale contract\r\n    mapping(address => uint) balancesForRefund;  // in wei (not public: only for refund)\r\n\r\n    // T4T which has stored on PreSale contract\r\n    mapping(address => uint) balancesForRefundT4T;  // in T4T tokens (not public: only for refund)\r\n\r\n    // Amount of wei raised in PreSale Contract\r\n    uint256 public weiRaised;\r\n\r\n    // Number of T4T raised in PreSale Contract\r\n    uint256 public t4tRaised;\r\n\r\n    // Total number of token emitted\r\n    uint256 public totalTokensEmitted;  // in tokens\r\n\r\n    // Total money raised (number of tokens without bonuses)\r\n    uint256 public totalRaised;  // in tokens\r\n\r\n    /**\r\n     * events for tokens purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param tokens purchased\r\n     */\r\n    event IcsTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 tokens);\r\n    event HicsTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 tokens);\r\n\r\n    /**\r\n    * @dev Constructor of PreSale\r\n    *\r\n    * @notice Duration of bonus periods, start and end timestamps, minimum invest,\r\n    * minimum invest to get HICS Token, token price, Soft Cap and HICS Hard Cap are set\r\n    * in body of PreSale constructor.\r\n    *\r\n    * @param _wallet for withdrawal ether\r\n    * @param _icsToken ICS Token address\r\n    * @param _hicsToken HICS Token address\r\n    * @param _erc20Token T4T Token address\r\n    */\r\n    constructor(\r\n        address _wallet,\r\n        address _icsToken,\r\n        address _hicsToken,\r\n        address _erc20Token) public\r\n    {\r\n        require(_wallet != address(0));\r\n        require(_icsToken != address(0));\r\n        require(_hicsToken != address(0));\r\n        require(_erc20Token != address(0));\r\n\r\n        // periods of PreSale's bonus and PreSale's time\r\n        startTime = 1528675200;  // 1528675200 - 11.06.2018 00:00 UTC\r\n        endPeriodA = 1529107200; // 1529107200 - 16.06.2018 00:00 UTC\r\n        endPeriodB = 1529798400; // 1529798400 - 24.06.2018 00:00 UTC\r\n        endPeriodC = 1530489600; // 1530489600 - 02.07.2018 00:00 UTC\r\n        endTime = 1531353600;    // 1531353600 - 12.07.2018 00:00 UTC\r\n\r\n        // check valid of periods\r\n        bool validPeriod = now < startTime && startTime < endPeriodA \r\n                        && endPeriodA < endPeriodB && endPeriodB < endPeriodC \r\n                        && endPeriodC < endTime;\r\n        require(validPeriod);\r\n\r\n        wallet = _wallet;\r\n        icsToken = IcsToken(_icsToken);\r\n        hicsToken = HicsToken(_hicsToken);\r\n\r\n        // set T4T token address\r\n        t4tToken = ERC20(_erc20Token);\r\n\r\n        // 4 tokens = 1 T4T token (1$)\r\n        rateT4T = 4;\r\n\r\n        // minimum invest in tokens\r\n        minimumInvest = 4 * 1e18;  // 4 tokens = 1$\r\n\r\n        // minimum invest to get HicsToken\r\n        hicsTokenPrice = 2e4 * 1e18;  // 20 000 tokens = 5 000$\r\n\r\n        // initial rate - 1 token for 25 US Cent\r\n        // initial price - 1 ETH = 680 USD\r\n        rate = 2720;  // number of tokens for 1 wei\r\n\r\n        // in tokens\r\n        softCap = 4e6 * 1e18;  // equals 1 000 000$\r\n\r\n        capHicsToken = 15e6 * 1e18;  // 15 000 000 tokens\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    modifier saleIsOn() {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        require(withinPeriod);\r\n        _;\r\n    }\r\n\r\n    // allowed refund in case of unsuccess PreSale\r\n    modifier refundAllowed() {\r\n        require(totalRaised < softCap && now > endTime);\r\n        _;\r\n    }\r\n\r\n    // @return true if CrowdSale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // Refund ether to the investors in case of under Soft Cap end\r\n    function refund() public refundAllowed nonReentrant {\r\n        uint256 valueToReturn = balancesForRefund[msg.sender];\r\n\r\n        // update states\r\n        balancesForRefund[msg.sender] = 0;\r\n        weiRaised = weiRaised.sub(valueToReturn);\r\n\r\n        msg.sender.transfer(valueToReturn);\r\n    }\r\n\r\n    // Refund T4T tokens to the investors in case of under Soft Cap end\r\n    function refundT4T() public refundAllowed nonReentrant {\r\n        uint256 valueToReturn = balancesForRefundT4T[msg.sender];\r\n\r\n        // update states\r\n        balancesForRefundT4T[msg.sender] = 0;\r\n        t4tRaised = t4tRaised.sub(valueToReturn);\r\n\r\n        t4tToken.transfer(msg.sender, valueToReturn);\r\n    }\r\n\r\n    // Get bonus percent\r\n    function _getBonusPercent() internal view returns(uint256) {\r\n\r\n        if (now < endPeriodA) {\r\n            return 40;\r\n        }\r\n        if (now < endPeriodB) {\r\n            return 25;\r\n        }\r\n        if (now < endPeriodC) {\r\n            return 20;\r\n        }\r\n\r\n        return 15;\r\n    }\r\n\r\n    // Get number of tokens with bonus\r\n    // @param _value in tokens without bonus\r\n    function _getTokenNumberWithBonus(uint256 _value) internal view returns (uint256) {\r\n        return _value.add(_value.mul(_getBonusPercent()).div(100));\r\n    }\r\n\r\n    // Send weis to the wallet\r\n    // @param _value in wei\r\n    function _forwardFunds(uint256 _value) internal {\r\n        wallet.transfer(_value);\r\n    }\r\n\r\n    // Send T4T tokens to the wallet\r\n    // @param _value in T4T tokens\r\n    function _forwardT4T(uint256 _value) internal {\r\n        t4tToken.transfer(wallet, _value);\r\n    }\r\n\r\n    // Withdrawal eth from contract\r\n    function withdrawalEth() public onlyOwner {\r\n        require(totalRaised >= softCap);\r\n\r\n        // withdrawal all eth from contract\r\n        _forwardFunds(address(this).balance);\r\n    }\r\n\r\n    // Withdrawal T4T tokens from contract\r\n    function withdrawalT4T() public onlyOwner {\r\n        require(totalRaised >= softCap);\r\n\r\n        // withdrawal all T4T tokens from contract\r\n        _forwardT4T(t4tToken.balanceOf(address(this)));\r\n    }\r\n\r\n    // Success finish of PreSale\r\n    function finishPreSale() public onlyOwner {\r\n        require(totalRaised >= softCap);\r\n        require(now > endTime);\r\n\r\n        // withdrawal all eth from contract\r\n        _forwardFunds(address(this).balance);\r\n\r\n        // withdrawal all T4T tokens from contract\r\n        _forwardT4T(t4tToken.balanceOf(address(this)));\r\n\r\n        // transfer ownership of tokens to owner\r\n        icsToken.transferOwnership(owner);\r\n        hicsToken.transferOwnership(owner);\r\n    }\r\n\r\n    // Change owner of tokens after end of PreSale\r\n    function changeTokensOwner() public onlyOwner {\r\n        require(now > endTime);\r\n\r\n        // transfer ownership of tokens to owner\r\n        icsToken.transferOwnership(owner);\r\n        hicsToken.transferOwnership(owner);\r\n    }\r\n\r\n    // Change rate\r\n    // @param _rate for change\r\n    function _changeRate(uint256 _rate) internal {\r\n        require(_rate != 0);\r\n        rate = _rate;\r\n    }\r\n\r\n    // buy ICS tokens\r\n    function _buyIcsTokens(address _beneficiary, uint256 _value) internal {\r\n        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\r\n\r\n        icsToken.mint(_beneficiary, tokensWithBonus);\r\n\r\n        emit IcsTokenPurchase(msg.sender, _beneficiary, tokensWithBonus);\r\n    }\r\n\r\n    // buy HICS tokens\r\n    function _buyHicsTokens(address _beneficiary, uint256 _value) internal {\r\n        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\r\n\r\n        hicsToken.mint(_beneficiary, tokensWithBonus);\r\n\r\n        emit HicsTokenPurchase(msg.sender, _beneficiary, tokensWithBonus);\r\n    }\r\n\r\n    // buy tokens - helper function\r\n    // @param _beneficiary address of beneficiary\r\n    // @param _value of tokens (1 token = 10^18)\r\n    function _buyTokens(address _beneficiary, uint256 _value) internal {\r\n        // calculate HICS token amount\r\n        uint256 valueHics = _value.div(5);  // 20% HICS and 80% ICS Tokens\r\n\r\n        if (_value >= hicsTokenPrice\r\n        && hicsToken.totalSupply().add(_getTokenNumberWithBonus(valueHics)) < capHicsToken) {\r\n            // 20% HICS and 80% ICS Tokens\r\n            _buyIcsTokens(_beneficiary, _value - valueHics);\r\n            _buyHicsTokens(_beneficiary, valueHics);\r\n        } else {\r\n            // 100% of ICS Tokens\r\n            _buyIcsTokens(_beneficiary, _value);\r\n        }\r\n\r\n        // update states\r\n        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\r\n        totalTokensEmitted = totalTokensEmitted.add(tokensWithBonus);\r\n        balances[_beneficiary] = balances[_beneficiary].add(tokensWithBonus);\r\n\r\n        totalRaised = totalRaised.add(_value);\r\n    }\r\n\r\n    // buy tokens for T4T tokens\r\n    // @param _beneficiary address of beneficiary\r\n    function buyTokensT4T(address _beneficiary) public saleIsOn {\r\n        require(_beneficiary != address(0));\r\n\r\n        uint256 valueT4T = t4tToken.allowance(_beneficiary, address(this));\r\n\r\n        // check minimumInvest\r\n        uint256 value = valueT4T.mul(rateT4T);\r\n        require(value >= minimumInvest);\r\n\r\n        // transfer T4T from _beneficiary to this contract\r\n        require(t4tToken.transferFrom(_beneficiary, address(this), valueT4T));\r\n\r\n        _buyTokens(_beneficiary, value);\r\n\r\n        // only for buy using T4T tokens\r\n        t4tRaised = t4tRaised.add(valueT4T);\r\n        balancesForRefundT4T[_beneficiary] = balancesForRefundT4T[_beneficiary].add(valueT4T);\r\n    }\r\n\r\n    // manual transfer tokens by owner (e.g.: selling for fiat money)\r\n    // @param _to address of beneficiary\r\n    // @param _value of tokens (1 token = 10^18)\r\n    function manualBuy(address _to, uint256 _value) public saleIsOn onlyOwner {\r\n        require(_to != address(0));\r\n        require(_value >= minimumInvest);\r\n\r\n        _buyTokens(_to, _value);\r\n    }\r\n\r\n    // buy tokens with update rate state by owner\r\n    // @param _beneficiary address of beneficiary\r\n    // @param _rate new rate - how many token units a buyer gets per 1 wei\r\n    function buyTokensWithUpdateRate(address _beneficiary, uint256 _rate) public saleIsOn onlyOwner payable {\r\n        _changeRate(_rate);\r\n        buyTokens(_beneficiary);\r\n    }\r\n\r\n    // low level token purchase function\r\n    // @param _beneficiary address of beneficiary\r\n    function buyTokens(address _beneficiary) saleIsOn public payable {\r\n        require(_beneficiary != address(0));\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 value = weiAmount.mul(rate);\r\n        require(value >= minimumInvest);\r\n\r\n        _buyTokens(_beneficiary, value);\r\n\r\n        // only for buy using PreSale contract\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        balancesForRefund[_beneficiary] = balancesForRefund[_beneficiary].add(weiAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endPeriodC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeTokensOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t4tToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensEmitted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"manualBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capHicsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t4tRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hicsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensT4T\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPeriodB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hicsTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUpdateRate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPeriodA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalT4T\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateT4T\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundT4T\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_icsToken\",\"type\":\"address\"},{\"name\":\"_hicsToken\",\"type\":\"address\"},{\"name\":\"_erc20Token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"IcsTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"HicsTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PreSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000618f8dc99e98ee8365db5ff101fdefcb82847f290000000000000000000000007467926bc25e45564baa20171af658ff3bcbb203000000000000000000000000308853aec7cf0ecf133ed19c0c1fb3b35f5a4e7b000000000000000000000000eaf0205aea66a43dde81ad78fa17941cbd60a822","Library":"","SwarmSource":"bzzr://6fd8a7b9d99d6416f605db169a3f538eb202f1e1ccfb6b7450226b83b5b0df57"}]}