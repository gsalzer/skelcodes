{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ThisMustBeFirst {\r\n\r\n  address public bts_address1;\r\n  address public bts_address2;\r\n  address public token_address;\r\n\r\n}\r\n\r\ncontract AuthorizedList {\r\n\r\n    bytes32 constant I_AM_ROOT = keccak256(\"I am root!\");\r\n    bytes32 constant STAFF_MEMBER = keccak256(\"Staff Member.\");\r\n    bytes32 constant ROUTER = keccak256(\"Router Contract.\");\r\n    mapping (address => mapping(bytes32 => bool)) authorized;\r\n    mapping (bytes32 => bool) internal contractPermissions;\r\n\r\n}\r\n\r\ncontract CodeTricks {\r\n\r\n    function getCodeHash(address _addr) internal view returns (bytes32) {\r\n\r\n        return keccak256(getCode(_addr));\r\n\r\n    }\r\n\r\n    function getCode(address _addr) internal view returns (bytes) {\r\n\r\n        bytes memory code;\r\n        assembly {\r\n            // code size\r\n            let size := extcodesize(_addr)\r\n            // set code pointer value to free memory\r\n            code := mload(0x40)\r\n            // new \"memory end\" including padding\r\n            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            // store length in memory\r\n            mstore(code, size)\r\n            // actually retrieve the code, this needs assembly\r\n            extcodecopy(_addr, add(code, 0x20), 0, size)\r\n        }\r\n        return code;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Authorized is AuthorizedList {\r\n\r\n    function Authorized() public {\r\n\r\n       authorized[msg.sender][I_AM_ROOT] = true;\r\n\r\n    }\r\n\r\n    modifier ifAuthorized(address _address, bytes32 _authorization) {\r\n\r\n       require(authorized[_address][_authorization] || authorized[_address][I_AM_ROOT]);\r\n       _;\r\n\r\n    }\r\n\r\n    function isAuthorized(address _address, bytes32 _authorization) public view returns (bool) {\r\n\r\n       return authorized[_address][_authorization];\r\n\r\n    }\r\n\r\n    function toggleAuthorization(address _address, bytes32 _authorization) public ifAuthorized(msg.sender, I_AM_ROOT) {\r\n\r\n       // Prevent inadvertent self locking out, cannot change own authority\r\n       require(_address != msg.sender);\r\n\r\n       // No need for lower level authorization to linger\r\n       if (_authorization == I_AM_ROOT && !authorized[_address][I_AM_ROOT])\r\n           authorized[_address][STAFF_MEMBER] = false;\r\n\r\n       authorized[_address][_authorization] = !authorized[_address][_authorization];\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Router is ThisMustBeFirst, AuthorizedList, CodeTricks, Authorized {\r\n\r\n  function Router(address _token_address, address _storage_address) public Authorized() {\r\n\r\n     require(_token_address != address(0));\r\n     require(_storage_address != address(0));\r\n     token_address = _token_address;\r\n     bts_address1 = _storage_address;\r\n\r\n     // It is believed at this time that tampering with deployed contract's bytecode is not\r\n     // possible. Therefore the two lines below are  not necessary\r\n     // contractPermissions[getCodeHash(bts_address1)] = true;\r\n     // contractPermissions[getCodeHash(token_address)] = true;\r\n\r\n  }\r\n\r\n  function nameSuccessor(address _token_address) public ifAuthorized(msg.sender, I_AM_ROOT) {\r\n\r\n     require(_token_address != address(0));\r\n     token_address = _token_address;\r\n\r\n     // It is believed at this time that tampering with deployed contract's bytecode is not\r\n     // possible. Therefore the line below is not necessary\r\n     // contractPermissions[getCodeHash(token_address)] = true;\r\n\r\n  }\r\n\r\n  function setStorage(address _storage_address) public ifAuthorized(msg.sender, I_AM_ROOT) {\r\n\r\n     require(_storage_address != address(0));\r\n     bts_address1 = _storage_address;\r\n\r\n     // It is believed at this time that tampering with deployed contract's bytecode is not\r\n     // possible. Therefore the line below is not necessary\r\n     // contractPermissions[getCodeHash(bts_address1)] = true;\r\n\r\n  }\r\n\r\n  function setSecondaryStorage(address _storage_address) public ifAuthorized(msg.sender, I_AM_ROOT) {\r\n\r\n     require(_storage_address != address(0));\r\n     bts_address2 = _storage_address;\r\n\r\n     // It is believed at this time that tampering with deployed contract's bytecode is not\r\n     // possible. Therefore the line below is not necessary\r\n     // contractPermissions[getCodeHash(bts_address2)] = true;\r\n\r\n  }\r\n\r\n  function swapStorage() public ifAuthorized(msg.sender, I_AM_ROOT) {\r\n\r\n     address temp = bts_address1;\r\n     bts_address1 = bts_address2;\r\n     bts_address2 = temp;\r\n\r\n  }\r\n\r\n\r\n\r\n  function() public payable {\r\n\r\n      // It is believed at this time that tampering with deployed contract's bytecode is not\r\n      // possible. Therefore the two lines below are  not necessary\r\n      // require (contractPermissions[getCodeHash(token_address)]);\r\n      // require (contractPermissions[getCodeHash(bts_address1)]);\r\n\r\n      var target = token_address;\r\n      assembly {\r\n          let _calldata := mload(0x40)\r\n          mstore(0x40, add(_calldata, calldatasize))\r\n          calldatacopy(_calldata, 0x0, calldatasize)\r\n          switch delegatecall(gas, target, _calldata, calldatasize, 0, 0)\r\n            case 0 { revert(0, 0) }\r\n            default {\r\n              let _returndata := mload(0x40)\r\n              returndatacopy(_returndata, 0, returndatasize)\r\n              mstore(0x40, add(_returndata, returndatasize))\r\n              return(_returndata, returndatasize)\r\n            }\r\n       }\r\n   }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_authorization\",\"type\":\"bytes32\"}],\"name\":\"toggleAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storage_address\",\"type\":\"address\"}],\"name\":\"setSecondaryStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"}],\"name\":\"nameSuccessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bts_address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storage_address\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bts_address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_authorization\",\"type\":\"bytes32\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"},{\"name\":\"_storage_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Router","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007febb4cbc153f65f0ef50546b53f26422e2e81e10000000000000000000000008117512e1387b0e48edd0bcf5dcc1bc08a16a9ab","Library":"","SwarmSource":"bzzr://276c0db9489d3566f1918af1193b67c33fa52f023741f5f77ba71e6e52c821fe"}]}