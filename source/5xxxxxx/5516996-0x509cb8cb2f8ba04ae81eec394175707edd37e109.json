{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract TwoXJackpot {\r\n  using SafeMath for uint256;\r\n  address public contractOwner;  // Address of the contract creator\r\n\r\n  // BuyIn Object, holding information of each Buy In\r\n  // Also used to store information about winners in each game\r\n  struct BuyIn {\r\n    uint256 value;\r\n    address owner;\r\n  }\r\n\r\n  // Game Object, holding information of each Game played\r\n  struct Game {\r\n    BuyIn[] buyIns;            // FIFO queue\r\n    address[] winners;         // Jackpot Winners addresses\r\n    uint256[] winnerPayouts;   // Jackpot Winner Payouts\r\n    uint256 gameTotalInvested; // Total Invested in game\r\n    uint256 gameTotalPaidOut;  // Total Paid Out in game\r\n    uint256 gameTotalBacklog;  // Total Amount waiting to payout\r\n    uint256 index;             // The current BuyIn queue index\r\n\r\n    mapping (address => uint256) totalInvested; // Total invested for a given address\r\n    mapping (address => uint256) totalValue;    // Total value for a given address\r\n    mapping (address => uint256) totalPaidOut;  // Total paid out for a given address\r\n  }\r\n\r\n  mapping (uint256 => Game) public games;  // Map game index to the game\r\n  uint256 public gameIndex;    // The current Game Index\r\n\r\n  // Timestamp of the last action.\r\n\r\n  // Jackpot\r\n  uint256 public jackpotBalance;        // Total balance of Jackpot (before re-seed deduction)\r\n  address public jackpotLastQualified;  // Last Purchaser, in running for Jackpot claim\r\n  address public jackpotLastWinner;     // Last Winner Address\r\n  uint256 public jackpotLastPayout;     // Last Payout Amount (after re-seed deduction)\r\n  uint256 public jackpotCount;          // Number of jackpots for sliding payout.\r\n\r\n\r\n  // Timestamp of Game Start\r\n  uint256 public gameStartTime;     // Game Start Time\r\n  uint256 public roundStartTime;    // Round Start Time, used to pause the game\r\n  uint256 public lastAction;        // Last Action Timestamp\r\n  uint256 public timeBetweenGames = 24 hours;       // Time between games (4 Jackpots hit = 1 game)\r\n  uint256 public timeBeforeJackpot = 30 minutes;    // Time between last purchase and jackpot payout (increases)\r\n  uint256 public timeBeforeJackpotReset = timeBeforeJackpot; // To reset the jackpot timer\r\n  uint256 public timeIncreasePerTx = 1 minutes;     // How much time to increment the jackpot for each buy\r\n  uint256 public timeBetweenRounds = 5 minutes;  // Time between rounds (each Round has 5 minute timeout)\r\n\r\n\r\n  // Buy In configuration logic\r\n  uint256 public buyFee = 90;       // This ends up being a 10% fee towards Jackpot\r\n  uint256 public minBuy = 50;       // Jackpot / 50 = 2% Min buy\r\n  uint256 public maxBuy = 2;        // Jackpot / 2 = 50% Max buy\r\n  uint256 public minMinBuyETH = 0.02 ether; // Min buy in should be more then 0.02 ETH\r\n  uint256 public minMaxBuyETH = 0.5 ether; // Max buy in should be more then 0.5 ETH\r\n  uint256[] public gameReseeds = [90, 80, 60, 20]; // How much money reseeds to the next round\r\n\r\n\r\n  modifier onlyContractOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  modifier isStarted() {\r\n      require(now >= gameStartTime); // Check game started\r\n      require(now >= roundStartTime); // Check round started\r\n      _;\r\n  }\r\n\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event Purchase(uint256 amount, address depositer);\r\n  event Seed(uint256 amount, address seeder);\r\n\r\n  function TwoXJackpot() public {\r\n    contractOwner = msg.sender;\r\n    gameStartTime = now + timeBetweenGames;\r\n    lastAction = gameStartTime;\r\n  }\r\n\r\n  //                 //\r\n  // ADMIN FUNCTIONS //\r\n  //                 //\r\n\r\n  // Change the start time for fair launch\r\n  function changeStartTime(uint256 _time) public onlyContractOwner {\r\n    require(now < _time); // only allow changing it to something in the future\r\n    gameStartTime = _time;\r\n    lastAction = gameStartTime; // Don't forget to update last action too :)\r\n  }\r\n\r\n  // Change the start time for fair launch\r\n  function updateTimeBetweenGames(uint256 _time) public onlyContractOwner {\r\n    timeBetweenGames = _time; // Time after Jackpot claim we allow new buys.\r\n  }\r\n\r\n  //                //\r\n  // User Functions //\r\n  //                //\r\n\r\n  // Anyone can seed the jackpot, since its non-refundable. It will pay 10% forward to next game.\r\n  // Beware, there is no way to get your seed back unless you win the jackpot.\r\n  function seed() public payable {\r\n    jackpotBalance += msg.value; // Increase the value of the jackpot by this much.\r\n    //emit Seed event\r\n    emit Seed(msg.value, msg.sender);\r\n  }\r\n\r\n  function purchase() public payable isStarted  {\r\n    // Check if the game is still running\r\n    if (now > lastAction + timeBeforeJackpot &&\r\n      jackpotLastQualified != 0x0) {\r\n      claim();\r\n      // Next game/round will start, return back money to user\r\n      if (msg.value > 0) {\r\n        msg.sender.transfer(msg.value);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Check if JackPot is less then 1 ETH, then\r\n    // use predefined minimum and maximum buy in values\r\n    if (jackpotBalance <= 1 ether) {\r\n      require(msg.value >= minMinBuyETH); // >= 0.02 ETH\r\n      require(msg.value <= minMaxBuyETH); // <= 0.5 ETH\r\n    } else {\r\n      uint256 purchaseMin = SafeMath.mul(msg.value, minBuy);\r\n      uint256 purchaseMax = SafeMath.mul(msg.value, maxBuy);\r\n      require(purchaseMin >= jackpotBalance);\r\n      require(purchaseMax <= jackpotBalance);\r\n    }\r\n\r\n    uint256 valueAfterTax = SafeMath.div(SafeMath.mul(msg.value, buyFee), 100);     // Take a 10% fee for Jackpot, example on 1ETH Buy:  0.9 = (1.0 * 90) / 100\r\n    uint256 potFee = SafeMath.sub(msg.value, valueAfterTax);                        // Calculate the absolute number to put into pot.\r\n\r\n\r\n    jackpotBalance += potFee;           // Add it to the jackpot\r\n    jackpotLastQualified = msg.sender;  // You are now the rightly heir to the Jackpot...for now...\r\n    lastAction = now;                   //  Reset jackpot timer\r\n    timeBeforeJackpot += timeIncreasePerTx;                // Increase Jackpot Timer by 1 minute.\r\n    uint256 valueMultiplied = SafeMath.mul(msg.value, 2);  // Double it\r\n\r\n    // Update Global Investing Information\r\n    games[gameIndex].gameTotalInvested += msg.value;\r\n    games[gameIndex].gameTotalBacklog += valueMultiplied;\r\n\r\n    // Update Game Investing Information\r\n    games[gameIndex].totalInvested[msg.sender] += msg.value;\r\n    games[gameIndex].totalValue[msg.sender] += valueMultiplied;\r\n\r\n    // Push new Buy In information in our game list of buy ins\r\n    games[gameIndex].buyIns.push(BuyIn({\r\n      value: valueMultiplied,\r\n      owner: msg.sender\r\n    }));\r\n    //Emit a deposit event.\r\n    emit Purchase(msg.value, msg.sender);\r\n\r\n    while (games[gameIndex].index < games[gameIndex].buyIns.length\r\n            && valueAfterTax > 0) {\r\n\r\n      BuyIn storage buyIn = games[gameIndex].buyIns[games[gameIndex].index];\r\n\r\n      if (valueAfterTax < buyIn.value) {\r\n        buyIn.owner.transfer(valueAfterTax);\r\n\r\n        // Update game information\r\n        games[gameIndex].gameTotalBacklog -= valueAfterTax;\r\n        games[gameIndex].gameTotalPaidOut += valueAfterTax;\r\n\r\n        // game paid out and value update\r\n        games[gameIndex].totalPaidOut[buyIn.owner] += valueAfterTax;\r\n        games[gameIndex].totalValue[buyIn.owner] -= valueAfterTax;\r\n        buyIn.value -= valueAfterTax;\r\n        valueAfterTax = 0;\r\n      } else {\r\n        buyIn.owner.transfer(buyIn.value);\r\n\r\n        // Update game information\r\n        games[gameIndex].gameTotalBacklog -= buyIn.value;\r\n        games[gameIndex].gameTotalPaidOut += buyIn.value;\r\n\r\n        // game paid out and value update\r\n        games[gameIndex].totalPaidOut[buyIn.owner] += buyIn.value;\r\n        games[gameIndex].totalValue[buyIn.owner] -= buyIn.value;\r\n        valueAfterTax -= buyIn.value;\r\n        buyIn.value = 0;\r\n        games[gameIndex].index++;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // Claim the Jackpot\r\n  function claim() public payable isStarted {\r\n    require(now > lastAction + timeBeforeJackpot);\r\n    require(jackpotLastQualified != 0x0); // make sure last jackpotLastQualified is not 0x0\r\n\r\n    // Each game has 4 Jackpot payouts, increasing in payout percentage.\r\n    // Funds owed to you do not reset between Jackpots, but will reset after 1 game (4 Jackpots)\r\n    uint256 reseed = SafeMath.div(SafeMath.mul(jackpotBalance, gameReseeds[jackpotCount]), 100);\r\n    uint256 payout = jackpotBalance - reseed;\r\n\r\n\r\n    jackpotLastQualified.transfer(payout); // payout entire jackpot minus seed.\r\n    jackpotBalance = reseed;\r\n    jackpotLastWinner = jackpotLastQualified;\r\n    jackpotLastPayout = payout;\r\n\r\n    // Let's store now new winner in list of game winners\r\n    games[gameIndex].winners.push(jackpotLastQualified);\r\n    games[gameIndex].winnerPayouts.push(payout);\r\n\r\n    // RESET all the settings\r\n    timeBeforeJackpot = timeBeforeJackpotReset; // reset to 30 min on each round timer\r\n    jackpotLastQualified = 0x0; // set last qualified to 0x0\r\n\r\n    if(jackpotCount == gameReseeds.length - 1){\r\n      // Reset all outstanding owed money after 4 claimed jackpots to officially restart the game.\r\n      gameStartTime = now + timeBetweenGames;    // Restart the game in a specified period (24h)\r\n      lastAction = gameStartTime; // Reset last action to the start of the game\r\n      gameIndex += 1; // Next Game!\r\n      jackpotCount = 0;  // Reset Jackpots back to 0 after game end.\r\n\r\n    } else {\r\n      lastAction = now + timeBetweenRounds;\r\n      roundStartTime = lastAction;\r\n      jackpotCount += 1;\r\n    }\r\n  }\r\n\r\n  // Fallback, sending any ether will call purchase()\r\n  function () public payable {\r\n    purchase();\r\n  }\r\n\r\n  // PUBLIC METHODS TO RETRIEVE DATA IN UI\r\n  // Return Current Jackpot Info\r\n  // [ JackPotBalance, jackpotLastQualified, jackpotLastWinner, jackpotLastPayout,\r\n  //  jackpotCount, gameIndex, gameStartTime, timeTillRoundEnd, roundStartTime]\r\n  function getJackpotInfo() public view returns (uint256, address, address, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n    return (\r\n        jackpotBalance,\r\n        jackpotLastQualified,\r\n        jackpotLastWinner,\r\n        jackpotLastPayout,\r\n        jackpotCount,\r\n        gameIndex,\r\n        gameStartTime,\r\n        lastAction + timeBeforeJackpot,\r\n        roundStartTime\r\n      );\r\n  }\r\n\r\n  // Return player game info based on game index and player address\r\n  // [ totalInvested, totalValue, totalPaidOut]\r\n  function getPlayerGameInfo(uint256 _gameIndex, address _player) public view returns (uint256, uint256, uint256) {\r\n    return (\r\n        games[_gameIndex].totalInvested[_player],\r\n        games[_gameIndex].totalValue[_player],\r\n        games[_gameIndex].totalPaidOut[_player]\r\n      );\r\n  }\r\n\r\n  // Get user game info connected to current game\r\n  function getMyGameInfo() public view returns (uint256, uint256, uint256) {\r\n    return getPlayerGameInfo(gameIndex, msg.sender);\r\n  }\r\n\r\n  // Return all the game constants, setting the game\r\n  function getGameConstants() public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256[]) {\r\n    return (\r\n        timeBetweenGames,\r\n        timeBeforeJackpot,\r\n        minMinBuyETH,\r\n        minMaxBuyETH,\r\n        minBuy,\r\n        maxBuy,\r\n        gameReseeds\r\n      );\r\n  }\r\n\r\n  // Return game information based on game index\r\n  function getGameInfo(uint256 _gameIndex) public view returns (uint256, uint256, uint256, address[], uint256[]) {\r\n    return (\r\n        games[_gameIndex].gameTotalInvested,\r\n        games[_gameIndex].gameTotalPaidOut,\r\n        games[_gameIndex].gameTotalBacklog,\r\n        games[_gameIndex].winners,\r\n        games[_gameIndex].winnerPayouts\r\n      );\r\n  }\r\n\r\n  // Return current running game info\r\n  function getCurrentGameInfo() public view returns (uint256, uint256, uint256, address[], uint256[]) {\r\n    return getGameInfo(gameIndex);\r\n  }\r\n\r\n  // Return time when next game will start\r\n  function getGameStartTime() public view returns (uint256) {\r\n    return gameStartTime;\r\n  }\r\n\r\n  // Return end time for the jackpot round\r\n  function getJackpotRoundEndTime() public view returns (uint256) {\r\n    return lastAction + timeBeforeJackpot;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gameStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpotInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLastQualified\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"gameTotalInvested\",\"type\":\"uint256\"},{\"name\":\"gameTotalPaidOut\",\"type\":\"uint256\"},{\"name\":\"gameTotalBacklog\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpotRoundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMinBuyETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMaxBuyETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeBeforeJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameIndex\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameConstants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLastPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeBetweenRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeBeforeJackpotReset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeBetweenGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeIncreasePerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateTimeBetweenGames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameReseeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seeder\",\"type\":\"address\"}],\"name\":\"Seed\",\"type\":\"event\"}]","ContractName":"TwoXJackpot","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa508a887068735c432ada96cc429dea8a0f292f37051431a55c91823fb15a0a"}]}