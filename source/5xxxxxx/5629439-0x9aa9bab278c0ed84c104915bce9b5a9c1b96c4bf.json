{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function minimum( uint a, uint b) internal returns ( uint result) {\r\n    if ( a <= b ) {\r\n      result = a;\r\n    }\r\n    else {\r\n      result = b;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract OZTToken is StandardToken, Ownable {\r\n\r\n\t/* Overriding some ERC20 variables */\r\n\tstring public constant name      = \"OZTToken\";\r\n\tstring public constant symbol    = \"OZT\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n\tuint256 public constant MAX_NUM_OZT_TOKENS    =  730000000 * 10 ** decimals;\r\n\r\n\t// Freeze duration for Advisors accounts\r\n\tuint256 public constant START_ICO_TIMESTAMP   = 1526565600;  // ICO starts at 17.05.2018 @ 2PM UTC\r\n\tint public constant DEFROST_MONTH_IN_MINUTES = 43200; // month in minutes\r\n\tint public constant DEFROST_MONTHS = 3;\r\n\r\n\t/*\r\n\t\tmodalités de sorties des advisors investisseurs ou des earlybirds j’opte pour\r\n\t\t- un Freeze à 6 mois puis au bout du 6ème mois\r\n\t\t- possible de sortir du capital de 50% du montant investi\r\n\t\t- puis par la suite 5% tous les mois ce qui nous donnera une sortie effective au bout de 10 mois et au total ça fera donc 16 mois\r\n\t*/\r\n\r\n\tuint public constant DEFROST_FACTOR = 20;\r\n\r\n\t// Fields that can be changed by functions\r\n\taddress[] public vIcedBalances;\r\n\tmapping (address => uint256) public icedBalances_frosted;\r\n    mapping (address => uint256) public icedBalances_defrosted;\r\n\r\n\t// Variable usefull for verifying that the assignedSupply matches that totalSupply\r\n\tuint256 public assignedSupply;\r\n\t//Boolean to allow or not the initial assignement of token (batch)\r\n\tbool public batchAssignStopped = false;\r\n\tbool public stopDefrost = false;\r\n\r\n\tuint oneTokenWeiPrice;\r\n\taddress defroster;\r\n\r\n\tfunction OZTToken() {\r\n\t\towner                \t= msg.sender;\r\n\t\tassignedSupply = 0;\r\n\r\n\t\t// mint all tokens\r\n\t\ttotalSupply = MAX_NUM_OZT_TOKENS;\r\n        balances[msg.sender] = MAX_NUM_OZT_TOKENS;\r\n        Transfer(address(0x0), msg.sender, MAX_NUM_OZT_TOKENS);\r\n\t}\r\n\r\n\tfunction setDefroster(address addr) onlyOwner {\r\n\t\tdefroster = addr;\r\n\t}\r\n\r\n \tmodifier onlyDefrosterOrOwner() {\r\n        require(msg.sender == defroster || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\t/**\r\n   * @dev Transfer tokens in batches (of adresses)\r\n   * @param _vaddr address The address which you want to send tokens from\r\n   * @param _vamounts address The address which you want to transfer to\r\n   */\r\n  function batchAssignTokens(address[] _vaddr, uint[] _vamounts, uint[] _vDefrostClass ) onlyOwner {\r\n\r\n\t\t\trequire ( batchAssignStopped == false );\r\n\t\t\trequire ( _vaddr.length == _vamounts.length && _vaddr.length == _vDefrostClass.length);\r\n\t\t\t//Looping into input arrays to assign target amount to each given address\r\n\t\t\tfor (uint index=0; index<_vaddr.length; index++) {\r\n\r\n\t\t\t\taddress toAddress = _vaddr[index];\r\n\t\t\t\tuint amount = SafeMath.mul(_vamounts[index], 10 ** decimals);\r\n\t\t\t\tuint defrostClass = _vDefrostClass[index]; // 0=ico investor, 1=reserveandteam/advisors\r\n\r\n\t\t\t\tif (  defrostClass == 0 ) {\r\n\t\t\t\t\t// investor account\r\n\t\t\t\t\ttransfer(toAddress, amount);\r\n\t\t\t\t\tassignedSupply = SafeMath.add(assignedSupply, amount);\r\n\t\t\t\t}\r\n\t\t\t\telse if(defrostClass == 1){\r\n\r\n\t\t\t\t\t// Iced account. The balance is not affected here\r\n                    vIcedBalances.push(toAddress);\r\n                    icedBalances_frosted[toAddress] = amount;\r\n\t\t\t\t\ticedBalances_defrosted[toAddress] = 0;\r\n\t\t\t\t\tassignedSupply = SafeMath.add(assignedSupply, amount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\r\n\tfunction getBlockTimestamp() constant returns (uint256){\r\n\t\treturn now;\r\n\t}\r\n\r\n\tfunction getAssignedSupply() constant returns (uint256){\r\n\t\treturn assignedSupply;\r\n\t}\r\n\r\n\tfunction elapsedMonthsFromICOStart() constant returns (int elapsed) {\r\n\t\telapsed = (int(now-START_ICO_TIMESTAMP)/60)/DEFROST_MONTH_IN_MINUTES;\r\n\t}\r\n\r\n\tfunction getDefrostFactor()constant returns (uint){\r\n\t\treturn DEFROST_FACTOR;\r\n\t}\r\n\r\n\tfunction lagDefrost()constant returns (int){\r\n\t\treturn DEFROST_MONTHS;\r\n\t}\r\n\r\n\tfunction canDefrost() constant returns (bool){\r\n\t\tint numMonths = elapsedMonthsFromICOStart();\r\n\t\treturn  numMonths > DEFROST_MONTHS &&\r\n\t\t\t\t\t\t\tuint(numMonths) <= SafeMath.add(uint(DEFROST_MONTHS),  DEFROST_FACTOR/2+1);\r\n\t}\r\n\r\n\tfunction defrostTokens(uint fromIdx, uint toIdx) onlyDefrosterOrOwner {\r\n\r\n\t\trequire(now>START_ICO_TIMESTAMP);\r\n\t\trequire(stopDefrost == false);\r\n\t\trequire(fromIdx>=0 && toIdx<=vIcedBalances.length);\r\n\t\tif(fromIdx==0 && toIdx==0){\r\n\t\t\tfromIdx = 0;\r\n\t\t\ttoIdx = vIcedBalances.length;\r\n\t\t}\r\n\r\n\t\tint monthsElapsedFromFirstDefrost = elapsedMonthsFromICOStart() - DEFROST_MONTHS;\r\n\t\trequire(monthsElapsedFromFirstDefrost>0);\r\n\t\tuint monthsIndex = uint(monthsElapsedFromFirstDefrost);\r\n\t\t//require(monthsIndex<=DEFROST_FACTOR);\r\n\t\trequire(canDefrost() == true);\r\n\r\n\t\t/*\r\n\t\t\tif monthsIndex == 1 => defrost 50%\r\n\t\t\telse if monthsIndex <= 10  defrost 5%\r\n\t\t*/\r\n\r\n\t\t// Looping into the iced accounts\r\n        for (uint index = fromIdx; index < toIdx; index++) {\r\n\r\n\t\t\taddress currentAddress = vIcedBalances[index];\r\n            uint256 amountTotal = SafeMath.add(icedBalances_frosted[currentAddress], icedBalances_defrosted[currentAddress]);\r\n            uint256 targetDeFrosted = 0;\r\n\t\t\tuint256 fivePercAmount = SafeMath.div(amountTotal, DEFROST_FACTOR);\r\n\t\t\tif(monthsIndex==1){\r\n\t\t\t\ttargetDeFrosted = SafeMath.mul(fivePercAmount, 10);  //  10 times 5% = 50%\r\n\t\t\t}else{\r\n\t\t\t\ttargetDeFrosted = SafeMath.mul(fivePercAmount, 10) + SafeMath.div(SafeMath.mul(monthsIndex-1, amountTotal), DEFROST_FACTOR);\r\n\t\t\t}\r\n            uint256 amountToRelease = SafeMath.sub(targetDeFrosted, icedBalances_defrosted[currentAddress]);\r\n\r\n\t\t    if (amountToRelease > 0 && targetDeFrosted > 0) {\r\n                icedBalances_frosted[currentAddress] = SafeMath.sub(icedBalances_frosted[currentAddress], amountToRelease);\r\n                icedBalances_defrosted[currentAddress] = SafeMath.add(icedBalances_defrosted[currentAddress], amountToRelease);\r\n\t\t\t\ttransfer(currentAddress, amountToRelease);\r\n\t        }\r\n        }\r\n\t}\r\n\r\n\tfunction getStartIcoTimestamp() constant returns (uint) {\r\n\t\treturn START_ICO_TIMESTAMP;\r\n\t}\r\n\r\n\tfunction stopBatchAssign() onlyOwner {\r\n\t\t\trequire ( batchAssignStopped == false);\r\n\t\t\tbatchAssignStopped = true;\r\n\t}\r\n\r\n\tfunction getAddressBalance(address addr) constant returns (uint256 balance)  {\r\n\t\t\tbalance = balances[addr];\r\n\t}\r\n\r\n\tfunction getAddressAndBalance(address addr) constant returns (address _address, uint256 _amount)  {\r\n\t\t\t_address = addr;\r\n\t\t\t_amount = balances[addr];\r\n\t}\r\n\r\n\tfunction setStopDefrost() onlyOwner {\r\n\t\t\tstopDefrost = true;\r\n\t}\r\n\r\n\tfunction killContract() onlyOwner {\r\n\t\tselfdestruct(owner);\r\n\t}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"batchAssignStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopBatchAssign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icedBalances_frosted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromIdx\",\"type\":\"uint256\"},{\"name\":\"toIdx\",\"type\":\"uint256\"}],\"name\":\"defrostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vIcedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssignedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elapsedMonthsFromICOStart\",\"outputs\":[{\"name\":\"elapsed\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDefroster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canDefrost\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_ICO_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartIcoTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStopDefrost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vaddr\",\"type\":\"address[]\"},{\"name\":\"_vamounts\",\"type\":\"uint256[]\"},{\"name\":\"_vDefrostClass\",\"type\":\"uint256[]\"}],\"name\":\"batchAssignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icedBalances_defrosted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lagDefrost\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assignedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopDefrost\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDefrostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_MONTHS\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_MONTH_IN_MINUTES\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressAndBalance\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_NUM_OZT_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OZTToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://beb37f338fdd596fad1b0bac5c7f2ead586838a63c09759042a5bd714dd6e21c"}]}