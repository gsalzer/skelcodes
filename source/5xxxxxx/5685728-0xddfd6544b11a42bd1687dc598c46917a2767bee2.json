{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract LOTT {\r\n    string public name = 'LOTT';\r\n    string public symbol = 'LOTT';\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 1000000000000000000000000;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    address public owner;\r\n    uint public price = 10000000000000000000;\r\n    uint public fee = 256000000000000000000;\r\n    uint public currentRound = 0;\r\n    uint8 public placesSold;\r\n    uint[] public places = [\r\n        768000000000000000000,\r\n        614400000000000000000,\r\n        460800000000000000000,\r\n        307200000000000000000,\r\n        153600000000000000000\r\n    ];\r\n    uint public rand1;\r\n    uint8 public rand2;\r\n    \r\n    mapping (uint => mapping (uint8 => address)) public map;\r\n    mapping (address => uint256) public gameBalanceOf;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event BalanceChange(address receiver, uint newBalance);\r\n    event RoundChange(uint newRound);\r\n    event Place(uint round, uint8 place, address backer);\r\n    event Finish(uint round, uint8 place1, uint8 place2, uint8 place3, uint8 place4, uint8 place5);\r\n    \r\n    function LOTT() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        \r\n        owner = msg.sender;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function withdraw() external {\r\n        require(gameBalanceOf[msg.sender] > 0);\r\n        \r\n        _transfer(this, msg.sender, gameBalanceOf[msg.sender]);\r\n        \r\n        gameBalanceOf[msg.sender] = 0;\r\n        BalanceChange(msg.sender, 0);\r\n    }\r\n    \r\n    function place(uint8 cell) external {\r\n        require(map[currentRound][cell] == 0x0);\r\n        _transfer(msg.sender, this, price);\r\n        \r\n        map[currentRound][cell] = msg.sender;\r\n        Place(currentRound, cell, msg.sender);\r\n        rand1 += uint(msg.sender) + block.timestamp;\r\n        rand2 -= uint8(msg.sender);\r\n        if (placesSold < 255) {\r\n            placesSold++;\r\n        } else {\r\n            placesSold = 0;\r\n            bytes32 hashRel = bytes32(uint(block.blockhash(block.number - rand2 - 1)) + block.timestamp + rand1);\r\n            \r\n            uint8 place1 = uint8(hashRel[31]);\r\n            uint8 place2 = uint8(hashRel[30]);\r\n            uint8 place3 = uint8(hashRel[29]);\r\n            uint8 place4 = uint8(hashRel[28]);\r\n            uint8 place5 = uint8(hashRel[27]);\r\n            \r\n            if (place2 == place1) {\r\n                place2++;\r\n            }\r\n            \r\n            if (place3 == place1) {\r\n                place3++;\r\n            }\r\n            if (place3 == place2) {\r\n                place3++;\r\n            }\r\n            \r\n            if (place4 == place1) {\r\n                place4++;\r\n            }\r\n            if (place4 == place2) {\r\n                place4++;\r\n            }\r\n            if (place4 == place3) {\r\n                place4++;\r\n            }\r\n            \r\n            if (place5 == place1) {\r\n                place5++;\r\n            }\r\n            if (place5 == place2) {\r\n                place5++;\r\n            }\r\n            if (place5 == place3) {\r\n                place5++;\r\n            }\r\n            if (place5 == place4) {\r\n                place5++;\r\n            }\r\n            \r\n            gameBalanceOf[map[currentRound][place1]] += places[0];\r\n            gameBalanceOf[map[currentRound][place2]] += places[1];\r\n            gameBalanceOf[map[currentRound][place3]] += places[2];\r\n            gameBalanceOf[map[currentRound][place4]] += places[3];\r\n            gameBalanceOf[map[currentRound][place5]] += places[4];\r\n            gameBalanceOf[owner] += fee;\r\n            \r\n            BalanceChange(map[currentRound][place1], gameBalanceOf[map[currentRound][place1]]);\r\n            BalanceChange(map[currentRound][place2], gameBalanceOf[map[currentRound][place2]]);\r\n            BalanceChange(map[currentRound][place3], gameBalanceOf[map[currentRound][place3]]);\r\n            BalanceChange(map[currentRound][place4], gameBalanceOf[map[currentRound][place4]]);\r\n            BalanceChange(map[currentRound][place5], gameBalanceOf[map[currentRound][place5]]);\r\n            BalanceChange(owner, gameBalanceOf[owner]);\r\n            \r\n            Finish(currentRound, place1, place2, place3, place4, place5);\r\n            \r\n            currentRound++;\r\n            RoundChange(currentRound);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cell\",\"type\":\"uint8\"}],\"name\":\"place\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rand1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"placesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"places\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"map\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rand2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRound\",\"type\":\"uint256\"}],\"name\":\"RoundChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"}],\"name\":\"Place\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place5\",\"type\":\"uint8\"}],\"name\":\"Finish\",\"type\":\"event\"}]","ContractName":"LOTT","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab7d04527ea164ac2a827676e3f609f9376f36b766c33343c005c7aa8f7d70c6"}]}