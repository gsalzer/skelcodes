{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n///ETHERICH Contract\r\n\r\n/*\r\nCopyright 2018 etherich.co\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\ncontract Etherich {\r\n    address public owner;\r\n    \r\n    uint constant public PARTICIPATION_FEE = 0.1 ether;\r\n    uint[] public REFERRAL_RATE = [40, 25, 15, 10, 5];\r\n\r\n    mapping (address => address) members;\r\n    mapping (string => address) referralCodes;\r\n    uint public memberCount;\r\n\r\n    event HasNewMember(uint memberCount);\r\n    \r\n    function Etherich() public {\r\n        owner = msg.sender;\r\n        members[owner] = 1;\r\n\r\n        string memory alphabetHash = hash(owner);\r\n        referralCodes[alphabetHash] = owner;\r\n\r\n        memberCount = 1;\r\n    }\r\n    \r\n    function participate(string referral) public payable {\r\n        require(referralCodes[referral] != 0);\r\n        require(members[msg.sender] == 0);\r\n        require(msg.value == PARTICIPATION_FEE);\r\n        \r\n        address referrer = referralCodes[referral];\r\n        members[msg.sender] = referrer;\r\n        string memory alphabetHash = hash(msg.sender);\r\n        referralCodes[alphabetHash] = msg.sender;\r\n        \r\n        for (uint16 i = 0; i<5; i++) {\r\n            if (referrer == 1) {\r\n                break;\r\n            }\r\n            \r\n            uint256 amount = SafeMath.div(SafeMath.mul(msg.value, REFERRAL_RATE[i]), 100);\r\n            referrer.transfer(amount);\r\n            referrer = members[referrer];\r\n        }\r\n\r\n        memberCount++;\r\n        HasNewMember(memberCount);\r\n    }\r\n    \r\n    function isMember(address a) public view returns(bool) {\r\n        return !(members[a] == 0);\r\n    }\r\n    \r\n    function doesReferralCodeValid(string code) public view returns(bool) {\r\n        return !(referralCodes[code] == 0);\r\n    }\r\n    \r\n    function referralCodeFromAddress(address a) public view returns (string) {\r\n        if (this.isMember(a)) {\r\n            return hash(a);\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    function getReferralRates() public view returns (uint[]) {\r\n        return REFERRAL_RATE;\r\n    }\r\n    \r\n    function payout(address receiver, uint amount) public restricted {\r\n        if (amount > this.balance) {\r\n            receiver.transfer(this.balance);\r\n        } else {\r\n            receiver.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function changeOwner(address newOwner) public restricted {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function hash(address a) private pure returns (string) {\r\n        bytes32 sha3Hash = keccak256(bytes20(a));\r\n        return bytes32ToAlphabetString(sha3Hash);\r\n    }\r\n    \r\n    function bytes32ToAlphabetString(bytes32 x) private pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint8 charCount = 0;\r\n\r\n        for (uint j = 0; j < 32; j++) {\r\n            uint8 value = uint8(x[j]) % 24;\r\n            byte char = byte(65 + value);\r\n            bytesString[charCount] = char;\r\n            charCount++;\r\n        }\r\n\r\n        return string(bytesString);\r\n    } \r\n    \r\n    modifier restricted() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"doesReferralCodeValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"participate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTICIPATION_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"referralCodeFromAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"memberCount\",\"type\":\"uint256\"}],\"name\":\"HasNewMember\",\"type\":\"event\"}]","ContractName":"Etherich","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://640114852007f34c83f35d69bfc86b7c368e45d0c4cd625c4cae66fd7bb7e5ff"}]}