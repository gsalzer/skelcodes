{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath32\r\n * @dev SafeMath library implemented for uint32\r\n */\r\nlibrary SafeMath32 {\r\n\r\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint32 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint32 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    uint32 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath8\r\n * @dev SafeMath library implemented for uint8\r\n */\r\nlibrary SafeMath8 {\r\n\r\n  function mul(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint8 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint8 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n    uint8 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMath32 for uint32;\r\n\tusing SafeMath8 for uint8;\r\n\r\n  address internal owner;\r\n  address public admin;\r\n\r\n  event AdminshipTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n\r\n  function transferAdminship(address newAdmin) public onlyOwner {\r\n    require(newAdmin != address(0));\r\n    emit AdminshipTransferred(admin, newAdmin);\r\n    admin = newAdmin;\r\n  }\r\n\r\n}\r\n\r\ncontract Terminable is Ownable {\r\n\r\n\r\n\t\tfunction terminate() external onlyOwner {\r\n\t\t\tselfdestruct(owner);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n}\r\n\r\ncontract ERC721 is Terminable {\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalToAll(address indexed _owner, uint256 _tokenId);\r\n\r\n\r\n  \r\n}\r\n\r\ncontract AssFactory is ERC721 {\r\n\r\n\t\r\n    \r\n    struct Ass {\r\n\t\tstring name;\r\n\t\tuint32 id;\r\n\t\tstring class;\r\n\t\tuint cardNumber;\r\n\t\tuint cardType;\r\n\t\tuint256 priceInSzabo;\r\n    }\r\n\t\r\n\tAss[] public asses;\r\n\t\r\n\t\r\n\tmapping (uint => address) public assToOwner;\r\n\tmapping (address => uint) public ownerAssCount;\r\n\t\r\n\t\r\n\tmodifier onlyOwnerOf(uint _id) {\r\n    require(msg.sender == assToOwner[_id]);\r\n    _;\r\n    }\r\n    \r\n    event Withdrawal(uint256 balance);\r\n    event AssCreated(bool done);\r\n    \r\n    event FeeChanged(uint _newFee);\r\n\t\r\n    function getAssTotal() public constant returns(uint) {\r\n    return asses.length;\r\n    }\r\n    \r\n    function getAssData(uint index) public view returns(string, uint, string, uint, uint, uint) {\r\n    return (asses[index].name, asses[index].id, asses[index].class, asses[index].cardNumber, asses[index].cardType, asses[index].priceInSzabo);\r\n    }\r\n\r\n    \r\n      function getAssesByOwner(address _owner) external view returns(uint[]) {\r\n    uint[] memory result = new uint[](ownerAssCount[_owner]);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < asses.length; i++) {\r\n      if (assToOwner[i.add(2536)] == _owner) {\r\n        result[counter] = i;\r\n        counter++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n    function _createAss(string _name, uint32 _id, string _class, uint _cardNumber, uint _cardType, uint256 _priceInSzabo) private {\r\n\t\tasses.push(Ass(_name, _id, _class, _cardNumber, _cardType, _priceInSzabo));\r\n\t\tassToOwner[_id] = msg.sender;\r\n\t\townerAssCount[msg.sender] = ownerAssCount[msg.sender].add(1);\r\n\t\tbool done = true;\r\n\t\temit AssCreated(done);\r\n    }\r\n\t\r\n\tfunction _getId() internal view returns(uint32){\r\n\t\tuint32 newId = uint32(asses.length.add(2536));\r\n\t\treturn newId;\r\n\t}\r\n\t\r\n\tfunction startCreatingAss(string _name, string _class, uint _cardNumber, uint _cardType, uint256 _priceInSzabo) public onlyAdmin {\r\n\t\tuint32 newId = _getId();\r\n\t\t_createAss(_name, newId, _class, _cardNumber, _cardType, _priceInSzabo);\r\n\t}\r\n\t\r\n\r\n    \r\n\r\n\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\ncontract AssMarket is AssFactory {\r\n\r\n//---------Auction Variables------------------------------------------------------   \r\n    uint public NumberOfAuctions = 0;\r\n    uint public totalSzaboInBids = 0;\r\n    uint public bidFeePercents = 3;\r\n    uint public everyBidFee = 1800;\r\n    uint public startAuctionFee = 1800;\r\n    uint public maxDuration = 10;\r\n    uint public minBidDifferenceInSzabo = 1000;\r\n    \r\n    \r\n    \r\n    mapping(uint => uint) public auctionEndTime;\r\n    mapping(uint => uint) public auctionedAssId;\r\n    mapping(uint => address) public auctionOwner;\r\n    mapping(uint => bool) public auctionEnded;\r\n    mapping(uint => address) public highestBidderOf;\r\n    mapping(uint => uint) public highestBidOf;\r\n    mapping(uint => uint) public startingBidOf;\r\n    \r\n    mapping(uint => uint) public assInAuction;\r\n//---------------------------------------------------------------------------------   \r\n\r\n    \tuint256 public approveFee = 1800;\r\n    \tuint256 public takeOwnershipFeePercents = 3;\r\n    \tuint256 public cancelApproveFee = 1800;\r\n    \t\r\n    \tmapping (uint => address) public assApprovals;\r\n    \tmapping (uint => bool) public assToAllApprovals;\r\n    \t\r\n        event PriceChanged(uint newPrice, uint assId);\r\n        event ApprovalCancelled(uint assId);\r\n        event AuctionReverted(uint auctionId);\r\n    \t\r\n    \tfunction setTakeOwnershipFeePercents(uint _newFee) public onlyAdmin {\r\n\t\t    takeOwnershipFeePercents = _newFee;\t\r\n\t\t    emit FeeChanged(_newFee);\r\n\t    }\r\n    \t\r\n\r\n\t    \r\n\t    function setApproveFee(uint _newFee) public onlyAdmin {\r\n\t\t    approveFee = _newFee;\t\r\n\t\t    emit FeeChanged(_newFee);\r\n\t    }\r\n\t    \r\n\t    function setCancelApproveFee(uint _newFee) public onlyAdmin {\r\n\t\t    cancelApproveFee = _newFee;\t\r\n\t\t    emit FeeChanged(_newFee);\r\n\t    }\r\n\t    \r\n    \r\n\r\n\t function setPriceOfAss(uint256 _newPrice, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n\t\tasses[_tokenId.sub(2536)].priceInSzabo = _newPrice;\r\n\t\temit PriceChanged(_newPrice, _tokenId);\r\n\t }\r\n\t \r\n\t function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n\t\treturn ownerAssCount[_owner];\r\n\t }\r\n\t\r\n\t function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n\t\treturn assToOwner[_tokenId];\r\n\t }\r\n\t \r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\townerAssCount[_to] = ownerAssCount[_to].add(1);\r\n\t\townerAssCount[_from] = ownerAssCount[_from].sub(1);\r\n\t\tassToOwner[_tokenId] = _to;\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _tokenId) public onlyAdmin onlyOwnerOf(_tokenId){\r\n\t\t_transfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction approve(address _to, uint256 _tokenId) public payable onlyOwnerOf(_tokenId) {\r\n\t\trequire(msg.value == approveFee * 1 szabo && assInAuction[ _tokenId] == 0);\r\n\t\tuint transferingAss = _tokenId.sub(2536);\r\n\t\tassApprovals[transferingAss] = _to;\r\n\t\temit Approval(msg.sender, _to, _tokenId);\r\n\t}\r\n\t\r\n\t function approveForAll(uint256 _tokenId) public payable onlyOwnerOf(_tokenId) {\r\n\r\n\t    require(msg.value == approveFee * 1 szabo && assInAuction[ _tokenId] == 0);\r\n\t\tuint transferingAss = _tokenId.sub(2536);\r\n\t\tassToAllApprovals[transferingAss] = true;\r\n\t\temit ApprovalToAll(msg.sender, _tokenId);\r\n\t }\r\n\t \r\n\t function cancelApproveForAll(uint256 _tokenId) public payable onlyOwnerOf(_tokenId) {\r\n\t    uint transferingAss = _tokenId.sub(2536);\r\n\t    require(msg.value == cancelApproveFee * 1 szabo && assToAllApprovals[transferingAss] == true);\r\n\t\tassToAllApprovals[transferingAss] = false;\r\n\t\temit ApprovalCancelled(_tokenId);\r\n\t }\r\n\t \r\n\t function cancelApproveForAddress(uint256 _tokenId) public payable onlyOwnerOf(_tokenId) {\r\n\t\trequire(msg.value == cancelApproveFee * 1 szabo && assApprovals[transferingAss] != 0x0000000000000000000000000000000000000000);\r\n\t\tuint transferingAss = _tokenId.sub(2536);\r\n\t\tassApprovals[transferingAss] = 0x0000000000000000000000000000000000000000;\r\n\t\temit ApprovalCancelled(_tokenId);\r\n\t }\r\n\t \r\n\tfunction getTakeOwnershipFee(uint _price) public view returns(uint) {\r\n        uint takeOwnershipFee = (_price.div(100)).mul(takeOwnershipFeePercents);\r\n        return(takeOwnershipFee);\r\n    }\r\n\t \r\n\tfunction takeOwnership(uint256 _tokenId) public payable {\r\n\t    uint idOfTransferingAss = _tokenId.sub(2536);\r\n\t    uint assPrice = asses[idOfTransferingAss].priceInSzabo;\r\n\t    address ownerOfAss = ownerOf(_tokenId);\r\n\t    uint sendAmount = assPrice.sub(getTakeOwnershipFee(assPrice));\r\n\t    \r\n\t\trequire(msg.value == assPrice * 1 szabo);\r\n\t\trequire(assApprovals[idOfTransferingAss] == msg.sender || assToAllApprovals[idOfTransferingAss] == true);\r\n\t\t\r\n\r\n\t\t\r\n\t\tassToAllApprovals[idOfTransferingAss] = false;\r\n\t\tassApprovals[idOfTransferingAss] = 0;\r\n\t\t_transfer(ownerOfAss, msg.sender, _tokenId);\r\n\t\t\r\n\r\n\t\townerOfAss.transfer(sendAmount * 1 szabo);\r\n\r\n\t}\r\n\t\r\n\tfunction _getPrice(uint256 _tokenId) view public returns(uint){\r\n\t      uint tokenPrice = asses[_tokenId.sub(2536)].priceInSzabo;\r\n\t\t  return (tokenPrice) * 1 szabo;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\ncontract AssFunctions is AssMarket {\r\n    \r\n    uint256 functionOnePrice = 1800;\r\n    uint256 functionTwoPrice = 1800;\r\n    uint256 functionThreePrice = 1800;\r\n    uint256 functionFourPrice = 1800;\r\n    uint256 functionFivePrice = 1800;\r\n    uint256 functionSixPrice = 1800;\r\n    uint256 functionSevenPrice = 1800;\r\n    uint256 functionEightPrice = 1800;\r\n    \r\n    uint256 galleryOnePrice = 1800;\r\n    uint256 galleryTwoPrice = 1800;\r\n    uint256 galleryThreePrice = 1800;\r\n    uint256 galleryFourPrice = 1800;\r\n    uint256 galleryFivePrice = 1800;\r\n    uint256 gallerySixPrice = 1800;\r\n    uint256 gallerySevenPrice = 1800;\r\n    \r\n    event OneOfMassFunctionsLaunched(bool launched);\r\n    event OneOfGalleryFunctionsLaunched(bool launched);\r\n//---------------------------------------------------------------------------------   \r\n    \r\n            function setFunctionOnePrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionOnePrice = _newFee;\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionTwoPrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionTwoPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionThreePrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionThreePrice = _newFee;\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionFourPrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionFourPrice = _newFee;\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionFivePrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionFivePrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionSixPrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionSixPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionSevenPrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionSevenPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setFunctionEightPrice(uint _newFee) public onlyAdmin {\r\n\t\t        functionEightPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n//---------------------------------------------------------------------------------       \r\n            \r\n            \r\n            function setGalleryOnePrice(uint _newFee) public onlyAdmin {\r\n\t\t        galleryOnePrice = _newFee;\t\r\n            }\r\n            \r\n            function setGalleryTwoPrice(uint _newFee) public onlyAdmin {\r\n\t\t        galleryTwoPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setGalleryThreePrice(uint _newFee) public onlyAdmin {\r\n\t\t        galleryThreePrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setGalleryFourPrice(uint _newFee) public onlyAdmin {\r\n\t\t        galleryFourPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setGalleryFivePrice(uint _newFee) public onlyAdmin {\r\n\t\t        galleryFivePrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setGallerySixPrice(uint _newFee) public onlyAdmin {\r\n\t\t        gallerySixPrice = _newFee;\t\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n            function setGallerySevenPrice(uint _newFee) public onlyAdmin {\r\n\t\t        gallerySevenPrice = _newFee;\r\n\t\t        emit FeeChanged(_newFee);\r\n            }\r\n            \r\n//-------------------------------------------------------       \r\n            \r\n \r\n function functionOne() public payable returns(bool) {\r\n     require( msg.value == functionOnePrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionTwo() public payable returns(bool) {\r\n     require( msg.value == functionTwoPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionThree() public payable returns(bool) {\r\n     require( msg.value == functionThreePrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionFour() public payable returns(bool) {\r\n     require( msg.value == functionFourPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionFive() public payable returns(bool) {\r\n     require( msg.value == functionFivePrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionSix() public payable returns(bool) {\r\n     require( msg.value == functionSixPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionSeven() public payable returns(bool) {\r\n     require( msg.value == functionSevenPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n  function functionEight() public payable returns(bool) {\r\n     require( msg.value == functionEightPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfMassFunctionsLaunched(true);\r\n }\r\n \r\n \r\n//-------------------------------------------------------       \r\n \r\n \r\n  function galleryOne() public payable returns(bool) {\r\n     require( msg.value == galleryOnePrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n  function galleryTwo() public payable returns(bool) {\r\n     require( msg.value == galleryTwoPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n  function galleryThree() public payable returns(bool) {\r\n     require( msg.value == galleryThreePrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n  function galleryFour() public payable returns(bool) {\r\n     require( msg.value == galleryFourPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n  function galleryFive() public payable returns(bool) {\r\n     require( msg.value == galleryFivePrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n  function gallerySix() public payable returns(bool) {\r\n     require( msg.value == gallerySixPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n  function gallerySeven() public payable returns(bool) {\r\n     require( msg.value == gallerySevenPrice * 1 szabo);\r\n     return(true);\r\n     emit OneOfGalleryFunctionsLaunched(true);\r\n }\r\n \r\n \r\n \r\n \r\n    \r\n}\r\n\r\n\r\n\r\ncontract AssAuction is AssFunctions {\r\n    \r\n\r\n    \r\n  modifier onlyOwnerOfAuction(uint _auctionId) {\r\n    require(msg.sender == auctionOwner[_auctionId]);\r\n    _;\r\n  }\r\n    \r\n    event HighestBidIncreased(address bidder, uint amount, uint auctionId);\r\n    event AuctionCreated(address creator, uint auctionedAss, uint auctionId);\r\n    event AuctionEnded(address winner, uint amount, uint auctionId, uint auctionedAss);\r\n    \r\n    function getRemainingTimeOf(uint _auctionId) public view returns(uint){\r\n        uint remainingTime = auctionEndTime[_auctionId].sub(now);\r\n        return(remainingTime);\r\n    }\r\n    \r\n    function setMinBidDifferenceInSzabo(uint _newDifference) public onlyAdmin {\r\n        minBidDifferenceInSzabo = _newDifference;\r\n        emit FeeChanged(_newDifference);\r\n    }\r\n    \r\n    function setBidFeePercents(uint _newFee) public onlyAdmin {\r\n\t\t    bidFeePercents = _newFee;\r\n\t\t    emit FeeChanged(_newFee);\r\n\t}\r\n\t\r\n\tfunction setEveryBidFee(uint _newFee) public onlyAdmin {\r\n\t\t    everyBidFee = _newFee;\t\r\n\t\t    emit FeeChanged(_newFee);\r\n\t}\r\n    \r\n    function setStartAuctionFee(uint _newFee) public onlyAdmin{\r\n        startAuctionFee = _newFee;\r\n        emit FeeChanged(_newFee);\r\n    }\r\n    \r\n\r\n    \r\n    function setMaxDuration(uint _newMaxDuration) public onlyAdmin{\r\n        maxDuration = _newMaxDuration;\r\n        emit FeeChanged(_newMaxDuration);\r\n    }\r\n    \r\n    function getAuctionData(uint _auctionId) public view returns(uint _endTime, uint _auctionedAssId, address _auctionOwner, bool _ended, address _highestBidder, uint _highestBid, uint _startingBid) {\r\n    return (auctionEndTime[_auctionId], auctionedAssId[_auctionId], auctionOwner[_auctionId], auctionEnded[_auctionId], highestBidderOf[_auctionId], highestBidOf[_auctionId], startingBidOf[_auctionId]);\r\n    }\r\n    \r\n    function startAuction(uint _assId, uint _duration, uint _startingBidInSzabo) public payable onlyOwnerOf(_assId){\r\n\r\n        require(assInAuction[_assId] == 0 && assToAllApprovals[_assId.sub(2536)] != true);\r\n        require(assApprovals[_assId.sub(2536)] == 0x0000000000000000000000000000000000000000);\r\n        require(msg.value == startAuctionFee * 1 szabo);\r\n        require(_duration <= maxDuration);\r\n        \r\n        uint auctionId = NumberOfAuctions.add(1);\r\n        \r\n        startingBidOf[auctionId] = _startingBidInSzabo;\r\n        auctionEndTime[auctionId] = now + (_duration * 1 days);\r\n        auctionedAssId[auctionId] = _assId;\r\n        auctionOwner[auctionId] = msg.sender;\r\n        NumberOfAuctions = NumberOfAuctions.add(1);\r\n        assInAuction[_assId] = auctionId;\r\n        emit AuctionCreated(msg.sender, _assId, auctionId);\r\n    }\r\n    \r\n    function getBidFee(uint _bid) public view returns(uint) {\r\n        uint bidFee = (_bid.div(100)).mul(bidFeePercents);\r\n        return(bidFee);\r\n    }\r\n    \r\n    function bid(uint _auctionId) public payable {\r\n        require(now <= auctionEndTime[_auctionId]);\r\n        require(msg.value >= (highestBidOf[_auctionId] * 1 szabo) + ((minBidDifferenceInSzabo + everyBidFee) * 1 szabo) && msg.value >= (startingBidOf[_auctionId] + minBidDifferenceInSzabo + everyBidFee) * 1 szabo);\r\n        require(msg.sender != auctionOwner[_auctionId]);\r\n        \r\n        uint msgvalueInSzabo = (msg.value / 1000000000000);\r\n        uint newBid = (msgvalueInSzabo).sub(everyBidFee);\r\n\r\n        if (highestBidOf[_auctionId] != 0) {\r\n            withdraw(_auctionId);\r\n        }\r\n        totalSzaboInBids = totalSzaboInBids + newBid;\r\n        totalSzaboInBids = totalSzaboInBids - highestBidOf[_auctionId];\r\n        \r\n        highestBidderOf[_auctionId] = msg.sender;\r\n        highestBidOf[_auctionId] = newBid;\r\n        \r\n        emit HighestBidIncreased(msg.sender, newBid, _auctionId);\r\n    }\r\n\r\n    /// Withdraw a bid that was overbid.\r\n    function withdraw(uint _auctionId) internal {\r\n        \r\n        uint amount = highestBidOf[_auctionId];\r\n        address highestManBidder = highestBidderOf[_auctionId];\r\n        if (amount > 0) {\r\n             highestManBidder.transfer(amount * 1 szabo);\r\n            }\r\n    }\r\n    \r\n        function auctionEnd(uint _auctionId) public {\r\n\r\n        address ownerOfAuction = auctionOwner[_auctionId];\r\n        address highestAuctionBidder = highestBidderOf[_auctionId];\r\n        uint amount = highestBidOf[_auctionId].sub(getBidFee(highestBidOf[_auctionId]));\r\n        uint idOfAuctionedAss = auctionedAssId[_auctionId];\r\n        \r\n        // 1. Conditions\r\n        require(now >= auctionEndTime[_auctionId]);\r\n        require(auctionEnded[_auctionId] == false);\r\n\r\n        // 2. Effects\r\n        highestBidOf[_auctionId] = 0;\r\n        highestBidderOf[_auctionId] = 0x0000000000000000000000000000000000000000;\r\n        \r\n        auctionEnded[_auctionId] = true;\r\n        emit AuctionEnded(highestAuctionBidder, amount, _auctionId, idOfAuctionedAss);\r\n\r\n        // 3. Interaction\r\n        if (highestAuctionBidder != 0x0000000000000000000000000000000000000000) {\r\n            _transfer(ownerOfAuction, highestAuctionBidder, idOfAuctionedAss);\r\n            assInAuction[idOfAuctionedAss] = 0;\r\n            totalSzaboInBids = totalSzaboInBids.sub(amount);\r\n            ownerOfAuction.transfer(amount * 1 szabo);\r\n            }\r\n        }\r\n        \r\n\r\n\r\n       \r\n       \r\n       function revertAuction(uint _auctionId) public onlyAdmin {\r\n        \r\n        address highestAuctionBidder = highestBidderOf[_auctionId];\r\n        uint amount = highestBidOf[_auctionId];\r\n        uint idOfAuctionedAss = auctionedAssId[_auctionId];\r\n        \r\n        totalSzaboInBids = totalSzaboInBids.sub(amount);        \r\n        assInAuction[idOfAuctionedAss] = 0;\r\n        \r\n        auctionEndTime[_auctionId] = 0;\r\n        auctionedAssId[_auctionId] = 0;\r\n        auctionOwner[_auctionId] = 0x0000000000000000000000000000000000000000;\r\n        startingBidOf[_auctionId] = 0;\r\n        \r\n        highestBidOf[_auctionId] = 0;\r\n        highestBidderOf[_auctionId] = 0x0000000000000000000000000000000000000000;\r\n                \r\n        auctionEnded[_auctionId] = true;\r\n                \r\n        if (amount > 0) {\r\n             highestAuctionBidder.transfer(amount  * 1 szabo);\r\n            }\r\n            \r\n        emit AuctionReverted(_auctionId);\r\n        }\r\n        \r\n        \r\n    function getBalanceOfContractInSzabo() external view onlyOwner returns(uint256) {\r\n    uint contractBalance = address(this).balance * 1000000;\r\n    return (contractBalance);\r\n    }\r\n\r\n\r\n    function withdraw() external onlyOwner {\r\n\t    uint amountToWithdraw = address(this).balance.sub(totalSzaboInBids * 1 szabo);\r\n        owner.transfer(amountToWithdraw);\r\n        emit Withdrawal(amountToWithdraw);\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAssTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGalleryOnePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startingBidOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionFourPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionSevenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionFivePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionOne\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionSeven\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAssCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionOnePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionFive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approveForAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approveFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionEight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionSix\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidFeePercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"galleryOne\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGallerySixPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionData\",\"outputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_auctionedAssId\",\"type\":\"uint256\"},{\"name\":\"_auctionOwner\",\"type\":\"address\"},{\"name\":\"_ended\",\"type\":\"bool\"},{\"name\":\"_highestBidder\",\"type\":\"address\"},{\"name\":\"_highestBid\",\"type\":\"uint256\"},{\"name\":\"_startingBid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cancelApproveFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRemainingTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setPriceOfAss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStartAuctionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionSixPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gallerySeven\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"revertAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAuctionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionTwoPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGallerySevenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"asses\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"class\",\"type\":\"string\"},{\"name\":\"cardNumber\",\"type\":\"uint256\"},{\"name\":\"cardType\",\"type\":\"uint256\"},{\"name\":\"priceInSzabo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionedAssId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setBidFeePercents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGalleryFourPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBidDifferenceInSzabo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takeOwnershipFeePercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setCancelApproveFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBidOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assId\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_startingBidInSzabo\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionThreePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAssData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBidderOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGalleryFivePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionThree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGalleryThreePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_class\",\"type\":\"string\"},{\"name\":\"_cardNumber\",\"type\":\"uint256\"},{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_priceInSzabo\",\"type\":\"uint256\"}],\"name\":\"startCreatingAss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberOfAuctions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"galleryFive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAssesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTakeOwnershipFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSzaboInBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelApproveForAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelApproveForAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assToAllApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"everyBidFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setApproveFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"getBidFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gallerySix\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assInAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"galleryTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setTakeOwnershipFeePercents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceOfContractInSzabo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDifference\",\"type\":\"uint256\"}],\"name\":\"setMinBidDifferenceInSzabo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"galleryFour\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setEveryBidFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"galleryThree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"functionFour\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFunctionEightPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setGalleryTwoPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionedAss\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionedAss\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"launched\",\"type\":\"bool\"}],\"name\":\"OneOfMassFunctionsLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"launched\",\"type\":\"bool\"}],\"name\":\"OneOfGalleryFunctionsLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"assId\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"assId\",\"type\":\"uint256\"}],\"name\":\"ApprovalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"AssCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalToAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminshipTransferred\",\"type\":\"event\"}]","ContractName":"AssAuction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e1d3a5164ebf7799306e58ff0c410d45c17624a3b40ca9ab576762740601a25c"}]}