{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract W4T {\r\n    string public name = 'W4T';\r\n    string public symbol = 'W4T';\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 1000000000000000000000000;\r\n    uint public miningReward = 1000000000000000000;\r\n    uint private randomNumber;\r\n    \r\n    address public owner;\r\n    \r\n    uint public domainPrice = 10000000000000000000; // 10 W4T\r\n    uint public bytePrice   = 100000000000000;      // 0.0001 W4T\r\n    uint public premiumDomainK = 10;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public successesOf;\r\n    mapping (address => uint256) public failsOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (bytes8 => bool) public zones;\r\n    mapping (bytes8 => mapping (bytes32 => address)) public domains;\r\n    mapping (bytes8 => mapping (bytes32 => mapping (bytes32 => string))) public pages;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    event ZoneRegister(bytes8 zone);\r\n    event DomainRegister(bytes8 zone, string domain, address owner);\r\n    event PageRegister(bytes8 zone, string domain, bytes32 path, string content);\r\n    event DomainTransfer(bytes8 zone, string domain, address owner);\r\n    \r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function W4T() public {\r\n        owner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) external {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /* Transfer tokens from other address */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Set allowance for other address */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    /* Set allowance for other address and notify */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) internal returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function registerZone(bytes8 zone) external onlyOwner {\r\n        zones[zone] = true;\r\n        ZoneRegister(zone);\r\n    }\r\n    \r\n    function registerDomain(bytes8 zone, string domain) external {\r\n        uint domainLength = bytes(domain).length;\r\n        require(domainLength >= 2 && domainLength <= 32);\r\n        bytes32 domainBytes = stringToBytes32(domain);\r\n        require(zones[zone]);\r\n        require(domains[zone][domainBytes] == 0x0);\r\n        \r\n        uint amount = domainPrice;\r\n        if (domainLength <= 4) {\r\n            amount *= premiumDomainK ** (5 - domainLength);\r\n        }\r\n        burn(amount);\r\n        domains[zone][domainBytes] = msg.sender;\r\n        DomainRegister(zone, domain, msg.sender);\r\n    }\r\n    \r\n    function registerPage(bytes8 zone, string domain, bytes32 path, string content) external {\r\n        uint domainLength = bytes(domain).length;\r\n        require(domainLength >= 2 && domainLength <= 32);\r\n        bytes32 domainBytes = stringToBytes32(domain);\r\n        require(zones[zone]);\r\n        require(domains[zone][domainBytes] == msg.sender);\r\n        \r\n        burn(bytePrice * bytes(content).length);\r\n        pages[zone][domainBytes][path] = content;\r\n        PageRegister(zone, domain, path, content);\r\n    }\r\n    \r\n    function transferDomain(bytes8 zone, string domain, address newOwner) external {\r\n        uint domainLength = bytes(domain).length;\r\n        require(domainLength >= 2 && domainLength <= 32);\r\n        bytes32 domainBytes = stringToBytes32(domain);\r\n        require(zones[zone]);\r\n        require(domains[zone][domainBytes] == msg.sender);\r\n        \r\n        domains[zone][domainBytes] = newOwner;\r\n        DomainTransfer(zone, domain, newOwner);\r\n    }\r\n    \r\n    function () external payable {\r\n        if (msg.value == 0) {\r\n            randomNumber += block.timestamp + uint(msg.sender);\r\n            uint minedAtBlock = uint(block.blockhash(block.number - 1));\r\n            uint minedHashRel = uint(sha256(minedAtBlock + randomNumber + uint(msg.sender))) % 100000;\r\n            uint balanceRel = balanceOf[msg.sender] * 1000 / totalSupply;\r\n            if (balanceRel >= 1) {\r\n                if (balanceRel > 29) {\r\n                    balanceRel = 29;\r\n                }\r\n                balanceRel = 2 ** balanceRel;\r\n                balanceRel = 50000 / balanceRel;\r\n                balanceRel = 50000 - balanceRel;\r\n                if (minedHashRel < balanceRel) {\r\n                    uint reward = miningReward + minedHashRel * 100000000000000;\r\n                    balanceOf[msg.sender] += reward;\r\n                    totalSupply += reward;\r\n                    Transfer(0, this, reward);\r\n                    Transfer(this, msg.sender, reward);\r\n                    successesOf[msg.sender]++;\r\n                } else {\r\n                    Transfer(this, msg.sender, 0);\r\n                    failsOf[msg.sender]++;\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"zones\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zone\",\"type\":\"bytes8\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zone\",\"type\":\"bytes8\"}],\"name\":\"registerZone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"domainPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premiumDomainK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"failsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bytePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zone\",\"type\":\"bytes8\"},{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"registerDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"successesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pages\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"zone\",\"type\":\"bytes8\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"path\",\"type\":\"bytes32\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"registerPage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"zone\",\"type\":\"bytes8\"}],\"name\":\"ZoneRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"zone\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DomainRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"zone\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"path\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"string\"}],\"name\":\"PageRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"zone\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DomainTransfer\",\"type\":\"event\"}]","ContractName":"W4T","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b8bf047b1ca8930ac2f5e5754ff10ae56f830dc2641b1fc4b436cf9a948daeb8"}]}