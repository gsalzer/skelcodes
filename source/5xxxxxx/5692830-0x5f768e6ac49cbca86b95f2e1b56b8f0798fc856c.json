{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  function safeAdd (uint256 x, uint256 y)\r\n  pure internal\r\n  returns (uint256 z) {\r\n    assert (x <= MAX_UINT256 - y);\r\n    return x + y;\r\n  }\r\n\r\n  function safeSub (uint256 x, uint256 y)\r\n  pure internal\r\n  returns (uint256 z) {\r\n    assert (x >= y);\r\n    return x - y;\r\n  }\r\n\r\n  function safeMul (uint256 x, uint256 y)\r\n  pure internal\r\n  returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    assert (x <= MAX_UINT256 / y);\r\n    return x * y;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n\r\n  function totalSupply () public view returns (uint256 supply);\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 balance);\r\n\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  function approve (address _spender, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  function allowance (address _owner, address _spender)\r\n  public view returns (uint256 remaining);\r\n\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract AddressSet {\r\n  function contains (address _address) public view returns (bool);\r\n}\r\n\r\ncontract AbstractToken is Token, SafeMath {\r\n  function AbstractToken () public {\r\n    // Do nothing\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    uint256 fromBalance = accounts [msg.sender];\r\n    if (fromBalance < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (fromBalance, _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    uint256 spenderAllowance = allowances [_from][msg.sender];\r\n    if (spenderAllowance < _value) return false;\r\n    uint256 fromBalance = accounts [_from];\r\n    if (fromBalance < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (spenderAllowance, _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (fromBalance, _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n    }\r\n    Transfer (_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve (address _spender, uint256 _value)\r\n  public returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function allowance (address _owner, address _spender)\r\n  public view returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  mapping (address => uint256) internal accounts;\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowances;\r\n}\r\n\r\ncontract AbstractVirtualToken is AbstractToken {\r\n\r\n  uint256 constant MAXIMUM_TOKENS_COUNT =\r\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  uint256 constant BALANCE_MASK =\r\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  uint256 constant MATERIALIZED_FLAG_MASK =\r\n    0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n  function AbstractVirtualToken () public AbstractToken () {\r\n    // Do nothing\r\n  }\r\n\r\n  function totalSupply () public view returns (uint256 supply) {\r\n    return tokensCount;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 balance) {\r\n    return safeAdd (\r\n      accounts [_owner] & BALANCE_MASK, getVirtualBalance (_owner));\r\n  }\r\n\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    if (_value > balanceOf (msg.sender)) return false;\r\n    else {\r\n      materializeBalanceIfNeeded (msg.sender, _value);\r\n      return AbstractToken.transfer (_to, _value);\r\n    }\r\n  }\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success) {\r\n    if (_value > allowance (_from, msg.sender)) return false;\r\n    if (_value > balanceOf (_from)) return false;\r\n    else {\r\n      materializeBalanceIfNeeded (_from, _value);\r\n      return AbstractToken.transferFrom (_from, _to, _value);\r\n    }\r\n  }\r\n\r\n  function virtualBalanceOf (address _owner)\r\n  internal view returns (uint256 _virtualBalance);\r\n\r\n  function getVirtualBalance (address _owner)\r\n  private view returns (uint256 _virtualBalance) {\r\n    if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\r\n    else {\r\n      _virtualBalance = virtualBalanceOf (_owner);\r\n      uint256 maxVirtualBalance = safeSub (MAXIMUM_TOKENS_COUNT, tokensCount);\r\n      if (_virtualBalance > maxVirtualBalance)\r\n        _virtualBalance = maxVirtualBalance;\r\n    }\r\n  }\r\n\r\n  function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\r\n    uint256 storedBalance = accounts [_owner];\r\n    if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\r\n      // Virtual balance is not materialized yet\r\n      if (_value > storedBalance) {\r\n        // Real balance is not enough\r\n        uint256 virtualBalance = getVirtualBalance (_owner);\r\n        require (safeSub (_value, storedBalance) <= virtualBalance);\r\n        accounts [_owner] = MATERIALIZED_FLAG_MASK |\r\n          safeAdd (storedBalance, virtualBalance);\r\n        tokensCount = safeAdd (tokensCount, virtualBalance);\r\n      }\r\n    }\r\n  }\r\n\r\n  uint256 internal tokensCount;\r\n}\r\n\r\ncontract FoshaAirdrop is AbstractVirtualToken {\r\n\r\n  uint256 private constant VIRTUAL_THRESHOLD = 0.1 ether;\r\n\r\n  uint256 private constant VIRTUAL_COUNT = 10e8;\r\n\r\n  function FoshaAirdrop () AbstractVirtualToken () {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function name () constant returns (string result) {\r\n    return \"Fosha Airdrop\";\r\n  }\r\n\r\n  function symbol () constant returns (string result) {\r\n    return \"FOSHAIR\";\r\n  }\r\n\r\n  function decimals () constant returns (uint8 result) {\r\n    return 8;\r\n  }\r\n\r\n  function massNotify (address [] _owners) {\r\n    require (msg.sender == owner);\r\n    uint256 count = _owners.length;\r\n    for (uint256 i = 0; i < count; i++)\r\n      Transfer (address (0), _owners [i], VIRTUAL_COUNT);\r\n  }\r\n\r\n  function kill () {\r\n    require (msg.sender == owner);\r\n    selfdestruct (owner);\r\n  }\r\n\r\n  function virtualBalanceOf (address _owner)\r\n  internal constant returns (uint256 _virtualBalance) {\r\n    return _owner.balance >= VIRTUAL_THRESHOLD ? VIRTUAL_COUNT : 0;\r\n  }\r\n\r\n  address private owner;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FoshaAirdrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://afef7ea2e5fce4ec459f17a4579c92878b7f7e1dc9fda51f3a7ec82fa21c93ba"}]}