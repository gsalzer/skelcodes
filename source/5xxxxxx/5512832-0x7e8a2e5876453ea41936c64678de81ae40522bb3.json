{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ERC721Token is ERC721 {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Burns a specific token\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(msg.sender, _tokenId);\r\n    }\r\n    removeToken(msg.sender, _tokenId);\r\n    Transfer(msg.sender, 0x0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AccessDeposit\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessDeposit is Claimable {\r\n\r\n  // Access for adding deposit.\r\n  mapping(address => bool) private depositAccess;\r\n\r\n  // Modifier for accessibility to add deposit.\r\n  modifier onlyAccessDeposit {\r\n    require(msg.sender == owner || depositAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to deposit heroes.\r\n  function grantAccessDeposit(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    depositAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to deposit heroes.\r\n  function revokeAccessDeposit(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    depositAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AccessDeploy\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessDeploy is Claimable {\r\n\r\n  // Access for deploying heroes.\r\n  mapping(address => bool) private deployAccess;\r\n\r\n  // Modifier for accessibility to deploy a hero on a location.\r\n  modifier onlyAccessDeploy {\r\n    require(msg.sender == owner || deployAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to deploy heroes.\r\n  function grantAccessDeploy(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    deployAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to deploy heroes.\r\n  function revokeAccessDeploy(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    deployAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title AccessMint\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessMint is Claimable {\r\n\r\n  // Access for minting new tokens.\r\n  mapping(address => bool) private mintAccess;\r\n\r\n  // Modifier for accessibility to define new hero types.\r\n  modifier onlyAccessMint {\r\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to mint heroes.\r\n  function grantAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to mint heroes.\r\n  function revokeAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Gold\r\n * @dev ERC20 Token that can be minted.\r\n */\r\ncontract Gold is StandardToken, Claimable, AccessMint {\r\n\r\n  string public constant name = \"Gold\";\r\n  string public constant symbol = \"G\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // Event that is fired when minted.\r\n  event Mint(\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  // @dev Mint tokens with _amount to the address.\r\n  function mint(address _to, uint256 _amount) \r\n    onlyAccessMint\r\n    public \r\n    returns (bool) \r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSaga Card\r\n * @dev ERC721 Token that repesents CryptoSaga's cards.\r\n *  Buy consuming a card, players of CryptoSaga can get a heroe.\r\n */\r\ncontract CryptoSagaCard is ERC721Token, Claimable, AccessMint {\r\n\r\n  string public constant name = \"CryptoSaga Card\";\r\n  string public constant symbol = \"CARD\";\r\n\r\n  // Rank of the token.\r\n  mapping(uint256 => uint8) public tokenIdToRank;\r\n\r\n  // The number of tokens ever minted.\r\n  uint256 public numberOfTokenId;\r\n\r\n  // The converter contract.\r\n  CryptoSagaCardSwap private swapContract;\r\n\r\n  // Event that should be fired when card is converted.\r\n  event CardSwap(address indexed _by, uint256 _tokenId, uint256 _rewardId);\r\n\r\n  // @dev Set the address of the contract that represents CryptoSaga Cards.\r\n  function setCryptoSagaCardSwapContract(address _contractAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    swapContract = CryptoSagaCardSwap(_contractAddress);\r\n  }\r\n\r\n  function rankOf(uint256 _tokenId) \r\n    public view\r\n    returns (uint8)\r\n  {\r\n    return tokenIdToRank[_tokenId];\r\n  }\r\n\r\n  // @dev Mint a new card.\r\n  function mint(address _beneficiary, uint256 _amount, uint8 _rank)\r\n    onlyAccessMint\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _amount; i++) {\r\n      _mint(_beneficiary, numberOfTokenId);\r\n      tokenIdToRank[numberOfTokenId] = _rank;\r\n      numberOfTokenId ++;\r\n    }\r\n  }\r\n\r\n  // @dev Swap this card for reward.\r\n  //  The card will be burnt.\r\n  function swap(uint256 _tokenId)\r\n    onlyOwnerOf(_tokenId)\r\n    public\r\n    returns (uint256)\r\n  {\r\n    require(address(swapContract) != address(0));\r\n\r\n    var _rank = tokenIdToRank[_tokenId];\r\n    var _rewardId = swapContract.swapCardForReward(this, _rank);\r\n    CardSwap(ownerOf(_tokenId), _tokenId, _rewardId);\r\n    _burn(_tokenId);\r\n    return _rewardId;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title The interface contract for Card-For-Hero swap functionality.\r\n * @dev With this contract, a card holder can swap his/her CryptoSagaCard for reward.\r\n *  This contract is intended to be inherited by CryptoSagaCardSwap implementation contracts.\r\n */\r\ncontract CryptoSagaCardSwap is Ownable {\r\n\r\n  // Card contract.\r\n  address internal cardAddess;\r\n\r\n  // Modifier for accessibility to define new hero types.\r\n  modifier onlyCard {\r\n    require(msg.sender == cardAddess);\r\n    _;\r\n  }\r\n  \r\n  // @dev Set the address of the contract that represents ERC721 Card.\r\n  function setCardContract(address _contractAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    cardAddess = _contractAddress;\r\n  }\r\n\r\n  // @dev Convert card into reward.\r\n  //  This should be implemented by CryptoSagaCore later.\r\n  function swapCardForReward(address _by, uint8 _rank)\r\n    onlyCard\r\n    public \r\n    returns (uint256);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaHero\r\n * @dev The token contract for the hero.\r\n *  Also a superset of the ERC721 standard that allows for the minting\r\n *  of the non-fungible tokens.\r\n */\r\ncontract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit {\r\n\r\n  string public constant name = \"CryptoSaga Hero\";\r\n  string public constant symbol = \"HERO\";\r\n  \r\n  struct HeroClass {\r\n    // ex) Soldier, Knight, Fighter...\r\n    string className;\r\n    // 0: Common, 1: Uncommon, 2: Rare, 3: Heroic, 4: Legendary.\r\n    uint8 classRank;\r\n    // 0: Human, 1: Celestial, 2: Demon, 3: Elf, 4: Dark Elf, 5: Yogoe, 6: Furry, 7: Dragonborn, 8: Undead, 9: Goblin, 10: Troll, 11: Slime, and more to come.\r\n    uint8 classRace;\r\n    // How old is this hero class? \r\n    uint32 classAge;\r\n    // 0: Fighter, 1: Rogue, 2: Mage.\r\n    uint8 classType;\r\n\r\n    // Possible max level of this class.\r\n    uint32 maxLevel; \r\n    // 0: Water, 1: Fire, 2: Nature, 3: Light, 4: Darkness.\r\n    uint8 aura; \r\n\r\n    // Base stats of this hero type. \r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] baseStats;\r\n    // Minimum IVs for stats. \r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] minIVForStats;\r\n    // Maximum IVs for stats.\r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] maxIVForStats;\r\n    \r\n    // Number of currently instanced heroes.\r\n    uint32 currentNumberOfInstancedHeroes;\r\n  }\r\n    \r\n  struct HeroInstance {\r\n    // What is this hero's type? ex) John, Sally, Mark...\r\n    uint32 heroClassId;\r\n    \r\n    // Individual hero's name.\r\n    string heroName;\r\n    \r\n    // Current level of this hero.\r\n    uint32 currentLevel;\r\n    // Current exp of this hero.\r\n    uint32 currentExp;\r\n\r\n    // Where has this hero been deployed? (0: Never depolyed ever.) ex) Dungeon Floor #1, Arena #5...\r\n    uint32 lastLocationId;\r\n    // When a hero is deployed, it takes time for the hero to return to the base. This is in Unix epoch.\r\n    uint256 availableAt;\r\n\r\n    // Current stats of this hero. \r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] currentStats;\r\n    // The individual value for this hero's stats. \r\n    // This will affect the current stats of heroes.\r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] ivForStats;\r\n  }\r\n\r\n  // Required exp for level up will increase when heroes level up.\r\n  // This defines how the value will increase.\r\n  uint32 public requiredExpIncreaseFactor = 100;\r\n\r\n  // Required Gold for level up will increase when heroes level up.\r\n  // This defines how the value will increase.\r\n  uint256 public requiredGoldIncreaseFactor = 1000000000000000000;\r\n\r\n  // Existing hero classes.\r\n  mapping(uint32 => HeroClass) public heroClasses;\r\n  // The number of hero classes ever defined.\r\n  uint32 public numberOfHeroClasses;\r\n\r\n  // Existing hero instances.\r\n  // The key is _tokenId.\r\n  mapping(uint256 => HeroInstance) public tokenIdToHeroInstance;\r\n  // The number of tokens ever minted. This works as the serial number.\r\n  uint256 public numberOfTokenIds;\r\n\r\n  // Gold contract.\r\n  Gold public goldContract;\r\n\r\n  // Deposit of players (in Gold).\r\n  mapping(address => uint256) public addressToGoldDeposit;\r\n\r\n  // Random seed.\r\n  uint32 private seed = 0;\r\n\r\n  // Event that is fired when a hero type defined.\r\n  event DefineType(\r\n    address indexed _by,\r\n    uint32 indexed _typeId,\r\n    string _className\r\n  );\r\n\r\n  // Event that is fired when a hero is upgraded.\r\n  event LevelUp(\r\n    address indexed _by,\r\n    uint256 indexed _tokenId,\r\n    uint32 _newLevel\r\n  );\r\n\r\n  // Event that is fired when a hero is deployed.\r\n  event Deploy(\r\n    address indexed _by,\r\n    uint256 indexed _tokenId,\r\n    uint32 _locationId,\r\n    uint256 _duration\r\n  );\r\n\r\n  // @dev Get the class's entire infomation.\r\n  function getClassInfo(uint32 _classId)\r\n    external view\r\n    returns (string className, uint8 classRank, uint8 classRace, uint32 classAge, uint8 classType, uint32 maxLevel, uint8 aura, uint32[5] baseStats, uint32[5] minIVs, uint32[5] maxIVs) \r\n  {\r\n    var _cl = heroClasses[_classId];\r\n    return (_cl.className, _cl.classRank, _cl.classRace, _cl.classAge, _cl.classType, _cl.maxLevel, _cl.aura, _cl.baseStats, _cl.minIVForStats, _cl.maxIVForStats);\r\n  }\r\n\r\n  // @dev Get the class's name.\r\n  function getClassName(uint32 _classId)\r\n    external view\r\n    returns (string)\r\n  {\r\n    return heroClasses[_classId].className;\r\n  }\r\n\r\n  // @dev Get the class's rank.\r\n  function getClassRank(uint32 _classId)\r\n    external view\r\n    returns (uint8)\r\n  {\r\n    return heroClasses[_classId].classRank;\r\n  }\r\n\r\n  // @dev Get the heroes ever minted for the class.\r\n  function getClassMintCount(uint32 _classId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return heroClasses[_classId].currentNumberOfInstancedHeroes;\r\n  }\r\n\r\n  // @dev Get the hero's entire infomation.\r\n  function getHeroInfo(uint256 _tokenId)\r\n    external view\r\n    returns (uint32 classId, string heroName, uint32 currentLevel, uint32 currentExp, uint32 lastLocationId, uint256 availableAt, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\r\n  {\r\n    HeroInstance memory _h = tokenIdToHeroInstance[_tokenId];\r\n    var _bp = _h.currentStats[0] + _h.currentStats[1] + _h.currentStats[2] + _h.currentStats[3] + _h.currentStats[4];\r\n    return (_h.heroClassId, _h.heroName, _h.currentLevel, _h.currentExp, _h.lastLocationId, _h.availableAt, _h.currentStats, _h.ivForStats, _bp);\r\n  }\r\n\r\n  // @dev Get the hero's class id.\r\n  function getHeroClassId(uint256 _tokenId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].heroClassId;\r\n  }\r\n\r\n  // @dev Get the hero's name.\r\n  function getHeroName(uint256 _tokenId)\r\n    external view\r\n    returns (string)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].heroName;\r\n  }\r\n\r\n  // @dev Get the hero's level.\r\n  function getHeroLevel(uint256 _tokenId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].currentLevel;\r\n  }\r\n  \r\n  // @dev Get the hero's location.\r\n  function getHeroLocation(uint256 _tokenId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].lastLocationId;\r\n  }\r\n\r\n  // @dev Get the time when the hero become available.\r\n  function getHeroAvailableAt(uint256 _tokenId)\r\n    external view\r\n    returns (uint256)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].availableAt;\r\n  }\r\n\r\n  // @dev Get the hero's BP.\r\n  function getHeroBP(uint256 _tokenId)\r\n    public view\r\n    returns (uint32)\r\n  {\r\n    var _tmp = tokenIdToHeroInstance[_tokenId].currentStats;\r\n    return (_tmp[0] + _tmp[1] + _tmp[2] + _tmp[3] + _tmp[4]);\r\n  }\r\n\r\n  // @dev Get the hero's required gold for level up.\r\n  function getHeroRequiredGoldForLevelUp(uint256 _tokenId)\r\n    public view\r\n    returns (uint256)\r\n  {\r\n    return (uint256(2) ** (tokenIdToHeroInstance[_tokenId].currentLevel / 10)) * requiredGoldIncreaseFactor;\r\n  }\r\n\r\n  // @dev Get the hero's required exp for level up.\r\n  function getHeroRequiredExpForLevelUp(uint256 _tokenId)\r\n    public view\r\n    returns (uint32)\r\n  {\r\n    return ((tokenIdToHeroInstance[_tokenId].currentLevel + 2) * requiredExpIncreaseFactor);\r\n  }\r\n\r\n  // @dev Get the deposit of gold of the player.\r\n  function getGoldDepositOfAddress(address _address)\r\n    external view\r\n    returns (uint256)\r\n  {\r\n    return addressToGoldDeposit[_address];\r\n  }\r\n\r\n  // @dev Get the token id of the player's #th token.\r\n  function getTokenIdOfAddressAndIndex(address _address, uint256 _index)\r\n    external view\r\n    returns (uint256)\r\n  {\r\n    return tokensOf(_address)[_index];\r\n  }\r\n\r\n  // @dev Get the total BP of the player.\r\n  function getTotalBPOfAddress(address _address)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    var _tokens = tokensOf(_address);\r\n    uint32 _totalBP = 0;\r\n    for (uint256 i = 0; i < _tokens.length; i ++) {\r\n      _totalBP += getHeroBP(_tokens[i]);\r\n    }\r\n    return _totalBP;\r\n  }\r\n\r\n  // @dev Set the hero's name.\r\n  function setHeroName(uint256 _tokenId, string _name)\r\n    onlyOwnerOf(_tokenId)\r\n    public\r\n  {\r\n    tokenIdToHeroInstance[_tokenId].heroName = _name;\r\n  }\r\n\r\n  // @dev Set the address of the contract that represents ERC20 Gold.\r\n  function setGoldContract(address _contractAddress)\r\n    onlyOwner\r\n    public\r\n  {\r\n    goldContract = Gold(_contractAddress);\r\n  }\r\n\r\n  // @dev Set the required golds to level up a hero.\r\n  function setRequiredExpIncreaseFactor(uint32 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    requiredExpIncreaseFactor = _value;\r\n  }\r\n\r\n  // @dev Set the required golds to level up a hero.\r\n  function setRequiredGoldIncreaseFactor(uint256 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    requiredGoldIncreaseFactor = _value;\r\n  }\r\n\r\n  // @dev Contructor.\r\n  function CryptoSagaHero(address _goldAddress)\r\n    public\r\n  {\r\n    require(_goldAddress != address(0));\r\n\r\n    // Assign Gold contract.\r\n    setGoldContract(_goldAddress);\r\n\r\n    // Initial heroes.\r\n    // Name, Rank, Race, Age, Type, Max Level, Aura, Stats.\r\n    defineType(\"Archangel\", 4, 1, 13540, 0, 99, 3, [uint32(74), 75, 57, 99, 95], [uint32(8), 6, 8, 5, 5], [uint32(8), 10, 10, 6, 6]);\r\n    defineType(\"Shadowalker\", 3, 4, 134, 1, 75, 4, [uint32(45), 35, 60, 80, 40], [uint32(3), 2, 10, 4, 5], [uint32(5), 5, 10, 7, 5]);\r\n    defineType(\"Pyromancer\", 2, 0, 14, 2, 50, 1, [uint32(50), 28, 17, 40, 35], [uint32(5), 3, 2, 3, 3], [uint32(8), 4, 3, 4, 5]);\r\n    defineType(\"Magician\", 1, 3, 224, 2, 30, 0, [uint32(35), 15, 25, 25, 30], [uint32(3), 1, 2, 2, 2], [uint32(5), 2, 3, 3, 3]);\r\n    defineType(\"Farmer\", 0, 0, 59, 0, 15, 2, [uint32(10), 22, 8, 15, 25], [uint32(1), 2, 1, 1, 2], [uint32(1), 3, 1, 2, 3]);\r\n  }\r\n\r\n  // @dev Define a new hero type (class).\r\n  function defineType(string _className, uint8 _classRank, uint8 _classRace, uint32 _classAge, uint8 _classType, uint32 _maxLevel, uint8 _aura, uint32[5] _baseStats, uint32[5] _minIVForStats, uint32[5] _maxIVForStats)\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_classRank < 5);\r\n    require(_classType < 3);\r\n    require(_aura < 5);\r\n    require(_minIVForStats[0] <= _maxIVForStats[0] && _minIVForStats[1] <= _maxIVForStats[1] && _minIVForStats[2] <= _maxIVForStats[2] && _minIVForStats[3] <= _maxIVForStats[3] && _minIVForStats[4] <= _maxIVForStats[4]);\r\n\r\n    HeroClass memory _heroType = HeroClass({\r\n      className: _className,\r\n      classRank: _classRank,\r\n      classRace: _classRace,\r\n      classAge: _classAge,\r\n      classType: _classType,\r\n      maxLevel: _maxLevel,\r\n      aura: _aura,\r\n      baseStats: _baseStats,\r\n      minIVForStats: _minIVForStats,\r\n      maxIVForStats: _maxIVForStats,\r\n      currentNumberOfInstancedHeroes: 0\r\n    });\r\n\r\n    // Save the hero class.\r\n    heroClasses[numberOfHeroClasses] = _heroType;\r\n\r\n    // Fire event.\r\n    DefineType(msg.sender, numberOfHeroClasses, _heroType.className);\r\n\r\n    // Increment number of hero classes.\r\n    numberOfHeroClasses ++;\r\n\r\n  }\r\n\r\n  // @dev Mint a new hero, with _heroClassId.\r\n  function mint(address _owner, uint32 _heroClassId)\r\n    onlyAccessMint\r\n    public\r\n    returns (uint256)\r\n  {\r\n    require(_owner != address(0));\r\n    require(_heroClassId < numberOfHeroClasses);\r\n\r\n    // The information of the hero's class.\r\n    var _heroClassInfo = heroClasses[_heroClassId];\r\n\r\n    // Mint ERC721 token.\r\n    _mint(_owner, numberOfTokenIds);\r\n\r\n    // Build random IVs for this hero instance.\r\n    uint32[5] memory _ivForStats;\r\n    uint32[5] memory _initialStats;\r\n    for (uint8 i = 0; i < 5; i++) {\r\n      _ivForStats[i] = (random(_heroClassInfo.maxIVForStats[i] + 1, _heroClassInfo.minIVForStats[i]));\r\n      _initialStats[i] = _heroClassInfo.baseStats[i] + _ivForStats[i];\r\n    }\r\n\r\n    // Temporary hero instance.\r\n    HeroInstance memory _heroInstance = HeroInstance({\r\n      heroClassId: _heroClassId,\r\n      heroName: \"\",\r\n      currentLevel: 1,\r\n      currentExp: 0,\r\n      lastLocationId: 0,\r\n      availableAt: now,\r\n      currentStats: _initialStats,\r\n      ivForStats: _ivForStats\r\n    });\r\n\r\n    // Save the hero instance.\r\n    tokenIdToHeroInstance[numberOfTokenIds] = _heroInstance;\r\n\r\n    // Increment number of token ids.\r\n    // This will only increment when new token is minted, and will never be decemented when the token is burned.\r\n    numberOfTokenIds ++;\r\n\r\n     // Increment instanced number of heroes.\r\n    _heroClassInfo.currentNumberOfInstancedHeroes ++;\r\n\r\n    return numberOfTokenIds - 1;\r\n  }\r\n\r\n  // @dev Set where the heroes are deployed, and when they will return.\r\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\r\n  function deploy(uint256 _tokenId, uint32 _locationId, uint256 _duration)\r\n    onlyAccessDeploy\r\n    public\r\n    returns (bool)\r\n  {\r\n    // The hero should be possessed by anybody.\r\n    require(ownerOf(_tokenId) != address(0));\r\n\r\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\r\n\r\n    // The character should be avaiable. \r\n    require(_heroInstance.availableAt <= now);\r\n\r\n    _heroInstance.lastLocationId = _locationId;\r\n    _heroInstance.availableAt = now + _duration;\r\n\r\n    // As the hero has been deployed to another place, fire event.\r\n    Deploy(msg.sender, _tokenId, _locationId, _duration);\r\n  }\r\n\r\n  // @dev Add exp.\r\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\r\n  function addExp(uint256 _tokenId, uint32 _exp)\r\n    onlyAccessDeploy\r\n    public\r\n    returns (bool)\r\n  {\r\n    // The hero should be possessed by anybody.\r\n    require(ownerOf(_tokenId) != address(0));\r\n\r\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\r\n\r\n    var _newExp = _heroInstance.currentExp + _exp;\r\n\r\n    // Sanity check to ensure we don't overflow.\r\n    require(_newExp == uint256(uint128(_newExp)));\r\n\r\n    _heroInstance.currentExp += _newExp;\r\n\r\n  }\r\n\r\n  // @dev Add deposit.\r\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\r\n  function addDeposit(address _to, uint256 _amount)\r\n    onlyAccessDeposit\r\n    public\r\n  {\r\n    // Increment deposit.\r\n    addressToGoldDeposit[_to] += _amount;\r\n  }\r\n\r\n  // @dev Level up the hero with _tokenId.\r\n  //  This function is called by the owner of the hero.\r\n  function levelUp(uint256 _tokenId)\r\n    onlyOwnerOf(_tokenId) whenNotPaused\r\n    public\r\n  {\r\n\r\n    // Hero instance.\r\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\r\n\r\n    // The character should be avaiable. (Should have already returned from the dungeons, arenas, etc.)\r\n    require(_heroInstance.availableAt <= now);\r\n\r\n    // The information of the hero's class.\r\n    var _heroClassInfo = heroClasses[_heroInstance.heroClassId];\r\n\r\n    // Hero shouldn't level up exceed its max level.\r\n    require(_heroInstance.currentLevel < _heroClassInfo.maxLevel);\r\n\r\n    // Required Exp.\r\n    var requiredExp = getHeroRequiredExpForLevelUp(_tokenId);\r\n\r\n    // Need to have enough exp.\r\n    require(_heroInstance.currentExp >= requiredExp);\r\n\r\n    // Required Gold.\r\n    var requiredGold = getHeroRequiredGoldForLevelUp(_tokenId);\r\n\r\n    // Owner of token.\r\n    var _ownerOfToken = ownerOf(_tokenId);\r\n\r\n    // Need to have enough Gold balance.\r\n    require(addressToGoldDeposit[_ownerOfToken] >= requiredGold);\r\n\r\n    // Increase Level.\r\n    _heroInstance.currentLevel += 1;\r\n\r\n    // Increase Stats.\r\n    for (uint8 i = 0; i < 5; i++) {\r\n      _heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i];\r\n    }\r\n    \r\n    // Deduct exp.\r\n    _heroInstance.currentExp -= requiredExp;\r\n\r\n    // Deduct gold.\r\n    addressToGoldDeposit[_ownerOfToken] -= requiredGold;\r\n\r\n    // Fire event.\r\n    LevelUp(msg.sender, _tokenId, _heroInstance.currentLevel);\r\n  }\r\n\r\n  // @dev Transfer deposit (with the allowance pattern.)\r\n  function transferDeposit(uint256 _amount)\r\n    whenNotPaused\r\n    public\r\n  {\r\n    require(goldContract.allowance(msg.sender, this) >= _amount);\r\n\r\n    // Send msg.sender's Gold to this contract.\r\n    if (goldContract.transferFrom(msg.sender, this, _amount)) {\r\n       // Increment deposit.\r\n      addressToGoldDeposit[msg.sender] += _amount;\r\n    }\r\n  }\r\n\r\n  // @dev Withdraw deposit.\r\n  function withdrawDeposit(uint256 _amount)\r\n    public\r\n  {\r\n    require(addressToGoldDeposit[msg.sender] >= _amount);\r\n\r\n    // Send deposit of Golds to msg.sender. (Rather minting...)\r\n    if (goldContract.transfer(msg.sender, _amount)) {\r\n      // Decrement deposit.\r\n      addressToGoldDeposit[msg.sender] -= _amount;\r\n    }\r\n  }\r\n\r\n  // @dev return a pseudo random number between lower and upper bounds\r\n  function random(uint32 _upper, uint32 _lower)\r\n    private\r\n    returns (uint32)\r\n  {\r\n    require(_upper > _lower);\r\n\r\n    seed = uint32(keccak256(keccak256(block.blockhash(block.number), seed), now));\r\n    return seed % (_upper - _lower) + _lower;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaCorrectedHeroStats\r\n * @dev Corrected hero stats is needed to fix the bug in hero stats.\r\n */\r\ncontract CryptoSagaCorrectedHeroStats {\r\n\r\n  // The hero contract.\r\n  CryptoSagaHero private heroContract;\r\n\r\n  // @dev Constructor.\r\n  function CryptoSagaCorrectedHeroStats(address _heroContractAddress)\r\n    public\r\n  {\r\n    heroContract = CryptoSagaHero(_heroContractAddress);\r\n  }\r\n\r\n  // @dev Get the hero's stats and some other infomation.\r\n  function getCorrectedStats(uint256 _tokenId)\r\n    external view\r\n    returns (uint32 currentLevel, uint32 currentExp, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\r\n  {\r\n    var (, , _currentLevel, _currentExp, , , _currentStats, _ivs, ) = heroContract.getHeroInfo(_tokenId);\r\n    \r\n    if (_currentLevel != 1) {\r\n      for (uint8 i = 0; i < 5; i ++) {\r\n        _currentStats[i] += _ivs[i];\r\n      }\r\n    }\r\n\r\n    var _bp = _currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4];\r\n    return (_currentLevel, _currentExp, _currentStats, _ivs, _bp);\r\n  }\r\n\r\n  // @dev Get corrected total BP of the address.\r\n  function getCorrectedTotalBPOfAddress(address _address)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    var _balance = heroContract.balanceOf(_address);\r\n\r\n    uint32 _totalBP = 0;\r\n\r\n    for (uint256 i = 0; i < _balance; i ++) {\r\n      var (, , _currentLevel, , , , _currentStats, _ivs, ) = heroContract.getHeroInfo(heroContract.getTokenIdOfAddressAndIndex(_address, i));\r\n      if (_currentLevel != 1) {\r\n        for (uint8 j = 0; j < 5; j ++) {\r\n          _currentStats[j] += _ivs[j];\r\n        }\r\n      }\r\n      _totalBP += (_currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4]);\r\n    }\r\n\r\n    return _totalBP;\r\n  }\r\n\r\n  // @dev Get corrected total BP of the address.\r\n  function getCorrectedTotalBPOfTokens(uint256[] _tokens)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    uint32 _totalBP = 0;\r\n\r\n    for (uint256 i = 0; i < _tokens.length; i ++) {\r\n      var (, , _currentLevel, , , , _currentStats, _ivs, ) = heroContract.getHeroInfo(_tokens[i]);\r\n      if (_currentLevel != 1) {\r\n        for (uint8 j = 0; j < 5; j ++) {\r\n          _currentStats[j] += _ivs[j];\r\n        }\r\n      }\r\n      _totalBP += (_currentStats[0] + _currentStats[1] + _currentStats[2] + _currentStats[3] + _currentStats[4]);\r\n    }\r\n\r\n    return _totalBP;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaDungeonProgress\r\n * @dev Storage contract for progress of dungeons.\r\n */\r\ncontract CryptoSagaDungeonProgress is Claimable, AccessDeploy {\r\n\r\n  // The progress of the player in dungeons.\r\n  mapping(address => uint32[25]) public addressToProgress;\r\n\r\n  // @dev Get progress.\r\n  function getProgressOfAddressAndId(address _address, uint32 _id)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    var _progressList = addressToProgress[_address];\r\n    return _progressList[_id];\r\n  }\r\n\r\n  // @dev Increment progress.\r\n  function incrementProgressOfAddressAndId(address _address, uint32 _id)\r\n    onlyAccessDeploy\r\n    public\r\n  {\r\n    var _progressList = addressToProgress[_address];\r\n    _progressList[_id]++;\r\n    addressToProgress[_address] = _progressList;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaDungeonVer1\r\n * @dev The actual gameplay is done by this contract. Version 1.0.1.\r\n */\r\ncontract CryptoSagaDungeonVer1 is Claimable, Pausable {\r\n\r\n  struct EnemyCombination {\r\n    // Is non-default combintion?\r\n    bool isPersonalized;\r\n    // Enemy slots' class Id.\r\n    uint32[4] enemySlotClassIds;\r\n  }\r\n\r\n  struct PlayRecord {\r\n    // This is needed for reconstructing the record.\r\n    uint32 initialSeed;\r\n    // The progress of the dugoeon when this play record made.\r\n    uint32 progress;\r\n    // Hero's token ids.\r\n    uint256[4] tokenIds;\r\n    // Unit's class ids. 0 ~ 3: Heroes. 4 ~ 7: Mobs.\r\n    uint32[8] unitClassIds;\r\n    // Unit's levels. 0 ~ 3: Heroes. 4 ~ 7: Mobs.\r\n    uint32[8] unitLevels;\r\n    // Exp reward given.\r\n    uint32 expReward;\r\n    // Gold Reward given.\r\n    uint256 goldReward;\r\n  }\r\n\r\n  // This information can be reconstructed with seed and dateTime.\r\n  // In order for the optimization this won't be really used.\r\n  struct TurnInfo {\r\n    // Number of turns before a team was vanquished.\r\n    uint8 turnLength;\r\n    // Turn order of units.\r\n    uint8[8] turnOrder;\r\n    // Defender list. (The unit that is attacked.)\r\n    uint8[24] defenderList;\r\n    // Damage list. (The damage given to the defender.)\r\n    uint32[24] damageList;\r\n    // Heroes' original Exps.\r\n    uint32[4] originalExps;\r\n  }\r\n\r\n  // Progress contract.\r\n  CryptoSagaDungeonProgress private progressContract;\r\n\r\n  // The hero contract.\r\n  CryptoSagaHero private heroContract;\r\n\r\n  // Corrected hero stats contract.\r\n  CryptoSagaCorrectedHeroStats private correctedHeroContract;\r\n\r\n  // Gold contract.\r\n  Gold public goldContract;\r\n\r\n  // Card contract.\r\n  CryptoSagaCard public cardContract;\r\n\r\n  // The location Id of this contract.\r\n  // Will be used when calling deploy function of hero contract.\r\n  uint32 public locationId = 0;\r\n\r\n  // The dungeon cooldown time. (Default value: 15 mins.)\r\n  uint256 public coolDungeon = 900;\r\n\r\n  // Hero cooldown time. (Default value: 60 mins.)\r\n  uint256 public coolHero = 3600;\r\n\r\n  // The exp reward when clearing this dungeon.\r\n  uint32 public expReward = 100;\r\n\r\n  // The Gold reward when clearing this dungeon.\r\n  uint256 public goldReward = 1000000000000000000;\r\n\r\n  // The previous dungeon that should be cleared.\r\n  uint32 public previousDungeonId;\r\n\r\n  // The progress of the previous dungeon that should be cleared.\r\n  uint32 public requiredProgressOfPreviousDungeon;\r\n\r\n  // Turn data save.\r\n  bool public isTurnDataSaved = true;\r\n\r\n  // The enemies in this dungeon for the player.\r\n  mapping(address => EnemyCombination) public addressToEnemyCombination;\r\n\r\n  // Last game's play datetime.\r\n  mapping(address => uint256) public addressToPlayRecordDateTime;\r\n\r\n  // Last game's record of the player.\r\n  mapping(address => PlayRecord) public addressToPlayRecord;\r\n\r\n  // Additional information on last game's record of the player.\r\n  mapping(address => TurnInfo) public addressToTurnInfo;\r\n\r\n  // List of the Mobs possibly appear in this dungeon.\r\n  uint32[] public possibleMobClasses;\r\n\r\n  // Initial enemy combination.\r\n  // This will be shown when there's no play record.\r\n  EnemyCombination public initialEnemyCombination;\r\n\r\n  // Random seed.\r\n  uint32 private seed = 0;\r\n\r\n  // Event that is fired when a player try to clear this dungeon.\r\n  event TryDungeon(\r\n    address indexed _by,\r\n    uint32 _tryingProgress,\r\n    uint32 _progress,\r\n    bool _isSuccess\r\n  );\r\n\r\n  // @dev Get enemy combination.\r\n  function getEnemyCombinationOfAddress(address _address)\r\n    external view\r\n    returns (uint32[4])\r\n  {\r\n    // Retrieve enemy information.\r\n    // Instead of null check, isPersonalized check will tell the personalized mobs for this player exist.\r\n    var _enemyCombination = addressToEnemyCombination[_address];\r\n    if (_enemyCombination.isPersonalized == false) {\r\n      // Then let's use default value.\r\n      _enemyCombination = initialEnemyCombination;\r\n    }\r\n    return _enemyCombination.enemySlotClassIds;\r\n  }\r\n\r\n  // @dev Get initial enemy combination.\r\n  function getInitialEnemyCombination()\r\n    external view\r\n    returns (uint32[4])\r\n  {\r\n    return initialEnemyCombination.enemySlotClassIds;\r\n  }\r\n\r\n  // @dev Get play record's datetime.\r\n  function getLastPlayDateTime(address _address)\r\n    external view\r\n    returns (uint256 dateTime)\r\n  {\r\n    return addressToPlayRecordDateTime[_address];\r\n  }\r\n\r\n  // @dev Get previous game record.\r\n  function getPlayRecord(address _address)\r\n    external view\r\n    returns (uint32 initialSeed, uint32 progress, uint256[4] heroTokenIds, uint32[8] uintClassIds, uint32[8] unitLevels, uint32 expRewardGiven, uint256 goldRewardGiven, uint8 turnLength, uint8[8] turnOrder, uint8[24] defenderList, uint32[24] damageList)\r\n  {\r\n    PlayRecord memory _p = addressToPlayRecord[_address];\r\n    TurnInfo memory _t = addressToTurnInfo[_address];\r\n    return (_p.initialSeed, _p.progress, _p.tokenIds, _p.unitClassIds, _p.unitLevels, _p.expReward, _p.goldReward, _t.turnLength, _t.turnOrder, _t.defenderList, _t.damageList);\r\n  }\r\n\r\n  // @dev Get previous game record.\r\n  function getPlayRecordNoTurnData(address _address)\r\n    external view\r\n    returns (uint32 initialSeed, uint32 progress, uint256[4] heroTokenIds, uint32[8] uintClassIds, uint32[8] unitLevels, uint32 expRewardGiven, uint256 goldRewardGiven)\r\n  {\r\n    PlayRecord memory _p = addressToPlayRecord[_address];\r\n    return (_p.initialSeed, _p.progress, _p.tokenIds, _p.unitClassIds, _p.unitLevels, _p.expReward, _p.goldReward);\r\n  }\r\n\r\n  // @dev Set location id.\r\n  function setLocationId(uint32 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    locationId = _value;\r\n  }\r\n\r\n  // @dev Set cooldown of this dungeon.\r\n  function setCoolDungeon(uint32 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    coolDungeon = _value;\r\n  }\r\n\r\n  // @dev Set cooldown of heroes entered this dungeon.\r\n  function setCoolHero(uint32 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    coolHero = _value;\r\n  }\r\n\r\n  // @dev Set the Exp given to the player when clearing this dungeon.\r\n  function setExpReward(uint32 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    expReward = _value;\r\n  }\r\n\r\n  // @dev Set the Golds given to the player when clearing this dungeon.\r\n  function setGoldReward(uint256 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    goldReward = _value;\r\n  }\r\n\r\n  // @dev Set wether the turn data saved or not.\r\n  function setIsTurnDataSaved(bool _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    isTurnDataSaved = _value;\r\n  }\r\n\r\n  // @dev Set initial enemy combination.\r\n  function setInitialEnemyCombination(uint32[4] _enemySlotClassIds)\r\n    onlyOwner\r\n    public\r\n  {\r\n    initialEnemyCombination.isPersonalized = false;\r\n    initialEnemyCombination.enemySlotClassIds = _enemySlotClassIds;\r\n  }\r\n\r\n  // @dev Set previous dungeon.\r\n  function setPreviousDungeoonId(uint32 _dungeonId)\r\n    onlyOwner\r\n    public\r\n  {\r\n    previousDungeonId = _dungeonId;\r\n  }\r\n\r\n  // @dev Set required progress of previous dungeon.\r\n  function setRequiredProgressOfPreviousDungeon(uint32 _progress)\r\n    onlyOwner\r\n    public\r\n  {\r\n    requiredProgressOfPreviousDungeon = _progress;\r\n  }\r\n\r\n  // @dev Set possible mobs in this dungeon.\r\n  function setPossibleMobs(uint32[] _classIds)\r\n    onlyOwner\r\n    public\r\n  {\r\n    possibleMobClasses = _classIds;\r\n  }\r\n\r\n  // @dev Constructor.\r\n  function CryptoSagaDungeonVer1(address _progressAddress, address _heroContractAddress, address _correctedHeroContractAddress, address _cardContractAddress, address _goldContractAddress, uint32 _locationId, uint256 _coolDungeon, uint256 _coolHero, uint32 _expReward, uint256 _goldReward, uint32 _previousDungeonId, uint32 _requiredProgressOfPreviousDungeon, uint32[4] _enemySlotClassIds, bool _isTurnDataSaved)\r\n    public\r\n  {\r\n    progressContract = CryptoSagaDungeonProgress(_progressAddress);\r\n    heroContract = CryptoSagaHero(_heroContractAddress);\r\n    correctedHeroContract = CryptoSagaCorrectedHeroStats(_correctedHeroContractAddress);\r\n    cardContract = CryptoSagaCard(_cardContractAddress);\r\n    goldContract = Gold(_goldContractAddress);\r\n    \r\n    locationId = _locationId;\r\n    coolDungeon = _coolDungeon;\r\n    coolHero = _coolHero;\r\n    expReward = _expReward;\r\n    goldReward = _goldReward;\r\n\r\n    previousDungeonId = _previousDungeonId;\r\n    requiredProgressOfPreviousDungeon = _requiredProgressOfPreviousDungeon;\r\n\r\n    initialEnemyCombination.isPersonalized = false;\r\n    initialEnemyCombination.enemySlotClassIds = _enemySlotClassIds;\r\n    \r\n    isTurnDataSaved = _isTurnDataSaved;\r\n  }\r\n  \r\n  // @dev Enter this dungeon.\r\n  function enterDungeon(uint256[4] _tokenIds, uint32 _tryingProgress)\r\n    whenNotPaused\r\n    public\r\n  {\r\n    // Each hero should be different ids.\r\n    require(_tokenIds[0] == 0 || (_tokenIds[0] != _tokenIds[1] && _tokenIds[0] != _tokenIds[2] && _tokenIds[0] != _tokenIds[3]));\r\n    require(_tokenIds[1] == 0 || (_tokenIds[1] != _tokenIds[0] && _tokenIds[1] != _tokenIds[2] && _tokenIds[1] != _tokenIds[3]));\r\n    require(_tokenIds[2] == 0 || (_tokenIds[2] != _tokenIds[0] && _tokenIds[2] != _tokenIds[1] && _tokenIds[2] != _tokenIds[3]));\r\n    require(_tokenIds[3] == 0 || (_tokenIds[3] != _tokenIds[0] && _tokenIds[3] != _tokenIds[1] && _tokenIds[3] != _tokenIds[2]));\r\n\r\n    // Check the previous dungeon's progress.\r\n    if (requiredProgressOfPreviousDungeon != 0) {\r\n      require(progressContract.getProgressOfAddressAndId(msg.sender, previousDungeonId) >= requiredProgressOfPreviousDungeon);\r\n    }\r\n\r\n    // 1 is the minimum prgress.\r\n    require(_tryingProgress > 0);\r\n\r\n    // Only up to 'progress + 1' is allowed.\r\n    require(_tryingProgress <= progressContract.getProgressOfAddressAndId(msg.sender, locationId) + 1);\r\n\r\n    // Check dungeon availability.\r\n    require(addressToPlayRecordDateTime[msg.sender] + coolDungeon <= now);\r\n\r\n    // Check ownership and availability check.\r\n    require(checkOwnershipAndAvailability(msg.sender, _tokenIds));\r\n\r\n    // Set play record datetime.\r\n    addressToPlayRecordDateTime[msg.sender] = now;\r\n\r\n    // Set seed.\r\n    seed += uint32(now);\r\n\r\n    // Define play record here.\r\n    PlayRecord memory _playRecord;\r\n    _playRecord.initialSeed = seed;\r\n    _playRecord.progress = _tryingProgress;\r\n    _playRecord.tokenIds[0] = _tokenIds[0];\r\n    _playRecord.tokenIds[1] = _tokenIds[1];\r\n    _playRecord.tokenIds[2] = _tokenIds[2];\r\n    _playRecord.tokenIds[3] = _tokenIds[3];\r\n\r\n    // The information that can give additional information.\r\n    TurnInfo memory _turnInfo;\r\n\r\n    // Step 1: Retrieve Hero information (0 ~ 3) & Enemy information (4 ~ 7).\r\n\r\n    uint32[5][8] memory _unitStats; // Stats of units for given levels and class ids.\r\n    uint8[2][8] memory _unitTypesAuras; // 0: Types of units for given levels and class ids. 1: Auras of units for given levels and class ids.\r\n\r\n    // Retrieve deployed hero information.\r\n    if (_tokenIds[0] != 0) {\r\n      _playRecord.unitClassIds[0] = heroContract.getHeroClassId(_tokenIds[0]);\r\n      (_playRecord.unitLevels[0], _turnInfo.originalExps[0], _unitStats[0], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[0]);\r\n      (, , , , _unitTypesAuras[0][0], , _unitTypesAuras[0][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[0]);\r\n    }\r\n    if (_tokenIds[1] != 0) {\r\n      _playRecord.unitClassIds[1] = heroContract.getHeroClassId(_tokenIds[1]);\r\n      (_playRecord.unitLevels[1], _turnInfo.originalExps[1], _unitStats[1], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[1]);\r\n      (, , , , _unitTypesAuras[1][0], , _unitTypesAuras[1][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[1]);\r\n    }\r\n    if (_tokenIds[2] != 0) {\r\n      _playRecord.unitClassIds[2] = heroContract.getHeroClassId(_tokenIds[2]);\r\n      (_playRecord.unitLevels[2], _turnInfo.originalExps[2], _unitStats[2], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[2]);\r\n      (, , , , _unitTypesAuras[2][0], , _unitTypesAuras[2][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[2]);\r\n    }\r\n    if (_tokenIds[3] != 0) {\r\n      _playRecord.unitClassIds[3] = heroContract.getHeroClassId(_tokenIds[3]);\r\n      (_playRecord.unitLevels[3], _turnInfo.originalExps[3], _unitStats[3], , ) = correctedHeroContract.getCorrectedStats(_tokenIds[3]);\r\n      (, , , , _unitTypesAuras[3][0], , _unitTypesAuras[3][1], , , ) = heroContract.getClassInfo(_playRecord.unitClassIds[3]);\r\n    }\r\n\r\n    // Retrieve enemy information.\r\n    // Instead of null check, isPersonalized check will tell the personalized mobs for this player exist.\r\n    var _enemyCombination = addressToEnemyCombination[msg.sender];\r\n    if (_enemyCombination.isPersonalized == false) {\r\n      // Then let's use default value.\r\n      _enemyCombination = initialEnemyCombination;\r\n    }\r\n\r\n    uint32[5][8] memory _tmpEnemyBaseStatsAndIVs; // 0 ~ 3: Temp value for getting enemy base stats. 4 ~ 7: Temp value for getting enemy IVs.\r\n\r\n    // Retrieve mobs' class information. \r\n    (, , , , _unitTypesAuras[4][0], , _unitTypesAuras[4][1], _tmpEnemyBaseStatsAndIVs[0], _tmpEnemyBaseStatsAndIVs[4], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[0]);\r\n    (, , , , _unitTypesAuras[5][0], , _unitTypesAuras[5][1], _tmpEnemyBaseStatsAndIVs[1], _tmpEnemyBaseStatsAndIVs[5], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[1]);\r\n    (, , , , _unitTypesAuras[6][0], , _unitTypesAuras[6][1], _tmpEnemyBaseStatsAndIVs[2], _tmpEnemyBaseStatsAndIVs[6], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[2]);\r\n    (, , , , _unitTypesAuras[7][0], , _unitTypesAuras[7][1], _tmpEnemyBaseStatsAndIVs[3], _tmpEnemyBaseStatsAndIVs[7], ) = heroContract.getClassInfo(_enemyCombination.enemySlotClassIds[3]);\r\n\r\n    _playRecord.unitClassIds[4] = _enemyCombination.enemySlotClassIds[0];\r\n    _playRecord.unitClassIds[5] = _enemyCombination.enemySlotClassIds[1];\r\n    _playRecord.unitClassIds[6] = _enemyCombination.enemySlotClassIds[2];\r\n    _playRecord.unitClassIds[7] = _enemyCombination.enemySlotClassIds[3];\r\n    \r\n    // Set level for enemies.\r\n    _playRecord.unitLevels[4] = _tryingProgress;\r\n    _playRecord.unitLevels[5] = _tryingProgress;\r\n    _playRecord.unitLevels[6] = _tryingProgress;\r\n    _playRecord.unitLevels[7] = _tryingProgress;\r\n\r\n    // With _tryingProgress, _tmpEnemyBaseStatsAndIVs, we can get the current stats of mobs.\r\n    for (uint8 i = 0; i < 5; i ++) {\r\n      _unitStats[4][i] = _tmpEnemyBaseStatsAndIVs[0][i] + _playRecord.unitLevels[4] * _tmpEnemyBaseStatsAndIVs[4][i];\r\n      _unitStats[5][i] = _tmpEnemyBaseStatsAndIVs[1][i] + _playRecord.unitLevels[5] * _tmpEnemyBaseStatsAndIVs[5][i];\r\n      _unitStats[6][i] = _tmpEnemyBaseStatsAndIVs[2][i] + _playRecord.unitLevels[6] * _tmpEnemyBaseStatsAndIVs[6][i];\r\n      _unitStats[7][i] = _tmpEnemyBaseStatsAndIVs[3][i] + _playRecord.unitLevels[7] * _tmpEnemyBaseStatsAndIVs[7][i];\r\n    }\r\n\r\n    // Step 2. Run the battle logic.\r\n    \r\n    // Firstly, we need to assign the unit's turn order with AGLs of the units.\r\n    uint32[8] memory _unitAGLs;\r\n    for (i = 0; i < 8; i ++) {\r\n      _unitAGLs[i] = _unitStats[i][2];\r\n    }\r\n    _turnInfo.turnOrder = getOrder(_unitAGLs);\r\n    \r\n    // Fight for 24 turns. (8 units x 3 rounds.)\r\n    _turnInfo.turnLength = 24;\r\n    for (i = 0; i < 24; i ++) {\r\n      if (_unitStats[4][4] == 0 && _unitStats[5][4] == 0 && _unitStats[6][4] == 0 && _unitStats[7][4] == 0) {\r\n        _turnInfo.turnLength = i;\r\n        break;\r\n      } else if (_unitStats[0][4] == 0 && _unitStats[1][4] == 0 && _unitStats[2][4] == 0 && _unitStats[3][4] == 0) {\r\n        _turnInfo.turnLength = i;\r\n        break;\r\n      }\r\n      \r\n      var _slotId = _turnInfo.turnOrder[(i % 8)];\r\n      if (_slotId < 4 && _tokenIds[_slotId] == 0) {\r\n        // This means the slot is empty.\r\n        // Defender should be default value.\r\n        _turnInfo.defenderList[i] = 127;\r\n      } else if (_unitStats[_slotId][4] == 0) {\r\n        // This means the unit on this slot is dead.\r\n        // Defender should be default value.\r\n        _turnInfo.defenderList[i] = 128;\r\n      } else {\r\n        // 1) Check number of attack targets that are alive.\r\n        uint8 _targetSlotId = 255;\r\n        if (_slotId < 4) {\r\n          if (_unitStats[4][4] > 0)\r\n            _targetSlotId = 4;\r\n          else if (_unitStats[5][4] > 0)\r\n            _targetSlotId = 5;\r\n          else if (_unitStats[6][4] > 0)\r\n            _targetSlotId = 6;\r\n          else if (_unitStats[7][4] > 0)\r\n            _targetSlotId = 7;\r\n        } else {\r\n          if (_unitStats[0][4] > 0)\r\n            _targetSlotId = 0;\r\n          else if (_unitStats[1][4] > 0)\r\n            _targetSlotId = 1;\r\n          else if (_unitStats[2][4] > 0)\r\n            _targetSlotId = 2;\r\n          else if (_unitStats[3][4] > 0)\r\n            _targetSlotId = 3;\r\n        }\r\n        \r\n        // Target is the defender.\r\n        _turnInfo.defenderList[i] = _targetSlotId;\r\n        \r\n        // Base damage. (Attacker's ATK * 1.5 - Defender's DEF).\r\n        uint32 _damage = 10;\r\n        if ((_unitStats[_slotId][0] * 150 / 100) > _unitStats[_targetSlotId][1])\r\n          _damage = max((_unitStats[_slotId][0] * 150 / 100) - _unitStats[_targetSlotId][1], 10);\r\n        else\r\n          _damage = 10;\r\n\r\n        // Check miss / success.\r\n        if ((_unitStats[_slotId][3] * 150 / 100) > _unitStats[_targetSlotId][2]) {\r\n          if (min(max(((_unitStats[_slotId][3] * 150 / 100) - _unitStats[_targetSlotId][2]), 75), 99) <= random(100, 0))\r\n            _damage = _damage * 0;\r\n        }\r\n        else {\r\n          if (75 <= random(100, 0))\r\n            _damage = _damage * 0;\r\n        }\r\n\r\n        // Is the attack critical?\r\n        if (_unitStats[_slotId][3] > _unitStats[_targetSlotId][3]) {\r\n          if (min(max((_unitStats[_slotId][3] - _unitStats[_targetSlotId][3]), 5), 75) > random(100, 0))\r\n            _damage = _damage * 150 / 100;\r\n        }\r\n        else {\r\n          if (5 > random(100, 0))\r\n            _damage = _damage * 150 / 100;\r\n        }\r\n\r\n        // Is attacker has the advantageous Type?\r\n        if (_unitTypesAuras[_slotId][0] == 0 && _unitTypesAuras[_targetSlotId][0] == 1) // Fighter > Rogue\r\n          _damage = _damage * 125 / 100;\r\n        else if (_unitTypesAuras[_slotId][0] == 1 && _unitTypesAuras[_targetSlotId][0] == 2) // Rogue > Mage\r\n          _damage = _damage * 125 / 100;\r\n        else if (_unitTypesAuras[_slotId][0] == 2 && _unitTypesAuras[_targetSlotId][0] == 0) // Mage > Fighter\r\n          _damage = _damage * 125 / 100;\r\n\r\n        // Is attacker has the advantageous Aura?\r\n        if (_unitTypesAuras[_slotId][1] == 0 && _unitTypesAuras[_targetSlotId][1] == 1) // Water > Fire\r\n          _damage = _damage * 150 / 100;\r\n        else if (_unitTypesAuras[_slotId][1] == 1 && _unitTypesAuras[_targetSlotId][1] == 2) // Fire > Nature\r\n          _damage = _damage * 150 / 100;\r\n        else if (_unitTypesAuras[_slotId][1] == 2 && _unitTypesAuras[_targetSlotId][1] == 0) // Nature > Water\r\n          _damage = _damage * 150 / 100;\r\n        else if (_unitTypesAuras[_slotId][1] == 3 && _unitTypesAuras[_targetSlotId][1] == 4) // Light > Darkness\r\n          _damage = _damage * 150 / 100;\r\n        else if (_unitTypesAuras[_slotId][1] == 4 && _unitTypesAuras[_targetSlotId][1] == 3) // Darkness > Light\r\n          _damage = _damage * 150 / 100;\r\n        \r\n        // Apply damage so that reduce hp of defender.\r\n        if(_unitStats[_targetSlotId][4] > _damage)\r\n          _unitStats[_targetSlotId][4] -= _damage;\r\n        else\r\n          _unitStats[_targetSlotId][4] = 0;\r\n\r\n        // Save damage to play record.\r\n        _turnInfo.damageList[i] = _damage;\r\n      }\r\n    }\r\n    \r\n    // Step 3. Apply the result of this battle.\r\n\r\n    // Set heroes deployed.\r\n    if (_tokenIds[0] != 0)\r\n      heroContract.deploy(_tokenIds[0], locationId, coolHero);\r\n    if (_tokenIds[1] != 0)\r\n      heroContract.deploy(_tokenIds[1], locationId, coolHero);\r\n    if (_tokenIds[2] != 0)\r\n      heroContract.deploy(_tokenIds[2], locationId, coolHero);\r\n    if (_tokenIds[3] != 0)\r\n      heroContract.deploy(_tokenIds[3], locationId, coolHero);\r\n\r\n    uint8 _deadEnemies = 0;\r\n\r\n    // Check result.\r\n    if (_unitStats[4][4] == 0)\r\n      _deadEnemies ++;\r\n    if (_unitStats[5][4] == 0)\r\n      _deadEnemies ++;\r\n    if (_unitStats[6][4] == 0)\r\n      _deadEnemies ++;\r\n    if (_unitStats[7][4] == 0)\r\n      _deadEnemies ++;\r\n      \r\n    if (_deadEnemies == 4) {\r\n      // Fire TryDungeon event.\r\n      TryDungeon(msg.sender, _tryingProgress, progressContract.getProgressOfAddressAndId(msg.sender, locationId), true);\r\n      \r\n      // Check for progress.\r\n      if (_tryingProgress == progressContract.getProgressOfAddressAndId(msg.sender, locationId) + 1) {\r\n        // Increment progress.\r\n        progressContract.incrementProgressOfAddressAndId(msg.sender, locationId);\r\n        // Rewards.\r\n        (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, _tryingProgress, _deadEnemies, false, _turnInfo.originalExps);\r\n        // For every 10th floor(progress), Dungeon Chest card is given.\r\n        if (_tryingProgress % 10 == 0) {\r\n          cardContract.mint(msg.sender, 1, 3);\r\n        }\r\n      } else {\r\n        // Rewards for already cleared dungeon.\r\n        (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, _tryingProgress, _deadEnemies, true, _turnInfo.originalExps);\r\n      }\r\n\r\n      // New enemy combination for the player.\r\n      createNewCombination(msg.sender);\r\n    }\r\n    else {\r\n      // Fire TryDungeon event.\r\n      TryDungeon(msg.sender, _tryingProgress, progressContract.getProgressOfAddressAndId(msg.sender, locationId), false);\r\n\r\n      // Rewards.\r\n      (_playRecord.expReward, _playRecord.goldReward) = giveReward(_tokenIds, _tryingProgress, _deadEnemies, false, _turnInfo.originalExps);\r\n    }\r\n\r\n    // Save the result of this gameplay.\r\n    addressToPlayRecord[msg.sender] = _playRecord;\r\n\r\n    // Save the turn data.\r\n    // This is commented as this information can be reconstructed with intitial seed and date time.\r\n    // By commenting this, we can reduce about 400k gas.\r\n    if (isTurnDataSaved) {\r\n      addressToTurnInfo[msg.sender] = _turnInfo;\r\n    }\r\n  }\r\n\r\n  // @dev Check ownership.\r\n  function checkOwnershipAndAvailability(address _playerAddress, uint256[4] _tokenIds)\r\n    private view\r\n    returns(bool)\r\n  {\r\n    if ((_tokenIds[0] == 0 || heroContract.ownerOf(_tokenIds[0]) == _playerAddress) && (_tokenIds[1] == 0 || heroContract.ownerOf(_tokenIds[1]) == _playerAddress) && (_tokenIds[2] == 0 || heroContract.ownerOf(_tokenIds[2]) == _playerAddress) && (_tokenIds[3] == 0 || heroContract.ownerOf(_tokenIds[3]) == _playerAddress)) {\r\n      \r\n      // Retrieve avail time of heroes.\r\n      uint256[4] memory _heroAvailAts;\r\n      if (_tokenIds[0] != 0)\r\n        ( , , , , , _heroAvailAts[0], , , ) = heroContract.getHeroInfo(_tokenIds[0]);\r\n      if (_tokenIds[1] != 0)\r\n        ( , , , , , _heroAvailAts[1], , , ) = heroContract.getHeroInfo(_tokenIds[1]);\r\n      if (_tokenIds[2] != 0)\r\n        ( , , , , , _heroAvailAts[2], , , ) = heroContract.getHeroInfo(_tokenIds[2]);\r\n      if (_tokenIds[3] != 0)\r\n        ( , , , , , _heroAvailAts[3], , , ) = heroContract.getHeroInfo(_tokenIds[3]);\r\n\r\n      if (_heroAvailAts[0] <= now && _heroAvailAts[1] <= now && _heroAvailAts[2] <= now && _heroAvailAts[3] <= now) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // @dev New combination of mobs.\r\n  //  The combination is personalized by players, and refreshed when the dungeon cleared.\r\n  function createNewCombination(address _playerAddress)\r\n    private\r\n  {\r\n    EnemyCombination memory _newCombination;\r\n    _newCombination.isPersonalized = true;\r\n    for (uint8 i = 0; i < 4; i++) {\r\n      _newCombination.enemySlotClassIds[i] = possibleMobClasses[random(uint32(possibleMobClasses.length), 0)];\r\n    }\r\n    addressToEnemyCombination[_playerAddress] = _newCombination;\r\n  }\r\n\r\n  // @dev Give rewards.\r\n  function giveReward(uint256[4] _heroes, uint32 _progress, uint8 _numberOfKilledEnemies, bool _isClearedBefore, uint32[4] _originalExps)\r\n    private\r\n    returns (uint32 expRewardGiven, uint256 goldRewardGiven)\r\n  {\r\n    uint256 _goldRewardGiven;\r\n    uint32 _expRewardGiven;\r\n    if (_numberOfKilledEnemies != 4) {\r\n      // In case lost.\r\n      // Give baseline gold reward.\r\n      _goldRewardGiven = goldReward / 25 * sqrt(_progress);\r\n      _expRewardGiven = expReward * _numberOfKilledEnemies / 4 / 5 * sqrt(_progress / 4 + 1);\r\n    } else if (_isClearedBefore == true) {\r\n      // Did win, but this progress has been already cleared before.\r\n      _goldRewardGiven = goldReward / 5 * sqrt(_progress);\r\n      _expRewardGiven = expReward / 5 * sqrt(_progress / 4 + 1);\r\n    } else {\r\n      // Firstly cleared the progress.\r\n      _goldRewardGiven = goldReward * sqrt(_progress);\r\n      _expRewardGiven = expReward * sqrt(_progress / 4 + 1);\r\n    }\r\n\r\n    // Give reward Gold.\r\n    goldContract.mint(msg.sender, _goldRewardGiven);\r\n    \r\n    // Give reward EXP.\r\n    if(_heroes[0] != 0)\r\n      heroContract.addExp(_heroes[0], uint32(2)**32 - _originalExps[0] + _expRewardGiven);\r\n    if(_heroes[1] != 0)\r\n      heroContract.addExp(_heroes[1], uint32(2)**32 - _originalExps[1] + _expRewardGiven);\r\n    if(_heroes[2] != 0)\r\n      heroContract.addExp(_heroes[2], uint32(2)**32 - _originalExps[2] + _expRewardGiven);\r\n    if(_heroes[3] != 0)\r\n      heroContract.addExp(_heroes[3], uint32(2)**32 - _originalExps[3] + _expRewardGiven);\r\n\r\n    return (_expRewardGiven, _goldRewardGiven);\r\n  }\r\n\r\n  // @dev Return a pseudo random number between lower and upper bounds\r\n  function random(uint32 _upper, uint32 _lower)\r\n    private\r\n    returns (uint32)\r\n  {\r\n    require(_upper > _lower);\r\n\r\n    seed = seed % uint32(1103515245) + 12345;\r\n    return seed % (_upper - _lower) + _lower;\r\n  }\r\n\r\n  // @dev Retreive order based on given array _by.\r\n  function getOrder(uint32[8] _by)\r\n    private pure\r\n    returns (uint8[8])\r\n  {\r\n    uint8[8] memory _order = [uint8(0), 1, 2, 3, 4, 5, 6, 7];\r\n    for (uint8 i = 0; i < 8; i ++) {\r\n      for (uint8 j = i + 1; j < 8; j++) {\r\n        if (_by[i] < _by[j]) {\r\n          uint32 tmp1 = _by[i];\r\n          _by[i] = _by[j];\r\n          _by[j] = tmp1;\r\n          uint8 tmp2 = _order[i];\r\n          _order[i] = _order[j];\r\n          _order[j] = tmp2;\r\n        }\r\n      }\r\n    }\r\n    return _order;\r\n  }\r\n\r\n  // @return Bigger value of two uint32s.\r\n  function max(uint32 _value1, uint32 _value2)\r\n    private pure\r\n    returns (uint32)\r\n  {\r\n    if(_value1 >= _value2)\r\n      return _value1;\r\n    else\r\n      return _value2;\r\n  }\r\n\r\n  // @return Bigger value of two uint32s.\r\n  function min(uint32 _value1, uint32 _value2)\r\n    private pure\r\n    returns (uint32)\r\n  {\r\n    if(_value2 >= _value1)\r\n      return _value1;\r\n    else\r\n      return _value2;\r\n  }\r\n\r\n  // @return Square root of the given value.\r\n  function sqrt(uint32 _value) \r\n    private pure\r\n    returns (uint32) \r\n  {\r\n    uint32 z = (_value + 1) / 2;\r\n    uint32 y = _value;\r\n    while (z < y) {\r\n      y = z;\r\n      z = (_value / z + z) / 2;\r\n    }\r\n    return y;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"previousDungeonId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classIds\",\"type\":\"uint32[]\"}],\"name\":\"setPossibleMobs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLastPlayDateTime\",\"outputs\":[{\"name\":\"dateTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredProgressOfPreviousDungeon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPlayRecord\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"progress\",\"type\":\"uint32\"},{\"name\":\"expReward\",\"type\":\"uint32\"},{\"name\":\"goldReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsTurnDataSaved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_progress\",\"type\":\"uint32\"}],\"name\":\"setRequiredProgressOfPreviousDungeon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTurnInfo\",\"outputs\":[{\"name\":\"turnLength\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setCoolDungeon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTurnDataSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setExpReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dungeonId\",\"type\":\"uint32\"}],\"name\":\"setPreviousDungeoonId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"possibleMobClasses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGoldReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enemySlotClassIds\",\"type\":\"uint32[4]\"}],\"name\":\"setInitialEnemyCombination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEnemyCombinationOfAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPlayRecord\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"progress\",\"type\":\"uint32\"},{\"name\":\"heroTokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"uintClassIds\",\"type\":\"uint32[8]\"},{\"name\":\"unitLevels\",\"type\":\"uint32[8]\"},{\"name\":\"expRewardGiven\",\"type\":\"uint32\"},{\"name\":\"goldRewardGiven\",\"type\":\"uint256\"},{\"name\":\"turnLength\",\"type\":\"uint8\"},{\"name\":\"turnOrder\",\"type\":\"uint8[8]\"},{\"name\":\"defenderList\",\"type\":\"uint8[24]\"},{\"name\":\"damageList\",\"type\":\"uint32[24]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToEnemyCombination\",\"outputs\":[{\"name\":\"isPersonalized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coolDungeon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setLocationId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coolHero\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialEnemyCombination\",\"outputs\":[{\"name\":\"isPersonalized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitialEnemyCombination\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locationId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPlayRecordNoTurnData\",\"outputs\":[{\"name\":\"initialSeed\",\"type\":\"uint32\"},{\"name\":\"progress\",\"type\":\"uint32\"},{\"name\":\"heroTokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"uintClassIds\",\"type\":\"uint32[8]\"},{\"name\":\"unitLevels\",\"type\":\"uint32[8]\"},{\"name\":\"expRewardGiven\",\"type\":\"uint32\"},{\"name\":\"goldRewardGiven\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[4]\"},{\"name\":\"_tryingProgress\",\"type\":\"uint32\"}],\"name\":\"enterDungeon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setCoolHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPlayRecordDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_progressAddress\",\"type\":\"address\"},{\"name\":\"_heroContractAddress\",\"type\":\"address\"},{\"name\":\"_correctedHeroContractAddress\",\"type\":\"address\"},{\"name\":\"_cardContractAddress\",\"type\":\"address\"},{\"name\":\"_goldContractAddress\",\"type\":\"address\"},{\"name\":\"_locationId\",\"type\":\"uint32\"},{\"name\":\"_coolDungeon\",\"type\":\"uint256\"},{\"name\":\"_coolHero\",\"type\":\"uint256\"},{\"name\":\"_expReward\",\"type\":\"uint32\"},{\"name\":\"_goldReward\",\"type\":\"uint256\"},{\"name\":\"_previousDungeonId\",\"type\":\"uint32\"},{\"name\":\"_requiredProgressOfPreviousDungeon\",\"type\":\"uint32\"},{\"name\":\"_enemySlotClassIds\",\"type\":\"uint32[4]\"},{\"name\":\"_isTurnDataSaved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tryingProgress\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_progress\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_isSuccess\",\"type\":\"bool\"}],\"name\":\"TryDungeon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoSagaDungeonVer1","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e7b704652787ff7654b9975ea99c3d1ca04bcf42000000000000000000000000abc7e6c01237e8eef355bba2bf925a730b714d5f0000000000000000000000001f6f71e1e6a56dc348f1ec9a22b200ac44459fe40000000000000000000000001b5242794288b45831ce069c9934a29b89af019700000000000000000000000059bcded9c87ce46ec97c13640bfc0390ceb00e990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000038400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://28f8dae12b06c20afd4d538e3320145a50dced46de19906e10e576dc8c456ed6"}]}