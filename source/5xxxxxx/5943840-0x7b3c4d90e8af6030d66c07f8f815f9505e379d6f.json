{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/lifecycle/Destructible.sol\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n\r\n/// @dev From https://github.com/KyberNetwork/smart-contracts/blob/master/contracts/ERC20Interface.sol\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/// @title Contract for a burnable ERC\r\ncontract BurnableErc20 is ERC20 {\r\n    function burn(uint value) external;\r\n}\r\n\r\ncontract KyberNetwork {\r\n    function trade(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n}\r\n\r\n\r\n/// @title A contract to burn ERC20 tokens from ETH\r\n/// @notice Sends the ETH on the contract to kyber for conversion to ERC20\r\n///  The converted ERC20 is then burned\r\n/// @author Request Network\r\ncontract Burner is Destructible {\r\n    /// Kyber contract that will be used for the conversion\r\n    KyberNetwork public kyberContract;\r\n\r\n    // Contract for the ERC20\r\n    BurnableErc20 public destErc20;\r\n\r\n    /// @param _destErc20 Destination token\r\n    /// @param _kyberContract Kyber contract to use\r\n    function Burner(address _destErc20, address _kyberContract) public {\r\n        // Check inputs\r\n        require(_destErc20 != address(0));\r\n        require(_kyberContract != address(0));\r\n\r\n        destErc20 = BurnableErc20(_destErc20);\r\n        kyberContract = KyberNetwork(_kyberContract);\r\n    }\r\n    \r\n    /// Fallback function to receive the ETH to burn later\r\n    function() public payable { }\r\n\r\n    /// @dev Main function. Trade the ETH for ERC20 and burn them\r\n    /// @param _maxSrcAmount Maximum amount of ETH to convert. If set to 0, all ETH on the\r\n    ///  contract will be burned\r\n    /// @param _maxDestAmount A limit on the amount of converted ERC20 tokens. Default value is MAX_UINT\r\n    /// @param _minConversionRate The minimal conversion rate. Default value is 1 (market rate)\r\n    /// @return amount of dest ERC20 tokens burned\r\n    function burn(uint _maxSrcAmount, uint _maxDestAmount, uint _minConversionRate)\r\n        external\r\n        returns(uint)\r\n    {\r\n        // ETH to convert on Kyber, by default the amount of ETH on the contract\r\n        // If _maxSrcAmount is defined, ethToConvert = min(balance on contract, _maxSrcAmount)\r\n        uint ethToConvert = address(this).balance;\r\n        if (_maxSrcAmount != 0 && _maxSrcAmount < ethToConvert) {\r\n            ethToConvert = _maxSrcAmount;\r\n        }\r\n\r\n        // Set maxDestAmount to MAX_UINT if not sent as parameter\r\n        uint maxDestAmount = _maxDestAmount != 0 ? _maxDestAmount : 2**256 - 1;\r\n\r\n        // Set minConversionRate to 1 if not sent as parameter\r\n        // A value of 1 will execute the trade according to market price in the time of the transaction confirmation\r\n        uint minConversionRate = _minConversionRate != 0 ? _minConversionRate : 1;\r\n\r\n        // Convert the ETH to ERC20\r\n        // erc20ToBurn is the amount of the ERC20 tokens converted by Kyber that will be burned\r\n        uint erc20ToBurn = kyberContract.trade.value(ethToConvert)(\r\n            // Source. From Kyber docs, this value denotes ETH\r\n            ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\r\n            \r\n            // Source amount\r\n            ethToConvert,\r\n\r\n            // Destination. Downcast BurnableErc20 to ERC20\r\n            ERC20(destErc20),\r\n            \r\n            // destAddress: this contract\r\n            this,\r\n            \r\n            // maxDestAmount\r\n            maxDestAmount,\r\n            \r\n            // minConversionRate \r\n            minConversionRate,\r\n            \r\n            // walletId\r\n            0\r\n        );\r\n\r\n        // Burn the converted ERC20 tokens\r\n        destErc20.burn(erc20ToBurn);\r\n\r\n        return erc20ToBurn;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the KyberNetwork contract address.\r\n    */  \r\n    function setKyberNetworkContract(address _kyberNetworkAddress) \r\n        external\r\n        onlyOwner\r\n    {\r\n        kyberContract = KyberNetwork(_kyberNetworkAddress);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_maxSrcAmount\",\"type\":\"uint256\"},{\"name\":\"_maxDestAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destErc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberNetworkAddress\",\"type\":\"address\"}],\"name\":\"setKyberNetworkContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_destErc20\",\"type\":\"address\"},{\"name\":\"_kyberContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Burner","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008f8221afbb33998d8584a2b05749ba73c37a938a000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755","Library":"","SwarmSource":"bzzr://a7c61f238db1616a37d6b7c40b0070db917cf2a588f0b994b5712a90ff09bdd8"}]}