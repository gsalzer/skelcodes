{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract HODLIT is StandardToken, Ownable {\r\n  using SafeMath for uint256;\r\n  string public name = \"HODL INCENTIVE TOKEN\";\r\n  string public symbol = \"HIT\";\r\n  uint256 public decimals = 18;\r\n  uint256 public multiplicator = 10 ** decimals;\r\n  uint256 public totalSupply;\r\n  uint256 public ICDSupply;\r\n\r\n  uint256 public registeredUsers;\r\n  uint256 public claimedUsers;\r\n  uint256 public maxReferrals = 20;\r\n\r\n  uint256 public hardCap = SafeMath.mul(100000000, multiplicator);\r\n  uint256 public ICDCap = SafeMath.mul(20000000, multiplicator);\r\n\r\n  mapping (address => uint256) public etherBalances;\r\n  mapping (address => bool) public ICDClaims;\r\n  mapping (address => uint256) public referrals;\r\n  mapping (address => bool) public bonusReceived;\r\n\r\n\r\n  uint256 public regStartTime = 1519848000; // 28 feb 2018 20:00 GMT\r\n  uint256 public regStopTime = regStartTime + 7 days;\r\n  uint256 public POHStartTime = regStopTime;\r\n  uint256 public POHStopTime = POHStartTime + 7 days;\r\n  uint256 public ICDStartTime = POHStopTime;\r\n  uint256 public ICDStopTime = ICDStartTime + 7 days;\r\n  uint256 public PCDStartTime = ICDStopTime + 14 days;\r\n\r\n  address public ERC721Address;\r\n\r\n  modifier forRegistration {\r\n    require(block.timestamp >= regStartTime && block.timestamp < regStopTime);\r\n    _;\r\n  }\r\n\r\n  modifier forICD {\r\n    require(block.timestamp >= ICDStartTime && block.timestamp < ICDStopTime);\r\n    _;\r\n  }\r\n\r\n  modifier forERC721 {\r\n    require(msg.sender == ERC721Address && block.timestamp >= PCDStartTime);\r\n    _;\r\n  }\r\n\r\n  function HODLIT() public {\r\n    uint256 reserve = SafeMath.mul(30000000, multiplicator);\r\n    owner = msg.sender;\r\n    totalSupply = totalSupply.add(reserve);\r\n    balances[owner] = balances[owner].add(reserve);\r\n    Transfer(address(0), owner, reserve);\r\n  }\r\n\r\n  function() external payable {\r\n    revert();\r\n  }\r\n\r\n  function setERC721Address(address _ERC721Address) external onlyOwner {\r\n    ERC721Address = _ERC721Address;\r\n  }\r\n\r\n  function setMaxReferrals(uint256 _maxReferrals) external onlyOwner {\r\n    maxReferrals = _maxReferrals;\r\n  }\r\n\r\n  function registerEtherBalance(address _referral) external forRegistration {\r\n    require(\r\n      msg.sender.balance > 0.2 ether &&\r\n      etherBalances[msg.sender] == 0 &&\r\n      _referral != msg.sender\r\n    );\r\n    if (_referral != address(0) && referrals[_referral] < maxReferrals) {\r\n      referrals[_referral]++;\r\n    }\r\n    registeredUsers++;\r\n    etherBalances[msg.sender] = msg.sender.balance;\r\n  }\r\n\r\n  function claimTokens() external forICD {\r\n    require(ICDClaims[msg.sender] == false);\r\n    require(etherBalances[msg.sender] > 0);\r\n    require(etherBalances[msg.sender] <= msg.sender.balance + 50 finney);\r\n    ICDClaims[msg.sender] = true;\r\n    claimedUsers++;\r\n    require(mintICD(msg.sender, computeReward(etherBalances[msg.sender])));\r\n  }\r\n\r\n  function declareCheater(address _cheater) external onlyOwner {\r\n    require(_cheater != address(0));\r\n    ICDClaims[_cheater] = false;\r\n    etherBalances[_cheater] = 0;\r\n  }\r\n\r\n  function declareCheaters(address[] _cheaters) external onlyOwner {\r\n    for (uint256 i = 0; i < _cheaters.length; i++) {\r\n      require(_cheaters[i] != address(0));\r\n      ICDClaims[_cheaters[i]] = false;\r\n      etherBalances[_cheaters[i]] = 0;\r\n    }\r\n  }\r\n\r\n  function mintPCD(address _to, uint256 _amount) external forERC721 returns(bool) {\r\n    require(_to != address(0));\r\n    require(_amount + totalSupply <= hardCap);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    etherBalances[_to] = _to.balance;\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function claimTwitterBonus() external forICD {\r\n    require(balances[msg.sender] > 0 && !bonusReceived[msg.sender]);\r\n    bonusReceived[msg.sender] = true;\r\n    mintICD(msg.sender, multiplicator.mul(20));\r\n  }\r\n\r\n  function claimReferralBonus() external forICD {\r\n    require(referrals[msg.sender] > 0 && balances[msg.sender] > 0);\r\n    uint256 cache = referrals[msg.sender];\r\n    referrals[msg.sender] = 0;\r\n    mintICD(msg.sender, SafeMath.mul(cache * 20, multiplicator));\r\n  }\r\n\r\n  function computeReward(uint256 _amount) internal view returns(uint256) {\r\n    if (_amount < 1 ether) return SafeMath.mul(20, multiplicator);\r\n    if (_amount < 2 ether) return SafeMath.mul(100, multiplicator);\r\n    if (_amount < 3 ether) return SafeMath.mul(240, multiplicator);\r\n    if (_amount < 4 ether) return SafeMath.mul(430, multiplicator);\r\n    if (_amount < 5 ether) return SafeMath.mul(680, multiplicator);\r\n    if (_amount < 6 ether) return SafeMath.mul(950, multiplicator);\r\n    if (_amount < 7 ether) return SafeMath.mul(1260, multiplicator);\r\n    if (_amount < 8 ether) return SafeMath.mul(1580, multiplicator);\r\n    if (_amount < 9 ether) return SafeMath.mul(1900, multiplicator);\r\n    if (_amount < 10 ether) return SafeMath.mul(2240, multiplicator);\r\n    if (_amount < 11 ether) return SafeMath.mul(2560, multiplicator);\r\n    if (_amount < 12 ether) return SafeMath.mul(2890, multiplicator);\r\n    if (_amount < 13 ether) return SafeMath.mul(3210, multiplicator);\r\n    if (_amount < 14 ether) return SafeMath.mul(3520, multiplicator);\r\n    if (_amount < 15 ether) return SafeMath.mul(3830, multiplicator);\r\n    if (_amount < 16 ether) return SafeMath.mul(4120, multiplicator);\r\n    if (_amount < 17 ether) return SafeMath.mul(4410, multiplicator);\r\n    if (_amount < 18 ether) return SafeMath.mul(4680, multiplicator);\r\n    if (_amount < 19 ether) return SafeMath.mul(4950, multiplicator);\r\n    if (_amount < 20 ether) return SafeMath.mul(5210, multiplicator);\r\n    if (_amount < 21 ether) return SafeMath.mul(5460, multiplicator);\r\n    if (_amount < 22 ether) return SafeMath.mul(5700, multiplicator);\r\n    if (_amount < 23 ether) return SafeMath.mul(5930, multiplicator);\r\n    if (_amount < 24 ether) return SafeMath.mul(6150, multiplicator);\r\n    if (_amount < 25 ether) return SafeMath.mul(6360, multiplicator);\r\n    if (_amount < 26 ether) return SafeMath.mul(6570, multiplicator);\r\n    if (_amount < 27 ether) return SafeMath.mul(6770, multiplicator);\r\n    if (_amount < 28 ether) return SafeMath.mul(6960, multiplicator);\r\n    if (_amount < 29 ether) return SafeMath.mul(7140, multiplicator);\r\n    if (_amount < 30 ether) return SafeMath.mul(7320, multiplicator);\r\n    if (_amount < 31 ether) return SafeMath.mul(7500, multiplicator);\r\n    if (_amount < 32 ether) return SafeMath.mul(7660, multiplicator);\r\n    if (_amount < 33 ether) return SafeMath.mul(7820, multiplicator);\r\n    if (_amount < 34 ether) return SafeMath.mul(7980, multiplicator);\r\n    if (_amount < 35 ether) return SafeMath.mul(8130, multiplicator);\r\n    if (_amount < 36 ether) return SafeMath.mul(8270, multiplicator);\r\n    if (_amount < 37 ether) return SafeMath.mul(8410, multiplicator);\r\n    if (_amount < 38 ether) return SafeMath.mul(8550, multiplicator);\r\n    if (_amount < 39 ether) return SafeMath.mul(8680, multiplicator);\r\n    if (_amount < 40 ether) return SafeMath.mul(8810, multiplicator);\r\n    if (_amount < 41 ether) return SafeMath.mul(8930, multiplicator);\r\n    if (_amount < 42 ether) return SafeMath.mul(9050, multiplicator);\r\n    if (_amount < 43 ether) return SafeMath.mul(9170, multiplicator);\r\n    if (_amount < 44 ether) return SafeMath.mul(9280, multiplicator);\r\n    if (_amount < 45 ether) return SafeMath.mul(9390, multiplicator);\r\n    if (_amount < 46 ether) return SafeMath.mul(9500, multiplicator);\r\n    if (_amount < 47 ether) return SafeMath.mul(9600, multiplicator);\r\n    if (_amount < 48 ether) return SafeMath.mul(9700, multiplicator);\r\n    if (_amount < 49 ether) return SafeMath.mul(9800, multiplicator);\r\n    if (_amount < 50 ether) return SafeMath.mul(9890, multiplicator);\r\n    return SafeMath.mul(10000, multiplicator);\r\n  }\r\n\r\n  function mintICD(address _to, uint256 _amount) internal returns(bool) {\r\n    require(_to != address(0));\r\n    require(_amount + ICDSupply <= ICDCap);\r\n    totalSupply = totalSupply.add(_amount);\r\n    ICDSupply = ICDSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    etherBalances[_to] = _to.balance;\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract Airdrop is Ownable {\r\n\r\n  HODLIT token;\r\n  address propheth = 0x0368284b0267DF29DD954a5Ed7832c84c09451eA;\r\n  bool isStopped;\r\n\r\n  event AirdropLog(uint256 indexed id, address indexed user, uint256 claimAmount);\r\n\r\n  mapping(uint256 => bool) public isClaimed;\r\n  mapping(uint256 => uint256) public claimedAt;\r\n  mapping(uint256 => address) public claimedBy;\r\n  mapping(address => uint256) public claims;\r\n\r\n  uint256 public totalClaims;\r\n  uint256 public airdropLimit = safeMul(10000000, 10 ** 18);\r\n\r\n  constructor(address _token) public {\r\n    token = HODLIT(_token);\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function ecrecovery(bytes32 hash, bytes sig) internal pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  function parseAddr(string _a) internal pure returns (address) {\r\n    bytes memory tmp = bytes(_a);\r\n    uint160 iaddr = 0;\r\n    uint160 b1;\r\n    uint160 b2;\r\n    for (uint i=2; i<2+2*20; i+=2){\r\n      iaddr *= 256;\r\n      b1 = uint160(tmp[i]);\r\n      b2 = uint160(tmp[i+1]);\r\n      if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n      else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\r\n      else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n      if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n      else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\r\n      else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n      iaddr += (b1*16+b2);\r\n    }\r\n    return address(iaddr);\r\n  }\r\n\r\n  function parseInt(string _a, uint _b) internal pure returns (uint) {\r\n    bytes memory bresult = bytes(_a);\r\n    uint mint = 0;\r\n    bool decimals = false;\r\n    for (uint i=0; i<bresult.length; i++){\r\n      if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n        if (decimals){\r\n          if (_b == 0) break;\r\n          else _b--;\r\n        }\r\n        mint *= 10;\r\n        mint += uint(bresult[i]) - 48;\r\n      } else if (bresult[i] == 46) decimals = true;\r\n    }\r\n    if (_b > 0) mint *= 10**_b;\r\n    return mint;\r\n  }\r\n\r\n\r\n\r\n  function prophetize(string _id, string _userAddress, string _claimAmount, bytes32 _hash, bytes _sig) internal view returns(bool){\r\n    require(keccak256(\"\\x19Ethereum Signed Message:\\n32\", _id,'&',_userAddress,'&', _claimAmount) == _hash);\r\n    require(ecrecovery(_hash, _sig) == propheth);\r\n    return true;\r\n  }\r\n\r\n  function stopAirdrop(bool _choice) external onlyOwner {\r\n    isStopped = _choice;\r\n  }\r\n\r\n  function setPropheth(address _propheth) external onlyOwner {\r\n    propheth = _propheth;\r\n  }\r\n\r\n  function claim(string _id, string _userAddress, string _claimAmount, bytes32 _hash, bytes _sig) external {\r\n    require(prophetize(_id, _userAddress, _claimAmount, _hash, _sig) == true && !isStopped);\r\n\r\n    uint256 id = parseInt(_id, 0);\r\n    address userAddress = parseAddr(_userAddress);\r\n    uint256 claimAmount;\r\n\r\n    if (token.ICDClaims(userAddress)) {\r\n        claimAmount = safeMul(parseInt(_claimAmount, 0) * 2, 10 ** 18);\r\n    } else {\r\n        claimAmount = safeMul(parseInt(_claimAmount, 0), 10 ** 18);\r\n    }\r\n\r\n    require(!isClaimed[id] && claimAmount != 0 && userAddress == msg.sender);\r\n    require(safeAdd(claimAmount, totalClaims) < airdropLimit);\r\n\r\n    isClaimed[id] = true;\r\n    claimedAt[id] = claimAmount;\r\n    claimedBy[id] = userAddress;\r\n    claims[userAddress] = safeAdd(claims[userAddress], claimAmount);\r\n    totalClaims = safeAdd(totalClaims, claimAmount);\r\n\r\n    require(token.mintPCD(userAddress, claimAmount));\r\n\r\n    emit AirdropLog(id, userAddress, claimAmount);\r\n\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"airdropLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_propheth\",\"type\":\"address\"}],\"name\":\"setPropheth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"bool\"}],\"name\":\"stopAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_userAddress\",\"type\":\"string\"},{\"name\":\"_claimAmount\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"AirdropLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Airdrop","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000024021d38db53a938446ecb0a31b1267764d9d63d","Library":"","SwarmSource":"bzzr://7c60f49fce5797ef5aad9a3582acd00f99f56b3cf02b6ce0ebbb6c11db21e15e"}]}