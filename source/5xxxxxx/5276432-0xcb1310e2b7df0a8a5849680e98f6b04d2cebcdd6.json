{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n/*\r\nGame: CryptoPokemon\r\nDomain: CryptoPokemon.com\r\nDev: CryptoPokemon Team\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract PokemonInterface {\r\nfunction levels(uint256 _pokemonId) external view returns (\r\nuint256 level\r\n);\r\n\r\nfunction getPokemonOwner(uint _pokemonId)external view returns (\r\naddress currentOwner\r\n);\r\n}\r\n\r\ncontract PublicBattle {\r\nusing SafeMath for uint256;\r\n//Guess parameter\r\nuint public totalGuess;\r\nuint public totalPool;\r\nuint public publicBattlepm1;\r\nuint public publicBattlepm2;\r\naddress guesser;\r\nbool public publicbattlestart;\r\nmapping(uint => address[]) pokemonGuessPlayers;\r\nmapping(uint => uint) pokemonGuessNumber;\r\nmapping(uint => uint) pokemonGuessPrize;\r\nmapping(address => uint) playerGuessPM1Number;\r\nmapping(address => uint) playerGuessPM2Number;\r\nmapping(uint => uint) battleCD;\r\nuint public pbWinner;\r\n\r\naddress cpAddress = 0x77fA1D1Ded3F4bed737e9aE870a6f3605445df9c;\r\nPokemonInterface pokemonContract = PokemonInterface(cpAddress);\r\n\r\naddress contractCreator;\r\naddress devFeeAddress;\r\n\r\nfunction PublicBattle () public {\r\n\r\ncontractCreator = msg.sender;\r\ndevFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4;\r\npublicbattlestart = false;\r\npublicBattlepm1 = 99999;\r\npublicBattlepm2 = 99999;\r\npbWinner = 99999;\r\nisPaused = false;\r\ntotalPool = 0;\r\ninitialPokemonInfo();\r\n}\r\n\r\nstruct Battlelog {\r\nuint pokemonId1;\r\nuint pokemonId2;\r\nuint result;\r\n\r\n}\r\nBattlelog[] battleresults;\r\n\r\nstruct PokemonDetails {\r\nstring pokemonName;\r\nuint pokemonType;\r\nuint total;\r\n}\r\nPokemonDetails[] pokemoninfo;\r\n\r\n//modifiers\r\nmodifier onlyContractCreator() {\r\nrequire (msg.sender == contractCreator);\r\n_;\r\n}\r\n\r\n\r\n//Owners and admins\r\n\r\n/* Owner */\r\nfunction setOwner (address _owner) onlyContractCreator() public {\r\ncontractCreator = _owner;\r\n}\r\n\r\n\r\n// Adresses\r\nfunction setdevFeeAddress (address _devFeeAddress) onlyContractCreator() public {\r\ndevFeeAddress = _devFeeAddress;\r\n}\r\n\r\nbool isPaused;\r\n/*\r\nWhen countdowns and events happening, use the checker.\r\n*/\r\nfunction pauseGame() public onlyContractCreator {\r\nisPaused = true;\r\n}\r\nfunction unPauseGame() public onlyContractCreator {\r\nisPaused = false;\r\n}\r\nfunction GetGamestatus() public view returns(bool) {\r\nreturn(isPaused);\r\n}\r\n\r\n//set withdraw only use when bugs happned.\r\nfunction withdrawAmount (uint256 _amount) onlyContractCreator() public {\r\nmsg.sender.transfer(_amount);\r\ntotalPool = totalPool - _amount;\r\n}\r\n\r\nfunction initialBattle(uint _pokemonId1,uint _pokemonId2) public{\r\nrequire(pokemonContract.getPokemonOwner(_pokemonId1) == msg.sender);\r\nrequire(isPaused == false);\r\nrequire(_pokemonId1 != _pokemonId2);\r\nrequire(getPokemonCD(_pokemonId1) == 0);\r\nassert(publicbattlestart != true);\r\npublicBattlepm1 = _pokemonId1;\r\npublicBattlepm2 = _pokemonId2;\r\npublicbattlestart = true;\r\npokemonGuessNumber[publicBattlepm1]=0;\r\npokemonGuessNumber[publicBattlepm2]=0;\r\npokemonGuessPrize[publicBattlepm1]=0;\r\npokemonGuessPrize[publicBattlepm2]=0;\r\nisPaused = false;\r\nbattleCD[_pokemonId1] = now + 12 * 1 hours;\r\n// add 1% of balance to contract\r\ntotalGuess = totalPool.div(100);\r\n//trigger time\r\n\r\n}\r\nfunction donateToPool() public payable{\r\n// The pool will make this game maintain forever, 1% of prize goto each publicbattle and\r\n// gain 1% of each publicbattle back before distributePrizes\r\nrequire(msg.value >= 0);\r\ntotalPool = totalPool + msg.value;\r\n\r\n}\r\n\r\nfunction guess(uint _pokemonId) public payable{\r\nrequire(isPaused == false);\r\nassert(msg.value > 0);\r\nassert(_pokemonId == publicBattlepm1 || _pokemonId == publicBattlepm2);\r\n\r\nuint256 calcValue = msg.value;\r\nuint256 cutFee = calcValue.div(16);\r\n\r\ncalcValue = calcValue - cutFee;\r\n\r\n// %3 to the Owner of the card and %3 to dev\r\npokemonContract.getPokemonOwner(_pokemonId).transfer(cutFee.div(2));\r\ndevFeeAddress.transfer(cutFee.div(2));\r\n\r\n// Total amount\r\ntotalGuess += calcValue;\r\n\r\n// Each guess time\r\npokemonGuessNumber[_pokemonId]++;\r\n\r\n\r\n// Each amount\r\npokemonGuessPrize[_pokemonId] = pokemonGuessPrize[_pokemonId] + calcValue;\r\n\r\n\r\n// mapping sender and amount\r\n\r\nif(_pokemonId == publicBattlepm1){\r\n\r\nif(playerGuessPM1Number[msg.sender] != 0){\r\n\r\nplayerGuessPM1Number[msg.sender] = playerGuessPM1Number[msg.sender] + calcValue;\r\n\r\n}else{\r\n\r\npokemonGuessPlayers[_pokemonId].push(msg.sender);\r\nplayerGuessPM1Number[msg.sender]  = calcValue;\r\n}\r\n\r\n}else{\r\n\r\n\r\nif(playerGuessPM2Number[msg.sender] != 0){\r\n\r\nplayerGuessPM2Number[msg.sender] = playerGuessPM2Number[msg.sender] + calcValue;\r\n\r\n}else{\r\n\r\npokemonGuessPlayers[_pokemonId].push(msg.sender);\r\nplayerGuessPM2Number[msg.sender]  = calcValue;\r\n}\r\n\r\n}\r\n\r\nif(pokemonGuessNumber[publicBattlepm1] + pokemonGuessNumber[publicBattlepm2] > 20){\r\nstartpublicBattle(publicBattlepm1, publicBattlepm2);\r\n}\r\n\r\n}\r\n\r\nfunction startpublicBattle(uint _pokemon1, uint _pokemon2) internal {\r\nrequire(publicBattlepm1 != 99999 && publicBattlepm2 != 99999);\r\nuint256 i = uint256(sha256(block.timestamp, block.number-i-1)) % 100 +1;\r\nuint256 threshold = dataCalc(_pokemon1, _pokemon2);\r\n\r\nif(i <= threshold){\r\npbWinner = publicBattlepm1;\r\n}else{\r\npbWinner = publicBattlepm2;\r\n}\r\nbattleresults.push(Battlelog(_pokemon1,_pokemon2,pbWinner));\r\ndistributePrizes();\r\n\r\n}\r\n\r\nfunction distributePrizes() internal{\r\n// return 1% to the balance to keep public battle forever\r\ntotalGuess = totalGuess - totalGuess.div(100);\r\nfor(uint counter=0; counter < pokemonGuessPlayers[pbWinner].length; counter++){\r\nguesser = pokemonGuessPlayers[pbWinner][counter];\r\nif(pbWinner == publicBattlepm1){\r\nguesser.transfer(playerGuessPM1Number[guesser].mul(totalGuess).div(pokemonGuessPrize[pbWinner]));\r\n//delete playerGuessPM1Number[guesser];\r\n\r\n}else{\r\n\r\nguesser.transfer(playerGuessPM2Number[guesser].mul(totalGuess).div(pokemonGuessPrize[pbWinner]));\r\n\r\n\r\n}\r\n}\r\nuint del;\r\nif(pbWinner == publicBattlepm1){\r\ndel = publicBattlepm2;\r\n}else{\r\ndel = publicBattlepm1;\r\n}\r\n\r\nfor(uint cdel1=0; cdel1 < pokemonGuessPlayers[pbWinner].length; cdel1++){\r\nguesser = pokemonGuessPlayers[pbWinner][cdel1];\r\nif(pbWinner == publicBattlepm1){\r\ndelete playerGuessPM1Number[guesser];\r\n}else{\r\ndelete playerGuessPM2Number[guesser];\r\n}\r\n}\r\n\r\nfor(uint cdel=0; cdel < pokemonGuessPlayers[del].length; cdel++){\r\nguesser = pokemonGuessPlayers[del][cdel];\r\nif(del == publicBattlepm1){\r\ndelete playerGuessPM1Number[guesser];\r\n}else{\r\ndelete playerGuessPM2Number[guesser];\r\n}\r\n}\r\n\r\n\r\npokemonGuessNumber[publicBattlepm1]=0;\r\npokemonGuessNumber[publicBattlepm2]=0;\r\n\r\npokemonGuessPrize[publicBattlepm1]=0;\r\npokemonGuessPrize[publicBattlepm2]=0;\r\ndelete pokemonGuessPlayers[publicBattlepm2];\r\ndelete pokemonGuessPlayers[publicBattlepm1];\r\n//for(counter=0; counter < pokemonGuessPlayers[pbWinner].length; counter++){\r\n//pokemonGuessPlayers[counter].length = 0;\r\n//}\r\ncounter = 0;\r\npublicBattlepm1 = 99999;\r\npublicBattlepm2 = 99999;\r\npbWinner = 99999;\r\ntotalGuess = 0;\r\npublicbattlestart = false;\r\n}\r\n\r\nfunction dataCalc(uint _pokemon1, uint _pokemon2) public view returns (uint256 _threshold){\r\nuint _pokemontotal1;\r\nuint _pokemontotal2;\r\n\r\n// We can just leave the other fields blank:\r\n(,,_pokemontotal1) = getPokemonDetails(_pokemon1);\r\n(,,_pokemontotal2) = getPokemonDetails(_pokemon2);\r\nuint256 threshold = _pokemontotal1.mul(100).div(_pokemontotal1+_pokemontotal2);\r\nuint256 pokemonlevel1 = pokemonContract.levels(_pokemon1);\r\nuint256 pokemonlevel2 = pokemonContract.levels(_pokemon2);\r\nuint leveldiff = pokemonlevel1 - pokemonlevel2;\r\nif(pokemonlevel1 >= pokemonlevel2){\r\nthreshold = threshold.mul(11**leveldiff).div(10**leveldiff);\r\n\r\n}else{\r\n//return (100 - dataCalc(_pokemon2, _pokemon1));\r\nthreshold = 100 - dataCalc(_pokemon2, _pokemon1);\r\n}\r\nif(threshold > 90){\r\nthreshold = 90;\r\n}\r\nif(threshold < 10){\r\nthreshold = 10;\r\n}\r\n\r\nreturn threshold;\r\n\r\n}\r\n\r\n\r\n\r\n// This function will return all of the details of the pokemons\r\nfunction getBattleDetails(uint _battleId) public view returns (\r\nuint _pokemon1,\r\nuint _pokemon2,\r\nuint256 _result\r\n) {\r\nBattlelog storage _battle = battleresults[_battleId];\r\n\r\n_pokemon1 = _battle.pokemonId1;\r\n_pokemon2 = _battle.pokemonId2;\r\n_result = _battle.result;\r\n}\r\n\r\nfunction addPokemonDetails(string _pokemonName, uint _pokemonType, uint _total) public onlyContractCreator{\r\n\r\npokemoninfo.push(PokemonDetails(_pokemonName,_pokemonType,_total));\r\n}\r\n\r\n// This function will return all of the details of the pokemons\r\nfunction getPokemonDetails(uint _pokemonId) public view returns (\r\nstring _pokemonName,\r\nuint _pokemonType,\r\nuint _total\r\n) {\r\nPokemonDetails storage _pokemoninfomation = pokemoninfo[_pokemonId];\r\n\r\n_pokemonName = _pokemoninfomation.pokemonName;\r\n_pokemonType = _pokemoninfomation.pokemonType;\r\n_total = _pokemoninfomation.total;\r\n}\r\n\r\nfunction totalBattles() public view returns (uint256 _totalSupply) {\r\nreturn battleresults.length;\r\n}\r\n\r\nfunction getPokemonBet(uint _pokemonId) public view returns (uint256 _pokemonBet){\r\nreturn pokemonGuessPrize[_pokemonId];\r\n}\r\n\r\nfunction getPokemonOwner(uint _pokemonId) public view returns (\r\naddress _owner\r\n) {\r\n\r\n_owner = pokemonContract.getPokemonOwner(_pokemonId);\r\n\r\n}\r\n\r\nfunction getPublicBattlePokemon1() public view returns(uint _pokemonId1){\r\n\r\nreturn publicBattlepm1;\r\n}\r\nfunction getPublicBattlePokemon2() public view returns(uint _pokemonId1){\r\n\r\nreturn publicBattlepm2;\r\n}\r\n\r\nfunction getPokemonBetTimes(uint _pokemonId) public view returns(uint _pokemonBetTimes){\r\n\r\nreturn pokemonGuessNumber[_pokemonId];\r\n}\r\n\r\nfunction getPokemonCD(uint _pokemonId) public view returns(uint _pokemonCD){\r\nif(battleCD[_pokemonId] <= now){\r\nreturn 0;\r\n}else{\r\nreturn battleCD[_pokemonId] - now;\r\n}\r\n}\r\n\r\nfunction initialPokemonInfo() public onlyContractCreator{\r\naddPokemonDetails(\"PikaChu\" ,1, 300);\r\naddPokemonDetails(\"Ninetales\",1,505);\r\naddPokemonDetails(\"Charizard\" ,2, 534);\r\naddPokemonDetails(\"Eevee\",0,325);\r\naddPokemonDetails(\"Jigglypuff\" ,0, 270);\r\naddPokemonDetails(\"Pidgeot\",2,469);\r\naddPokemonDetails(\"Aerodactyl\" ,2, 515);\r\naddPokemonDetails(\"Bulbasaur\",0,318);\r\naddPokemonDetails(\"Abra\" ,0, 310);\r\naddPokemonDetails(\"Gengar\",2,500);\r\naddPokemonDetails(\"Hoothoot\" ,0, 262);\r\naddPokemonDetails(\"Goldeen\",0,320);\r\n\r\n}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetGamestatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialPokemonInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonCD\",\"outputs\":[{\"name\":\"_pokemonCD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonBet\",\"outputs\":[{\"name\":\"_pokemonBet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicBattlepm2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemon1\",\"type\":\"uint256\"},{\"name\":\"_pokemon2\",\"type\":\"uint256\"}],\"name\":\"dataCalc\",\"outputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPublicBattlePokemon2\",\"outputs\":[{\"name\":\"_pokemonId1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicBattlepm1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonName\",\"type\":\"string\"},{\"name\":\"_pokemonType\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"addPokemonDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPublicBattlePokemon1\",\"outputs\":[{\"name\":\"_pokemonId1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId1\",\"type\":\"uint256\"},{\"name\":\"_pokemonId2\",\"type\":\"uint256\"}],\"name\":\"initialBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateToPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"guess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devFeeAddress\",\"type\":\"address\"}],\"name\":\"setdevFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonOwner\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBattles\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicbattlestart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGuess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonDetails\",\"outputs\":[{\"name\":\"_pokemonName\",\"type\":\"string\"},{\"name\":\"_pokemonType\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"getBattleDetails\",\"outputs\":[{\"name\":\"_pokemon1\",\"type\":\"uint256\"},{\"name\":\"_pokemon2\",\"type\":\"uint256\"},{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonBetTimes\",\"outputs\":[{\"name\":\"_pokemonBetTimes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pbWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PublicBattle","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://838ac83c2d1aab22f1a337e22b0ef73442d02082a6856da1a93794a7f5fcdcca"}]}