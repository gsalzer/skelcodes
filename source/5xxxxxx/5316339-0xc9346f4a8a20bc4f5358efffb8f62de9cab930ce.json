{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Written by EtherGuy\r\n// UI: GasWar.surge.sh \r\n// Mail: etherguy@mail.com\r\n\r\ncontract GasWar{\r\n    \r\n    \r\n    // OPEN 20:00 -> 22:00 UTC \r\n  //  uint256 public UTCStart = (20 hours); \r\n//    uint256 public UTCStop = (22 hours);\r\n    \r\n    // dev \r\n    uint256 public UTCStart = (2 hours);\r\n    uint256 public UTCStop = (4 hours);\r\n    \r\n    uint256 public RoundTime = (5 minutes);\r\n    uint256 public Price = (0.005 ether);\r\n    \r\n    uint256 public RoundEndTime;\r\n    \r\n    \r\n    uint256 public GasPrice = 0;\r\n    address public Winner;\r\n    //uint256 public  Pot;\r\n    \r\n    uint256 public TakePot = 8000; // 80% \r\n    \r\n\r\n    \r\n    event GameStart(uint256 EndTime);\r\n    event GameWon(address Winner, uint256 Take);\r\n    event NewGameLeader(address Leader, uint256 GasPrice, uint256 pot);\r\n    event NewTX(uint256 pot);\r\n    \r\n    address owner;\r\n\r\n    function GasWar() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function Open() public view returns (bool){\r\n        uint256 sliced = now % (1 days);\r\n        return (sliced >= UTCStart && sliced <= UTCStop);\r\n    }\r\n    \r\n    function NextOpen() public view returns (uint256, uint256){\r\n        \r\n        uint256 sliced = now % (1 days);\r\n        if (sliced > UTCStop){\r\n            uint256 ret2 = (UTCStop) - sliced + UTCStop;\r\n            return (ret2, now + ret2);\r\n        }\r\n        else{\r\n            uint256 ret1 = (UTCStart - sliced);\r\n            return (ret1, now + ret1);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n\r\n    \r\n    function Withdraw() public {\r\n       \r\n        //_withdraw(false);\r\n        // check game withdraws from now on, false prevent re-entrancy\r\n        CheckGameStart(false);\r\n    }\r\n    \r\n    // please no re-entrancy\r\n    function _withdraw(bool reduce_price) internal {\r\n        // One call. \r\n         require((now > RoundEndTime));\r\n        require (Winner != 0x0);\r\n        \r\n        uint256 subber = 0;\r\n        if (reduce_price){\r\n            subber = Price;\r\n        }\r\n        uint256 Take = (mul(sub(address(this).balance,subber), TakePot)) / 10000;\r\n        Winner.transfer(Take);\r\n\r\n        \r\n        emit GameWon(Winner, Take);\r\n        \r\n        Winner = 0x0;\r\n        GasPrice = 0;\r\n    }\r\n    \r\n    function CheckGameStart(bool remove_price) internal returns (bool){\r\n        if (Winner != 0x0){\r\n            // if game open remove price from balance \r\n            // this is to make sure winner does not get extra eth from new round.\r\n            _withdraw(remove_price && Open()); // sorry mate, much gas.\r\n\r\n        }\r\n        if (Winner == 0x0 && Open()){\r\n            Winner = msg.sender; // from withdraw the gas max is 0.\r\n            RoundEndTime = now + RoundTime;\r\n            emit GameStart(RoundEndTime);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // Function to start game without spending gas. \r\n    //function PublicCheckGameStart() public {\r\n    //    require(now > RoundEndTime);\r\n    //    CheckGameStart();\r\n    //}\r\n    // reverted; allows contract drain @ inactive, this should not be the case.\r\n        \r\n    function BuyIn() public payable {\r\n        // We are not going to do any retarded shit here \r\n        // If you send too much or too less ETH you get rejected \r\n        // Gas Price is OK but burning lots of it is BS \r\n        // Sending a TX is 21k gas\r\n        // If you are going to win you already gotta pay 20k gas to set setting \r\n        require(msg.value == Price);\r\n        \r\n        \r\n        if (now > RoundEndTime){\r\n            bool started = CheckGameStart(true);\r\n            require(started);\r\n            GasPrice = tx.gasprice;\r\n            emit NewGameLeader(msg.sender, GasPrice, address(this).balance + (Price * 95)/100);\r\n        }\r\n        else{\r\n            if (tx.gasprice > GasPrice){\r\n                GasPrice = tx.gasprice;\r\n                Winner = msg.sender;\r\n                emit NewGameLeader(msg.sender, GasPrice, address(this).balance + (Price * 95)/100);\r\n            }\r\n        }\r\n        \r\n        // not reverted \r\n        \r\n        owner.transfer((msg.value * 500)/10000); // 5%\r\n        \r\n        emit NewTX(address(this).balance + (Price * 95)/100);\r\n    }\r\n    \r\n    // Dev functions to change settings after this line \r\n \r\n     // dev close game \r\n     // instructions \r\n     // send v=10000 to this one \r\n    function SetTakePot(uint256 v) public {\r\n        require(msg.sender==owner);\r\n        require (v <= 10000);\r\n        require(v >= 1000); // do not set v <10% prevent contract blackhole; \r\n        TakePot = v;\r\n    }\r\n    \r\n    function SetTimes(uint256 NS, uint256 NE) public {\r\n        require(msg.sender==owner);\r\n        require(NS < (1 days));\r\n        require(NE < (1 days));\r\n        UTCStart = NS;\r\n        UTCStop = NE;\r\n    }\r\n    \r\n    function SetPrice(uint256 p) public {\r\n        require(msg.sender == owner);\r\n        require(!Open() && (Winner == 0x0)); // dont change game price while running you retard\r\n        Price = p;\r\n    }    \r\n    \r\n    function SetRoundTime(uint256 p) public{\r\n        require(msg.sender == owner);\r\n        require(!Open() && (Winner == 0x0));\r\n        RoundTime = p;\r\n    }   \r\n \r\n \r\n \r\n \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n \r\n \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"BuyIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NS\",\"type\":\"uint256\"},{\"name\":\"NE\",\"type\":\"uint256\"}],\"name\":\"SetTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"SetRoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UTCStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UTCStop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TakePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"SetTakePot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"EndTime\",\"type\":\"uint256\"}],\"name\":\"GameStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Take\",\"type\":\"uint256\"}],\"name\":\"GameWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Leader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"GasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"NewGameLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"NewTX\",\"type\":\"event\"}]","ContractName":"GasWar","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63bde94820a6838cc9a9fbd4e2fbfd3fe5d7200562276546d4640e5d8a89e842"}]}