{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nGame: Dragon Ball Super ( Tournament of Power )\r\nDomain: EtherDragonBall.com\r\n*/\r\n\r\ncontract DragonBallZ {\r\n    \r\n    //The contract creator and dev fee addresses are defined here\r\n\taddress contractCreator = 0x606A19ea257aF8ED76D160Ad080782C938660A33;\r\n    address devFeeAddress = 0xAe406d5900DCe1bB7cF3Bc5e92657b5ac9cBa34B;\r\n\r\n\tstruct Hero {\r\n\t\tstring heroName;\r\n\t\taddress ownerAddress;\r\n\t\taddress DBZHeroOwnerAddress;\r\n\t\tuint256 currentPrice;\r\n\t\tuint currentLevel;\r\n\t}\r\n\tHero[] heroes;\r\n\t\r\n\t//The number of heroes in Tournament of Power\r\n\tuint256 heroMax = 55;\r\n\t\r\n\t//The array defined for winner variable\r\n    uint256[] winners;\r\n\r\n\r\n\tmodifier onlyContractCreator() {\r\n        require (msg.sender == contractCreator);\r\n        _;\r\n    }\r\n\r\n    bool isPaused;\r\n    \r\n    \r\n    /*\r\n    We use the following functions to pause and unpause the game.\r\n    */\r\n    function pauseGame() public onlyContractCreator {\r\n        isPaused = true;\r\n    }\r\n    function unPauseGame() public onlyContractCreator {\r\n        isPaused = false;\r\n    }\r\n    function GetGamestatus() public view returns(bool) {\r\n        return(isPaused);\r\n    }\r\n\r\n    /*\r\n    This function allows users to purchase Tournament of Power heroes \r\n    The price is automatically multiplied by 2 after each purchase.\r\n    Users can purchase multiple heroes.\r\n    */\r\n\tfunction purchaseHero(uint _heroId) public payable {\r\n\t    //Check if current price of hero is equal with the price entered to purchase the hero\r\n\t\trequire(msg.value == heroes[_heroId].currentPrice);\r\n\t\t\r\n\t\t//Check if the game is not PAUSED\r\n\t\trequire(isPaused == false);\r\n\t\t\r\n\t\t// Calculate the 10% of Tournament of Power prize fee\r\n\t\tuint256 TournamentPrizeFee = (msg.value / 10); // => 10%\r\n\t    \r\n\t\t// Calculate the 5% - Dev fee\r\n\t\tuint256 devFee = ((msg.value / 10)/2);  // => 5%\r\n\t\t\r\n\t\t// Calculate the 10% commission - Dragon Ball Z Hero Owner\r\n\t\tuint256 DBZHeroOwnerCommission = (msg.value / 10); // => 10%\r\n\r\n\t\t// Calculate the current hero owner commission on this sale & transfer the commission to the owner.\t\t\r\n\t\tuint256 commissionOwner = (msg.value - (devFee + TournamentPrizeFee + DBZHeroOwnerCommission)); \r\n\t\theroes[_heroId].ownerAddress.transfer(commissionOwner); // => 75%\r\n\r\n\t\t// Transfer the 10% commission to the DBZ Hero Owner\r\n\t\theroes[_heroId].DBZHeroOwnerAddress.transfer(DBZHeroOwnerCommission); // => 10% \t\t\t\t\t\t\t\t\r\n\r\n\t\t\r\n\t\t// Transfer the 5% commission to the Dev\r\n\t\tdevFeeAddress.transfer(devFee); // => 5% \r\n\t\t\r\n\t\t//The hero will be leveled up after new purchase\r\n\t\theroes[_heroId].currentLevel +=1;\r\n\r\n\t\t// Update the hero owner and set the new price (2X)\r\n\t\theroes[_heroId].ownerAddress = msg.sender;\r\n\t\theroes[_heroId].currentPrice = mul(heroes[_heroId].currentPrice, 2);\r\n\t}\r\n\t\r\n\t/*\r\n\tThis function will be used to update the details of DBZ hero details by the contract creator\r\n\t*/\r\n\tfunction updateDBZHeroDetails(uint _heroId, string _heroName,address _ownerAddress, address _newDBZHeroOwnerAddress, uint _currentLevel) public onlyContractCreator{\r\n\t    require(heroes[_heroId].ownerAddress != _newDBZHeroOwnerAddress);\r\n\t\theroes[_heroId].heroName = _heroName;\t\t\r\n\t\theroes[_heroId].ownerAddress = _ownerAddress;\r\n\t    heroes[_heroId].DBZHeroOwnerAddress = _newDBZHeroOwnerAddress;\r\n\t    heroes[_heroId].currentLevel = _currentLevel;\r\n\t}\r\n\t\r\n\t/*\r\n\tThis function can be used by the owner of a hero to modify the price of its hero.\r\n\tThe hero owner can make the price lesser than the current price only.\r\n\t*/\r\n\tfunction modifyCurrentHeroPrice(uint _heroId, uint256 _newPrice) public {\r\n\t    require(_newPrice > 0);\r\n\t    require(heroes[_heroId].ownerAddress == msg.sender);\r\n\t    require(_newPrice < heroes[_heroId].currentPrice);\r\n\t    heroes[_heroId].currentPrice = _newPrice;\r\n\t}\r\n\t\r\n\t// This function will return all of the details of the Tournament of Power heroes\r\n\tfunction getHeroDetails(uint _heroId) public view returns (\r\n        string heroName,\r\n        address ownerAddress,\r\n        address DBZHeroOwnerAddress,\r\n        uint256 currentPrice,\r\n        uint currentLevel\r\n    ) {\r\n        Hero storage _hero = heroes[_heroId];\r\n\r\n        heroName = _hero.heroName;\r\n        ownerAddress = _hero.ownerAddress;\r\n        DBZHeroOwnerAddress = _hero.DBZHeroOwnerAddress;\r\n        currentPrice = _hero.currentPrice;\r\n        currentLevel = _hero.currentLevel;\r\n    }\r\n    \r\n    // This function will return only the price of a specific hero\r\n    function getHeroCurrentPrice(uint _heroId) public view returns(uint256) {\r\n        return(heroes[_heroId].currentPrice);\r\n    }\r\n    \r\n    // This function will return only the price of a specific hero\r\n    function getHeroCurrentLevel(uint _heroId) public view returns(uint256) {\r\n        return(heroes[_heroId].currentLevel);\r\n    }\r\n    \r\n    // This function will return only the owner address of a specific hero\r\n    function getHeroOwner(uint _heroId) public view returns(address) {\r\n        return(heroes[_heroId].ownerAddress);\r\n    }\r\n    \r\n    // This function will return only the DBZ owner address of a specific hero\r\n    function getHeroDBZHeroAddress(uint _heroId) public view returns(address) {\r\n        return(heroes[_heroId].DBZHeroOwnerAddress);\r\n    }\r\n    \r\n    // This function will return only Tournament of Power total prize\r\n    function getTotalPrize() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n    \r\n    /**\r\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n\t// This function will be used to add a new hero by the contract creator\r\n\tfunction addHero(string _heroName, address _ownerAddress, address _DBZHeroOwnerAddress, uint256 _currentPrice, uint _currentLevel) public onlyContractCreator {\r\n        heroes.push(Hero(_heroName,_ownerAddress,_DBZHeroOwnerAddress,_currentPrice,_currentLevel));\r\n    }\r\n     \r\n    /*\r\n\tThis function will be used by the contract creator to generate 5 heroes ID randomly out of 55 heroes\r\n\tand it can be generated only once and cannot be altered at all even by contractCreator\r\n\t*/   \r\n    function getWinner() public onlyContractCreator returns (uint256[]) {\r\n        uint i;\r\n\t\t\r\n\t\t//Loop to generate 5 random hero IDs from 55 heroes\t\r\n\t\tfor(i=0;i<=4;i++){\r\n\t\t    //Block timestamp and number used to generate the random number\r\n\t\t\twinners.push(uint256(sha256(block.timestamp, block.number-i-1)) % heroMax);\r\n\t\t}\r\n\t\t\r\n\t\treturn winners;\r\n    }\r\n\r\n    // This function will return only the winner's hero id\r\n    function getWinnerDetails(uint _winnerId) public view returns(uint256) {\r\n        return(winners[_winnerId]);\r\n    }\r\n    \r\n    /*\r\n\tThis function can be used by the contractCreator to start the payout to the lucky 5 winners\r\n\tThe payout will be initiated in a week time\r\n\t*/\r\n    function payoutWinners() public onlyContractCreator {\r\n        //Assign 20% of total contract eth\r\n        uint256 TotalPrize20PercentShare = (this.balance/5);\r\n        uint i;\r\n\t\t\tfor(i=0;i<=4;i++){\r\n\t\t\t    // Get the hero ID from getWinnerDetails function - Randomly generated\r\n\t\t\t    uint _heroID = getWinnerDetails(i);\r\n\t\t\t    // Assign the owner address of hero ID - Randomly generated\r\n\t\t\t    address winner = heroes[_heroID].ownerAddress;\r\n\t\t\t    \r\n\t\t\t    if(winner != address(0)){\r\n\t\t\t     // Transfer the 20% of total contract eth to each winner (5 winners in total)  \r\n                 winner.transfer(TotalPrize20PercentShare);\t\t\t       \r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    // Reset the winner's address after payout for next loop\r\n\t\t\t    winner = address(0);\r\n\t\t\t}\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetGamestatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getHeroDBZHeroAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroName\",\"type\":\"string\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"_DBZHeroOwnerAddress\",\"type\":\"address\"},{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_currentLevel\",\"type\":\"uint256\"}],\"name\":\"addHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getHeroCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"},{\"name\":\"_heroName\",\"type\":\"string\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"_newDBZHeroOwnerAddress\",\"type\":\"address\"},{\"name\":\"_currentLevel\",\"type\":\"uint256\"}],\"name\":\"updateDBZHeroDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_winnerId\",\"type\":\"uint256\"}],\"name\":\"getWinnerDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getHeroOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getHeroDetails\",\"outputs\":[{\"name\":\"heroName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"DBZHeroOwnerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"currentLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getHeroCurrentLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"modifyCurrentHeroPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"purchaseHero\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DragonBallZ","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aaff9a2a2d5b649a3c9dfef98688aa41fe115b1e8814e6f52e6fadf167a7dda7"}]}