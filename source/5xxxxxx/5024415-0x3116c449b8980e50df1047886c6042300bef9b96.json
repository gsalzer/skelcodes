{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function totalSupply() public view returns (uint256 total);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n  //Events\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract CryptoColors is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Released event is fired whenever a new color is released.\r\n  event Released(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The ColorSold event is fired whenever a color is sold.\r\n  event ColorSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  /// ownership is assigned, including initial color listings.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CryptoColors\";\r\n  string public constant SYMBOL = \"COLOR\";\r\n\r\n  uint256 private constant PROMO_CREATION_LIMIT = 1000000;\r\n  uint256 private startingPrice = 0.001 ether;\r\n  uint256 private firstStepLimit =  0.05 ether;\r\n  uint256 private secondStepLimit = 0.5 ether;\r\n\r\n\r\n  /*** STORAGE ***/\r\n  /// @dev A mapping from color IDs to the address that owns them. All colors have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public colorIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from colorIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each color can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public colorIndexToApproved;\r\n\r\n  // @dev A mapping from colorIDs to the price of the token.\r\n  mapping (uint256 => uint256) private colorIndexToPrice;\r\n\r\n  // The address of the CEO\r\n  address public ceoAddress;\r\n\r\n  // Keeps track of the total promo colors released\r\n  uint256 public promoCreatedCount;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Color{\r\n    uint8 R;\r\n    uint8 G;\r\n    uint8 B;\r\n    string name;\r\n  }\r\n\r\n  // Storage array of all colors. Indexed by colorId.\r\n  Color[] private colors;\r\n\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function CryptoColors() public {\r\n    ceoAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to clear all approvals.\r\n  /// @param _tokenId The ID of the color that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    colorIndexToApproved[_tokenId] = _to;\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new color with the given name, with given _price and assignes it to an address.\r\n  function createPromoColor(uint256 _R, uint256 _G, uint256 _B, string _name, address _owner, uint256 _price) public onlyCEO {\r\n    require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n    address colorOwner = _owner;\r\n    if (colorOwner == address(0)) {\r\n      colorOwner = ceoAddress;\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      _price = startingPrice;\r\n    }\r\n\r\n    promoCreatedCount++;\r\n    _createColor(_R, _G, _B, _name, colorOwner, _price);\r\n  }\r\n\r\n  /// @dev Creates a new color with the given name and assigns it to the contract.\r\n  function createContractColor(uint256 _R, uint256 _G, uint256 _B, string _name) public onlyCEO {\r\n    _createColor(_R, _G, _B, _name, address(this), startingPrice);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific color.\r\n  /// @param _tokenId The Id of the color of interest.\r\n  function getColor(uint256 _tokenId) public view returns (uint256 R, uint256 G, uint256 B, string colorName, uint256 sellingPrice, address owner) {\r\n    Color storage col = colors[_tokenId];\r\n\r\n    R = col.R;\r\n    G = col.G;\r\n    B = col.B;\r\n    colorName = col.name;\r\n    sellingPrice = colorIndexToPrice[_tokenId];\r\n    owner = colorIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The colorId for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n    owner = colorIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCEO {\r\n    _payout(_to);\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = colorIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = colorIndexToPrice[_tokenId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 93), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    // Update prices\r\n    if (sellingPrice < firstStepLimit) {\r\n      // first stage\r\n      colorIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 93);\r\n    } else if (sellingPrice < secondStepLimit) {\r\n      // second stage\r\n      colorIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 93);\r\n    } else {\r\n      // third stage\r\n      colorIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 93);\r\n    }\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment);\r\n    }\r\n\r\n    ColorSold(_tokenId, sellingPrice, colorIndexToPrice[_tokenId], oldOwner, newOwner, colors[_tokenId].name);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return colorIndexToPrice[_tokenId];\r\n  }\r\n\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a color\r\n  /// @param _tokenId The ID of the color that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = colorIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose color tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire colors array looking for colors belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalcolors = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 colorId;\r\n      for (colorId = 0; colorId <= totalcolors; colorId++) {\r\n        if (colorIndexToOwner[colorId] == _owner) {\r\n          result[resultIndex] = colorId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return colors.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the color that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(address _to, uint256 _tokenId) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the color that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return colorIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating color\r\n  function _createColor(uint256 _R, uint256 _G, uint256 _B, string _name, address _owner, uint256 _price) private {\r\n    require(_R == uint256(uint8(_R)));\r\n    require(_G == uint256(uint8(_G)));\r\n    require(_B == uint256(uint8(_B)));\r\n\r\n    Color memory _color = Color({\r\n        R: uint8(_R),\r\n        G: uint8(_G),\r\n        B: uint8(_B),\r\n        name: _name\r\n    });\r\n\r\n    uint256 newColorId = colors.push(_color) - 1;\r\n\r\n    require(newColorId == uint256(uint32(newColorId)));\r\n\r\n    Released(newColorId, _name, _owner);\r\n\r\n    colorIndexToPrice[newColorId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newColorId);\r\n  }\r\n\r\n  /// Check for color ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == colorIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Color to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of colors is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    colorIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new colors _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete colorIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_R\",\"type\":\"uint256\"},{\"name\":\"_G\",\"type\":\"uint256\"},{\"name\":\"_B\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createContractColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getColor\",\"outputs\":[{\"name\":\"R\",\"type\":\"uint256\"},{\"name\":\"G\",\"type\":\"uint256\"},{\"name\":\"B\",\"type\":\"uint256\"},{\"name\":\"colorName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_R\",\"type\":\"uint256\"},{\"name\":\"_G\",\"type\":\"uint256\"},{\"name\":\"_B\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createPromoColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ColorSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoColors","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a42ba70f60dec83788110a0bee1e6e96eafb37d83a6c72530916f9ce65c5d74"}]}