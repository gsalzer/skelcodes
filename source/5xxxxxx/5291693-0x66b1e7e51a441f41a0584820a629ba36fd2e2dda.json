{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TheRichestWins {\r\n    using SafeMath for uint256;\r\n\r\n    address contractOwner;\r\n    uint tokenStartPrice = 0.001 ether;\r\n    uint tokenStartPrice2 = 0.001483239697419133 ether;  // sqrt(2.2) = 1,483239697419133\r\n    uint tokenPrice;\r\n    uint tokenPrice2;\r\n    address tokenOwner;\r\n    address tokenOwner2;\r\n    uint lastBuyBlock;\r\n    uint newRoundDelay = 40;\r\n\r\n    address public richestPlayer;\r\n    uint public highestPrice;\r\n\r\n    uint public round;\r\n    uint public flips;\r\n    uint payoutRound;\r\n    uint public richestRoundId;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event NewRound(uint paidPrice, uint win, address winner);\r\n    event RichestBonus(uint win, address richestPlayer);\r\n\r\n\r\n    function TheRichestWins() public {\r\n        contractOwner = msg.sender;\r\n        tokenOwner = address(0);\r\n        lastBuyBlock = block.number; \r\n        tokenPrice = tokenStartPrice;\r\n        tokenPrice2 = tokenStartPrice2;\r\n    }\r\n\r\n    function getRoundId() public view returns(uint) {\r\n        return round*1000000+flips;\r\n    }\r\n\r\n    function changeNewRoundDelay(uint delay) public {\r\n        require(contractOwner == msg.sender);\r\n        newRoundDelay = delay;\r\n    }\r\n    function changeContractOwner(address newOwner) public {\r\n        require(contractOwner == msg.sender);\r\n        contractOwner = newOwner;\r\n    }\r\n    \r\n\r\n    function buyToken() public payable {\r\n        address currentOwner;\r\n        uint256 currentPrice;\r\n        uint256 paidTooMuch;\r\n        uint256 payment;\r\n\r\n        if (tokenPrice < tokenPrice2) {\r\n            currentOwner = tokenOwner;\r\n            currentPrice = tokenPrice;\r\n            require(tokenOwner2 != msg.sender);\r\n        } else {\r\n            currentOwner = tokenOwner2;\r\n            currentPrice = tokenPrice2;\r\n            require(tokenOwner != msg.sender);\r\n        }\r\n        require(msg.value >= currentPrice);\r\n\r\n        paidTooMuch = msg.value.sub(currentPrice);\r\n        payment = currentPrice.div(2);\r\n\r\n        if (tokenPrice < tokenPrice2) {\r\n            tokenPrice = currentPrice.mul(110).div(50);\r\n            tokenOwner = msg.sender;\r\n        } else {\r\n            tokenPrice2 = currentPrice.mul(110).div(50);\r\n            tokenOwner2 = msg.sender;\r\n        }\r\n        lastBuyBlock = block.number;\r\n        flips++;\r\n\r\n        Transfer(currentOwner, msg.sender, currentPrice);\r\n\r\n        if (currentOwner != address(0)) {\r\n            payoutRound = getRoundId()-3;\r\n            currentOwner.call.value(payment).gas(24000)();\r\n        }\r\n        if (paidTooMuch > 0)\r\n            msg.sender.transfer(paidTooMuch);\r\n    }\r\n\r\n    function getBlocksToNextRound() public view returns(uint) {\r\n        if (lastBuyBlock + newRoundDelay < block.number) {\r\n            return 0;\r\n        }\r\n        return lastBuyBlock + newRoundDelay + 1 - block.number;\r\n    }\r\n\r\n    function getPool() public view returns(uint balance) {\r\n        balance = this.balance;\r\n    }\r\n\r\n    function finishRound() public {\r\n        require(tokenPrice > tokenStartPrice);\r\n        require(lastBuyBlock + newRoundDelay < block.number);\r\n\r\n        lastBuyBlock = block.number;\r\n        address owner = tokenOwner;\r\n        uint price = tokenPrice;\r\n        if (tokenPrice2>tokenPrice) {\r\n            owner = tokenOwner2;\r\n            price = tokenPrice2;\r\n        }\r\n        uint lastPaidPrice = price.mul(50).div(110);\r\n        uint win = this.balance - lastPaidPrice;\r\n\r\n        if (highestPrice < lastPaidPrice) {\r\n            richestPlayer = owner;\r\n            highestPrice = lastPaidPrice;\r\n            richestRoundId = getRoundId()-1;\r\n        }\r\n\r\n        tokenPrice = tokenStartPrice;\r\n        tokenPrice2 = tokenStartPrice2;\r\n        tokenOwner = address(0);\r\n        tokenOwner2 = address(0);\r\n\r\n        payoutRound = getRoundId()-1;\r\n        flips = 0;\r\n        round++;\r\n        NewRound(lastPaidPrice, win / 2, owner);\r\n\r\n        contractOwner.transfer((this.balance - (lastPaidPrice + win / 2) - win / 10) * 19 / 20);\r\n        owner.call.value(lastPaidPrice + win / 2).gas(24000)();\r\n        if (richestPlayer!=address(0)) {\r\n            payoutRound = richestRoundId;\r\n            RichestBonus(win / 10, richestPlayer);\r\n            richestPlayer.call.value(win / 10).gas(24000)();\r\n        }\r\n    }\r\n\r\n    function getPayoutRoundId() public view returns(uint) {\r\n        return payoutRound;\r\n    }\r\n    function getPrice() public view returns(uint) {\r\n        if (tokenPrice2<tokenPrice)\r\n            return tokenPrice2;\r\n        return tokenPrice;\r\n    }\r\n\r\n    function getCurrentData() public view returns (uint price, uint nextPrice, uint pool, address winner, address looser, bool canFinish, uint nextPool, uint win, uint nextWin) {\r\n        winner = tokenOwner;\r\n        looser = tokenOwner2;\r\n        price = tokenPrice2;\r\n        nextPrice = tokenPrice;\r\n        if (tokenPrice2>tokenPrice) {\r\n            winner = tokenOwner2;\r\n            looser = tokenOwner;\r\n            price = tokenPrice;\r\n            nextPrice = tokenPrice2;\r\n        }\r\n        canFinish = (tokenPrice > tokenStartPrice) && (lastBuyBlock + newRoundDelay < block.number);\r\n        pool = getPool();\r\n        if (price == tokenStartPrice) {\r\n            nextPool = pool + price;\r\n            win = 0;\r\n        } else if (price == tokenStartPrice2) {\r\n            nextPool = pool + price;\r\n            win = (pool-nextPrice.mul(50).div(110))/2;\r\n        } else {\r\n            nextPool = pool + price / 2;\r\n            win = (pool-nextPrice.mul(50).div(110))/2;\r\n        }\r\n        nextWin = (nextPool-price)/2;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeContractOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"richestRoundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentData\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"looser\",\"type\":\"address\"},{\"name\":\"canFinish\",\"type\":\"bool\"},{\"name\":\"nextPool\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"nextWin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"changeNewRoundDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flips\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksToNextRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayoutRoundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRoundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"richestPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"richestPlayer\",\"type\":\"address\"}],\"name\":\"RichestBonus\",\"type\":\"event\"}]","ContractName":"TheRichestWins","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65fdae3a3a620a2fc395a285a2a9013aef771543d982538ea92e4a7005491912"}]}