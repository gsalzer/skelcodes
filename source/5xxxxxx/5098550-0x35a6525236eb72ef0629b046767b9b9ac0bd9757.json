{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (C) 2017-2018 Hashfuture Inc. All rights reserved.\r\n */\r\n\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Bet4Land is owned {\r\n\r\n    /* Struct for one game */\r\n    struct Game {\r\n        uint gameId;            // Unique id for a game\r\n        bytes8 landKey;         // Unique key for a land, derived from longitude and latitude\r\n        uint seedBlock;         // Block number whose hash as random seed\r\n        uint userNum;           // Number of users joined this game, maximum 100\r\n        string content;         // Full content of one game\r\n    }\r\n\r\n    uint gameNum;\r\n    /* This notes all games and a map from gameId to gameIdx */\r\n    mapping(uint => Game) games;\r\n    mapping(uint => uint) indexMap;\r\n\r\n    /** constructor */\r\n    function Bet4Land() public {\r\n        gameNum = 1;\r\n    }\r\n\r\n    /**\r\n     * Initialize a new game\r\n     */\r\n    function newGame(uint gameId, bytes8 landKey, uint seedBlock, uint userNum, string content) onlyOwner public returns (uint gameIndex) {\r\n        require(indexMap[gameId] == 0);             // gameId should be unique\r\n        gameIndex = gameNum++;\r\n        indexMap[gameId] = gameIndex;\r\n        games[gameIndex] = Game(gameId, landKey, seedBlock, userNum, content);\r\n    }\r\n\r\n    /**\r\n     * Get game info by index\r\n     * Only can be called by newOwner\r\n     */\r\n    function getGameInfoByIndex(uint gameIndex) onlyOwner public view returns (uint gameId, bytes8 landKey, uint seedBlock, uint userNum, string content) {\r\n        require(gameIndex < gameNum);               // should exist\r\n        require(gameIndex >= 1);                    // should exist\r\n        gameId = games[gameIndex].gameId;\r\n        landKey = games[gameIndex].landKey;\r\n        seedBlock = games[gameIndex].seedBlock;\r\n        userNum = games[gameIndex].userNum;\r\n        content = games[gameIndex].content;\r\n    }\r\n\r\n    /**\r\n     * Get game info by game id\r\n     * Only can be called by newOwner\r\n     */\r\n    function getGameInfoById(uint gameId) public view returns (uint gameIndex, bytes8 landKey, uint seedBlock, uint userNum, string content) {\r\n        gameIndex = indexMap[gameId];\r\n        require(gameIndex < gameNum);              // should exist\r\n        require(gameIndex >= 1);                   // should exist\r\n        landKey = games[gameIndex].landKey;\r\n        seedBlock = games[gameIndex].seedBlock;\r\n        userNum = games[gameIndex].userNum;\r\n        content = games[gameIndex].content;\r\n    }\r\n\r\n    /**\r\n     * Get the number of games\r\n     */\r\n    function getGameNum() onlyOwner public view returns (uint num) {\r\n        num = gameNum - 1;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"landKey\",\"type\":\"bytes8\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"userNum\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"gameIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameNum\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameInfoById\",\"outputs\":[{\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"name\":\"landKey\",\"type\":\"bytes8\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"userNum\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint256\"}],\"name\":\"getGameInfoByIndex\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"landKey\",\"type\":\"bytes8\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"userNum\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bet4Land","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d8044b1e2887c899c99e46c69ddab99d5d8b120be7a19aef717c1e809064052d"}]}