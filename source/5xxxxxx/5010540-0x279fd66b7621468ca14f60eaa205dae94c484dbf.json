{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/* @dev ERC Token Standard #20 Interface (https://github.com/ethereum/EIPs/issues/20)\r\n*/\r\ncontract ERC20 {\r\n    //Use original ERC20 totalSupply function instead of public variable since\r\n    //we are mapping the functions for upgradeability\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n// Licensed under the MIT License\r\n// Copyright (c) 2017 Curvegrid Inc.\r\n\r\n\r\n/// @title OfflineSecret\r\n/// @dev The OfflineSecret contract provide functionality to verify and ensure a caller\r\n/// provides a valid secret that was exchanged offline. It offers an additional level of verification\r\n/// for sensitive contract operations.\r\ncontract OfflineSecret {\r\n\r\n    /// @dev Modifier that requires a provided plaintext match a previously stored hash\r\n    modifier validSecret(address to, string secret, bytes32 hashed) {\r\n        require(checkSecret(to, secret, hashed));\r\n        _;\r\n    }\r\n\r\n    /// @dev Generate a hash from the provided plaintext. A pure function so can (should) be\r\n    /// run off-chain.\r\n    /// @param to address The recipient address, as a salt.\r\n    /// @param secret string The secret to hash.\r\n    function generateHash(address to, string secret) public pure returns(bytes32 hashed) {\r\n        return keccak256(to, secret);\r\n    }\r\n\r\n    /// @dev Check whether a provided plaintext secret hashes to a provided hash. A pure \r\n    /// function so can (should) be run off-chain.\r\n    /// @param to address The recipient address, as a salt.\r\n    /// @param secret string The secret to hash.\r\n    /// @param hashed string The hash to check the secret against.\r\n    function checkSecret(address to, string secret, bytes32 hashed) public pure returns(bool valid) {\r\n        if (hashed == keccak256(to, secret)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n// Licensed under the MIT License\r\n// Copyright (c) 2017 Curvegrid Inc.\r\n\r\n\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies\r\n/// and the implementation of \"user permissions\".\r\ncontract OwnableWithFoundation is OfflineSecret {\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n    address public foundation;\r\n    address public newFoundationCandidate;\r\n\r\n    bytes32 public ownerHashed;\r\n    bytes32 public foundationHashed;\r\n\r\n    event OwnershipRequested(address indexed by, address indexed to, bytes32 hashed);\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event FoundationRequested(address indexed by, address indexed to, bytes32 hashed);\r\n    event FoundationTransferred(address indexed from, address indexed to);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    /// account.\r\n    function OwnableWithFoundation(address _owner) public {\r\n        foundation = msg.sender;\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @dev Reverts if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerCandidate() {\r\n        if (msg.sender != newOwnerCandidate) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Reverts if called by any account other than the foundation.\r\n    modifier onlyFoundation() {\r\n        if (msg.sender != foundation) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyFoundationCandidate() {\r\n        if (msg.sender != newFoundationCandidate) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Proposes to transfer control of the contract to a newOwnerCandidate.\r\n    /// @param _newOwnerCandidate address The address to transfer ownership to.\r\n    /// @param _ownerHashed string The hashed secret to use as protection.\r\n    function requestOwnershipTransfer(\r\n        address _newOwnerCandidate, \r\n        bytes32 _ownerHashed) \r\n        external \r\n        onlyFoundation\r\n    {\r\n        require(_newOwnerCandidate != address(0));\r\n        require(_newOwnerCandidate != owner);\r\n\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n        ownerHashed = _ownerHashed;\r\n\r\n        OwnershipRequested(msg.sender, newOwnerCandidate, ownerHashed);\r\n    }\r\n\r\n    /// @dev Accept ownership transfer. This method needs to be called by the previously proposed owner.\r\n    /// @param _ownerSecret string The secret to check against the hash.\r\n    function acceptOwnership(\r\n        string _ownerSecret) \r\n        external \r\n        onlyOwnerCandidate \r\n        validSecret(newOwnerCandidate, _ownerSecret, ownerHashed)\r\n    {\r\n        address previousOwner = owner;\r\n\r\n        owner = newOwnerCandidate;\r\n        newOwnerCandidate = address(0);\r\n\r\n        OwnershipTransferred(previousOwner, owner);\r\n    }\r\n\r\n    /// @dev Proposes to transfer control of the contract to a newFoundationCandidate.\r\n    /// @param _newFoundationCandidate address The address to transfer oversight to.\r\n    /// @param _foundationHashed string The hashed secret to use as protection.\r\n    function requestFoundationTransfer(\r\n        address _newFoundationCandidate, \r\n        bytes32 _foundationHashed) \r\n        external \r\n        onlyFoundation \r\n    {\r\n        require(_newFoundationCandidate != address(0));\r\n        require(_newFoundationCandidate != foundation);\r\n\r\n        newFoundationCandidate = _newFoundationCandidate;\r\n        foundationHashed = _foundationHashed;\r\n\r\n        FoundationRequested(msg.sender, newFoundationCandidate, foundationHashed);\r\n    }\r\n\r\n    /// @dev Accept foundation transfer. This method needs to be called by the previously proposed foundation.\r\n    /// @param _foundationSecret string The secret to check against the hash.\r\n    function acceptFoundation(\r\n        string _foundationSecret) \r\n        external \r\n        onlyFoundationCandidate \r\n        validSecret(newFoundationCandidate, _foundationSecret, foundationHashed)\r\n    {\r\n        address previousFoundation = foundation;\r\n\r\n        foundation = newFoundationCandidate;\r\n        newFoundationCandidate = address(0);\r\n\r\n        FoundationTransferred(previousFoundation, foundation);\r\n    }\r\n}\r\n\r\n/* @dev Math operations with safety checks\r\n*/\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n// Licensed under the MIT License\r\n// Copyright (c) 2017 Curvegrid Inc.\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is OwnableWithFoundation {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  function Pausable(address _owner) public OwnableWithFoundation(_owner) {\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/// @title Basic ERC20 token contract implementation.\r\n/* @dev Kin's BasicToken based on OpenZeppelin's StandardToken.\r\n*/\r\n\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => uint256) balances;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    /// @param _spender address The address which will spend the funds.\r\n    /// @param _value uint256 The amount of tokens to be spent.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n            revert();\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    /// @param _owner address The address which owns the funds.\r\n    /// @param _spender address The address which will spend the funds.\r\n    /// @return uint256 specifying the amount of tokens still available for the spender.\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    /// @dev Gets the balance of the specified address.\r\n    /// @param _owner address The address to query the the balance of.\r\n    /// @return uint256 representing the amount owned by the passed address.\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev transfer token to a specified address.\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer tokens from one address to another.\r\n    /// @param _from address The address which you want to send tokens from.\r\n    /// @param _to address The address which you want to transfer to.\r\n    /// @param _value uint256 the amount of tokens to be transferred.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n// Licensed under the MIT License\r\n// Copyright (c) 2017 Curvegrid Inc.\r\n\r\n\r\n\r\n/**\r\n * @dev ERC Token Standard #20 Interface (https://github.com/ethereum/EIPs/issues/20)\r\n *      D1Coin is the main contract for the D1 platform.\r\n */\r\ncontract D1Coin is BasicToken, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"D1 Coin\";\r\n    string public constant symbol = \"D1\";\r\n\r\n    // Thousands of a token represent the minimum usable unit of token based on\r\n    // its expected value\r\n    uint8 public constant decimals = 3;\r\n\r\n    address theCoin = address(this);\r\n\r\n    // Hashed secrets required to unlock coins transferred from one address to another address\r\n    struct ProtectedBalanceStruct {\r\n        uint256 balance;\r\n        bytes32 hashed;\r\n    }\r\n    mapping (address => mapping (address => ProtectedBalanceStruct)) protectedBalances;\r\n    uint256 public protectedSupply;\r\n\r\n    // constructor passes owner (Mint) down to Pausable() => OwnableWithFoundation()\r\n    function D1Coin(address _owner) public Pausable(_owner) {\r\n    }\r\n\r\n    event Mint(address indexed minter, address indexed receiver, uint256 value);\r\n    event ProtectedTransfer(address indexed from, address indexed to, uint256 value, bytes32 hashed);\r\n    event ProtectedUnlock(address indexed from, address indexed to, uint256 value);\r\n    event ProtectedReclaim(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /// @dev Transfer token to this contract, which is shorthand for the owner (Mint). \r\n    /// Avoids race conditions in cases where the owner has changed just before a \r\n    /// transfer is called.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function transferToMint(uint256 _value) external whenNotPaused returns (bool) {\r\n        return transfer(theCoin, _value);\r\n    }\r\n\r\n    /// @dev Approve this contract, proxy for owner (Mint), to spend the specified amount of tokens \r\n    /// on behalf of msg.sender. Avoids race conditions in cases where the owner has changed \r\n    /// just before an approve is called.\r\n    /// @param _value uint256 The amount of tokens to be spent.\r\n    function approveToMint(uint256 _value) external whenNotPaused returns (bool) {\r\n        return approve(theCoin, _value);\r\n    }\r\n\r\n    /// @dev Protected transfer tokens to this contract, which is shorthand for the owner (Mint). \r\n    /// Avoids race conditions in cases where the owner has changed just before a \r\n    /// transfer is called.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    /// @param _hashed string The hashed secret to use as protection.\r\n    function protectedTransferToMint(uint256 _value, bytes32 _hashed) external whenNotPaused returns (bool) {\r\n        return protectedTransfer(theCoin, _value, _hashed);\r\n    }\r\n\r\n    /// @dev Transfer tokens from an address to this contract, a proxy for the owner (Mint).\r\n    /// Subject to pre-approval from the address. Avoids race conditions in cases where the owner has changed \r\n    /// just before an approve is called.\r\n    /// @param _from address The address which you want to send tokens from.\r\n    /// @param _value uint256 the amount of tokens to be transferred.\r\n    function withdrawByMint(address _from, uint256 _value) external onlyOwner whenNotPaused returns (bool) {\r\n        // retrieve allowance\r\n        uint256 _allowance = allowed[_from][theCoin];\r\n\r\n        // adjust balances\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[theCoin] = balances[theCoin].add(_value);\r\n\r\n        // adjust allowance\r\n        allowed[_from][theCoin] = _allowance.sub(_value);\r\n\r\n        Transfer(_from, theCoin, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Creates a specific amount of tokens and credits them to the Mint.\r\n    /// @param _amount uint256 Amount tokens to mint.\r\n    function mint(uint256 _amount) external onlyOwner whenNotPaused {\r\n        require(_amount > 0);\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[theCoin] = balances[theCoin].add(_amount);\r\n\r\n        Mint(msg.sender, theCoin, _amount);\r\n\r\n        // optional in ERC-20 standard, but required by Etherscan\r\n        Transfer(address(0), theCoin, _amount);\r\n    }\r\n\r\n    /// @dev Retrieve the protected balance and hashed passphrase for a pending protected transfer.\r\n    /// @param _from address The address transferred from.\r\n    /// @param _to address The address transferred to.\r\n    function protectedBalance(address _from, address _to) public constant returns (uint256 balance, bytes32 hashed) {\r\n        return(protectedBalances[_from][_to].balance, protectedBalances[_from][_to].hashed);\r\n    }\r\n\r\n    /// @dev Transfer tokens to a specified address protected by a secret.\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    /// @param _hashed string The hashed secret to use as protection.\r\n    function protectedTransfer(address _to, uint256 _value, bytes32 _hashed) public whenNotPaused returns (bool) {\r\n        require(_value > 0);\r\n\r\n        // \"transfers\" to address(0) should only be by the burn() function\r\n        require(_to != address(0));\r\n\r\n        // explicitly disallow tranfer to the owner, as it's automatically translated into the coin\r\n        // in protectedUnlock() and protectedReclaim()\r\n        require(_to != owner);\r\n\r\n        address from = msg.sender;\r\n\r\n        // special case: msg.sender is the owner (Mint)\r\n        if (msg.sender == owner) {\r\n            from = theCoin;\r\n\r\n            // ensure Mint is actually holding this supply; not required below because of revert in .sub()\r\n            require(balances[theCoin].sub(protectedSupply) >= _value);\r\n        } else {\r\n            // otherwise, adjust the balances: transfer the tokens to the Mint to have them held in escrow\r\n            balances[from] = balances[from].sub(_value);\r\n            balances[theCoin] = balances[theCoin].add(_value);\r\n        }\r\n\r\n        // protected balance must be zero (unlocked or reclaimed in its entirety)\r\n        // avoid a situation similar to: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if (protectedBalances[from][_to].balance != 0) {\r\n            revert();\r\n        }\r\n\r\n        // disallow reusing the previous secret\r\n        // (not intended to prevent reuse of an N-x, x > 1 secret)\r\n        require(protectedBalances[from][_to].hashed != _hashed);\r\n\r\n        // set the protected balance and hashed value\r\n        protectedBalances[from][_to].balance = _value;\r\n        protectedBalances[from][_to].hashed = _hashed;\r\n\r\n        // adjust the protected supply\r\n        protectedSupply = protectedSupply.add(_value);\r\n\r\n        ProtectedTransfer(from, _to, _value, _hashed);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Unlock protected tokens from an address.\r\n    /// @param _from address The address to transfer from.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    /// @param _secret string The secret phrase protecting the tokens.\r\n    function protectedUnlock(address _from, uint256 _value, string _secret) external whenNotPaused returns (bool) {\r\n        address to = msg.sender;\r\n\r\n        // special case: msg.sender is the owner (Mint)\r\n        if (msg.sender == owner) {\r\n            to = theCoin;\r\n        }\r\n\r\n        // validate secret against hash\r\n        require(checkSecret(to, _secret, protectedBalances[_from][to].hashed));\r\n\r\n        // must transfer all protected tokens at once as secret will have been leaked on the blockchain\r\n        require(protectedBalances[_from][to].balance == _value);\r\n\r\n        // adjust the balances: the Mint is holding the tokens in escrow\r\n        balances[theCoin] = balances[theCoin].sub(_value);\r\n        balances[to] = balances[to].add(_value);\r\n        \r\n        // adjust the protected balances and protected supply\r\n        protectedBalances[_from][to].balance = 0;\r\n        protectedSupply = protectedSupply.sub(_value);\r\n\r\n        ProtectedUnlock(_from, to, _value);\r\n        Transfer(_from, to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Reclaim protected tokens granted to a specified address.\r\n    /// @param _to address The address to the tokens were granted to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function protectedReclaim(address _to, uint256 _value) external whenNotPaused returns (bool) {\r\n        address from = msg.sender;\r\n\r\n        // special case: msg.sender is the owner (Mint)\r\n        if (msg.sender == owner) {\r\n            from = theCoin;\r\n        } else {\r\n            // otherwise, adjust the balances: transfer the tokens to the sender from the Mint, which was holding them in escrow\r\n            balances[theCoin] = balances[theCoin].sub(_value);\r\n            balances[from] = balances[from].add(_value);\r\n        }\r\n\r\n        // must transfer all protected tokens at once\r\n        require(protectedBalances[from][_to].balance == _value);\r\n        \r\n        // adjust the protected balances and protected supply\r\n        protectedBalances[from][_to].balance = 0;\r\n        protectedSupply = protectedSupply.sub(_value);\r\n\r\n        ProtectedReclaim(from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Destroys (removes from supply) a specific amount of tokens.\r\n    /// @param _amount uint256 The amount of tokens to be burned.\r\n    function burn(uint256 _amount) external onlyOwner whenNotPaused {\r\n        // The Mint is the owner of this contract. In this implementation, the\r\n        // address of this contract (proxy for owner's account)  is used to control \r\n        // the money supply. Avoids the problem of having to transfer balances on owner change.\r\n        require(_amount > 0);\r\n        require(_amount <= balances[theCoin].sub(protectedSupply)); // account for protected balances\r\n\r\n        // adjust the balances and supply\r\n        balances[theCoin] = balances[theCoin].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n\r\n        // not part of the ERC-20 standard, but required by Etherscan\r\n        Transfer(theCoin, address(0), _amount);\r\n\r\n        Burn(theCoin, _amount);\r\n    }\r\n\r\n    /// @dev ERC20 behaviour but revert if paused\r\n    /// @param _spender address The address which will spend the funds.\r\n    /// @param _value uint256 The amount of tokens to be spent.\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /// @dev ERC20 behaviour but revert if paused\r\n    /// @param _owner address The address which owns the funds.\r\n    /// @param _spender address The address which will spend the funds.\r\n    /// @return uint256 specifying the amount of tokens still available for the spender.\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return super.allowance(_owner, _spender);\r\n    }\r\n\r\n    /// @dev ERC20 behaviour but revert if paused\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        // \"transfers\" to address(0) should only be by the burn() function\r\n        require(_to != address(0));\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev ERC20 behaviour but revert if paused\r\n    /// @param _from address The address which you want to send tokens from.\r\n    /// @param _to address The address which you want to transfer to.\r\n    /// @param _value uint256 the amount of tokens to be transferred.\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        // \"transfers\" to address(0) should only be by the burn() function\r\n        require(_to != address(0));\r\n\r\n        // special case: _from is the Mint\r\n        // note: within the current D1 Coin design, should never encounter this case\r\n        if (_from == theCoin) {\r\n            // ensure Mint is not exceeding its balance less protected supply\r\n            require(_value <= balances[theCoin].sub(protectedSupply));\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"protectedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFoundationCandidate\",\"type\":\"address\"},{\"name\":\"_foundationHashed\",\"type\":\"bytes32\"}],\"name\":\"requestFoundationTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"protectedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"hashed\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_secret\",\"type\":\"string\"}],\"name\":\"protectedUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"protectedReclaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawByMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_hashed\",\"type\":\"bytes32\"}],\"name\":\"protectedTransferToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"secret\",\"type\":\"string\"},{\"name\":\"hashed\",\"type\":\"bytes32\"}],\"name\":\"checkSecret\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationHashed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"generateHash\",\"outputs\":[{\"name\":\"hashed\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newFoundationCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"},{\"name\":\"_ownerHashed\",\"type\":\"bytes32\"}],\"name\":\"requestOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_hashed\",\"type\":\"bytes32\"}],\"name\":\"protectedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foundationSecret\",\"type\":\"string\"}],\"name\":\"acceptFoundation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerHashed\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerSecret\",\"type\":\"string\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hashed\",\"type\":\"bytes32\"}],\"name\":\"ProtectedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProtectedUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProtectedReclaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hashed\",\"type\":\"bytes32\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hashed\",\"type\":\"bytes32\"}],\"name\":\"FoundationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FoundationTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"D1Coin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083e4142225ecc3ce1a8061465d219c01b250e33a","Library":"","SwarmSource":"bzzr://873df2c2d7f135659187d5932c12147199144cb552c3ac9fe485328f84defcd9"}]}