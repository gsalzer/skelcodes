{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function toUINT112(uint256 a) internal constant returns(uint112) {\r\n    assert(uint112(a) == a);\r\n    return uint112(a);\r\n  }\r\n\r\n  function toUINT120(uint256 a) internal constant returns(uint120) {\r\n    assert(uint120(a) == a);\r\n    return uint120(a);\r\n  }\r\n\r\n  function toUINT128(uint256 a) internal constant returns(uint128) {\r\n    assert(uint128(a) == a);\r\n    return uint128(a);\r\n  }\r\n}\r\n\r\ncontract HelloToken {\r\n    using SafeMath for uint256;\r\n    // Public variables of the token\r\n    string public constant name    = \"Hello Token\";  //The Token's name\r\n    uint8 public constant decimals = 18;               //Number of decimals of the smallest unit\r\n    string public constant symbol  = \"HelloT\";            //An identifier    \r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    \r\n    // packed to 256bit to save gas usage.\r\n    struct Supplies {\r\n        // uint128's max value is about 3e38.\r\n        // it's enough to present amount of tokens\r\n        uint128 totalSupply;\r\n    }\r\n    \r\n    Supplies supplies;\r\n    \r\n    // Packed to 256bit to save gas usage.    \r\n    struct Account {\r\n        // uint112's max value is about 5e33.\r\n        // it's enough to present amount of tokens\r\n        uint112 balance;\r\n    }\r\n    \r\n\r\n    // This creates an array with all balances\r\n    mapping (address => Account) public balanceOf;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function HelloToken() public {\r\n        supplies.totalSupply = 1*(10**10) * (10 ** 18);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender].balance = uint112(supplies.totalSupply);                // Give the creator all initial tokens\r\n    }\r\n    \r\n    // Send back ether sent to me\r\n    function () {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from].balance >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to].balance + _value >= balanceOf[_to].balance);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from].balance + balanceOf[_to].balance;\r\n        // Subtract from the sender\r\n        balanceOf[_from].balance -= uint112(_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to].balance = _value.add(balanceOf[_to].balance).toUINT112();\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from].balance + balanceOf[_to].balance == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender].balance >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender].balance -= uint112(_value);            // Subtract from the sender\r\n        supplies.totalSupply -= uint128(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Total Supply\r\n     *\r\n     * View Total Supply\r\n     *\r\n     * Return Total Supply\r\n     * \r\n     */\r\n    function totalSupply() public constant returns (uint256 supply){\r\n        return supplies.totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint112\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"HelloToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c3ad35c2e9ea96c2bc5063fe6cde855d48ea80c36afe493f0ab7cb1a7d1e70d"}]}