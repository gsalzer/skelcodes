{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// HODL YOUR COINS HERE!! THE SAFEST WALLET!!\r\n\r\ncontract HODLWallet {\r\n    using SafeMath for uint256;\r\n    \r\n    address internal owner;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public withdrawalCount;\r\n    mapping(address => mapping(address => bool)) public approvals;\r\n    \r\n    uint256 public constant MAX_WITHDRAWAL = 0.002 * 1000000000000000000;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function HODLWallet(address[] addrs, uint256[] _balances) public payable {\r\n        require(addrs.length == _balances.length);\r\n        \r\n        owner = msg.sender;\r\n        \r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            balances[addrs[i]] = _balances[i];\r\n            withdrawalCount[addrs[i]] = 0;\r\n        }\r\n    }\r\n\r\n    function doWithdraw(address from, address to, uint256 amount) internal {\r\n        // only use in emergencies!\r\n        // you can only get a little at a time.\r\n        // we will hodl the rest for you.\r\n        \r\n        require(amount <= MAX_WITHDRAWAL);\r\n        require(balances[from] >= amount);\r\n        require(withdrawalCount[from] < 3);\r\n\r\n        balances[from] = balances[from].sub(amount);\r\n\r\n        to.call.value(amount)();\r\n\r\n        withdrawalCount[from] = withdrawalCount[from].add(1);\r\n    }\r\n    \r\n    function () payable public{\r\n        deposit();\r\n    }\r\n\r\n    function doDeposit(address to) internal {\r\n        require(msg.value > 0);\r\n        \r\n        balances[to] = balances[to].add(msg.value);\r\n    }\r\n    \r\n    function deposit() payable public {\r\n        // deposit as much as you want, my dudes\r\n        doDeposit(msg.sender);\r\n    }\r\n    \r\n    function depositTo(address to) payable public {\r\n        // you can even deposit for someone else!\r\n        doDeposit(to);\r\n    }\r\n    \r\n    function withdraw(uint256 amount) public {\r\n        doWithdraw(msg.sender, msg.sender, amount);\r\n    }\r\n    \r\n    function withdrawTo(address to, uint256 amount) public {\r\n        doWithdraw(msg.sender, to, amount);\r\n    }\r\n    \r\n    function withdrawFor(address from, uint256 amount) public {\r\n        require(approvals[from][msg.sender]);\r\n        doWithdraw(from, msg.sender, amount);\r\n    }\r\n    \r\n    function withdrawForTo(address from, address to, uint256 amount) public {\r\n        require(approvals[from][msg.sender]);\r\n        doWithdraw(from, to, amount);\r\n    }\r\n    \r\n    function destroy() public onlyOwner {\r\n        // we will withdraw for you when we think it's time to stop HODLing\r\n        // probably in two weeks or so after moon and/or lambo\r\n        \r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function getBalance(address toCheck) public constant returns (uint256) {\r\n        return balances[toCheck];\r\n    }\r\n    \r\n    function addBalances(address[] addrs, uint256[] _balances) public payable onlyOwner {\r\n        // in case more idio^H^H^H^HHODLers want to join\r\n        \r\n        require(addrs.length == _balances.length);\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            balances[addrs[i]] = _balances[i];\r\n            withdrawalCount[addrs[i]] = 0;\r\n        }\r\n    }\r\n    \r\n    function approve(address toApprove) public {\r\n        // in case you want to do your business from other addresses\r\n        \r\n        require(balances[msg.sender] > 0);\r\n        \r\n        approvals[msg.sender][toApprove] = true;\r\n    }\r\n    \r\n    function unapprove(address toUnapprove) public {\r\n        // in case trusting that address was a bad idea\r\n        \r\n        require(balances[msg.sender] > 0);\r\n        \r\n        approvals[msg.sender][toUnapprove] = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WITHDRAWAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toApprove\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"addBalances\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"toCheck\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toUnapprove\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"HODLWallet","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1877485cef61b12f12bbdeb0fff4fcee48741acd62d36886a382a0804f79b5da"}]}