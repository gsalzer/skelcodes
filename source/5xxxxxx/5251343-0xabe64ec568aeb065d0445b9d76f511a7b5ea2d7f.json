{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     \r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\n\r\ncontract ISponsoredLeaderboardData is AccessControl {\r\n\r\n  \r\n    uint16 public totalLeaderboards;\r\n    \r\n    //The reserved balance is the total balance outstanding on all open leaderboards. \r\n    //We keep track of this figure to prevent the developers from pulling out money currently pledged\r\n    uint public contractReservedBalance;\r\n    \r\n\r\n    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external ;\r\n        function openLeaderboard(uint8 numDays, string message) external payable ;\r\n        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external;\r\n        \r\n        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external ;\r\n    function withdrawEther() onlyCREATOR external;\r\n  function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId) ;\r\n    \r\n    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed);\r\n      function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId) onlySERAPHIM external;\r\n       function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID) onlySERAPHIM external;\r\n       function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool); \r\n        function angelOnLeaderboards(uint64 angelID) external constant returns (bool);\r\n         function petOnLeaderboards(uint64 petID) external constant returns (bool);\r\n         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) ;\r\n    function safeMult(uint x, uint y) pure internal returns(uint) ;\r\n     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) ;\r\n    function getTotalLeaderboards() public constant returns (uint16);\r\n      \r\n  \r\n        \r\n   \r\n        \r\n        \r\n        \r\n   \r\n      \r\n        \r\n   \r\n}\r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\r\n}\r\n\r\n//Note - due to not yet implemented features we could not store teams in an array. \r\n\r\ncontract SponsoredLeaderboardData is ISponsoredLeaderboardData {\r\n\r\n    /*** DATA TYPES ***/\r\n        address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\r\n    \r\n      struct Team {\r\n        uint64 angelId;\r\n        uint64 petId;\r\n        uint64 accessoryId;\r\n    }\r\n    \r\n      struct Leaderboard {\r\n        uint startTime;\r\n        uint endTime;\r\n        Team rank0;\r\n        Team rank1;\r\n        Team rank2;\r\n        Team rank3;\r\n        bool isLive;\r\n        address sponsor;\r\n        uint prize;\r\n        uint16 id;\r\n        uint8 numTeams;\r\n        string message;\r\n        bool medalsClaimed;\r\n        \r\n    }\r\n\r\n    //main storage\r\n    Leaderboard []  Leaderboards;\r\n    \r\n    uint16 public totalLeaderboards;\r\n    \r\n    uint16 minDays= 4;\r\n    uint16 maxDays = 10;\r\n    \r\n    //The reserved balance is the total balance outstanding on all open leaderboards. \r\n    //We keep track of this figure to prevent the developers from pulling out money currently pledged\r\n    uint public contractReservedBalance;\r\n    \r\n    \r\n    mapping (uint64 => bool) angelsOnLeaderboards;\r\n    mapping (uint64 => bool) petsOnLeaderboards;\r\n    mapping (uint64 => bool) accessoriesOnLeaderboards;\r\n    \r\n    \r\n    \r\n      // write functions\r\n    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external {\r\n        minDays = _minDays;\r\n        maxDays = _maxDays;\r\n       }\r\n\r\n  \r\n        function openLeaderboard(uint8 numDays, string message) external payable {\r\n            // This function is called by the sponsor to create the Leaderboard by sending money. \r\n            \r\n           if (msg.value < 10000000000000000) {revert();}\r\n         \r\n         if ((numDays < minDays) || (numDays > maxDays)) {revert();}\r\n            Leaderboard memory leaderboard;\r\n            leaderboard.startTime = now;\r\n            leaderboard.endTime = (now + (numDays * 86400));\r\n            leaderboard.isLive = true;\r\n            leaderboard.sponsor = msg.sender;\r\n            leaderboard.prize = msg.value;\r\n            leaderboard.message = message;\r\n            leaderboard.id = totalLeaderboards;\r\n            \r\n            leaderboard.medalsClaimed= false;\r\n            leaderboard.numTeams = 4;\r\n    \r\n           Leaderboards.push(leaderboard);\r\n           \r\n            Team memory team;\r\n            team.angelId = 1;\r\n            team.petId = 1;\r\n            team.accessoryId = 0;\r\n            Leaderboards[totalLeaderboards].rank1 = team;\r\n            Leaderboards[totalLeaderboards].rank2 = team;\r\n            Leaderboards[totalLeaderboards].rank3 = team;\r\n            Leaderboards[totalLeaderboards].rank0 = team;\r\n            totalLeaderboards +=1;\r\n            contractReservedBalance += msg.value;\r\n           \r\n            \r\n        }\r\n        \r\n        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external {\r\n           //will be called by the SponsoredLeaderboards contract with a certain chance after the minimum battle time. \r\n           \r\n            Leaderboard memory leaderboard;\r\n            leaderboard = Leaderboards[leaderboardId];\r\n            if (now < leaderboard.endTime) {revert();}\r\n            if (leaderboard.isLive = false) {revert();}\r\n            Leaderboards[leaderboardId].isLive = false;\r\n             IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n             \r\n             address owner1;\r\n             address owner2;\r\n             address owner3;\r\n             address owner4;\r\n             \r\n            (,,,,,,,,,,owner1) = angelCardData.getAngel(Leaderboards[leaderboardId].rank0.angelId);\r\n            (,,,,,,,,,,owner2) = angelCardData.getAngel(Leaderboards[leaderboardId].rank1.angelId);\r\n            (,,,,,,,,,,owner3) = angelCardData.getAngel(Leaderboards[leaderboardId].rank2.angelId);\r\n            (,,,,,,,,,,owner4) = angelCardData.getAngel(Leaderboards[leaderboardId].rank3.angelId);\r\n            uint prize = Leaderboards[leaderboardId].prize;\r\n            \r\n            owner1.transfer(SafeDiv(safeMult(prize,45), 100));\r\n            owner2.transfer(SafeDiv(safeMult(prize,25), 100));\r\n            owner3.transfer(SafeDiv(safeMult(prize,15), 100));\r\n            owner4.transfer(SafeDiv(safeMult(prize,5), 100));\r\n    \r\n            //Free up cards to be on other Leaderboards\r\n            \r\n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank0.angelId] = false;\r\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank0.petId] = false;\r\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank0.accessoryId] = false;\r\n         \r\n             \r\n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank1.angelId] = false;\r\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank1.petId] = false;\r\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank1.accessoryId] = false;\r\n        \r\n            \r\n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank2.angelId] = false;\r\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank2.petId] = false;\r\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank2.accessoryId] = false;\r\n        \r\n            \r\n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank3.angelId] = false;\r\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank3.petId] = false;\r\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank3.accessoryId] = false;\r\n            \r\n            \r\n            \r\n            contractReservedBalance= contractReservedBalance -  SafeDiv(safeMult(prize,90), 100);\r\n        }\r\n  \r\n        \r\n        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external {\r\n            Leaderboards[leaderboardId].medalsClaimed = true;\r\n        }\r\n        \r\nfunction withdrawEther() external onlyCREATOR {\r\n    //make sure we can't transfer out balance for leaderboards that aren't open. \r\n    creatorAddress.transfer(this.balance-contractReservedBalance);\r\n}\r\n\r\n    // Call to get the specified team at a certain position of a certain board. \r\n   function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId)   {\r\n      \r\n        if ((leaderboardId <0) || (rank <0) || (rank >3) || (leaderboardId > totalLeaderboards)) {revert();}\r\n        if (rank == 0) {\r\n       angelId = Leaderboards[leaderboardId].rank0.angelId;\r\n       petId = Leaderboards[leaderboardId].rank0.petId;\r\n       accessoryId = Leaderboards[leaderboardId].rank0.accessoryId;\r\n       return;\r\n        }\r\n         if (rank == 1) {\r\n       angelId = Leaderboards[leaderboardId].rank1.angelId;\r\n       petId = Leaderboards[leaderboardId].rank1.petId;\r\n       accessoryId = Leaderboards[leaderboardId].rank1.accessoryId;\r\n       return;\r\n        }\r\n          if (rank == 2) {\r\n       angelId = Leaderboards[leaderboardId].rank2.angelId;\r\n       petId = Leaderboards[leaderboardId].rank2.petId;\r\n       accessoryId = Leaderboards[leaderboardId].rank2.accessoryId;\r\n       return;\r\n        }\r\n          if (rank == 3) {\r\n       angelId = Leaderboards[leaderboardId].rank3.angelId;\r\n       petId = Leaderboards[leaderboardId].rank3.petId;\r\n       accessoryId = Leaderboards[leaderboardId].rank3.accessoryId;\r\n       return;\r\n        }\r\n    \r\n\r\n   }\r\n    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed) {\r\n            Leaderboard memory leaderboard;\r\n            leaderboard = Leaderboards[id];\r\n            startTime = leaderboard.startTime;\r\n            endTime = leaderboard.endTime;\r\n            isLive = leaderboard.isLive;\r\n            sponsor = leaderboard.sponsor;\r\n            prize = leaderboard.prize;\r\n            numTeams = leaderboard.numTeams;\r\n            message = leaderboard.message;\r\n            medalsClaimed = leaderboard.medalsClaimed;\r\n    }\r\n    \r\n     \r\n\r\n\r\n        function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId)  onlySERAPHIM external  {\r\n         //to be used when a team successfully challenges the last spot and knocks the prvious team out.   \r\n         \r\n                Team memory team;\r\n               //remove old team from mappings\r\n                team = Leaderboards[leaderboardId].rank3;\r\n                angelsOnLeaderboards[Leaderboards[leaderboardId].rank3.angelId] = false;\r\n               petsOnLeaderboards[Leaderboards[leaderboardId].rank3.petId] = false;\r\n               accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank3.accessoryId] = false;\r\n                \r\n                //Add new team to end\r\n              Leaderboards[leaderboardId].rank3.angelId = angelId;\r\n              Leaderboards[leaderboardId].rank3.petId = petId;\r\n              Leaderboards[leaderboardId].rank3.accessoryId = accessoryId;\r\n              \r\n              angelsOnLeaderboards[angelId] = true;\r\n               petsOnLeaderboards[petId] = true;\r\n               accessoriesOnLeaderboards[accessoryId] = true;\r\n           \r\n            \r\n            \r\n        }\r\n        function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID ) onlySERAPHIM external {\r\n        //put team 1 from spot to spot+1 and put team 2 to spot. \r\n    \r\n                Team memory team;\r\n                team.angelId = angel1ID;\r\n                team.petId = pet1ID;\r\n                team.accessoryId = accessory1ID;\r\n                if (spot == 0) {Leaderboards[leaderboardId].rank1 = team;}\r\n                if (spot == 1) {Leaderboards[leaderboardId].rank2 = team;}\r\n                if (spot == 2) {Leaderboards[leaderboardId].rank3 = team;}\r\n                \r\n                team.angelId = angel2ID;\r\n                team.petId = pet2ID;\r\n                team.accessoryId = accessory2ID;\r\n            \r\n                if (spot == 0) {Leaderboards[leaderboardId].rank0 = team;}\r\n                if (spot == 1) {Leaderboards[leaderboardId].rank1 = team;}\r\n                if (spot == 2) {Leaderboards[leaderboardId].rank2 = team;}\r\n        \r\n        }\r\n        \r\n        \r\n        function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool) {\r\n          \r\n               if (spot == 0) {\r\n                   if (Leaderboards[leaderboardId].rank0.angelId == angelID) {return true;}\r\n               }\r\n               if (spot == 1) {\r\n                   if (Leaderboards[leaderboardId].rank1.angelId == angelID) {return true;}\r\n               }\r\n               if (spot == 2) {\r\n                   if (Leaderboards[leaderboardId].rank2.angelId == angelID) {return true;}\r\n               }\r\n                 if (spot == 3) {\r\n                   if (Leaderboards[leaderboardId].rank3.angelId == angelID) {return true;}\r\n               }\r\n               \r\n               \r\n                return false;\r\n                \r\n        }\r\n        \r\n        //each angel can only be on ONE sponsored leaderboard at a time. \r\n        function angelOnLeaderboards(uint64 angelID) external constant returns (bool) {\r\n           \r\n            return angelsOnLeaderboards[angelID]; \r\n        }\r\n        \r\n        //each pet can only be on ONE sponsored leaderboard at a time. \r\n         function petOnLeaderboards(uint64 petID) external constant returns (bool) {\r\n           \r\n            return petsOnLeaderboards[petID]; \r\n        }\r\n        \r\n        //Each Accessory can only be on one sponsored leaderboard\r\n         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) {\r\n           \r\n            return accessoriesOnLeaderboards[accessoryID]; \r\n        }\r\n        \r\n       \r\n    \r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    /// Read access\r\n     }\r\n   \r\n   \r\n    function getTotalLeaderboards() public constant returns (uint16) {\r\n        return totalLeaderboards;\r\n    }\r\n      \r\n  \r\n        \r\n   \r\n        \r\n        \r\n        \r\n   \r\n      \r\n        \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"angelID\",\"type\":\"uint64\"}],\"name\":\"angelOnLeaderboards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numDays\",\"type\":\"uint8\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"openLeaderboard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractReservedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessoryID\",\"type\":\"uint64\"}],\"name\":\"accessoryOnLeaderboards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getLeaderboard\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"isLive\",\"type\":\"bool\"},{\"name\":\"sponsor\",\"type\":\"address\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"numTeams\",\"type\":\"uint8\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"medalsClaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"}],\"name\":\"setMedalsClaimed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"}],\"name\":\"closeLeaderboard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"petID\",\"type\":\"uint64\"}],\"name\":\"petOnLeaderboards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"},{\"name\":\"spot\",\"type\":\"uint8\"},{\"name\":\"angel1ID\",\"type\":\"uint64\"},{\"name\":\"pet1ID\",\"type\":\"uint64\"},{\"name\":\"accessory1ID\",\"type\":\"uint64\"},{\"name\":\"angel2ID\",\"type\":\"uint64\"},{\"name\":\"pet2ID\",\"type\":\"uint64\"},{\"name\":\"accessory2ID\",\"type\":\"uint64\"}],\"name\":\"switchRankings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"},{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"accessoryId\",\"type\":\"uint64\"}],\"name\":\"newTeamOnEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLeaderboards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"},{\"name\":\"spot\",\"type\":\"uint8\"},{\"name\":\"angelID\",\"type\":\"uint64\"}],\"name\":\"verifyPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minDays\",\"type\":\"uint8\"},{\"name\":\"_maxDays\",\"type\":\"uint8\"}],\"name\":\"setMinMaxDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"},{\"name\":\"rank\",\"type\":\"uint8\"}],\"name\":\"getTeamFromLeaderboard\",\"outputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"petId\",\"type\":\"uint64\"},{\"name\":\"accessoryId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalLeaderboards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SponsoredLeaderboardData","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52b2e29f20114b8937efddb39dc29581d8d13012d09699e1eb9a5ec30c89344d"}]}