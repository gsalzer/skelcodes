{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/SeeleToken.sol\r\n\r\n/// @title SeeleToken Contract\r\n/// For more information about this token sale, please visit https://seele.pro\r\n/// @author reedhong\r\ncontract SeeleToken is PausableToken {\r\n    using SafeMath for uint;\r\n\r\n    /// Constant token specific fields\r\n    string public constant name = \"SeeleToken\";\r\n    string public constant symbol = \"Seele\";\r\n    uint public constant decimals = 18;\r\n\r\n    /// seele total tokens supply\r\n    uint public currentSupply;\r\n\r\n    /// Fields that are only changed in constructor\r\n    /// seele sale  contract\r\n    address public minter; \r\n\r\n    /// Fields that can be changed by functions\r\n    mapping (address => uint) public lockedBalances;\r\n\r\n    /// claim flag\r\n    bool public claimedFlag;  \r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n    modifier onlyMinter {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier canClaimed {\r\n        require(claimedFlag == true);\r\n        _;\r\n    }\r\n\r\n    modifier maxTokenAmountNotReached (uint amount){\r\n        require(currentSupply.add(amount) <= totalSupply);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * CONSTRUCTOR \r\n     * \r\n     * @dev Initialize the Seele Token\r\n     * @param _minter The SeeleCrowdSale Contract \r\n     * @param _maxTotalSupply total supply token    \r\n     */\r\n    function SeeleToken(address _minter, address _admin, uint _maxTotalSupply) \r\n        public \r\n        validAddress(_admin)\r\n        validAddress(_minter)\r\n        {\r\n        minter = _minter;\r\n        totalSupply = _maxTotalSupply;\r\n        claimedFlag = false;\r\n        paused = true;\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    /**\r\n     * EXTERNAL FUNCTION \r\n     * \r\n     * @dev SeeleCrowdSale contract instance mint token\r\n     * @param receipent The destination account owned mint tokens    \r\n     * @param amount The amount of mint token\r\n     * @param isLock Lock token flag\r\n     * be sent to this address.\r\n     */\r\n\r\n    function mint(address receipent, uint amount, bool isLock)\r\n        external\r\n        onlyMinter\r\n        maxTokenAmountNotReached(amount)\r\n        returns (bool)\r\n    {\r\n        if (isLock ) {\r\n            lockedBalances[receipent] = lockedBalances[receipent].add(amount);\r\n        } else {\r\n            balances[receipent] = balances[receipent].add(amount);\r\n        }\r\n        currentSupply = currentSupply.add(amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function setClaimedFlag(bool flag) \r\n        public\r\n        onlyOwner \r\n    {\r\n        claimedFlag = flag;\r\n    }\r\n\r\n     /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    /// @dev Locking period has passed - Locked tokens have turned into tradeable\r\n    function claimTokens(address[] receipents)\r\n        external\r\n        onlyOwner\r\n        canClaimed\r\n    {        \r\n        for (uint i = 0; i < receipents.length; i++) {\r\n            address receipent = receipents[i];\r\n            balances[receipent] = balances[receipent].add(lockedBalances[receipent]);\r\n            lockedBalances[receipent] = 0;\r\n        }\r\n    }\r\n\r\n    function airdrop(address[] receipents, uint[] tokens)\r\n        external\r\n    {        \r\n        for (uint i = 0; i < receipents.length; i++) {\r\n            address receipent = receipents[i];\r\n            uint token = tokens[i];\r\n            if(balances[msg.sender] >= token ){\r\n                balances[msg.sender] = balances[msg.sender].sub(token);\r\n                balances[receipent] = balances[receipent].add(token);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/SeeleTokenLock.sol\r\n\r\n/**\r\n * @title SeeleTokenLock\r\n * @dev SeeleTokenLock for lock some seele token\r\n */\r\ncontract SeeleTokenLock is Ownable {\r\n    using SafeMath for uint;\r\n\r\n\r\n    SeeleToken public token;\r\n\r\n    // timestamp when token release is enabled\r\n    uint public firstPrivateLockTime =  90 days;\r\n    uint public secondPrivateLockTime = 180 days;\r\n    uint public minerLockTime = 120 days;\r\n    \r\n    // release time\r\n    uint public firstPrivateReleaseTime = 0;\r\n    uint public secondPrivateReleaseTime = 0;\r\n    uint public minerRelaseTime = 0;\r\n    \r\n    // amount\r\n    uint public firstPrivateLockedAmount = 160000000 ether;\r\n    uint public secondPrivateLockedAmount = 80000000 ether;\r\n    uint public minerLockedAmount = 300000000 ether;\r\n\r\n    address public privateLockAddress;\r\n    address public minerLockAddress;\r\n\r\n    uint public lockedAt = 0; \r\n\r\n    //Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0);\r\n        _;\r\n    }\r\n\r\n    modifier locked {\r\n        require(lockedAt > 0);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n\r\n    function SeeleTokenLock(address _seeleToken, address _privateLockAddress,  address _minerLockAddress) \r\n        public \r\n        validAddress(_seeleToken)\r\n        validAddress(_privateLockAddress)\r\n        validAddress(_minerLockAddress) \r\n        {\r\n\r\n        token = SeeleToken(_seeleToken);\r\n        privateLockAddress = _privateLockAddress;\r\n        minerLockAddress = _minerLockAddress;\r\n    }\r\n\r\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\r\n    //Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() public \r\n        notLocked  \r\n        onlyOwner \r\n        {\r\n        // Transfer all tokens on this contract back to the owner\r\n        require(token.transfer(owner, token.balanceOf(address(this))));\r\n    }\r\n\r\n\r\n    function lock() public \r\n        notLocked \r\n        onlyOwner \r\n        {\r\n            \r\n        uint totalLockedAmount = firstPrivateLockedAmount.add(secondPrivateLockedAmount);\r\n        totalLockedAmount = totalLockedAmount.add(minerLockedAmount);\r\n\r\n        require(token.balanceOf(address(this)) == totalLockedAmount);\r\n        \r\n        lockedAt = block.timestamp;\r\n\r\n        firstPrivateReleaseTime = lockedAt.add(firstPrivateLockTime);\r\n        secondPrivateReleaseTime = lockedAt.add(secondPrivateLockTime);\r\n        minerRelaseTime = lockedAt.add(minerLockTime);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers tokens held by timelock to private.\r\n    */\r\n    function unlockFirstPrivate() public \r\n        locked \r\n        onlyOwner\r\n        {\r\n        require(block.timestamp >= firstPrivateReleaseTime);\r\n        require(firstPrivateLockedAmount > 0);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount >= firstPrivateLockedAmount);\r\n\r\n        token.transfer(privateLockAddress, firstPrivateLockedAmount);\r\n        firstPrivateLockedAmount = 0;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Transfers tokens held by timelock to private.\r\n    */\r\n    function unlockSecondPrivate() public \r\n        locked \r\n        onlyOwner\r\n        {\r\n        require(block.timestamp >= secondPrivateReleaseTime);\r\n        require(secondPrivateLockedAmount > 0);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount >= secondPrivateLockedAmount);\r\n\r\n        token.transfer(privateLockAddress, secondPrivateLockedAmount);\r\n        secondPrivateLockedAmount = 0;\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers tokens held by timelock to miner.\r\n    */\r\n    function unlockMiner() public \r\n        locked \r\n        onlyOwner\r\n        {\r\n        require(block.timestamp >= minerRelaseTime);\r\n        require(minerLockedAmount > 0);\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount >= minerLockedAmount);\r\n        token.transfer(minerLockAddress, minerLockedAmount);\r\n\r\n        minerLockedAmount = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstPrivateLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPrivateLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPrivateLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPrivateLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockFirstPrivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerRelaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockSecondPrivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPrivateReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPrivateReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_seeleToken\",\"type\":\"address\"},{\"name\":\"_privateLockAddress\",\"type\":\"address\"},{\"name\":\"_minerLockAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SeeleTokenLock","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b1eef147028e9f480dbc5ccaa3277d417d1b85f00000000000000000000000001ea379c97b9a6da993dd7d73669a0dafd188cffd00000000000000000000000010e6ce3018776c20e0f6df41f615661123e255f7","Library":"","SwarmSource":"bzzr://975298f5e3654e665f755e80f21d40c4f18ad96ebe7a5fdba0d042ed0e1c7c4c"}]}