{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ShortAddressProtection {\r\n\r\n    modifier onlyPayloadSize(uint256 numwords) {\r\n        assert(msg.data.length >= numwords * 32 + 4);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, ShortAddressProtection {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool) {\r\n        //require user to set to zero before resetting to nonzero\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) onlyPayloadSize(2) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) onlyPayloadSize(2) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title MintableToken token\r\n */\r\ncontract MintableToken is Ownable, StandardToken {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    address public saleAgent;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier onlySaleAgent() {\r\n        require(msg.sender == saleAgent);\r\n        _;\r\n    }\r\n\r\n    function setSaleAgent(address _saleAgent) onlyOwner public {\r\n        require(_saleAgent != address(0));\r\n        saleAgent = _saleAgent;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlySaleAgent canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlySaleAgent canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Token is MintableToken {\r\n    string public constant name = \"TOKPIE\";\r\n    string public constant symbol = \"TKP\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedCrowdsale\r\n * @dev Crowdsale in which only whitelisted users can contribute.\r\n */\r\ncontract WhitelistedCrowdsale is Ownable {\r\n\r\n    mapping(address => bool) public whitelist;\r\n\r\n    /**\r\n     * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n     */\r\n    modifier isWhitelisted(address _beneficiary) {\r\n        require(whitelist[_beneficiary]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds single address to whitelist.\r\n     * @param _beneficiary Address to be added to the whitelist\r\n     */\r\n    function addToWhitelist(address _beneficiary) external onlyOwner {\r\n        whitelist[_beneficiary] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n     * @param _beneficiaries Addresses to be added to the whitelist\r\n     */\r\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal;\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Refunding, Closed}\r\n\r\n    mapping(address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    /**\r\n     * @param _wallet Vault address\r\n     */\r\n    function RefundVault(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    /**\r\n     * @param investor Investor address\r\n     */\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    /**\r\n     * @param investor Investor address\r\n     */\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\ncontract preICO is FinalizableCrowdsale, WhitelistedCrowdsale {\r\n    Token public token;\r\n\r\n    // May 01, 2018 @ UTC 0:01\r\n    uint256 public startDate;\r\n\r\n    // May 14, 2018 @ UTC 23:59\r\n    uint256 public endDate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public constant rate = 1920;\r\n\r\n    uint256 public constant softCap = 500 * (1 ether);\r\n\r\n    uint256 public constant hardCap = 1000 * (1 ether);\r\n\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault public vault;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev _wallet where collect funds during crowdsale\r\n     * @dev _startDate should be 1525132860\r\n     * @dev _endDate should be 1526342340\r\n     * @dev _maxEtherPerInvestor should be 10 ether\r\n     */\r\n    function preICO(address _token, address _wallet, uint256 _startDate, uint256 _endDate) public {\r\n        require(_token != address(0) && _wallet != address(0));\r\n        require(_endDate > _startDate);\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n        token = Token(_token);\r\n        vault = new RefundVault(_wallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful\r\n     */\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether funding goal was reached.\r\n     * @return Whether funding goal was reached\r\n     */\r\n    function goalReached() public view returns (bool) {\r\n        return weiRaised >= softCap;\r\n    }\r\n\r\n    /**\r\n     * @dev vault finalization task, called when owner calls finalize()\r\n     */\r\n    function finalization() internal {\r\n        require(hasEnded());\r\n        if (goalReached()) {\r\n            vault.close();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) whenNotPaused isWhitelisted(beneficiary) isWhitelisted(msg.sender) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n        require(!hasEnded());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // Minimum contribution level in TKP tokens for each investor = 100 TKP\r\n        require(tokens >= 100 * (10 ** 18));\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        return !isFinalized && now >= startDate && msg.value != 0;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return (now > endDate || weiRaised >= hardCap);\r\n    }\r\n}\r\n\r\ncontract ICO is Pausable, WhitelistedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    Token public token;\r\n\r\n    // June 01, 2018 @ UTC 0:01\r\n    uint256 public startDate;\r\n\r\n    // July 05, 2018 on UTC 23:59\r\n    uint256 public endDate;\r\n\r\n    uint256 public hardCap;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    address public wallet;\r\n\r\n    mapping(address => uint256) public deposited;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev _wallet where collect funds during crowdsale\r\n     * @dev _startDate should be 1527811260\r\n     * @dev _endDate should be 1530835140\r\n     * @dev _maxEtherPerInvestor should be 10 ether\r\n     * @dev _hardCap should be 8700 ether\r\n     */\r\n    function ICO(address _token, address _wallet, uint256 _startDate, uint256 _endDate, uint256 _hardCap) public {\r\n        require(_token != address(0) && _wallet != address(0));\r\n        require(_endDate > _startDate);\r\n        require(_hardCap > 0);\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n        hardCap = _hardCap;\r\n        token = Token(_token);\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function claimFunds() onlyOwner public {\r\n        require(hasEnded());\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function getRate() public view returns (uint256) {\r\n        if (now < startDate || hasEnded()) return 0;\r\n\r\n        // Period: from June 01, 2018 @ UTC 0:01 to June 7, 2018 @ UTC 23:59; Price: 1 ETH = 1840 TKP\r\n        if (now >= startDate && now < startDate + 604680) return 1840;\r\n        // Period: from June 08, 2018 @ UTC 0:00 to June 14, 2018 @ UTC 23:59; Price: 1 ETH = 1760 TKP\r\n        if (now >= startDate + 604680 && now < startDate + 1209480) return 1760;\r\n        // Period: from June 15, 2018 @ UTC 0:00 to June 21, 2018 @ UTC 23:59; Price: 1 ETH = 1680 TKP\r\n        if (now >= startDate + 1209480 && now < startDate + 1814280) return 1680;\r\n        // Period: from June 22, 2018 @ UTC 0:00 to June 28, 2018 @ UTC 23:59; Price: 1 ETH = 1648 TKP\r\n        if (now >= startDate + 1814280 && now < startDate + 2419080) return 1648;\r\n        // Period: from June 29, 2018 @ UTC 0:00 to July 5, 2018 @ UTC 23:59; Price: 1 ETH = 1600 TKP\r\n        if (now >= startDate + 2419080) return 1600;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) whenNotPaused isWhitelisted(beneficiary) isWhitelisted(msg.sender) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n        require(!hasEnded());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(getRate());\r\n\r\n        // Minimum contribution level in TKP tokens for each investor = 100 TKP\r\n        require(tokens >= 100 * (10 ** 18));\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        return now >= startDate && msg.value != 0;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return (now > endDate || weiRaised >= hardCap);\r\n    }\r\n}\r\n\r\ncontract postICO is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    Token public token;\r\n\r\n    address public walletE;\r\n    address public walletB;\r\n    address public walletC;\r\n    address public walletF;\r\n    address public walletG;\r\n\r\n    // 05.07.18 @ UTC 23:59\r\n    uint256 public endICODate;\r\n\r\n    bool public finished = false;\r\n\r\n    uint256 public FTST;\r\n\r\n    // Save complete of transfers (due to schedule) to these wallets \r\n    mapping(uint8 => bool) completedE;\r\n    mapping(uint8 => bool) completedBC;\r\n\r\n    uint256 public paymentSizeE;\r\n    uint256 public paymentSizeB;\r\n    uint256 public paymentSizeC;\r\n\r\n    /**\r\n     * @dev _endICODate should be 1530835140\r\n     */\r\n    function postICO(\r\n        address _token,\r\n        address _walletE,\r\n        address _walletB,\r\n        address _walletC,\r\n        address _walletF,\r\n        address _walletG,\r\n        uint256 _endICODate\r\n    ) public {\r\n        require(_token != address(0));\r\n        require(_walletE != address(0));\r\n        require(_walletB != address(0));\r\n        require(_walletC != address(0));\r\n        require(_walletF != address(0));\r\n        require(_walletG != address(0));\r\n        require(_endICODate >= now);\r\n\r\n        token = Token(_token);\r\n        endICODate = _endICODate;\r\n\r\n        walletE = _walletE;\r\n        walletB = _walletB;\r\n        walletC = _walletC;\r\n        walletF = _walletF;\r\n        walletG = _walletG;\r\n    }\r\n\r\n    function finish() onlyOwner public {\r\n        require(now > endICODate);\r\n        require(!finished);\r\n        require(token.saleAgent() == address(this));\r\n\r\n        FTST = token.totalSupply().mul(100).div(65);\r\n\r\n        // post ICO token allocation: 35% of final total supply of tokens (FTST) will be distributed to the wallets E, B, C, F, G due to the schedule described below. Where FTST = the number of tokens sold during crowdsale x 100 / 65.\r\n        // Growth reserve: 21% (4-years lock). Distribute 2.625% of the final total supply of tokens (FTST*2625/100000) 8 (eight) times every half a year during 4 (four) years after the endICODate to the wallet [E].\r\n        // hold this tokens on postICO contract\r\n        paymentSizeE = FTST.mul(2625).div(100000);\r\n        uint256 tokensE = paymentSizeE.mul(8);\r\n        token.mint(this, tokensE);\r\n\r\n        // Team: 9.6% (2-years lock).\r\n        // Distribute 0.25% of final total supply of tokens (FTST*25/10000) 4 (four) times every half a year during 2 (two) years after endICODate to the wallet [B].\r\n        // hold this tokens on postICO contract\r\n        paymentSizeB = FTST.mul(25).div(10000);\r\n        uint256 tokensB = paymentSizeB.mul(4);\r\n        token.mint(this, tokensB);\r\n\r\n        // Distribute 2.15% of final total supply of tokens (FTST*215/10000) 4 (four) times every half a year during 2 (two) years after endICODate to the wallet [C]. \r\n        // hold this tokens on postICO contract\r\n        paymentSizeC = FTST.mul(215).div(10000);\r\n        uint256 tokensC = paymentSizeC.mul(4);\r\n        token.mint(this, tokensC);\r\n\r\n        // Angel investors: 2%. Distribute 2% of final total supply of tokens (FTST*2/100) after endICODate to the wallet [F].\r\n        uint256 tokensF = FTST.mul(2).div(100);\r\n        token.mint(walletF, tokensF);\r\n\r\n        // Referral program 1,3% + Bounty program: 1,1%. Distribute 2,4% of final total supply of tokens (FTST*24/1000) after endICODate to the wallet [G]. \r\n        uint256 tokensG = FTST.mul(24).div(1000);\r\n        token.mint(walletG, tokensG);\r\n\r\n        token.finishMinting();\r\n        finished = true;\r\n    }\r\n\r\n    function claimTokensE(uint8 order) onlyOwner public {\r\n        require(finished);\r\n        require(order >= 1 && order <= 8);\r\n        require(!completedE[order]);\r\n\r\n        // On January 03, 2019 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 1) {\r\n            // Thursday, 3 January 2019 г., 23:59:00\r\n            require(now >= endICODate + 15724800);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On July 05, 2019 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 2) {\r\n            // Friday, 5 July 2019 г., 23:59:00\r\n            require(now >= endICODate + 31536000);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On January 03, 2020 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 3) {\r\n            // Friday, 3 January 2020 г., 23:59:00\r\n            require(now >= endICODate + 47260800);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On July 04, 2020 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 4) {\r\n            // Saturday, 4 July 2020 г., 23:59:00\r\n            require(now >= endICODate + 63072000);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On January 02, 2021 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 5) {\r\n            // Saturday, 2 January 2021 г., 23:59:00\r\n            require(now >= endICODate + 78796800);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On July 04, 2021 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 6) {\r\n            // Sunday, 4 July 2021 г., 23:59:00\r\n            require(now >= endICODate + 94608000);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On January 02, 2022 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 7) {\r\n            // Sunday, 2 January 2022 г., 23:59:00\r\n            require(now >= endICODate + 110332800);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n        // On July 04, 2022@ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\r\n        if (order == 8) {\r\n            // Monday, 4 July 2022 г., 23:59:00\r\n            require(now >= endICODate + 126144000);\r\n            token.transfer(walletE, paymentSizeE);\r\n            completedE[order] = true;\r\n        }\r\n    }\r\n\r\n    function claimTokensBC(uint8 order) onlyOwner public {\r\n        require(finished);\r\n        require(order >= 1 && order <= 4);\r\n        require(!completedBC[order]);\r\n\r\n        // On January 03, 2019 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\r\n        if (order == 1) {\r\n            // Thursday, 3 January 2019 г., 23:59:00\r\n            require(now >= endICODate + 15724800);\r\n            token.transfer(walletB, paymentSizeB);\r\n            token.transfer(walletC, paymentSizeC);\r\n            completedBC[order] = true;\r\n        }\r\n        // On July 05, 2019 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\r\n        if (order == 2) {\r\n            // Friday, 5 July 2019 г., 23:59:00\r\n            require(now >= endICODate + 31536000);\r\n            token.transfer(walletB, paymentSizeB);\r\n            token.transfer(walletC, paymentSizeC);\r\n            completedBC[order] = true;\r\n        }\r\n        // On January 03, 2020 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\r\n        if (order == 3) {\r\n            // Friday, 3 January 2020 г., 23:59:00\r\n            require(now >= endICODate + 47260800);\r\n            token.transfer(walletB, paymentSizeB);\r\n            token.transfer(walletC, paymentSizeC);\r\n            completedBC[order] = true;\r\n        }\r\n        // On July 04, 2020 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\r\n        if (order == 4) {\r\n            // Saturday, 4 July 2020 г., 23:59:00\r\n            require(now >= endICODate + 63072000);\r\n            token.transfer(walletB, paymentSizeB);\r\n            token.transfer(walletC, paymentSizeC);\r\n            completedBC[order] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Controller is Ownable {\r\n    Token public token;\r\n    preICO public pre;\r\n    ICO public ico;\r\n    postICO public post;\r\n\r\n    enum State {NONE, PRE_ICO, ICO, POST}\r\n\r\n    State public state;\r\n\r\n    function Controller(address _token, address _preICO, address _ico, address _postICO) public {\r\n        require(_token != address(0x0));\r\n        token = Token(_token);\r\n        pre = preICO(_preICO);\r\n        ico = ICO(_ico);\r\n        post = postICO(_postICO);\r\n\r\n        require(post.endICODate() == ico.endDate());\r\n\r\n        require(pre.weiRaised() == 0);\r\n        require(ico.weiRaised() == 0);\r\n\r\n        require(token.totalSupply() == 0);\r\n        state = State.NONE;\r\n    }\r\n\r\n    function startPreICO() onlyOwner public {\r\n        require(state == State.NONE);\r\n        require(token.owner() == address(this));\r\n        token.setSaleAgent(pre);\r\n        state = State.PRE_ICO;\r\n    }\r\n\r\n    function startICO() onlyOwner public {\r\n        require(now > pre.endDate());\r\n        require(state == State.PRE_ICO);\r\n        require(token.owner() == address(this));\r\n        token.setSaleAgent(ico);\r\n        state = State.ICO;\r\n    }\r\n\r\n    function startPostICO() onlyOwner public {\r\n        require(now > ico.endDate());\r\n        require(state == State.ICO);\r\n        require(token.owner() == address(this));\r\n        token.setSaleAgent(post);\r\n        state = State.POST;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"walletB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentSizeE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"order\",\"type\":\"uint8\"}],\"name\":\"claimTokensBC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICODate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"order\",\"type\":\"uint8\"}],\"name\":\"claimTokensE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentSizeC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentSizeB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletF\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FTST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_walletE\",\"type\":\"address\"},{\"name\":\"_walletB\",\"type\":\"address\"},{\"name\":\"_walletC\",\"type\":\"address\"},{\"name\":\"_walletF\",\"type\":\"address\"},{\"name\":\"_walletG\",\"type\":\"address\"},{\"name\":\"_endICODate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"postICO","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000085da32246e44be963f67361a6e317684ffb9b91f000000000000000000000000041481693613a1eb83331ac6b6a79c1a1246fb340000000000000000000000000f04b0ba186023399cd94807fb352ee5527fe9ea000000000000000000000000aa3b930bc5dc8fd7a3f4ba080d523e578f66706200000000000000000000000009b8c1d50b720151b634691d615a8ce8ca6cc340000000000000000000000000348a044b350b07c3eb1c3be285869be9268d72d3000000000000000000000000000000000000000000000000000000005b3eb0c4","Library":"","SwarmSource":"bzzr://3953829fc106cf0ddc02d724d43b7e25f4e790471023a531e4e1e08293eef843"}]}