{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n    Contract Features interface\r\n*/\r\ncontract IContractFeatures {\r\n    function isSupported(address _contract, uint256 _features) public view returns (bool);\r\n    function enableFeatures(uint256 _features, bool _enable) public;\r\n}\r\n\r\n/**\r\n    Contract Features\r\n\r\n    Generic contract that allows every contract on the blockchain to define which features it supports.\r\n    Other contracts can query this contract to find out whether a given contract on the\r\n    blockchain supports a certain feature.\r\n    Each contract type can define its own list of feature flags.\r\n    Features can be only enabled/disabled by the contract they are defined for.\r\n\r\n    Features should be defined by each contract type as bit flags, e.g. -\r\n    uint256 public constant FEATURE1 = 1 << 0;\r\n    uint256 public constant FEATURE2 = 1 << 1;\r\n    uint256 public constant FEATURE3 = 1 << 2;\r\n    ...\r\n*/\r\ncontract ContractFeatures is IContractFeatures {\r\n    mapping (address => uint256) private featureFlags;\r\n\r\n    event FeaturesAddition(address indexed _address, uint256 _features);\r\n    event FeaturesRemoval(address indexed _address, uint256 _features);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    function ContractFeatures() public {\r\n    }\r\n\r\n    /**\r\n        @dev returns true if a given contract supports the given feature(s), false if not\r\n\r\n        @param _contract    contract address to check support for\r\n        @param _features    feature(s) to check for\r\n\r\n        @return true if the contract supports the feature(s), false if not\r\n    */\r\n    function isSupported(address _contract, uint256 _features) public view returns (bool) {\r\n        return (featureFlags[_contract] & _features) == _features;\r\n    }\r\n\r\n    /**\r\n        @dev allows a contract to enable/disable certain feature(s)\r\n\r\n        @param _features    feature(s) to enable/disable\r\n        @param _enable      true to enable the feature(s), false to disabled them\r\n    */\r\n    function enableFeatures(uint256 _features, bool _enable) public {\r\n        if (_enable) {\r\n            if (isSupported(msg.sender, _features))\r\n                return;\r\n\r\n            featureFlags[msg.sender] |= _features;\r\n\r\n            emit FeaturesAddition(msg.sender, _features);\r\n        } else {\r\n            if (!isSupported(msg.sender, _features))\r\n                return;\r\n\r\n            featureFlags[msg.sender] &= ~_features;\r\n\r\n            emit FeaturesRemoval(msg.sender, _features);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_features\",\"type\":\"uint256\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableFeatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_features\",\"type\":\"uint256\"}],\"name\":\"isSupported\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_features\",\"type\":\"uint256\"}],\"name\":\"FeaturesAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_features\",\"type\":\"uint256\"}],\"name\":\"FeaturesRemoval\",\"type\":\"event\"}]","ContractName":"ContractFeatures","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1fe51a06ebe9a9a0f22e884d764c4edbdf2c3372a51b2a841c0a39c43718e1fb"}]}