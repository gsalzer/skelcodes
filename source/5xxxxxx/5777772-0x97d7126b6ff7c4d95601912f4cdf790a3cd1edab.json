{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/ConversionRatesInterface.sol\r\n\r\ninterface ConversionRatesInterface {\r\n\r\n    function recordImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public;\r\n\r\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\r\n}\r\n\r\n// File: contracts/LiquidityFormula.sol\r\n\r\ncontract UtilMath {\r\n    uint public constant BIG_NUMBER = (uint(1)<<uint(200));\r\n\r\n    function checkMultOverflow(uint x, uint y) public pure returns(bool) {\r\n        if (y == 0) return false;\r\n        return (((x*y) / y) != x);\r\n    }\r\n\r\n    function compactFraction(uint p, uint q, uint precision) public pure returns (uint, uint) {\r\n        if (q < precision * precision) return (p, q);\r\n        return compactFraction(p/precision, q/precision, precision);\r\n    }\r\n\r\n    /* solhint-disable code-complexity */\r\n    function exp(uint p, uint q, uint precision) public pure returns (uint) {\r\n        uint n = 0;\r\n        uint nFact = 1;\r\n        uint currentP = 1;\r\n        uint currentQ = 1;\r\n\r\n        uint sum = 0;\r\n        uint prevSum = 0;\r\n\r\n        while (true) {\r\n            if (checkMultOverflow(currentP, precision)) return sum;\r\n            if (checkMultOverflow(currentQ, nFact)) return sum;\r\n\r\n            sum += (currentP * precision) / (currentQ * nFact);\r\n\r\n            if (sum == prevSum) return sum;\r\n            prevSum = sum;\r\n\r\n            n++;\r\n\r\n            if (checkMultOverflow(currentP, p)) return sum;\r\n            if (checkMultOverflow(currentQ, q)) return sum;\r\n            if (checkMultOverflow(nFact, n)) return sum;\r\n\r\n            currentP *= p;\r\n            currentQ *= q;\r\n            nFact *= n;\r\n\r\n            (currentP, currentQ) = compactFraction(currentP, currentQ, precision);\r\n        }\r\n    }\r\n    /* solhint-enable code-complexity */\r\n\r\n    function countLeadingZeros(uint p, uint q) public pure returns (uint) {\r\n        uint denomator = (uint(1)<<255);\r\n        for (int i = 255; i >= 0; i--) {\r\n            if ((q*denomator)/denomator != q) {\r\n                // overflow\r\n                denomator = denomator/2;\r\n                continue;\r\n            }\r\n            if (p/(q*denomator) > 0) return uint(i);\r\n            denomator = denomator/2;\r\n        }\r\n\r\n        return uint(-1);\r\n    }\r\n\r\n    // log2 for a number that it in [1,2)\r\n    function log2ForSmallNumber(uint x, uint numPrecisionBits) public pure returns (uint) {\r\n        uint res = 0;\r\n        uint one = (uint(1)<<numPrecisionBits);\r\n        uint two = 2 * one;\r\n        uint addition = one;\r\n\r\n        require((x >= one) && (x <= two));\r\n        require(numPrecisionBits < 125);\r\n\r\n        for (uint i = numPrecisionBits; i > 0; i--) {\r\n            x = (x*x) / one;\r\n            addition = addition/2;\r\n            if (x >= two) {\r\n                x = x/2;\r\n                res += addition;\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function logBase2 (uint p, uint q, uint numPrecisionBits) public pure returns (uint) {\r\n        uint n = 0;\r\n        uint precision = (uint(1)<<numPrecisionBits);\r\n\r\n        if (p > q) {\r\n            n = countLeadingZeros(p, q);\r\n        }\r\n\r\n        require(!checkMultOverflow(p, precision));\r\n        require(!checkMultOverflow(n, precision));\r\n        require(!checkMultOverflow(uint(1)<<n, q));\r\n\r\n        uint y = p * precision / (q * (uint(1)<<n));\r\n        uint log2Small = log2ForSmallNumber(y, numPrecisionBits);\r\n\r\n        require(n*precision <= BIG_NUMBER);\r\n        require(log2Small <= BIG_NUMBER);\r\n\r\n        return n * precision + log2Small;\r\n    }\r\n\r\n    function ln(uint p, uint q, uint numPrecisionBits) public pure returns (uint) {\r\n        uint ln2Numerator   = 6931471805599453094172;\r\n        uint ln2Denomerator = 10000000000000000000000;\r\n\r\n        uint log2x = logBase2(p, q, numPrecisionBits);\r\n\r\n        require(!checkMultOverflow(ln2Numerator, log2x));\r\n\r\n        return ln2Numerator * log2x / ln2Denomerator;\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityFormula is UtilMath {\r\n    function pE(uint r, uint pMIn, uint e, uint precision) public pure returns (uint) {\r\n        uint expRE = exp(r*e, precision*precision, precision);\r\n        require(!checkMultOverflow(expRE, pMIn));\r\n        return pMIn*expRE / precision;\r\n    }\r\n\r\n    function deltaTFunc(uint r, uint pMIn, uint e, uint deltaE, uint precision) public pure returns (uint) {\r\n        uint pe = pE(r, pMIn, e, precision);\r\n        uint rpe = r * pe;\r\n        uint erdeltaE = exp(r*deltaE, precision*precision, precision);\r\n\r\n        require(erdeltaE >= precision);\r\n        require(!checkMultOverflow(erdeltaE - precision, precision));\r\n        require(!checkMultOverflow((erdeltaE - precision)*precision, precision));\r\n        require(!checkMultOverflow((erdeltaE - precision)*precision*precision, precision));\r\n        require(!checkMultOverflow(rpe, erdeltaE));\r\n        require(!checkMultOverflow(r, pe));\r\n\r\n        return (erdeltaE - precision) * precision * precision * precision / (rpe*erdeltaE);\r\n    }\r\n\r\n    function deltaEFunc(uint r, uint pMIn, uint e, uint deltaT, uint precision, uint numPrecisionBits)\r\n        public pure\r\n        returns (uint)\r\n    {\r\n        uint pe = pE(r, pMIn, e, precision);\r\n        uint rpe = r * pe;\r\n        uint lnPart = ln(precision*precision + rpe*deltaT/precision, precision*precision, numPrecisionBits);\r\n\r\n        require(!checkMultOverflow(r, pe));\r\n        require(!checkMultOverflow(precision, precision));\r\n        require(!checkMultOverflow(rpe, deltaT));\r\n        require(!checkMultOverflow(lnPart, precision));\r\n\r\n        return lnPart * precision / r;\r\n    }\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\n/// @title Kyber constants contract\r\ncontract Utils {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint  constant internal PRECISION = (10**18);\r\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n    uint  constant internal MAX_DECIMALS = 18;\r\n    uint  constant internal ETH_DECIMALS = 18;\r\n    mapping(address=>uint) internal decimals;\r\n\r\n    function setDecimals(ERC20 token) internal {\r\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\r\n        else decimals[token] = token.decimals();\r\n    }\r\n\r\n    function getDecimals(ERC20 token) internal view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint tokenDecimals = decimals[token];\r\n        // technically, there might be token with decimals 0\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if(tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(srcQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(dstQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n        \r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint numerator;\r\n        uint denominator;\r\n        if (srcDecimals >= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/LiquidityConversionRates.sol\r\n\r\ncontract LiquidityConversionRates is ConversionRatesInterface, LiquidityFormula, Withdrawable, Utils {\r\n    ERC20 public token;\r\n    address public reserveContract;\r\n\r\n    uint public numFpBits;\r\n    uint public formulaPrecision;\r\n\r\n    uint public rInFp;\r\n    uint public pMinInFp;\r\n\r\n    uint public maxEthCapBuyInFp;\r\n    uint public maxEthCapSellInFp;\r\n    uint public maxQtyInFp;\r\n\r\n    uint public feeInBps;\r\n    uint public collectedFeesInTwei = 0;\r\n\r\n    uint public maxBuyRateInPrecision;\r\n    uint public minBuyRateInPrecision;\r\n    uint public maxSellRateInPrecision;\r\n    uint public minSellRateInPrecision;\r\n\r\n    function LiquidityConversionRates(address _admin, ERC20 _token) public {\r\n        transferAdminQuickly(_admin);\r\n        token = _token;\r\n        setDecimals(token);\r\n        require(getDecimals(token) <= MAX_DECIMALS);\r\n    }\r\n\r\n    event ReserveAddressSet(address reserve);\r\n\r\n    function setReserveAddress(address reserve) public onlyAdmin {\r\n        reserveContract = reserve;\r\n        ReserveAddressSet(reserve);\r\n    }\r\n\r\n    event LiquidityParamsSet(\r\n        uint rInFp,\r\n        uint pMinInFp,\r\n        uint numFpBits,\r\n        uint maxCapBuyInFp,\r\n        uint maxEthCapSellInFp,\r\n        uint feeInBps,\r\n        uint formulaPrecision,\r\n        uint maxQtyInFp,\r\n        uint maxBuyRateInPrecision,\r\n        uint minBuyRateInPrecision,\r\n        uint maxSellRateInPrecision,\r\n        uint minSellRateInPrecision\r\n    );\r\n\r\n    function setLiquidityParams(\r\n        uint _rInFp,\r\n        uint _pMinInFp,\r\n        uint _numFpBits,\r\n        uint _maxCapBuyInWei,\r\n        uint _maxCapSellInWei,\r\n        uint _feeInBps,\r\n        uint _maxTokenToEthRateInPrecision,\r\n        uint _minTokenToEthRateInPrecision\r\n    ) public onlyAdmin {\r\n\r\n        require(_numFpBits < 256);\r\n        require(formulaPrecision <= MAX_QTY);\r\n        require(_feeInBps < 10000);\r\n        require(_minTokenToEthRateInPrecision < _maxTokenToEthRateInPrecision);\r\n\r\n        rInFp = _rInFp;\r\n        pMinInFp = _pMinInFp;\r\n        formulaPrecision = uint(1)<<_numFpBits;\r\n        maxQtyInFp = fromWeiToFp(MAX_QTY);\r\n        numFpBits = _numFpBits;\r\n        maxEthCapBuyInFp = fromWeiToFp(_maxCapBuyInWei);\r\n        maxEthCapSellInFp = fromWeiToFp(_maxCapSellInWei);\r\n        feeInBps = _feeInBps;\r\n        maxBuyRateInPrecision = PRECISION * PRECISION / _minTokenToEthRateInPrecision;\r\n        minBuyRateInPrecision = PRECISION * PRECISION / _maxTokenToEthRateInPrecision;\r\n        maxSellRateInPrecision = _maxTokenToEthRateInPrecision;\r\n        minSellRateInPrecision = _minTokenToEthRateInPrecision;\r\n\r\n        LiquidityParamsSet(\r\n            rInFp,\r\n            pMinInFp,\r\n            numFpBits,\r\n            maxEthCapBuyInFp,\r\n            maxEthCapSellInFp,\r\n            feeInBps,\r\n            formulaPrecision,\r\n            maxQtyInFp,\r\n            maxBuyRateInPrecision,\r\n            minBuyRateInPrecision,\r\n            maxSellRateInPrecision,\r\n            minSellRateInPrecision\r\n        );\r\n    }\r\n\r\n    function recordImbalance(\r\n        ERC20 conversionToken,\r\n        int buyAmountInTwei,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public\r\n    {\r\n        conversionToken;\r\n        rateUpdateBlock;\r\n        currentBlock;\r\n\r\n        require(msg.sender == reserveContract);\r\n        if (buyAmountInTwei > 0) {\r\n            // Buy case\r\n            collectedFeesInTwei += calcCollectedFee(abs(buyAmountInTwei));\r\n        } else {\r\n            // Sell case\r\n            collectedFeesInTwei += abs(buyAmountInTwei) * feeInBps / 10000;\r\n        }\r\n    }\r\n\r\n    event CollectedFeesReset(uint resetFeesInTwei);\r\n\r\n    function resetCollectedFees() public onlyAdmin {\r\n        uint resetFeesInTwei = collectedFeesInTwei;\r\n        collectedFeesInTwei = 0;\r\n\r\n        CollectedFeesReset(resetFeesInTwei);\r\n    }\r\n\r\n    function getRate(\r\n            ERC20 conversionToken,\r\n            uint currentBlockNumber,\r\n            bool buy,\r\n            uint qtyInSrcWei\r\n    ) public view returns(uint) {\r\n\r\n        currentBlockNumber;\r\n\r\n        require(qtyInSrcWei <= MAX_QTY);\r\n        uint eInFp = fromWeiToFp(reserveContract.balance);\r\n        uint rateInPrecision = getRateWithE(conversionToken, buy, qtyInSrcWei, eInFp);\r\n        require(rateInPrecision <= MAX_RATE);\r\n        return rateInPrecision;\r\n    }\r\n\r\n    function getRateWithE(ERC20 conversionToken, bool buy, uint qtyInSrcWei, uint eInFp) public view returns(uint) {\r\n        uint deltaEInFp;\r\n        uint sellInputTokenQtyInFp;\r\n        uint deltaTInFp;\r\n        uint rateInPrecision;\r\n\r\n        require(qtyInSrcWei <= MAX_QTY);\r\n        require(eInFp <= maxQtyInFp);\r\n        if (conversionToken != token) return 0;\r\n\r\n        if (buy) {\r\n            // ETH goes in, token goes out\r\n            deltaEInFp = fromWeiToFp(qtyInSrcWei);\r\n            if (deltaEInFp > maxEthCapBuyInFp) return 0;\r\n\r\n            if (deltaEInFp == 0) {\r\n                rateInPrecision = buyRateZeroQuantity(eInFp);\r\n            } else {\r\n                rateInPrecision = buyRate(eInFp, deltaEInFp);\r\n            }\r\n        } else {\r\n            sellInputTokenQtyInFp = fromTweiToFp(qtyInSrcWei);\r\n            deltaTInFp = valueAfterReducingFee(sellInputTokenQtyInFp);\r\n            if (deltaTInFp == 0) {\r\n                rateInPrecision = sellRateZeroQuantity(eInFp);\r\n                deltaEInFp = 0;\r\n            } else {\r\n                (rateInPrecision, deltaEInFp) = sellRate(eInFp, sellInputTokenQtyInFp, deltaTInFp);\r\n            }\r\n\r\n            if (deltaEInFp > maxEthCapSellInFp) return 0;\r\n        }\r\n\r\n        rateInPrecision = rateAfterValidation(rateInPrecision, buy);\r\n        return rateInPrecision;\r\n    }\r\n\r\n    function rateAfterValidation(uint rateInPrecision, bool buy) public view returns(uint) {\r\n        uint minAllowRateInPrecision;\r\n        uint maxAllowedRateInPrecision;\r\n\r\n        if (buy) {\r\n            minAllowRateInPrecision = minBuyRateInPrecision;\r\n            maxAllowedRateInPrecision = maxBuyRateInPrecision;\r\n        } else {\r\n            minAllowRateInPrecision = minSellRateInPrecision;\r\n            maxAllowedRateInPrecision = maxSellRateInPrecision;\r\n        }\r\n\r\n        if ((rateInPrecision > maxAllowedRateInPrecision) || (rateInPrecision < minAllowRateInPrecision)) {\r\n            return 0;\r\n        } else if (rateInPrecision > MAX_RATE) {\r\n            return 0;\r\n        } else {\r\n            return rateInPrecision;\r\n        }\r\n    }\r\n\r\n    function buyRate(uint eInFp, uint deltaEInFp) public view returns(uint) {\r\n        uint deltaTInFp = deltaTFunc(rInFp, pMinInFp, eInFp, deltaEInFp, formulaPrecision);\r\n        require(deltaTInFp <= maxQtyInFp);\r\n        deltaTInFp = valueAfterReducingFee(deltaTInFp);\r\n        return deltaTInFp * PRECISION / deltaEInFp;\r\n    }\r\n\r\n    function buyRateZeroQuantity(uint eInFp) public view returns(uint) {\r\n        uint ratePreReductionInPrecision = formulaPrecision * PRECISION / pE(rInFp, pMinInFp, eInFp, formulaPrecision);\r\n        return valueAfterReducingFee(ratePreReductionInPrecision);\r\n    }\r\n\r\n    function sellRate(\r\n        uint eInFp,\r\n        uint sellInputTokenQtyInFp,\r\n        uint deltaTInFp\r\n    ) public view returns(uint rateInPrecision, uint deltaEInFp) {\r\n        deltaEInFp = deltaEFunc(rInFp, pMinInFp, eInFp, deltaTInFp, formulaPrecision, numFpBits);\r\n        require(deltaEInFp <= maxQtyInFp);\r\n        rateInPrecision = deltaEInFp * PRECISION / sellInputTokenQtyInFp;\r\n    }\r\n\r\n    function sellRateZeroQuantity(uint eInFp) public view returns(uint) {\r\n        uint ratePreReductionInPrecision = pE(rInFp, pMinInFp, eInFp, formulaPrecision) * PRECISION / formulaPrecision;\r\n        return valueAfterReducingFee(ratePreReductionInPrecision);\r\n    }\r\n\r\n    function fromTweiToFp(uint qtyInTwei) public view returns(uint) {\r\n        require(qtyInTwei <= MAX_QTY);\r\n        return qtyInTwei * formulaPrecision / (10 ** getDecimals(token));\r\n    }\r\n\r\n    function fromWeiToFp(uint qtyInwei) public view returns(uint) {\r\n        require(qtyInwei <= MAX_QTY);\r\n        return qtyInwei * formulaPrecision / (10 ** ETH_DECIMALS);\r\n    }\r\n\r\n    function valueAfterReducingFee(uint val) public view returns(uint) {\r\n        require(val <= BIG_NUMBER);\r\n        return ((10000 - feeInBps) * val) / 10000;\r\n    }\r\n\r\n    function calcCollectedFee(uint val) public view returns(uint) {\r\n        require(val <= MAX_QTY);\r\n        return val * feeInBps / (10000 - feeInBps);\r\n    }\r\n\r\n    function abs(int val) public pure returns(uint) {\r\n        if (val < 0) {\r\n            return uint(val * (-1));\r\n        } else {\r\n            return uint(val);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSellRateInPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setReserveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"qtyInwei\",\"type\":\"uint256\"}],\"name\":\"fromWeiToFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"},{\"name\":\"pMIn\",\"type\":\"uint256\"},{\"name\":\"e\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"pE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"numPrecisionBits\",\"type\":\"uint256\"}],\"name\":\"ln\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEthCapSellInFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BIG_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFeesInTwei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rInFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEthCapBuyInFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"formulaPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rInFp\",\"type\":\"uint256\"},{\"name\":\"_pMinInFp\",\"type\":\"uint256\"},{\"name\":\"_numFpBits\",\"type\":\"uint256\"},{\"name\":\"_maxCapBuyInWei\",\"type\":\"uint256\"},{\"name\":\"_maxCapSellInWei\",\"type\":\"uint256\"},{\"name\":\"_feeInBps\",\"type\":\"uint256\"},{\"name\":\"_maxTokenToEthRateInPrecision\",\"type\":\"uint256\"},{\"name\":\"_minTokenToEthRateInPrecision\",\"type\":\"uint256\"}],\"name\":\"setLiquidityParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"checkMultOverflow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eInFp\",\"type\":\"uint256\"},{\"name\":\"deltaEInFp\",\"type\":\"uint256\"}],\"name\":\"buyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eInFp\",\"type\":\"uint256\"}],\"name\":\"sellRateZeroQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"valueAfterReducingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numFpBits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"},{\"name\":\"pMIn\",\"type\":\"uint256\"},{\"name\":\"e\",\"type\":\"uint256\"},{\"name\":\"deltaE\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"deltaTFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"numPrecisionBits\",\"type\":\"uint256\"}],\"name\":\"log2ForSmallNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"compactFraction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"conversionToken\",\"type\":\"address\"},{\"name\":\"buy\",\"type\":\"bool\"},{\"name\":\"qtyInSrcWei\",\"type\":\"uint256\"},{\"name\":\"eInFp\",\"type\":\"uint256\"}],\"name\":\"getRateWithE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"}],\"name\":\"countLeadingZeros\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eInFp\",\"type\":\"uint256\"},{\"name\":\"sellInputTokenQtyInFp\",\"type\":\"uint256\"},{\"name\":\"deltaTInFp\",\"type\":\"uint256\"}],\"name\":\"sellRate\",\"outputs\":[{\"name\":\"rateInPrecision\",\"type\":\"uint256\"},{\"name\":\"deltaEInFp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"qtyInTwei\",\"type\":\"uint256\"}],\"name\":\"fromTweiToFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"},{\"name\":\"pMIn\",\"type\":\"uint256\"},{\"name\":\"e\",\"type\":\"uint256\"},{\"name\":\"deltaT\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"},{\"name\":\"numPrecisionBits\",\"type\":\"uint256\"}],\"name\":\"deltaEFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeInBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"numPrecisionBits\",\"type\":\"uint256\"}],\"name\":\"logBase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rateInPrecision\",\"type\":\"uint256\"},{\"name\":\"buy\",\"type\":\"bool\"}],\"name\":\"rateAfterValidation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"calcCollectedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"},{\"name\":\"q\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"exp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetCollectedFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"conversionToken\",\"type\":\"address\"},{\"name\":\"currentBlockNumber\",\"type\":\"uint256\"},{\"name\":\"buy\",\"type\":\"bool\"},{\"name\":\"qtyInSrcWei\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"conversionToken\",\"type\":\"address\"},{\"name\":\"buyAmountInTwei\",\"type\":\"int256\"},{\"name\":\"rateUpdateBlock\",\"type\":\"uint256\"},{\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"recordImbalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eInFp\",\"type\":\"uint256\"}],\"name\":\"buyRateZeroQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyRateInPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSellRateInPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pMinInFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxQtyInFp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyRateInPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"ReserveAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rInFp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pMinInFp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numFpBits\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxCapBuyInFp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxEthCapSellInFp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeInBps\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"formulaPrecision\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxQtyInFp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxBuyRateInPrecision\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minBuyRateInPrecision\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxSellRateInPrecision\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minSellRateInPrecision\",\"type\":\"uint256\"}],\"name\":\"LiquidityParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"resetFeesInTwei\",\"type\":\"uint256\"}],\"name\":\"CollectedFeesReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"LiquidityConversionRates","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e7ac1d424f7a344632602929086517457ed6005b00000000000000000000000084f7c44b6fed1080f647e354d552595be2cc602f","Library":"","SwarmSource":"bzzr://c45cd250e97f58b24de09f2f42d367b846ea3826c8451b56405ba02af5cb121b"}]}