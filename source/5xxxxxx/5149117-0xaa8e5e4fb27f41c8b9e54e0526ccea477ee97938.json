{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract CryptoNFT is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new person comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n  uint256 internal startingPrice = 0.01 ether;\r\n\r\n  // uint256 internal toPlayerMultiplier = uint256(0.94);\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from person IDs to the address that owns them. All persons have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public personIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from PersonIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Person can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public personIndexToApproved;\r\n\r\n  // @dev A mapping from PersonIDs to the price of the token.\r\n  mapping (uint256 => uint256) internal personIndexToPrice;\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Person {\r\n    string name;\r\n  }\r\n\r\n  Person[] private persons;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function CryptoNFT() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    personIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  \r\n\r\n  /// @dev Creates a new Person with the given name.\r\n  function createContractPerson(string _name) public onlyCOO {\r\n    _createPerson(_name, address(this), startingPrice);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific person.\r\n  /// @param _tokenId The tokenId of the person of interest.\r\n  function getPerson(uint256 _tokenId) public view returns (\r\n    string personName,\r\n    uint256 sellingPrice,\r\n    address owner\r\n  ) {\r\n    Person storage person = persons[_tokenId];\r\n    personName = person.name;\r\n    sellingPrice = personIndexToPrice[_tokenId];\r\n    owner = personIndexToOwner[_tokenId];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = personIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCEO {\r\n    _payout(_to, this.balance);\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = personIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = personIndexToPrice[_tokenId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = calcPaymentToOldOwner(sellingPrice);\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    // Update prices\r\n    personIndexToPrice[_tokenId] = calcNextSellingPrice(sellingPrice);\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.06)\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, personIndexToPrice[_tokenId], oldOwner, newOwner, persons[_tokenId].name);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  function calcPaymentToOldOwner(uint256 sellingPrice) internal returns (uint256 payToOldOwner);\r\n  function calcNextSellingPrice(uint256 currentSellingPrice) internal returns (uint256 newSellingPrice);\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return personIndexToPrice[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = personIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Persons array looking for persons belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalPersons = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 personId;\r\n      for (personId = 0; personId <= totalPersons; personId++) {\r\n        if (personIndexToOwner[personId] == _owner) {\r\n          result[resultIndex] = personId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return persons.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return personIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating Person\r\n  function _createPerson(string _name, address _owner, uint256 _price) internal {\r\n    Person memory _person = Person({\r\n      name: _name\r\n    });\r\n    uint256 newPersonId = persons.push(_person) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newPersonId == uint256(uint32(newPersonId)));\r\n\r\n    Birth(newPersonId, _name, _owner);\r\n\r\n    personIndexToPrice[newPersonId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newPersonId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return claimant == personIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to, uint256 amount) internal {\r\n    require(amount<=this.balance);\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(amount);\r\n    } else {\r\n      _to.transfer(amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Person to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of persons is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    personIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new persons _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete personIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\n\r\ncontract EtherAthlete is CryptoNFT {\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant NAME = \"EtherAthlete\"; // solhint-disable-line\r\n    string public constant SYMBOL = \"EAT\"; // solhint-disable-line\r\n\r\n    uint256 private constant PROMO_CREATION_LIMIT = 5000;\r\n    uint256 public promoCreatedCount;\r\n\r\n    bool public allowPriceUpdate;\r\n\r\n    /*** CONSTANTS ***/\r\n    uint256 private firstStepLimit =  0.32 ether;\r\n    uint256 private secondStepLimit = 2.8629151 ether;\r\n\r\n    uint256 private defaultIncreasePercent = 200;\r\n    uint256 private fsIncreasePercent = 155;\r\n    uint256 private ssIncreasePercent = 130;\r\n\r\n    uint256 private defaultPlayerPercent = 7500;\r\n    uint256 private fsPlayerPercent = 8400;\r\n    uint256 private ssPlayerPercent = 9077;\r\n\r\n    // The addresses of the charity account.\r\n    address public charityAddress;\r\n    uint256 private charityPercent = 3;\r\n    uint256 public charityBalance;\r\n\r\n\r\n    /*** CONSTRUCTOR ***/\r\n    function EtherAthlete() public {\r\n        allowPriceUpdate = false;\r\n        charityAddress = msg.sender;\r\n        charityBalance = 0 ether;\r\n    }\r\n    \r\n    /*** PUBLIC FUNCTIONS ***/\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n    /// @dev Required for ERC-721 compliance.\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    /// @dev Creates a new promo Person with the given name, with given _price and assignes it to an address.\r\n    function createPromoPerson(address _owner, string _name, uint256 _price) public onlyCOO {\r\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        address personOwner = _owner;\r\n        if (personOwner == address(0)) {\r\n        personOwner = cooAddress;\r\n        }\r\n\r\n        if (_price <= 0) {\r\n        _price = startingPrice;\r\n        }\r\n\r\n        promoCreatedCount++;\r\n        _createPerson(_name, personOwner, _price);\r\n    }\r\n\r\n    function setAllowPriceUpdate(bool _bValue) public onlyCOO {\r\n        allowPriceUpdate = _bValue;\r\n    }\r\n\r\n    /*** PRIVATE FUNCTIONS ***/\r\n    /// Overrides Abstract internal method to calculate payment proportion for old owner\r\n    /// out of selling price in current purchase\r\n    function calcPaymentToOldOwner(uint256 sellingPrice) internal returns (uint256 payToOldOwner) {\r\n        if (sellingPrice <= firstStepLimit) {\r\n            // first stage\r\n            payToOldOwner = uint256(SafeMath.div(SafeMath.mul(sellingPrice, defaultPlayerPercent),10000));\r\n        } else if (sellingPrice <= secondStepLimit) {\r\n            // second stage\r\n            payToOldOwner = uint256(SafeMath.div(SafeMath.mul(sellingPrice, fsPlayerPercent),10000));\r\n        } else {\r\n            // third stage\r\n            payToOldOwner = uint256(SafeMath.div(SafeMath.mul(sellingPrice, ssPlayerPercent),10000));\r\n        }\r\n\r\n        // Update the charity balance\r\n        uint256 gainToHouse = SafeMath.sub(sellingPrice, payToOldOwner);\r\n        charityBalance = SafeMath.add(charityBalance, SafeMath.div(SafeMath.mul(gainToHouse, charityPercent),100));\r\n    }\r\n\r\n    /// Overrides the abstract method to calculate the next selling price based on\r\n    /// current selling prices of the asset.\r\n    function calcNextSellingPrice(uint256 currentSellingPrice) internal returns (uint256 newSellingPrice) {\r\n        if (currentSellingPrice < firstStepLimit) {\r\n            // first stage\r\n            newSellingPrice = SafeMath.div(SafeMath.mul(currentSellingPrice, defaultIncreasePercent), 100);\r\n        } else if (currentSellingPrice < secondStepLimit) {\r\n            // second stage\r\n            newSellingPrice = SafeMath.div(SafeMath.mul(currentSellingPrice, fsIncreasePercent), 100);\r\n        } else {\r\n            // third stage\r\n            newSellingPrice = SafeMath.div(SafeMath.mul(currentSellingPrice, ssIncreasePercent), 100);\r\n        }\r\n    }\r\n\r\n    function setCharityAddress(address _charityAddress) public onlyCEO {\r\n        charityAddress = _charityAddress;\r\n    }\r\n\r\n    function payout(address _to) public onlyCEO {\r\n        uint256 amountToCharity = charityBalance;\r\n        uint256 amount = SafeMath.sub(this.balance, charityBalance);\r\n        charityBalance = 0;\r\n        _payout(charityAddress, amountToCharity);\r\n        _payout(_to, amount);\r\n    }\r\n\r\n    function updateTokenSellingPrice(uint256 _tokenId, uint256 sellingPrice) public {\r\n        require(allowPriceUpdate);\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(sellingPrice < personIndexToPrice[_tokenId]);\r\n        require(sellingPrice >= startingPrice);\r\n        personIndexToPrice[_tokenId] = sellingPrice;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"name\":\"personName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowPriceUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bValue\",\"type\":\"bool\"}],\"name\":\"setAllowPriceUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createPromoPerson\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createContractPerson\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenSellingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherAthlete","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ecb4b5bbc22fdf43d496c74c437b2d23b99f3fe9e8bf290b47dd4b815132df91"}]}