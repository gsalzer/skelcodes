{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     \r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\r\n}\r\n\r\ncontract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}\r\ncontract IAccessoryData is AccessControl, Enums {\r\n    uint8 public totalAccessorySeries;    \r\n    uint32 public totalAccessories;\r\n    \r\n \r\n    /*** FUNCTIONS ***/\r\n    //*** Write Access ***//\r\n    function createAccessorySeries(uint8 _AccessorySeriesId, uint32 _maxTotal, uint _price) onlyCREATOR public returns(uint8) ;\r\n\tfunction setAccessory(uint8 _AccessorySeriesId, address _owner) onlySERAPHIM external returns(uint64);\r\n   function addAccessoryIdMapping(address _owner, uint64 _accessoryId) private;\r\n\tfunction transferAccessory(address _from, address _to, uint64 __accessoryId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAccessoryTransfer (address _to, uint64 __accessoryId)  public;\r\n    function updateAccessoryLock (uint64 _accessoryId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n    \r\n    //*** Read Access ***//\r\n    function getAccessorySeries(uint8 _accessorySeriesId) constant public returns(uint8 accessorySeriesId, uint32 currentTotal, uint32 maxTotal, uint price) ;\r\n\tfunction getAccessory(uint _accessoryId) constant public returns(uint accessoryID, uint8 AccessorySeriesID, address owner);\r\n\tfunction getOwnerAccessoryCount(address _owner) constant public returns(uint);\r\n\tfunction getAccessoryByIndex(address _owner, uint _index) constant public returns(uint) ;\r\n    function getTotalAccessorySeries() constant public returns (uint8) ;\r\n    function getTotalAccessories() constant public returns (uint);\r\n    function getAccessoryLockStatus(uint64 _acessoryId) constant public returns (bool);\r\n}\r\n\r\n\r\n  \r\n\r\n\r\ncontract IMedalData is AccessControl {\r\n  \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n   \r\nfunction totalSupply() public view returns (uint256);\r\nfunction setMaxTokenNumbers()  onlyCREATOR external;\r\nfunction balanceOf(address _owner) public view returns (uint256);\r\nfunction tokensOf(address _owner) public view returns (uint256[]) ;\r\nfunction ownerOf(uint256 _tokenId) public view returns (address);\r\nfunction approvedFor(uint256 _tokenId) public view returns (address) ;\r\nfunction transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction takeOwnership(uint256 _tokenId) public;\r\nfunction _createMedal(address _to, uint8 _seriesID) onlySERAPHIM public ;\r\nfunction getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32);\r\nfunction getMedalType (uint256 _tokenId) public constant returns (uint8);\r\nfunction _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external;\r\nfunction isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) ;\r\nfunction clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal;\r\nfunction clearApproval(address _owner, uint256 _tokenId) private;\r\nfunction addToken(address _to, uint256 _tokenId) private ;\r\nfunction removeToken(address _from, uint256 _tokenId) private;\r\n}\r\n\r\n//INSTURCTIONS: You can access this contract through our webUI at angelbattles.com (preferred)\r\n//You can also access this contract directly by sending a transaction the the medal you wish to claim\r\n//Variable names are self explanatory, but contact us if you have any questions. \r\n\r\ncontract MedalClaim2 is AccessControl, SafeMath  {\r\n    // Addresses for other contracts MedalClaim interacts with. \r\n    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\r\n    address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926;\r\n    address public accessoryDataContract = 0x466c44812835f57b736ef9F63582b8a6693A14D0;\r\n    address public leaderboardDataContract = 0x9A1C755305c6fbf361B4856c9b6b6Bbfe3aCE738;\r\n    address public medalDataContract =  0x33A104dCBEd81961701900c06fD14587C908EAa3;\r\n    \r\n    // events\r\n     event EventMedalSuccessful(address owner,uint64 Medal);\r\n  \r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    struct Angel {\r\n        uint64 angelId;\r\n        uint8 angelCardSeriesId;\r\n        address owner;\r\n        uint16 battlePower;\r\n        uint8 aura;\r\n        uint16 experience;\r\n        uint price;\r\n        uint64 createdTime;\r\n        uint64 lastBattleTime;\r\n        uint64 lastVsBattleTime;\r\n        uint16 lastBattleResult;\r\n    }\r\n\r\n    struct Pet {\r\n        uint64 petId;\r\n        uint8 petCardSeriesId;\r\n        address owner;\r\n        string name;\r\n        uint8 luck;\r\n        uint16 auraRed;\r\n        uint16 auraYellow;\r\n        uint16 auraBlue;\r\n        uint64 lastTrainingTime;\r\n        uint64 lastBreedingTime;\r\n        uint price; \r\n        uint64 liveTime;\r\n    }\r\n    \r\n     struct Accessory {\r\n        uint accessoryId;\r\n        uint8 accessorySeriesId;\r\n        address owner;\r\n    }\r\n    \r\n         // Stores which address have claimed which tokens, to avoid one address claiming the same token twice.\r\n         //Note - this does NOT affect medals won on the sponsored leaderboards;\r\n  mapping (address => bool[12]) public claimedbyAddress;\r\n  \r\n  //Stores which cards have been used to claim medals, to avoid transfering a key card to another account and claiming another medal. \r\n\r\n  mapping (uint64 => bool) public petsClaimedDiamond;\r\n  mapping (uint64 => bool) public petsClaimedZeronium;\r\n  mapping (uint64 => bool) public angelsClaimedZeronium;\r\n  mapping (uint64 => bool) public accessoriesClaimedZeronium;\r\n\r\n    // write functions\r\n    function DataContacts(address _angelCardDataContract, address _petCardDataContract, address _accessoryDataContract, address _leaderboardDataContract, address _medalDataContract) onlyCREATOR external {\r\n        angelCardDataContract = _angelCardDataContract;\r\n        petCardDataContract = _petCardDataContract;\r\n        accessoryDataContract = _accessoryDataContract;\r\n        leaderboardDataContract = _leaderboardDataContract;\r\n        medalDataContract = _medalDataContract;\r\n    }\r\n       \r\n    function checkExistsOwnedAngel (uint64 angelId) private constant returns (bool) {\r\n        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n       \r\n        if ((angelId <= 0) || (angelId > angelCardData.getTotalAngels())) {return false;}\r\n        address angelowner;\r\n        (,,,,,,,,,,angelowner) = angelCardData.getAngel(angelId);\r\n        if (angelowner == msg.sender) {return true;}\r\n        \r\n       else  return false;\r\n}\r\n\r\n    function checkExistsOwnedPet (uint64 petId) private constant returns (bool) {\r\n          IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n       \r\n        if ((petId <= 0) || (petId > petCardData.getTotalPets())) {return false;}\r\n        address petowner;\r\n         (,,,,,,,petowner) = petCardData.getPet(petId);\r\n        if (petowner == msg.sender) {return true;}\r\n        \r\n       else  return false;\r\n}\r\n\r\n\r\n    function getPetCardSeries (uint64 petId) public constant returns (uint8) {\r\n          IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n       \r\n        if ((petId <= 0) || (petId > petCardData.getTotalPets())) {revert();}\r\n        uint8 seriesId;\r\n         (,seriesId,,,,,,,,) = petCardData.getPet(petId);\r\n        return uint8(seriesId);\r\n        }\r\n\r\n    \r\n            function awardBronze(address _to1, address _to2, address _to3) onlyCREATOR external  {\r\n            //No checks here - you can be awarded more than one bronze medal. \r\n            IMedalData medalData = IMedalData(medalDataContract);\r\n          if (_to1 != address(0)) {\r\n            medalData._createMedal(_to1, 3);\r\n            EventMedalSuccessful(_to1,3);  \r\n          }\r\n            if (_to2 != address(0)) {\r\n            medalData._createMedal(_to2, 3);\r\n            EventMedalSuccessful(_to2,3);  \r\n          }\r\n           if (_to3 != address(0)) {\r\n            medalData._createMedal(_to3, 3);\r\n            EventMedalSuccessful(_to3,3);  \r\n          }\r\n          \r\n      }\r\n             \r\n    \r\n     \r\n     function claimDiamond(uint64 pet1Id, uint64 pet2Id) public {\r\n         //can only be claimed once per address;\r\n        if (claimedbyAddress[msg.sender][9] == true) {revert();}\r\n        if ((checkExistsOwnedPet(pet1Id) == false) || (checkExistsOwnedPet(pet2Id) == false)) {revert();}\r\n        IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n        Pet memory pet1;\r\n        Pet memory pet2;\r\n            (,,,, pet1.auraRed, pet1.auraBlue, pet1.auraYellow,, ,) = petCardData.getPet(pet1Id);\r\n            (,,,, pet2.auraRed, pet2.auraBlue, pet2.auraYellow,, ,) = petCardData.getPet(pet2Id);\r\n            \r\n         if ((pet1.auraRed >= 240) || (pet1.auraYellow >=240) || (pet1.auraBlue >= 240)) {\r\n             if ((pet2.auraRed >= 240) || (pet2.auraYellow >=240) || (pet2.auraBlue >= 240)) {\r\n             claimedbyAddress[msg.sender][9] = true;\r\n             IMedalData medalData = IMedalData(medalDataContract);   \r\n             medalData._createMedal(msg.sender, 9);\r\n             EventMedalSuccessful(msg.sender,9);\r\n             }\r\n             \r\n         }\r\n     }\r\n  \r\n        function awardTitanium(address _to1, address _to2, address _to3) onlyCREATOR external  {\r\n        IMedalData medalData = IMedalData(medalDataContract);\r\n          if (_to1 != address(0)) {\r\n            medalData._createMedal(_to1, 10);\r\n            EventMedalSuccessful(_to1,10);  \r\n          }\r\n            if (_to2 != address(0)) {\r\n            medalData._createMedal(_to2, 10);\r\n            EventMedalSuccessful(_to2,10);  \r\n          }\r\n           if (_to3 != address(0)) {\r\n            medalData._createMedal(_to3, 10);\r\n            EventMedalSuccessful(_to3,10);  \r\n          }\r\n          \r\n      }\r\n      \r\n      function claimZeronium(uint64 MichaelId, uint64 JophielId, uint64 fireElementalId, uint64 waterElementalId, uint64 lightningRodId, uint64 HolyLightId) external {\r\n               //can only be claimed once per address;\r\n              if (claimedbyAddress[msg.sender][11] == true) {revert();}\r\n              if ((angelsClaimedZeronium[MichaelId]==true) || (angelsClaimedZeronium[JophielId] == true)) {revert();}\r\n              if ((petsClaimedZeronium[fireElementalId]== true) || (petsClaimedZeronium[waterElementalId] == true)) {revert();}\r\n              if ((accessoriesClaimedZeronium[lightningRodId] == true) || (accessoriesClaimedZeronium[HolyLightId] == true)) {revert();}\r\n              IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n              IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n              IAccessoryData accessoryData = IAccessoryData(accessoryDataContract);\r\n              \r\n              uint64[6] memory ids;\r\n              address[6] memory owners;\r\n              \r\n              \r\n            (,ids[0],,,,,,, ,owners[0]) = petCardData.getPet(fireElementalId);\r\n            (,ids[1],,,,,,, ,owners[1]) = petCardData.getPet(waterElementalId);\r\n            \r\n              (,ids[2],,,,,,,,,owners[2]) = angelCardData.getAngel(MichaelId);\r\n              (,ids[3],,,,,,,,,owners[3]) = angelCardData.getAngel(JophielId);\r\n            \r\n           \r\n              (,ids[4],owners[4]) =  accessoryData.getAccessory(lightningRodId);\r\n              (,ids[5],owners[5]) =  accessoryData.getAccessory(HolyLightId);\r\n              \r\n              for (uint i=0; i<6; i++) {\r\n                  if (owners[i] != msg.sender) {revert();}\r\n              }\r\n              \r\n              \r\n          if ((ids[0] == 17) && (ids[1] == 18) && (ids[2] == 3)  && (ids[3] == 23)  && (ids[4] == 17)  && (ids[5] == 18) )  {\r\n              angelsClaimedZeronium[MichaelId]=true;\r\n              angelsClaimedZeronium[JophielId] = true;\r\n             \r\n              petsClaimedZeronium[fireElementalId]= true;\r\n              petsClaimedZeronium[waterElementalId] = true;\r\n              \r\n          \r\n              accessoriesClaimedZeronium[lightningRodId] = true; \r\n              accessoriesClaimedZeronium[HolyLightId] = true;\r\n              \r\n             claimedbyAddress[msg.sender][11] = true;\r\n             IMedalData medalData = IMedalData(medalDataContract);   \r\n             medalData._createMedal(msg.sender, 11);\r\n             EventMedalSuccessful(msg.sender,11);\r\n          }\r\n      }\r\n      \r\n      function getAngelClaims (uint64 angelId) public constant returns (bool claimedZeronium) {\r\n          //before purchasing an angel card, anyone can verify if that card has already been used to claim medals\r\n          if (angelId < 0) {revert();}\r\n          claimedZeronium = angelsClaimedZeronium[angelId];\r\n      }\r\n      \r\n          function getPetClaims (uint64 petId) public constant returns (bool claimedDiamond, bool claimedZeronium) {\r\n          //before purchasing a pet card, anyone can verify if that card has already been used to claim medals\r\n          if (petId < 0) {revert();}\r\n          claimedDiamond = petsClaimedDiamond[petId];\r\n          claimedZeronium = petsClaimedZeronium[petId];\r\n        \r\n      }\r\n      \r\n        function getAccessoryClaims (uint64 accessoryId) public constant returns (bool claimedZeronium) {\r\n          //before purchasing an accessory card, anyone can verify if that card has already been used to claim medals\r\n          if (accessoryId < 0) {revert();}\r\n          claimedZeronium = accessoriesClaimedZeronium[accessoryId];\r\n          \r\n      }\r\n     \r\n     function getAddressClaims(address _address, uint8 _medal) public constant returns (bool) {\r\n         return claimedbyAddress[_address][_medal];\r\n     }\r\n     \r\n     \r\n      \r\n      function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_medal\",\"type\":\"uint8\"}],\"name\":\"getAddressClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medalDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"petId\",\"type\":\"uint64\"}],\"name\":\"getPetCardSeries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"accessoriesClaimedZeronium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"petsClaimedZeronium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"angelsClaimedZeronium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"petId\",\"type\":\"uint64\"}],\"name\":\"getPetClaims\",\"outputs\":[{\"name\":\"claimedDiamond\",\"type\":\"bool\"},{\"name\":\"claimedZeronium\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedbyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MichaelId\",\"type\":\"uint64\"},{\"name\":\"JophielId\",\"type\":\"uint64\"},{\"name\":\"fireElementalId\",\"type\":\"uint64\"},{\"name\":\"waterElementalId\",\"type\":\"uint64\"},{\"name\":\"lightningRodId\",\"type\":\"uint64\"},{\"name\":\"HolyLightId\",\"type\":\"uint64\"}],\"name\":\"claimZeronium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to1\",\"type\":\"address\"},{\"name\":\"_to2\",\"type\":\"address\"},{\"name\":\"_to3\",\"type\":\"address\"}],\"name\":\"awardBronze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessoryDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderboardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardDataContract\",\"type\":\"address\"},{\"name\":\"_petCardDataContract\",\"type\":\"address\"},{\"name\":\"_accessoryDataContract\",\"type\":\"address\"},{\"name\":\"_leaderboardDataContract\",\"type\":\"address\"},{\"name\":\"_medalDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"}],\"name\":\"getAngelClaims\",\"outputs\":[{\"name\":\"claimedZeronium\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessoryId\",\"type\":\"uint64\"}],\"name\":\"getAccessoryClaims\",\"outputs\":[{\"name\":\"claimedZeronium\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to1\",\"type\":\"address\"},{\"name\":\"_to2\",\"type\":\"address\"},{\"name\":\"_to3\",\"type\":\"address\"}],\"name\":\"awardTitanium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet1Id\",\"type\":\"uint64\"},{\"name\":\"pet2Id\",\"type\":\"uint64\"}],\"name\":\"claimDiamond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"petsClaimedDiamond\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Medal\",\"type\":\"uint64\"}],\"name\":\"EventMedalSuccessful\",\"type\":\"event\"}]","ContractName":"MedalClaim2","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7755bac951072000f5d7ca8d542c3f1e21343b0173ef0c2955156d677b519b06"}]}