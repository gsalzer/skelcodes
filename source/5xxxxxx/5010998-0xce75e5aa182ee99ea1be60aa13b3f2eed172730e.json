{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title Ownable contract\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    }\r\n}\r\n/// @title Mortal contract - used to selfdestruct once we have no use of this contract\r\ncontract Mortal is Ownable {\r\n    function executeSelfdestruct() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/// @title ERC20 contract\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  \r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title WizzleInfinityHelper contract\r\ncontract WizzleInfinityHelper is Mortal {\r\n    \r\n    mapping (address => bool) public whitelisted;\r\n    ERC20 public token;\r\n\r\n    function WizzleInfinityHelper(address _token) public {\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    /// @dev Whitelist a single address\r\n    /// @param addr Address to be whitelisted\r\n    function whitelist(address addr) public onlyOwner {\r\n        require(!whitelisted[addr]);\r\n        whitelisted[addr] = true;\r\n    }\r\n\r\n    /// @dev Remove an address from whitelist\r\n    /// @param addr Address to be removed from whitelist\r\n    function unwhitelist(address addr) public onlyOwner {\r\n        require(whitelisted[addr]);\r\n        whitelisted[addr] = false;\r\n    }\r\n\r\n    /// @dev Whitelist array of addresses\r\n    /// @param arr Array of addresses to be whitelisted\r\n    function bulkWhitelist(address[] arr) public onlyOwner {\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            whitelisted[arr[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Check if address is whitelisted\r\n    /// @param addr Address to be checked if it is whitelisted\r\n    /// @return Is address whitelisted?\r\n    function isWhitelisted(address addr) public constant returns (bool) {\r\n        return whitelisted[addr];\r\n    }   \r\n\r\n    /// @dev Transfer tokens to addresses registered for airdrop\r\n    /// @param dests Array of addresses that have registered for airdrop\r\n    /// @param values Array of token amount for each address that have registered for airdrop\r\n    /// @return Number of transfers\r\n    function airdrop(address[] dests, uint256[] values) public onlyOwner returns (uint256) {\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           token.transfer(dests[i], values[i]);\r\n           whitelisted[dests[i]] = true;\r\n           i += 1;\r\n        }\r\n        return (i); \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeSelfdestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unwhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arr\",\"type\":\"address[]\"}],\"name\":\"bulkWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WizzleInfinityHelper","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b8327f32127afe37a544c52b628653e222a93bad","Library":"","SwarmSource":"bzzr://ba436793ba643e08e2c1bde68c42a57a9d512541fa9711818a33fe4e0bd5521d"}]}