{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @title A sorted doubly linked list with nodes sorted in descending order. Optionally accepts insert position hints\r\n *\r\n * Given a new node with a `key`, a hint is of the form `(prevId, nextId)` s.t. `prevId` and `nextId` are adjacent in the list.\r\n * `prevId` is a node with a key >= `key` and `nextId` is a node with a key <= `key`. If the sender provides a hint that is a valid insert position\r\n * the insert operation is a constant time storage write. However, the provided hint in a given transaction might be a valid insert position, but if other transactions are included first, when\r\n * the given transaction is executed the provided hint may no longer be a valid insert position. For example, one of the nodes referenced might be removed or their keys may\r\n * be updated such that the the pair of nodes in the hint no longer represent a valid insert position. If one of the nodes in the hint becomes invalid, we still try to use the other\r\n * valid node as a starting point for finding the appropriate insert position. If both nodes in the hint become invalid, we use the head of the list as a starting point\r\n * to find the appropriate insert position.\r\n */\r\nlibrary SortedDoublyLL {\r\n    using SafeMath for uint256;\r\n\r\n    // Information for a node in the list\r\n    struct Node {\r\n        uint256 key;                     // Node's key used for sorting\r\n        address nextId;                  // Id of next node (smaller key) in the list\r\n        address prevId;                  // Id of previous node (larger key) in the list\r\n    }\r\n\r\n    // Information for the list\r\n    struct Data {\r\n        address head;                        // Head of the list. Also the node in the list with the largest key\r\n        address tail;                        // Tail of the list. Also the node in the list with the smallest key\r\n        uint256 maxSize;                     // Maximum size of the list\r\n        uint256 size;                        // Current size of the list\r\n        mapping (address => Node) nodes;     // Track the corresponding ids for each node in the list\r\n    }\r\n\r\n    /*\r\n     * @dev Set the maximum size of the list\r\n     * @param _size Maximum size\r\n     */\r\n    function setMaxSize(Data storage self, uint256 _size) public {\r\n        // New max size must be greater than old max size\r\n        require(_size > self.maxSize);\r\n\r\n        self.maxSize = _size;\r\n    }\r\n\r\n    /*\r\n     * @dev Add a node to the list\r\n     * @param _id Node's id\r\n     * @param _key Node's key\r\n     * @param _prevId Id of previous node for the insert position\r\n     * @param _nextId Id of next node for the insert position\r\n     */\r\n    function insert(Data storage self, address _id, uint256 _key, address _prevId, address _nextId) public {\r\n        // List must not be full\r\n        require(!isFull(self));\r\n        // List must not already contain node\r\n        require(!contains(self, _id));\r\n        // Node id must not be null\r\n        require(_id != address(0));\r\n        // Key must be non-zero\r\n        require(_key > 0);\r\n\r\n        address prevId = _prevId;\r\n        address nextId = _nextId;\r\n\r\n        if (!validInsertPosition(self, _key, prevId, nextId)) {\r\n            // Sender's hint was not a valid insert position\r\n            // Use sender's hint to find a valid insert position\r\n            (prevId, nextId) = findInsertPosition(self, _key, prevId, nextId);\r\n        }\r\n\r\n        self.nodes[_id].key = _key;\r\n\r\n        if (prevId == address(0) && nextId == address(0)) {\r\n            // Insert as head and tail\r\n            self.head = _id;\r\n            self.tail = _id;\r\n        } else if (prevId == address(0)) {\r\n            // Insert before `prevId` as the head\r\n            self.nodes[_id].nextId = self.head;\r\n            self.nodes[self.head].prevId = _id;\r\n            self.head = _id;\r\n        } else if (nextId == address(0)) {\r\n            // Insert after `nextId` as the tail\r\n            self.nodes[_id].prevId = self.tail;\r\n            self.nodes[self.tail].nextId = _id;\r\n            self.tail = _id;\r\n        } else {\r\n            // Insert at insert position between `prevId` and `nextId`\r\n            self.nodes[_id].nextId = nextId;\r\n            self.nodes[_id].prevId = prevId;\r\n            self.nodes[prevId].nextId = _id;\r\n            self.nodes[nextId].prevId = _id;\r\n        }\r\n\r\n        self.size = self.size.add(1);\r\n    }\r\n\r\n    /*\r\n     * @dev Remove a node from the list\r\n     * @param _id Node's id\r\n     */\r\n    function remove(Data storage self, address _id) public {\r\n        // List must contain the node\r\n        require(contains(self, _id));\r\n\r\n        if (self.size > 1) {\r\n            // List contains more than a single node\r\n            if (_id == self.head) {\r\n                // The removed node is the head\r\n                // Set head to next node\r\n                self.head = self.nodes[_id].nextId;\r\n                // Set prev pointer of new head to null\r\n                self.nodes[self.head].prevId = address(0);\r\n            } else if (_id == self.tail) {\r\n                // The removed node is the tail\r\n                // Set tail to previous node\r\n                self.tail = self.nodes[_id].prevId;\r\n                // Set next pointer of new tail to null\r\n                self.nodes[self.tail].nextId = address(0);\r\n            } else {\r\n                // The removed node is neither the head nor the tail\r\n                // Set next pointer of previous node to the next node\r\n                self.nodes[self.nodes[_id].prevId].nextId = self.nodes[_id].nextId;\r\n                // Set prev pointer of next node to the previous node\r\n                self.nodes[self.nodes[_id].nextId].prevId = self.nodes[_id].prevId;\r\n            }\r\n        } else {\r\n            // List contains a single node\r\n            // Set the head and tail to null\r\n            self.head = address(0);\r\n            self.tail = address(0);\r\n        }\r\n\r\n        delete self.nodes[_id];\r\n        self.size = self.size.sub(1);\r\n    }\r\n\r\n    /*\r\n     * @dev Update the key of a node in the list\r\n     * @param _id Node's id\r\n     * @param _newKey Node's new key\r\n     * @param _prevId Id of previous node for the new insert position\r\n     * @param _nextId Id of next node for the new insert position\r\n     */\r\n    function updateKey(Data storage self, address _id, uint256 _newKey, address _prevId, address _nextId) public {\r\n        // List must contain the node\r\n        require(contains(self, _id));\r\n\r\n        // Remove node from the list\r\n        remove(self, _id);\r\n\r\n        if (_newKey > 0) {\r\n            // Insert node if it has a non-zero key\r\n            insert(self, _id, _newKey, _prevId, _nextId);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Checks if the list contains a node\r\n     * @param _transcoder Address of transcoder\r\n     */\r\n    function contains(Data storage self, address _id) public view returns (bool) {\r\n        // List only contains non-zero keys, so if key is non-zero the node exists\r\n        return self.nodes[_id].key > 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Checks if the list is full\r\n     */\r\n    function isFull(Data storage self) public view returns (bool) {\r\n        return self.size == self.maxSize;\r\n    }\r\n\r\n    /*\r\n     * @dev Checks if the list is empty\r\n     */\r\n    function isEmpty(Data storage self) public view returns (bool) {\r\n        return self.size == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the current size of the list\r\n     */\r\n    function getSize(Data storage self) public view returns (uint256) {\r\n        return self.size;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the maximum size of the list\r\n     */\r\n    function getMaxSize(Data storage self) public view returns (uint256) {\r\n        return self.maxSize;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the key of a node in the list\r\n     * @param _id Node's id\r\n     */\r\n    function getKey(Data storage self, address _id) public view returns (uint256) {\r\n        return self.nodes[_id].key;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first node in the list (node with the largest key)\r\n     */\r\n    function getFirst(Data storage self) public view returns (address) {\r\n        return self.head;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the last node in the list (node with the smallest key)\r\n     */\r\n    function getLast(Data storage self) public view returns (address) {\r\n        return self.tail;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the next node (with a smaller key) in the list for a given node\r\n     * @param _id Node's id\r\n     */\r\n    function getNext(Data storage self, address _id) public view returns (address) {\r\n        return self.nodes[_id].nextId;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the previous node (with a larger key) in the list for a given node\r\n     * @param _id Node's id\r\n     */\r\n    function getPrev(Data storage self, address _id) public view returns (address) {\r\n        return self.nodes[_id].prevId;\r\n    }\r\n\r\n    /*\r\n     * @dev Check if a pair of nodes is a valid insertion point for a new node with the given key\r\n     * @param _key Node's key\r\n     * @param _prevId Id of previous node for the insert position\r\n     * @param _nextId Id of next node for the insert position\r\n     */\r\n    function validInsertPosition(Data storage self, uint256 _key, address _prevId, address _nextId) public view returns (bool) {\r\n        if (_prevId == address(0) && _nextId == address(0)) {\r\n            // `(null, null)` is a valid insert position if the list is empty\r\n            return isEmpty(self);\r\n        } else if (_prevId == address(0)) {\r\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\r\n            return self.head == _nextId && _key >= self.nodes[_nextId].key;\r\n        } else if (_nextId == address(0)) {\r\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\r\n            return self.tail == _prevId && _key <= self.nodes[_prevId].key;\r\n        } else {\r\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_key` falls between the two nodes' keys\r\n            return self.nodes[_prevId].nextId == _nextId && self.nodes[_prevId].key >= _key && _key >= self.nodes[_nextId].key;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Descend the list (larger keys to smaller keys) to find a valid insert position\r\n     * @param _key Node's key\r\n     * @param _startId Id of node to start ascending the list from\r\n     */\r\n    function descendList(Data storage self, uint256 _key, address _startId) private view returns (address, address) {\r\n        // If `_startId` is the head, check if the insert position is before the head\r\n        if (self.head == _startId && _key >= self.nodes[_startId].key) {\r\n            return (address(0), _startId);\r\n        }\r\n\r\n        address prevId = _startId;\r\n        address nextId = self.nodes[prevId].nextId;\r\n\r\n        // Descend the list until we reach the end or until we find a valid insert position\r\n        while (prevId != address(0) && !validInsertPosition(self, _key, prevId, nextId)) {\r\n            prevId = self.nodes[prevId].nextId;\r\n            nextId = self.nodes[prevId].nextId;\r\n        }\r\n\r\n        return (prevId, nextId);\r\n    }\r\n\r\n    /*\r\n     * @dev Ascend the list (smaller keys to larger keys) to find a valid insert position\r\n     * @param _key Node's key\r\n     * @param _startId Id of node to start descending the list from\r\n     */\r\n    function ascendList(Data storage self, uint256 _key, address _startId) private view returns (address, address) {\r\n        // If `_startId` is the tail, check if the insert position is after the tail\r\n        if (self.tail == _startId && _key <= self.nodes[_startId].key) {\r\n            return (_startId, address(0));\r\n        }\r\n\r\n        address nextId = _startId;\r\n        address prevId = self.nodes[nextId].prevId;\r\n\r\n        // Ascend the list until we reach the end or until we find a valid insertion point\r\n        while (nextId != address(0) && !validInsertPosition(self, _key, prevId, nextId)) {\r\n            nextId = self.nodes[nextId].prevId;\r\n            prevId = self.nodes[nextId].prevId;\r\n        }\r\n\r\n        return (prevId, nextId);\r\n    }\r\n\r\n    /*\r\n     * @dev Find the insert position for a new node with the given key\r\n     * @param _key Node's key\r\n     * @param _prevId Id of previous node for the insert position\r\n     * @param _nextId Id of next node for the insert position\r\n     */\r\n    function findInsertPosition(Data storage self, uint256 _key, address _prevId, address _nextId) private view returns (address, address) {\r\n        address prevId = _prevId;\r\n        address nextId = _nextId;\r\n\r\n        if (prevId != address(0)) {\r\n            if (!contains(self, prevId) || _key > self.nodes[prevId].key) {\r\n                // `prevId` does not exist anymore or now has a smaller key than the given key\r\n                prevId = address(0);\r\n            }\r\n        }\r\n\r\n        if (nextId != address(0)) {\r\n            if (!contains(self, nextId) || _key < self.nodes[nextId].key) {\r\n                // `nextId` does not exist anymore or now has a larger key than the given key\r\n                nextId = address(0);\r\n            }\r\n        }\r\n\r\n        if (prevId == address(0) && nextId == address(0)) {\r\n            // No hint - descend list starting from head\r\n            return descendList(self, _key, self.head);\r\n        } else if (prevId == address(0)) {\r\n            // No `prevId` for hint - ascend list starting from `nextId`\r\n            return ascendList(self, _key, nextId);\r\n        } else if (nextId == address(0)) {\r\n            // No `nextId` for hint - descend list starting from `prevId`\r\n            return descendList(self, _key, prevId);\r\n        } else {\r\n            // Descend list starting from `prevId`\r\n            return descendList(self, _key, prevId);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"}],\"name\":\"getFirst\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_newKey\",\"type\":\"uint256\"},{\"name\":\"_prevId\",\"type\":\"address\"},{\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"updateKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_prevId\",\"type\":\"address\"},{\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"validInsertPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"}],\"name\":\"isFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_prevId\",\"type\":\"address\"},{\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"}],\"name\":\"getLast\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"}],\"name\":\"getMaxSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setMaxSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"}],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"}],\"name\":\"isEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"SortedDoublyLL.Data storage\"},{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPrev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SortedDoublyLL","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95fef3de3c884e2728602cddf7bdc177a9e15c87dcc3a12bc43d65b617b2b4f4"}]}