{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping (address => uint128) whitelist;\r\n\r\n    event Whitelisted(address who, uint128 nonce);\r\n\r\n    function Whitelist() Ownable() {\r\n      // This is here for our verification code only\r\n    }\r\n\r\n    function setWhitelisting(address who, uint128 nonce) internal {\r\n        whitelist[who] = nonce;\r\n\r\n        Whitelisted(who, nonce);\r\n    }\r\n\r\n    function whitelistUser(address who, uint128 nonce) external onlyOwner {\r\n        setWhitelisting(who, nonce);\r\n    }\r\n\r\n    function whitelistMe(uint128 nonce, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 hash = keccak256(msg.sender, nonce);\r\n        require(ecrecover(hash, v, r, s) == owner);\r\n        require(whitelist[msg.sender] == 0);\r\n\r\n        setWhitelisting(msg.sender, nonce);\r\n    }\r\n\r\n    function isWhitelisted(address who) external view returns(bool) {\r\n        return whitelist[who] > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"whitelistMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"Whitelisted\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4bf5a71840a41bba4a7f02c380f57d9bffd21c9934d5c8df3c3883d94df47fe6"}]}