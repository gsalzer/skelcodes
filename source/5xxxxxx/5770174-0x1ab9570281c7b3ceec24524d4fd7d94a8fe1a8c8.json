{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20Basic public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint64 public releaseTime;\r\n\r\n    constructor(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\r\n        require(_releaseTime > uint64(block.timestamp));\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        releaseTime = _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public {\r\n        require(uint64(block.timestamp) >= releaseTime);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount > 0);\r\n\r\n        token.safeTransfer(beneficiary, amount);\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ReferralDiscountToken is StandardToken, Owned {\r\n    /// Store the referrers by the referred addresses\r\n    mapping(address => address) referrerOf;\r\n    address[] ownersIndex;\r\n\r\n    // Emitted when an investor declares his referrer\r\n    event Referral(address indexed referred, address indexed referrer);\r\n\r\n    /// Compute the earned discount, topped at 60%\r\n    function referralDiscountPercentage(address _owner) public view returns (uint256 percent) {\r\n        uint256 total = 0;\r\n\r\n        /// get one time discount for having been referred\r\n        if(referrerOf[_owner] != address(0)) {\r\n            total = total.add(10);\r\n        }\r\n\r\n        /// get a 10% discount for each one referred\r\n        for(uint256 i = 0; i < ownersIndex.length; i++) {\r\n            if(referrerOf[ownersIndex[i]] == _owner) {\r\n                total = total.add(10);\r\n                // if(total >= 60) break;\r\n            }\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    // /**\r\n    //  * Activate referral discounts by declaring one's own referrer\r\n    //  * @param _referrer can't be self\r\n    //  * @param _referrer must own tokens at the time of the call\r\n    //  * You must own tokens at the time of the call\r\n    //  */\r\n    // function setReferrer(address _referrer) public returns (bool success) {\r\n    //     require(_referrer != address(0));\r\n    //     require(_referrer != address(msg.sender));\r\n    //     require(balanceOf(msg.sender) > 0);\r\n    //     require(balanceOf(_referrer) > 0);\r\n    //     assert(referrerOf[msg.sender] == address(0));\r\n\r\n    //     ownersIndex.push(msg.sender);\r\n    //     referrerOf[msg.sender] = _referrer;\r\n\r\n    //     Referral(msg.sender, _referrer);\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * Activate referral discounts by declaring one's own referrer\r\n     * @param _referrer the investor who brought another\r\n     * @param _referred the investor who was brought by another\r\n     * @dev _referrer and _referred must own tokens at the time of the call\r\n     */\r\n    function setReferrer(address _referred, address _referrer) onlyOwner public returns (bool success) {\r\n        require(_referrer != address(0));\r\n        require(_referrer != address(_referred));\r\n        //        require(balanceOf(_referred) > 0);\r\n        //        require(balanceOf(_referrer) > 0);\r\n        require(referrerOf[_referred] == address(0));\r\n\r\n        ownersIndex.push(_referred);\r\n        referrerOf[_referred] = _referrer;\r\n\r\n        emit Referral(_referred, _referrer);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract NaorisToken is ReferralDiscountToken {\r\n    string public constant name = \"NaorisToken\";\r\n    string public constant symbol = \"NAO\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    /// The owner of this address will manage the sale process.\r\n    address public saleTeamAddress;\r\n\r\n    /// The owner of this address will manage the referal and airdrop campaigns.\r\n    address public referalAirdropsTokensAddress;\r\n\r\n    /// The owner of this address is the Naoris Reserve fund.\r\n    address public reserveFundAddress;\r\n\r\n    /// The owner of this address is the Naoris Think Tank fund.\r\n    address public thinkTankFundAddress;\r\n\r\n    /// This address keeps the locked board bonus until 1st of May 2019\r\n    address public lockedBoardBonusAddress;\r\n\r\n    /// This is the address of the timelock contract for the locked Board Bonus tokens\r\n    address public treasuryTimelockAddress;\r\n\r\n    /// After this flag is changed to 'true' no more tokens can be created\r\n    bool public tokenSaleClosed = false;\r\n\r\n    // seconds since 01.01.1970 to 1st of May 2019 (both 00:00:00 o'clock UTC)\r\n    uint64 date01May2019 = 1556668800;\r\n\r\n    /// Maximum tokens to be allocated.\r\n    uint256 public constant TOKENS_HARD_CAP = 400000000 * 10 ** decimals;\r\n\r\n    /// Maximum tokens to be sold.\r\n    uint256 public constant TOKENS_SALE_HARD_CAP = 300000000 * 10 ** decimals;\r\n\r\n    /// Tokens to be allocated to the Referal tokens fund.\r\n    uint256 public constant REFERRAL_TOKENS = 10000000 * 10 ** decimals;\r\n\r\n    /// Tokens to be allocated to the Airdrop tokens fund.\r\n    uint256 public constant AIRDROP_TOKENS = 10000000 * 10 ** decimals;\r\n\r\n    /// Tokens to be allocated to the Think Tank fund.\r\n    uint256 public constant THINK_TANK_FUND_TOKENS = 40000000 * 10 ** decimals;\r\n\r\n    /// Tokens to be allocated to the Naoris Team fund.\r\n    uint256 public constant NAORIS_TEAM_TOKENS = 20000000 * 10 ** decimals;\r\n\r\n    /// Tokens to be allocated to the locked Board Bonus.\r\n    uint256 public constant LOCKED_BOARD_BONUS_TOKENS = 20000000 * 10 ** decimals;\r\n\r\n    /// Only the sale team or the owner are allowed to execute\r\n    modifier onlyTeam {\r\n        assert(msg.sender == saleTeamAddress || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// Only allowed to execute while the sale is not yet closed\r\n    modifier beforeEnd {\r\n        assert(!tokenSaleClosed);\r\n        _;\r\n    }\r\n\r\n    constructor(address _saleTeamAddress, address _referalAirdropsTokensAddress, address _reserveFundAddress,\r\n    address _thinkTankFundAddress, address _lockedBoardBonusAddress) public {\r\n        require(_saleTeamAddress != address(0));\r\n        require(_referalAirdropsTokensAddress != address(0));\r\n        require(_reserveFundAddress != address(0));\r\n        require(_thinkTankFundAddress != address(0));\r\n        require(_lockedBoardBonusAddress != address(0));\r\n\r\n        saleTeamAddress = _saleTeamAddress;\r\n        referalAirdropsTokensAddress = _referalAirdropsTokensAddress;\r\n        reserveFundAddress = _reserveFundAddress;\r\n        thinkTankFundAddress = _thinkTankFundAddress;\r\n        lockedBoardBonusAddress = _lockedBoardBonusAddress;\r\n                \r\n        /// The unsold sale tokens will be burnt when the sale is closed\r\n        balances[saleTeamAddress] = TOKENS_SALE_HARD_CAP;\r\n        totalSupply_ = TOKENS_SALE_HARD_CAP;\r\n        emit Transfer(0x0, saleTeamAddress, TOKENS_SALE_HARD_CAP);\r\n\r\n        /// The unspent referal/airdrop tokens will be sent back\r\n        /// to the reserve fund when the sale is closed\r\n        balances[referalAirdropsTokensAddress] = REFERRAL_TOKENS;\r\n        totalSupply_ = totalSupply_.add(REFERRAL_TOKENS);\r\n        emit Transfer(0x0, referalAirdropsTokensAddress, REFERRAL_TOKENS);\r\n\r\n        balances[referalAirdropsTokensAddress] = balances[referalAirdropsTokensAddress].add(AIRDROP_TOKENS);\r\n        totalSupply_ = totalSupply_.add(AIRDROP_TOKENS);\r\n        emit Transfer(0x0, referalAirdropsTokensAddress, AIRDROP_TOKENS);\r\n    }\r\n\r\n    function close() public onlyTeam beforeEnd {\r\n        /// burn the unsold sale tokens\r\n        uint256 unsoldSaleTokens = balances[saleTeamAddress];\r\n        if(unsoldSaleTokens > 0) {\r\n            balances[saleTeamAddress] = 0;\r\n            totalSupply_ = totalSupply_.sub(unsoldSaleTokens);\r\n            emit Transfer(saleTeamAddress, 0x0, unsoldSaleTokens);\r\n        }\r\n        \r\n        /// transfer the unspent referal/airdrop tokens to the Reserve fund\r\n        uint256 unspentReferalAirdropTokens = balances[referalAirdropsTokensAddress];\r\n        if(unspentReferalAirdropTokens > 0) {\r\n            balances[referalAirdropsTokensAddress] = 0;\r\n            balances[reserveFundAddress] = balances[reserveFundAddress].add(unspentReferalAirdropTokens);\r\n            emit Transfer(referalAirdropsTokensAddress, reserveFundAddress, unspentReferalAirdropTokens);\r\n        }\r\n        \r\n        /// 40% allocated to the Naoris Think Tank Fund\r\n        balances[thinkTankFundAddress] = balances[thinkTankFundAddress].add(THINK_TANK_FUND_TOKENS);\r\n        totalSupply_ = totalSupply_.add(THINK_TANK_FUND_TOKENS);\r\n        emit Transfer(0x0, thinkTankFundAddress, THINK_TANK_FUND_TOKENS);\r\n\r\n        /// 20% allocated to the Naoris Team and Advisors Fund\r\n        balances[owner] = balances[owner].add(NAORIS_TEAM_TOKENS);\r\n        totalSupply_ = totalSupply_.add(NAORIS_TEAM_TOKENS);\r\n        emit Transfer(0x0, owner, NAORIS_TEAM_TOKENS);\r\n\r\n        /// tokens of the Board Bonus locked until 1st of May 2019\r\n        TokenTimelock lockedTreasuryTokens = new TokenTimelock(this, lockedBoardBonusAddress, date01May2019);\r\n        treasuryTimelockAddress = address(lockedTreasuryTokens);\r\n        balances[treasuryTimelockAddress] = balances[treasuryTimelockAddress].add(LOCKED_BOARD_BONUS_TOKENS);\r\n        totalSupply_ = totalSupply_.add(LOCKED_BOARD_BONUS_TOKENS);\r\n        emit Transfer(0x0, treasuryTimelockAddress, LOCKED_BOARD_BONUS_TOKENS);\r\n\r\n        require(totalSupply_ <= TOKENS_HARD_CAP);\r\n\r\n        tokenSaleClosed = true;\r\n    }\r\n\r\n    function tokenDiscountPercentage(address _owner) public view returns (uint256 percent) {\r\n        if(balanceOf(_owner) >= 1000000 * 10**decimals) {\r\n            return 50;\r\n        } else if(balanceOf(_owner) >= 500000 * 10**decimals) {\r\n            return 30;\r\n        } else if(balanceOf(_owner) >= 250000 * 10**decimals) {\r\n            return 25;\r\n        } else if(balanceOf(_owner) >= 100000 * 10**decimals) {\r\n            return 20;\r\n        } else if(balanceOf(_owner) >= 50000 * 10**decimals) {\r\n            return 15;\r\n        } else if(balanceOf(_owner) >= 10000 * 10**decimals) {\r\n            return 10;\r\n        } else if(balanceOf(_owner) >= 1000 * 10**decimals) {\r\n            return 5;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getTotalDiscount(address _owner) public view returns (uint256 percent) {\r\n        uint256 total = 0;\r\n\r\n        total += tokenDiscountPercentage(_owner);\r\n        total += referralDiscountPercentage(_owner);\r\n\r\n        return (total > 60) ? 60 : total;\r\n    }\r\n\r\n    /// @dev Trading limited - requires the token sale to have closed\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if(tokenSaleClosed) {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Trading limited - requires the token sale to have closed\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if(tokenSaleClosed || msg.sender == referalAirdropsTokensAddress\r\n                        || msg.sender == saleTeamAddress) {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"thinkTankFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referalAirdropsTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"referralDiscountPercentage\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalDiscount\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKED_BOARD_BONUS_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAORIS_TEAM_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenDiscountPercentage\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referred\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedBoardBonusAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryTimelockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THINK_TANK_FUND_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SALE_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_saleTeamAddress\",\"type\":\"address\"},{\"name\":\"_referalAirdropsTokensAddress\",\"type\":\"address\"},{\"name\":\"_reserveFundAddress\",\"type\":\"address\"},{\"name\":\"_thinkTankFundAddress\",\"type\":\"address\"},{\"name\":\"_lockedBoardBonusAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referred\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NaorisToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008c2d4228b72e40584802dd35129c7f66b640a1ac0000000000000000000000006b9736c9741e74d99e7301a470dd42c199974ae5000000000000000000000000a41b30a46a58a33bc51cf426204965c5a72944b20000000000000000000000007eecba6bef034dee2e7feeba93b8f303f01400a1000000000000000000000000696fb06ecee316d87dcf88028b0aab63c03888b6","Library":"","SwarmSource":"bzzr://489a20fbf7871fb85db1fe6e43c736e454076c34987373c2c6db723acc86867b"}]}