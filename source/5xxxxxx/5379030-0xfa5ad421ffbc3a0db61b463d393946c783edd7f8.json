{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// @title Ownable contract\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/// @title Ownable contract\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Change ownership\r\n    /// @param newOwner Address of the new owner\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/// @title RateSetter contract\r\ncontract RateSetter {\r\n  \r\n    address public rateSetter;\r\n    event RateSetterChanged(address indexed previousRateSetter, address indexed newRateSetter);\r\n\r\n    function RateSetter() public {\r\n        rateSetter = msg.sender;\r\n    }\r\n\r\n    modifier onlyRateSetter() {\r\n        require(msg.sender == rateSetter);\r\n        _;\r\n    }\r\n\r\n    function changeRateSetter(address newRateSetter) onlyRateSetter public {\r\n        require(newRateSetter != address(0));\r\n        emit RateSetterChanged(rateSetter, newRateSetter);\r\n        rateSetter = newRateSetter;\r\n    }\r\n\r\n}\r\n\r\n/// @title ERC20 contract\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title CCWhitelist contract\r\ncontract CCWhitelist {\r\n    function isWhitelisted(address addr) public constant returns (bool);\r\n}\r\n\r\n/// @title Crowdsale contract\r\ncontract Crowdsale is Ownable, RateSetter {\r\n    using SafeMath for uint256;\r\n\r\n    /// Token reference\r\n    ERC20 public token;\r\n    /// Whitelist reference\r\n    CCWhitelist public whitelist;\r\n    /// Presale start time (inclusive)\r\n    uint256 public startTimeIco;\r\n    /// ICO end time (inclusive)\r\n    uint256 public endTimeIco;\r\n    /// Address where the funds will be collected\r\n    address public wallet;\r\n    /// EUR per 1 ETH rate\r\n    uint32 public ethEurRate;\r\n    /// ETH per 1 BTC rate (multiplied by 100)\r\n    uint32 public btcEthRate;\r\n    /// Amount of tokens sold in presale\r\n    uint256 public tokensSoldPre;\r\n    /// Amount of tokens sold in ICO\r\n    uint256 public tokensSoldIco;\r\n    /// Amount of raised ethers expressed in weis\r\n    uint256 public weiRaised;\r\n    /// Amount of raised EUR\r\n    uint256 public eurRaised;\r\n    /// Number of contributions\r\n    uint256 public contributions;\r\n\r\n    /// ICO time phases\r\n    uint256 public icoPhase1Start;\r\n    uint256 public icoPhase1End;\r\n    uint256 public icoPhase2Start;\r\n    uint256 public icoPhase2End;\r\n    uint256 public icoPhase3Start;\r\n    uint256 public icoPhase3End;\r\n    uint256 public icoPhase4Start;\r\n    uint256 public icoPhase4End;\r\n  \r\n\r\n    /// Discount percentages in each phase\r\n    uint8 public icoPhaseDiscountPercentage1;\r\n    uint8 public icoPhaseDiscountPercentage2;\r\n    uint8 public icoPhaseDiscountPercentage3;\r\n    uint8 public icoPhaseDiscountPercentage4;\r\n\r\n    /// Hard cap in EUR\r\n    uint32 public HARD_CAP_EUR = 19170000; // 19 170 000 EUR\r\n    /// Soft cap in EUR\r\n    uint32 public SOFT_CAP_EUR = 2000000; // 2 000 000 EUR\r\n    /// Hard cap in tokens\r\n    uint256 public HARD_CAP_IN_TOKENS = 810 * 10**24; //810m CC tokens\r\n\r\n    /// Mapping for contributors - to limit max contribution and possibly to extract info for refund if soft cap is not reached\r\n    mapping (address => uint) public contributors;\r\n\r\n    function Crowdsale(uint256 _startTimeIco, uint256 _endTimeIco, uint32 _ethEurRate, uint32 _btcEthRate, address _wallet, address _tokenAddress, address _whitelistAddress, uint256 _tokensSoldPre, uint256 _contributions, uint256 _weiRaised, uint256 _eurRaised, uint256 _tokensSoldIco) public {\r\n        require(_endTimeIco >= _startTimeIco);\r\n        require(_ethEurRate > 0 && _btcEthRate > 0);\r\n        require(_wallet != address(0));\r\n        require(_tokenAddress != address(0));\r\n        require(_whitelistAddress != address(0));\r\n        require(_tokensSoldPre > 0);\r\n\r\n        startTimeIco = _startTimeIco;\r\n        endTimeIco = _endTimeIco;\r\n        ethEurRate = _ethEurRate;\r\n        btcEthRate = _btcEthRate;\r\n        wallet = _wallet;\r\n        token = ERC20(_tokenAddress);\r\n        whitelist = CCWhitelist(_whitelistAddress);\r\n        tokensSoldPre = _tokensSoldPre;\r\n        contributions = _contributions;\r\n        weiRaised = _weiRaised;\r\n        eurRaised = _eurRaised;\r\n        tokensSoldIco = _tokensSoldIco;\r\n        // set time phases\r\n        icoPhase1Start = 1520208000;\r\n        icoPhase1End = 1520812799;\r\n        icoPhase2Start = 1520812800;\r\n        icoPhase2End = 1526255999;\r\n        icoPhase3Start = 1526256000;\r\n        icoPhase3End = 1527465599;\r\n        icoPhase4Start = 1527465600;\r\n        icoPhase4End = 1528113600;\r\n        icoPhaseDiscountPercentage1 = 40; // 40% discount\r\n        icoPhaseDiscountPercentage2 = 30; // 30% discount\r\n        icoPhaseDiscountPercentage3 = 20; // 20% discount\r\n        icoPhaseDiscountPercentage4 = 0;  // 0% discount\r\n    }\r\n\r\n\r\n    /// @dev Sets the rates in crowdsale\r\n    /// @param _ethEurRate ETH to EUR rate\r\n    /// @param _btcEthRate BTC to ETH rate \r\n    function setRates(uint32 _ethEurRate, uint32 _btcEthRate) public onlyRateSetter {\r\n        require(_ethEurRate > 0 && _btcEthRate > 0);\r\n        ethEurRate = _ethEurRate;\r\n        btcEthRate = _btcEthRate;\r\n        emit RatesChanged(rateSetter, ethEurRate, btcEthRate);\r\n    }\r\n\r\n\r\n    /// @dev Sets the ICO start and end time\r\n    /// @param _start Start time\r\n    /// @param _end End time \r\n    function setICOtime(uint256 _start, uint256 _end) external onlyOwner {\r\n        require(_start < _end);\r\n        startTimeIco = _start;\r\n        endTimeIco = _end;\r\n        emit ChangeIcoPhase(0, _start, _end);\r\n    }\r\n\r\n\r\n    /// @dev Sets the ICO phase 1 duration\r\n    /// @param _start Start time\r\n    /// @param _end End time \r\n    function setIcoPhase1(uint256 _start, uint256 _end) external onlyOwner {\r\n        require(_start < _end);\r\n        icoPhase1Start = _start;\r\n        icoPhase1End = _end;\r\n        emit ChangeIcoPhase(1, _start, _end);\r\n    }\r\n\r\n    /// @dev Sets the ICO phase 2 duration\r\n    /// @param _start Start time\r\n    /// @param _end End time \r\n    function setIcoPhase2(uint256 _start, uint256 _end) external onlyOwner {\r\n        require(_start < _end);\r\n        icoPhase2Start = _start;\r\n        icoPhase2End = _end;\r\n        emit ChangeIcoPhase(2, _start, _end);\r\n    }\r\n\r\n      /// @dev Sets the ICO phase 3 duration\r\n      /// @param _start Start time\r\n      /// @param _end End time  \r\n    function setIcoPhase3(uint256 _start, uint256 _end) external onlyOwner {\r\n        require(_start < _end);\r\n        icoPhase3Start = _start;\r\n        icoPhase3End = _end;\r\n        emit ChangeIcoPhase(3, _start, _end);\r\n    }\r\n\r\n    /// @dev Sets the ICO phase 4 duration\r\n    /// @param _start Start time\r\n    /// @param _end End time \r\n    function setIcoPhase4(uint256 _start, uint256 _end) external onlyOwner {\r\n        require(_start < _end);\r\n        icoPhase4Start = _start;\r\n        icoPhase4End = _end;\r\n        emit ChangeIcoPhase(4, _start, _end);\r\n    }\r\n\r\n    function setIcoDiscountPercentages(uint8 _icoPhaseDiscountPercentage1, uint8 _icoPhaseDiscountPercentage2, uint8 _icoPhaseDiscountPercentage3, uint8 _icoPhaseDiscountPercentage4) external onlyOwner {\r\n        icoPhaseDiscountPercentage1 = _icoPhaseDiscountPercentage1;\r\n        icoPhaseDiscountPercentage2 = _icoPhaseDiscountPercentage2;\r\n        icoPhaseDiscountPercentage3 = _icoPhaseDiscountPercentage3;\r\n        icoPhaseDiscountPercentage4 = _icoPhaseDiscountPercentage4;\r\n        emit DiscountPercentagesChanged(_icoPhaseDiscountPercentage1, _icoPhaseDiscountPercentage2, _icoPhaseDiscountPercentage3, _icoPhaseDiscountPercentage4);\r\n\r\n    }\r\n\r\n    /// @dev Fallback function for crowdsale contribution\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Buy tokens function\r\n    /// @param beneficiary Address which will receive the tokens\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(whitelist.isWhitelisted(beneficiary));\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount > 0);\r\n        require(contributors[beneficiary].add(weiAmount) <= 200 ether);\r\n        uint256 tokenAmount = 0;\r\n        if (isIco()) {\r\n            uint8 discountPercentage = getIcoDiscountPercentage();\r\n            tokenAmount = getTokenAmount(weiAmount, discountPercentage);\r\n            /// Minimum contribution 1 token during ICO\r\n            require(tokenAmount >= 10**18); \r\n            uint256 newTokensSoldIco = tokensSoldIco.add(tokenAmount); \r\n            require(newTokensSoldIco <= HARD_CAP_IN_TOKENS);\r\n            tokensSoldIco = newTokensSoldIco;\r\n        } else {\r\n            /// Stop execution and return remaining gas\r\n            require(false);\r\n        }\r\n        executeTransaction(beneficiary, weiAmount, tokenAmount);\r\n    }\r\n\r\n    /// @dev Internal function used for calculating ICO discount percentage depending on phases\r\n    function getIcoDiscountPercentage() internal constant returns (uint8) {\r\n        if (icoPhase1Start >= now && now < icoPhase1End) {\r\n            return icoPhaseDiscountPercentage1;\r\n        }\r\n        else if (icoPhase2Start >= now && now < icoPhase2End) {\r\n            return icoPhaseDiscountPercentage2;\r\n        } else if (icoPhase3Start >= now && now < icoPhase3End) {\r\n            return icoPhaseDiscountPercentage3;\r\n        } else {\r\n            return icoPhaseDiscountPercentage4;\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function used to calculate amount of tokens based on discount percentage\r\n    function getTokenAmount(uint256 weiAmount, uint8 discountPercentage) internal constant returns (uint256) {\r\n        /// Less than 100 to avoid division with zero\r\n        require(discountPercentage >= 0 && discountPercentage < 100); \r\n        uint256 baseTokenAmount = weiAmount.mul(ethEurRate);\r\n        uint256 denominator = 3 * (100 - discountPercentage);\r\n        uint256 tokenAmount = baseTokenAmount.mul(10000).div(denominator);\r\n        return tokenAmount;\r\n    }\r\n\r\n   \r\n    /// point out that it works for the last block\r\n    /// @dev This method is used to get the current amount user can receive for 1ETH -- Used by frontend for easier calculation\r\n    /// @return Amount of CC tokens\r\n    function getCurrentTokenAmountForOneEth() public constant returns (uint256) {\r\n        if (isIco()) {\r\n            uint8 discountPercentage = getIcoDiscountPercentage();\r\n            return getTokenAmount(1 ether, discountPercentage);\r\n        } \r\n        return 0;\r\n    }\r\n  \r\n    /// @dev This method is used to get the current amount user can receive for 1BTC -- Used by frontend for easier calculation\r\n    /// @return Amount of CC tokens\r\n    function getCurrentTokenAmountForOneBtc() public constant returns (uint256) {\r\n        uint256 amountForOneEth = getCurrentTokenAmountForOneEth();\r\n        return amountForOneEth.mul(btcEthRate).div(100);\r\n    }\r\n\r\n    /// @dev Internal function for execution of crowdsale transaction and proper logging used by payable functions\r\n    function executeTransaction(address beneficiary, uint256 weiAmount, uint256 tokenAmount) internal {\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        uint256 eurAmount = weiAmount.mul(ethEurRate).div(10**18);\r\n        eurRaised = eurRaised.add(eurAmount);\r\n        token.transfer(beneficiary, tokenAmount);\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n        contributions = contributions.add(1);\r\n        contributors[beneficiary] = contributors[beneficiary].add(weiAmount);\r\n        wallet.transfer(weiAmount);\r\n    }\r\n\r\n    /// @dev Check if ICO is active\r\n    function isIco() public constant returns (bool) {\r\n        return now >= startTimeIco && now <= endTimeIco;\r\n    }\r\n\r\n    /// @dev Check if ICO has ended\r\n    function hasIcoEnded() public constant returns (bool) {\r\n        return now > endTimeIco;\r\n    }\r\n\r\n    /// @dev Amount of tokens that have been sold during both presale and ICO phase\r\n    function cummulativeTokensSold() public constant returns (uint256) {\r\n        return tokensSoldPre + tokensSoldIco;\r\n    }\r\n\r\n    /// @dev Function to extract mistakenly sent ERC20 tokens sent to Crowdsale contract and to extract unsold CC tokens\r\n    /// @param _token Address of token we want to extract\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == address(0)) { \r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        ERC20 erc20Token = ERC20(_token);\r\n        uint balance = erc20Token.balanceOf(this);\r\n        erc20Token.transfer(owner, balance);\r\n        emit ClaimedTokens(_token, owner, balance);\r\n    }\r\n\r\n    /// Events\r\n    event TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n    event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n    event IcoPhaseAmountsChanged(uint256 _icoPhaseAmount1, uint256 _icoPhaseAmount2, uint256 _icoPhaseAmount3, uint256 _icoPhaseAmount4);\r\n    event RatesChanged(address indexed _rateSetter, uint32 _ethEurRate, uint32 _btcEthRate);\r\n    event DiscountPercentagesChanged(uint8 _icoPhaseDiscountPercentage1, uint8 _icoPhaseDiscountPercentage2, uint8 _icoPhaseDiscountPercentage3, uint8 _icoPhaseDiscountPercentage4);\r\n    /// 0 is for changing start and end time of ICO\r\n    event ChangeIcoPhase(uint8 _phase, uint256 _start, uint256 _end);\r\n\r\n}\r\n\r\n/// @title CulturalCoinCrowdsale contract\r\ncontract CulturalCoinCrowdsale is Crowdsale {\r\n\r\n    function CulturalCoinCrowdsale(uint256 _startTimeIco, uint256 _endTimeIco, uint32 _ethEurRate, uint32 _btcEthRate, address _wallet, address _tokenAddress, address _whitelistAddress, uint256 _tokensSoldPre, uint256 _contributions, uint256 _weiRaised, uint256 _eurRaised, uint256 _tokensSoldIco) \r\n    Crowdsale(_startTimeIco, _endTimeIco, _ethEurRate, _btcEthRate, _wallet, _tokenAddress, _whitelistAddress, _tokensSoldPre, _contributions, _weiRaised, _eurRaised, _tokensSoldIco) public {\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP_EUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase1End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase4End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase2Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setICOtime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eurRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldPre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP_IN_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setIcoPhase1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase2End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase3End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP_EUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRateSetter\",\"type\":\"address\"}],\"name\":\"changeRateSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase4Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIcoEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setIcoPhase2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethEurRate\",\"type\":\"uint32\"},{\"name\":\"_btcEthRate\",\"type\":\"uint32\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenAmountForOneEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoPhaseDiscountPercentage1\",\"type\":\"uint8\"},{\"name\":\"_icoPhaseDiscountPercentage2\",\"type\":\"uint8\"},{\"name\":\"_icoPhaseDiscountPercentage3\",\"type\":\"uint8\"},{\"name\":\"_icoPhaseDiscountPercentage4\",\"type\":\"uint8\"}],\"name\":\"setIcoDiscountPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase1Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setIcoPhase3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cummulativeTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenAmountForOneBtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethEurRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase3Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setIcoPhase4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimeIco\",\"type\":\"uint256\"},{\"name\":\"_endTimeIco\",\"type\":\"uint256\"},{\"name\":\"_ethEurRate\",\"type\":\"uint32\"},{\"name\":\"_btcEthRate\",\"type\":\"uint32\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"name\":\"_tokensSoldPre\",\"type\":\"uint256\"},{\"name\":\"_contributions\",\"type\":\"uint256\"},{\"name\":\"_weiRaised\",\"type\":\"uint256\"},{\"name\":\"_eurRaised\",\"type\":\"uint256\"},{\"name\":\"_tokensSoldIco\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoPhaseAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoPhaseAmount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoPhaseAmount3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoPhaseAmount4\",\"type\":\"uint256\"}],\"name\":\"IcoPhaseAmountsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_rateSetter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethEurRate\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_btcEthRate\",\"type\":\"uint32\"}],\"name\":\"RatesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoPhaseDiscountPercentage1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_icoPhaseDiscountPercentage2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_icoPhaseDiscountPercentage3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_icoPhaseDiscountPercentage4\",\"type\":\"uint8\"}],\"name\":\"DiscountPercentagesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_phase\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"ChangeIcoPhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRateSetter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRateSetter\",\"type\":\"address\"}],\"name\":\"RateSetterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CulturalCoinCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a9c8880000000000000000000000000000000000000000000000000000000005b1529c0000000000000000000000000000000000000000000000000000000000000013900000000000000000000000000000000000000000000000000000000000007310000000000000000000000001b6b58b7d8226cc5242e57864519b8310055a1eb0000000000000000000000003c159c0b03974f4b2befdde6f9f4ef09fd8d697b00000000000000000000000080199cf8cf5292458e8a6f56499b6de69c240e9d0000000000000000000000000000000000000000000270d617cc71ffa25d55500000000000000000000000000000000000000000000000000000000000000039000000000000000000000000000000000000000000000008e9a870ca366f98000000000000000000000000000000000000000000000000000000000000018d99000000000000000000000000000000000000000000029fb6ae63048381f44178","Library":"","SwarmSource":"bzzr://58f39d3eb1f31441234e163675b10393dd58565cb867d56e3764e33e8a146672"}]}