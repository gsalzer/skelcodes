{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n//**\r\n//**\r\ncontract ERC721 {\r\n   // ERC20 compatible functions\r\n  string public name = \"CryptoElections\";\r\n  string public symbol = \"CE\";\r\n   function totalSupply()  public view returns (uint256);\r\n   function balanceOf(address _owner) public constant returns (uint);\r\n   // Functions that define ownership\r\n   function ownerOf(uint256 _tokenId) public constant returns (address owner);\r\n   function approve(address _to, uint256 _tokenId) public returns (bool success);\r\n   function takeOwnership(uint256 _tokenId) public;\r\n   function transfer(address _to, uint256 _tokenId) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _tokenId) public returns (bool success);\r\n   function tokensOfOwnerByIndex(address _owner, uint256 _index) view public  returns (uint tokenId);\r\n   // Token metadata\r\n // function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\r\n function implementsERC721() public pure returns (bool);\r\n}\r\n\r\ncontract CryptoElections is ERC721 {\r\n\r\n    /* Define variable owner of the type address */\r\n    address creator;\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCountryOwner(uint256 countryId) {\r\n        require(countries[countryId].president==msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyCityOwner(uint cityId) {\r\n        require(cities[cityId].mayor==msg.sender);\r\n        _;\r\n    }\r\n\r\n    struct Country {\r\n        address president;\r\n        string slogan;\r\n        string flagUrl;\r\n    }\r\n    struct City {\r\n        address mayor;\r\n        string slogan;\r\n        string picture;\r\n        uint purchases;\r\n        uint startPrice;\r\n          uint multiplierStep;\r\n    }\r\n    \r\n    \r\n    \r\n    bool maintenance=false;\r\n    bool transferEnabled=false;\r\n    bool inited=false;\r\n    event withdrawalEvent(address user,uint value);\r\n    event pendingWithdrawalEvent(address user,uint value);\r\n    event assignCountryEvent(address user,uint countryId);\r\n    event buyCityEvent(address user,uint cityId);\r\n    \r\n       // Events\r\n   event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n   event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n   \r\n   \r\n    mapping(uint => Country) public countries ;\r\n    mapping(uint =>  uint[]) public countriesCities ;\r\n    mapping(uint =>  uint) public citiesCountries ;\r\n\r\n    mapping(uint =>  uint) public cityPopulation ;\r\n    mapping(uint => City) public cities;\r\n    mapping(address => uint[]) public userCities;\r\n    mapping(address => uint) public userPendingWithdrawals;\r\n    mapping(address => string) public userNicknames;\r\n     mapping(bytes32 => bool) public takenNicknames;\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n       \r\n    uint totalCities=0;\r\n\r\n function implementsERC721() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns alloed status\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        require(transferEnabled);\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n   function totalSupply()  public  view returns (uint256 ) {\r\n       \r\n       return totalCities;\r\n   }\r\n    function CryptoElections() public {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n   \r\n    \r\n      function balanceOf(address _owner) constant public returns (uint balance) {\r\n          \r\n          return userCities[_owner].length;\r\n      }\r\n      \r\n        function ownerOf(uint256 _tokenId) constant public  returns (address owner) {\r\n            \r\n            return cities[_tokenId].mayor;\r\n        }\r\n \r\n \r\n       function approve(address _to, uint256 _tokenId) public returns (bool success){\r\n           require(transferEnabled);\r\n       require(msg.sender == ownerOf(_tokenId));\r\n       require(msg.sender != _to);\r\n       allowed[msg.sender][_to] = _tokenId;\r\n       Approval(msg.sender, _to, _tokenId);\r\n       return true;\r\n   }\r\n   \r\n     function takeOwnership(uint256 _tokenId) public {\r\n         require(transferEnabled);\r\n       require(cityPopulation[_tokenId]!=0);\r\n       address oldOwner = ownerOf(_tokenId);\r\n       address newOwner = msg.sender;\r\n       require(newOwner != oldOwner);\r\n       // cities can be transfered one-by-one\r\n       require(allowed[oldOwner][newOwner] == _tokenId);\r\n       \r\n       \r\n       _removeUserCity(oldOwner,_tokenId);\r\n       cities[_tokenId].mayor=newOwner;\r\n       _addUserCity(newOwner,_tokenId);\r\n       \r\n   \r\n       Transfer(oldOwner, newOwner, _tokenId);\r\n   }\r\n   \r\n\r\n      function transfer(address _to, uint256 _tokenId) public  returns (bool success) {\r\n       require(transferEnabled);\r\n       address currentOwner = msg.sender;\r\n       address newOwner = _to;\r\n      \r\n        require(cityPopulation[_tokenId]!=0);\r\n       require(currentOwner == ownerOf(_tokenId));\r\n       require(currentOwner != newOwner);\r\n       require(newOwner != address(0));\r\n        _removeUserCity(currentOwner,_tokenId);\r\n       cities[_tokenId].mayor=newOwner;\r\n   \r\n        _addUserCity(newOwner,_tokenId);\r\n       Transfer(currentOwner, newOwner, _tokenId);\r\n       return true;\r\n   }\r\n   \r\n     function transferFrom(address from, address to, uint _tokenId) public returns (bool success) {\r\n         \r\n           require(transferEnabled);\r\n       address currentOwner = from;\r\n       address newOwner = to;\r\n      \r\n        require(cityPopulation[_tokenId]!=0);\r\n       require(currentOwner == ownerOf(_tokenId));\r\n       require(currentOwner != newOwner);\r\n       require(newOwner != address(0));\r\n         // cities can be transfered one-by-one\r\n       require(allowed[currentOwner][msg.sender] == _tokenId);\r\n       \r\n        _removeUserCity(currentOwner,_tokenId);\r\n       cities[_tokenId].mayor=newOwner;\r\n   \r\n        _addUserCity(newOwner,_tokenId);\r\n       Transfer(currentOwner, newOwner, _tokenId);\r\n       \r\n         return true;\r\n         \r\n     }\r\n   \r\n   \r\n    function tokensOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint tokenId) {\r\n       \r\n        return userCities[_owner][_index];\r\n    }\r\n   // Token metadata\r\n\r\n\r\n  \r\n    function markContractAsInited() public\r\n    onlyCreator() \r\n    {\r\n     inited=true;   \r\n    }\r\n    \r\n    \r\n /*\r\n    Functions to migrate from previous contract. After migration is complete this functions will be blocked\r\n    */\r\n    function addOldMayors(uint[] citiesIds,uint[] purchases,address[] mayors) public \r\n    onlyCreator()\r\n    {\r\n        require(!inited);\r\n        for (uint i = 0;i<citiesIds.length;i++) {\r\n            cities[citiesIds[i]].mayor = mayors[i];\r\n            cities[citiesIds[i]].purchases = purchases[i];\r\n        }\r\n    }\r\n    \r\n    function addOldNickname(address user,string nickname) public\r\n    onlyCreator()\r\n    {\r\n        require(!inited);\r\n           takenNicknames[keccak256(nickname)]=true;\r\n         userNicknames[user] = nickname;\r\n    }\r\n    function addOldPresidents(uint[] countriesIds,address[] presidents) public\r\n    onlyCreator()\r\n    {\r\n        require(!inited);\r\n        for (uint i = 0;i<countriesIds.length;i++) {\r\n            countries[countriesIds[i]].president = presidents[i];\r\n        }\r\n    }\r\n    \r\n      function addOldWithdrawals(address[] userIds,uint[] withdrawals) public\r\n    onlyCreator()\r\n    {\r\n        require(!inited);\r\n        for (uint i = 0;i<userIds.length;i++) {\r\n            userPendingWithdrawals[userIds[i]] = withdrawals[i];\r\n        }\r\n    }\r\n    \r\n    /* This function is executed at initialization and sets the owner of the contract */\r\n    /* Function to recover the funds on the contract */\r\n    function kill() public\r\n    onlyCreator()\r\n    {\r\n        selfdestruct(creator);\r\n    }\r\n\r\n    function transferContract(address newCreator) public\r\n    onlyCreator()\r\n    {\r\n        creator=newCreator;\r\n    }\r\n\r\n\r\n\r\n    // Contract initialisation\r\n    function addCountryCities(uint countryId,uint[] _cities,uint multiplierStep,uint startPrice)  public\r\n    onlyCreator()\r\n    {\r\n        countriesCities[countryId] = _cities;\r\n        for (uint i = 0;i<_cities.length;i++) {\r\n            Transfer(0x0,address(this),_cities[i]);\r\n            cities[_cities[i]].multiplierStep=multiplierStep;\r\n              cities[_cities[i]].startPrice=startPrice;\r\n            citiesCountries[_cities[i]] = countryId;\r\n        }\r\n        //skipping uniquality check\r\n        totalCities+=_cities.length;\r\n    }\r\n    function setMaintenanceMode(bool _maintenance) public\r\n    onlyCreator()\r\n    {\r\n        maintenance=_maintenance;\r\n    }\r\n\r\n   function setTransferMode(bool _status) public\r\n    onlyCreator()\r\n    {\r\n        transferEnabled=_status;\r\n    }\r\n    // Contract initialisation\r\n    function addCitiesPopulation(uint[] _cities,uint[]_populations)  public\r\n    onlyCreator()\r\n    {\r\n\r\n        for (uint i = 0;i<_cities.length;i++) {\r\n\r\n            cityPopulation[_cities[i]] = _populations[i];\r\n        }\r\n        \r\n    }\r\n\r\n    function setCountrySlogan(uint countryId,string slogan) public\r\n    onlyCountryOwner(countryId)\r\n    {\r\n        countries[countryId].slogan = slogan;\r\n    }\r\n\r\n    function setCountryPicture(uint countryId,string _flagUrl) public\r\n    onlyCountryOwner(countryId)\r\n    {\r\n        countries[countryId].flagUrl = _flagUrl;\r\n    }\r\n\r\n    function setCitySlogan(uint256 cityId,string _slogan) public\r\n    onlyCityOwner(cityId)\r\n    {\r\n        cities[cityId].slogan = _slogan;\r\n    }\r\n\r\n    function setCityPicture(uint256 cityId,string _picture) public\r\n    onlyCityOwner(cityId)\r\n    {\r\n        cities[cityId].picture = _picture;\r\n    }\r\n\r\nfunction stringToBytes32(string memory source) private pure returns (bytes32 result) {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n}\r\n    // returns address mayor;\r\n        \r\n      function getCities(uint[] citiesIds)  public view returns (City[]) {\r\n     \r\n        City[] memory cityArray= new City[](citiesIds.length);\r\n     \r\n        for (uint i=0;i<citiesIds.length;i++) {\r\n          \r\n            cityArray[i]=cities[citiesIds[i]];\r\n          \r\n            \r\n        }\r\n        return cityArray;\r\n        \r\n    }\r\n    \r\n              function getCitiesStrings(uint[] citiesIds)  public view returns (  bytes32[],bytes32[]) {\r\n     \r\n        bytes32 [] memory slogans=new bytes32[](citiesIds.length);\r\n         bytes32 [] memory pictures=new bytes32[](citiesIds.length);\r\n   \r\n     \r\n        for (uint i=0;i<citiesIds.length;i++) {\r\n          \r\n            slogans[i]=stringToBytes32(cities[citiesIds[i]].slogan);\r\n            pictures[i]=stringToBytes32(cities[citiesIds[i]].picture);\r\n       \r\n            \r\n        }\r\n        return (slogans,pictures);\r\n        \r\n    }\r\n    \r\n   \r\n    function getCitiesData(uint[] citiesIds)  public view returns (  address [],uint[],uint[],uint[]) {\r\n   \r\n         address [] memory mayors=new address[](citiesIds.length);\r\n   \r\n        uint [] memory purchases=new uint[](citiesIds.length);\r\n        uint [] memory startPrices=new uint[](citiesIds.length);\r\n        uint [] memory multiplierSteps=new uint[](citiesIds.length);\r\n                                    \r\n        for (uint i=0;i<citiesIds.length;i++) {\r\n            mayors[i]=(cities[citiesIds[i]].mayor);\r\n      \r\n            purchases[i]=(cities[citiesIds[i]].purchases);\r\n            startPrices[i]=(cities[citiesIds[i]].startPrice);\r\n            multiplierSteps[i]=(cities[citiesIds[i]].multiplierStep);\r\n            \r\n        }\r\n        return (mayors,purchases,startPrices,multiplierSteps);\r\n        \r\n    }\r\n    \r\n    function getCountriesData(uint[] countriesIds)  public view returns (    address [],bytes32[],bytes32[]) {\r\n          address [] memory presidents=new address[](countriesIds.length);\r\n        bytes32 [] memory slogans=new bytes32[](countriesIds.length);\r\n         bytes32 [] memory flagUrls=new bytes32[](countriesIds.length);\r\n   \r\n        for (uint i=0;i<countriesIds.length;i++) {\r\n            presidents[i]=(countries[countriesIds[i]].president);\r\n            slogans[i]=stringToBytes32(countries[countriesIds[i]].slogan);\r\n            flagUrls[i]=stringToBytes32(countries[countriesIds[i]].flagUrl);\r\n            \r\n        }\r\n        return (presidents,slogans,flagUrls);\r\n        \r\n    }\r\n\r\n    function withdraw() public {\r\n        if (maintenance) revert();\r\n        uint amount = userPendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n\r\n        userPendingWithdrawals[msg.sender] = 0;\r\n        withdrawalEvent(msg.sender,amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n  \r\n  function getPrices2(uint purchases,uint startPrice,uint multiplierStep) public pure returns (uint[4]) {\r\n      \r\n        uint price=startPrice;\r\n        uint pricePrev = price;\r\n        uint systemCommission = startPrice;\r\n        uint presidentCommission = 0;\r\n        uint ownerCommission;\r\n\r\n        for (uint i = 1;i<=purchases;i++) {\r\n            if (i<=multiplierStep)\r\n                price = price*2;\r\n            else\r\n                price = (price*12)/10;\r\n\r\n            presidentCommission = price/100;\r\n            systemCommission = (price-pricePrev)*2/10;\r\n            ownerCommission = price-presidentCommission-systemCommission;\r\n\r\n            pricePrev = price;\r\n        }\r\n        return [price,systemCommission,presidentCommission,ownerCommission];\r\n    }\r\n\r\n\r\n    function setNickname(string nickname) public returns(bool) {\r\n        if (maintenance) revert();\r\n        if (takenNicknames[keccak256(nickname)]==true) {\r\n                     return false;\r\n        }\r\n        userNicknames[msg.sender] = nickname;\r\n        takenNicknames[keccak256(nickname)]=true;\r\n        return true;\r\n    }\r\n\r\n    function _assignCountry(uint countryId)    private returns (bool) {\r\n        uint  totalPopulation;\r\n        uint  controlledPopulation;\r\n\r\n        uint  population;\r\n        for (uint i = 0;i<countriesCities[countryId].length;i++) {\r\n            population = cityPopulation[countriesCities[countryId][i]];\r\n            if (cities[countriesCities[countryId][i]].mayor==msg.sender) {\r\n                controlledPopulation += population;\r\n            }\r\n            totalPopulation += population;\r\n        }\r\n        if (controlledPopulation*2>(totalPopulation)) {\r\n            countries[countryId].president = msg.sender;\r\n            assignCountryEvent(msg.sender,countryId);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    function buyCity(uint cityId) payable  public  {\r\n        if (maintenance) revert();\r\n        uint[4] memory prices = getPrices2(cities[cityId].purchases,cities[cityId].startPrice,cities[cityId].multiplierStep);\r\n\r\n        if (cities[cityId].mayor==msg.sender) {\r\n            revert();\r\n        }\r\n        if (cityPopulation[cityId]==0) {\r\n            revert();\r\n        }\r\n\r\n        if ( msg.value+userPendingWithdrawals[msg.sender]>=prices[0]) {\r\n            // use user limit\r\n            userPendingWithdrawals[msg.sender] = userPendingWithdrawals[msg.sender]+msg.value-prices[0];\r\n            pendingWithdrawalEvent(msg.sender,userPendingWithdrawals[msg.sender]+msg.value-prices[0]);\r\n\r\n            cities[cityId].purchases = cities[cityId].purchases+1;\r\n\r\n            userPendingWithdrawals[cities[cityId].mayor] += prices[3];\r\n            pendingWithdrawalEvent(cities[cityId].mayor,prices[3]);\r\n\r\n            if (countries[citiesCountries[cityId]].president==0) {\r\n                userPendingWithdrawals[creator] += prices[2];\r\n                pendingWithdrawalEvent(creator,prices[2]);\r\n\r\n            } else {\r\n                userPendingWithdrawals[countries[citiesCountries[cityId]].president] += prices[2];\r\n                pendingWithdrawalEvent(countries[citiesCountries[cityId]].president,prices[2]);\r\n            }\r\n            // change mayor\r\n            address oldMayor;\r\n            oldMayor=cities[cityId].mayor;\r\n            if (cities[cityId].mayor>0) {\r\n                _removeUserCity(cities[cityId].mayor,cityId);\r\n            }\r\n\r\n\r\n\r\n            cities[cityId].mayor = msg.sender;\r\n            _addUserCity(msg.sender,cityId);\r\n\r\n            _assignCountry(citiesCountries[cityId]);\r\n\r\n            //send money to creator\r\n            creator.transfer(prices[1]);\r\n           // buyCityEvent(msg.sender,cityId);\r\n             Transfer(0x0,msg.sender,cityId);\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    function getUserCities(address user) public view returns (uint[]) {\r\n        return userCities[user];\r\n    }\r\n\r\n    function _addUserCity(address user,uint cityId) private {\r\n        bool added = false;\r\n        for (uint i = 0; i<userCities[user].length; i++) {\r\n            if (userCities[user][i]==0) {\r\n                userCities[user][i] = cityId;\r\n                added = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!added)\r\n            userCities[user].push(cityId);\r\n    }\r\n\r\n    function _removeUserCity(address user,uint cityId) private {\r\n        for (uint i = 0; i<userCities[user].length; i++) {\r\n            if (userCities[user][i]==cityId) {\r\n                delete userCities[user][i];\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citiesCountries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"_picture\",\"type\":\"string\"}],\"name\":\"setCityPicture\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countries\",\"outputs\":[{\"name\":\"president\",\"type\":\"address\"},{\"name\":\"slogan\",\"type\":\"string\"},{\"name\":\"flagUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"citiesIds\",\"type\":\"uint256[]\"},{\"name\":\"purchases\",\"type\":\"uint256[]\"},{\"name\":\"mayors\",\"type\":\"address[]\"}],\"name\":\"addOldMayors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"setNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTransferMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"markContractAsInited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"},{\"name\":\"slogan\",\"type\":\"string\"}],\"name\":\"setCountrySlogan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"citiesIds\",\"type\":\"uint256[]\"}],\"name\":\"getCities\",\"outputs\":[{\"components\":[{\"name\":\"mayor\",\"type\":\"address\"},{\"name\":\"slogan\",\"type\":\"string\"},{\"name\":\"picture\",\"type\":\"string\"},{\"name\":\"purchases\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"multiplierStep\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"_slogan\",\"type\":\"string\"}],\"name\":\"setCitySlogan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countriesCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userIds\",\"type\":\"address[]\"},{\"name\":\"withdrawals\",\"type\":\"uint256[]\"}],\"name\":\"addOldWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cities\",\"type\":\"uint256[]\"},{\"name\":\"_populations\",\"type\":\"uint256[]\"}],\"name\":\"addCitiesPopulation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"},{\"name\":\"_cities\",\"type\":\"uint256[]\"},{\"name\":\"multiplierStep\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"addCountryCities\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countriesIds\",\"type\":\"uint256[]\"},{\"name\":\"presidents\",\"type\":\"address[]\"}],\"name\":\"addOldPresidents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNicknames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cities\",\"outputs\":[{\"name\":\"mayor\",\"type\":\"address\"},{\"name\":\"slogan\",\"type\":\"string\"},{\"name\":\"picture\",\"type\":\"string\"},{\"name\":\"purchases\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"multiplierStep\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cityId\",\"type\":\"uint256\"}],\"name\":\"buyCity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maintenance\",\"type\":\"bool\"}],\"name\":\"setMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchases\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"multiplierStep\",\"type\":\"uint256\"}],\"name\":\"getPrices2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"takenNicknames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"},{\"name\":\"_flagUrl\",\"type\":\"string\"}],\"name\":\"setCountryPicture\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"addOldNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cityPopulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"citiesIds\",\"type\":\"uint256[]\"}],\"name\":\"getCitiesData\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"countriesIds\",\"type\":\"uint256[]\"}],\"name\":\"getCountriesData\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"citiesIds\",\"type\":\"uint256[]\"}],\"name\":\"getCitiesStrings\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"pendingWithdrawalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"assignCountryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint256\"}],\"name\":\"buyCityEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoElections","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2be7b488a7ccdd6e80eecb3d884fec017e5fb76d9f110407727fe9344227569f"}]}