{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Pixereum {\r\n\r\n\r\n    struct Pixel {\r\n        address owner;\r\n        string message;\r\n        uint256 price;\r\n        bool isSale;\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * public variables\r\n    ***************************************************************************/\r\n    uint24[10000] public colors;\r\n    bool public isMessageEnabled;\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * private variables\r\n    ***************************************************************************/\r\n    mapping (uint16 => Pixel) private pixels;\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * public constants\r\n    ***************************************************************************/\r\n    uint16 public constant numberOfPixels = 10000;\r\n    uint16 public constant width = 100;\r\n    uint256 public constant feeRate = 100;\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * private constants\r\n    ***************************************************************************/\r\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\r\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\r\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * modifiers\r\n    ***************************************************************************/\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPixelOwner(uint16 pixelNumber) {\r\n        require(msg.sender == pixels[pixelNumber].owner);\r\n        _;\r\n    }\r\n\r\n    modifier messageEnabled {\r\n        require(isMessageEnabled == true);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * public methods\r\n    ***************************************************************************/\r\n\r\n    // constructor\r\n    function Pixereum() public {\r\n        isMessageEnabled = true;\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * public methods\r\n    ***************************************************************************/\r\n\r\n    function getPixel(uint16 _pixelNumber)\r\n        constant\r\n        public\r\n        returns(address, string, uint256, bool) \r\n    {\r\n        Pixel memory pixel;\r\n        if (pixels[_pixelNumber].owner == 0) {\r\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \r\n        } else {\r\n            pixel = pixels[_pixelNumber];\r\n        }\r\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\r\n    }\r\n    \r\n    \r\n    function getColors() constant public returns(uint24[10000])  {\r\n        return colors;\r\n    }\r\n\r\n\r\n    // called when ether is sent to this contract\r\n    function ()\r\n        payable\r\n        public \r\n    {\r\n        // check if data format is valid\r\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\r\n        require(msg.data.length == 5);\r\n\r\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\r\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\r\n        buyPixel(msg.sender, pixelNumber, color, \"\");\r\n    }\r\n\r\n\r\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\r\n        payable\r\n        public \r\n    {\r\n        require(_pixelNumber < numberOfPixels);\r\n        require(beneficiary != address(0));\r\n        require(msg.value != 0);\r\n        \r\n        // get current pixel info\r\n        address currentOwner;\r\n        uint256 currentPrice;\r\n        bool currentSaleState;\r\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\r\n        \r\n        // check if a pixel is for sale\r\n        require(currentSaleState == true);\r\n\r\n        // check if a received Ether is higher than current price\r\n        require(currentPrice <= msg.value);\r\n\r\n        // calculate fee\r\n        uint fee = msg.value / feeRate;\r\n\r\n        // transfer received amount to current owner\r\n        currentOwner.transfer(msg.value - fee);\r\n\r\n        // transfer fee to fundWallet\r\n        fundWallet.transfer(fee);\r\n\r\n        // update pixel\r\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\r\n        \r\n        // update color\r\n        colors[_pixelNumber] = _color;\r\n    }\r\n\r\n\r\n    function setOwner(uint16 _pixelNumber, address _owner) \r\n        public\r\n        onlyPixelOwner(_pixelNumber)\r\n    {\r\n        require(_owner != address(0));\r\n        pixels[_pixelNumber].owner = _owner;\r\n    }\r\n\r\n\r\n    function setColor(uint16 _pixelNumber, uint24 _color) \r\n        public\r\n        onlyPixelOwner(_pixelNumber)\r\n    {\r\n        colors[_pixelNumber] = _color;\r\n    }\r\n\r\n\r\n    function setMessage(uint16 _pixelNumber, string _message)\r\n        public\r\n        messageEnabled\r\n        onlyPixelOwner(_pixelNumber)\r\n    {\r\n        pixels[_pixelNumber].message = _message;\r\n    }\r\n\r\n\r\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \r\n        public\r\n        onlyPixelOwner(_pixelNumber)\r\n    {\r\n        pixels[_pixelNumber].price = _weiAmount;\r\n    }\r\n\r\n\r\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\r\n        public\r\n        onlyPixelOwner(_pixelNumber)\r\n    {\r\n        pixels[_pixelNumber].isSale = _isSale;\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * internal methods\r\n    ***************************************************************************/\r\n\r\n    function getPixelNumber(byte _x, byte _y)\r\n        internal pure\r\n        returns(uint16) \r\n    {\r\n        return uint16(_x) + uint16(_y) * width;\r\n    }\r\n\r\n\r\n    function getColor(byte _red, byte _green, byte _blue)\r\n        internal pure\r\n        returns(uint24) \r\n    {\r\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\r\n    }\r\n\r\n\r\n\r\n    /**************************************************************************\r\n    * methods for contract owner\r\n    ***************************************************************************/\r\n\r\n    // for emergency purpose\r\n    function deleteMessage(uint16 _pixelNumber)\r\n        onlyOwner\r\n        public\r\n    {\r\n        pixels[_pixelNumber].message = \"\";\r\n    }\r\n\r\n\r\n    // for emergency purpose\r\n    function setMessageStatus(bool _isMesssageEnabled)\r\n        onlyOwner\r\n        public\r\n    {\r\n        isMessageEnabled = _isMesssageEnabled;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"}],\"name\":\"deleteMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPixels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"_pixelNumber\",\"type\":\"uint16\"},{\"name\":\"_color\",\"type\":\"uint24\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"buyPixel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMesssageEnabled\",\"type\":\"bool\"}],\"name\":\"setMessageStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getColors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24[10000]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"},{\"name\":\"_color\",\"type\":\"uint24\"}],\"name\":\"setColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"},{\"name\":\"_isSale\",\"type\":\"bool\"}],\"name\":\"setSaleState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pixelNumber\",\"type\":\"uint16\"}],\"name\":\"getPixel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMessageEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Pixereum","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://330b7b162016403273a1ad06f8fe60c7dadb44d4f75b3ee4fe71f28d2674a8c1"}]}