{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CryptoRoboticsToken {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function burn(uint256 value) public;\r\n}\r\n\r\n\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    mapping (address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    /**\r\n     * @param _wallet Vault address\r\n     */\r\n    function RefundVault(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    /**\r\n     * @param investor Investor address\r\n     */\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        emit Closed();\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    /**\r\n     * @param investor Investor address\r\n     */\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    CryptoRoboticsToken public token;\r\n    //MAKE APPROVAL TO Crowdsale\r\n    address public reserve_fund = 0x7C88C296B9042946f821F5456bd00EA92a13B3BB;\r\n    address preico;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    uint256 public openingTime;\r\n    uint256 public closingTime;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    uint public currentStage = 0;\r\n\r\n    uint256 public goal = 1000 ether;\r\n    uint256 public cap  = 6840  ether;\r\n\r\n    RefundVault public vault;\r\n\r\n\r\n\r\n    //price in wei for stage\r\n    uint[4] public stagePrices = [\r\n    127500000000000 wei,     //0.000085 - ICO Stage 1\r\n    135 szabo,     //0.000090 - ICO Stage 2\r\n    142500000000000 wei,     //0.000095 - ICO Stage 3\r\n    150 szabo     //0.0001 - ICO Stage 4\r\n    ];\r\n\r\n    //limit in wei for stage 612 + 1296 + 2052 + 2880\r\n    uint[4] internal stageLimits = [\r\n    612 ether,    //4800000 tokens 10% of ICO tokens (ICO token 40% of all (48 000 000) )\r\n    1296 ether,    //9600000 tokens 20% of ICO tokens\r\n    2052 ether,   //14400000 tokens 30% of ICO tokens\r\n    2880 ether    //19200000 tokens 40% of ICO tokens\r\n    ];\r\n\r\n    mapping(address => bool) public referrals;\r\n    mapping(address => uint) public reservedTokens;\r\n    mapping(address => uint) public reservedRefsTokens;\r\n    uint public amountReservedTokens;\r\n    uint public amountReservedRefsTokens;\r\n\r\n    event Finalized();\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenReserved(address indexed beneficiary, uint256 value, uint256 amount, address referral);\r\n\r\n\r\n    modifier onlyWhileOpen {\r\n        require(now >= openingTime && now <= closingTime);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyPreIco {\r\n        require(msg.sender == preico);\r\n        _;\r\n    }\r\n\r\n\r\n    function Crowdsale(CryptoRoboticsToken _token) public\r\n    {\r\n        require(_token != address(0));\r\n\r\n        wallet = 0xB46Abb598A9F40c6b633881EAFfcf5F675773d77;\r\n        token = _token;\r\n        openingTime = 1526774400;\r\n        closingTime = 1532044800;\r\n        vault = new RefundVault(wallet);\r\n    }\r\n\r\n\r\n    function () external payable {\r\n        buyTokens(msg.sender, address(0));\r\n    }\r\n\r\n\r\n    function buyTokens(address _beneficiary, address _ref) public payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n        _getTokenAmount(weiAmount,true,_beneficiary,_ref);\r\n    }\r\n\r\n\r\n    function reserveTokens(address _ref) public payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidateReserve(msg.sender, weiAmount, _ref);\r\n        _getTokenAmount(weiAmount, false,msg.sender,_ref);\r\n    }\r\n\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyWhileOpen {\r\n        require(weiRaised.add(_weiAmount) <= cap);\r\n        require(_weiAmount >= stagePrices[currentStage]);\r\n        require(_beneficiary != address(0));\r\n\r\n    }\r\n\r\n    function _preValidateReserve(address _beneficiary, uint256 _weiAmount, address _ref) internal view {\r\n        require(now < openingTime);\r\n        require(referrals[_ref]);\r\n        require(weiRaised.add(_weiAmount) <= cap);\r\n        require(_weiAmount >= stagePrices[currentStage]);\r\n        require(_beneficiary != address(0));\r\n    }\r\n\r\n\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount, address _ref) internal {\r\n        _tokenAmount = _tokenAmount * 1 ether;\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n        if (referrals[_ref]) {\r\n            uint _refTokens = valueFromPercent(_tokenAmount,10);\r\n            token.transferFrom(reserve_fund, _ref, _refTokens);\r\n        }\r\n    }\r\n\r\n\r\n    function _processReserve(address _beneficiary, uint256 _tokenAmount, address _ref) internal {\r\n        _tokenAmount = _tokenAmount * 1 ether;\r\n        _reserveTokens(_beneficiary, _tokenAmount);\r\n        uint _refTokens = valueFromPercent(_tokenAmount,10);\r\n        _reserveRefTokens(_ref, _refTokens);\r\n    }\r\n\r\n\r\n    function _reserveTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        reservedTokens[_beneficiary] = reservedTokens[_beneficiary].add(_tokenAmount);\r\n        amountReservedTokens = amountReservedTokens.add(_tokenAmount);\r\n    }\r\n\r\n\r\n    function _reserveRefTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        reservedRefsTokens[_beneficiary] = reservedRefsTokens[_beneficiary].add(_tokenAmount);\r\n        amountReservedRefsTokens = amountReservedRefsTokens.add(_tokenAmount);\r\n    }\r\n\r\n\r\n    function getReservedTokens() public {\r\n        require(now >= openingTime);\r\n        require(reservedTokens[msg.sender] > 0);\r\n        amountReservedTokens = amountReservedTokens.sub(reservedTokens[msg.sender]);\r\n        reservedTokens[msg.sender] = 0;\r\n        token.transfer(msg.sender, reservedTokens[msg.sender]);\r\n    }\r\n\r\n\r\n    function getRefReservedTokens() public {\r\n        require(now >= openingTime);\r\n        require(reservedRefsTokens[msg.sender] > 0);\r\n        amountReservedRefsTokens = amountReservedRefsTokens.sub(reservedRefsTokens[msg.sender]);\r\n        reservedRefsTokens[msg.sender] = 0;\r\n        token.transferFrom(reserve_fund, msg.sender, reservedRefsTokens[msg.sender]);\r\n    }\r\n\r\n\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns(uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(100);\r\n        return (_amount);\r\n    }\r\n\r\n\r\n    function _getTokenAmount(uint256 _weiAmount, bool _buy, address _beneficiary, address _ref) internal {\r\n        uint256 weiAmount = _weiAmount;\r\n        uint _tokens = 0;\r\n        uint _tokens_price = 0;\r\n        uint _current_tokens = 0;\r\n\r\n        for (uint p = currentStage; p < 4 && _weiAmount >= stagePrices[p]; p++) {\r\n            if (stageLimits[p] > 0 ) {\r\n                //если лимит больше чем _weiAmount, тогда считаем все из расчета что вписываемся в лимит\r\n                //и выходим из цикла\r\n                if (stageLimits[p] > _weiAmount) {\r\n                    //количество токенов по текущему прайсу (останется остаток если прислали  больше чем на точное количество монет)\r\n                    _current_tokens = _weiAmount.div(stagePrices[p]);\r\n                    //цена всех монет, чтобы определить остаток неизрасходованных wei\r\n                    _tokens_price = _current_tokens.mul(stagePrices[p]);\r\n                    //получаем остаток\r\n                    _weiAmount = _weiAmount.sub(_tokens_price);\r\n                    //добавляем токены текущего стэйджа к общему количеству\r\n                    _tokens = _tokens.add(_current_tokens);\r\n                    //обновляем лимиты\r\n                    stageLimits[p] = stageLimits[p].sub(_tokens_price);\r\n                    break;\r\n                } else { //лимит меньше чем количество wei\r\n                    //получаем все оставшиеся токены в стейдже\r\n                    _current_tokens = stageLimits[p].div(stagePrices[p]);\r\n                    _weiAmount = _weiAmount.sub(stageLimits[p]);\r\n                    _tokens = _tokens.add(_current_tokens);\r\n                    stageLimits[p] = 0;\r\n                    _updateStage();\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        weiAmount = weiAmount.sub(_weiAmount);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        if (_buy) {\r\n            _processPurchase(_beneficiary, _tokens, _ref);\r\n            emit TokenPurchase(msg.sender, _beneficiary, weiAmount, _tokens);\r\n        } else {\r\n            _processReserve(msg.sender, _tokens, _ref);\r\n            emit TokenReserved(msg.sender, weiAmount, _tokens, _ref);\r\n        }\r\n\r\n        //отправляем обратно неизрасходованный остаток\r\n        if (_weiAmount > 0) {\r\n            msg.sender.transfer(_weiAmount);\r\n        }\r\n\r\n        // update state\r\n\r\n\r\n        _forwardFunds(weiAmount);\r\n    }\r\n\r\n\r\n    function _updateStage() internal {\r\n        if ((stageLimits[currentStage] == 0) && currentStage < 3) {\r\n            currentStage++;\r\n        }\r\n    }\r\n\r\n\r\n    function _forwardFunds(uint _weiAmount) internal {\r\n        vault.deposit.value(_weiAmount)(msg.sender);\r\n    }\r\n\r\n\r\n    function hasClosed() public view returns (bool) {\r\n        return now > closingTime;\r\n    }\r\n\r\n\r\n    function capReached() public view returns (bool) {\r\n        return weiRaised >= cap;\r\n    }\r\n\r\n\r\n    function goalReached() public view returns (bool) {\r\n        return weiRaised >= goal;\r\n    }\r\n\r\n\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasClosed() || capReached());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n\r\n    function finalization() internal {\r\n        if (goalReached()) {\r\n            vault.close();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n\r\n        uint token_balace = token.balanceOf(this);\r\n        token_balace = token_balace.sub(amountReservedTokens);//\r\n        token.burn(token_balace);\r\n    }\r\n\r\n\r\n    function addReferral(address _ref) external onlyOwner {\r\n        referrals[_ref] = true;\r\n    }\r\n\r\n\r\n    function removeReferral(address _ref) external onlyOwner {\r\n        referrals[_ref] = false;\r\n    }\r\n\r\n\r\n    function setPreIco(address _preico) onlyOwner public {\r\n        preico = _preico;\r\n    }\r\n\r\n\r\n    function setTokenCountFromPreIco(uint _value) onlyPreIco public{\r\n        _value = _value.div(1 ether);\r\n        uint weis = _value.mul(stagePrices[3]);\r\n        stageLimits[3] = stageLimits[3].add(weis);\r\n        cap = cap.add(weis);\r\n\r\n    }\r\n\r\n\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenCountFromPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"removeReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedRefsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preico\",\"type\":\"address\"}],\"name\":\"setPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stagePrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountReservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountReservedRefsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"TokenReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000039d1b71ab8af1a3900fe03bcb2e55711a7584e9e","Library":"","SwarmSource":"bzzr://6208abdf646c1f5d0e92d2ab001a3e84ce446c01f3d899b0c4aa2f1ba277e40a"}]}