{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/* library/Owned.sol */\r\ncontract Owned {\r\n    address owner;\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract NewLottery is Owned {\r\n\r\n    //CONSTANT\r\n    uint256 private maxTickets;\r\n    uint256 public minimumBounty;\r\n    uint256 public ticketPrice;\r\n\r\n    //LOTO REGISTER\r\n    uint256 public lottoIndex;\r\n    uint256 lastTicketTime;\r\n\r\n    //LOTTO VARIABLES\r\n    uint8 _direction;\r\n    uint256 numtickets;\r\n    uint256 totalBounty;\r\n    address owner;\r\n\r\n    event NewTicket(address indexed fromAddress, bool success);\r\n    event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward);\r\n\r\n    /// Create a new Lotto\r\n    function LottoCount() public payable\r\n    {\r\n        owner = msg.sender;\r\n\r\n        ticketPrice = 0.101 * 10**18;\r\n        minimumBounty = 1 * 10**18;\r\n        maxTickets = 10;\r\n\r\n        _direction = 0;\r\n        lottoIndex = 1;\r\n        lastTicketTime = 0;\r\n\r\n        numtickets = 0;\r\n        totalBounty = msg.value;\r\n        require(totalBounty >= minimumBounty);\r\n    }\r\n\r\n\r\n   function getBalance() public view returns (uint256 balance)\r\n    {\r\n        balance = 0;\r\n\r\n        if(owner == msg.sender) balance = this.balance;\r\n\r\n        return balance;\r\n    }\r\n\r\n\r\n    function withdraw() onlyOwner public\r\n    {\r\n        //reset values\r\n        lottoIndex += 1;\r\n        numtickets = 0;\r\n        totalBounty = 0;\r\n\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function shutdown() onlyOwner public\r\n    {\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    function getLastTicketTime() public view returns (uint256 time)\r\n    {\r\n        time = lastTicketTime;\r\n        return time;\r\n    }\r\n\r\n    function AddTicket() public payable\r\n    {\r\n        require(msg.value == ticketPrice);\r\n        require(numtickets < maxTickets);\r\n\r\n        //update bif\r\n        lastTicketTime = now;\r\n        totalBounty += ticketPrice;\r\n        bool success = numtickets == maxTickets;\r\n\r\n        NewTicket(msg.sender, success);\r\n\r\n        //check if winner\r\n        if(success)\r\n        {\r\n            PayWinner(msg.sender);\r\n        }\r\n    }\r\n\r\n    function PayWinner( address winner ) private\r\n    {\r\n        require(numtickets == maxTickets);\r\n\r\n        //calc reward\r\n        uint ownerTax = 5 * totalBounty / 100;\r\n        uint winnerPrice = totalBounty - ownerTax;\r\n\r\n        LottoComplete(msg.sender, lottoIndex, winnerPrice);\r\n\r\n        //reset values\r\n        lottoIndex += 1;\r\n        numtickets = 0;\r\n        totalBounty = 0;\r\n\r\n        //change max tickets to give unpredictability\r\n        if(_direction == 0 && maxTickets < 20) maxTickets += 1;\r\n        if(_direction == 1 && maxTickets > 10) maxTickets -= 1;\r\n\r\n        if(_direction == 0 && maxTickets == 20) _direction = 1;\r\n        if(_direction == 1 && maxTickets == 10) _direction = 0;\r\n\r\n        //give real money\r\n        owner.transfer(ownerTax);\r\n        winner.transfer(winnerPrice);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastTicketTime\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LottoCount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottoIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AddTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"NewTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"lottoIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LottoComplete\",\"type\":\"event\"}]","ContractName":"NewLottery","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed42512a312d0a44d7fd0d4a9154549bb0c9337bb4763bc3fd08242c04f50888"}]}