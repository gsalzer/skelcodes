{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// File: contracts/interfaces/EthPriceFeedI.sol\r\n\r\ninterface EthPriceFeedI {\r\n    function updateRate(uint256 _weiPerUnitRate) external;\r\n    function getRate() external view returns(uint256);\r\n    function getLastTimeUpdated() external view returns(uint256); \r\n}\r\n\r\n// File: contracts/interfaces/ReadableI.sol\r\n\r\n// https://github.com/makerdao/feeds/blob/master/src/abi/readable.json\r\n\r\npragma solidity 0.4.23;\r\n\r\ninterface ReadableI {\r\n\r\n    // We only care about these functions\r\n    function peek() external view returns(bytes32, bool);\r\n    function read() external view returns(bytes32);\r\n\r\n    // function owner() external view returns(address);\r\n    // function zzz() external view returns(uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MakerDAOPriceFeed.sol\r\n\r\ncontract MakerDAOPriceFeed is Ownable, EthPriceFeedI {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public constant RATE_THRESHOLD_PERCENTAGE = 10;\r\n    uint256 public constant MAKERDAO_FEED_MULTIPLIER = 10**36;\r\n\r\n    ReadableI public makerDAOMedianizer;\r\n\r\n    uint256 private weiPerUnitRate;\r\n\r\n    uint256 private lastTimeUpdated; \r\n    \r\n    event RateUpdated(uint256 _newRate, uint256 _timeUpdated);\r\n\r\n    modifier isValidRate(uint256 _weiPerUnitRate) {\r\n        require(validRate(_weiPerUnitRate));\r\n        _;\r\n    }\r\n\r\n    constructor(ReadableI _makerDAOMedianizer) {\r\n        require(_makerDAOMedianizer != address(0));\r\n        makerDAOMedianizer = _makerDAOMedianizer;\r\n\r\n        weiPerUnitRate = convertToRate(_makerDAOMedianizer.read());\r\n        lastTimeUpdated = now;\r\n    }\r\n    \r\n    /// @dev Receives rate from outside oracle\r\n    /// @param _weiPerUnitRate calculated off chain and received to the contract\r\n    function updateRate(uint256 _weiPerUnitRate) \r\n        external \r\n        onlyOwner\r\n        isValidRate(_weiPerUnitRate)\r\n    {\r\n        weiPerUnitRate = _weiPerUnitRate;\r\n\r\n        lastTimeUpdated = now; \r\n\r\n        emit RateUpdated(_weiPerUnitRate, now);\r\n    }\r\n\r\n    /// @dev View function to see the rate stored in the contract.\r\n    function getRate() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        return weiPerUnitRate; \r\n    }\r\n\r\n    /// @dev View function to see that last time that the rate was updated. \r\n    function getLastTimeUpdated()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return lastTimeUpdated;\r\n    }\r\n\r\n    function validRate(uint256 _weiPerUnitRate) public view returns(bool) {\r\n        if (_weiPerUnitRate == 0) return false;\r\n        bytes32 value;\r\n        bool valid;\r\n        (value, valid) = makerDAOMedianizer.peek();\r\n\r\n        // If the value from the medianizer is not valid, use the current rate as reference\r\n        uint256 currentRate = valid ? convertToRate(value) : weiPerUnitRate;\r\n\r\n        // Get the difference\r\n        uint256 diff = _weiPerUnitRate < currentRate ?  currentRate.sub(_weiPerUnitRate) : _weiPerUnitRate.sub(currentRate);\r\n\r\n        return diff <= currentRate.mul(RATE_THRESHOLD_PERCENTAGE).div(100);\r\n    }\r\n\r\n    function convertToRate(bytes32 _fromMedianizer) internal pure returns(uint256) {\r\n        uint256 value = uint256(_fromMedianizer);\r\n        return MAKERDAO_FEED_MULTIPLIER.div(value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"makerDAOMedianizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_THRESHOLD_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiPerUnitRate\",\"type\":\"uint256\"}],\"name\":\"validRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKERDAO_FEED_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiPerUnitRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastTimeUpdated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_makerDAOMedianizer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timeUpdated\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MakerDAOPriceFeed","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b","Library":"","SwarmSource":"bzzr://b1e9bb6936ee20164bcf7d32b498b6778e8c8915ff60b432c3793ce34b7c356c"}]}