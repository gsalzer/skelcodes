{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract owned {\r\n    address public Owner; \r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */    \r\n    function owned() public{\r\n        Owner = msg.sender;\r\n    }\r\n    \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */   \r\n    function TransferOwnership(address newOwner) onlyOwner public {\r\n        Owner = newOwner;\r\n    }\r\n    \r\n  /**\r\n   * @dev Terminates contract when called by the owner.\r\n   */\r\n    function abort() onlyOwner public {\r\n        selfdestruct(Owner);\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract ZegartToken is owned {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    string public version;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default\r\n    uint256 public totalSupply;\r\n    bool tradable;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public frozenAccounts;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    // ether received to contract\r\n    event RecieveEth(address indexed _from, uint256 _value);\r\n    // ether transferred from contract\r\n    event WithdrawEth(address indexed _to, uint256 _value);\r\n    // allowance for other addresses\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    //tokens sold to users\r\n    event SoldToken(address _buyer, uint256 _value, string note);\r\n    // tokens granted to users\r\n    event BonusToken(address _customer, uint256 _value, string note);\r\n\r\n    /// fallback function\r\n    function () payable public {\r\n        RecieveEth(msg.sender, msg.value);     \r\n    }\r\n    \r\n    function withdrawal(address _to, uint256 Ether, uint256 Token) onlyOwner public {\r\n        require(this.balance >= Ether && balances[this] >= Token );\r\n        \r\n        if(Ether >0){\r\n            _to.transfer(Ether);\r\n            WithdrawEth(_to, Ether);\r\n        }\r\n        \r\n        if(Token > 0)\r\n\t\t{\r\n\t\t\trequire(balances[_to] + Token > balances[_to]);\r\n\t\t\tbalances[this] -= Token;\r\n\t\t\tbalances[_to] += Token;\r\n\t\t\tTransfer(this, _to, Token);\r\n\t\t}\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function ZegartToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        string contractversion\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balances[msg.sender] = totalSupply;         // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        version = contractversion;                          // Set the contract version for display purposes\r\n        \r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\r\n        // Check if sender is frozen\r\n        require(!frozenAccounts[_from]); \r\n        // Check if recipient is frozen                    \r\n        require(!frozenAccounts[_to]);                       \r\n        // Save this for an assertion in the future\r\n        uint previousBalanceOf = balances[_from] + balances[_to];\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balances[_from] + balances[_to] == previousBalanceOf);\r\n    }\r\n\r\n    /// @notice Grant tokens to customers\r\n    /// @param _customer Address of account which will receive tokens\r\n    /// @param _value uint256 the amount to be transferred.\r\n    function GrantToken(address _customer, uint256 _value, string note) onlyOwner public {\r\n        require(balances[msg.sender] >= _value && balances[_customer] + _value > balances[_customer]);\r\n        \r\n        BonusToken( _customer,  _value,  note);\r\n        balances[msg.sender] -= _value;\r\n        balances[_customer] += _value;\r\n        Transfer(msg.sender, _customer, _value);\r\n    }\r\n    \r\n    /// @notice Buy quantity of tokens depending on the amount of sent ethers.\r\n    /// @param _buyer Address of account which will receive tokens\r\n    /// @param _value uint256 the amount to be transferred.\r\n    function BuyToken(address _buyer, uint256 _value, string note) onlyOwner public {\r\n        require(balances[msg.sender] >= _value && balances[_buyer] + _value > balances[_buyer]);\r\n        \r\n        SoldToken( _buyer,  _value,  note);\r\n        balances[msg.sender] -= _value;\r\n        balances[_buyer] += _value;\r\n        Transfer(msg.sender, _buyer, _value);\r\n    }\r\n\r\n    /// @notice forbid specified address from sending & receiving tokens\r\n    function FreezeAccount(address toFreeze) onlyOwner public {\r\n        frozenAccounts[toFreeze] = true;\r\n    }\r\n    /// @notice allow specified address sending & receiving tokens\r\n    function UnfreezeAccount(address toUnfreeze) onlyOwner public {\r\n        delete frozenAccounts[toUnfreeze];\r\n    }\r\n    /// @notice let users trade with the token\r\n    function MakeTradable(bool t) onlyOwner public {\r\n        tradable = t;\r\n    }\r\n    /// @notice shows tradability of the contract\r\n    function Tradable() public view returns(bool) {\r\n        return tradable;\r\n    }\r\n    \r\n    modifier notFrozen(){\r\n       require (!frozenAccounts[msg.sender]);\r\n       _;\r\n    }\r\n    \r\n    /// @notice transfers sender's tokens to a specified address. \r\n    /// @param _to The address of the recipient.\r\n    /// @param _value The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public notFrozen returns (bool success) {\r\n        require(tradable);\r\n         if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n             balances[msg.sender] -= _value;\r\n             balances[_to] += _value;\r\n             Transfer( msg.sender, _to,  _value);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n     \r\n     \r\n    /// @notice Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from address The address tokens are sending from.\r\n    /// @param _to address The address tokens are sending to.\r\n    /// @param _value the amount of tokens to be transferred. \r\n    function transferFrom(address _from, address _to, uint256 _value) public notFrozen returns (bool success) {\r\n        require(!frozenAccounts[_from] && !frozenAccounts[_to]);\r\n        require(tradable);\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[_from] -= _value;\r\n            balances[_to] += _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer( _from, _to,  _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @notice Retrieves the token balance of any single address.\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n    /// @param _spender The address authorized to spend\r\n    /// @param _value the max amount they can spend\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        Approval(msg.sender,  _spender, _value);\r\n        allowed[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Returns the amount which _spender is still allowed to withdraw from _owner\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n    /// @param _spender The address authorized to spend\r\n    /// @param _value the max amount they can spend\r\n    /// @param _extraData some extra information to send to the approved contract\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Remove `_value` tokens from the system irreversibly\r\n    /// @param _value the amount of money to burn\r\n    /// @return True if the transfer was successful\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    /// @notice Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    /// @param _from the address of the sender\r\n    /// @param _value the amount of money to burn\r\n    /// @return True if the transfer was successful\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\r\n        balances[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"Ether\",\"type\":\"uint256\"},{\"name\":\"Token\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"bool\"}],\"name\":\"MakeTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"BuyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"GrantToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toUnfreeze\",\"type\":\"address\"}],\"name\":\"UnfreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toFreeze\",\"type\":\"address\"}],\"name\":\"FreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"contractversion\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RecieveEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"SoldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"BonusToken\",\"type\":\"event\"}]","ContractName":"ZegartToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000017d78400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000b5a656761727420436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045a475254000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003312e300000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c16706ac2f8c15f619120c2f1a14ebc467b48761b01b3c3945507f6b04539c8c"}]}