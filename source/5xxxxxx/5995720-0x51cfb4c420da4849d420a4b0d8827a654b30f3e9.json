{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .16;\r\n/* 创建一个父类，账户管理员 */\r\ncontract owned {\r\n\r\n\taddress public owner;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/* 修改标志 */\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/* 修改管理员账户， onlyOwner代表只能是用户管理员来修改 */\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\n/* receiveApproval服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的 */\r\ncontract tokenRecipient {\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract TokenERC20 {\r\n\t// 公共变量\r\n\tstring public name; //代币名字\r\n\tstring public symbol; //代币符号\r\n\tuint8 public decimals = 18; //代币小数点位数， 18是默认， 尽量不要更改\r\n\r\n\tuint256 public totalSupply; //代币总量\r\n\r\n\t// 记录各个账户的代币数目\r\n\tmapping(address => uint256) public balanceOf;\r\n\r\n\t// A账户存在B账户资金\r\n\tmapping(address => mapping(address => uint256)) public allowance;\r\n\r\n\t// 转账通知事件\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// 销毁金额通知事件\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/* 构造函数 */\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals); // 根据decimals计算代币的数量\r\n\t\tbalanceOf[msg.sender] = totalSupply; // 给生成者所有的代币数量\r\n\t\tname = tokenName; // 设置代币的名字\r\n\t\tsymbol = tokenSymbol; // 设置代币的符号\r\n\t}\r\n\r\n\t/* 私有的交易函数 */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// 防止转移到0x0， 用burn代替这个功能\r\n\t\trequire(_to != 0x0);\r\n\t\t// 检测发送者是否有足够的资金\r\n\t\t//require(canOf[_from] >= _value);\r\n\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\r\n\t\t// 检查是否溢出（数据类型的溢出）\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// 将此保存为将来的断言， 函数最后会有一个检验\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n\t\t// 减少发送者资产\r\n\t\tbalanceOf[_from] -= _value;\r\n\r\n\t\t// 增加接收者的资产\r\n\t\tbalanceOf[_to] += _value;\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// 断言检测， 不应该为错\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n\t}\r\n\r\n\t/* 传递tokens */\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\t/* 从其他账户转移资产 */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*  授权第三方从发送者账户转移代币，然后通过transferFrom()函数来执行第三方的转移操作 */\r\n\tfunction approve(address _spender, uint256 _value) public\r\n\treturns(bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t为其他地址设置津贴， 并通知\r\n\t发送者通知代币合约, 代币合约通知服务合约receiveApproval, 服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的transferFrom)\r\n\t*/\r\n\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\tpublic\r\n\treturns(bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif(approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁代币\r\n\t */\r\n\tfunction burn(uint256 _value) public returns(bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\r\n\t\ttotalSupply -= _value; // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 从其他账户销毁代币\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns(bool success) {\r\n\t\trequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value; // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract BTYCT is owned, TokenERC20 {\r\n\r\n\tuint256 public totalSupply; //代币总量\r\n\tuint256 public decimals = 18; //代币小数点位数\r\n\tuint256 public sellPrice = 510; //出售价格 1枚代币换多少以太 /1000\r\n\tuint256 public buyPrice =  526; //购买价格 多少以太可购买1枚代币 /1000\r\n\tuint256 public sysPrice = 766 * 10 ** uint256(decimals); //挖矿的衡量值\r\n\tuint256 public sysPer = 225; //挖矿的增量百分比 /100\r\n\t\r\n\t//uint256 public onceOuttime = 86400; //增量的时间 正式 \r\n\t//uint256 public onceAddTime = 864000; //挖矿的时间 正式\r\n\t//uint256 public onceoutTimePer = 8640000; //增量的百分比 正式\r\n\t\r\n\tuint256 public onceOuttime = 120; //增量的时间 测试  \r\n\tuint256 public onceAddTime = 600; //挖矿的时间 测试\r\n\tuint256 public onceoutTimePer = 12000; //增量的百分比 测试\r\n\r\n\t/* 冻结账户 */\r\n\tmapping(address => bool) public frozenAccount;\r\n\t// 记录各个账户的冻结数目\r\n\tmapping(address => uint256) public freezeOf;\r\n\t// 记录各个账户的可用数目\r\n\tmapping(address => uint256) public canOf;\r\n\t// 记录各个账户的释放时间\r\n\tmapping(address => uint) public cronoutOf;\r\n\t// 记录各个账户的增量时间\r\n\tmapping(address => uint) public cronaddOf;\r\n\r\n\t/* 通知 */\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\t//event Logs (string);\r\n\t/* 构造函数 */\r\n\r\n\tfunction BTYCT(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n\t/* 转账， 比父类加入了账户冻结 */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\trequire(_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(canOf[_from] >= _value);\r\n\t\trequire(balanceOf[_from] >= _value); // Check if the sender has enough\r\n\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n\t\trequire(!frozenAccount[_from]); // Check if sender is frozen\r\n\t\trequire(!frozenAccount[_to]); // Check if recipient is frozen\r\n\r\n\t\t//挖矿 \r\n\t\tif(cronaddOf[_from] < 1) {\r\n\t\t\tcronaddOf[_from] = now + onceAddTime;\r\n\t\t}\r\n\t\tif(cronaddOf[_to] < 1) {\r\n\t\t\tcronaddOf[_to] = now + onceAddTime;\r\n\t\t}\r\n\t\t//释放 \r\n\t\tif(cronoutOf[_to] < 1) {\r\n\t\t\tcronoutOf[_to] = now + onceOuttime;\r\n\t\t}\r\n\t\tif(cronoutOf[_to] < 1) {\r\n\t\t\tcronoutOf[_to] = now + onceOuttime;\r\n\t\t}\r\n\t\t//if(freezeOf[_from] > 0) {\r\n\t\tuint lefttime = now - cronoutOf[_from];\r\n\t\tif(lefttime > onceOuttime) {\r\n\t\t\tuint leftper = lefttime / onceoutTimePer;\r\n\t\t\tif(leftper > 1) {\r\n\t\t\t\tleftper = 1;\r\n\t\t\t}\r\n\t\t\tcanOf[_from] = balanceOf[_from] * leftper;\r\n\t\t\tfreezeOf[_from] = balanceOf[_from] - canOf[_from];\r\n\t\t\tcronoutOf[_from] = now + onceOuttime;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tuint lefttimes = now - cronoutOf[_to];\r\n\t\tif(lefttimes >= onceOuttime) {\r\n\t\t\tuint leftpers = lefttime / onceoutTimePer;\r\n\t\t\tif(leftpers > 1) {\r\n\t\t\t\tleftpers = 1;\r\n\t\t\t}\r\n\t\t\tcanOf[_to] = balanceOf[_to] * leftpers;\r\n\t\t\tfreezeOf[_to] = balanceOf[_to] - canOf[_to];\r\n\t\t\tcronoutOf[_to] = now + onceOuttime;\r\n\t\t}\r\n\t\r\n\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value;\r\n\t\t//减少可用\r\n\r\n\t\tcanOf[_from] -= _value;\r\n\t\tfreezeOf[_from] = balanceOf[_from] - canOf[_from];\r\n\r\n\t\t//增加冻结 \r\n\t\tfreezeOf[_to] += _value;\r\n\t\tcanOf[_to] = balanceOf[_to] - freezeOf[_to];\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\t}\r\n\r\n\t//获取可用数目\r\n\tfunction getcan(address target) public returns (uint256 _value) {\r\n\t    if(cronoutOf[target] < 1) {\r\n\t        _value = 0;\r\n\t    }else{\r\n\t        uint lefttime = now - cronoutOf[target];\r\n\t        uint leftnum = lefttime/onceoutTimePer;\r\n\t        if(leftnum > 1){\r\n\t            leftnum = 1;\r\n\t        }\r\n\t        _value = balanceOf[target]*leftnum;\r\n\t    }\r\n\t}\r\n\t\r\n\t/// 向指定账户拨发资金\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\t\trequire(!frozenAccount[target]);\r\n\t\tbalanceOf[target] += mintedAmount;\r\n\t\tbalanceOf[this] -= mintedAmount;\r\n\t\t\r\n\t\tcronoutOf[target] = now + onceOuttime;\r\n\t\tcronaddOf[target] = now + onceAddTime;\r\n\t\tfreezeOf[target] = balanceOf[target] + mintedAmount;\r\n\t\t\r\n\t\temit Transfer(0, this, mintedAmount);\r\n\t\temit Transfer(this, target, mintedAmount);\r\n\r\n\t}\r\n\t//用户每隔10天挖矿一次\r\n\tfunction mint() public {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(cronaddOf[msg.sender] > 0 && now > cronaddOf[msg.sender] && balanceOf[msg.sender] >= sysPrice);\r\n\t\tuint256 mintAmount = balanceOf[msg.sender] * sysPer / 10000;\r\n\t\tbalanceOf[msg.sender] += mintAmount;\r\n\t\tbalanceOf[this] -= mintAmount;\r\n\t\t\r\n\t\tfreezeOf[msg.sender] = balanceOf[msg.sender] + mintAmount;\r\n\t\tcronaddOf[msg.sender] = now + onceAddTime;\r\n\t\t\r\n\t\temit Transfer(0, this, mintAmount);\r\n\t\temit Transfer(this, msg.sender, mintAmount);\r\n\r\n\t}\r\n\r\n\t/// 冻结 or 解冻账户\r\n\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\temit FrozenFunds(target, freeze);\r\n\t}\r\n\t// 设置销售购买价格\r\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n\t\tsellPrice = newSellPrice;\r\n\t\tbuyPrice = newBuyPrice;\r\n\r\n\t}\r\n\t//设置挖矿参数\r\n\tfunction setmyPrice(uint256 systyPrice, uint256 sysPermit) onlyOwner public {\r\n\t\tsysPrice = systyPrice;\r\n\t\tsysPer = sysPermit;\r\n\t}\r\n\t// 购买\r\n\tfunction buy() payable public returns(uint256 amount) {\r\n\t    require(!frozenAccount[msg.sender]);\r\n\t\trequire(buyPrice > 0 && msg.value > buyPrice); // Avoid dividing 0, sending small amounts and spam\r\n\t\tamount = msg.value / (buyPrice/1000); // Calculate the amount of Dentacoins\r\n\t\trequire(balanceOf[this] >= amount); // checks if it has enough to sell\r\n\t\tbalanceOf[msg.sender] += amount; // adds the amount to buyer's balance\r\n\t\tbalanceOf[this] -= amount; // subtracts amount from seller's balance\r\n\t\temit Transfer(this, msg.sender, amount); // execute an event reflecting the change\r\n\t\treturn amount; // ends function and returns\r\n\t}\r\n\r\n\t// 出售\r\n\tfunction sell(uint256 amount) public returns(uint revenue) {\r\n\t    require(!frozenAccount[msg.sender]);\r\n\t\trequire(sellPrice > 0); // Avoid selling and spam\r\n\t\trequire(balanceOf[msg.sender] >= amount); // checks if the sender has enough to sell\r\n\t\tif(cronoutOf[msg.sender] < 1) {\r\n\t\t\tcronoutOf[msg.sender] = now + onceOuttime;\r\n\t\t}\r\n\t\tuint lefttime = now - cronoutOf[msg.sender];\r\n\t\tif(lefttime > onceOuttime) {\r\n\t\t\tuint leftper = lefttime / onceoutTimePer;\r\n\t\t\tif(leftper > 1) {\r\n\t\t\t\tleftper = 1;\r\n\t\t\t}\r\n\t\t\tcanOf[msg.sender] = balanceOf[msg.sender] * leftper;\r\n\t\t\tfreezeOf[msg.sender] = balanceOf[msg.sender] - canOf[msg.sender];\r\n\t\t\tcronoutOf[msg.sender] = now + onceOuttime;\r\n\t\t}\r\n\t\trequire(canOf[msg.sender] >= amount);\r\n\t\tbalanceOf[this] += amount; // adds the amount to owner's balance\r\n\t\tbalanceOf[msg.sender] -= amount; // subtracts the amount from seller's balance\r\n\t\trevenue = amount * sellPrice/1000;\r\n\t\trequire(msg.sender.send(revenue)); // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n\t\temit Transfer(msg.sender, this, amount); // executes an event reflecting on the change\r\n\t\treturn revenue;\r\n\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"systyPrice\",\"type\":\"uint256\"},{\"name\":\"sysPermit\",\"type\":\"uint256\"}],\"name\":\"setmyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysPer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceAddTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceoutTimePer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getcan\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cronaddOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cronoutOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceOuttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BTYCT","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005265c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005425459435400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054254594354000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c670f4692c6856d1f1197c3f423be01aa18ce653bd7ad8f95e96c744463a5c43"}]}