{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath\r\n{\r\n    function mul(uint a, uint b) internal returns (uint)\r\n    {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint)\r\n    {\r\nassert(b > 0);       \r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal\r\n    {\r\n        if (!assertion)\r\n        {\r\n            throw;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic\r\n{\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function transfer(address to, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic\r\n{\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n    function transferFrom(address from, address to, uint value);\r\n    function approve(address spender, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic\r\n{\r\n    using SafeMath for uint;\r\n    mapping(address => uint) balances;\r\n\r\n    modifier onlyPayloadSize(uint size)\r\n    {\r\n        if(msg.data.length < size + 4)\r\n        {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20\r\n{\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)\r\n    {\r\n        uint _allowance = allowed[_from][msg.sender];\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value)\r\n    {\r\n\r\n        \r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract BrokerNekoNetwork is StandardToken\r\n{\r\n    string public name = \"BrokerNekoNetwork\";\r\n    string public symbol = \"BNN\";\r\n    uint public decimals = 8 ;\r\n\r\n   \r\n    uint public INITIAL_SUPPLY =  1680000000000000000;\r\n\r\n\r\n    \r\n    uint public constant ALLOCATION_LOCK_END_TIMESTAMP = 1559347200;\r\n\r\n    address public constant BNN = 0xF009D60DF560F10E94f2ee397Fcb57d00130704C;\r\n    uint public constant    BNN_ALLOCATION = 1000000000000000000; \r\n\r\n   \r\n    function BrokerNekoNetwork()\r\n    {\r\n        \r\n        totalSupply = INITIAL_SUPPLY;\r\n\r\n       \r\n        balances[msg.sender] = totalSupply;\r\n\r\n       \r\n        balances[msg.sender] -= BNN_ALLOCATION;\r\n       \r\n\r\n        balances[BNN]   = BNN_ALLOCATION;\r\n      \r\n    }\r\n\r\n    function isAllocationLocked(address _spender) constant returns (bool)\r\n    {\r\n        return inAllocationLockPeriod() && isTeamMember(_spender);\r\n    }\r\n\r\n    function inAllocationLockPeriod() constant returns (bool)\r\n    {\r\n        return (block.timestamp < ALLOCATION_LOCK_END_TIMESTAMP);\r\n    }\r\n\r\n    function isTeamMember(address _spender) constant returns (bool)\r\n    {\r\n        return _spender == BNN  ;\r\n    }\r\n\r\n        function approve(address spender, uint tokens)\r\n    {\r\n        if (isAllocationLocked(spender))\r\n        {\r\n            throw;\r\n        }\r\n        else\r\n        {\r\n            super.approve(spender, tokens);\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint tokens) onlyPayloadSize(2 * 32)\r\n    {\r\n        if (isAllocationLocked(to))\r\n        {\r\n            throw;\r\n        }\r\n        else\r\n        {\r\n            super.transfer(to, tokens);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) onlyPayloadSize(3 * 32)\r\n    {\r\n        if (isAllocationLocked(from) || isAllocationLocked(to))\r\n        {\r\n            throw;\r\n        }\r\n        else\r\n        {\r\n            super.transferFrom(from, to, tokens);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isAllocationLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNN_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOCATION_LOCK_END_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"isTeamMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inAllocationLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BrokerNekoNetwork","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d4b73205cc06511bbda927a66ad77457d068cb5862a57f8a672346d4a06ecf6"}]}