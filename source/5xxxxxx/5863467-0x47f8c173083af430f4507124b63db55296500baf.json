{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ERC223Interface {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function transfer(address to, uint value) public returns (bool success);\r\n    function transfer(address to, uint value, bytes data) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\ncontract Deal {\r\n\r\n    enum Status { created, destroyed, finished }\r\n\r\n    event CreateCampaign(bytes32 campaignId);\r\n    event SendCoinForCampaign(bytes32 campaignId);\r\n\r\n    struct Campaign {\r\n        address creator;\r\n        uint tokenAmount;\r\n        uint currentBalance;\r\n        Status status;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    address public fee;\r\n\r\n    ERC223Interface public token;\r\n\r\n    mapping (bytes32 => Campaign) public campaigns;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Deal(address tokenAddress, address _owner, address _fee) {\r\n      owner = _owner;\r\n      fee = _fee;\r\n      token = ERC223Interface(tokenAddress);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n      uint c = a * b;\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n      assert(b > 0);\r\n      uint c = a / b;\r\n      assert(a == b * c + a % b);\r\n      return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n      uint c = a + b;\r\n      assert(c>=a && c>=b);\r\n      return c;\r\n    }\r\n\r\n    function sum(uint[] array) public returns (uint) {\r\n        uint summa;\r\n        for (uint i; i < array.length; i++) {\r\n            summa += array[i];\r\n        }\r\n        return summa;\r\n    }\r\n\r\n    function changeFeeAddress(address newFee) onlyOwner {\r\n        fee = newFee;\r\n    }\r\n\r\n    function createCampaign(bytes32 id, uint value, address campaignCreator) onlyOwner returns (uint) {\r\n       require(getAddressCreatorById(id) == address(0));\r\n       token.transferFrom(campaignCreator, this, value);\r\n       campaigns[id] = Campaign(campaignCreator, value, value, Status.created);\r\n       CreateCampaign(id);\r\n    }\r\n\r\n    function addTokensToCampaign(bytes32 id, uint value) onlyOwner returns (bool success) {\r\n        token.transferFrom(getAddressCreatorById(id), this, value);\r\n        campaigns[id].tokenAmount += value;\r\n        campaigns[id].currentBalance += value;\r\n    }\r\n\r\n    function updateTokenAddress(address newAddr) onlyOwner {\r\n        token = ERC223Interface(newAddr);\r\n    }\r\n\r\n    function destroyCampaign(bytes32 id) onlyOwner returns (bool success) {\r\n        token.transfer(campaigns[id].creator, campaigns[id].tokenAmount);\r\n        campaigns[id].status = Status.destroyed;\r\n        campaigns[id].currentBalance = 0;\r\n    }\r\n\r\n    function checkStatus(bytes32 id) public constant returns (Status status) {\r\n        return campaigns[id].status;\r\n    }\r\n\r\n    function getAddressCreatorById(bytes32 id) public constant returns(address) {\r\n        return campaigns[id].creator;\r\n    }\r\n\r\n    function getTokenAmountForCampaign(bytes32 id) public constant returns (uint value) {\r\n        return campaigns[id].tokenAmount;\r\n    }\r\n\r\n    function getCurrentBalanceForCampaign(bytes32 id) public constant returns (uint value) {\r\n        return campaigns[id].currentBalance;\r\n    }\r\n\r\n    function finishCampaign(bytes32 id) onlyOwner returns (bool success) {\r\n        campaigns[id].status = Status.finished;\r\n        token.transfer(campaigns[id].creator, campaigns[id].currentBalance);\r\n        campaigns[id].currentBalance = 0;\r\n    }\r\n\r\n    function sendCoin(address[] _routerOwners, uint[] amount, bytes32 id) onlyOwner {\r\n        require(campaigns[id].status == Status.created);\r\n        require(amount.length == _routerOwners.length);\r\n        require(sum(amount) <= campaigns[id].tokenAmount);\r\n\r\n        for (var i = 0; i < amount.length; i++) {\r\n           token.transfer(_routerOwners[i], safeDiv(safeMul(amount[i], 95), 100)); \r\n        }\r\n        token.transfer(fee, safeDiv(safeMul(sum(amount), 5), 100) );\r\n        campaigns[id].currentBalance = safeSub(campaigns[id].currentBalance, sum(amount));\r\n        SendCoinForCampaign(id);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"sum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getCurrentBalanceForCampaign\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"address\"}],\"name\":\"changeFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"finishCampaign\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddressCreatorById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTokenAmountForCampaign\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_routerOwners\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"},{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"sendCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"campaigns\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"checkStatus\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"destroyCampaign\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addTokensToCampaign\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"campaignCreator\",\"type\":\"address\"}],\"name\":\"createCampaign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignId\",\"type\":\"bytes32\"}],\"name\":\"CreateCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignId\",\"type\":\"bytes32\"}],\"name\":\"SendCoinForCampaign\",\"type\":\"event\"}]","ContractName":"Deal","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aae81c0194d6459f320b70ca0cedf88e11a242ce00000000000000000000000057caffdf21fce7bc085a8ccb37a0c185f2e25a9d00000000000000000000000057caffdf21fce7bc085a8ccb37a0c185f2e25a9d","Library":"","SwarmSource":"bzzr://1d06d93e89db4ccbc9c48ddf2b0be8de1f7d04e01a1ce9be65dcc80fed8e174b"}]}