{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Contract that offers a Set structure for uint256 allowing \r\n * at the same time to efficiently list all the elements in it.\r\n */\r\ncontract IterableSet {\r\n\r\n    // Each element in the set is represented by this structure\r\n    struct Element {\r\n        uint256 value;      // Value of the element\r\n        uint256 next;       // Value of the next element\r\n        uint256 previous;   // Value of the previous element\r\n    }\r\n\r\n    // Mapping of values to the corresponding elements\r\n    mapping(uint => Element) elements;\r\n\r\n    uint256 public first;  // Id of the first element\r\n    uint256 public last;   // Id of the last element\r\n    uint256 public size;    // Size of the set\r\n\r\n    // Adds an provided value to the Set\r\n    function add(uint256 value) public {\r\n        if (!contains(value)) {\r\n            size += 1;\r\n            Element memory element = Element({\r\n                value: value,\r\n                next: first,\r\n                previous: value\r\n            });\r\n\r\n            first = value;\r\n            if (size == 1) {\r\n                last = value;\r\n            } else {\r\n                elements[element.next].previous = value;\r\n            }\r\n            elements[value] = element;\r\n        }\r\n    }\r\n\r\n    // Removes the given value from the set \r\n    function remove(uint256 value) public {\r\n        if (contains(value)) {\r\n            Element storage element = elements[value];\r\n\r\n            if (first == value) {\r\n                first = element.next;\r\n            } else {\r\n                elements[element.previous].next = element.next;\r\n            }\r\n            if (last == value) {\r\n                last = element.previous;\r\n            } else {\r\n                elements[element.next].previous = element.previous;\r\n            }\r\n\r\n            size -= 1;\r\n            delete elements[value];\r\n        }\r\n    }\r\n\r\n    // Returns true iff the value is contained in the set\r\n    function contains(uint256 value) public view returns (bool) {\r\n        return size > 0 && (first == value || last == value || elements[value].next != 0 || elements[value].previous != 0);\r\n    }\r\n\r\n    // Returns an array containing all the ids in the set\r\n    function values() public view returns (uint256[]) {\r\n        uint256[] memory result = new uint256[](size);\r\n        Element storage position = elements[first];\r\n        uint256 i;\r\n        for (i = 0; i < size; i++) {\r\n            result[i] = position.value;\r\n            position = elements[position.next];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Returns the next value in the set.\r\n    // Fails if the provided value does not belong to the set or it has not next (it is the last one)\r\n    function next(uint256 value) public view returns (uint256) {\r\n        require(contains(value));\r\n        require(value != last);\r\n        return elements[value].next;\r\n    }\r\n\r\n    // Returns the previous value in the set.\r\n    // Fails if the provided value does not belong to the set or it has not previous (it is the first one)\r\n    function previous(uint256 value) public view returns (uint256) {\r\n        require(contains(value));\r\n        require(value != first);\r\n        return elements[value].previous;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"previous\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"next\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IterableSet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d62bf569907946c05db751705ede6bc98e2abf1d8004b7bb5053bdb6863c957"}]}