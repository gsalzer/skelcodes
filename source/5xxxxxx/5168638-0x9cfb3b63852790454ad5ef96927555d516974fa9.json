{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Clicker  {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public points;\r\n    uint public pps; // points per second\r\n    uint public multiplier;\r\n    uint public upgrades;\r\n    uint public basecost;\r\n    uint public ppsBase;\r\n    uint public checkpoint = now;\r\n\r\n    function Clicker() public {\r\n        _reset();\r\n    }\r\n\r\n    function upgrade() external {\r\n        claimPoints();\r\n\r\n        uint cost = getCost();\r\n\r\n        points = points.sub(cost);\r\n        pps = pps.add(ppsBase);\r\n        upgrades = upgrades.add(1);\r\n    }\r\n\r\n    function calculatePoints() public view returns (uint) {\r\n        uint secondsPassed = now.sub(checkpoint);\r\n        uint pointsEarned = secondsPassed.mul(pps);\r\n        return points.add(pointsEarned);\r\n    }\r\n\r\n    function getCost() public view returns (uint) {\r\n        return basecost.mul(multiplier ** upgrades);\r\n    }\r\n\r\n    function claimPoints() public {\r\n        points = calculatePoints();\r\n        checkpoint = now;\r\n    }\r\n\r\n    function won() public view returns (bool) {\r\n        uint secondsPassed = now - checkpoint;\r\n        uint pointsEarned = secondsPassed * pps;\r\n        uint total = points + pointsEarned;\r\n        // If we overflow then we win\r\n        if (total < points) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function prestige() external {\r\n        require(won());\r\n        _reset();\r\n    }\r\n\r\n    function _reset() internal {\r\n        points = 1;\r\n        pps = 1;\r\n        multiplier = 2;\r\n        upgrades = 1;\r\n        basecost = 1;\r\n        ppsBase = ppsBase.add(1); // each prestige we increase the pps base\r\n        checkpoint = now;\r\n    }\r\n\r\n    function getLevel() external view returns (uint) {\r\n        return ppsBase;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimPoints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"won\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"points\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ppsBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatePoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"prestige\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basecost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Clicker","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca9171c2c97e53b642c0b39aba55385a51dfd2cfb310e62409df04a1b38440ed"}]}