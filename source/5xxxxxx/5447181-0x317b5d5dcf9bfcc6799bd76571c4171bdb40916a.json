{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n  * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n    require(msg.data.length >= size + 4) ;\r\n    _;\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  /**\r\n  * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n    require(msg.data.length >= size + 4) ;\r\n    _;\r\n  }\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DML Token Contract\r\n * @dev DML Token Contract\r\n * @dev inherite from StandardToken, Pasuable and Ownable by Zeppelin\r\n * @author DML team\r\n */\r\n\r\ncontract DmlToken is StandardToken, Pausable{\r\n\tusing SafeMath for uint;\r\n\r\n \tstring public constant name = \"DML Token\";\r\n\tuint8 public constant decimals = 18;\r\n\tstring public constant symbol = 'DML';\r\n\r\n\tuint public constant MAX_TOTAL_TOKEN_AMOUNT = 330000000 ether;\r\n\taddress public minter;\r\n\tuint public endTime;\r\n\r\n\tmapping (address => uint) public lockedBalances;\r\n\r\n\tmodifier onlyMinter {\r\n    \t  assert(msg.sender == minter);\r\n    \t  _;\r\n    }\r\n\r\n    modifier maxDmlTokenAmountNotReached (uint amount){\r\n    \t  assert(totalSupply.add(amount) <= MAX_TOTAL_TOKEN_AMOUNT);\r\n    \t  _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _minter Contribution Smart Contract\r\n     * @return _endTime End of the contribution period\r\n     */\r\n\tfunction DmlToken(address _minter, uint _endTime){\r\n    \t  minter = _minter;\r\n    \t  endTime = _endTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint Token\r\n     * @param receipent address owning mint tokens    \r\n     * @param amount amount of token\r\n     */\r\n    function mintToken(address receipent, uint amount)\r\n        external\r\n        onlyMinter\r\n        maxDmlTokenAmountNotReached(amount)\r\n        returns (bool)\r\n    {\r\n        require(now <= endTime);\r\n      \tlockedBalances[receipent] = lockedBalances[receipent].add(amount);\r\n      \ttotalSupply = totalSupply.add(amount);\r\n      \treturn true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unlock token for trade\r\n     */\r\n    function claimTokens(address receipent)\r\n        public\r\n        onlyMinter\r\n    {\r\n      \tbalances[receipent] = balances[receipent].add(lockedBalances[receipent]);\r\n      \tlockedBalances[receipent] = 0;\r\n    }\r\n\r\n    function lockedBalanceOf(address _owner) constant returns (uint balance) {\r\n        return lockedBalances[_owner];\r\n    }\r\n\r\n\t/**\r\n\t* @dev override to add validRecipient\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint _value)\r\n\t\tpublic\r\n\t\tvalidRecipient(_to)\r\n\t\treturns (bool success)\r\n\t{\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev override to add validRecipient\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _value)\r\n\t\tpublic\r\n\t\tvalidRecipient(_spender)\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.approve(_spender,  _value);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev override to add validRecipient\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tvalidRecipient(_to)\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n\t// MODIFIERS\r\n\r\n \tmodifier validRecipient(address _recipient) {\r\n    \trequire(_recipient != address(this));\r\n    \t_;\r\n  \t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title DML Contribution Contract\r\n * @dev DML Contribution Contract\r\n * @dev inherite from StandardToken, Ownable by Zeppelin\r\n * @author DML team\r\n */\r\ncontract DmlContribution is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /// Constant fields\r\n    /// total tokens supply\r\n    uint public constant DML_TOTAL_SUPPLY = 330000000 ether;\r\n    uint public constant EARLY_CONTRIBUTION_DURATION = 24 hours;\r\n    uint public constant MAX_CONTRIBUTION_DURATION = 5 days;\r\n\r\n    /// Exchange rates\r\n    uint public constant PRICE_RATE_FIRST = 3780;\r\n    uint public constant PRICE_RATE_SECOND = 4158;\r\n\r\n    /// ----------------------------------------------------------------------------------------------------\r\n    /// |                                   |              |                    |             |            |\r\n    /// |    SALE (PRESALE + PUBLIC SALE)   |  ECO SYSTEM  |  COMMUNITY BOUNTY  |  OPERATION  |  RESERVES  |\r\n    /// |            36%                    |     9.9%     |         8.3%       |     30.8%   |     15%    |\r\n    /// ----------------------------------------------------------------------------------------------------\r\n    uint public constant SALE_STAKE = 360;  // 36% for open sale\r\n\r\n    // Reserved stakes\r\n    uint public constant ECO_SYSTEM_STAKE = 99;   // 9.9%\r\n    uint public constant COMMUNITY_BOUNTY_STAKE = 83; // 8.3%\r\n    uint public constant OPERATION_STAKE = 308;     // 30.8%\r\n    uint public constant RESERVES_STAKE = 150;     // 15.0%\r\n\r\n    uint public constant DIVISOR_STAKE = 1000;\r\n\r\n    uint public constant PRESALE_RESERVERED_AMOUNT = 56899342578812412860512236;\r\n    \r\n    /// Holder address\r\n    address public constant ECO_SYSTEM_HOLDER = 0x2D8C705a66b2E87A9249380d4Cdfe9D80BBF826B;\r\n    address public constant COMMUNITY_BOUNTY_HOLDER = 0x68500ffEfb57D88A600E2f1c63Bb5866e7107b6B;\r\n    address public constant OPERATION_HOLDER = 0xC7b6DFf52014E59Cb88fAc3b371FA955D0A9249F;\r\n    address public constant RESERVES_HOLDER = 0xab376b3eC2ed446444911E549c7C953fB086070f;\r\n    address public constant PRESALE_HOLDER = 0xcB52583D19fd42c0f85a0c83A45DEa6C73B9EBfb;\r\n    \r\n    uint public MAX_PUBLIC_SOLD = DML_TOTAL_SUPPLY * SALE_STAKE / DIVISOR_STAKE - PRESALE_RESERVERED_AMOUNT;\r\n\r\n    /// Fields that are only changed in constructor    \r\n    /// Address that storing all ETH\r\n    address public dmlwallet;\r\n    uint public earlyWhitelistBeginTime;\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    /// Fields that can be changed by functions\r\n    /// Accumulator for open sold tokens\r\n    uint public openSoldTokens;\r\n    /// Due to an emergency, set this to true to halt the contribution\r\n    bool public halted; \r\n    /// ERC20 compilant DML token contact instance\r\n    DmlToken public dmlToken; \r\n\r\n    mapping (address => WhitelistUser) private whitelisted;\r\n    address[] private whitelistedIndex;\r\n\r\n    struct WhitelistUser {\r\n      uint256 quota;\r\n      uint index;\r\n      uint level;\r\n    }\r\n    /// level 1 Main Whitelist\r\n    /// level 2 Early Whitelist\r\n    /// level 3 Early Super Whitelist\r\n\r\n    uint256 public maxBuyLimit = 68 ether;\r\n\r\n    /*\r\n     * EVENTS\r\n     */\r\n\r\n    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\r\n    event ToFundAmount(uint ethCost);\r\n    event ValidFundAmount(uint ethCost);\r\n    event Debug(uint number);\r\n    event UserCallBuy();\r\n    event ShowTokenAvailable(uint);\r\n    event NowTime(uint, uint, uint, uint);\r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n\r\n    modifier notHalted() {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier initialized() {\r\n        require(address(dmlwallet) != 0x0);\r\n        _;\r\n    }    \r\n\r\n    modifier notEarlierThan(uint x) {\r\n        require(now >= x);\r\n        _;\r\n    }\r\n\r\n    modifier earlierThan(uint x) {\r\n        require(now < x);\r\n        _;\r\n    }\r\n\r\n    modifier ceilingNotReached() {\r\n        require(openSoldTokens < MAX_PUBLIC_SOLD);\r\n        _;\r\n    }  \r\n\r\n    modifier isSaleEnded() {\r\n        require(now > endTime || openSoldTokens >= MAX_PUBLIC_SOLD);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * CONSTRUCTOR \r\n     * \r\n     * @dev Initialize the DML contribution contract\r\n     * @param _dmlwallet The escrow account address, all ethers will be sent to this address.\r\n     * @param _bootTime ICO boot time\r\n     */\r\n    function DmlContribution(address _dmlwallet, uint _bootTime){\r\n        require(_dmlwallet != 0x0);\r\n\r\n        halted = false;\r\n        dmlwallet = _dmlwallet;\r\n        earlyWhitelistBeginTime = _bootTime;\r\n        startTime = earlyWhitelistBeginTime + EARLY_CONTRIBUTION_DURATION;\r\n        endTime = startTime + MAX_CONTRIBUTION_DURATION;\r\n        openSoldTokens = 0;\r\n        dmlToken = new DmlToken(this, endTime);\r\n\r\n        uint stakeMultiplier = DML_TOTAL_SUPPLY / DIVISOR_STAKE;\r\n        \r\n        dmlToken.mintToken(ECO_SYSTEM_HOLDER, ECO_SYSTEM_STAKE * stakeMultiplier);\r\n        dmlToken.mintToken(COMMUNITY_BOUNTY_HOLDER, COMMUNITY_BOUNTY_STAKE * stakeMultiplier);\r\n        dmlToken.mintToken(OPERATION_HOLDER, OPERATION_STAKE * stakeMultiplier);\r\n        dmlToken.mintToken(RESERVES_HOLDER, RESERVES_STAKE * stakeMultiplier);\r\n\r\n        dmlToken.mintToken(PRESALE_HOLDER, PRESALE_RESERVERED_AMOUNT);      \r\n        \r\n    }\r\n\r\n    /**\r\n     * Fallback function \r\n     * \r\n     * @dev Set it to buy Token if anyone send ETH\r\n     */\r\n    function () public payable {\r\n        buyDmlCoin(msg.sender);\r\n        //NowTime(now, earlyWhitelistBeginTime, startTime, endTime);\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    /// @dev Exchange msg.value ether to DML for account recepient\r\n    /// @param receipient DML tokens receiver\r\n    function buyDmlCoin(address receipient) \r\n        public \r\n        payable \r\n        notHalted \r\n        initialized \r\n        ceilingNotReached \r\n        notEarlierThan(earlyWhitelistBeginTime)\r\n        earlierThan(endTime)\r\n        returns (bool) \r\n    {\r\n        require(receipient != 0x0);\r\n        require(isWhitelisted(receipient));\r\n\r\n        // Do not allow contracts to game the system\r\n        require(!isContract(msg.sender));        \r\n        require( tx.gasprice <= 99000000000 wei );\r\n\r\n        if( now < startTime && now >= earlyWhitelistBeginTime)\r\n        {\r\n            if (whitelisted[receipient].level >= 2)\r\n            {\r\n                require(msg.value >= 1 ether);\r\n            }\r\n            else\r\n            {\r\n                require(msg.value >= 0.5 ether);\r\n            }\r\n            buyEarlyWhitelist(receipient);\r\n        }\r\n        else\r\n        {\r\n            require(msg.value >= 0.1 ether);\r\n            require(msg.value <= maxBuyLimit);\r\n            buyRemaining(receipient);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setMaxBuyLimit(uint256 limit)\r\n        public\r\n        initialized\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        maxBuyLimit = limit;\r\n    }\r\n\r\n\r\n    /// @dev batch set quota for early user quota\r\n    function addWhiteListUsers(address[] userAddresses, uint256[] quota, uint[] level)\r\n        public\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        for( uint i = 0; i < userAddresses.length; i++) {\r\n            addWhiteListUser(userAddresses[i], quota[i], level[i]);\r\n        }\r\n    }\r\n\r\n    function addWhiteListUser(address userAddress, uint256 quota, uint level)\r\n        public\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        if (!isWhitelisted(userAddress)) {\r\n            whitelisted[userAddress].quota = quota;\r\n            whitelisted[userAddress].level = level;\r\n            whitelisted[userAddress].index = whitelistedIndex.push(userAddress) - 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Get a user's whitelisted state\r\n    * @param userAddress      address       the wallet address of the user\r\n    * @return bool  true if the user is in the whitelist\r\n    */\r\n    function isWhitelisted (address userAddress) public constant returns (bool isIndeed) {\r\n        if (whitelistedIndex.length == 0) return false;\r\n        return (whitelistedIndex[whitelisted[userAddress].index] == userAddress);\r\n    }\r\n\r\n    /*****\r\n    * @dev Get a whitelisted user\r\n    * @param userAddress      address       the wallet address of the user\r\n    * @return uint256  the amount pledged by the user\r\n    * @return uint     the index of the user\r\n    */\r\n    function getWhitelistUser (address userAddress) public constant returns (uint256 quota, uint index, uint level) {\r\n        require(isWhitelisted(userAddress));\r\n        return(whitelisted[userAddress].quota, whitelisted[userAddress].index, whitelisted[userAddress].level);\r\n    }\r\n\r\n\r\n    /// @dev Emergency situation that requires contribution period to stop.\r\n    /// Contributing not possible anymore.\r\n    function halt() public onlyOwner{\r\n        halted = true;\r\n    }\r\n\r\n    /// @dev Emergency situation resolved.\r\n    /// Contributing becomes possible again withing the outlined restrictions.\r\n    function unHalt() public onlyOwner{\r\n        halted = false;\r\n    }\r\n\r\n    /// @dev Emergency situation\r\n    function changeWalletAddress(address newAddress) onlyOwner{ \r\n        dmlwallet = newAddress; \r\n    }\r\n\r\n    /// @return true if sale not ended, false otherwise.\r\n    function saleNotEnd() constant returns (bool) {\r\n        return now < endTime && openSoldTokens < MAX_PUBLIC_SOLD;\r\n    }\r\n\r\n    /// CONSTANT METHODS\r\n    /// @dev Get current exchange rate\r\n    function priceRate() public constant returns (uint) {\r\n        // Two price tiers\r\n        if (earlyWhitelistBeginTime <= now && now < startTime)\r\n        {\r\n            if (whitelisted[msg.sender].level >= 2)\r\n            {\r\n                return PRICE_RATE_SECOND;\r\n            }\r\n            else\r\n            {\r\n                return PRICE_RATE_FIRST;\r\n            }\r\n        }\r\n        if (startTime <= now && now < endTime)\r\n        {\r\n            return PRICE_RATE_FIRST;\r\n        }\r\n        // Should not be called before or after contribution period\r\n        assert(false);\r\n    }\r\n    function claimTokens(address receipent)\r\n        public\r\n        isSaleEnded\r\n    {\r\n        dmlToken.claimTokens(receipent);\r\n    }\r\n\r\n    /*\r\n     * INTERNAL FUNCTIONS\r\n     */\r\n\r\n    /// @dev early_whitelist to buy token with quota\r\n    function buyEarlyWhitelist(address receipient) internal {\r\n        uint quotaAvailable = whitelisted[receipient].quota;\r\n        require(quotaAvailable > 0);\r\n\r\n        uint tokenAvailable = MAX_PUBLIC_SOLD.sub(openSoldTokens);\r\n        ShowTokenAvailable(tokenAvailable);\r\n        require(tokenAvailable > 0);\r\n\r\n        uint validFund = quotaAvailable.min256(msg.value);\r\n        ValidFundAmount(validFund);\r\n\r\n        uint toFund;\r\n        uint toCollect;\r\n        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, validFund);\r\n\r\n        whitelisted[receipient].quota = whitelisted[receipient].quota.sub(toFund);\r\n        buyCommon(receipient, toFund, toCollect);\r\n    }\r\n\r\n    /// @dev early_whitelist and main whitelist to buy token with their quota + extra quota\r\n    function buyRemaining(address receipient) internal {\r\n        uint tokenAvailable = MAX_PUBLIC_SOLD.sub(openSoldTokens);\r\n        ShowTokenAvailable(tokenAvailable);\r\n        require(tokenAvailable > 0);\r\n\r\n        uint toFund;\r\n        uint toCollect;\r\n        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, msg.value);\r\n        \r\n        buyCommon(receipient, toFund, toCollect);\r\n    }\r\n\r\n    /// @dev Utility function for buy token\r\n    function buyCommon(address receipient, uint toFund, uint dmlTokenCollect) internal {\r\n        require(msg.value >= toFund); // double check\r\n\r\n        if(toFund > 0) {\r\n            require(dmlToken.mintToken(receipient, dmlTokenCollect));\r\n            ToFundAmount(toFund);\r\n            dmlwallet.transfer(toFund);\r\n            openSoldTokens = openSoldTokens.add(dmlTokenCollect);\r\n            NewSale(receipient, toFund, dmlTokenCollect);            \r\n        }\r\n\r\n        uint toReturn = msg.value.sub(toFund);\r\n        if(toReturn > 0) {\r\n            msg.sender.transfer(toReturn);\r\n        }\r\n    }\r\n\r\n    /// @dev Utility function for calculate available tokens and cost ethers\r\n    function costAndBuyTokens(uint availableToken, uint validFund) constant internal returns (uint costValue, uint getTokens){\r\n        // all conditions has checked in the caller functions\r\n        uint exchangeRate = priceRate();\r\n        getTokens = exchangeRate * validFund;\r\n\r\n        if(availableToken >= getTokens){\r\n            costValue = validFund;\r\n        } else {\r\n            costValue = availableToken / exchangeRate;\r\n            getTokens = availableToken;\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ECO_SYSTEM_HOLDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyWhitelistBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECO_SYSTEM_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVISOR_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleNotEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVES_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_CONTRIBUTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_RESERVERED_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmlToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_SECOND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATION_HOLDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATION_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_BOUNTY_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PUBLIC_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getWhitelistUser\",\"outputs\":[{\"name\":\"quota\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVES_HOLDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_FIRST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmlwallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receipient\",\"type\":\"address\"}],\"name\":\"buyDmlCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_HOLDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"quota\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"addWhiteListUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_BOUNTY_HOLDER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receipent\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"name\":\"quota\",\"type\":\"uint256[]\"},{\"name\":\"level\",\"type\":\"uint256[]\"}],\"name\":\"addWhiteListUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRIBUTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DML_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dmlwallet\",\"type\":\"address\"},{\"name\":\"_bootTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gotTokens\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"}],\"name\":\"ToFundAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"}],\"name\":\"ValidFundAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UserCallBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ShowTokenAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NowTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DmlContribution","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bd24cef65610bea92efe6b5cc2af9758637e2200000000000000000000000000000000000000000000000000000000005ad4c880","Library":"","SwarmSource":"bzzr://cc4a19b940b5662869c66f40e20548d1972d6af64a6a865ca514b020549ece2c"}]}