{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  ATMX Ameritoken contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\r\n*/\r\n\r\npragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract Ameritoken {\r\n    string public constant name = 'Ameritoken';                                 // Public variables of the token\r\n    string public constant symbol = 'ATMX';                                     \r\n    uint256 public constant decimals = 0;                                       // 0 decimals \r\n    string public constant version = 'ATMX-1.1';                                // Public Version\r\n                                                                                // Corrected glitch of sending double qty to receiver. \r\n                                                                                // Fix provided by https://ethereum.stackexchange.com/users/19510/smarx\r\n                                              \r\n    uint256 private constant totalTokens = 41000000;                            // Fourty One million coins, NO FORK\r\n                                                                                // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;                              // (ERC20)\r\n    mapping (address => mapping (address => uint256)) public allowance;         // (ERC20)\r\n\r\n                                                                                // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);    \r\n \r\n    function Ameritoken () public {\r\n        balanceOf[msg.sender] = totalTokens;                                    // Give the creator (Ameritoken, LLC) all initial tokens.\r\n    }\r\n\r\n  // See ERC20\r\n    function totalSupply() constant returns (uint256) {                         // Returns the Total of Ameritokens\r\n        return totalTokens;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);                                                    // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[_from] >= _value);                                    // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);                      // Check for overflows\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];              // Save this for an assertion in the future\r\n        balanceOf[_from] -= _value;                                             // Subtract from the sender\r\n        balanceOf[_to] += _value;                                               // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);          // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n    }\r\n\r\n   \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (balanceOf[msg.sender] >= _value) {\r\n            _transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    if (balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value) {\r\n      balanceOf[_from] -= _value;\r\n      allowance[_from][msg.sender] -= _value;\r\n      balanceOf[_to] += _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Ameritoken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e472fa612ba8b530a0e40a6895e86c8b6b41c8182e54c3a53b017163a19a5f8"}]}