{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\ncontract Bhinneka {\r\n/* Public variables of the token */\r\nstring public name = \"Bhinneka Tunggal Ika\";                  // Token Name\r\nstring public symbol = \"BTI\";                         // Token symbol\r\nuint public decimals = 18;                            // Token Decimal Point\r\naddress public owner;                                 // Owner of the Token Contract\r\nuint256 totalBhinneka;                                  // Total Token for the Crowdsale\r\nuint256 totalToken;                                   // The current total token supply.\r\nbool public hault = false;                            // Crowdsale State\r\n /* This creates an array with all balances */\r\nmapping (address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n/* This notifies clients about the refund amount */\r\n event Burn(address _from, uint256 _value);\r\n event Approval(address _from, address _to, uint256 _value);\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nfunction Bhinneka (\r\n  address _BTIclan\r\n  ) public {\r\n   owner = msg.sender;                                            // Assigning owner address.\r\n   balances[msg.sender] = 167000000 * (10 ** decimals);            // Assigning Total Token balance to owner\r\n   totalBhinneka = 267000000 * (10 ** decimals);\r\n   balances[_BTIclan] = safeAdd(balances[_BTIclan], 53125000 * (10 ** decimals));\r\n}\r\nfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\nmodifier onlyPayloadSize(uint size) {\r\n   require(msg.data.length >= size + 4) ;\r\n   _;\r\n}\r\nmodifier onlyowner {\r\n  require (owner == msg.sender);\r\n  _;\r\n}\r\n///@notice Alter the Total Supply.\r\nfunction tokensup(uint256 _value) onlyowner public{\r\n  totalBhinneka = safeAdd(totalBhinneka, _value * (10 ** decimals));\r\n  balances[owner] = safeAdd(balances[owner], _value * (10 ** decimals));\r\n}\r\n///@notice Transfer tokens based on type\r\nfunction Bhinnekamint( address _client, uint _value, uint _type) onlyowner public {\r\n  uint numBTI;\r\n  require(totalToken <= totalBhinneka);\r\n  if(_type == 1){\r\n      numBTI = _value * 6000 * (10 ** decimals);\r\n  }\r\n  else if (_type == 2){\r\n      numBTI = _value * 5000 * (10 ** decimals);\r\n  }\r\n  balances[owner] = safeSub(balances[owner], numBTI);\r\n  balances[_client] = safeAdd(balances[_client], numBTI);\r\n  totalToken = safeAdd(totalToken, numBTI);\r\n  Transfer(owner, _client, numBTI);\r\n}\r\n///@notice Transfer token with only value\r\nfunction BTImint( address _client, uint256 _value) onlyowner public {\r\n  require(totalToken <= totalBhinneka);\r\n  uint256 numBTI = _value * ( 10 ** decimals);\r\n  balances[owner] = safeSub(balances[owner], numBTI);\r\n  balances[_client] = safeAdd(balances[_client], numBTI);\r\n  totalToken = safeAdd(totalToken, numBTI);\r\n  Transfer(owner, _client, numBTI);\r\n}\r\n//Default assumes totalSupply can't be over max (2^256 - 1).\r\n//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check requireit doesn't wrap.\r\n//Replace the if with this one instead.\r\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n    require(!hault);\r\n    require(balances[msg.sender] >= _value);\r\n    balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n}\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n          // Balance or allowance too low\r\n          revert();\r\n      }\r\n      require(!hault);\r\n      balances[_to] = safeAdd(balances[_to], _value);\r\n      balances[_from] = safeSub(balances[_from],_value);\r\n      allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n}\r\n/// @dev Sets approved amount of tokens for spender. Returns success.\r\n/// @param _spender Address of allowed account.\r\n/// @param _value Number of approved tokens.\r\n/// @return Returns success of function call.\r\nfunction approve(address _spender, uint256 _value)\r\n    public\r\n    returns (bool)\r\n{\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n}\r\n/// @dev Returns number of allowed tokens for given address.\r\n/// @param _owner Address of token owner.\r\n/// @param _spender Address of token spender.\r\n/// @return Returns remaining allowance for spender.\r\nfunction allowance(address _owner, address _spender)\r\n    constant\r\n    public\r\n    returns (uint256)\r\n{\r\n    return allowed[_owner][_spender];\r\n}\r\n/// @notice Returns balance of BTI Tokens.\r\n/// @param _from Balance for Address.\r\nfunction balanceOf(address _from) public view returns (uint balance) {\r\n    return balances[_from];\r\n  }\r\n\r\n///@notice Returns the Total Number of BTI Tokens.\r\nfunction totalSupply() public view returns (uint Supply){\r\n  return totalBhinneka;\r\n}\r\n/// @notice Pause the crowdsale\r\nfunction pauseable() public onlyowner {\r\n    hault = true;\r\n  }\r\n/// @notice Unpause the crowdsale\r\nfunction unpause() public onlyowner {\r\n    hault = false;\r\n}\r\n\r\n/// @notice Remove `_value` tokens from the system irreversibly\r\nfunction burn(uint256 _value) onlyowner public returns (bool success) {\r\n    require (balances[msg.sender] >= _value);                                          // Check if the sender has enough\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);                      // Subtract from the sender\r\n    totalBhinneka = safeSub(totalBhinneka, _value);                                        // Updates totalSupply\r\n    Burn(msg.sender, _value);\r\n    return true;\r\n}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"pauseable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BTImint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"Bhinnekamint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokensup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_BTIclan\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Bhinneka","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://10cf89d6b460438b3b7b4dd00ab1449722d4249a0aaf5fb9dda15df31dbd18e6"}]}