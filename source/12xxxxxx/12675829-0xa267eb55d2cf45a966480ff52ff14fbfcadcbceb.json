{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File contracts/solidity/proxy/Initializable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXEligibility.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXEligibility {\r\n    // Read functions.\r\n    function name() external pure returns (string memory);\r\n    function finalized() external view returns (bool);\r\n    function targetAsset() external pure returns (address);\r\n    function checkAllEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool[] memory);\r\n    function checkAllIneligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\r\n\r\n    // Write functions.\r\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\r\n    function beforeMintHook(uint256[] calldata tokenIds) external;\r\n    function afterMintHook(uint256[] calldata tokenIds) external;\r\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\r\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/eligibility/NFTXEligibility.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// This is a contract meant to be inherited and overriden to implement eligibility modules. \r\nabstract contract NFTXEligibility is INFTXEligibility, Initializable {\r\n  function name() public pure override virtual returns (string memory);\r\n  function finalized() public view override virtual returns (bool);\r\n  function targetAsset() public pure override virtual returns (address);\r\n  \r\n  function __NFTXEligibility_init_bytes(bytes memory initData) public override virtual;\r\n\r\n  function checkIsEligible(uint256 tokenId) external view override virtual returns (bool) {\r\n      return _checkIfEligible(tokenId);\r\n  }\r\n\r\n  function checkEligible(uint256[] calldata tokenIds) external override virtual view returns (bool[] memory) {\r\n      bool[] memory eligibile = new bool[](tokenIds.length);\r\n      for (uint256 i = 0; i < tokenIds.length; i++) {\r\n          eligibile[i] = _checkIfEligible(tokenIds[i]);\r\n      }\r\n      return eligibile;\r\n  }\r\n\r\n  function checkAllEligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\r\n      for (uint256 i = 0; i < tokenIds.length; i++) {\r\n          // If any are not eligible, end the loop and return false.\r\n          if (!_checkIfEligible(tokenIds[i])) {\r\n              return false;\r\n          }\r\n      }\r\n      return true;\r\n  }\r\n\r\n  // Checks if all provided NFTs are NOT eligible. This is needed for mint requesting where all NFTs \r\n  // provided must be ineligible.\r\n  function checkAllIneligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\r\n      for (uint256 i = 0; i < tokenIds.length; i++) {\r\n          // If any are eligible, end the loop and return false.\r\n          if (_checkIfEligible(tokenIds[i])) {\r\n              return false;\r\n          }\r\n      }\r\n      return true;\r\n  }\r\n\r\n  function beforeMintHook(uint256[] calldata tokenIds) external override virtual {}\r\n  function afterMintHook(uint256[] calldata tokenIds) external override virtual {}\r\n  function beforeRedeemHook(uint256[] calldata tokenIds) external override virtual {}\r\n  function afterRedeemHook(uint256[] calldata tokenIds) external override virtual {}\r\n\r\n  // Override this to implement your module!\r\n  function _checkIfEligible(uint256 _tokenId) internal view virtual returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/eligibility/NFTXGen0Eligibility.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface KittyCore {\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function getKitty(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            bool,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256 _generation,\r\n            uint256\r\n        );\r\n}\r\n\r\ncontract NFTXGen0KittyEligibility is NFTXEligibility {\r\n    function name() public pure override virtual returns (string memory) {\r\n        return \"Gen0Kitty\";\r\n    }\r\n\r\n    function finalized() public view override virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function targetAsset() public pure override virtual returns (address) {\r\n        return 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    }\r\n\r\n    event NFTXEligibilityInit();\r\n\r\n    function __NFTXEligibility_init_bytes(\r\n        bytes memory /* configData */\r\n    ) public override virtual initializer {\r\n        __NFTXEligibility_init();\r\n    }\r\n\r\n    // Parameters here should mirror the config struct.\r\n    function __NFTXEligibility_init() public initializer {\r\n        emit NFTXEligibilityInit();\r\n    }\r\n\r\n    function _checkIfEligible(uint256 _tokenId)\r\n        internal\r\n        view\r\n        override\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        (, , , , , , , , uint256 _generation, ) = KittyCore(targetAsset())\r\n            .getKitty(_tokenId);\r\n        return _generation == 0;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"NFTXEligibilityInit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__NFTXEligibility_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"__NFTXEligibility_init_bytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"afterMintHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"afterRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"beforeMintHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"beforeRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkAllEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkAllIneligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkIsEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"NFTXGen0KittyEligibility","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b198b0a641bbb5fe4878d9e66d4e76c88d3a32a46df476334440b34fb484100f"}]}