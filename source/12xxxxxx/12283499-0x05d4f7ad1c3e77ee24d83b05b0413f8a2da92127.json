{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published\r\n// by the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface VatLike {\r\n    function hope(address) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external view returns (uint256);\r\n    function gem() external view returns (TokenLike);\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function dai() external view returns (TokenLike);\r\n    function vat() external view returns (VatLike);\r\n    function join(address, uint256) external;\r\n}\r\n\r\ninterface TokenLike {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ninterface UniswapV2Router02Like {\r\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external returns (uint[] memory);\r\n}\r\n\r\n// Simple Callee Example to interact with MatchingMarket\r\n// This Callee contract exists as a standalone contract\r\ncontract UniswapV2Callee {\r\n    UniswapV2Router02Like   public uniRouter02;\r\n    DaiJoinLike             public daiJoin;\r\n    TokenLike               public dai;\r\n\r\n    uint256                 public constant RAY = 10 ** 27;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(x, sub(y, 1)) / y;\r\n    }\r\n\r\n    function setUp(address uniRouter02_, address clip_, address daiJoin_) internal {\r\n        uniRouter02 = UniswapV2Router02Like(uniRouter02_);\r\n        daiJoin = DaiJoinLike(daiJoin_);\r\n        dai = daiJoin.dai();\r\n\r\n        daiJoin.vat().hope(clip_);\r\n\r\n        dai.approve(daiJoin_, uint256(-1));\r\n    }\r\n\r\n    function _fromWad(address gemJoin, uint256 wad) internal view returns (uint256 amt) {\r\n        amt = wad / 10 ** (sub(18, GemJoinLike(gemJoin).dec()));\r\n    }\r\n}\r\n\r\n// Uniswapv2Router02 route directs swaps from one pool to another\r\ncontract UniswapV2CalleeDai is UniswapV2Callee {\r\n    constructor(address uniRouter02_, address clip_, address daiJoin_) public {\r\n        setUp(uniRouter02_, clip_, daiJoin_);\r\n    }\r\n\r\n    function clipperCall(\r\n        address sender,         // Clipper Caller and Dai deliveryaddress\r\n        uint256 daiAmt,         // Dai amount to payback[rad]\r\n        uint256 gemAmt,         // Gem amount received [wad]\r\n        bytes calldata data     // Extra data needed (gemJoin)\r\n    ) external {\r\n        // Get address to send remaining DAI, gemJoin adapter and minProfit in DAI to make\r\n        (\r\n            address to,\r\n            address gemJoin,\r\n            uint256 minProfit,\r\n            address[] memory path\r\n        ) = abi.decode(data, (address, address, uint256, address[]));\r\n\r\n        // Convert gem amount to token precision\r\n        gemAmt = _fromWad(gemJoin, gemAmt);\r\n\r\n        // Exit collateral to token version\r\n        GemJoinLike(gemJoin).exit(address(this), gemAmt);\r\n\r\n        // Approve uniRouter02 to take gem\r\n        TokenLike gem = GemJoinLike(gemJoin).gem();\r\n        gem.approve(address(uniRouter02), gemAmt);\r\n\r\n        // Calculate amount of DAI to Join (as erc20 WAD value)\r\n        uint256 daiToJoin = divup(daiAmt, RAY);\r\n\r\n        // Do operation and get dai amount bought (checking the profit is achieved)\r\n        uint256[] memory amounts = uniRouter02.swapExactTokensForTokens(\r\n                                                  gemAmt,\r\n                                                  add(daiToJoin, minProfit),\r\n                                                  path,\r\n                                                  address(this),\r\n                                                  block.timestamp\r\n        );\r\n\r\n        uint256 daiBought = amounts[1];\r\n\r\n        // Although Uniswap will accept all gems, this check is a sanity check, just in case\r\n        // Transfer any lingering gem to specified address\r\n        if (gem.balanceOf(address(this)) > 0) {\r\n            gem.transfer(to, gem.balanceOf(address(this)));\r\n        }\r\n\r\n        // Convert DAI bought to internal vat value of the msg.sender of Clipper.take\r\n        daiJoin.join(sender, daiToJoin);\r\n\r\n        // Transfer remaining DAI to specified address\r\n        dai.transfer(to, dai.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// Maker-Otc is MatchingMarket, which is the core contract of OasisDex\r\n/* contract UniswapV2CalleeGem is UniswapV2Callee {\r\n    constructor(address otc_, address clip_, address daiJoin_) public {\r\n        setUp(otc_, clip_, daiJoin_);\r\n    }\r\n\r\n    function clipperCall(\r\n        uint256 daiAmt,         // Dai amount to payback[rad]\r\n        uint256 gemAmt,         // Gem amount received [wad]\r\n        bytes calldata data     // Extra data needed (gemJoin)\r\n    ) external {\r\n        // Get address to send remaining Gem, gemJoin adapter and minProfit in Gem to make\r\n        (address to, address gemJoin, uint256 minProfit) = abi.decode(data, (address, address, uint256));\r\n\r\n        // Convert gem amount to token precision\r\n        gemAmt = _fromWad(gemJoin, gemAmt);\r\n\r\n        // Exit collateral to token version\r\n        GemJoinLike(gemJoin).exit(address(this), gemAmt);\r\n\r\n        // Approve otc to take gem\r\n        TokenLike gem = GemJoinLike(gemJoin).gem();\r\n        gem.approve(address(otc), gemAmt);\r\n\r\n        // Calculate amount of DAI to Join (as erc20 WAD value)\r\n        uint256 daiToJoin = daiAmt / RAY;\r\n        if (daiToJoin * RAY < daiAmt) {\r\n            daiToJoin = daiToJoin + 1;\r\n        }\r\n\r\n        // Do operation and get gem amount sold (checking the profit is achieved)\r\n        uint256 gemSold = otc.buyAllAmount(address(dai), daiToJoin, address(gem), gemAmt - minProfit);\r\n        // TODO: make sure daiToJoin is actually the amount received from buyAllAmount (due rounding)\r\n\r\n        // Convert DAI bought to internal vat value\r\n        daiJoin.join(address(this), daiToJoin);\r\n\r\n        // Transfer remaining gem to specified address\r\n        gem.transfer(to, gemAmt - gemSold);\r\n    }\r\n} */","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniRouter02_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clip_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gemAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"clipperCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter02\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV2CalleeDai","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000832dd5f17b30078a5e46fdb8130a68cbc4a74dc00000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b5499c2b9d62e96199275c83d68747e3bc096db1207b4cbdf5ce977cc7cd3de9"}]}