{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.1;\r\n\r\ninterface ISupplyController {\r\n\tfunction mintIncentive(address addr) external;\r\n\tfunction mintableIncentive(address addr) external view returns (uint);\r\n\tfunction mint(address token, address owner, uint amount) external;\r\n\tfunction changeSupplyController(address newSupplyController) external;\r\n}\r\n\r\ninterface IADXToken {\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction balanceOf(address spender) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction totalSupply() external returns (uint);\r\n\tfunction supplyController() external view returns (ISupplyController);\r\n\tfunction changeSupplyController(address newSupplyController) external;\r\n\tfunction mint(address owner, uint amount) external;\r\n}\r\n\r\n\r\ninterface IStakingPool {\r\n\tfunction enterTo(address recipient, uint amount) external;\r\n}\r\n\r\ninterface ILegacyStaking {\r\n\tstruct BondState {\r\n\t\tbool active;\r\n\t\t// Data type must be larger than MAX_SLASH (2**64 > 10**18)\r\n\t\tuint64 slashedAtStart;\r\n\t\tuint64 willUnlock;\r\n\t}\r\n\tfunction bonds(bytes32 id) external view returns (BondState calldata);\r\n\tfunction slashPoints(bytes32 id) external view returns (uint);\r\n}\r\n\r\ncontract StakingMigrator {\r\n\tILegacyStaking public constant legacyStaking = ILegacyStaking(0x4846C6837ec670Bbd1f5b485471c8f64ECB9c534);\r\n\tIADXToken public constant ADXToken = IADXToken(0xADE00C28244d5CE17D72E40330B1c318cD12B7c3);\r\n\tbytes32 public constant poolId = 0x2ce0c96383fb229d9776f33846e983a956a7d95844fac57b180ed0071d93bb28;\r\n\tIStakingPool public newStaking;\r\n\r\n\t// must be 1000 + the bonus promilles\r\n\tuint public constant WITH_BONUS_PROMILLES = 1048;\r\n\tuint public constant WHALE_BOND = 4000000e18;\r\n\r\n\tmapping(bytes32 => bool) public migratedBonds;\r\n\r\n\tevent LogBondMigrated(address indexed bondOwner, bytes32 bondId);\r\n\r\n\tconstructor(IStakingPool _newStaking) {\r\n\t\tnewStaking = _newStaking;\r\n\t\tADXToken.approve(address(_newStaking), type(uint256).max);\r\n\t}\r\n\r\n\t// NOTE: this works by minting the full bondAmount, which is correct if the pool never had any slashing prior\r\n\t// to the migration, which is the case for the Tom pool\r\n\tfunction migrate(uint bondAmount, uint nonce, address recipient, uint extraAmount) external {\r\n\t\trequire(legacyStaking.slashPoints(poolId) == 1e18, \"POOL_NOT_SLASHED\");\r\n\r\n\t\tbytes32 id = keccak256(abi.encode(address(legacyStaking), msg.sender, bondAmount, poolId, nonce));\r\n\r\n\t\trequire(!migratedBonds[id], \"BOND_MIGRATED\");\r\n\t\tmigratedBonds[id] = true;\r\n\r\n\t\tILegacyStaking.BondState memory bondState = legacyStaking.bonds(id);\r\n\t\trequire(bondState.active, \"BOND_NOT_ACTIVE\");\r\n\r\n\t\t// willUnlock must be lower than 23 april (30 days after 24 march)\r\n\t\tif (bondState.willUnlock > 0 && bondState.willUnlock < 1619182800) {\r\n\t\t\tADXToken.supplyController().mint(address(ADXToken), recipient, bondAmount);\r\n\t\t} else {\r\n\t\t\tuint toMint = (bondAmount > WHALE_BOND)\r\n\t\t\t\t? bondAmount\r\n\t\t\t\t: ((bondAmount * WITH_BONUS_PROMILLES) / 1000);\r\n\t\t\tADXToken.supplyController().mint(address(ADXToken), address(this), toMint);\r\n\r\n\t\t\t// if there is an extraAmount, we expect that the staker will send it to this contract before calling this,\r\n\t\t\t// in the same txn (by using Identity)\r\n\t\t\tnewStaking.enterTo(recipient, toMint + extraAmount);\r\n\t\t}\r\n\r\n\t\temit LogBondMigrated(msg.sender, id);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"_newStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bondId\",\"type\":\"bytes32\"}],\"name\":\"LogBondMigrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADXToken\",\"outputs\":[{\"internalType\":\"contract IADXToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHALE_BOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITH_BONUS_PROMILLES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyStaking\",\"outputs\":[{\"internalType\":\"contract ILegacyStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"migratedBonds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newStaking\",\"outputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingMigrator","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b6456b57f03352be48bf101b46c1752a0813491a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b746c07bf73f293330f2799370e771c0942ead2bbb86d8712bbfc09642dd9e7d"}]}