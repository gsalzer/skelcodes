{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPLv3\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https:\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        \r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https:\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https:\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https:\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        \r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https:\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \r\n        \r\n        \r\n        \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        \r\n        \r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { \r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Constants {\r\n    uint8 public constant N_COINS = 3;\r\n    uint8 public constant DEFAULT_DECIMALS = 18; \r\n    uint256 public constant DEFAULT_DECIMALS_FACTOR = uint256(10)**DEFAULT_DECIMALS;\r\n    uint8 public constant CHAINLINK_PRICE_DECIMALS = 8;\r\n    uint256 public constant CHAINLINK_PRICE_DECIMAL_FACTOR = uint256(10)**CHAINLINK_PRICE_DECIMALS;\r\n    uint8 public constant PERCENTAGE_DECIMALS = 4;\r\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = uint256(10)**PERCENTAGE_DECIMALS;\r\n    uint256 public constant CURVE_RATIO_DECIMALS = 6;\r\n    uint256 public constant CURVE_RATIO_DECIMALS_FACTOR = uint256(10)**CURVE_RATIO_DECIMALS;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IToken {\r\n    function factor() external view returns (uint256);\r\n\r\n    function factor(uint256 totalAssets) external view returns (uint256);\r\n\r\n    function mint(\r\n        address account,\r\n        uint256 _factor,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burn(\r\n        address account,\r\n        uint256 _factor,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnAll(address account) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getPricePerShare() external view returns (uint256);\r\n\r\n    function getShareAssets(uint256 shares) external view returns (uint256);\r\n\r\n    function getAssets(address account) external view returns (uint256);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IVault {\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount, address recipient) external;\r\n\r\n    function withdrawByStrategyOrder(\r\n        uint256 amount,\r\n        address recipient,\r\n        bool reversed\r\n    ) external;\r\n\r\n    function withdrawByStrategyIndex(\r\n        uint256 amount,\r\n        address recipient,\r\n        uint256 strategyIndex\r\n    ) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function updateStrategyRatio(uint256[] calldata strategyRetios) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getStrategiesLength() external view returns (uint256);\r\n\r\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\r\n\r\n    function strategyHarvest(uint256 index) external returns (bool);\r\n\r\n    function getStrategyAssets(uint256 index) external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function investTrigger() external view returns (bool);\r\n\r\n    function invest() external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract FixedStablecoins is Constants {\r\n    address public immutable DAI; \r\n    address public immutable USDC; \r\n    address public immutable USDT; \r\n\r\n    uint256 public immutable DAI_DECIMALS; \r\n    uint256 public immutable USDC_DECIMALS; \r\n    uint256 public immutable USDT_DECIMALS; \r\n\r\n    constructor(address[N_COINS] memory _tokens, uint256[N_COINS] memory _decimals) public {\r\n        DAI = _tokens[0];\r\n        USDC = _tokens[1];\r\n        USDT = _tokens[2];\r\n        DAI_DECIMALS = _decimals[0];\r\n        USDC_DECIMALS = _decimals[1];\r\n        USDT_DECIMALS = _decimals[2];\r\n    }\r\n\r\n    function underlyingTokens() internal view returns (address[N_COINS] memory tokens) {\r\n        tokens[0] = DAI;\r\n        tokens[1] = USDC;\r\n        tokens[2] = USDT;\r\n    }\r\n\r\n    function getToken(uint256 index) internal view returns (address) {\r\n        if (index == 0) {\r\n            return DAI;\r\n        } else if (index == 1) {\r\n            return USDC;\r\n        } else {\r\n            return USDT;\r\n        }\r\n    }\r\n\r\n    function decimals() internal view returns (uint256[N_COINS] memory _decimals) {\r\n        _decimals[0] = DAI_DECIMALS;\r\n        _decimals[1] = USDC_DECIMALS;\r\n        _decimals[2] = USDT_DECIMALS;\r\n    }\r\n\r\n    function getDecimal(uint256 index) internal view returns (uint256) {\r\n        if (index == 0) {\r\n            return DAI_DECIMALS;\r\n        } else if (index == 1) {\r\n            return USDC_DECIMALS;\r\n        } else {\r\n            return USDT_DECIMALS;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FixedGTokens {\r\n    IToken public immutable pwrd;\r\n    IToken public immutable gvt;\r\n\r\n    constructor(address _pwrd, address _gvt) public {\r\n        pwrd = IToken(_pwrd);\r\n        gvt = IToken(_gvt);\r\n    }\r\n\r\n    function gTokens(bool _pwrd) internal view returns (IToken) {\r\n        if (_pwrd) {\r\n            return pwrd;\r\n        } else {\r\n            return gvt;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FixedVaults is Constants {\r\n    address public immutable DAI_VAULT;\r\n    address public immutable USDC_VAULT;\r\n    address public immutable USDT_VAULT;\r\n\r\n    constructor(address[N_COINS] memory _vaults) public {\r\n        DAI_VAULT = _vaults[0];\r\n        USDC_VAULT = _vaults[1];\r\n        USDT_VAULT = _vaults[2];\r\n    }\r\n\r\n    function getVault(uint256 index) internal view returns (address) {\r\n        if (index == 0) {\r\n            return DAI_VAULT;\r\n        } else if (index == 1) {\r\n            return USDC_VAULT;\r\n        } else {\r\n            return USDT_VAULT;\r\n        }\r\n    }\r\n\r\n    function vaults() internal view returns (address[N_COINS] memory _vaults) {\r\n        _vaults[0] = DAI_VAULT;\r\n        _vaults[1] = USDC_VAULT;\r\n        _vaults[2] = USDT_VAULT;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event LogAddToWhitelist(address indexed user);\r\n    event LogRemoveFromWhitelist(address indexed user);\r\n\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender], \"only whitelist\");\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address user) external onlyOwner {\r\n        require(user != address(0), \"WhiteList: 0x\");\r\n        whitelist[user] = true;\r\n        emit LogAddToWhitelist(user);\r\n    }\r\n\r\n    function removeFromWhitelist(address user) external onlyOwner {\r\n        require(user != address(0), \"WhiteList: 0x\");\r\n        whitelist[user] = false;\r\n        emit LogRemoveFromWhitelist(user);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IBuoy {\r\n    function safetyCheck() external view returns (bool);\r\n\r\n    function updateRatios() external returns (bool);\r\n\r\n    function updateRatiosWithTolerance(uint256 tolerance) external returns (bool);\r\n\r\n    function lpToUsd(uint256 inAmount) external view returns (uint256);\r\n\r\n    function usdToLp(uint256 inAmount) external view returns (uint256);\r\n\r\n    function stableToUsd(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\r\n\r\n    function stableToLp(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\r\n\r\n    function singleStableFromLp(uint256 inAmount, int128 i) external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    function singleStableFromUsd(uint256 inAmount, int128 i) external view returns (uint256);\r\n\r\n    function singleStableToUsd(uint256 inAmount, uint256 i) external view returns (uint256);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IChainPrice {\r\n    function getPriceFeed(uint256 i) external view returns (uint256 _price);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IController {\r\n    function stablecoins() external view returns (address[3] memory);\r\n\r\n    function vaults() external view returns (address[3] memory);\r\n\r\n    function underlyingVaults(uint256 i) external view returns (address vault);\r\n\r\n    function curveVault() external view returns (address);\r\n\r\n    function pnl() external view returns (address);\r\n\r\n    function insurance() external view returns (address);\r\n\r\n    function lifeGuard() external view returns (address);\r\n\r\n    function buoy() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    function isValidBigFish(\r\n        bool pwrd,\r\n        bool deposit,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function withdrawHandler() external view returns (address);\r\n\r\n    function emergencyHandler() external view returns (address);\r\n\r\n    function depositHandler() external view returns (address);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function gTokenTotalAssets() external view returns (uint256);\r\n\r\n    function eoaOnly(address sender) external;\r\n\r\n    function getSkimPercent() external view returns (uint256);\r\n\r\n    function gToken(bool _pwrd) external view returns (address);\r\n\r\n    function emergencyState() external view returns (bool);\r\n\r\n    function deadCoin() external view returns (uint256);\r\n\r\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external;\r\n\r\n    function burnGToken(\r\n        bool pwrd,\r\n        bool all,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function mintGToken(\r\n        bool pwrd,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function getUserAssets(bool pwrd, address account) external view returns (uint256 deductUsd);\r\n\r\n    function referrals(address account) external view returns (address);\r\n\r\n    function addReferral(address account, address referral) external;\r\n\r\n    function getStrategiesTargetRatio() external view returns (uint256[] memory);\r\n\r\n    function withdrawalFee(bool pwrd) external view returns (uint256);\r\n\r\n    function validGTokenDecrease(uint256 amount) external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IERC20Detailed {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IInsurance {\r\n    function calculateDepositDeltasOnAllVaults() external view returns (uint256[3] memory);\r\n\r\n    function rebalanceTrigger() external view returns (bool sysNeedRebalance);\r\n\r\n    function rebalance() external;\r\n\r\n    function calcSkim() external view returns (uint256);\r\n\r\n    function rebalanceForWithdraw(uint256 withdrawUsd, bool pwrd) external returns (bool);\r\n\r\n    function getDelta(uint256 withdrawUsd) external view returns (uint256[3] memory delta);\r\n\r\n    function getVaultDeltaForDeposit(uint256 amount) external view returns (uint256[3] memory, uint256);\r\n\r\n    function sortVaultsByDelta(bool bigFirst) external view returns (uint256[3] memory vaultIndexes);\r\n\r\n    function getStrategiesTargetRatio(uint256 utilRatio) external view returns (uint256[] memory);\r\n\r\n    function setUnderlyingTokenPercents(uint256[3] calldata percents) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface ILifeGuard {\r\n    function assets(uint256 i) external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getAssets() external view returns (uint256[3] memory);\r\n\r\n    function totalAssetsUsd() external view returns (uint256);\r\n\r\n    function availableUsd() external view returns (uint256 dollar);\r\n\r\n    function availableLP() external view returns (uint256);\r\n\r\n    function depositStable(bool rebalance) external returns (uint256);\r\n\r\n    function investToCurveVault() external;\r\n\r\n    function distributeCurveVault(uint256 amount, uint256[3] memory delta) external returns (uint256[3] memory);\r\n\r\n    function deposit() external returns (uint256 usdAmount);\r\n\r\n    function withdrawSingleByLiquidity(\r\n        uint256 i,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external returns (uint256 usdAmount, uint256 amount);\r\n\r\n    function withdrawSingleByExchange(\r\n        uint256 i,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external returns (uint256 usdAmount, uint256 amount);\r\n\r\n    function invest(uint256 whaleDepositAmount, uint256[3] calldata delta) external returns (uint256 dollarAmount);\r\n\r\n    function getBuoy() external view returns (address);\r\n\r\n    function investSingle(\r\n        uint256[3] calldata inAmounts,\r\n        uint256 i,\r\n        uint256 j\r\n    ) external returns (uint256 dollarAmount);\r\n\r\n    function investToCurveVaultTrigger() external view returns (bool _invest);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPnL {\r\n    function calcPnL() external view returns (uint256, uint256);\r\n\r\n    function increaseGTokenLastAmount(bool pwrd, uint256 dollarAmount) external;\r\n\r\n    function decreaseGTokenLastAmount(\r\n        bool pwrd,\r\n        uint256 dollarAmount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function lastGvtAssets() external view returns (uint256);\r\n\r\n    function lastPwrdAssets() external view returns (uint256);\r\n\r\n    function utilisationRatio() external view returns (uint256);\r\n\r\n    function emergencyPnL() external;\r\n\r\n    function recover() external;\r\n\r\n    function distributeStrategyGainLoss(\r\n        uint256 gain,\r\n        uint256 loss,\r\n        address reward\r\n    ) external;\r\n\r\n    function distributePriceChange(uint256 currentTotalAssets) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Controller is Pausable, Ownable, Whitelist, FixedStablecoins, FixedGTokens, IController {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address public override curveVault; \r\n\r\n    bool public preventSmartContracts;\r\n    bool public override emergencyState;\r\n    bool public pendingOwnershipRemoval;\r\n\r\n    address public override insurance; \r\n    address public override pnl; \r\n    address public override lifeGuard; \r\n    address public override buoy; \r\n    address public override depositHandler;\r\n    address public override withdrawHandler;\r\n    address public override emergencyHandler;\r\n\r\n    uint256 public override deadCoin = N_COINS;\r\n\r\n    \r\n    uint256 public utilisationRatioLimitGvt;\r\n    uint256 public utilisationRatioLimitPwrd;\r\n\r\n    uint256 public bigFishThreshold = 100; \r\n    uint256 public bigFishAbsoluteThreshold = 0; \r\n    address public override reward;\r\n    address public pendingOwner;\r\n\r\n    mapping(address => bool) public safeAddresses; \r\n    mapping(uint256 => address) public override underlyingVaults; \r\n    mapping(address => uint256) public vaultIndexes;\r\n\r\n    mapping(address => address) public override referrals;\r\n\r\n    \r\n    mapping(bool => uint256) public override withdrawalFee;\r\n\r\n    event LogNewWithdrawHandler(address withdrawHandler, address emergencyHandler);\r\n    event LogNewDepositHandler(address tokens);\r\n    event LogNewVault(uint256 index, address vault);\r\n    event LogNewCurveVault(address curveVault);\r\n    event LogNewLifeguard(address lifeguard);\r\n    event LogNewInsurance(address insurance);\r\n    event LogNewPnl(address pnl);\r\n    event LogNewBigFishThreshold(uint256 percent, uint256 absolute);\r\n    event LogEoaOnly(bool status);\r\n    event LogUpdateSafeAddress(address account, bool status);\r\n    event LogNewRewardsContract(address reward);\r\n    event LogNewUtilLimit(bool indexed pwrd, uint256 limit);\r\n    event LogNewCurveToStableDistribution(uint256 amount, uint256[N_COINS] amounts, uint256[N_COINS] delta);\r\n    event LogNewWithdrawalFee(address user, bool pwrd, uint256 newFee);\r\n    event LogNewPendingOwnershipRemoval(bool status);\r\n    event LogNewPendingOwnershipChange(address pendingOwner);\r\n    event LogContractRetired(address owner);\r\n\r\n    constructor(\r\n        address pwrd,\r\n        address gvt,\r\n        address[N_COINS] memory _tokens,\r\n        uint256[N_COINS] memory _decimals\r\n    ) public FixedStablecoins(_tokens, _decimals) FixedGTokens(pwrd, gvt) {}\r\n\r\n    function pause() external onlyWhitelist {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function prepareRenounceOwnership(bool status) external onlyOwner {\r\n        require(pendingOwnershipRemoval != status, \"prepareRenounceOwnership: status\");\r\n        emit LogNewPendingOwnershipRemoval(status);\r\n        pendingOwnershipRemoval = status;\r\n    }\r\n\r\n    function renounceOwnership() public override onlyOwner {\r\n        require(pendingOwnershipRemoval, \"renounceOwnership: !pendingOwnershipRemoval\");\r\n        insurance = address(0);\r\n        pnl = address(0);\r\n        lifeGuard = address(0);\r\n        buoy = address(0);\r\n        depositHandler = address(0);\r\n        withdrawHandler = address(0);\r\n        emergencyHandler = address(0);\r\n        pendingOwnershipRemoval = false;\r\n        address lastOwner = owner();\r\n        super.renounceOwnership();\r\n        emit LogContractRetired(lastOwner);\r\n    }\r\n\r\n    function prepareTransferOwnership(address newOwner) external onlyOwner {\r\n        emit LogNewPendingOwnershipChange(newOwner);\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public override onlyOwner {\r\n        require(pendingOwner != address(0), \"transferOwnership: 0x\");\r\n        super.transferOwnership(pendingOwner);\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    function setWithdrawHandler(address _withdrawHandler, address _emergencyHandler) external onlyOwner {\r\n        require(_withdrawHandler != address(0) && _emergencyHandler != address(0), \"setWithdrawHandler: 0x\");\r\n        withdrawHandler = _withdrawHandler;\r\n        emergencyHandler = _emergencyHandler;\r\n        emit LogNewWithdrawHandler(_withdrawHandler, _emergencyHandler);\r\n    }\r\n\r\n    function setDepositHandler(address _depositHandler) external onlyOwner {\r\n        require(_depositHandler != address(0), \"setDepositHandler: 0x\");\r\n        depositHandler = _depositHandler;\r\n        emit LogNewDepositHandler(_depositHandler);\r\n    }\r\n\r\n    function stablecoins() external view override returns (address[N_COINS] memory) {\r\n        return underlyingTokens();\r\n    }\r\n\r\n    function getSkimPercent() external view override returns (uint256) {\r\n        return IInsurance(insurance).calcSkim();\r\n    }\r\n\r\n    function vaults() external view override returns (address[N_COINS] memory) {\r\n        address[N_COINS] memory result;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            result[i] = underlyingVaults[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function setVault(uint256 index, address vault) external onlyOwner {\r\n        require(vault != address(0), \"setVault: 0x\");\r\n        require(index < N_COINS, \"setVault: !index\");\r\n        underlyingVaults[index] = vault;\r\n        vaultIndexes[vault] = index + 1;\r\n        emit LogNewVault(index, vault);\r\n    }\r\n\r\n    function setCurveVault(address _curveVault) external onlyOwner {\r\n        require(_curveVault != address(0), \"setCurveVault: 0x\");\r\n        curveVault = _curveVault;\r\n        vaultIndexes[_curveVault] = N_COINS + 1;\r\n        emit LogNewCurveVault(_curveVault);\r\n    }\r\n\r\n    function setLifeGuard(address _lifeGuard) external onlyOwner {\r\n        require(_lifeGuard != address(0), \"setLifeGuard: 0x\");\r\n        lifeGuard = _lifeGuard;\r\n        buoy = ILifeGuard(_lifeGuard).getBuoy();\r\n        emit LogNewLifeguard(_lifeGuard);\r\n    }\r\n\r\n    function setInsurance(address _insurance) external onlyOwner {\r\n        require(_insurance != address(0), \"setInsurance: 0x\");\r\n        insurance = _insurance;\r\n        emit LogNewInsurance(_insurance);\r\n    }\r\n\r\n    function setPnL(address _pnl) external onlyOwner {\r\n        require(_pnl != address(0), \"setPnl: 0x\");\r\n        pnl = _pnl;\r\n        emit LogNewPnl(_pnl);\r\n    }\r\n\r\n    function updateSafeAddress(address account, bool status) external onlyOwner {\r\n        safeAddresses[account] = status;\r\n        emit LogUpdateSafeAddress(account, status);\r\n    }\r\n\r\n    function switchEoaOnly(bool check) external onlyOwner {\r\n        preventSmartContracts = check;\r\n        emit LogEoaOnly(check);\r\n    }\r\n\r\n    function setBigFishThreshold(uint256 _percent, uint256 _absolute) external onlyOwner {\r\n        require(_percent > 0, \"_whaleLimit is 0\");\r\n        bigFishThreshold = _percent;\r\n        bigFishAbsoluteThreshold = _absolute;\r\n        emit LogNewBigFishThreshold(_percent, _absolute);\r\n    }\r\n\r\n    function setReward(address _reward) external onlyOwner {\r\n        require(_reward != address(0), \"setReward: 0x\");\r\n        reward = _reward;\r\n        emit LogNewRewardsContract(_reward);\r\n    }\r\n\r\n    function addReferral(address account, address referral) external override {\r\n        require(msg.sender == depositHandler, \"!depositHandler\");\r\n        if (referral != address(0) && referrals[account] == address(0)) {\r\n            referrals[account] = referral;\r\n        }\r\n    }\r\n\r\n    function setWithdrawalFee(bool pwrd, uint256 newFee) external onlyOwner {\r\n        withdrawalFee[pwrd] = newFee;\r\n        emit LogNewWithdrawalFee(msg.sender, pwrd, newFee);\r\n    }\r\n\r\n    function totalAssets() external view override returns (uint256) {\r\n        return emergencyState ? _totalAssetsEmergency() : _totalAssets();\r\n    }\r\n\r\n    function gTokenTotalAssets() public view override returns (uint256) {\r\n        (uint256 gvtAssets, uint256 pwrdAssets) = IPnL(pnl).calcPnL();\r\n        if (msg.sender == address(gvt)) {\r\n            return gvtAssets;\r\n        }\r\n        if (msg.sender == address(pwrd)) {\r\n            return pwrdAssets;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function gToken(bool isPWRD) external view override returns (address) {\r\n        return isPWRD ? address(pwrd) : address(gvt);\r\n    }\r\n\r\n    function isValidBigFish(\r\n        bool pwrd,\r\n        bool deposit,\r\n        uint256 amount\r\n    ) external view override returns (bool) {\r\n        if (deposit && pwrd) {\r\n            require(validGTokenIncrease(amount), \"isBigFish: !validGTokenIncrease\");\r\n        } else if (!pwrd && !deposit) {\r\n            require(_validGTokenDecrease(amount), \"isBigFish: !validGTokenDecrease\");\r\n        }\r\n        if (amount < bigFishAbsoluteThreshold) {\r\n            return false;\r\n        } else {\r\n            (uint256 gvtAssets, uint256 pwrdAssets) = IPnL(pnl).calcPnL();\r\n            uint256 assets = pwrdAssets.add(gvtAssets);\r\n            if (amount > assets) {\r\n                return true;\r\n            } else {\r\n                return amount > assets.mul(bigFishThreshold).div(PERCENTAGE_DECIMAL_FACTOR);\r\n            }\r\n        }\r\n    }\r\n\r\n    function distributeCurveAssets(uint256 amount, uint256[N_COINS] memory delta) external onlyWhitelist {\r\n        uint256[N_COINS] memory amounts = ILifeGuard(lifeGuard).distributeCurveVault(amount, delta);\r\n        emit LogNewCurveToStableDistribution(amount, amounts, delta);\r\n    }\r\n\r\n    function eoaOnly(address sender) external override {\r\n        if (preventSmartContracts && !safeAddresses[tx.origin]) {\r\n            require(sender == tx.origin, \"EOA only\");\r\n        }\r\n    }\r\n\r\n    function _totalAssets() private view returns (uint256) {\r\n        require(IBuoy(buoy).safetyCheck(), \"!buoy.safetyCheck\");\r\n        uint256[N_COINS] memory lgAssets = ILifeGuard(lifeGuard).getAssets();\r\n        uint256[N_COINS] memory vaultAssets;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            vaultAssets[i] = lgAssets[i].add(IVault(underlyingVaults[i]).totalAssets());\r\n        }\r\n        uint256 totalLp = IVault(curveVault).totalAssets();\r\n        totalLp = totalLp.add(IBuoy(buoy).stableToLp(vaultAssets, true));\r\n        uint256 vp = IBuoy(buoy).getVirtualPrice();\r\n\r\n        return totalLp.mul(vp).div(DEFAULT_DECIMALS_FACTOR);\r\n    }\r\n\r\n    function _totalAssetsEmergency() private view returns (uint256) {\r\n        IChainPrice chainPrice = IChainPrice(buoy);\r\n        uint256 total;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            if (i != deadCoin) {\r\n                address tokenAddress = getToken(i);\r\n                uint256 decimals = getDecimal(i);\r\n                IERC20 token = IERC20(tokenAddress);\r\n                uint256 price = chainPrice.getPriceFeed(i);\r\n                uint256 assets = IVault(underlyingVaults[i]).totalAssets().add(token.balanceOf(lifeGuard));\r\n                assets = assets.mul(price).div(CHAINLINK_PRICE_DECIMAL_FACTOR);\r\n                assets = assets.mul(DEFAULT_DECIMALS_FACTOR).div(decimals);\r\n                total = total.add(assets);\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function emergency(uint256 coin) external onlyWhitelist {\r\n        require(coin <= N_COINS, \"invalid coin\");\r\n        if (!paused()) {\r\n            _pause();\r\n        }\r\n        emergencyState = true;\r\n\r\n        if (coin < N_COINS) {\r\n            uint256[N_COINS] memory percents;\r\n            percents[coin] = PERCENTAGE_DECIMAL_FACTOR;\r\n            IInsurance(insurance).setUnderlyingTokenPercents(percents);\r\n            deadCoin = coin;\r\n        }\r\n\r\n        IPnL(pnl).emergencyPnL();\r\n    }\r\n\r\n    function restart(uint256[N_COINS] calldata allocations) external onlyOwner whenPaused {\r\n        _unpause();\r\n        deadCoin = N_COINS;\r\n        emergencyState = false;\r\n\r\n        IInsurance(insurance).setUnderlyingTokenPercents(allocations);\r\n        IPnL(pnl).recover();\r\n    }\r\n\r\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external override {\r\n        uint256 index = vaultIndexes[msg.sender];\r\n        require(index > 0 && index <= N_COINS + 1, \"!VaultAdaptor\");\r\n        IPnL ipnl = IPnL(pnl);\r\n        IBuoy ibuoy = IBuoy(buoy);\r\n        uint256 gainUsd;\r\n        uint256 lossUsd;\r\n        index = index - 1;\r\n        if (index < N_COINS) {\r\n            if (gain > 0) {\r\n                gainUsd = ibuoy.singleStableToUsd(gain, index);\r\n            } else if (loss > 0) {\r\n                lossUsd = ibuoy.singleStableToUsd(loss, index);\r\n            }\r\n        } else {\r\n            if (gain > 0) {\r\n                gainUsd = ibuoy.lpToUsd(gain);\r\n            } else if (loss > 0) {\r\n                lossUsd = ibuoy.lpToUsd(loss);\r\n            }\r\n        }\r\n        ipnl.distributeStrategyGainLoss(gainUsd, lossUsd, reward);\r\n        \r\n        if (ibuoy.updateRatios()) {\r\n            \r\n            ipnl.distributePriceChange(_totalAssets());\r\n        }\r\n    }\r\n\r\n    function realizePriceChange(uint256 tolerance) external onlyOwner {\r\n        IPnL ipnl = IPnL(pnl);\r\n        IBuoy ibuoy = IBuoy(buoy);\r\n        if (emergencyState) {\r\n            ipnl.distributePriceChange(_totalAssetsEmergency());\r\n        } else {\r\n            \r\n            if (ibuoy.updateRatiosWithTolerance(tolerance)) {\r\n                \r\n                ipnl.distributePriceChange(_totalAssets());\r\n            }\r\n        }\r\n    }\r\n\r\n    function burnGToken(\r\n        bool pwrd,\r\n        bool all,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 bonus\r\n    ) external override {\r\n        require(\r\n            msg.sender == withdrawHandler || msg.sender == emergencyHandler,\r\n            \"burnGToken: !withdrawHandler|emergencyHandler\"\r\n        );\r\n        IToken gt = gTokens(pwrd);\r\n        if (!all) {\r\n            gt.burn(account, gt.factor(), amount);\r\n        } else {\r\n            gt.burnAll(account);\r\n        }\r\n        \r\n        IPnL(pnl).decreaseGTokenLastAmount(pwrd, amount, bonus);\r\n    }\r\n\r\n    function mintGToken(\r\n        bool pwrd,\r\n        address account,\r\n        uint256 amount\r\n    ) external override {\r\n        require(msg.sender == depositHandler, \"burnGToken: !depositHandler\");\r\n        IToken gt = gTokens(pwrd);\r\n        gt.mint(account, gt.factor(), amount);\r\n        IPnL(pnl).increaseGTokenLastAmount(pwrd, amount);\r\n    }\r\n\r\n    function getUserAssets(bool pwrd, address account) external view override returns (uint256 deductUsd) {\r\n        IToken gt = gTokens(pwrd);\r\n        deductUsd = gt.getAssets(account);\r\n        require(deductUsd > 0, \"!minAmount\");\r\n    }\r\n\r\n    function validGTokenIncrease(uint256 amount) private view returns (bool) {\r\n        return\r\n            gTokens(false).totalAssets().mul(utilisationRatioLimitPwrd).div(PERCENTAGE_DECIMAL_FACTOR) >=\r\n            amount.add(gTokens(true).totalAssets());\r\n    }\r\n\r\n    function _validGTokenDecrease(uint256 amount) private view returns (bool) {\r\n        return\r\n            gTokens(false).totalAssets().sub(amount).mul(utilisationRatioLimitGvt).div(PERCENTAGE_DECIMAL_FACTOR) >=\r\n            gTokens(true).totalAssets();\r\n    }\r\n\r\n    function validGTokenDecrease(uint256 amount) external view override returns (bool) {\r\n        return _validGTokenDecrease(amount);\r\n    }\r\n\r\n    function setUtilisationRatioLimitPwrd(uint256 _utilisationRatioLimitPwrd) external onlyOwner {\r\n        utilisationRatioLimitPwrd = _utilisationRatioLimitPwrd;\r\n        emit LogNewUtilLimit(true, _utilisationRatioLimitPwrd);\r\n    }\r\n\r\n    function setUtilisationRatioLimitGvt(uint256 _utilisationRatioLimitGvt) external onlyOwner {\r\n        utilisationRatioLimitGvt = _utilisationRatioLimitGvt;\r\n        emit LogNewUtilLimit(false, _utilisationRatioLimitGvt);\r\n    }\r\n\r\n    function getStrategiesTargetRatio() external view override returns (uint256[] memory) {\r\n        uint256 utilRatio = IPnL(pnl).utilisationRatio();\r\n        return IInsurance(insurance).getStrategiesTargetRatio(utilRatio);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pwrd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gvt\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_tokens\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_decimals\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogAddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogContractRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogEoaOnly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"absolute\",\"type\":\"uint256\"}],\"name\":\"LogNewBigFishThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"delta\",\"type\":\"uint256[3]\"}],\"name\":\"LogNewCurveToStableDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curveVault\",\"type\":\"address\"}],\"name\":\"LogNewCurveVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokens\",\"type\":\"address\"}],\"name\":\"LogNewDepositHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insurance\",\"type\":\"address\"}],\"name\":\"LogNewInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lifeguard\",\"type\":\"address\"}],\"name\":\"LogNewLifeguard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"LogNewPendingOwnershipChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogNewPendingOwnershipRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pnl\",\"type\":\"address\"}],\"name\":\"LogNewPnl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"LogNewRewardsContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"LogNewUtilLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"LogNewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"emergencyHandler\",\"type\":\"address\"}],\"name\":\"LogNewWithdrawHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"LogNewWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogRemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogUpdateSafeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bigFishAbsoluteThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bigFishThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buoy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"all\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"burnGToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"delta\",\"type\":\"uint256[3]\"}],\"name\":\"distributeCurveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"distributeStrategyGainLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"eoaOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPWRD\",\"type\":\"bool\"}],\"name\":\"gToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gTokenTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSkimPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategiesTargetRatio\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deductUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gvt\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isValidBigFish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lifeGuard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintGToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwnershipRemoval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pnl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"prepareRenounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"prepareTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preventSmartContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pwrd\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tolerance\",\"type\":\"uint256\"}],\"name\":\"realizePriceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"allocations\",\"type\":\"uint256[3]\"}],\"name\":\"restart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_absolute\",\"type\":\"uint256\"}],\"name\":\"setBigFishThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveVault\",\"type\":\"address\"}],\"name\":\"setCurveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositHandler\",\"type\":\"address\"}],\"name\":\"setDepositHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurance\",\"type\":\"address\"}],\"name\":\"setInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lifeGuard\",\"type\":\"address\"}],\"name\":\"setLifeGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pnl\",\"type\":\"address\"}],\"name\":\"setPnL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilisationRatioLimitGvt\",\"type\":\"uint256\"}],\"name\":\"setUtilisationRatioLimitGvt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilisationRatioLimitPwrd\",\"type\":\"uint256\"}],\"name\":\"setUtilisationRatioLimitPwrd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergencyHandler\",\"type\":\"address\"}],\"name\":\"setWithdrawHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"name\":\"switchEoaOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSafeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilisationRatioLimitGvt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilisationRatioLimitPwrd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"validGTokenDecrease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0a93d4994b3d98fb5e3a2f90dbc2d69073cb86b0000000000000000000000003adb04e127b9c0a5d36094125669d4603ac52a0c0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f4240","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d5d433f11c5d2a652dabe274dfd55fe9dca28b9888fe79fce527c20a241260e"}]}