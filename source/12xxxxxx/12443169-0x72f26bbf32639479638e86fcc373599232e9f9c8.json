{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\n    with the addition of a transfer function to send eth or an erc20 token\r\n*/\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(\r\n        address token,\r\n        address payable to,\r\n        uint256 value,\r\n        bool isERC20\r\n    ) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(\r\n                abi.encodeWithSelector(0xa9059cbb, to, value)\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"TransferHelper: TRANSFER_FAILED\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPresaleLockForwarder {\r\n    function lockLiquidity(\r\n        IERC20 _baseToken,\r\n        IERC20 _saleToken,\r\n        uint256 _baseAmount,\r\n        uint256 _saleAmount,\r\n        uint256 _unlock_date,\r\n        address payable _withdrawer\r\n    ) external;\r\n\r\n    function uniswapPairIsInitialised(address token0, address token1)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IPresaleSettings {\r\n    function getMaxPresaleLength() external view returns (uint256);\r\n\r\n    function getBaseFee() external view returns (uint256);\r\n\r\n    function getTokenFee() external view returns (uint256);\r\n\r\n    function getEthAddress() external view returns (address payable);\r\n\r\n    function getTokenAddress() external view returns (address payable);\r\n\r\n    function getEthCreationFee() external view returns (uint256);\r\n}\r\n\r\ncontract Presale01 is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct PresaleInfo {\r\n        address payable PRESALE_OWNER;\r\n        IERC20 S_TOKEN; // sale token\r\n        IERC20 B_TOKEN; // base token // usually WETH (ETH)\r\n        uint256 TOKEN_PRICE; // 1 base token = ? s_tokens, fixed price\r\n        uint256 MAX_SPEND_PER_BUYER; // maximum base token BUY amount per account\r\n        uint256 MIN_SPEND_PER_BUYER; // maximum base token BUY amount per account\r\n        uint256 AMOUNT; // the amount of presale tokens up for presale\r\n        uint256 HARDCAP;\r\n        uint256 SOFTCAP;\r\n        uint256 LIQUIDITY_PERCENT; // divided by 1000\r\n        uint256 LISTING_RATE; // fixed rate at which the token will list on uniswap\r\n        uint256 START_BLOCK;\r\n        uint256 END_BLOCK;\r\n        uint256 LOCK_PERIOD; // unix timestamp -> e.g. 2 weeks\r\n        uint256 UNISWAP_LISTING_TIME;\r\n        bool PRESALE_IN_ETH; // if this flag is true the presale is raising ETH, otherwise an ERC20 token such as DAI\r\n    }\r\n\r\n    struct PresaleFeeInfo {\r\n        uint256 DAOLAUNCH_BASE_FEE; // divided by 1000\r\n        uint256 DAOLAUNCH_TOKEN_FEE; // divided by 1000\r\n        address payable BASE_FEE_ADDRESS;\r\n        address payable TOKEN_FEE_ADDRESS;\r\n    }\r\n\r\n    struct PresaleStatus {\r\n        bool WHITELIST_ONLY; // if set to true only whitelisted members may participate\r\n        bool LIST_ON_UNISWAP;\r\n        bool IS_TRANSFERED_FEE;\r\n        bool IS_OWNER_WITHDRAWN;\r\n        bool IS_TRANSFERED_DAOLAUNCH_FEE;\r\n        uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\r\n        uint256 TOTAL_TOKENS_SOLD; // total presale tokens sold\r\n        uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful presale\r\n        uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on presale failure\r\n        uint256 NUM_BUYERS; // number of unique participants\r\n    }\r\n\r\n    struct BuyerInfo {\r\n        uint256 baseDeposited; // total base token (usually ETH) deposited by user, can be withdrawn on presale failure\r\n        uint256 tokensOwed; // num presale tokens a user is owed, can be withdrawn on presale success\r\n        bool isWithdrawn;\r\n    }\r\n\r\n    struct GasLimit {\r\n        uint256 transferDAOLaunchFee;\r\n        uint256 listOnUniswap;\r\n    }\r\n\r\n    PresaleInfo private PRESALE_INFO;\r\n    PresaleFeeInfo public PRESALE_FEE_INFO;\r\n    PresaleStatus public STATUS;\r\n    address public PRESALE_GENERATOR;\r\n    IPresaleLockForwarder public PRESALE_LOCK_FORWARDER;\r\n    IPresaleSettings public PRESALE_SETTINGS;\r\n    IUniswapV2Factory public UNI_FACTORY;\r\n    IWETH public WETH;\r\n    mapping(address => BuyerInfo) public BUYERS;\r\n    EnumerableSet.AddressSet private WHITELIST;\r\n    address payable public CALLER;\r\n    GasLimit public GAS_LIMIT;\r\n    address payable public DAOLAUNCH_DEV;\r\n\r\n    constructor(address _presaleGenerator) public payable {\r\n        PRESALE_GENERATOR = _presaleGenerator;\r\n        UNI_FACTORY = IUniswapV2Factory(\r\n            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n        );\r\n        WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        PRESALE_SETTINGS = IPresaleSettings(\r\n            0xaBAE64D9d205d0467F7cA03aA1cd133EAd41873c\r\n        );\r\n        PRESALE_LOCK_FORWARDER = IPresaleLockForwarder(\r\n            0xE95f84F19710BeD43003e79d9ed2504E9410ed45\r\n        );\r\n        GAS_LIMIT = GasLimit(100000, 4000000);\r\n        DAOLAUNCH_DEV = payable(0xE582244c3D167CFE9499b3CDA503E26CaE812E4E);\r\n    }\r\n\r\n    function init1(\r\n        address payable _presaleOwner,\r\n        uint256 _amount,\r\n        uint256 _tokenPrice,\r\n        uint256 _maxEthPerBuyer,\r\n        uint256 _minEthPerBuyer,\r\n        uint256 _hardcap,\r\n        uint256 _softcap,\r\n        uint256 _liquidityPercent,\r\n        uint256 _listingRate,\r\n        uint256 _startblock,\r\n        uint256 _endblock,\r\n        uint256 _lockPeriod\r\n    ) external {\r\n        require(msg.sender == PRESALE_GENERATOR, \"FORBIDDEN\");\r\n        PRESALE_INFO.PRESALE_OWNER = _presaleOwner;\r\n        PRESALE_INFO.AMOUNT = _amount;\r\n        PRESALE_INFO.TOKEN_PRICE = _tokenPrice;\r\n        PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxEthPerBuyer;\r\n        PRESALE_INFO.MIN_SPEND_PER_BUYER = _minEthPerBuyer;\r\n        PRESALE_INFO.HARDCAP = _hardcap;\r\n        PRESALE_INFO.SOFTCAP = _softcap;\r\n        PRESALE_INFO.LIQUIDITY_PERCENT = _liquidityPercent;\r\n        PRESALE_INFO.LISTING_RATE = _listingRate;\r\n        PRESALE_INFO.START_BLOCK = _startblock;\r\n        PRESALE_INFO.END_BLOCK = _endblock;\r\n        PRESALE_INFO.LOCK_PERIOD = _lockPeriod;\r\n    }\r\n\r\n    function init2(\r\n        IERC20 _baseToken,\r\n        IERC20 _presaleToken,\r\n        uint256 _DAOLaunchBaseFee,\r\n        uint256 _DAOLaunchTokenFee,\r\n        uint256 _uniswapListingTime,\r\n        address payable _baseFeeAddress,\r\n        address payable _tokenFeeAddress\r\n    ) external {\r\n        require(msg.sender == PRESALE_GENERATOR, \"FORBIDDEN\");\r\n\r\n        PRESALE_INFO.PRESALE_IN_ETH = address(_baseToken) == address(WETH);\r\n        PRESALE_INFO.S_TOKEN = _presaleToken;\r\n        PRESALE_INFO.B_TOKEN = _baseToken;\r\n        PRESALE_INFO.UNISWAP_LISTING_TIME = _uniswapListingTime;\r\n        PRESALE_FEE_INFO.DAOLAUNCH_BASE_FEE = _DAOLaunchBaseFee;\r\n        PRESALE_FEE_INFO.DAOLAUNCH_TOKEN_FEE = _DAOLaunchTokenFee;\r\n\r\n        PRESALE_FEE_INFO.BASE_FEE_ADDRESS = _baseFeeAddress;\r\n        PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\r\n    }\r\n\r\n    function init3(address[] memory _white_list, address payable _caller)\r\n        external\r\n    {\r\n        require(msg.sender == PRESALE_GENERATOR, \"FORBIDDEN\");\r\n        if (_white_list.length > 0) STATUS.WHITELIST_ONLY = true;\r\n\r\n        for (uint256 i = 0; i < _white_list.length; i++) {\r\n            WHITELIST.add(_white_list[i]);\r\n        }\r\n\r\n        CALLER = _caller;\r\n    }\r\n\r\n    modifier onlyPresaleOwner() {\r\n        require(PRESALE_INFO.PRESALE_OWNER == msg.sender, \"NOT PRESALE OWNER\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(CALLER == msg.sender, \"NOT PRESALE CALLER\");\r\n        _;\r\n    }\r\n\r\n    function presaleStatus() public view returns (uint256) {\r\n        if (\r\n            (block.number > PRESALE_INFO.END_BLOCK) &&\r\n            (STATUS.TOTAL_BASE_COLLECTED < PRESALE_INFO.SOFTCAP)\r\n        ) {\r\n            return 3; // FAILED - softcap not met by end block\r\n        }\r\n        if (STATUS.TOTAL_BASE_COLLECTED >= PRESALE_INFO.HARDCAP) {\r\n            return 2; // SUCCESS - hardcap met\r\n        }\r\n        if (\r\n            (block.number > PRESALE_INFO.END_BLOCK) &&\r\n            (STATUS.TOTAL_BASE_COLLECTED >= PRESALE_INFO.SOFTCAP)\r\n        ) {\r\n            return 2; // SUCCESS - endblock and soft cap reached\r\n        }\r\n        if (\r\n            (block.number >= PRESALE_INFO.START_BLOCK) &&\r\n            (block.number <= PRESALE_INFO.END_BLOCK)\r\n        ) {\r\n            return 1; // ACTIVE - deposits enabled\r\n        }\r\n        return 0; // QUED - awaiting start block\r\n    }\r\n\r\n    // accepts msg.value for eth or _amount for ERC20 tokens\r\n    function userDeposit(uint256 _amount) external payable nonReentrant {\r\n        require(presaleStatus() == 1, \"NOT ACTIVE\"); // ACTIVE\r\n        if (STATUS.WHITELIST_ONLY) {\r\n            require(WHITELIST.contains(msg.sender), \"NOT WHITELISTED\");\r\n        }\r\n\r\n        BuyerInfo storage buyer = BUYERS[msg.sender];\r\n        uint256 amount_in = PRESALE_INFO.PRESALE_IN_ETH ? msg.value : _amount;\r\n        require(\r\n            amount_in >= PRESALE_INFO.MIN_SPEND_PER_BUYER,\r\n            \"NOT ENOUGH VALUE\"\r\n        );\r\n        uint256 allowance = PRESALE_INFO.MAX_SPEND_PER_BUYER.sub(\r\n            buyer.baseDeposited\r\n        );\r\n        uint256 remaining = PRESALE_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\r\n        allowance = allowance > remaining ? remaining : allowance;\r\n        if (amount_in > allowance) {\r\n            amount_in = allowance;\r\n        }\r\n        uint256 tokensSold = amount_in.mul(PRESALE_INFO.TOKEN_PRICE).div(\r\n            10**uint256(PRESALE_INFO.B_TOKEN.decimals())\r\n        );\r\n        require(tokensSold > 0, \"ZERO TOKENS\");\r\n        if (buyer.baseDeposited == 0) {\r\n            STATUS.NUM_BUYERS++;\r\n        }\r\n        buyer.baseDeposited = buyer.baseDeposited.add(amount_in);\r\n        buyer.tokensOwed = buyer.tokensOwed.add(tokensSold);\r\n        STATUS.TOTAL_BASE_COLLECTED = STATUS.TOTAL_BASE_COLLECTED.add(\r\n            amount_in\r\n        );\r\n        STATUS.TOTAL_TOKENS_SOLD = STATUS.TOTAL_TOKENS_SOLD.add(tokensSold);\r\n\r\n        // return unused ETH\r\n        if (PRESALE_INFO.PRESALE_IN_ETH && amount_in < msg.value) {\r\n            msg.sender.transfer(msg.value.sub(amount_in));\r\n        }\r\n        // deduct non ETH token from user\r\n        if (!PRESALE_INFO.PRESALE_IN_ETH) {\r\n            TransferHelper.safeTransferFrom(\r\n                address(PRESALE_INFO.B_TOKEN),\r\n                msg.sender,\r\n                address(this),\r\n                amount_in\r\n            );\r\n        }\r\n    }\r\n\r\n    // withdraw presale tokens\r\n    // percentile withdrawls allows fee on transfer or rebasing tokens to still work\r\n    function userWithdrawTokens() external nonReentrant {\r\n        require(presaleStatus() == 2, \"NOT SUCCESS\"); // SUCCESS\r\n        require(\r\n            STATUS.TOTAL_TOKENS_SOLD.sub(STATUS.TOTAL_TOKENS_WITHDRAWN) > 0,\r\n            \"ALL TOKEN HAS BEEN WITHDRAWN\"\r\n        );\r\n\r\n        BuyerInfo storage buyer = BUYERS[msg.sender];\r\n\r\n        require(!buyer.isWithdrawn, \"NOTHING TO WITHDRAW\");\r\n        uint256 tokensOwed = buyer.tokensOwed;\r\n\r\n        STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(\r\n            tokensOwed\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            address(PRESALE_INFO.S_TOKEN),\r\n            msg.sender,\r\n            tokensOwed\r\n        );\r\n        buyer.isWithdrawn = true;\r\n    }\r\n\r\n    // on presale failure\r\n    // percentile withdrawls allows fee on transfer or rebasing tokens to still work\r\n    function userWithdrawBaseTokens() external nonReentrant {\r\n        require(presaleStatus() == 3, \"NOT FAILED\"); // FAILED\r\n        BuyerInfo storage buyer = BUYERS[msg.sender];\r\n        require(!buyer.isWithdrawn, \"NOTHING TO REFUND\");\r\n\r\n        STATUS.TOTAL_BASE_WITHDRAWN = STATUS.TOTAL_BASE_WITHDRAWN.add(\r\n            buyer.baseDeposited\r\n        );\r\n        TransferHelper.safeTransferBaseToken(\r\n            address(PRESALE_INFO.B_TOKEN),\r\n            msg.sender,\r\n            buyer.baseDeposited,\r\n            !PRESALE_INFO.PRESALE_IN_ETH\r\n        );\r\n        buyer.isWithdrawn = true;\r\n    }\r\n\r\n    // on presale failure\r\n    // allows the owner to withdraw the tokens they sent for presale & initial liquidity\r\n    function ownerRefundTokens() external onlyPresaleOwner {\r\n        require(presaleStatus() == 3); // FAILED\r\n        require(!STATUS.IS_OWNER_WITHDRAWN, \"NOTHING TO WITHDRAW\");\r\n        TransferHelper.safeTransfer(\r\n            address(PRESALE_INFO.S_TOKEN),\r\n            PRESALE_INFO.PRESALE_OWNER,\r\n            PRESALE_INFO.S_TOKEN.balanceOf(address(this))\r\n        );\r\n        STATUS.IS_OWNER_WITHDRAWN = true;\r\n    }\r\n\r\n    // on presale success, this is the final step to end the presale, lock liquidity and enable withdrawls of the sale token.\r\n    // This function does not use percentile distribution. Rebasing mechanisms, fee on transfers, or any deflationary logic\r\n    // are not taken into account at this stage to ensure stated liquidity is locked and the pool is initialised according to\r\n    // the presale parameters and fixed prices.\r\n\r\n    function listOnUniswap() external onlyCaller {\r\n        require(\r\n            block.number >= PRESALE_INFO.UNISWAP_LISTING_TIME,\r\n            \"Call listOnUniswap too early\"\r\n        );\r\n        require(presaleStatus() == 2, \"NOT SUCCESS\"); // SUCCESS\r\n        require(!STATUS.IS_TRANSFERED_FEE, \"TRANSFERED FEE\");\r\n\r\n        uint256 DAOLaunchBaseFee = STATUS\r\n            .TOTAL_BASE_COLLECTED\r\n            .mul(PRESALE_FEE_INFO.DAOLAUNCH_BASE_FEE)\r\n            .div(1000);\r\n        // base token liquidity\r\n        uint256 baseLiquidity = STATUS\r\n            .TOTAL_BASE_COLLECTED\r\n            .sub(DAOLaunchBaseFee)\r\n            .mul(PRESALE_INFO.LIQUIDITY_PERCENT)\r\n            .div(1000);\r\n        if (PRESALE_INFO.PRESALE_IN_ETH) {\r\n            WETH.deposit{value: baseLiquidity}();\r\n        }\r\n        TransferHelper.safeApprove(\r\n            address(PRESALE_INFO.B_TOKEN),\r\n            address(PRESALE_LOCK_FORWARDER),\r\n            baseLiquidity\r\n        );\r\n\r\n        // // sale token liquidity\r\n        uint256 tokenLiquidity = baseLiquidity\r\n            .mul(PRESALE_INFO.LISTING_RATE)\r\n            .div(10**uint256(PRESALE_INFO.B_TOKEN.decimals()));\r\n\r\n        // transfer fees\r\n        uint256 DAOLaunchTokenFee = STATUS\r\n            .TOTAL_TOKENS_SOLD\r\n            .mul(PRESALE_FEE_INFO.DAOLAUNCH_TOKEN_FEE)\r\n            .div(1000);\r\n        if (DAOLaunchBaseFee > 0) {\r\n            TransferHelper.safeTransferBaseToken(\r\n                address(PRESALE_INFO.B_TOKEN),\r\n                PRESALE_FEE_INFO.BASE_FEE_ADDRESS,\r\n                DAOLaunchBaseFee,\r\n                !PRESALE_INFO.PRESALE_IN_ETH\r\n            );\r\n        }\r\n        if (DAOLaunchTokenFee > 0) {\r\n            TransferHelper.safeTransfer(\r\n                address(PRESALE_INFO.S_TOKEN),\r\n                PRESALE_FEE_INFO.TOKEN_FEE_ADDRESS,\r\n                DAOLaunchTokenFee\r\n            );\r\n        }\r\n        STATUS.IS_TRANSFERED_FEE = true;\r\n\r\n        // transfer fee to DAOLaunch\r\n        uint256 txFee = tx.gasprice.mul(GAS_LIMIT.listOnUniswap);\r\n        require(txFee <= PRESALE_SETTINGS.getEthCreationFee());\r\n\r\n        // // send DAOLaunch fee\r\n        PRESALE_SETTINGS.getEthAddress().transfer(\r\n            PRESALE_SETTINGS.getEthCreationFee().sub(txFee)\r\n        );\r\n\r\n        // send transaction fee\r\n        CALLER.transfer(txFee);\r\n        STATUS.IS_TRANSFERED_DAOLAUNCH_FEE = true;\r\n\r\n        // Fail the presale if the pair exists and contains presale token liquidity\r\n        if (\r\n            PRESALE_LOCK_FORWARDER.uniswapPairIsInitialised(\r\n                address(PRESALE_INFO.S_TOKEN),\r\n                address(PRESALE_INFO.B_TOKEN)\r\n            )\r\n        ) {\r\n            STATUS.LIST_ON_UNISWAP = true;\r\n            return;\r\n        }\r\n\r\n        TransferHelper.safeApprove(\r\n            address(PRESALE_INFO.S_TOKEN),\r\n            address(PRESALE_LOCK_FORWARDER),\r\n            tokenLiquidity\r\n        );\r\n        PRESALE_LOCK_FORWARDER.lockLiquidity(\r\n            PRESALE_INFO.B_TOKEN,\r\n            PRESALE_INFO.S_TOKEN,\r\n            baseLiquidity,\r\n            tokenLiquidity,\r\n            block.timestamp + PRESALE_INFO.LOCK_PERIOD,\r\n            PRESALE_INFO.PRESALE_OWNER\r\n        );\r\n        STATUS.LIST_ON_UNISWAP = true;\r\n    }\r\n\r\n    function ownerWithdrawTokens() external nonReentrant onlyPresaleOwner {\r\n        require(!STATUS.IS_OWNER_WITHDRAWN, \"GENERATION COMPLETE\");\r\n        require(presaleStatus() == 2, \"NOT SUCCESS\"); // SUCCESS\r\n\r\n        uint256 DAOLaunchBaseFee = STATUS\r\n            .TOTAL_BASE_COLLECTED\r\n            .mul(PRESALE_FEE_INFO.DAOLAUNCH_BASE_FEE)\r\n            .div(1000);\r\n        uint256 baseLiquidity = STATUS\r\n            .TOTAL_BASE_COLLECTED\r\n            .sub(DAOLaunchBaseFee)\r\n            .mul(PRESALE_INFO.LIQUIDITY_PERCENT)\r\n            .div(1000);\r\n        uint256 DAOLaunchTokenFee = STATUS\r\n            .TOTAL_TOKENS_SOLD\r\n            .mul(PRESALE_FEE_INFO.DAOLAUNCH_TOKEN_FEE)\r\n            .div(1000);\r\n        uint256 tokenLiquidity = baseLiquidity\r\n            .mul(PRESALE_INFO.LISTING_RATE)\r\n            .div(10**uint256(PRESALE_INFO.B_TOKEN.decimals()));\r\n\r\n        // send remain unsold tokens to presale owner\r\n        uint256 remainingSBalance = PRESALE_INFO\r\n            .S_TOKEN\r\n            .balanceOf(address(this))\r\n            .add(STATUS.TOTAL_TOKENS_WITHDRAWN)\r\n            .sub(STATUS.TOTAL_TOKENS_SOLD);\r\n\r\n        // send remaining base tokens to presale owner\r\n        uint256 remainingBaseBalance = PRESALE_INFO.PRESALE_IN_ETH\r\n            ? address(this).balance\r\n            : PRESALE_INFO.B_TOKEN.balanceOf(address(this));\r\n        if (!STATUS.IS_TRANSFERED_FEE) {\r\n            remainingBaseBalance = remainingBaseBalance.sub(DAOLaunchBaseFee);\r\n            remainingSBalance = remainingSBalance.sub(DAOLaunchTokenFee);\r\n        }\r\n        if (!STATUS.LIST_ON_UNISWAP) {\r\n            remainingBaseBalance = remainingBaseBalance.sub(baseLiquidity).sub(\r\n                PRESALE_SETTINGS.getEthCreationFee()\r\n            );\r\n            remainingSBalance = remainingSBalance.sub(tokenLiquidity);\r\n        }\r\n\r\n        if (remainingSBalance > 0) {\r\n            TransferHelper.safeTransfer(\r\n                address(PRESALE_INFO.S_TOKEN),\r\n                PRESALE_INFO.PRESALE_OWNER,\r\n                remainingSBalance\r\n            );\r\n        }\r\n\r\n        TransferHelper.safeTransferBaseToken(\r\n            address(PRESALE_INFO.B_TOKEN),\r\n            PRESALE_INFO.PRESALE_OWNER,\r\n            remainingBaseBalance,\r\n            !PRESALE_INFO.PRESALE_IN_ETH\r\n        );\r\n        STATUS.IS_OWNER_WITHDRAWN = true;\r\n    }\r\n\r\n    function sendDAOLaunchFee() external onlyCaller {\r\n        require(\r\n            !STATUS.IS_TRANSFERED_DAOLAUNCH_FEE,\r\n            \"IS_TRANSFERED_DAOLAUNCH_FEE\"\r\n        );\r\n        require(presaleStatus() == 3, \"NOT FAILED\"); // FAILED\r\n\r\n        // calcucalte transaction fee\r\n        uint256 txFee = tx.gasprice.mul(GAS_LIMIT.transferDAOLaunchFee);\r\n        require(txFee <= PRESALE_SETTINGS.getEthCreationFee());\r\n\r\n        // send DAOLaunch fee\r\n        PRESALE_SETTINGS.getEthAddress().transfer(\r\n            PRESALE_SETTINGS.getEthCreationFee().sub(txFee)\r\n        );\r\n\r\n        // send transaction fee\r\n        CALLER.transfer(txFee);\r\n        STATUS.IS_TRANSFERED_DAOLAUNCH_FEE = true;\r\n    }\r\n\r\n    function updateGasLimit(\r\n        uint256 _transferDAOLaunchFee,\r\n        uint256 _listOnUniswap\r\n    ) external onlyPresaleOwner {\r\n        GAS_LIMIT.transferDAOLaunchFee = _transferDAOLaunchFee;\r\n        GAS_LIMIT.listOnUniswap = _listOnUniswap;\r\n    }\r\n\r\n    function updateMaxSpendLimit(uint256 _maxSpend) external onlyPresaleOwner {\r\n        PRESALE_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\r\n    }\r\n\r\n    // postpone or bring a presale forward, this will only work when a presale is inactive.\r\n    // i.e. current start block > block.number\r\n    function updateBlocks(uint256 _startBlock, uint256 _endBlock)\r\n        external\r\n        onlyPresaleOwner\r\n    {\r\n        require(PRESALE_INFO.START_BLOCK > block.number);\r\n        require(_endBlock.sub(_startBlock) > 0);\r\n        PRESALE_INFO.START_BLOCK = _startBlock;\r\n        PRESALE_INFO.END_BLOCK = _endBlock;\r\n    }\r\n\r\n    // editable at any stage of the presale\r\n    function setWhitelistFlag(bool _flag) external onlyPresaleOwner {\r\n        STATUS.WHITELIST_ONLY = _flag;\r\n    }\r\n\r\n    // editable at any stage of the presale\r\n    function editWhitelist(address[] memory _users, bool _add)\r\n        external\r\n        onlyPresaleOwner\r\n    {\r\n        if (_add) {\r\n            for (uint256 i = 0; i < _users.length; i++) {\r\n                WHITELIST.add(_users[i]);\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < _users.length; i++) {\r\n                WHITELIST.remove(_users[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // if uniswap listing fails, call this function to release eth\r\n    function finalize() external {\r\n        require(msg.sender == DAOLAUNCH_DEV, \"INVALID CALLER\");\r\n        selfdestruct(DAOLAUNCH_DEV);\r\n    }\r\n\r\n    // whitelist getters\r\n    function getWhitelistedUsersLength() external view returns (uint256) {\r\n        return WHITELIST.length();\r\n    }\r\n\r\n    function getWhitelistedUserAtIndex(uint256 _index)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return WHITELIST.at(_index);\r\n    }\r\n\r\n    function getUserWhitelistStatus(address _user)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return WHITELIST.contains(_user);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary PresaleHelper {\r\n    using SafeMath for uint256;\r\n\r\n    function calculateAmountRequired(\r\n        uint256 _amount,\r\n        uint256 _tokenPrice,\r\n        uint256 _listingRate,\r\n        uint256 _liquidityPercent,\r\n        uint256 _tokenFee\r\n    ) public pure returns (uint256) {\r\n        uint256 listingRatePercent = _listingRate.mul(1000).div(_tokenPrice);\r\n        uint256 DAOLaunchTokenFee = _amount.mul(_tokenFee).div(1000);\r\n        uint256 amountMinusFee = _amount.sub(DAOLaunchTokenFee);\r\n        uint256 liquidityRequired = amountMinusFee\r\n            .mul(_liquidityPercent)\r\n            .mul(listingRatePercent)\r\n            .div(1000000);\r\n        uint256 tokensRequiredForPresale = _amount.add(liquidityRequired).add(\r\n            DAOLaunchTokenFee\r\n        );\r\n        return tokensRequiredForPresale;\r\n    }\r\n}\r\n\r\ninterface IPresaleFactory {\r\n    function registerPresale(address _presaleAddress) external;\r\n\r\n    function presaleIsRegistered(address _presaleAddress)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Locker {\r\n    function lockLPToken(\r\n        address _lpToken,\r\n        uint256 _amount,\r\n        uint256 _unlock_date,\r\n        address payable _referral,\r\n        bool _fee_in_eth,\r\n        address payable _withdrawer\r\n    ) external payable;\r\n}\r\n\r\ncontract PresaleGenerator01 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IPresaleFactory public PRESALE_FACTORY;\r\n    IPresaleSettings public PRESALE_SETTINGS;\r\n\r\n    struct PresaleParams {\r\n        uint256 amount;\r\n        uint256 tokenPrice;\r\n        uint256 maxSpendPerBuyer;\r\n        uint256 minSpendPerBuyer;\r\n        uint256 hardcap;\r\n        uint256 softcap;\r\n        uint256 liquidityPercent;\r\n        uint256 listingRate; // sale token listing price on uniswap\r\n        uint256 startblock;\r\n        uint256 endblock;\r\n        uint256 lockPeriod;\r\n        uint256 uniswapListingTime;\r\n    }\r\n\r\n    constructor() public {\r\n        PRESALE_FACTORY = IPresaleFactory(\r\n            0x35D4dc34966018Ac8c35051f86105753F4BB4AFc\r\n        );\r\n        PRESALE_SETTINGS = IPresaleSettings(\r\n            0xaBAE64D9d205d0467F7cA03aA1cd133EAd41873c\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new Presale contract and registers it in the PresaleFactory.sol.\r\n     */\r\n    function createPresale(\r\n        address payable _presaleOwner,\r\n        IERC20 _presaleToken,\r\n        IERC20 _baseToken,\r\n        address[] memory white_list,\r\n        uint256[12] memory uint_params,\r\n        address payable _caller\r\n    ) public payable {\r\n        PresaleParams memory params;\r\n        params.amount = uint_params[0];\r\n        params.tokenPrice = uint_params[1];\r\n        params.maxSpendPerBuyer = uint_params[2];\r\n        params.minSpendPerBuyer = uint_params[3];\r\n        params.hardcap = uint_params[4];\r\n        params.softcap = uint_params[5];\r\n        params.liquidityPercent = uint_params[6];\r\n        params.listingRate = uint_params[7];\r\n        params.startblock = uint_params[8];\r\n        params.endblock = uint_params[9];\r\n        params.lockPeriod = uint_params[10];\r\n        params.uniswapListingTime = uint_params[11];\r\n\r\n        if (params.lockPeriod < 4 weeks) {\r\n            params.lockPeriod = 4 weeks;\r\n        }\r\n\r\n        require(params.uniswapListingTime > params.endblock);\r\n        // Charge ETH fee for contract creation\r\n        require(\r\n            msg.value == PRESALE_SETTINGS.getEthCreationFee(),\r\n            \"FEE NOT MET\"\r\n        );\r\n\r\n        require(params.amount >= 10000, \"MIN DIVIS\"); // minimum divisibility\r\n        require(params.endblock > params.startblock, \"INVALID BLOCK TIME\");\r\n        require(params.tokenPrice.mul(params.hardcap) > 0, \"INVALID PARAMS\"); // ensure no overflow for future calculations\r\n        require(\r\n            params.liquidityPercent >= 300 && params.liquidityPercent <= 1000,\r\n            \"MIN LIQUIDITY\"\r\n        ); // 30% minimum liquidity lock\r\n        uint256 tokensRequiredForPresale = PresaleHelper\r\n            .calculateAmountRequired(\r\n            params.amount,\r\n            params.tokenPrice,\r\n            params.listingRate,\r\n            params.liquidityPercent,\r\n            PRESALE_SETTINGS.getBaseFee()\r\n        );\r\n\r\n        Presale01 newPresale = (new Presale01){value: msg.value}(address(this));\r\n\r\n        TransferHelper.safeTransferFrom(\r\n            address(_presaleToken),\r\n            address(msg.sender),\r\n            address(newPresale),\r\n            tokensRequiredForPresale\r\n        );\r\n        newPresale.init1(\r\n            _presaleOwner,\r\n            params.amount,\r\n            params.tokenPrice,\r\n            params.maxSpendPerBuyer,\r\n            params.minSpendPerBuyer,\r\n            params.hardcap,\r\n            params.softcap,\r\n            params.liquidityPercent,\r\n            params.listingRate,\r\n            params.startblock,\r\n            params.endblock,\r\n            params.lockPeriod\r\n        );\r\n        newPresale.init2(\r\n            _baseToken,\r\n            _presaleToken,\r\n            PRESALE_SETTINGS.getBaseFee(),\r\n            PRESALE_SETTINGS.getTokenFee(),\r\n            params.uniswapListingTime,\r\n            PRESALE_SETTINGS.getEthAddress(),\r\n            PRESALE_SETTINGS.getTokenAddress()\r\n        );\r\n        newPresale.init3(white_list, _caller);\r\n        PRESALE_FACTORY.registerPresale(address(newPresale));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRESALE_FACTORY\",\"outputs\":[{\"internalType\":\"contract IPresaleFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IPresaleSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_presaleOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_presaleToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"white_list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[12]\",\"name\":\"uint_params\",\"type\":\"uint256[12]\"},{\"internalType\":\"address payable\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PresaleGenerator01","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"PresaleHelper:f9c0737ee1016257eae62deee96c8226557b1760","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e64444363c7180c799d90bf10f18979232895a5e5f844f2ae47ad69f0fa45342"}]}