{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/lewi/Documents/ethereum/emptyset/protocol/contracts/src/Interfaces.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020, 2021 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./lib/Decimal.sol\\\";\\n\\n/**\\n * @title IManagedToken\\n * @notice Generic interface for ERC20 tokens that can be minted and burned by their owner\\n * @dev Used by Dollar and Stake in this protocol\\n */\\ninterface IManagedToken {\\n\\n    /**\\n     * @notice Mints `amount` tokens to the {owner}\\n     * @param amount Amount of token to mint\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @notice Burns `amount` tokens from the {owner}\\n     * @param amount Amount of token to burn\\n     */\\n    function mint(uint256 amount) external;\\n}\\n\\n/**\\n * @title IGovToken\\n * @notice Generic interface for ERC20 tokens that have Compound-governance features\\n * @dev Used by Stake and other compatible reserve-held tokens\\n */\\ninterface IGovToken {\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title IReserve\\n * @notice Interface for the protocol reserve\\n */\\ninterface IReserve {\\n    /**\\n     * @notice The price that one ESD can currently be sold to the reserve for\\n     * @dev Returned as a Decimal.D256\\n     *      Normalizes for decimals (e.g. 1.00 USDC == Decimal.one())\\n     * @return Current ESD redemption price\\n     */\\n    function redeemPrice() external view returns (Decimal.D256 memory);\\n}\\n\\ninterface IRegistry {\\n    /**\\n     * @notice USDC token contract\\n     */\\n    function usdc() external view returns (address);\\n\\n    /**\\n     * @notice Compound protocol cUSDC pool\\n     */\\n    function cUsdc() external view returns (address);\\n\\n    /**\\n     * @notice ESD stablecoin contract\\n     */\\n    function dollar() external view returns (address);\\n\\n    /**\\n     * @notice ESDS governance token contract\\n     */\\n    function stake() external view returns (address);\\n\\n    /**\\n     * @notice ESD reserve contract\\n     */\\n    function reserve() external view returns (address);\\n\\n    /**\\n     * @notice ESD governor contract\\n     */\\n    function governor() external view returns (address);\\n\\n    /**\\n     * @notice ESD timelock contract, owner for the protocol\\n     */\\n    function timelock() external view returns (address);\\n\\n    /**\\n     * @notice Migration contract to bride v1 assets with current system\\n     */\\n    function migrator() external view returns (address);\\n\\n    /**\\n     * @notice Registers a new address for USDC\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setUsdc(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for cUSDC\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setCUsdc(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for ESD\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setDollar(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for ESDS\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setStake(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for the reserve\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setReserve(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for the governor\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setGovernor(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for the timelock\\n     * @dev Owner only - governance hook\\n     *      Does not automatically update the owner of all owned protocol contracts\\n     * @param newValue New address to register\\n     */\\n    function setTimelock(address newValue) external;\\n\\n    /**\\n     * @notice Registers a new address for the v1 migration contract\\n     * @dev Owner only - governance hook\\n     * @param newValue New address to register\\n     */\\n    function setMigrator(address newValue) external;\\n}\"\r\n    },\r\n    \"/Users/lewi/Documents/ethereum/emptyset/protocol/contracts/src/lib/Decimal.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2019 dYdX Trading Inc.\\n    Copyright 2020, 2021 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @notice Library that defines a fixed-point number with 18 decimal places.\\n *\\n * audit-info: Extended from dYdX's Decimal library:\\n *             https://github.com/dydxprotocol/solo/blob/master/contracts/protocol/lib/Decimal.sol\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    /**\\n     * @notice Fixed-point base for Decimal.D256 values\\n     */\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    /**\\n     * @notice Main struct to hold Decimal.D256 state\\n     * @dev Represents the number value / BASE\\n     */\\n    struct D256 {\\n        /**\\n         * @notice Underlying value of the Decimal.D256\\n         */\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    /**\\n     * @notice Returns a new Decimal.D256 struct initialized to represent 0.0\\n     * @return Decimal.D256 representation of 0.0\\n     */\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    /**\\n     * @notice Returns a new Decimal.D256 struct initialized to represent 1.0\\n     * @return Decimal.D256 representation of 1.0\\n     */\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    /**\\n     * @notice Returns a new Decimal.D256 struct initialized to represent `a`\\n     * @param a Integer to transform to Decimal.D256 type\\n     * @return Decimal.D256 representation of integer`a`\\n     */\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    /**\\n     * @notice Returns a new Decimal.D256 struct initialized to represent `a` / `b`\\n     * @param a Numerator of ratio to transform to Decimal.D256 type\\n     * @param b Denominator of ratio to transform to Decimal.D256 type\\n     * @return Decimal.D256 representation of ratio `a` / `b`\\n     */\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    /**\\n     * @notice Adds integer `b` to Decimal.D256 `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to add to `self`\\n     * @return Resulting Decimal.D256\\n     */\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    /**\\n     * @notice Subtracts integer `b` from Decimal.D256 `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to subtract from `self`\\n     * @return Resulting Decimal.D256\\n     */\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    /**\\n     * @notice Subtracts integer `b` from Decimal.D256 `self`\\n     * @dev Reverts on underflow with reason `reason`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to subtract from `self`\\n     * @param reason Revert reason\\n     * @return Resulting Decimal.D256\\n     */\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    /**\\n     * @notice Subtracts integer `b` from Decimal.D256 `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to subtract from `self`\\n     * @return 0 on underflow, or the Resulting Decimal.D256\\n     */\\n    function subOrZero(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        uint256 amount = b.mul(BASE);\\n        return D256({ value: self.value > amount ? self.value.sub(amount) : 0 });\\n    }\\n\\n    /**\\n     * @notice Multiplies Decimal.D256 `self` by integer `b`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to multiply `self` by\\n     * @return Resulting Decimal.D256\\n     */\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    /**\\n     * @notice Divides Decimal.D256 `self` by integer `b`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to divide `self` by\\n     * @return Resulting Decimal.D256\\n     */\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    /**\\n     * @notice Divides Decimal.D256 `self` by integer `b`\\n     * @dev Reverts on divide-by-zero with reason `reason`\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer to divide `self` by\\n     * @param reason Revert reason\\n     * @return Resulting Decimal.D256\\n     */\\n    function div(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b, reason) });\\n    }\\n\\n    /**\\n     * @notice Exponentiates Decimal.D256 `self` to the power of integer `b`\\n     * @dev Not optimized - is only suitable to use with small exponents\\n     * @param self Original Decimal.D256 number\\n     * @param b Integer exponent\\n     * @return Resulting Decimal.D256\\n     */\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    /**\\n     * @notice Adds Decimal.D256 `b` to Decimal.D256 `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to add to `self`\\n     * @return Resulting Decimal.D256\\n     */\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    /**\\n     * @notice Subtracts Decimal.D256 `b` from Decimal.D256 `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to subtract from `self`\\n     * @return Resulting Decimal.D256\\n     */\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    /**\\n     * @notice Subtracts Decimal.D256 `b` from Decimal.D256 `self`\\n     * @dev Reverts on underflow with reason `reason`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to subtract from `self`\\n     * @param reason Revert reason\\n     * @return Resulting Decimal.D256\\n     */\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    /**\\n     * @notice Subtracts Decimal.D256 `b` from Decimal.D256 `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to subtract from `self`\\n     * @return 0 on underflow, or the Resulting Decimal.D256\\n     */\\n    function subOrZero(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value > b.value ? self.value.sub(b.value) : 0 });\\n    }\\n\\n    /**\\n     * @notice Multiplies Decimal.D256 `self` by Decimal.D256 `b`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to multiply `self` by\\n     * @return Resulting Decimal.D256\\n     */\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    /**\\n     * @notice Divides Decimal.D256 `self` by Decimal.D256 `b`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to divide `self` by\\n     * @return Resulting Decimal.D256\\n     */\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    /**\\n     * @notice Divides Decimal.D256 `self` by Decimal.D256 `b`\\n     * @dev Reverts on divide-by-zero with reason `reason`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to divide `self` by\\n     * @param reason Revert reason\\n     * @return Resulting Decimal.D256\\n     */\\n    function div(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value, reason) });\\n    }\\n\\n    /**\\n     * @notice Checks if `b` is equal to `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to compare\\n     * @return Whether `b` is equal to `self`\\n     */\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    /**\\n     * @notice Checks if `b` is greater than `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to compare\\n     * @return Whether `b` is greater than `self`\\n     */\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Checks if `b` is less than `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to compare\\n     * @return Whether `b` is less than `self`\\n     */\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Checks if `b` is greater than or equal to `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to compare\\n     * @return Whether `b` is greater than or equal to `self`\\n     */\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    /**\\n     * @notice Checks if `b` is less than or equal to `self`\\n     * @param self Original Decimal.D256 number\\n     * @param b Decimal.D256 to compare\\n     * @return Whether `b` is less than or equal to `self`\\n     */\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    /**\\n     * @notice Checks if `self` is equal to 0\\n     * @param self Original Decimal.D256 number\\n     * @return Whether `self` is equal to 0\\n     */\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    /**\\n     * @notice Truncates the decimal part of `self` and returns the integer value as a uint256\\n     * @param self Original Decimal.D256 number\\n     * @return Truncated Integer value as a uint256\\n     */\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ General Math ============\\n\\n    /**\\n     * @notice Determines the minimum of `a` and `b`\\n     * @param a First Decimal.D256 number to compare\\n     * @param b Second Decimal.D256 number to compare\\n     * @return Resulting minimum Decimal.D256\\n     */\\n    function min(D256 memory a, D256 memory b) internal pure returns (Decimal.D256 memory) {\\n        return lessThan(a, b) ? a : b;\\n    }\\n\\n    /**\\n     * @notice Determines the maximum of `a` and `b`\\n     * @param a First Decimal.D256 number to compare\\n     * @param b Second Decimal.D256 number to compare\\n     * @return Resulting maximum Decimal.D256\\n     */\\n    function max(D256 memory a, D256 memory b) internal pure returns (Decimal.D256 memory) {\\n        return greaterThan(a, b) ? a : b;\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    /**\\n     * @notice Multiplies `target` by ratio `numerator` / `denominator`\\n     * @dev Internal only - helper\\n     * @param target Original Integer number\\n     * @param numerator Integer numerator of ratio\\n     * @param denominator Integer denominator of ratio\\n     * @return Resulting Decimal.D256 number\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /**\\n     * @notice Multiplies `target` by ratio `numerator` / `denominator`\\n     * @dev Internal only - helper\\n     *      Reverts on divide-by-zero with reason `reason`\\n     * @param target Original Integer number\\n     * @param numerator Integer numerator of ratio\\n     * @param denominator Integer denominator of ratio\\n     * @param reason Revert reason\\n     * @return Resulting Decimal.D256 number\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator,\\n        string memory reason\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator, reason);\\n    }\\n\\n    /**\\n     * @notice Compares Decimal.D256 `a` to Decimal.D256 `b`\\n     * @dev Internal only - helper\\n     * @param a First Decimal.D256 number to compare\\n     * @param b Second Decimal.D256 number to compare\\n     * @return 0 if a < b, 1 if a == b, 2 if a > b\\n     */\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lewi/Documents/ethereum/emptyset/protocol/contracts/src/lib/LibEIP712.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2019 ZeroEx Intl.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.5.17;\\n\\n/*\\n * audit-info: Forked from 0x's LibEIP712 library:\\n *             https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\n */\\nlibrary LibEIP712 {\\n\\n    // Hash of the EIP712 Domain Separator Schema\\n    // keccak256(abi.encodePacked(\\n    //     \\\"EIP712Domain(\\\",\\n    //     \\\"string name,\\\",\\n    //     \\\"string version,\\\",\\n    //     \\\"uint256 chainId,\\\",\\n    //     \\\"address verifyingContract\\\",\\n    //     \\\")\\\"\\n    // ))\\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev Calculates a EIP712 domain separator.\\n    /// @param name The EIP712 domain name.\\n    /// @param version The EIP712 domain version.\\n    /// @param verifyingContract The EIP712 verifying contract.\\n    /// @return EIP712 domain separator.\\n    function hashEIP712Domain(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    )\\n    internal\\n    pure\\n    returns (bytes32 result)\\n    {\\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n        //     keccak256(bytes(name)),\\n        //     keccak256(bytes(version)),\\n        //     chainId,\\n        //     uint256(verifyingContract)\\n        // ))\\n\\n        assembly {\\n        // Calculate hashes of dynamic data\\n            let nameHash := keccak256(add(name, 32), mload(name))\\n            let versionHash := keccak256(add(version, 32), mload(version))\\n\\n        // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n        // Store params in memory\\n            mstore(memPtr, schemaHash)\\n            mstore(add(memPtr, 32), nameHash)\\n            mstore(add(memPtr, 64), versionHash)\\n            mstore(add(memPtr, 96), chainId)\\n            mstore(add(memPtr, 128), verifyingContract)\\n\\n        // Compute hash\\n            result := keccak256(memPtr, 160)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\n    ///                         with getDomainHash().\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return EIP712 hash applied to the given EIP712 Domain.\\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\\n    internal\\n    pure\\n    returns (bytes32 result)\\n    {\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        assembly {\\n        // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n        // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"/Users/lewi/Documents/ethereum/emptyset/protocol/contracts/src/token/Dollar.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020, 2021 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./Permittable.sol\\\";\\nimport \\\"../Interfaces.sol\\\";\\n\\n/**\\n * @title Dollar\\n * @notice ESD stablecoin ERC20 token\\n * @dev Owned by the reserve, which is solely allowed to mint ESD to itself and to burn its held ESD\\n */\\ncontract Dollar is IManagedToken, Ownable, Permittable {\\n\\n    /**\\n     * @notice Constructs the Dollar contract\\n     */\\n    constructor()\\n    ERC20Detailed(\\\"Digital Standard Unit\\\", \\\"DSU\\\", 18)\\n    Permittable()\\n    public\\n    { }\\n\\n    // ADMIN\\n\\n    /**\\n     * @notice Mints `amount` ESD tokens to the {owner}\\n     * @dev Owner only\\n     * @param amount Amount of ESD to mint\\n     */\\n    function mint(uint256 amount) public onlyOwner {\\n        _mint(owner(), amount);\\n    }\\n\\n    /**\\n     * @notice Burns `amount` ESD tokens from the {owner}\\n     * @dev Owner only\\n     * @param amount Amount of ESD to burn\\n     */\\n    function burn(uint256 amount) public onlyOwner {\\n        _burn(owner(), amount);\\n    }\\n\\n    // INFINITE APPROVAL\\n\\n    /**\\n     * @notice Transfer `amount` ESD from the `sender` to the `recipient`\\n     * @dev Extended to support infinite approval\\n     * @param sender Account to send ESD from\\n     * @param sender Account to receive the sent ESD\\n     * @param amount Amount of ESD to transfer\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        if (allowance(sender, _msgSender()) != uint256(-1)) {\\n            _approve(\\n                sender,\\n                _msgSender(),\\n                allowance(sender, _msgSender()).sub(amount, \\\"Dollar: transfer amount exceeds allowance\\\"));\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lewi/Documents/ethereum/emptyset/protocol/contracts/src/token/Permittable.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020, 2021 Empty Set Squad <emptysetsquad@protonmail.com>\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"../lib/LibEIP712.sol\\\";\\n\\n/**\\n * @title Permittable\\n * @notice EIP-2612: permit implementation for the ERC20 standard\\n */\\ncontract Permittable is ERC20Detailed, ERC20 {\\n\\n    /**\\n     * @notice EIP712 typehash for Permit\\n     * @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n     */\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /**\\n     * @notice EIP712 version\\n     */\\n    string private constant EIP712_VERSION = \\\"1\\\";\\n\\n    /**\\n     * @notice EIP712 domain separator for this contract\\n     * @dev Computed in the constructor\\n     */\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    /**\\n     * @notice Mapping of the current expected nonce for each account\\n     */\\n    mapping(address => uint256) public nonces;\\n\\n    /**\\n     * @notice Construct the Permittable contract\\n     */\\n    constructor() public {\\n        DOMAIN_SEPARATOR = LibEIP712.hashEIP712Domain(name(), EIP712_VERSION, getChainId(), address(this));\\n    }\\n\\n    /**\\n     * @notice Update the allowance of `spender` for `owner` to `value` based on a signed EIP712 message\\n     * @dev Will revert if:\\n     *       (1) The permit's nonce is different than expected\\n     *       (2) The deadline has passed\\n     *       (3) The permit signature is invalid\\n     * @param owner Owner that is allowing approval\\n     * @param spender Spender to approve for `owner`\\n     * @param value Amount to approve\\n     * @param deadline Timestamp that the permit is valid until\\n     * @param v V parameter of the permit signature\\n     * @param r R parameter of the permit signature\\n     * @param s S parameter of the permit signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = LibEIP712.hashEIP712Message(\\n            DOMAIN_SEPARATOR,\\n            keccak256(abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                nonces[owner]++,\\n                deadline\\n            ))\\n        );\\n\\n        address recovered = ecrecover(digest, v, r, s);\\n\\n        require(recovered == owner, \\\"Permittable: Invalid signature\\\");\\n        require(now <= deadline, \\\"Permittable: Expired\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Retrieve the current chain's ID\\n     * @dev Internal only - helper\\n     * @return chain ID\\n     */\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Dollar","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}