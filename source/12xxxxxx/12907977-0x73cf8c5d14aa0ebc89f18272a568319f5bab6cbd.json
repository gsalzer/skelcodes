{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\n\"\"\"\r\n@title Curve LP Burner\r\n@notice Converts Curve LP tokens to a single asset and forwards to the receiver\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface StableSwap:\r\n    def remove_liquidity_one_coin(_amount: uint256, i: int128, _min_amount: uint256): nonpayable\r\n    def coins(index:uint256) -> address:view\r\n\r\ninterface CurveLPToken:\r\n    def minter() -> address: view\r\n\r\ninterface WETH9:\r\n    def deposit(): payable\r\n\r\nstruct SwapData:\r\n    pool: address\r\n    result_coin: address\r\n\r\n\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nreceiver: public(address)\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\nburnable_coins:public(HashMap[address,SwapData])\r\nETH:constant(address) =  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nWETH:constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n\r\n@external\r\ndef __init__(_receiver:address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver the receiver address to which the resultant tokens will be sent\r\n    @dev Unlike other burners, this contract may transfer tokens to\r\n         multiple addresses after the swap. Receiver addresses are\r\n         set by calling `set_swap_data` instead of setting it\r\n         within the constructor.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n    \r\n\r\n\r\n\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Convert `_coin` by removing liquidity and transfer to another burner\r\n    @param _coin Address of the coin being converted\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n    assert self.burnable_coins[_coin].pool != ZERO_ADDRESS, \"token not burnable\"\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        ERC20(_coin).transferFrom(msg.sender, self, amount)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(_coin).balanceOf(self)\r\n\r\n    if amount != 0:\r\n        # remove liquidity and pass to the next burner\r\n        stable_swap_address:address = self.burnable_coins[_coin].pool\r\n        result_coin_address:address = self.burnable_coins[_coin].result_coin\r\n        StableSwap(stable_swap_address).remove_liquidity_one_coin(amount, 0, 0)\r\n        # wrap eth into weth before sending it to receiver\r\n        if result_coin_address == ETH:\r\n            amount = self.balance\r\n            WETH9(WETH).deposit(value=amount)\r\n            result_coin_address = WETH\r\n        # move resultalt token to receiver\r\n        amount = ERC20(result_coin_address).balanceOf(self)\r\n        response: Bytes[32] = raw_call(\r\n            result_coin_address,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(self.receiver, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    return True\r\n\r\n@external\r\ndef add_swap_data(_coin:address) -> bool:\r\n    \"\"\"\r\n    @notice allow more Curve LP Token to be burned\r\n    @param _coin Curve LP token\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    stable_swap_address:address = CurveLPToken(_coin).minter()\r\n    assert stable_swap_address != ZERO_ADDRESS\r\n    self.burnable_coins[_coin].pool = stable_swap_address\r\n    result_coin:address= StableSwap(stable_swap_address).coins(0)\r\n    assert result_coin != ZERO_ADDRESS\r\n    self.burnable_coins[_coin].result_coin = result_coin\r\n    ERC20(_coin).approve(stable_swap_address,  MAX_UINT256)\r\n    \r\n    return True\r\n@external\r\ndef add_old_swap_data(_coin:address, _pool:address, _result_coin:address) -> bool:\r\n    \"\"\"\r\n    @notice allow more Curve LP Token to be burned, this function is for old curve lp coin that has no minter function\r\n    @param _coin Curve LP token\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.burnable_coins[_coin].pool = _pool\r\n    self.burnable_coins[_coin].result_coin = _result_coin\r\n    ERC20(_coin).approve(_pool,  MAX_UINT256)\r\n    return True\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":48769},{\"name\":\"add_swap_data\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":74836},{\"name\":\"add_old_swap_data\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"},{\"type\":\"address\",\"name\":\"_pool\"},{\"type\":\"address\",\"name\":\"_result_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":74209},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":7829},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36473},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37730},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36533},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36459},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36593},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36519},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"receiver\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631},{\"name\":\"burnable_coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"pool\"},{\"type\":\"address\",\"name\":\"result_coin\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":3110}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000079ea17bee0a8dcb900737e8caa247c8358a5dfa10000000000000000000000006d5a7597896a703fe8c85775b23395a48f9713050000000000000000000000006d5a7597896a703fe8c85775b23395a48f971305000000000000000000000000197939c1ca20c2b506d6811d8b6cdb3394471074","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}