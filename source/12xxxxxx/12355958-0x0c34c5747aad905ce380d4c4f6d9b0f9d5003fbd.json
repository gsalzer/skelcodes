{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IDigiNFT.sol\r\n\r\npragma solidity 0.6.5;\r\n\r\ninterface IDigiNFT {\r\n    function mint(\r\n        address wallet,\r\n        string calldata cardName,\r\n        bool cardPhysical\r\n    ) external returns (uint256);\r\n\r\n    function cardName(uint256 tokenId) external view returns (string memory);\r\n    function cardPhysical(uint256 tokenId) external view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/DigiAuction.sol\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DigiAuction is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n    uint256 BIGNUMBER = 10 ** 18;\r\n\r\n    /******************\r\n    CONFIG\r\n    ******************/\r\n    uint256 public purchaseFee = 500;   // 5%\r\n    uint256 public digiAmountRequired = 1000 * (BIGNUMBER);\r\n\r\n    /******************\r\n    EVENTS\r\n    ******************/\r\n    event CreatedAuction(uint256 auctionId, address indexed wallet, uint256 tokenId, uint256 created);\r\n    event CanceledAuction(uint256 auctionId, address indexed wallet, uint256 tokenId, uint256 created);\r\n    event NewHighestOffer(uint256 auctionId, address indexed wallet, uint256 amount, uint256 created);\r\n    event DirectBuyed(uint256 auctionId, address indexed wallet, uint256 amount, uint256 created);\r\n    event Claimed(uint256 auctionId, address indexed wallet, uint256 amount, uint256 created);\r\n    event Log(uint256 data);\r\n\r\n    /******************\r\n    INTERNAL ACCOUNTING\r\n    *******************/\r\n    address public stakeERC20;\r\n    address public digiERC271;\r\n    address public stableERC20;\r\n    address[] public feesDestinators;\r\n    uint256[] public feesPercentages;\r\n\r\n    uint256 public auctionCount = 0;\r\n\r\n    mapping (uint256 => Auction) public auctions;\r\n    mapping (uint256 => bool) public claimedAuctions;\r\n    mapping (uint256 => Offer) public highestOffers;\r\n    mapping (uint256 => uint256) public lastAuctionByToken;\r\n\r\n    struct Auction {\r\n        uint256 tokenId;\r\n        address owner;\r\n        uint256 minPrice;\r\n        uint256 fixedPrice;\r\n        bool buyed;\r\n        uint256 endDate;\r\n    }\r\n\r\n    struct Offer {\r\n        address buyer;\r\n        uint256 offer;\r\n        uint256 date;\r\n    }\r\n\r\n    /******************\r\n    PUBLIC FUNCTIONS\r\n    *******************/\r\n    constructor(\r\n        address _stakeERC20,\r\n        address _digiERC271,\r\n        address _stableERC20\r\n    )\r\n        public\r\n    {\r\n        require(address(_stakeERC20) != address(0)); \r\n        require(address(_digiERC271) != address(0));\r\n        require(address(_stableERC20) != address(0));\r\n\r\n        stakeERC20 = _stakeERC20;\r\n        digiERC271 = _digiERC271;\r\n        stableERC20 = _stableERC20;\r\n    }\r\n\r\n    /**\r\n    * @dev User deposits DIGI NFT for auction.\r\n    */\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _minPrice,\r\n        uint256 _fixedPrice,\r\n        uint256 _duration\r\n    )\r\n        public\r\n        returns (uint256)\r\n    {\r\n        IDigiNFT(digiERC271).transferFrom(msg.sender, address(this), _tokenId);\r\n\r\n        uint256 timeNow = _getTime();\r\n        uint256 newAuction = auctionCount;\r\n        auctionCount += 1;\r\n\r\n        auctions[newAuction] = Auction({\r\n            tokenId: _tokenId,\r\n            owner: msg.sender,\r\n            minPrice: _minPrice,\r\n            fixedPrice: _fixedPrice,\r\n            buyed: false,\r\n            endDate: timeNow + _duration\r\n        });\r\n        lastAuctionByToken[_tokenId] = newAuction;\r\n\r\n        emit CreatedAuction(newAuction, msg.sender, _tokenId, timeNow);\r\n\r\n        return newAuction;\r\n    }\r\n\r\n    /**\r\n    * @dev User makes an offer for the DIGI NFT.\r\n    */\r\n    function participateAuction(uint256 _auctionId, uint256 _amount)\r\n        public\r\n        nonReentrant()\r\n        requiredAmount(msg.sender, digiAmountRequired)\r\n        inProgress(_auctionId)\r\n        minPrice(_auctionId, _amount)\r\n        newHighestOffer(_auctionId, _amount)\r\n    {\r\n        IERC20(stableERC20).transferFrom(msg.sender, address(this), _amount);\r\n\r\n        _returnPreviousOffer(_auctionId);\r\n\r\n        uint256 timeNow = _getTime();\r\n        highestOffers[_auctionId] = Offer({\r\n            buyer: msg.sender,\r\n            offer: _amount,\r\n            date: timeNow\r\n        });\r\n\r\n        emit NewHighestOffer(_auctionId, msg.sender, _amount, timeNow);\r\n    }\r\n\r\n    /**\r\n    * @dev User directly buyes the DIGI NFT at fixed price.\r\n    */\r\n    function directBuy(uint256 _auctionId)\r\n        public\r\n        notClaimed(_auctionId)\r\n        inProgress(_auctionId)\r\n    {\r\n        require(IERC20(stableERC20).balanceOf(msg.sender) > auctions[_auctionId].fixedPrice, 'DigiAuction: User does not have enough balance');\r\n        require(auctions[_auctionId].fixedPrice > 0, 'DigiAuction: Direct buy not available');\r\n        \r\n        uint amount = auctions[_auctionId].fixedPrice;\r\n        uint256 feeAmount = amount.mul(purchaseFee).div(10000);\r\n        uint256 amountAfterFee = amount.sub(feeAmount);\r\n\r\n        IERC20(stableERC20).transferFrom(msg.sender, address(this), feeAmount);\r\n        IERC20(stableERC20).transferFrom(msg.sender, auctions[_auctionId].owner, amountAfterFee);\r\n        IDigiNFT(digiERC271).transferFrom(address(this), msg.sender, auctions[_auctionId].tokenId);\r\n        \r\n        uint256 timeNow = _getTime();\r\n        auctions[_auctionId].buyed = true;\r\n\r\n        claimedAuctions[_auctionId] = true;\r\n\r\n        _returnPreviousOffer(_auctionId);\r\n\r\n        emit DirectBuyed(_auctionId, msg.sender, auctions[_auctionId].fixedPrice, timeNow);\r\n    }\r\n\r\n    /**\r\n    * @dev Winner user claims DIGI NFT for ended auction.\r\n    */\r\n    function claim(uint256 _auctionId)\r\n        public\r\n        ended(_auctionId)\r\n        notClaimed(_auctionId)\r\n    {\r\n        require(highestOffers[_auctionId].buyer != address(0x0), \"DigiAuction: Ended without winner\");\r\n\r\n        uint256 timeNow = _getTime();\r\n        uint256 amount = highestOffers[_auctionId].offer;\r\n        uint256 feeAmount = amount.mul(purchaseFee).div(10000);\r\n        uint256 amountAfterFee = amount.sub(feeAmount);\r\n\r\n        IERC20(stableERC20).transfer(auctions[_auctionId].owner, amountAfterFee);\r\n        IDigiNFT(digiERC271).transferFrom(address(this), highestOffers[_auctionId].buyer, auctions[_auctionId].tokenId);\r\n\r\n        claimedAuctions[_auctionId] = true;\r\n\r\n        emit Claimed(_auctionId, highestOffers[_auctionId].buyer, amount, timeNow);\r\n    }\r\n\r\n    /**\r\n    * @dev Send all the acumulated fees for one token to the fee destinators.\r\n    */\r\n    function withdrawAcumulatedFees() public {\r\n        uint256 total = IERC20(stableERC20).balanceOf(address(this));\r\n        \r\n        for (uint8 i = 0; i < feesDestinators.length; i++) {\r\n            IERC20(stableERC20).transfer(\r\n                feesDestinators[i],\r\n                total.mul(feesPercentages[i]).div(100)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Cancel auction and returns token.\r\n    */\r\n    function cancel(uint256 _auctionId)\r\n        public\r\n        ended(_auctionId)\r\n    {\r\n        require(auctions[_auctionId].owner == msg.sender, 'DigiAuction: User is not the token owner');\r\n        require(highestOffers[_auctionId].buyer == address(0x0), \"DigiAuction: Ended but has winner\");\r\n\r\n        uint256 timeNow = _getTime();\r\n\r\n        auctions[_auctionId].endDate = timeNow;\r\n\r\n        IDigiNFT(digiERC271).transferFrom(\r\n            address(this),\r\n            auctions[_auctionId].owner,\r\n            auctions[_auctionId].tokenId\r\n        );\r\n\r\n        emit CanceledAuction(_auctionId, msg.sender, auctions[_auctionId].tokenId, timeNow);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the purchaseFee for every withdraw.\r\n    */\r\n    function setFee(uint256 _purchaseFee) public onlyOwner() {\r\n        require(_purchaseFee <= 3000, \"DigiAuction: Max fee 30%\");\r\n        purchaseFee = _purchaseFee;\r\n    }\r\n\r\n    /**\r\n    * @dev Configure how to distribute the fees for user's withdraws.\r\n    */\r\n    function setFeesDestinatorsWithPercentages(\r\n        address[] memory _destinators,\r\n        uint256[] memory _percentages\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(_destinators.length == _percentages.length, \"DigiAuction: Destinators and percentageslenght are not equals\");\r\n\r\n        uint256 total = 0;\r\n        for (uint8 i = 0; i < _percentages.length; i++) {\r\n            total += _percentages[i];\r\n        }\r\n        require(total == 100, \"DigiAuction: Percentages sum must be 100\");\r\n\r\n        feesDestinators = _destinators;\r\n        feesPercentages = _percentages;\r\n    }\r\n\r\n    /******************\r\n    PRIVATE FUNCTIONS\r\n    *******************/\r\n    function _returnPreviousOffer(uint256 _auctionId) internal {\r\n        Offer memory currentOffer = highestOffers[_auctionId];\r\n        if (currentOffer.offer > 0) {\r\n            IERC20(stableERC20).transfer(currentOffer.buyer, currentOffer.offer);\r\n        }\r\n    }\r\n\r\n    function _getTime() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /******************\r\n    MODIFIERS\r\n    *******************/\r\n    modifier requiredAmount(address _wallet, uint256 _amount) {\r\n        require(\r\n            IERC20(stakeERC20).balanceOf(_wallet) > _amount,\r\n            'DigiAuction: User needs more token balance in order to do this action'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier newHighestOffer(uint256 _auctionId, uint256 _amount) {\r\n        require(\r\n            _amount > highestOffers[_auctionId].offer,\r\n            'DigiAuction: Amount must be higher'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier minPrice(uint256 _auctionId, uint256 _amount) {\r\n        require(\r\n            _amount >= auctions[_auctionId].minPrice,\r\n            'DigiAuction: Insufficient offer amount for this auction'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier inProgress(uint256 _auctionId) {\r\n        require(\r\n            (auctions[_auctionId].endDate > _getTime()) && auctions[_auctionId].buyed == false,\r\n            'DigiAuction: Auction closed'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier ended(uint256 _auctionId) {\r\n        require(\r\n            (_getTime() > auctions[_auctionId].endDate) && auctions[_auctionId].buyed == false,\r\n            'DigiAuction: Auction not closed'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notClaimed(uint256 _auctionId) {\r\n        require(\r\n            (claimedAuctions[_auctionId] == false),\r\n            'DigiAuction: Already claimed'\r\n        );\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_digiERC271\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"CanceledAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"CreatedAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"DirectBuyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"NewHighestOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedAuctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"digiAmountRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"digiERC271\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"directBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesDestinators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestOffers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAuctionByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"participateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_destinators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"}],\"name\":\"setFeesDestinatorsWithPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAcumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DigiAuction","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003cbf23c081faa5419810ce0f6bc1ecb73006d848000000000000000000000000e71b772c99f79b2cc9b5a0e204e88ba14fbb61c4000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1cc25d51b07db5feec3c6b6feee0319d5444e4e0c810e57d3f9ad142ade7069b"}]}