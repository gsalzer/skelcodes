{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) internal balances;\\n\\n  uint256 internal totalSupply_;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_value \\u003c= balances[msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"},\"BurnableToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./BasicToken.sol\\\";\\n\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract BurnableToken is BasicToken {\\n\\n  event Burn(address indexed burner, uint256 value);\\n\\n  /**\\n   * @dev Burns a specific amount of tokens.\\n   * @param _value The amount of token to be burned.\\n   */\\n  function burn(uint256 _value) public {\\n    _burn(msg.sender, _value);\\n  }\\n\\n  function _burn(address _who, uint256 _value) internal {\\n    require(_value \\u003c= balances[_who]);\\n    // no need to require value \\u003c= totalSupply, since that would imply the\\n    // sender\\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n    balances[_who] = balances[_who].sub(_value);\\n    totalSupply_ = totalSupply_.sub(_value);\\n    emit Burn(_who, _value);\\n    emit Transfer(_who, address(0), _value);\\n  }\\n}\\n\"},\"Crowdsale.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conform\\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using \\u0027super\\u0027 where appropriate to concatenate\\n * behavior.\\n */\\ncontract Crowdsale {\\n  using SafeMath for uint256;\\n  using SafeERC20 for ERC20;\\n\\n  // The token being sold\\n  ERC20 public token;\\n\\n  // Address where funds are collected\\n  address public wallet;\\n\\n  // How many token units a buyer gets per wei.\\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\\n  // 1 wei will give you 1 unit, or 0.001 TOK.\\n  uint256 public rate;\\n\\n  // Amount of wei raised\\n  uint256 public weiRaised;\\n\\n  /**\\n   * Event for token purchase logging\\n   * @param purchaser who paid for the tokens\\n   * @param beneficiary who got the tokens\\n   * @param value weis paid for purchase\\n   * @param amount amount of tokens purchased\\n   */\\n  event TokenPurchase(\\n    address indexed purchaser,\\n    address indexed beneficiary,\\n    uint256 value,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @param _rate Number of token units a buyer gets per wei\\n   * @param _wallet Address where collected funds will be forwarded to\\n   * @param _token Address of the token being sold\\n   */\\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\\n    require(_rate \\u003e 0);\\n    require(_wallet != address(0));\\n    require(_token != address(0));\\n\\n    rate = _rate;\\n    wallet = _wallet;\\n    token = _token;\\n  }\\n\\n  // -----------------------------------------\\n  // Crowdsale external interface\\n  // -----------------------------------------\\n\\n  /**\\n   * @dev fallback function ***DO NOT OVERRIDE***\\n   */\\n  function () external payable {\\n    buyTokens(msg.sender);\\n  }\\n\\n  /**\\n   * @dev low level token purchase ***DO NOT OVERRIDE***\\n   * @param _beneficiary Address performing the token purchase\\n   */\\n  function buyTokens(address _beneficiary) public payable {\\n\\n    uint256 weiAmount = msg.value;\\n    _preValidatePurchase(_beneficiary, weiAmount);\\n\\n    // calculate token amount to be created\\n    uint256 tokens = _getTokenAmount(weiAmount);\\n\\n    // update state\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    _processPurchase(_beneficiary, tokens);\\n    emit TokenPurchase(\\n      msg.sender,\\n      _beneficiary,\\n      weiAmount,\\n      tokens\\n    );\\n\\n    _updatePurchasingState(_beneficiary, weiAmount);\\n\\n    _forwardFunds();\\n    _postValidatePurchase(_beneficiary, weiAmount);\\n  }\\n\\n  // -----------------------------------------\\n  // Internal interface (extensible)\\n  // -----------------------------------------\\n\\n  /**\\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n   * Example from CappedCrowdsale.sol\\u0027s _preValidatePurchase method: \\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\\n   *   require(weiRaised.add(_weiAmount) \\u003c= cap);\\n   * @param _beneficiary Address performing the token purchase\\n   * @param _weiAmount Value in wei involved in the purchase\\n   */\\n  function _preValidatePurchase(\\n    address _beneficiary,\\n    uint256 _weiAmount\\n  )\\n    internal\\n  {\\n    require(_beneficiary != address(0));\\n    require(_weiAmount != 0);\\n  }\\n\\n  /**\\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\\n   * @param _beneficiary Address performing the token purchase\\n   * @param _weiAmount Value in wei involved in the purchase\\n   */\\n  function _postValidatePurchase(\\n    address _beneficiary,\\n    uint256 _weiAmount\\n  )\\n    internal\\n  {\\n    // optional override\\n    require(_beneficiary != address(0));\\n    require(_weiAmount != 0);\\n  }\\n\\n  /**\\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\\n   * @param _beneficiary Address performing the token purchase\\n   * @param _tokenAmount Number of tokens to be emitted\\n   */\\n  function _deliverTokens(\\n    address _beneficiary,\\n    uint256 _tokenAmount\\n  )\\n    internal\\n  {\\n    token.safeTransfer(_beneficiary, _tokenAmount);\\n  }\\n\\n  /**\\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\\n   * @param _beneficiary Address receiving the tokens\\n   * @param _tokenAmount Number of tokens to be purchased\\n   */\\n  function _processPurchase(\\n    address _beneficiary,\\n    uint256 _tokenAmount\\n  )\\n    internal \\n  {\\n    _deliverTokens(_beneficiary, _tokenAmount);\\n  }\\n\\n  /**\\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\\n   * @param _beneficiary Address receiving the tokens\\n   * @param _weiAmount Value in wei involved in the purchase\\n   */\\n  function _updatePurchasingState(\\n    address _beneficiary,\\n    uint256 _weiAmount\\n  )\\n    internal\\n  {\\n    // optional override\\n    require(_beneficiary != address(0));\\n    require(_weiAmount != 0);\\n  }\\n\\n  /**\\n   * @dev Override to extend the way in which ether is converted to tokens.\\n   * @param _weiAmount Value in wei to be converted into tokens\\n   * @return Number of tokens that can be purchased with the specified _weiAmount\\n   */\\n  function _getTokenAmount(uint256 _weiAmount)\\n    internal view returns (uint256)\\n  {\\n    return _weiAmount.mul(rate);\\n  }\\n\\n  /**\\n   * @dev Determines how ETH is stored/forwarded on purchases.\\n   */\\n  function _forwardFunds() internal {\\n    wallet.transfer(msg.value);\\n  }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address _owner, address _spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool);\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address _who) public view returns (uint256);\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"KIRIN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.24;\\n\\nimport \\\"./MintableToken.sol\\\";\\nimport \\\"./BurnableToken.sol\\\";\\nimport \\\"./PausableToken.sol\\\";\\n \\ncontract KIRIN is MintableToken, BurnableToken, PausableToken {\\n    \\n    string public name = \\\"KIRIN\\\";\\n    string public symbol = \\\"KIRIN\\\"; // Currency Unit\\n    uint   public decimals = 8;     // Decimals Point\\n    uint   public INITIAL_SUPPLY = 51000000000 * (10 ** decimals);\\n\\n    mapping (address =\\u003e uint256) public airDropHistory;\\n    event AirDrop(address _receiver, uint256 _amount);\\n\\n    // Constructor\\n    constructor() public {\\n    \\ttotalSupply_ = INITIAL_SUPPLY;\\n    \\tbalances[msg.sender] = INITIAL_SUPPLY;\\n    \\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n    }\\n    \\n    // Airdrop\\n    function dropToken(address[] memory receivers, uint256[] memory values) public {\\n        require(receivers.length != 0);\\n        require(receivers.length == values.length);\\n\\n        for (uint256 i = 0; i \\u003c receivers.length; i++) {\\n            address receiver = receivers[i];\\n            uint256 amount = values[i];\\n\\n            transfer(receiver, amount);\\n            airDropHistory[receiver] += amount;\\n\\n            emit AirDrop(receiver, amount);\\n        }\\n    }\\n}\\n\"},\"KIRINCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimedCrowdsale.sol\\\";\\nimport \\\"./MintedCrowdsale.sol\\\";\\n\\ncontract KIRINCrowdsale is TimedCrowdsale, MintedCrowdsale {\\n    \\n    // Constructor\\n    constructor() public {\\n    }\\n}\"},\"MintableToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n\\n/**\\n * @title Mintable token\\n * @dev Simple ERC20 Token example, with mintable token creation\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n */\\ncontract MintableToken is StandardToken, Ownable {\\n  event Mint(address indexed to, uint256 amount);\\n  event MintFinished();\\n\\n  bool public mintingFinished = false;\\n\\n\\n  modifier canMint() {\\n    require(!mintingFinished);\\n    _;\\n  }\\n\\n  modifier hasMintPermission() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Function to mint tokens\\n   * @param _to The address that will receive the minted tokens.\\n   * @param _amount The amount of tokens to mint.\\n   * @return A boolean that indicates if the operation was successful.\\n   */\\n  function mint(\\n    address _to,\\n    uint256 _amount\\n  )\\n    public\\n    hasMintPermission\\n    canMint\\n    returns (bool)\\n  {\\n    totalSupply_ = totalSupply_.add(_amount);\\n    balances[_to] = balances[_to].add(_amount);\\n    emit Mint(_to, _amount);\\n    emit Transfer(address(0), _to, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to stop minting new tokens.\\n   * @return True if the operation was successful.\\n   */\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n    mintingFinished = true;\\n    emit MintFinished();\\n    return true;\\n  }\\n}\\n\"},\"MintedCrowdsale.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./Crowdsale.sol\\\";\\nimport \\\"./MintableToken.sol\\\";\\n\\n\\n/**\\n * @title MintedCrowdsale\\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\\n * Token ownership should be transferred to MintedCrowdsale for minting.\\n */\\ncontract MintedCrowdsale is Crowdsale {\\n\\n  /**\\n   * @dev Overrides delivery by minting tokens upon purchase.\\n   * @param _beneficiary Token purchaser\\n   * @param _tokenAmount Number of tokens to be minted\\n   */\\n  function _deliverTokens(\\n    address _beneficiary,\\n    uint256 _tokenAmount\\n  )\\n    internal\\n  {\\n    // Potentially dangerous assumption about the type of the token.\\n    require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() public onlyOwner whenNotPaused {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() public onlyOwner whenPaused {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\"},\"PausableToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n\\n/**\\n * @title Pausable token\\n * @dev StandardToken modified with pausable transfers.\\n **/\\ncontract PausableToken is StandardToken, Pausable {\\n\\n  function transfer(\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(\\n    address _spender,\\n    uint256 _value\\n  )\\n    public\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function increaseApproval(\\n    address _spender,\\n    uint _addedValue\\n  )\\n    public\\n    whenNotPaused\\n    returns (bool success)\\n  {\\n    return super.increaseApproval(_spender, _addedValue);\\n  }\\n\\n  function decreaseApproval(\\n    address _spender,\\n    uint _subtractedValue\\n  )\\n    public\\n    whenNotPaused\\n    returns (bool success)\\n  {\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n  }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    ERC20Basic _token,\\n    address _to,\\n    uint256 _value\\n  )\\n    internal\\n  {\\n    require(_token.transfer(_to, _value));\\n  }\\n\\n  function safeTransferFrom(\\n    ERC20 _token,\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    internal\\n  {\\n    require(_token.transferFrom(_from, _to, _value));\\n  }\\n\\n  function safeApprove(\\n    ERC20 _token,\\n    address _spender,\\n    uint256 _value\\n  )\\n    internal\\n  {\\n    require(_token.approve(_spender, _value));\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn\\u0027t hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b \\u003c= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c \\u003e= _a);\\n    return c;\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n    require(_to != address(0));\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint256 _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint256 _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e= oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"},\"TimedCrowdsale.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Crowdsale.sol\\\";\\n\\n\\n/**\\n * @title TimedCrowdsale\\n * @dev Crowdsale accepting contributions only within a time frame.\\n */\\ncontract TimedCrowdsale is Crowdsale {\\n  using SafeMath for uint256;\\n\\n  uint256 public openingTime;\\n  uint256 public closingTime;\\n\\n  /**\\n   * @dev Reverts if not in crowdsale time range.\\n   */\\n  modifier onlyWhileOpen {\\n    // solium-disable-next-line security/no-block-members\\n    require(block.timestamp \\u003e= openingTime \\u0026\\u0026 block.timestamp \\u003c= closingTime);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Constructor, takes crowdsale opening and closing times.\\n   * @param _openingTime Crowdsale opening time\\n   * @param _closingTime Crowdsale closing time\\n   */\\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\\n    // solium-disable-next-line security/no-block-members\\n    require(_openingTime \\u003e= block.timestamp);\\n    require(_closingTime \\u003e= _openingTime);\\n\\n    openingTime = _openingTime;\\n    closingTime = _closingTime;\\n  }\\n\\n  /**\\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n   * @return Whether crowdsale period has elapsed\\n   */\\n  function hasClosed() public view returns (bool) {\\n    // solium-disable-next-line security/no-block-members\\n    return block.timestamp \\u003e closingTime;\\n  }\\n\\n  /**\\n   * @dev Extend parent behavior requiring to be within contributing period\\n   * @param _beneficiary Token purchaser\\n   * @param _weiAmount Amount of wei contributed\\n   */\\n  function _preValidatePurchase(\\n    address _beneficiary,\\n    uint256 _weiAmount\\n  )\\n    internal\\n    onlyWhileOpen\\n  {\\n    super._preValidatePurchase(_beneficiary, _weiAmount);\\n  }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"dropToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airDropHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KIRIN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://13f91fa132de28d5f7d1e3277e61258afcc5e13c1df95931a8e169d95db6c004"}]}