{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ProtocolAdapterTypes {\r\n    enum OptionType {Invalid, Put, Call}\r\n\r\n    // We have 2 types of purchase methods so far - by contract and by 0x.\r\n    // Contract is simple because it involves just specifying the option terms you want to buy.\r\n    // ZeroEx involves an off-chain API call which prepares a ZeroExOrder object to be passed into the tx.\r\n    enum PurchaseMethod {Invalid, Contract, ZeroEx}\r\n\r\n    /**\r\n     * @notice Terms of an options contract\r\n     * @param underlying is the underlying asset of the options. E.g. For ETH $800 CALL, ETH is the underlying.\r\n     * @param strikeAsset is the asset used to denote the asset paid out when exercising the option. E.g. For ETH $800 CALL, USDC is the underlying.\r\n     * @param collateralAsset is the asset used to collateralize a short position for the option.\r\n     * @param expiry is the expiry of the option contract. Users can only exercise after expiry in Europeans.\r\n     * @param strikePrice is the strike price of an optio contract. E.g. For ETH $800 CALL, 800*10**18 is the USDC.\r\n     * @param optionType is the type of option, can only be OptionType.Call or OptionType.Put\r\n     * @param paymentToken is the token used to purchase the option. E.g. Buy UNI/USDC CALL with WETH as the paymentToken.\r\n     */\r\n    struct OptionTerms {\r\n        address underlying;\r\n        address strikeAsset;\r\n        address collateralAsset;\r\n        uint256 expiry;\r\n        uint256 strikePrice;\r\n        ProtocolAdapterTypes.OptionType optionType;\r\n        address paymentToken;\r\n    }\r\n\r\n    /**\r\n     * @notice 0x order for purchasing otokens\r\n     * @param exchangeAddress [deprecated] is the address we call to conduct a 0x trade. Slither flagged this as a potential vulnerability so we hardcoded it.\r\n     * @param buyTokenAddress is the otoken address\r\n     * @param sellTokenAddress is the token used to purchase USDC. This is USDC most of the time.\r\n     * @param allowanceTarget is the address the adapter needs to provide sellToken allowance to so the swap happens\r\n     * @param protocolFee is the fee paid (in ETH) when conducting the trade\r\n     * @param makerAssetAmount is the buyToken amount\r\n     * @param takerAssetAmount is the sellToken amount\r\n     * @param swapData is the encoded msg.data passed by the 0x api response\r\n     */\r\n    struct ZeroExOrder {\r\n        address exchangeAddress;\r\n        address buyTokenAddress;\r\n        address sellTokenAddress;\r\n        address allowanceTarget;\r\n        uint256 protocolFee;\r\n        uint256 makerAssetAmount;\r\n        uint256 takerAssetAmount;\r\n        bytes swapData;\r\n    }\r\n}\r\n\r\ninterface IProtocolAdapter {\r\n    /**\r\n     * @notice Emitted when a new option contract is purchased\r\n     */\r\n    event Purchased(\r\n        address indexed caller,\r\n        string indexed protocolName,\r\n        address indexed underlying,\r\n        uint256 amount,\r\n        uint256 optionID\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when an option contract is exercised\r\n     */\r\n    event Exercised(\r\n        address indexed caller,\r\n        address indexed options,\r\n        uint256 indexed optionID,\r\n        uint256 amount,\r\n        uint256 exerciseProfit\r\n    );\r\n\r\n    /**\r\n     * @notice Name of the adapter. E.g. \"HEGIC\", \"OPYN_V1\". Used as index key for adapter addresses\r\n     */\r\n    function protocolName() external pure returns (string memory);\r\n\r\n    /**\r\n     * @notice Boolean flag to indicate whether to use option IDs or not.\r\n     * Fungible protocols normally use tokens to represent option contracts.\r\n     */\r\n    function nonFungible() external pure returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the purchase method used to purchase options\r\n     */\r\n    function purchaseMethod()\r\n        external\r\n        pure\r\n        returns (ProtocolAdapterTypes.PurchaseMethod);\r\n\r\n    /**\r\n     * @notice Check if an options contract exist based on the passed parameters.\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice Get the options contract's address based on the passed parameters\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function getOptionsAddress(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\r\n    ) external view returns (address);\r\n\r\n    /**\r\n     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param purchaseAmount is the number of options purchased\r\n     */\r\n    function premium(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 purchaseAmount\r\n    ) external view returns (uint256 cost);\r\n\r\n    /**\r\n     * @notice Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.\r\n     * @param options is the address of the options contract\r\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\r\n     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\r\n     */\r\n    function exerciseProfit(\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount\r\n    ) external view returns (uint256 profit);\r\n\r\n    function canExercise(\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Purchases the options contract.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param amount is the purchase amount in Wad units (10**18)\r\n     */\r\n    function purchase(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 amount,\r\n        uint256 maxCost\r\n    ) external payable returns (uint256 optionID);\r\n\r\n    /**\r\n     * @notice Exercises the options contract.\r\n     * @param options is the address of the options contract\r\n     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\r\n     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\r\n     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\r\n     */\r\n    function exercise(\r\n        address options,\r\n        uint256 optionID,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Opens a short position for a given `optionTerms`.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param amount is the short position amount\r\n     */\r\n    function createShort(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Closes an existing short position. In the future, we may want to open this up to specifying a particular short position to close.\r\n     */\r\n    function closeShort() external returns (uint256);\r\n}\r\n\r\nlibrary GammaTypes {\r\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\r\n    struct Vault {\r\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\r\n        address[] shortOtokens;\r\n        // addresses of oTokens a user has bought and deposited in this vault\r\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\r\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\r\n        address[] longOtokens;\r\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\r\n        address[] collateralAssets;\r\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\r\n        uint256[] shortAmounts;\r\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\r\n        uint256[] longAmounts;\r\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\r\n        uint256[] collateralAmounts;\r\n    }\r\n}\r\n\r\ninterface OtokenInterface {\r\n    function addressBook() external view returns (address);\r\n\r\n    function underlyingAsset() external view returns (address);\r\n\r\n    function strikeAsset() external view returns (address);\r\n\r\n    function collateralAsset() external view returns (address);\r\n\r\n    function strikePrice() external view returns (uint256);\r\n\r\n    function expiryTimestamp() external view returns (uint256);\r\n\r\n    function isPut() external view returns (bool);\r\n\r\n    function init(\r\n        address _addressBook,\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external;\r\n\r\n    function mintOtoken(address account, uint256 amount) external;\r\n\r\n    function burnOtoken(address account, uint256 amount) external;\r\n}\r\n\r\ninterface IOtokenFactory {\r\n    event OtokenCreated(\r\n        address tokenAddress,\r\n        address creator,\r\n        address indexed underlying,\r\n        address indexed strike,\r\n        address indexed collateral,\r\n        uint256 strikePrice,\r\n        uint256 expiry,\r\n        bool isPut\r\n    );\r\n\r\n    function oTokens(uint256 index) external returns (address);\r\n\r\n    function getOtokensLength() external view returns (uint256);\r\n\r\n    function getOtoken(\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external view returns (address);\r\n\r\n    function createOtoken(\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external returns (address);\r\n}\r\n\r\ninterface IController {\r\n    // possible actions that can be performed\r\n    enum ActionType {\r\n        OpenVault,\r\n        MintShortOption,\r\n        BurnShortOption,\r\n        DepositLongOption,\r\n        WithdrawLongOption,\r\n        DepositCollateral,\r\n        WithdrawCollateral,\r\n        SettleVault,\r\n        Redeem,\r\n        Call\r\n    }\r\n\r\n    struct ActionArgs {\r\n        // type of action that is being performed on the system\r\n        ActionType actionType;\r\n        // address of the account owner\r\n        address owner;\r\n        // address which we move assets from or to (depending on the action type)\r\n        address secondAddress;\r\n        // asset that is to be transfered\r\n        address asset;\r\n        // index of the vault that is to be modified (if any)\r\n        uint256 vaultId;\r\n        // amount of asset that is to be transfered\r\n        uint256 amount;\r\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // any other data that needs to be passed in for arbitrary function calls\r\n        bytes data;\r\n    }\r\n\r\n    struct RedeemArgs {\r\n        // address to which we pay out the oToken proceeds\r\n        address receiver;\r\n        // oToken that is to be redeemed\r\n        address otoken;\r\n        // amount of oTokens that is to be redeemed\r\n        uint256 amount;\r\n    }\r\n\r\n    function getPayout(address _otoken, uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function operate(ActionArgs[] calldata _actions) external;\r\n\r\n    function getAccountVaultCounter(address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function getVault(address _owner, uint256 _vaultId)\r\n        external\r\n        view\r\n        returns (GammaTypes.Vault memory);\r\n\r\n    function getProceed(address _owner, uint256 _vaultId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isSettlementAllowed(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        uint256 _expiry\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface OracleInterface {\r\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp)\r\n        external\r\n        view\r\n        returns (uint256, bool);\r\n\r\n    function getDisputer() external view returns (address);\r\n\r\n    function getPricer(address _asset) external view returns (address);\r\n\r\n    function getPrice(address _asset) external view returns (uint256);\r\n\r\n    function getPricerLockingPeriod(address _pricer)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPricerDisputePeriod(address _pricer)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Non-view function\r\n\r\n    function setAssetPricer(address _asset, address _pricer) external;\r\n\r\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\r\n\r\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\r\n\r\n    function setExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external;\r\n\r\n    function disputeExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external;\r\n\r\n    function setDisputer(address _disputer) external;\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    //rounds to zero if x*y < RAY / 2\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// \r\ncontract GammaAdapter is IProtocolAdapter, DSMath {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // gammaController is the top-level contract in Gamma protocol which allows users to perform multiple actions on their vaults and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\r\n    address public immutable gammaController;\r\n\r\n    // oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable oTokenFactory;\r\n\r\n    // _swapWindow is the number of seconds in which a Uniswap swap is valid from block.timestamp.\r\n    uint256 private constant SWAP_WINDOW = 900;\r\n\r\n    string private constant _name = \"OPYN_GAMMA\";\r\n    bool private constant _nonFungible = false;\r\n\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Otoken.sol#L70\r\n    uint256 private constant OTOKEN_DECIMALS = 10**8;\r\n\r\n    uint256 private constant SLIPPAGE_TOLERANCE = 0.75 ether;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool. Needed to approve collateral.safeTransferFrom for minting otokens. https://github.com/opynfinance/GammaProtocol/blob/master/contracts/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // USDCETHPriceFeed is the USDC/ETH Chainlink price feed used to perform swaps, as an alternative to getAmountsIn\r\n    AggregatorV3Interface public immutable USDCETHPriceFeed;\r\n\r\n    // UNISWAP_ROUTER is Uniswap's periphery contract for conducting trades. Using this contract is gas inefficient and should only used for convenience i.e. admin functions\r\n    address public immutable UNISWAP_ROUTER;\r\n\r\n    // WETH9 contract\r\n    address public immutable WETH;\r\n\r\n    // USDC is the strike asset in Gamma Protocol\r\n    address public immutable USDC;\r\n\r\n    // 0x proxy for performing buys\r\n    address public immutable ZERO_EX_EXCHANGE_V3;\r\n\r\n    /**\r\n     * @notice Constructor for the GammaAdapter which initializes a few immutable variables to be used by instrument contracts.\r\n     * @param _oTokenFactory is the Gamma protocol factory contract which spawns otokens https://github.com/opynfinance/GammaProtocol/blob/master/contracts/OtokenFactory.sol\r\n     * @param _gammaController is a top-level contract which allows users to perform multiple actions in the Gamma protocol https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\r\n     */\r\n    constructor(\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _usdcEthPriceFeed,\r\n        address _uniswapRouter,\r\n        address _weth,\r\n        address _usdc,\r\n        address _zeroExExchange\r\n    ) {\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n        require(_usdcEthPriceFeed != address(0), \"!_usdcEthPriceFeed\");\r\n        require(_uniswapRouter != address(0), \"!_uniswapRouter\");\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_zeroExExchange != address(0), \"!_zeroExExchange\");\r\n\r\n        oTokenFactory = _oTokenFactory;\r\n        gammaController = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        USDCETHPriceFeed = AggregatorV3Interface(_usdcEthPriceFeed);\r\n        UNISWAP_ROUTER = _uniswapRouter;\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        ZERO_EX_EXCHANGE_V3 = _zeroExExchange;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function protocolName() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function nonFungible() external pure override returns (bool) {\r\n        return _nonFungible;\r\n    }\r\n\r\n    function purchaseMethod()\r\n        external\r\n        pure\r\n        override\r\n        returns (ProtocolAdapterTypes.PurchaseMethod)\r\n    {\r\n        return ProtocolAdapterTypes.PurchaseMethod.ZeroEx;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an options contract exist based on the passed parameters.\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return lookupOToken(optionTerms) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the options contract's address based on the passed parameters\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function getOptionsAddress(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms\r\n    ) external view override returns (address) {\r\n        return lookupOToken(optionTerms);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\r\n     */\r\n    function premium(ProtocolAdapterTypes.OptionTerms calldata, uint256)\r\n        external\r\n        pure\r\n        override\r\n        returns (uint256 cost)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Amount of profit made from exercising an option contract abs(current price - strike price). 0 if exercising out-the-money.\r\n     * @param options is the address of the options contract\r\n     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\r\n     */\r\n    function exerciseProfit(\r\n        address options,\r\n        uint256,\r\n        uint256 amount\r\n    ) public view override returns (uint256 profit) {\r\n        IController controller = IController(gammaController);\r\n        OracleInterface oracle = OracleInterface(controller.oracle());\r\n        OtokenInterface otoken = OtokenInterface(options);\r\n\r\n        uint256 spotPrice = oracle.getPrice(otoken.underlyingAsset());\r\n        uint256 strikePrice = otoken.strikePrice();\r\n        bool isPut = otoken.isPut();\r\n\r\n        if (!isPut && spotPrice <= strikePrice) {\r\n            return 0;\r\n        } else if (isPut && spotPrice >= strikePrice) {\r\n            return 0;\r\n        }\r\n\r\n        return controller.getPayout(options, amount.div(10**10));\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that returns true if the option can be exercised now.\r\n     * @param options is the address of the otoken\r\n     * @param amount is amount of otokens to exercise\r\n     */\r\n    function canExercise(\r\n        address options,\r\n        uint256,\r\n        uint256 amount\r\n    ) public view override returns (bool) {\r\n        OtokenInterface otoken = OtokenInterface(options);\r\n\r\n        address underlying = otoken.underlyingAsset();\r\n        uint256 expiry = otoken.expiryTimestamp();\r\n\r\n        if (!isSettlementAllowed(underlying, expiry)) {\r\n            return false;\r\n        }\r\n        // use `0` as the optionID because it doesn't do anything for exerciseProfit\r\n        if (exerciseProfit(options, 0, amount) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Stubbed out for conforming to the IProtocolAdapter interface.\r\n     */\r\n    function purchase(\r\n        ProtocolAdapterTypes.OptionTerms calldata,\r\n        uint256,\r\n        uint256\r\n    ) external payable override returns (uint256) {}\r\n\r\n    /**\r\n     * @notice Purchases otokens using a 0x order struct\r\n     * It is the obligation of the delegate-calling contract to return the remaining\r\n     * msg.value back to the user.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param zeroExOrder is the 0x order struct constructed using the 0x API response passed by the frontend.\r\n     */\r\n    function purchaseWithZeroEx(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        ProtocolAdapterTypes.ZeroExOrder calldata zeroExOrder\r\n    ) external payable {\r\n        require(\r\n            msg.value >= zeroExOrder.protocolFee,\r\n            \"Value cannot cover protocolFee\"\r\n        );\r\n        require(\r\n            zeroExOrder.sellTokenAddress == USDC,\r\n            \"Sell token has to be USDC\"\r\n        );\r\n\r\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_ROUTER);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = zeroExOrder.sellTokenAddress;\r\n\r\n        (, int256 latestPrice, , , ) = USDCETHPriceFeed.latestRoundData();\r\n\r\n        // Because we guard that zeroExOrder.sellTokenAddress == USDC\r\n        // We can assume that the decimals == 6\r\n        uint256 soldETH =\r\n            zeroExOrder.takerAssetAmount.mul(uint256(latestPrice)).div(\r\n                10**assetDecimals(zeroExOrder.sellTokenAddress)\r\n            );\r\n\r\n        router.swapETHForExactTokens{value: soldETH}(\r\n            zeroExOrder.takerAssetAmount,\r\n            path,\r\n            address(this),\r\n            block.timestamp + SWAP_WINDOW\r\n        );\r\n\r\n        require(\r\n            IERC20(zeroExOrder.sellTokenAddress).balanceOf(address(this)) >=\r\n                zeroExOrder.takerAssetAmount,\r\n            \"Not enough takerAsset balance\"\r\n        );\r\n\r\n        // double approve to fix non-compliant ERC20s\r\n        IERC20(zeroExOrder.sellTokenAddress).safeApprove(\r\n            zeroExOrder.allowanceTarget,\r\n            0\r\n        );\r\n        IERC20(zeroExOrder.sellTokenAddress).safeApprove(\r\n            zeroExOrder.allowanceTarget,\r\n            zeroExOrder.takerAssetAmount\r\n        );\r\n\r\n        require(\r\n            address(this).balance >= zeroExOrder.protocolFee,\r\n            \"Not enough balance for protocol fee\"\r\n        );\r\n\r\n        (bool success, ) =\r\n            ZERO_EX_EXCHANGE_V3.call{value: zeroExOrder.protocolFee}(\r\n                zeroExOrder.swapData\r\n            );\r\n\r\n        require(success, \"0x swap failed\");\r\n\r\n        require(\r\n            IERC20(zeroExOrder.buyTokenAddress).balanceOf(address(this)) >=\r\n                zeroExOrder.makerAssetAmount,\r\n            \"Not enough buyToken balance\"\r\n        );\r\n\r\n        emit Purchased(\r\n            msg.sender,\r\n            _name,\r\n            optionTerms.underlying,\r\n            soldETH.add(zeroExOrder.protocolFee),\r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Exercises the options contract.\r\n     * @param options is the address of the options contract\r\n     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\r\n     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\r\n     */\r\n    function exercise(\r\n        address options,\r\n        uint256,\r\n        uint256 amount,\r\n        address recipient\r\n    ) public payable override {\r\n        OtokenInterface otoken = OtokenInterface(options);\r\n\r\n        require(\r\n            block.timestamp >= otoken.expiryTimestamp(),\r\n            \"oToken not expired yet\"\r\n        );\r\n\r\n        // Since we accept all amounts in 10**18, we need to normalize it down to the decimals otokens use (10**8)\r\n        uint256 scaledAmount = amount.div(10**10);\r\n\r\n        // use `0` as the optionID because it doesn't do anything for exerciseProfit\r\n        uint256 profit = exerciseProfit(options, 0, amount);\r\n\r\n        require(profit > 0, \"Not profitable to exercise\");\r\n\r\n        IController.ActionArgs memory action =\r\n            IController.ActionArgs(\r\n                IController.ActionType.Redeem,\r\n                address(this), // owner\r\n                address(this), // receiver -  we need this contract to receive so we can swap at the end\r\n                options, // asset, otoken\r\n                0, // vaultId\r\n                scaledAmount,\r\n                0, //index\r\n                \"\" //data\r\n            );\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n        actions[0] = action;\r\n\r\n        IController(gammaController).operate(actions);\r\n\r\n        uint256 profitInUnderlying =\r\n            swapExercisedProfitsToUnderlying(options, profit, recipient);\r\n\r\n        emit Exercised(msg.sender, options, 0, amount, profitInUnderlying);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps the exercised profit (originally in the collateral token) into the `underlying` token.\r\n     *         This simplifies the payout of an option. Put options pay out in USDC, so we swap USDC back\r\n     *         into WETH and transfer it to the recipient.\r\n     * @param otokenAddress is the otoken's address\r\n     * @param profitInCollateral is the profit after exercising denominated in the collateral - this could be a token with different decimals\r\n     * @param recipient is the recipient of the underlying tokens after the swap\r\n     */\r\n    function swapExercisedProfitsToUnderlying(\r\n        address otokenAddress,\r\n        uint256 profitInCollateral,\r\n        address recipient\r\n    ) internal returns (uint256 profitInUnderlying) {\r\n        OtokenInterface otoken = OtokenInterface(otokenAddress);\r\n        address collateral = otoken.collateralAsset();\r\n        IERC20 collateralToken = IERC20(collateral);\r\n\r\n        require(\r\n            collateralToken.balanceOf(address(this)) >= profitInCollateral,\r\n            \"Not enough collateral from exercising\"\r\n        );\r\n\r\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_ROUTER);\r\n\r\n        IWETH weth = IWETH(WETH);\r\n\r\n        if (collateral == address(weth)) {\r\n            profitInUnderlying = profitInCollateral;\r\n            weth.withdraw(profitInCollateral);\r\n            (bool success, ) = recipient.call{value: profitInCollateral}(\"\");\r\n            require(success, \"Failed to transfer exercise profit\");\r\n        } else {\r\n            // just guard against anything that's not USDC\r\n            // we will revisit opening up other collateral types for puts\r\n            // when they get added\r\n            require(collateral == USDC, \"!USDC\");\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = collateral;\r\n            path[1] = address(weth);\r\n\r\n            (, int256 latestPrice, , , ) = USDCETHPriceFeed.latestRoundData();\r\n\r\n            profitInUnderlying = wdiv(profitInCollateral, uint256(latestPrice))\r\n                .mul(10**assetDecimals(collateral));\r\n\r\n            require(profitInUnderlying > 0, \"Swap is unprofitable\");\r\n\r\n            collateralToken.safeApprove(UNISWAP_ROUTER, 0);\r\n            collateralToken.safeApprove(UNISWAP_ROUTER, profitInCollateral);\r\n\r\n            uint256[] memory amountsOut =\r\n                router.swapExactTokensForETH(\r\n                    profitInCollateral,\r\n                    wmul(profitInUnderlying, SLIPPAGE_TOLERANCE),\r\n                    path,\r\n                    recipient,\r\n                    block.timestamp + SWAP_WINDOW\r\n                );\r\n\r\n            profitInUnderlying = amountsOut[1];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a short otoken position by opening a vault, depositing collateral and minting otokens.\r\n     * The sale of otokens is left to the caller contract to perform.\r\n     * @param optionTerms is the terms of the option contract\r\n     * @param depositAmount is the amount deposited to open the vault. This amount will determine how much otokens to mint.\r\n     */\r\n    function createShort(\r\n        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\r\n        uint256 depositAmount\r\n    ) external override returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n        uint256 newVaultID =\r\n            (controller.getAccountVaultCounter(address(this))).add(1);\r\n\r\n        address oToken = lookupOToken(optionTerms);\r\n        require(oToken != address(0), \"Invalid oToken\");\r\n\r\n        address collateralAsset = optionTerms.collateralAsset;\r\n        if (collateralAsset == address(0)) {\r\n            collateralAsset = WETH;\r\n        }\r\n        IERC20 collateralToken = IERC20(collateralAsset);\r\n\r\n        uint256 collateralDecimals = assetDecimals(collateralAsset);\r\n        uint256 mintAmount;\r\n\r\n        if (optionTerms.optionType == ProtocolAdapterTypes.OptionType.Call) {\r\n            mintAmount = depositAmount;\r\n            if (collateralDecimals >= 8) {\r\n                uint256 scaleBy = 10**(collateralDecimals - 8); // oTokens have 8 decimals\r\n                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\r\n                require(\r\n                    mintAmount > 0,\r\n                    \"Must deposit more than 10**8 collateral\"\r\n                );\r\n            }\r\n        } else {\r\n            mintAmount = wdiv(depositAmount, optionTerms.strikePrice)\r\n                .mul(OTOKEN_DECIMALS)\r\n                .div(10**collateralDecimals);\r\n        }\r\n\r\n        // double approve to fix non-compliant ERC20s\r\n        collateralToken.safeApprove(MARGIN_POOL, 0);\r\n        collateralToken.safeApprove(MARGIN_POOL, depositAmount);\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](3);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.OpenVault,\r\n            address(this), // owner\r\n            address(this), // receiver -  we need this contract to receive so we can swap at the end\r\n            address(0), // asset, otoken\r\n            newVaultID, // vaultId\r\n            0, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.DepositCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            collateralAsset, // deposited asset\r\n            newVaultID, // vaultId\r\n            depositAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[2] = IController.ActionArgs(\r\n            IController.ActionType.MintShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            oToken, // deposited asset\r\n            newVaultID, // vaultId\r\n            mintAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\r\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time. Since calling `closeShort` deletes vaults,\r\n     * this assumption should hold.\r\n     */\r\n    function closeShort() external override returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No active short\");\r\n\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n        OtokenInterface otoken = OtokenInterface(vault.shortOtokens[0]);\r\n\r\n        bool settlementAllowed =\r\n            isSettlementAllowed(\r\n                otoken.underlyingAsset(),\r\n                otoken.expiryTimestamp()\r\n            );\r\n\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        IController.ActionArgs[] memory actions;\r\n\r\n        // If it is after expiry, we need to settle the short position using the normal way\r\n        // Delete the vault and withdraw all remaining collateral from the vault\r\n        //\r\n        // If it is before expiry, we need to burn otokens in order to withdraw collateral from the vault\r\n        if (settlementAllowed) {\r\n            actions = new IController.ActionArgs[](1);\r\n\r\n            actions[0] = IController.ActionArgs(\r\n                IController.ActionType.SettleVault,\r\n                address(this), // owner\r\n                address(this), // address to transfer to\r\n                address(0), // not used\r\n                vaultID, // vaultId\r\n                0, // not used\r\n                0, // not used\r\n                \"\" // not used\r\n            );\r\n\r\n            controller.operate(actions);\r\n        } else {\r\n            // Burning otokens given by vault.shortAmounts[0] (closing the entire short position),\r\n            // then withdrawing all the collateral from the vault\r\n            actions = new IController.ActionArgs[](2);\r\n\r\n            actions[0] = IController.ActionArgs(\r\n                IController.ActionType.BurnShortOption,\r\n                address(this), // owner\r\n                address(this), // address to transfer to\r\n                address(otoken), // otoken address\r\n                vaultID, // vaultId\r\n                vault.shortAmounts[0], // amount\r\n                0, //index\r\n                \"\" //data\r\n            );\r\n\r\n            actions[1] = IController.ActionArgs(\r\n                IController.ActionType.WithdrawCollateral,\r\n                address(this), // owner\r\n                address(this), // address to transfer to\r\n                address(collateralToken), // withdrawn asset\r\n                vaultID, // vaultId\r\n                vault.collateralAmounts[0], // amount\r\n                0, //index\r\n                \"\" //data\r\n            );\r\n\r\n            controller.operate(actions);\r\n        }\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Gas-optimized getter for checking if settlement is allowed. Looks up from the oracles with asset address and expiry\r\n     * @param underlying is the address of the underlying for an otoken\r\n     * @param expiry is the timestamp of the otoken's expiry\r\n     */\r\n    function isSettlementAllowed(address underlying, uint256 expiry)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        IController controller = IController(gammaController);\r\n        OracleInterface oracle = OracleInterface(controller.oracle());\r\n\r\n        bool underlyingFinalized =\r\n            oracle.isDisputePeriodOver(underlying, expiry);\r\n\r\n        bool strikeFinalized = oracle.isDisputePeriodOver(USDC, expiry);\r\n\r\n        // We can avoid checking the dispute period for the collateral for now\r\n        // Because the collateral is either the underlying or USDC at this point\r\n        // We do not have, for example, ETH-collateralized UNI otoken vaults\r\n        // bool collateralFinalized = oracle.isDisputePeriodOver(isPut ? USDC : underlying, expiry);\r\n\r\n        return underlyingFinalized && strikeFinalized;\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to get the decimals of an asset. Will just hardcode for the time being.\r\n     * @param asset is the token which we want to know the decimals\r\n     */\r\n    function assetDecimals(address asset) private view returns (uint256) {\r\n        // USDC\r\n        if (asset == USDC) {\r\n            return 6;\r\n        }\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @notice Function to lookup oToken addresses. oToken addresses are keyed by an ABI-encoded byte string\r\n     * @param optionTerms is the terms of the option contract\r\n     */\r\n    function lookupOToken(ProtocolAdapterTypes.OptionTerms memory optionTerms)\r\n        public\r\n        view\r\n        returns (address oToken)\r\n    {\r\n        IOtokenFactory factory = IOtokenFactory(oTokenFactory);\r\n\r\n        bool isPut =\r\n            optionTerms.optionType == ProtocolAdapterTypes.OptionType.Put;\r\n        address underlying = optionTerms.underlying;\r\n\r\n        /**\r\n         * In many instances, we just use 0x0 to indicate ETH as the underlying asset.\r\n         * We need to unify usage of 0x0 as WETH instead.\r\n         */\r\n        if (optionTerms.underlying == address(0)) {\r\n            underlying = WETH;\r\n        }\r\n\r\n        // Put otokens have USDC as the backing collateral\r\n        // so we can ignore the collateral asset passed in option terms\r\n        address collateralAsset;\r\n        if (isPut) {\r\n            collateralAsset = USDC;\r\n        } else {\r\n            collateralAsset = underlying;\r\n        }\r\n\r\n        oToken = factory.getOtoken(\r\n            underlying,\r\n            optionTerms.strikeAsset,\r\n            collateralAsset,\r\n            optionTerms.strikePrice.div(10**10),\r\n            optionTerms.expiry,\r\n            isPut\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcEthPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroExExchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exerciseProfit\",\"type\":\"uint256\"}],\"name\":\"Exercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCETHPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_EX_EXCHANGE_V3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canExercise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"createShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exerciseProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gammaController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"getOptionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"lookupOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"}],\"name\":\"optionsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseMethod\",\"outputs\":[{\"internalType\":\"enum ProtocolAdapterTypes.PurchaseMethod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolAdapterTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolAdapterTypes.OptionTerms\",\"name\":\"optionTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProtocolAdapterTypes.ZeroExOrder\",\"name\":\"zeroExOrder\",\"type\":\"tuple\"}],\"name\":\"purchaseWithZeroEx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GammaAdapter","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007c06792af1632e77cb27a558dc0885338f4bdf8e0000000000000000000000004ccc2339f87f6c59c6893e1a678c2266ca58dc720000000000000000000000005934807cc0654d46755ebd2848840b616256c6ef000000000000000000000000986b5e1e1755e3c2440e960477f25201b0a8bbd40000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e75d42d1b7358b069912001352203782d388a1ca5a2a375867c2f9ba83443052"}]}