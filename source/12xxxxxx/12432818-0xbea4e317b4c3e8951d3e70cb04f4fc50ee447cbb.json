{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/model/BondModelV2Compounded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../lib/math/MathUtils.sol\\\";\\n\\nimport \\\"./ABondModelV2.sol\\\";\\n\\ncontract BondModelV2Compounded is ABondModelV2\\n{\\n    using SafeMath for uint256;\\n\\n    function gain(\\n        uint256 total_,\\n        uint256 loanable_,\\n        uint256 dailyRate_,\\n        uint256 principal_,\\n        uint16 forDays_\\n    )\\n      public view override\\n    returns (uint256)\\n    {\\n        if (0 == total_.add(principal_)) {\\n          return 0;\\n        }\\n\\n        uint256 dailyRateAprox = slippedDailyRate(dailyRate_, total_, loanable_, principal_, 0);\\n\\n        uint256 aproxGain = MathUtils.compound2(\\n          principal_,\\n          dailyRateAprox,\\n          forDays_\\n        ).sub(principal_);\\n\\n        uint256 rate = slippedDailyRate(dailyRate_, total_, loanable_, principal_, aproxGain);\\n\\n        return MathUtils.compound2(principal_, rate, forDays_).sub(principal_);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary MathUtils {\\n\\n    using SafeMath for uint256;\\n\\n    uint256 public constant EXP_SCALE = 1e18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x > y ? x : y;\\n    }\\n\\n    function compound(\\n        // in wei\\n        uint256 principal,\\n        // rate is * EXP_SCALE\\n        uint256 ratePerPeriod,\\n        uint16 periods\\n    ) internal pure returns (uint256) {\\n      if (0 == ratePerPeriod) {\\n        return principal;\\n      }\\n\\n      while (periods > 0) {\\n          // principal += principal * ratePerPeriod / EXP_SCALE;\\n          principal = principal.add(principal.mul(ratePerPeriod).div(EXP_SCALE));\\n          periods -= 1;\\n      }\\n\\n      return principal;\\n    }\\n\\n    function compound2(\\n      uint256 principal,\\n      uint256 ratePerPeriod,\\n      uint16 periods\\n    ) internal pure returns (uint256) {\\n      if (0 == ratePerPeriod) {\\n        return principal;\\n      }\\n\\n      while (periods > 0) {\\n        if (periods % 2 == 1) {\\n          //principal += principal * ratePerPeriod / EXP_SCALE;\\n          principal = principal.add(principal.mul(ratePerPeriod).div(EXP_SCALE));\\n          periods -= 1;\\n        } else {\\n          //ratePerPeriod = ((2 * ratePerPeriod * EXP_SCALE) + (ratePerPeriod * ratePerPeriod)) / EXP_SCALE;\\n          ratePerPeriod = ((uint256(2).mul(ratePerPeriod).mul(EXP_SCALE)).add(ratePerPeriod.mul(ratePerPeriod))).div(EXP_SCALE);\\n          periods /= 2;\\n        }\\n      }\\n\\n      return principal;\\n    }\\n\\n    function linearGain(\\n      uint256 principal,\\n      uint256 ratePerPeriod,\\n      uint16 periods\\n    ) internal pure returns (uint256) {\\n      return principal.add(\\n        fractionOf(principal, ratePerPeriod.mul(periods))\\n      );\\n    }\\n\\n    // computes a * f / EXP_SCALE\\n    function fractionOf(uint256 a, uint256 f) internal pure returns (uint256) {\\n      return a.mul(f).div(EXP_SCALE);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/model/ABondModelV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../lib/math/MathUtils.sol\\\";\\n\\nimport \\\"../Governed.sol\\\";\\n\\nabstract contract ABondModelV2 is Governed\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public constant EXP_SCALE = 1e18;\\n\\n    uint256 public MAX_POOL_RATIO = 650 * 1e15; // 65%\\n\\n    function gain(uint256 total_, uint256 loanable_, uint256 dailyRate_, uint256 principal_, uint16 forDays_) external view virtual returns (uint256);\\n\\n    function setMaxPoolRatio(uint256 newMaxPoolRatio_)\\n      public\\n      onlyDao\\n    {\\n      MAX_POOL_RATIO = newMaxPoolRatio_;\\n    }\\n\\n    function maxDailyRate(\\n      uint256 total_,\\n      uint256 loanable_,\\n      uint256 dailyRate_\\n    )\\n      public view\\n    returns (uint256)\\n    {\\n      if (0 == total_) {\\n        return 0;\\n      }\\n\\n      return slippedDailyRate(dailyRate_, total_, loanable_, 0, 0);\\n    }\\n\\n    function slippedDailyRate(\\n        uint256 dailyRate_,\\n        uint256 total_,\\n        uint256 loanable_,\\n        uint256 principal_,\\n        uint256 aproxGain_\\n    )\\n      public view\\n    returns (uint256)\\n    {\\n      if (0 == total_.add(principal_)) {\\n        return 0;\\n      }\\n\\n      // ((loanable - aproxGain) / (total + principal)),\\n      uint256 ratio = (loanable_.sub(aproxGain_, \\\"BondModelV2: liquidity\\\")).mul(EXP_SCALE).div(total_.add(principal_));\\n\\n      return MathUtils.fractionOf(\\n        dailyRate_,\\n        MathUtils.min(ratio, MAX_POOL_RATIO)\\n      );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nabstract contract Governed {\\n\\n  address public dao;\\n  address public guardian;\\n\\n  modifier onlyDao {\\n    require(\\n        dao == msg.sender,\\n        \\\"GOV: not dao\\\"\\n      );\\n    _;\\n  }\\n\\n  modifier onlyDaoOrGuardian {\\n    require(\\n      msg.sender == dao || msg.sender == guardian,\\n      \\\"GOV: not dao/guardian\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor()\\n  {\\n    dao = msg.sender;\\n    guardian = msg.sender;\\n  }\\n\\n  function setDao(address dao_)\\n    external\\n    onlyDao\\n  {\\n    dao = dao_;\\n  }\\n\\n  function setGuardian(address guardian_)\\n    external\\n    onlyDao\\n  {\\n    guardian = guardian_;\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"EXP_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_POOL_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal_\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"forDays_\",\"type\":\"uint16\"}],\"name\":\"gain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate_\",\"type\":\"uint256\"}],\"name\":\"maxDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao_\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxPoolRatio_\",\"type\":\"uint256\"}],\"name\":\"setMaxPoolRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aproxGain_\",\"type\":\"uint256\"}],\"name\":\"slippedDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BondModelV2Compounded","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}