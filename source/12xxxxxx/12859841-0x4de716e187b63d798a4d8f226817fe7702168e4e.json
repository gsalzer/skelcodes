{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n\r\n//import the ERC20 interface\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n//import the uniswap router\r\n//the contract needs to use swapExactTokensForTokens\r\n//this will allow us to import swapExactTokensForTokens into our contract\r\n\r\ninterface IUniswapV2Router {\r\n  function getAmountsOut(uint256 amountIn, address[] memory path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n  \r\n  function swapExactTokensForTokens(\r\n  \r\n    //amount of tokens we are sending in\r\n    uint256 amountIn,\r\n    //the minimum amount of tokens we want out of the trade\r\n    uint256 amountOutMin,\r\n    //list of token addresses we are going to trade in.  this is necessary to calculate amounts\r\n    address[] calldata path,\r\n    //this is the address we are going to send the output tokens to\r\n    address to,\r\n    //the last time that the trade is valid for\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address token0, address token1) external returns (address);\r\n}\r\n\r\n\r\n\r\ncontract tokenSwap {\r\n    \r\n    //address of the uniswap v2 router\r\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    //address of WETH token.  This is needed because some times it is better to trade through WETH.  \r\n    //you might get a better price using WETH.  \r\n    //example trading from token A to WETH then WETH to token B might result in a better price\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n\r\n    //this swap function is used to trade from one token to another\r\n    //the inputs are self explainatory\r\n    //token in = the token address you want to trade out of\r\n    //token out = the token address you want as the output of this trade\r\n    //amount in = the amount of tokens you are sending in\r\n    //amount out Min = the minimum amount of tokens you want out of the trade\r\n    //to = the address you want the tokens to be sent to\r\n    \r\n   function swap(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to) external {\r\n      \r\n    //first we need to transfer the amount in tokens from the msg.sender to this contract\r\n    //this contract will have the amount of in tokens\r\n    IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);\r\n    \r\n    //next we need to allow the uniswapv2 router to spend the token we just sent to this contract\r\n    //by calling IERC20 approve you allow the uniswap contract to spend the tokens in this contract \r\n    IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\r\n\r\n    //path is an array of addresses.\r\n    //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\r\n    //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\r\n    address[] memory path;\r\n    if (_tokenIn == WETH || _tokenOut == WETH) {\r\n      path = new address[](2);\r\n      path[0] = _tokenIn;\r\n      path[1] = _tokenOut;\r\n    } else {\r\n      path = new address[](3);\r\n      path[0] = _tokenIn;\r\n      path[1] = WETH;\r\n      path[2] = _tokenOut;\r\n    }\r\n        //then we will call swapExactTokensForTokens\r\n        //for the deadline we will pass in block.timestamp\r\n        //the deadline is the latest time the trade is valid for\r\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(_amountIn, _amountOutMin, path, _to, block.timestamp);\r\n    }\r\n    \r\n       //this function will return the minimum amount from a swap\r\n       //input the 3 parameters below and it will return the minimum amount out\r\n       //this is needed for the swap function above\r\n     function getAmountOutMin(address _tokenIn, address _tokenOut, uint256 _amountIn) external view returns (uint256) {\r\n\r\n       //path is an array of addresses.\r\n       //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\r\n       //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\r\n        address[] memory path;\r\n        if (_tokenIn == WETH || _tokenOut == WETH) {\r\n            path = new address[](2);\r\n            path[0] = _tokenIn;\r\n            path[1] = _tokenOut;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _tokenIn;\r\n            path[1] = WETH;\r\n            path[2] = _tokenOut;\r\n        }\r\n        \r\n        uint256[] memory amountOutMins = IUniswapV2Router(UNISWAP_V2_ROUTER).getAmountsOut(_amountIn, path);\r\n        return amountOutMins[path.length -1];\r\n    \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"tokenSwap","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a86e98c87498e467d71860be705bf06888c13855b49975558fa94896e849da0c"}]}