{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n// MINIMAL INTERFACE OF QANX REQUIRED FOR THE DISTRIBUTOR TO WORK\r\ninterface TransferableQANX {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transferLocked(address recipient, uint256 amount, uint32 hardLockUntil, uint32 softLockUntil, uint8 allowedHops) external returns (bool);\r\n}\r\n\r\ncontract DistributeQANX {\r\n\r\n    // POINTS TO THE OFFICIAL QANX CONTRACT\r\n    TransferableQANX private _qanx;\r\n\r\n    // ADDRESS OF THE OFFICIAL QANX CONTRACT WILL BE PROVIDED UPON CONSTRUCT\r\n    constructor(TransferableQANX qanx_) {\r\n        _qanx = qanx_;\r\n    }\r\n\r\n    // METHOD TO DISTRIBUTE UNLOCKED TOKENS\r\n    function distribute(uint256 total, address[] calldata recipients, uint256[] calldata amounts) external {\r\n\r\n        // FIRST TRANSFER THE TOTAL AMOUNT TO BE DISTRIBUTED FROM THE SENDER TO THIS CONTRACT\r\n        require(_qanx.transferFrom(msg.sender, address(this), total));\r\n\r\n        // THEN TRANSFER THE SPECIFIED AMOUNTS TO THE RECIPIENTS ONE-BY-ONE\r\n        for (uint256 i = 0; i < recipients.length; i++){\r\n            require(_qanx.transfer(recipients[i], amounts[i]));\r\n        }\r\n    }\r\n\r\n    // METHOD TO DISTRIBUTE LOCKED TOKENS WITH CUSTOM PARAMS\r\n    function distributeLocked(\r\n        uint256 total,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts,\r\n        uint32[]  calldata hardLocks, \r\n        uint32[]  calldata softLocks,\r\n        uint8[]   calldata allowedHops) external \r\n    {\r\n\r\n        // FIRST TRANSFER THE TOTAL AMOUNT TO BE DISTRIBUTED FROM THE SENDER TO THIS CONTRACT\r\n        require(_qanx.transferFrom(msg.sender, address(this), total));\r\n\r\n        // THEN TRANSFER THE SPECIFIED AMOUNTS TO THE RECIPIENTS ONE-BY-ONE WITH THE PARAMS SPECIFIED\r\n        for (uint256 i = 0; i < recipients.length; i++){\r\n            require(_qanx.transferLocked(recipients[i], amounts[i], hardLocks[i], softLocks[i], allowedHops[i]));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract TransferableQANX\",\"name\":\"qanx_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"hardLocks\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"softLocks\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"allowedHops\",\"type\":\"uint8[]\"}],\"name\":\"distributeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DistributeQANX","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aaa7a10a8ee237ea61e8ac46c50a8db8bcc1baaa","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://61b6d2c9b72ba64b0266a330454b87e474346e3c20fc68cfaf7147c05983b6e1"}]}