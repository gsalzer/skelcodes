{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/withdrawalDelayer/WithdrawalDelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IWithdrawalDelayer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract WithdrawalDelayer is ReentrancyGuard, IWithdrawalDelayer {\\n    struct DepositState {\\n        uint192 amount;\\n        uint64 depositTimestamp;\\n    }\\n\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 constant _TRANSFER_SIGNATURE = 0xa9059cbb;\\n\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    bytes4 constant _TRANSFERFROM_SIGNATURE = 0x23b872dd;\\n\\n    // bytes4(keccak256(bytes(\\\"deposit(address,address,uint192)\\\")));\\n    bytes4 constant _DEPOSIT_SIGNATURE = 0xcfc0b641;\\n\\n    uint64 public constant MAX_WITHDRAWAL_DELAY = 2 weeks; // Maximum time that the return of funds can be delayed\\n    uint64 public constant MAX_EMERGENCY_MODE_TIME = 26 weeks; // Maximum time in a state of emergency before a\\n    // resolution and after which the emergency council can redeem the funds\\n    uint64 private _withdrawalDelay; // Current delay\\n    uint64 private _emergencyModeStartingTime; // When emergency mode has started\\n    address private _hermezGovernance; // Governance who control the system parameters\\n    address public pendingGovernance;\\n    address payable public pendingEmergencyCouncil;\\n    address payable private _emergencyCouncil; // emergency council address who can redeem the funds after MAX_EMERGENCY_MODE_TIME\\n    bool private _emergencyMode; // bool to set the emergency mode\\n    address public hermezRollupAddress; // hermez Rollup Address who can send funds to this smart contract\\n    mapping(bytes32 => DepositState) public deposits; // Mapping to keep track of deposits\\n\\n    event Deposit(\\n        address indexed owner,\\n        address indexed token,\\n        uint192 amount,\\n        uint64 depositTimestamp\\n    );\\n    event Withdraw(\\n        address indexed token,\\n        address indexed owner,\\n        uint192 amount\\n    );\\n    event EmergencyModeEnabled();\\n    event NewWithdrawalDelay(uint64 withdrawalDelay);\\n    event EscapeHatchWithdrawal(\\n        address indexed who,\\n        address indexed to,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event NewEmergencyCouncil(address newEmergencyCouncil);\\n    event NewHermezGovernanceAddress(address newHermezGovernanceAddress);\\n\\n    // Event emitted when the contract is initialized\\n    event InitializeWithdrawalDelayerEvent(\\n        uint64 initialWithdrawalDelay,\\n        address initialHermezGovernanceAddress,\\n        address initialEmergencyCouncil\\n    );\\n\\n    /**\\n     * @notice withdrawalDelayerInitializer (Constructor)\\n     * @param _initialWithdrawalDelay Initial withdrawal delay time in seconds to be able to withdraw the funds\\n     * @param _initialHermezRollup Smart contract responsible of making deposits and it's able to change the delay\\n     * @param _initialHermezGovernanceAddress can claim the funds in an emergency mode\\n     * @param _initialEmergencyCouncil can claim the funds in an emergency and MAX_EMERGENCY_MODE_TIME exceeded\\n     */\\n    constructor(\\n        uint64 _initialWithdrawalDelay,\\n        address _initialHermezRollup,\\n        address _initialHermezGovernanceAddress,\\n        address payable _initialEmergencyCouncil\\n    ) public {\\n        require(\\n            _initialHermezRollup != address(0),\\n            \\\"WithdrawalDelayer::withdrawalDelayerInitializer ADDRESS_0_NOT_VALID\\\"\\n        );\\n\\n        _withdrawalDelay = _initialWithdrawalDelay;\\n        hermezRollupAddress = _initialHermezRollup;\\n        _hermezGovernance = _initialHermezGovernanceAddress;\\n        _emergencyCouncil = _initialEmergencyCouncil;\\n        _emergencyMode = false;\\n\\n        emit InitializeWithdrawalDelayerEvent(\\n            _initialWithdrawalDelay,\\n            _initialHermezGovernanceAddress,\\n            _initialEmergencyCouncil\\n        );\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_hermezGovernance`\\n     * @return The `_hermezGovernance` value\\n     */\\n    function getHermezGovernanceAddress()\\n        external\\n        override\\n        view\\n        returns (address)\\n    {\\n        return _hermezGovernance;\\n    }\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param newGovernance The address to transfer governance to.\\n     */\\n    function transferGovernance(address newGovernance) public override {\\n        require(\\n            msg.sender == _hermezGovernance,\\n            \\\"WithdrawalDelayer::transferGovernance: ONLY_GOVERNANCE\\\"\\n        );\\n        pendingGovernance = newGovernance;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the transfer.\\n     */\\n    function claimGovernance() public override {\\n        require(\\n            msg.sender == pendingGovernance,\\n            \\\"WithdrawalDelayer::claimGovernance: ONLY_PENDING_GOVERNANCE\\\"\\n        );\\n        _hermezGovernance = pendingGovernance;\\n        pendingGovernance = address(0);\\n        emit NewHermezGovernanceAddress(_hermezGovernance);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_emergencyCouncil`\\n     * @return The `_emergencyCouncil` value\\n     */\\n    function getEmergencyCouncil() external override view returns (address) {\\n        return _emergencyCouncil;\\n    }\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param newEmergencyCouncil The address to transfer governance to.\\n     */\\n    function transferEmergencyCouncil(address payable newEmergencyCouncil)\\n        public\\n        override\\n    {\\n        require(\\n            msg.sender == _emergencyCouncil,\\n            \\\"WithdrawalDelayer::transferEmergencyCouncil: ONLY_EMERGENCY_COUNCIL\\\"\\n        );\\n        pendingEmergencyCouncil = newEmergencyCouncil;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the transfer.\\n     */\\n    function claimEmergencyCouncil() public override {\\n        require(\\n            msg.sender == pendingEmergencyCouncil,\\n            \\\"WithdrawalDelayer::claimEmergencyCouncil: ONLY_PENDING_GOVERNANCE\\\"\\n        );\\n        _emergencyCouncil = pendingEmergencyCouncil;\\n        pendingEmergencyCouncil = address(0);\\n        emit NewEmergencyCouncil(_emergencyCouncil);\\n    }\\n\\n    /**\\n     * @notice Getter of the current `_emergencyMode` status to know if the emergency mode is enable or disable\\n     * @return The `_emergencyMode` value\\n     */\\n    function isEmergencyMode() external override view returns (bool) {\\n        return _emergencyMode;\\n    }\\n\\n    /**\\n     * @notice Getter to obtain the current withdrawal delay\\n     * @return the current withdrawal delay time in seconds: `_withdrawalDelay`\\n     */\\n    function getWithdrawalDelay() external override view returns (uint64) {\\n        return _withdrawalDelay;\\n    }\\n\\n    /**\\n     * @notice Getter to obtain when emergency mode started\\n     * @return the emergency mode starting time in seconds: `_emergencyModeStartingTime`\\n     */\\n    function getEmergencyModeStartingTime()\\n        external\\n        override\\n        view\\n        returns (uint64)\\n    {\\n        return _emergencyModeStartingTime;\\n    }\\n\\n    /**\\n     * @notice This function enables the emergency mode. Only the governance of the system can enable this mode. This cannot\\n     * be deactivated in any case so it will be irreversible.\\n     * @dev The activation time is saved in `_emergencyModeStartingTime` and this function can only be called\\n     * once if it has not been previously activated.\\n     * Events: `EmergencyModeEnabled` event.\\n     */\\n    function enableEmergencyMode() external override {\\n        require(\\n            msg.sender == _hermezGovernance,\\n            \\\"WithdrawalDelayer::enableEmergencyMode: ONLY_GOVERNANCE\\\"\\n        );\\n        require(\\n            !_emergencyMode,\\n            \\\"WithdrawalDelayer::enableEmergencyMode: ALREADY_ENABLED\\\"\\n        );\\n        _emergencyMode = true;\\n        /* solhint-disable not-rely-on-time */\\n        _emergencyModeStartingTime = uint64(now);\\n        emit EmergencyModeEnabled();\\n    }\\n\\n    /**\\n     * @notice This function allows the governance to change the withdrawal delay time, this is the time that\\n     * anyone needs to wait until a withdrawal of the funds is allowed. Since this time is calculated at the time of\\n     * withdrawal, this change affects existing deposits. Can never exceed `MAX_WITHDRAWAL_DELAY`\\n     * @dev It changes `_withdrawalDelay` if `_newWithdrawalDelay` it is less than or equal to MAX_WITHDRAWAL_DELAY\\n     * @param _newWithdrawalDelay new delay time in seconds\\n     * Events: `NewWithdrawalDelay` event.\\n     */\\n    function changeWithdrawalDelay(uint64 _newWithdrawalDelay)\\n        external\\n        override\\n    {\\n        require(\\n            (msg.sender == _hermezGovernance) ||\\n                (msg.sender == hermezRollupAddress),\\n            \\\"WithdrawalDelayer::changeWithdrawalDelay: ONLY_ROLLUP_OR_GOVERNANCE\\\"\\n        );\\n        require(\\n            _newWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\\n            \\\"WithdrawalDelayer::changeWithdrawalDelay: EXCEEDS_MAX_WITHDRAWAL_DELAY\\\"\\n        );\\n        _withdrawalDelay = _newWithdrawalDelay;\\n        emit NewWithdrawalDelay(_withdrawalDelay);\\n    }\\n\\n    /**\\n     * Returns the balance and the timestamp for a specific owner and token\\n     * @param _owner who can claim the deposit once the delay time has expired (if not in emergency mode)\\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\\n     * @return `amount` Total amount withdrawable (if not in emergency mode)\\n     * @return `depositTimestamp` Moment at which funds were deposited\\n     */\\n    function depositInfo(address payable _owner, address _token)\\n        external\\n        override\\n        view\\n        returns (uint192, uint64)\\n    {\\n        DepositState memory ds = deposits[keccak256(\\n            abi.encodePacked(_owner, _token)\\n        )];\\n        return (ds.amount, ds.depositTimestamp);\\n    }\\n\\n    /**\\n     * Function to make a deposit in the WithdrawalDelayer smartcontract, only the Hermez rollup smartcontract can do it\\n     * @dev In case of an Ether deposit, the address `0x0` will be used and the corresponding amount must be sent in the\\n     * `msg.value`. In case of an ERC20 this smartcontract must have the approval to expend the token to\\n     * deposit to be able to make a transferFrom to itself.\\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\\n     * @param _token address of the token deposited (`0x0` in case of Ether)\\n     * @param _amount deposit amount\\n     * Events: `Deposit`\\n     */\\n    function deposit(\\n        address _owner,\\n        address _token,\\n        uint192 _amount\\n    ) external override payable nonReentrant {\\n        require(\\n            msg.sender == hermezRollupAddress,\\n            \\\"WithdrawalDelayer::deposit: ONLY_ROLLUP\\\"\\n        );\\n        if (msg.value != 0) {\\n            require(\\n                _token == address(0x0),\\n                \\\"WithdrawalDelayer::deposit: WRONG_TOKEN_ADDRESS\\\"\\n            );\\n            require(\\n                _amount == msg.value,\\n                \\\"WithdrawalDelayer::deposit: WRONG_AMOUNT\\\"\\n            );\\n        } else {\\n            require(\\n                IERC20(_token).allowance(hermezRollupAddress, address(this)) >=\\n                    _amount,\\n                \\\"WithdrawalDelayer::deposit: NOT_ENOUGH_ALLOWANCE\\\"\\n            );\\n            /* solhint-disable avoid-low-level-calls */\\n            (bool success, bytes memory data) = address(_token).call(\\n                abi.encodeWithSelector(\\n                    _TRANSFERFROM_SIGNATURE,\\n                    hermezRollupAddress,\\n                    address(this),\\n                    _amount\\n                )\\n            );\\n            // `transferFrom` method may return (bool) or nothing.\\n            require(\\n                success && (data.length == 0 || abi.decode(data, (bool))),\\n                \\\"WithdrawalDelayer::deposit: TOKEN_TRANSFER_FAILED\\\"\\n            );\\n        }\\n        _processDeposit(_owner, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Internal call to make a deposit\\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\\n     * @param _token address of the token deposited (`0x0` in case of Ether)\\n     * @param _amount deposit amount\\n     * Events: `Deposit`\\n     */\\n    function _processDeposit(\\n        address _owner,\\n        address _token,\\n        uint192 _amount\\n    ) internal {\\n        // We identify a deposit with the keccak of its owner and the token\\n        bytes32 depositId = keccak256(abi.encodePacked(_owner, _token));\\n        uint192 newAmount = deposits[depositId].amount + _amount;\\n        require(\\n            newAmount >= deposits[depositId].amount,\\n            \\\"WithdrawalDelayer::_processDeposit: DEPOSIT_OVERFLOW\\\"\\n        );\\n\\n        deposits[depositId].amount = newAmount;\\n        deposits[depositId].depositTimestamp = uint64(now);\\n\\n        emit Deposit(\\n            _owner,\\n            _token,\\n            _amount,\\n            deposits[depositId].depositTimestamp\\n        );\\n    }\\n\\n    /**\\n     * This function allows the owner to withdawal the funds. Emergency mode cannot be enabled and it must have exceeded\\n     * the withdrawal delay time\\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated\\n     * @param _owner can claim the deposit once the delay time has expired\\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\\n     * Events: `Withdraw`\\n     */\\n    function withdrawal(address payable _owner, address _token)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(!_emergencyMode, \\\"WithdrawalDelayer::deposit: EMERGENCY_MODE\\\");\\n        // We identify a deposit with the keccak of its owner and the token\\n        bytes32 depositId = keccak256(abi.encodePacked(_owner, _token));\\n        uint192 amount = deposits[depositId].amount;\\n        require(amount > 0, \\\"WithdrawalDelayer::withdrawal: NO_FUNDS\\\");\\n        require(\\n            uint64(now) >=\\n                deposits[depositId].depositTimestamp + _withdrawalDelay,\\n            \\\"WithdrawalDelayer::withdrawal: WITHDRAWAL_NOT_ALLOWED\\\"\\n        );\\n\\n        // Update the state\\n        deposits[depositId].amount = 0;\\n        deposits[depositId].depositTimestamp = 0;\\n\\n        // Make the transfer\\n        if (_token == address(0x0)) {\\n            _ethWithdrawal(_owner, uint256(amount));\\n        } else {\\n            _tokenWithdrawal(_token, _owner, uint256(amount));\\n        }\\n\\n        emit Withdraw(_token, _owner, amount);\\n    }\\n\\n    /**\\n     * Allows the Hermez Governance to withdawal the funds in the event that emergency mode was enable.\\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated and this is\\n     * a security mechanism\\n     * @param _to where the funds will be sent\\n     * @param _token address of the token withdraw (0x0 in case of Ether)\\n     * @param _amount the amount to send\\n     * Events: `EscapeHatchWithdrawal`\\n     */\\n    function escapeHatchWithdrawal(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        require(\\n            _emergencyMode,\\n            \\\"WithdrawalDelayer::escapeHatchWithdrawal: ONLY_EMODE\\\"\\n        );\\n        require(\\n            msg.sender == _emergencyCouncil || msg.sender == _hermezGovernance,\\n            \\\"WithdrawalDelayer::escapeHatchWithdrawal: ONLY_GOVERNANCE\\\"\\n        );\\n        if (\\n            msg.sender == _emergencyCouncil &&\\n            _emergencyCouncil != _hermezGovernance\\n        ) {\\n            require(\\n                uint64(now) >=\\n                    _emergencyModeStartingTime + MAX_EMERGENCY_MODE_TIME,\\n                \\\"WithdrawalDelayer::escapeHatchWithdrawal: NO_MAX_EMERGENCY_MODE_TIME\\\"\\n            );\\n        }\\n        if (_token == address(0x0)) {\\n            _ethWithdrawal(_to, _amount);\\n        } else {\\n            _tokenWithdrawal(_token, _to, _amount);\\n        }\\n        emit EscapeHatchWithdrawal(msg.sender, _to, _token, _amount);\\n    }\\n\\n    /**\\n     * Internal function to perform a ETH Withdrawal\\n     * @param to where the funds will be sent\\n     * @param amount address of the token withdraw (0x0 in case of Ether)\\n     */\\n    function _ethWithdrawal(address to, uint256 amount) internal {\\n        /* solhint-disable avoid-low-level-calls */\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"WithdrawalDelayer::_ethWithdrawal: TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * Internal function to perform a Token Withdrawal\\n     * @param tokenAddress address of the token to transfer\\n     * @param to where the funds will be sent\\n     * @param amount address of the token withdraw (0x0 in case of Ether)\\n     */\\n    function _tokenWithdrawal(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        /* solhint-disable avoid-low-level-calls */\\n        (bool success, bytes memory data) = tokenAddress.call(\\n            abi.encodeWithSelector(_TRANSFER_SIGNATURE, to, amount)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"WithdrawalDelayer::_tokenWithdrawal: TOKEN_TRANSFER_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWithdrawalDelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\ninterface IWithdrawalDelayer {\\n    /**\\n     * @notice Getter of the current `_hermezGovernanceAddress`\\n     * @return The `_hermezGovernanceAddress` value\\n     */\\n    function getHermezGovernanceAddress() external view returns (address);\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param newGovernance The address to transfer governance to.\\n     */\\n    function transferGovernance(address newGovernance) external;\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the transfer.\\n     */\\n    function claimGovernance() external;\\n\\n    /**\\n     * @notice Getter of the current `_emergencyCouncil`\\n     * @return The `_emergencyCouncil` value\\n     */\\n    function getEmergencyCouncil() external view returns (address);\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param newEmergencyCouncil The address to transfer governance to.\\n     */\\n    function transferEmergencyCouncil(address payable newEmergencyCouncil)\\n        external;\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the transfer.\\n     */\\n    function claimEmergencyCouncil() external;\\n\\n    /**\\n     * @notice Getter of the current `_emergencyMode` status to know if the emergency mode is enable or disable\\n     * @return The `_emergencyMode` value\\n     */\\n    function isEmergencyMode() external view returns (bool);\\n\\n    /**\\n     * @notice Getter to obtain the current withdrawal delay\\n     * @return the current withdrawal delay time in seconds: `_withdrawalDelay`\\n     */\\n    function getWithdrawalDelay() external view returns (uint64);\\n\\n    /**\\n     * @notice Getter to obtain when emergency mode started\\n     * @return the emergency mode starting time in seconds: `_emergencyModeStartingTime`\\n     */\\n    function getEmergencyModeStartingTime() external view returns (uint64);\\n\\n    /**\\n     * @notice This function enables the emergency mode. Only the keeper of the system can enable this mode. This cannot\\n     * be deactivated in any case so it will be irreversible.\\n     * @dev The activation time is saved in `_emergencyModeStartingTime` and this function can only be called\\n     * once if it has not been previously activated.\\n     * Events: `EmergencyModeEnabled` event.\\n     */\\n    function enableEmergencyMode() external;\\n\\n    /**\\n     * @notice This function allows the HermezKeeperAddress to change the withdrawal delay time, this is the time that\\n     * anyone needs to wait until a withdrawal of the funds is allowed. Since this time is calculated at the time of\\n     * withdrawal, this change affects existing deposits. Can never exceed `MAX_WITHDRAWAL_DELAY`\\n     * @dev It changes `_withdrawalDelay` if `_newWithdrawalDelay` it is less than or equal to MAX_WITHDRAWAL_DELAY\\n     * @param _newWithdrawalDelay new delay time in seconds\\n     * Events: `NewWithdrawalDelay` event.\\n     */\\n    function changeWithdrawalDelay(uint64 _newWithdrawalDelay) external;\\n\\n    /**\\n     * Returns the balance and the timestamp for a specific owner and token\\n     * @param _owner who can claim the deposit once the delay time has expired (if not in emergency mode)\\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\\n     * @return `amount` Total amount withdrawable (if not in emergency mode)\\n     * @return `depositTimestamp` Moment at which funds were deposited\\n     */\\n    function depositInfo(address payable _owner, address _token)\\n        external\\n        view\\n        returns (uint192, uint64);\\n\\n    /**\\n     * Function to make a deposit in the WithdrawalDelayer smartcontract, only the Hermez rollup smartcontract can do it\\n     * @dev In case of an Ether deposit, the address `0x0` will be used and the corresponding amount must be sent in the\\n     * `msg.value`. In case of an ERC20 this smartcontract must have the approval to expend the token to\\n     * deposit to be able to make a transferFrom to itself.\\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\\n     * @param _token address of the token deposited (`0x0` in case of Ether)\\n     * @param _amount deposit amount\\n     * Events: `Deposit`\\n     */\\n    function deposit(\\n        address _owner,\\n        address _token,\\n        uint192 _amount\\n    ) external payable;\\n\\n    /**\\n     * This function allows the owner to withdawal the funds. Emergency mode cannot be enabled and it must have exceeded\\n     * the withdrawal delay time\\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated\\n     * @param _owner can claim the deposit once the delay time has expired\\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\\n     * Events: `Withdraw`\\n     */\\n    function withdrawal(address payable _owner, address _token) external;\\n\\n    /**\\n     * Allows the Hermez Governance to withdawal the funds in the event that emergency mode was enable.\\n     * Note: An Aragon Court will have the right to veto over the call to this method\\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated and this is\\n     * a security mechanism\\n     * @param _to where the funds will be sent\\n     * @param _token address of the token withdraw (0x0 in case of Ether)\\n     * @param _amount the amount to send\\n     * Events: `EscapeHatchWithdrawal`\\n     */\\n    function escapeHatchWithdrawal(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_initialWithdrawalDelay\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_initialHermezRollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialHermezGovernanceAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_initialEmergencyCouncil\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositTimestamp\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialWithdrawalDelay\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialHermezGovernanceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialEmergencyCouncil\",\"type\":\"address\"}],\"name\":\"InitializeWithdrawalDelayerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEmergencyCouncil\",\"type\":\"address\"}],\"name\":\"NewEmergencyCouncil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newHermezGovernanceAddress\",\"type\":\"address\"}],\"name\":\"NewHermezGovernanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"withdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"NewWithdrawalDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_EMERGENCY_MODE_TIME\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_DELAY\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newWithdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"changeWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"_amount\",\"type\":\"uint192\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"depositInfo\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"depositTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"escapeHatchWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyModeStartingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermezGovernanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hermezRollupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEmergencyCouncil\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newEmergencyCouncil\",\"type\":\"address\"}],\"name\":\"transferEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WithdrawalDelayer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000a7bff53521c43fc50bbaee79c05527c959d0a571000000000000000000000000f1b3b124842555782f98be08d1357abb8013f11c000000000000000000000000e1bbc673e537053c3536310851c6554bcfcf11cd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}