{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/TipJarManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./interfaces/ITimelockController.sol\\\";\\nimport \\\"./lib/0.8/Initializable.sol\\\";\\n\\n/**\\n * @title TipJarManager\\n * @dev Responsible for enacting decisions related to sensitive TipJar parameters\\n * Decisions are made via a timelock contract\\n */\\ncontract TipJarManager is Initializable {\\n\\n    /// @notice TipJarManager admin\\n    address public admin;\\n\\n    /// @notice Delay for critical changes\\n    uint256 public criticalDelay;\\n\\n    /// @notice Delay for non-critical changes\\n    uint256 public regularDelay;\\n\\n    /// @notice TipJarProxy address\\n    address public tipJar;\\n\\n    /// @notice Timelock contract\\n    ITimelockController public timelock;\\n\\n    /// @notice Admin modifier\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    /// @notice Timelock modifier\\n    modifier onlyTimelock() {\\n        require(msg.sender == address(timelock), \\\"not timelock\\\");\\n        _;\\n    }\\n\\n    /// @notice Miner Split Proposal event\\n    event MinerSplitProposal(address indexed proposer, address indexed miner, address indexed splitTo, uint32 splitPct, uint256 eta, bytes32 proposalID, bytes32 salt);\\n\\n    /// @notice Miner Split Approval event\\n    event MinerSplitApproval(address indexed approver, address indexed miner, address indexed splitTo, uint32 splitPct);\\n\\n    /// @notice Fee Proposal event\\n    event FeeProposal(address indexed proposer, uint32 newFee, uint256 eta, bytes32 proposalID, bytes32 salt);\\n\\n    /// @notice Fee Approval event\\n    event FeeApproval(address indexed approver, uint32 newFee);\\n\\n    /// @notice Fee Collector Proposal event\\n    event FeeCollectorProposal(address indexed proposer, address indexed newCollector, uint256 eta, bytes32 proposalID, bytes32 salt);\\n\\n    /// @notice Fee Collector Approval event\\n    event FeeCollectorApproval(address indexed approver, address indexed newCollector);\\n\\n    /// @notice New admin event\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @notice New delay event\\n    event DelayChanged(string indexed delayType, uint256 indexed oldDelay, uint256 indexed newDelay);\\n\\n    /// @notice New timelock event\\n    event TimelockChanged(address indexed oldTimelock, address indexed newTimelock);\\n\\n    /// @notice New tip jar event\\n    event TipJarChanged(address indexed oldTipJar, address indexed newTipJar);\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n\\n    /// @notice Fallback function to allow contract to accept ETH\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice Construct new TipJarManager contract, setting msg.sender as admin\\n     */\\n    constructor() {\\n        admin = msg.sender;\\n        emit AdminChanged(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Initialize contract\\n     * @param _tipJar TipJar proxy contract address\\n     * @param _admin Admin address\\n     * @param _timelock TimelockController contract address\\n     */\\n    function initialize(\\n        address _tipJar,\\n        address _admin,\\n        address payable _timelock,\\n        uint256 _criticalDelay,\\n        uint256 _regularDelay\\n    ) external initializer onlyAdmin {\\n        emit AdminChanged(admin, _admin);\\n        admin = _admin;\\n\\n        tipJar = _tipJar;\\n        emit TipJarChanged(address(0), _tipJar);\\n        \\n        timelock = ITimelockController(_timelock);\\n        emit TimelockChanged(address(0), _timelock);\\n\\n        criticalDelay = _criticalDelay;\\n        emit DelayChanged(\\\"critical\\\", 0, _criticalDelay);\\n\\n        regularDelay = _regularDelay;\\n        emit DelayChanged(\\\"regular\\\", 0, _regularDelay);\\n    }\\n\\n    /**\\n     * @notice Propose a new miner split\\n     * @param minerAddress Address of miner\\n     * @param splitTo Address that receives split\\n     * @param splitPct % of tip that splitTo receives\\n     * @param salt salt\\n     */\\n    function proposeNewMinerSplit(\\n        address minerAddress,\\n        address splitTo,\\n        uint32 splitPct,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"updateMinerSplit(address,address,uint32)\\\")) = 0x8d916340\\n        bytes32 id = _schedule(tipJar, 0, abi.encodeWithSelector(hex\\\"8d916340\\\", minerAddress, splitTo, splitPct), bytes32(0), salt, regularDelay);\\n        emit MinerSplitProposal(msg.sender, minerAddress, splitTo, splitPct, block.timestamp + regularDelay, id, salt);\\n    }\\n\\n    /**\\n     * @notice Approve a new miner split\\n     * @param minerAddress Address of miner\\n     * @param splitTo Address that receives split\\n     * @param splitPct % of tip that splitTo receives\\n     * @param salt salt\\n     */\\n    function approveNewMinerSplit(\\n        address minerAddress,\\n        address splitTo,\\n        uint32 splitPct,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"updateMinerSplit(address,address,uint32)\\\")) = 0x8d916340\\n        _execute(tipJar, 0, abi.encodeWithSelector(hex\\\"8d916340\\\", minerAddress, splitTo, splitPct), bytes32(0), salt);\\n        emit MinerSplitApproval(msg.sender, minerAddress, splitTo, splitPct);\\n    }\\n\\n    /**\\n     * @notice Propose a new network fee\\n     * @param newFee New fee\\n     * @param salt salt\\n     */\\n    function proposeNewFee(\\n        uint32 newFee, \\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setFee(uint32)\\\")) = 0x1ab971ab\\n        bytes32 id = _schedule(tipJar, 0, abi.encodeWithSelector(hex\\\"1ab971ab\\\", newFee), bytes32(0), salt, criticalDelay);\\n        emit FeeProposal(msg.sender, newFee, block.timestamp + regularDelay, id, salt);\\n    }\\n\\n    /**\\n     * @notice Approve a new network fee\\n     * @param newFee New fee\\n     * @param salt salt\\n     */\\n    function approveNewFee(\\n        uint32 newFee, \\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setFee(uint32)\\\")) = 0x1ab971ab\\n        _execute(tipJar, 0, abi.encodeWithSelector(hex\\\"1ab971ab\\\", newFee), bytes32(0), salt);\\n        emit FeeApproval(msg.sender, newFee);\\n    }\\n\\n    /**\\n     * @notice Propose a new fee collector\\n     * @param newFeeCollector New fee collector\\n     * @param salt salt\\n     */\\n    function proposeNewFeeCollector(\\n        address newFeeCollector, \\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setFeeCollector(address)\\\")) = 0xa42dce80\\n        bytes32 id = _schedule(tipJar, 0, abi.encodeWithSelector(hex\\\"a42dce80\\\", newFeeCollector), bytes32(0), salt, criticalDelay);\\n        emit FeeCollectorProposal(msg.sender, newFeeCollector, block.timestamp + regularDelay, id, salt);\\n    }\\n\\n    /**\\n     * @notice Approve a new fee collector\\n     * @param newFeeCollector New fee collector\\n     * @param salt salt\\n     */\\n    function approveNewFeeCollector(\\n        address newFeeCollector, \\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setFeeCollector(address)\\\")) = 0xa42dce80\\n        _execute(tipJar, 0, abi.encodeWithSelector(hex\\\"a42dce80\\\", newFeeCollector), bytes32(0), salt);\\n        emit FeeCollectorApproval(msg.sender, newFeeCollector);\\n    }\\n\\n    /**\\n     * @notice Propose new admin for this contract\\n     * @param newAdmin new admin address\\n     * @param salt salt\\n     */\\n    function proposeNewAdmin(\\n        address newAdmin,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setAdmin(address)\\\")) = 0x704b6c02\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"704b6c02\\\", newAdmin), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new admin for this contract\\n     * @param newAdmin new admin address\\n     * @param salt salt\\n     */\\n    function approveNewAdmin(\\n        address newAdmin,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setAdmin(address)\\\")) = 0x704b6c02\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"704b6c02\\\", newAdmin), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new admin for this contract\\n     * @dev Can only be executed by Timelock contract\\n     * @param newAdmin new admin address\\n     */\\n    function setAdmin(\\n        address newAdmin\\n    ) external onlyTimelock {\\n        emit AdminChanged(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @notice Propose new critical delay for this contract\\n     * @param newDelay new delay time\\n     * @param salt salt\\n     */\\n    function proposeNewCriticalDelay(\\n        uint256 newDelay,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setCriticalDelay(uint256)\\\")) = 0xdad8a096\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"dad8a096\\\", newDelay), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new critical delay for this contract\\n     * @param newDelay new delay time\\n     * @param salt salt\\n     */\\n    function approveNewCriticalDelay(\\n        uint256 newDelay,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setCriticalDelay(uint256)\\\")) = 0xdad8a096\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"dad8a096\\\", newDelay), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new critical delay for this contract\\n     * @dev Can only be executed by Timelock contract\\n     * @param newDelay new delay time\\n     */\\n    function setCriticalDelay(\\n        uint256 newDelay\\n    ) external onlyTimelock {\\n        emit DelayChanged(\\\"critical\\\", criticalDelay, newDelay);\\n        criticalDelay = newDelay;\\n    }\\n\\n    /**\\n     * @notice Propose new regular delay for this contract\\n     * @param newDelay new delay time\\n     * @param salt salt\\n     */\\n    function proposeNewRegularDelay(\\n        uint256 newDelay,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setRegularDelay(uint256)\\\")) = 0x8023dc81\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"8023dc81\\\", newDelay), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new regular delay for this contract\\n     * @param newDelay new delay time\\n     * @param salt salt\\n     */\\n    function approveNewRegularDelay(\\n        uint256 newDelay,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setRegularDelay(uint256)\\\")) = 0x8023dc81\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"8023dc81\\\", newDelay), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new regular delay for this contract\\n     * @dev Can only be executed by Timelock contract\\n     * @param newDelay new delay time\\n     */\\n    function setRegularDelay(\\n        uint256 newDelay\\n    ) external onlyTimelock {\\n        emit DelayChanged(\\\"regular\\\", regularDelay, newDelay);\\n        regularDelay = newDelay;\\n    }\\n\\n    /**\\n     * @notice Propose new tip jar contract\\n     * @param newTipJar new tip jar address\\n     * @param salt salt\\n     */\\n    function proposeNewTipJar(\\n        address newTipJar,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setTipJar(address)\\\")) = 0x5c66e3da\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"5c66e3da\\\", newTipJar), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new tip jar contract\\n     * @param newTipJar new tip jar address\\n     * @param salt salt\\n     */\\n    function approveNewTipJar(\\n        address newTipJar,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setTipJar(address)\\\")) = 0x5c66e3da\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"5c66e3da\\\", newTipJar), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new tip jar contract\\n     * @dev Can only be executed by Timelock contract\\n     * @param newTipJar new tip jar address\\n     */\\n    function setTipJar(\\n        address newTipJar\\n    ) external onlyTimelock {\\n        emit TipJarChanged(tipJar, newTipJar);\\n        tipJar = newTipJar;\\n    }\\n\\n    /**\\n     * @notice Propose new timelock contract\\n     * @param newTimelock new timelock address\\n     * @param salt salt\\n     */\\n    function proposeNewTimelock(\\n        address newTimelock,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setTimelock(address)\\\")) = 0xbdacb303\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"bdacb303\\\", newTimelock), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new timelock contract\\n     * @param newTimelock new timelock address\\n     * @param salt salt\\n     */\\n    function approveNewTimelock(\\n        address newTimelock,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setTimelock(address)\\\")) = 0xbdacb303\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"bdacb303\\\", newTimelock), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new timelock contract\\n     * @dev Can only be executed by Timelock contract or anyone if timelock has not yet been set\\n     * @param newTimelock new timelock address\\n     */\\n    function setTimelock(\\n        address payable newTimelock\\n    ) external onlyTimelock {\\n        emit TimelockChanged(address(timelock), newTimelock);\\n        timelock = ITimelockController(newTimelock);\\n    }\\n\\n    /**\\n     * @notice Public getter for TipJar Proxy implementation contract address\\n     */\\n    function getProxyImplementation() public view returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = tipJar.staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @notice Public getter for TipJar Proxy admin address\\n     */\\n    function getProxyAdmin() public view returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = tipJar.staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @notice Propose new admin for TipJar proxy contract\\n     * @param newAdmin new admin address\\n     * @param salt salt\\n     */\\n    function proposeNewProxyAdmin(\\n        address newAdmin,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"setProxyAdmin(address)\\\")) = 0x47c02661\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"47c02661\\\", newAdmin), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new admin for TipJar proxy contract\\n     * @param newAdmin new admin address\\n     * @param salt salt\\n     */\\n    function approveNewProxyAdmin(\\n        address newAdmin,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"setProxyAdmin(address)\\\")) = 0x47c02661\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"47c02661\\\", newAdmin), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new admin for TipJar proxy contract\\n     * @param newAdmin new admin address\\n     */\\n    function setProxyAdmin(\\n        address newAdmin\\n    ) external onlyTimelock {\\n        // bytes4(keccak256(\\\"changeAdmin(address)\\\")) = 0x8f283970\\n        (bool success, ) = tipJar.call(abi.encodeWithSelector(hex\\\"8f283970\\\", newAdmin));\\n        require(success, \\\"setProxyAdmin failed\\\");\\n    }\\n\\n    /**\\n     * @notice Propose new implementation for TipJar proxy contract\\n     * @param newImplementation new implementation address\\n     * @param salt salt\\n     */\\n    function proposeUpgrade(\\n        address newImplementation,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"upgrade(address)\\\")) = 0x0900f010\\n        _schedule(address(this), 0, abi.encodeWithSelector(hex\\\"0900f010\\\", newImplementation), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new implementation for TipJar proxy\\n     * @param newImplementation new implementation address\\n     * @param salt salt\\n     */\\n    function approveUpgrade(\\n        address newImplementation,\\n        bytes32 salt\\n    ) external {\\n        // bytes4(keccak256(\\\"upgrade(address)\\\")) = 0x0900f010\\n        _execute(address(this), 0, abi.encodeWithSelector(hex\\\"0900f010\\\", newImplementation), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new implementation for TipJar proxy contract\\n     * @param newImplementation new implementation address\\n     */\\n    function upgrade(\\n        address newImplementation\\n    ) external onlyTimelock {\\n        // bytes4(keccak256(\\\"upgradeTo(address)\\\")) = 0x3659cfe6\\n        (bool success, ) = tipJar.call(abi.encodeWithSelector(hex\\\"3659cfe6\\\", newImplementation));\\n        require(success, \\\"upgrade failed\\\");\\n    }\\n\\n    /**\\n     * @notice Propose new implementation for TipJar proxy contract + call function after\\n     * @param newImplementation new implementation address\\n     * @param data Bytes-encoded function to call\\n     * @param value Amount of ETH to send on call\\n     * @param salt salt\\n     */\\n    function proposeUpgradeAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        uint256 value,\\n        bytes32 salt\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"upgradeAndCall(address,bytes)\\\")) = 0x2a6a833b\\n        _schedule(tipJar, value, abi.encodeWithSelector(hex\\\"2a6a833b\\\", newImplementation, data), bytes32(0), salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Approve new implementation for TipJar proxy + call function after\\n     * @param newImplementation new implementation address\\n     * @param data Bytes-encoded function to call\\n     * @param value Amount of ETH to send on call\\n     * @param salt salt\\n     */\\n    function approveUpgradeAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        uint256 value,\\n        bytes32 salt\\n    ) external payable {\\n        // bytes4(keccak256(\\\"upgradeAndCall(address,bytes)\\\")) = 0x2a6a833b\\n        _execute(tipJar, value, abi.encodeWithSelector(hex\\\"2a6a833b\\\", newImplementation, data), bytes32(0), salt);\\n    }\\n\\n    /**\\n     * @notice Set new implementation for TipJar proxy contract + call function after\\n     * @param newImplementation new implementation address\\n     * @param data Bytes-encoded function to call\\n     */\\n    function upgradeAndCall(\\n        address newImplementation,\\n        bytes memory data\\n    ) external payable onlyTimelock {\\n        // bytes4(keccak256(\\\"upgradeToAndCall(address,bytes)\\\")) = 0x4f1ef286\\n        (bool success, ) = tipJar.call{value: msg.value}(abi.encodeWithSelector(hex\\\"4f1ef286\\\", newImplementation, data));\\n        require(success, \\\"upgradeAndCall failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create proposal\\n     * @param target target address\\n     * @param value ETH value\\n     * @param data function call bytes\\n     * @param predecessor predecessor function call\\n     * @param salt salt used in proposal\\n     */\\n    function createProposal(\\n        address target, \\n        uint256 value, \\n        bytes memory data, \\n        bytes32 predecessor, \\n        bytes32 salt\\n    ) external onlyAdmin {\\n        _schedule(target, value, data, predecessor, salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Create batch proposal\\n     * @param targets target address\\n     * @param values ETH value\\n     * @param datas function call bytes\\n     * @param predecessor predecessor function call\\n     * @param salt salt used in proposal\\n     */\\n    function createProposalBatch(\\n        address[] calldata targets, \\n        uint256[] calldata values, \\n        bytes[] calldata datas, \\n        bytes32 predecessor, \\n        bytes32 salt\\n    ) external onlyAdmin {\\n        timelock.scheduleBatch(targets, values, datas, predecessor, salt, criticalDelay);\\n    }\\n\\n    /**\\n     * @notice Execute proposal\\n     * @param target target address\\n     * @param value ETH value\\n     * @param data function call bytes\\n     * @param predecessor predecessor function call\\n     * @param salt salt used in proposal\\n     */\\n    function executeProposal(\\n        address target, \\n        uint256 value, \\n        bytes memory data, \\n        bytes32 predecessor, \\n        bytes32 salt\\n    ) external payable onlyAdmin {\\n        _execute(target, value, data, predecessor, salt);\\n    }\\n\\n    /**\\n     * @notice Execute batch proposal\\n     * @param targets target address\\n     * @param values ETH value\\n     * @param datas function call bytes\\n     * @param predecessor predecessor function call\\n     * @param salt salt used in proposal\\n     */\\n    function executeProposalBatch(\\n        address[] calldata targets, \\n        uint256[] calldata values, \\n        bytes[] calldata datas, \\n        bytes32 predecessor, \\n        bytes32 salt\\n    ) external payable onlyAdmin {\\n        timelock.executeBatch{value: msg.value}(targets, values, datas, predecessor, salt);\\n    }\\n\\n    /**\\n     * @notice Cancel proposal\\n     * @param id ID of proposal\\n     */\\n    function cancelProposal(bytes32 id) external onlyAdmin {\\n        timelock.cancel(id);\\n    }\\n\\n    /**\\n     * @notice Internal schedule implementation\\n     * @param target target address\\n     * @param value ETH value\\n     * @param data Bytes-encoded function call\\n     * @param predecessor scheduled item to execute before this call\\n     * @param salt salt\\n     * @param delay delay for proposal\\n     */\\n    function _schedule(\\n        address target, \\n        uint256 value, \\n        bytes memory data, \\n        bytes32 predecessor, \\n        bytes32 salt, \\n        uint256 delay\\n    ) private returns (bytes32 id) {\\n        return timelock.schedule(target, value, data, predecessor, salt, delay);\\n    }\\n\\n    /**\\n     * @notice Internal execute implementation\\n     * @param target target address\\n     * @param value ETH value\\n     * @param data Bytes-encoded function call\\n     * @param predecessor scheduled item to execute before this call\\n     * @param salt salt\\n     */\\n    function _execute(\\n        address target, \\n        uint256 value, \\n        bytes memory data, \\n        bytes32 predecessor, \\n        bytes32 salt\\n    ) private {\\n        timelock.execute{value: value}(target, value, data, predecessor, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITimelockController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITimelockController {\\n    function TIMELOCK_ADMIN_ROLE() external view returns (bytes32);\\n    function PROPOSER_ROLE() external view returns (bytes32);\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n    function _DONE_TIMESTAMP() external view returns (uint256);\\n    receive() external payable;\\n    function isOperation(bytes32 id) external view returns (bool pending);\\n    function isOperationPending(bytes32 id) external view returns (bool pending);\\n    function isOperationReady(bytes32 id) external view returns (bool ready);\\n    function isOperationDone(bytes32 id) external view returns (bool done);\\n    function getTimestamp(bytes32 id) external view returns (uint256 timestamp);\\n    function getMinDelay() external view returns (uint256 duration);\\n    function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) external pure returns (bytes32 hash);\\n    function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) external pure returns (bytes32 hash);\\n    function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) external returns (bytes32 id);\\n    function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt, uint256 delay) external returns (bytes32 id);\\n    function cancel(bytes32 id) external;\\n    function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) external payable;\\n    function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) external payable;\\n    function updateDelay(uint256 newDelay) external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay);\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n    event Cancelled(bytes32 indexed id);\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\"\r\n    },\r\n    \"contracts/lib/0.8/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/0.8/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"delayType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldDelay\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"DelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"FeeApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"FeeCollectorProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"FeeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"splitTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"splitPct\",\"type\":\"uint32\"}],\"name\":\"MinerSplitApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"splitTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"splitPct\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposalID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"MinerSplitProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTipJar\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTipJar\",\"type\":\"address\"}],\"name\":\"TipJarChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewCriticalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitTo\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"splitPct\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewMinerSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewRegularDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTipJar\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveNewTipJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"approveUpgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createProposalBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"criticalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeProposalBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tipJar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_criticalDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewCriticalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitTo\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"splitPct\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewMinerSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewRegularDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTipJar\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeNewTipJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"proposeUpgradeAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regularDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"setCriticalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"setRegularDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTipJar\",\"type\":\"address\"}],\"name\":\"setTipJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract ITimelockController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TipJarManager","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}