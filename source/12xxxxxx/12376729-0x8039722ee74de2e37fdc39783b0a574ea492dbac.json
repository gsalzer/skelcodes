{"status":"1","message":"OK","result":[{"SourceCode":"# @version ^0.2.12\r\n\r\nstruct MintParams:\r\n    token0: address\r\n    token1: address\r\n    fee: uint256\r\n    tickLower: int128\r\n    tickUpper: int128\r\n    amount0Desired: uint256\r\n    amount1Desired: uint256\r\n    amount0Min: uint256\r\n    amount1Min: uint256\r\n    recipient: address\r\n    deadline: uint256\r\n\r\nstruct ModifyParams:\r\n    fee: uint256\r\n    tickLower: int128\r\n    tickUpper: int128\r\n    recipient: address\r\n    deadline: uint256\r\n\r\ninterface ERC721:\r\n    def transferFrom(_from: address, _to: address, _tokenId: uint256): payable\r\n\r\ninterface NonfungiblePositionManager:\r\n    def burn(tokenId: uint256): payable\r\n\r\ninterface WrappedEth:\r\n    def deposit(): payable\r\n    def withdraw(amount: uint256): nonpayable\r\n\r\nevent AddedLiquidity:\r\n    tokenId: indexed(uint256)\r\n    token0: indexed(address)\r\n    token1: indexed(address)\r\n    liquidity: uint256\r\n    amount0: uint256\r\n    amount1: uint256\r\n\r\nevent NFLPModified:\r\n    oldTokenId: indexed(uint256)\r\n    newTokenId: indexed(uint256)\r\n\r\nevent Paused:\r\n    paused: bool\r\n\r\nNONFUNGIBLEPOSITIONMANAGER: constant(address) = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88\r\nUNISWAPV3FACTORY: constant(address) = 0x1F98431c8aD98523631AE4a59f267346ea31F984\r\n\r\nVETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nWETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n\r\nAPPROVE_MID: constant(Bytes[4]) = method_id(\"approve(address,uint256)\")\r\nTRANSFER_MID: constant(Bytes[4]) = method_id(\"transfer(address,uint256)\")\r\nTRANSFERFROM_MID: constant(Bytes[4]) = method_id(\"transferFrom(address,address,uint256)\")\r\nCAIPIN_MID: constant(Bytes[4]) = method_id(\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\")\r\nGETPOOL_MID: constant(Bytes[4]) = method_id(\"getPool(address,address,uint24)\")\r\nSLOT0_MID: constant(Bytes[4]) = method_id(\"slot0()\")\r\nMINT_MID: constant(Bytes[4]) = method_id(\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\")\r\nPOSITIONS_MID: constant(Bytes[4]) = method_id(\"positions(uint256)\")\r\nINCREASELIQUIDITY_MID: constant(Bytes[4]) = method_id(\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\")\r\nDECREASELIQUIDITY_MID: constant(Bytes[4]) = method_id(\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\")\r\nCOLLECT_MID: constant(Bytes[4]) = method_id(\"collect((uint256,address,uint128,uint128))\")\r\n\r\npaused: public(bool)\r\nadmin: public(address)\r\nfeeAddress: public(address)\r\n\r\n@external\r\ndef __init__():\r\n    self.paused = False\r\n    self.admin = msg.sender\r\n    self.feeAddress = 0xf29399fB3311082d9F8e62b988cBA44a5a98ebeD\r\n\r\n@internal\r\n@pure\r\ndef uintSqrt(x: uint256) -> uint256:\r\n    if x > 3:\r\n        z: uint256 = (x + 1) / 2\r\n        y: uint256 = x\r\n        for i in range(256):\r\n            if y == z:\r\n                return y\r\n            y = z\r\n            z = (x / z + z) / 2\r\n        raise \"Did not coverage\"\r\n    elif x == 0:\r\n        return 0\r\n    else:\r\n        return 1\r\n\r\n@internal\r\ndef safeApprove(_token: address, _spender: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        concat(\r\n            APPROVE_MID,\r\n            convert(_spender, bytes32),\r\n            convert(_value, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )  # dev: failed approve\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"Approve failed\"  # dev: failed approve\r\n\r\n@internal\r\ndef safeTransfer(_token: address, _to: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        concat(\r\n            TRANSFER_MID,\r\n            convert(_to, bytes32),\r\n            convert(_value, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"Transfer failed\"  # dev: failed transfer\r\n\r\n@internal\r\ndef safeTransferFrom(_token: address, _from: address, _to: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        concat(\r\n            TRANSFERFROM_MID,\r\n            convert(_from, bytes32),\r\n            convert(_to, bytes32),\r\n            convert(_value, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )  # dev: failed transferFrom\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"TransferFrom failed\"  # dev: failed transferFrom\r\n\r\n@internal\r\ndef addLiquidity(_tokenId: uint256, sender: address, uniV3Params: MintParams) -> (uint256, uint256):\r\n    self.safeApprove(uniV3Params.token0, NONFUNGIBLEPOSITIONMANAGER, uniV3Params.amount0Desired)\r\n    self.safeApprove(uniV3Params.token1, NONFUNGIBLEPOSITIONMANAGER, uniV3Params.amount1Desired)\r\n    if _tokenId == 0:\r\n        sqrtPriceX96: uint256 = 0\r\n        _response32: Bytes[32] = raw_call(\r\n            UNISWAPV3FACTORY,\r\n            concat(\r\n                GETPOOL_MID,\r\n                convert(uniV3Params.token0, bytes32),\r\n                convert(uniV3Params.token1, bytes32),\r\n                convert(uniV3Params.fee, bytes32)\r\n            ),\r\n            max_outsize=32,\r\n            is_static_call=True\r\n        )\r\n        pool: address = convert(convert(_response32, bytes32), address)\r\n        if pool == ZERO_ADDRESS:\r\n            sqrtPriceX96 = 2 ** 96 * self.uintSqrt(uniV3Params.amount0Desired) / self.uintSqrt(uniV3Params.amount1Desired)\r\n        else:\r\n            _response224: Bytes[224] = raw_call(\r\n                pool,\r\n                SLOT0_MID,\r\n                max_outsize=224,\r\n                is_static_call=True\r\n            )\r\n            sqrtPriceX96 = convert(slice(_response224, 0, 32), uint256)\r\n            if sqrtPriceX96 == 0:\r\n                sqrtPriceX96 = 2 ** 96 * self.uintSqrt(uniV3Params.amount0Desired) / self.uintSqrt(uniV3Params.amount1Desired)\r\n\r\n        _response32 = raw_call(\r\n            NONFUNGIBLEPOSITIONMANAGER,\r\n            concat(\r\n                CAIPIN_MID,\r\n                convert(uniV3Params.token0, bytes32),\r\n                convert(uniV3Params.token1, bytes32),\r\n                convert(uniV3Params.fee, bytes32),\r\n                convert(sqrtPriceX96, bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )\r\n        assert convert(convert(_response32, bytes32), address) != ZERO_ADDRESS, \"Create Or Init Pool failed\"\r\n\r\n        _response128: Bytes[128] = raw_call(\r\n            NONFUNGIBLEPOSITIONMANAGER,\r\n            concat(\r\n                MINT_MID,\r\n                convert(uniV3Params.token0, bytes32),\r\n                convert(uniV3Params.token1, bytes32),\r\n                convert(uniV3Params.fee, bytes32),\r\n                convert(uniV3Params.tickLower, bytes32),\r\n                convert(uniV3Params.tickUpper, bytes32),\r\n                convert(uniV3Params.amount0Desired, bytes32),\r\n                convert(uniV3Params.amount1Desired, bytes32),\r\n                convert(uniV3Params.amount0Min, bytes32),\r\n                convert(uniV3Params.amount1Min, bytes32),\r\n                convert(uniV3Params.recipient, bytes32),\r\n                convert(uniV3Params.deadline, bytes32)\r\n            ),\r\n            max_outsize=128\r\n        )\r\n        tokenId: uint256 = convert(slice(_response128, 0, 32), uint256)\r\n        liquidity: uint256 = convert(slice(_response128, 32, 32), uint256)\r\n        amount0: uint256 = convert(slice(_response128, 64, 32), uint256)\r\n        amount1: uint256 = convert(slice(_response128, 96, 32), uint256)\r\n        log AddedLiquidity(tokenId, uniV3Params.token0, uniV3Params.token1, liquidity, amount0, amount1)\r\n        return (amount0, amount1)\r\n    else:\r\n        liquidity: uint256 = 0\r\n        amount0: uint256 = 0\r\n        amount1: uint256 = 0\r\n        _response96: Bytes[96] = raw_call(\r\n            NONFUNGIBLEPOSITIONMANAGER,\r\n            concat(\r\n                INCREASELIQUIDITY_MID,\r\n                convert(_tokenId, bytes32),\r\n                convert(uniV3Params.amount0Desired, bytes32),\r\n                convert(uniV3Params.amount1Desired, bytes32),\r\n                convert(uniV3Params.amount0Min, bytes32),\r\n                convert(uniV3Params.amount1Min, bytes32),\r\n                convert(uniV3Params.deadline, bytes32)\r\n            ),\r\n            max_outsize=96\r\n        )\r\n        liquidity = convert(slice(_response96, 0, 32), uint256)\r\n        amount0 = convert(slice(_response96, 32, 32), uint256)\r\n        amount1 = convert(slice(_response96, 64, 32), uint256)\r\n        log AddedLiquidity(_tokenId, uniV3Params.token0, uniV3Params.token1, liquidity, amount0, amount1)\r\n        return (amount0, amount1)\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef addLiquidityEthForUniV3(_tokenId: uint256, uniV3Params: MintParams):\r\n    assert not self.paused, \"Paused\"\r\n    assert convert(uniV3Params.token0, uint256) < convert(uniV3Params.token1, uint256), \"Unsorted tokens\"\r\n    if uniV3Params.token0 == WETH:\r\n        if msg.value > uniV3Params.amount0Desired:\r\n            send(msg.sender, msg.value - uniV3Params.amount0Desired)\r\n        else:\r\n            assert msg.value == uniV3Params.amount0Desired, \"Eth not enough\"\r\n        WrappedEth(WETH).deposit(value=uniV3Params.amount0Desired)\r\n        self.safeTransferFrom(uniV3Params.token1, msg.sender, self, uniV3Params.amount1Desired)\r\n        amount0: uint256 = 0\r\n        amount1: uint256 = 0\r\n        (amount0, amount1) = self.addLiquidity(_tokenId, msg.sender, uniV3Params)\r\n        amount0 = uniV3Params.amount0Desired - amount0\r\n        amount1 = uniV3Params.amount1Desired - amount1\r\n        if amount0 > 0:\r\n            WrappedEth(WETH).withdraw(amount0)\r\n            send(msg.sender, amount0)\r\n            self.safeApprove(uniV3Params.token0, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n        if amount1 > 0:\r\n            self.safeTransfer(uniV3Params.token1, msg.sender, amount1)\r\n            self.safeApprove(uniV3Params.token1, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n    else:\r\n        assert uniV3Params.token1 == WETH, \"Not Eth Pair\"\r\n        if msg.value > uniV3Params.amount1Desired:\r\n            send(msg.sender, msg.value - uniV3Params.amount1Desired)\r\n        else:\r\n            assert msg.value == uniV3Params.amount1Desired, \"Eth not enough\"\r\n        WrappedEth(WETH).deposit(value=uniV3Params.amount1Desired)\r\n        self.safeTransferFrom(uniV3Params.token0, msg.sender, self, uniV3Params.amount0Desired)\r\n        amount0: uint256 = 0\r\n        amount1: uint256 = 0\r\n        (amount0, amount1) = self.addLiquidity(_tokenId, msg.sender, uniV3Params)\r\n        amount0 = uniV3Params.amount0Desired - amount0\r\n        amount1 = uniV3Params.amount1Desired - amount1\r\n        if amount0 > 0:\r\n            self.safeTransfer(uniV3Params.token0, msg.sender, amount0)\r\n            self.safeApprove(uniV3Params.token0, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n        if amount1 > 0:\r\n            WrappedEth(WETH).withdraw(amount1)\r\n            send(msg.sender, amount1)\r\n            self.safeApprove(uniV3Params.token1, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef addLiquidityForUniV3(_tokenId: uint256, uniV3Params: MintParams):\r\n    assert not self.paused, \"Paused\"\r\n    assert convert(uniV3Params.token0, uint256) < convert(uniV3Params.token1, uint256), \"Unsorted tokens\"\r\n\r\n    self.safeTransferFrom(uniV3Params.token0, msg.sender, self, uniV3Params.amount0Desired)\r\n    self.safeTransferFrom(uniV3Params.token1, msg.sender, self, uniV3Params.amount1Desired)\r\n\r\n    amount0: uint256 = 0\r\n    amount1: uint256 = 0\r\n    (amount0, amount1) = self.addLiquidity(_tokenId, msg.sender, uniV3Params)\r\n    amount0 = uniV3Params.amount0Desired - amount0\r\n    amount1 = uniV3Params.amount1Desired - amount1\r\n    if amount0 > 0:\r\n        self.safeTransfer(uniV3Params.token0, msg.sender, amount0)\r\n        self.safeApprove(uniV3Params.token0, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n    if amount1 > 0:\r\n        self.safeTransfer(uniV3Params.token1, msg.sender, amount1)\r\n        self.safeApprove(uniV3Params.token1, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef modifyPositionForUniV3NFLP(_tokenId: uint256, modifyParams: ModifyParams):\r\n    assert _tokenId != 0, \"Wrong Token ID\"\r\n\r\n    ERC721(NONFUNGIBLEPOSITIONMANAGER).transferFrom(msg.sender, self, _tokenId)\r\n    \r\n    _response384: Bytes[384] = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            POSITIONS_MID,\r\n            convert(_tokenId, bytes32)\r\n        ),\r\n        max_outsize=384,\r\n        is_static_call=True\r\n    )\r\n    token0: address = convert(convert(slice(_response384, 64, 32), uint256), address)\r\n    token1: address = convert(convert(slice(_response384, 96, 32), uint256), address)\r\n    liquidity: uint256 = convert(slice(_response384, 224, 32), uint256)\r\n    \r\n    _response64: Bytes[64] = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            DECREASELIQUIDITY_MID,\r\n            convert(_tokenId, bytes32),\r\n            convert(liquidity, bytes32),\r\n            convert(0, bytes32),\r\n            convert(0, bytes32),\r\n            convert(modifyParams.deadline, bytes32)\r\n        ),\r\n        max_outsize=64\r\n    )\r\n\r\n    _response64 = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            COLLECT_MID,\r\n            convert(_tokenId, bytes32),\r\n            convert(self, bytes32),\r\n            convert(2 ** 128 - 1, bytes32),\r\n            convert(2 ** 128 - 1, bytes32)\r\n        ),\r\n        max_outsize=64\r\n    )\r\n    amount0: uint256 = convert(slice(_response64, 0, 32), uint256)\r\n    amount1: uint256 = convert(slice(_response64, 32, 32), uint256)\r\n    \r\n    NonfungiblePositionManager(NONFUNGIBLEPOSITIONMANAGER).burn(_tokenId)\r\n\r\n    sqrtPriceX96: uint256 = 0\r\n    _response32: Bytes[32] = raw_call(\r\n        UNISWAPV3FACTORY,\r\n        concat(\r\n            GETPOOL_MID,\r\n            convert(token0, bytes32),\r\n            convert(token1, bytes32),\r\n            convert(modifyParams.fee, bytes32)\r\n        ),\r\n        max_outsize=32,\r\n        is_static_call=True\r\n    )\r\n    pool: address = convert(convert(_response32, bytes32), address)\r\n    if pool == ZERO_ADDRESS:\r\n        sqrtPriceX96 = 2 ** 96 * self.uintSqrt(amount0) / self.uintSqrt(amount1)\r\n    else:\r\n        _response224: Bytes[224] = raw_call(\r\n            pool,\r\n            SLOT0_MID,\r\n            max_outsize=224,\r\n            is_static_call=True\r\n        )\r\n        sqrtPriceX96 = convert(slice(_response224, 0, 32), uint256)\r\n        if sqrtPriceX96 == 0:\r\n            sqrtPriceX96 = 2 ** 96 * self.uintSqrt(amount1) / self.uintSqrt(amount1)\r\n\r\n    _response32 = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            CAIPIN_MID,\r\n            convert(token0, bytes32),\r\n            convert(token1, bytes32),\r\n            convert(modifyParams.fee, bytes32),\r\n            convert(sqrtPriceX96, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )\r\n\r\n    assert convert(convert(_response32, bytes32), address) != ZERO_ADDRESS, \"Create Or Init Pool failed\"\r\n\r\n    self.safeApprove(token0, NONFUNGIBLEPOSITIONMANAGER, amount0)\r\n    self.safeApprove(token1, NONFUNGIBLEPOSITIONMANAGER, amount1)\r\n\r\n    _response128: Bytes[128] = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            MINT_MID,\r\n            convert(token0, bytes32),\r\n            convert(token1, bytes32),\r\n            convert(modifyParams.fee, bytes32),\r\n            convert(modifyParams.tickLower, bytes32),\r\n            convert(modifyParams.tickUpper, bytes32),\r\n            convert(amount0, bytes32),\r\n            convert(amount1, bytes32),\r\n            convert(0, bytes32),\r\n            convert(0, bytes32),\r\n            convert(msg.sender, bytes32),\r\n            convert(modifyParams.deadline, bytes32)\r\n        ),\r\n        max_outsize=128\r\n    )\r\n    tokenId: uint256 = convert(slice(_response128, 0, 32), uint256)\r\n    liquiditynew: uint256 = convert(slice(_response128, 32, 32), uint256)\r\n    amount0new: uint256 = convert(slice(_response128, 64, 32), uint256)\r\n    amount1new: uint256 = convert(slice(_response128, 96, 32), uint256)\r\n\r\n    if amount0 > amount0new:\r\n        self.safeTransfer(token0, msg.sender, amount0 - amount0new)\r\n        self.safeApprove(token0, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n    if amount1 > amount1new:\r\n        self.safeTransfer(token1, msg.sender, amount1 - amount1new)\r\n        self.safeApprove(token1, NONFUNGIBLEPOSITIONMANAGER, 0)\r\n    log NFLPModified(_tokenId, tokenId)\r\n\r\n# Admin functions\r\n@external\r\ndef pause(_paused: bool):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.paused = _paused\r\n    log Paused(_paused)\r\n\r\n@external\r\ndef newAdmin(_admin: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.admin = _admin\r\n\r\n@external\r\ndef newFeeAddress(_feeAddress: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAddress = _feeAddress\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef batchWithdraw(token: address[8], amount: uint256[8], to: address[8]):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    for i in range(8):\r\n        if token[i] == VETH:\r\n            send(to[i], amount[i])\r\n        elif token[i] != ZERO_ADDRESS:\r\n            self.safeTransfer(token[i], to[i], amount[i])\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(token: address, amount: uint256, to: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    if token == VETH:\r\n        send(to, amount)\r\n    elif token != ZERO_ADDRESS:\r\n        self.safeTransfer(token, to, amount)\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    assert msg.sender == WETH, \"can't receive Eth\"","ABI":"[{\"name\":\"AddedLiquidity\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"token0\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token1\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidity\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount0\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount1\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NFLPModified\",\"inputs\":[{\"name\":\"oldTokenId\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"newTokenId\",\"type\":\"uint256\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Paused\",\"inputs\":[{\"name\":\"paused\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"addLiquidityEthForUniV3\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"uniV3Params\",\"type\":\"tuple\",\"components\":[{\"name\":\"token0\",\"type\":\"address\"},{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"tickLower\",\"type\":\"int128\"},{\"name\":\"tickUpper\",\"type\":\"int128\"},{\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]}],\"outputs\":[],\"gas\":963921},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addLiquidityForUniV3\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"uniV3Params\",\"type\":\"tuple\",\"components\":[{\"name\":\"token0\",\"type\":\"address\"},{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"tickLower\",\"type\":\"int128\"},{\"name\":\"tickUpper\",\"type\":\"int128\"},{\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]}],\"outputs\":[],\"gas\":867874},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"modifyPositionForUniV3NFLP\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"modifyParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"tickLower\",\"type\":\"int128\"},{\"name\":\"tickUpper\",\"type\":\"int128\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]}],\"outputs\":[],\"gas\":547339},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":39101},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"newAdmin\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37784},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"newFeeAddress\",\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37814},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"batchWithdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address[8]\"},{\"name\":\"amount\",\"type\":\"uint256[8]\"},{\"name\":\"to\",\"type\":\"address[8]\"}],\"outputs\":[],\"gas\":352127},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"outputs\":[],\"gas\":96427},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"feeAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2778}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}