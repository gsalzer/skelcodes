{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n\r\n\r\n        _paused = false;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IContractRegistry.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 contractName) external view returns(address);\r\n}\r\n\r\n// File: contracts/interface/IBancorGovernance.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IBancorGovernance {\r\n    function voteFor(uint256 _id) external;\r\n    function voteAgainst(uint256 _id) external;\r\n    function stake(uint256 _amount) external;\r\n    function unstake(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/interface/IStakingRewards.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IDSToken {\r\n\r\n}\r\n\r\ninterface IStakingRewards {\r\n    // claims all rewards from providing address\r\n    function claimRewards() external returns (uint256);\r\n    // returns pending rewards from providing address\r\n    function pendingRewards(address provider) external view returns (uint256);\r\n    // returns all staked rewards and the ID of the new position\r\n    function stakeRewards(uint256 maxAmount, IDSToken poolToken) external returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/interface/ILiquidityProtection.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\ninterface IConverterAnchor {\r\n\r\n}\r\n\r\ninterface ILiquidityProtection {\r\n    function addLiquidity(\r\n        IConverterAnchor _poolAnchor,\r\n        IERC20 _reserveToken,\r\n        uint256 _amount\r\n    ) external payable returns(uint);\r\n    // returns id of deposit\r\n\r\n    function removeLiquidity(uint256 _id, uint32 _portion) external;\r\n\r\n    function removeLiquidityReturn(\r\n        uint256 _id,\r\n        uint32 _portion,\r\n        uint256 _removeTimestamp\r\n    ) external view returns (uint256, uint256, uint256);\r\n    // returns amount in the reserve token\r\n    // returns actual return amount in the reserve token\r\n    // returns compensation in the network token\r\n\r\n    // call 24 hours after removing liquidity\r\n    function claimBalance(uint256 _startIndex, uint256 _endIndex) external;\r\n}\r\n\r\n// File: contracts/interface/ILiquidityProvider.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\ninterface ILiquidityProvider {\r\n    function initializeAndAddLiquidity(\r\n        IContractRegistry _contractRegistry,\r\n        address _xbntContract,\r\n        IERC20 _bnt,\r\n        IERC20 _vbnt,\r\n        address _poolAnchor,\r\n        uint256 _amount\r\n    ) external returns(uint);\r\n    function removeLiquidity(uint256 _id) external;\r\n    function claimRewards() external returns(uint256);\r\n    function claimBalance() external;\r\n    function claimRewardsAndRemoveLiquidity() external returns(uint256);\r\n    function claimAndRestake(address _poolToken) external returns(uint256, uint256);\r\n    function pendingRewards() external view returns(uint256);\r\n}\r\n\r\n// File: contracts/interface/IMinimalProxyFactory.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IMinimalProxyFactory {\r\n    function deploy(uint256 salt, address implementation) external returns(address proxyAddress);\r\n}\r\n\r\n// File: contracts/interface/IDelegateRegistry.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IDelegateRegistry {\r\n    function setDelegate(bytes32 id, address delegate) external;\r\n}\r\n\r\n// File: contracts/interface/IxBNT.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IxBNT {\r\n    function getProxyAddressDepositIds(address proxyAddress) external view returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts/helpers/LiquidityProvider.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\n\r\n\r\ncontract LiquidityProvider {\r\n    bool private initialized;\r\n\r\n    IContractRegistry private contractRegistry;\r\n    IERC20 private bnt;\r\n    IERC20 private vbnt;\r\n\r\n    address private xbnt;\r\n    uint256 public nextDepositIndexToClaimBalance;\r\n\r\n    function initializeAndAddLiquidity(\r\n        IContractRegistry _contractRegistry,\r\n        address _xbnt,\r\n        IERC20 _bnt,\r\n        IERC20 _vbnt,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    ) external returns(uint256) {\r\n        require(msg.sender == _xbnt, 'Invalid caller');\r\n        require(!initialized, 'Already initialized');\r\n        initialized = true;\r\n\r\n        contractRegistry = _contractRegistry;\r\n        xbnt = _xbnt;\r\n        bnt = _bnt;\r\n        vbnt = _vbnt;\r\n\r\n        return _addLiquidity(_poolToken, _amount);\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address _poolToken,\r\n        uint256 _amount\r\n    ) private returns(uint256 id) {\r\n        ILiquidityProtection lp = getLiquidityProtectionContract();\r\n        bnt.approve(address(lp), uint(-1));\r\n\r\n        id = lp.addLiquidity(IConverterAnchor(_poolToken), bnt, _amount);\r\n\r\n        _retrieveVbntBalance();\r\n    }\r\n\r\n    /*\r\n     * @notice Restake this proxy's rewards\r\n     */\r\n    function claimAndRestake(address _poolToken) external onlyXbntContract returns(uint256 newDepositId, uint256 restakedBal){\r\n        (, newDepositId) = getStakingRewardsContract().stakeRewards(uint(-1), IDSToken(_poolToken));\r\n        restakedBal = _retrieveVbntBalance();\r\n    }\r\n\r\n    function claimRewards() external onlyXbntContract returns(uint256 rewardsAmount){\r\n        rewardsAmount = _claimRewards();\r\n    }\r\n\r\n    function _claimRewards() private returns(uint256 rewards){\r\n        rewards = getStakingRewardsContract().claimRewards();\r\n        _retrieveBntBalance();\r\n    }\r\n\r\n    function _removeLiquidity(ILiquidityProtection _lp, uint256 _id) private {\r\n        _lp.removeLiquidity(_id, 1000000); // full PPM resolution\r\n    }\r\n\r\n    /*\r\n     * @notice Initiate final exit from this proxy\r\n     */\r\n    function claimRewardsAndRemoveLiquidity() external onlyXbntContract returns(uint256 rewards) {\r\n        rewards = _claimRewards();\r\n        uint256[] memory depositIds = getDepositIds();\r\n\r\n        ILiquidityProtection lp = getLiquidityProtectionContract();\r\n        vbnt.approve(address(lp), uint(-1));\r\n\r\n        for(uint256 i = 0; i < depositIds.length; i++){\r\n            _removeLiquidity(lp, depositIds[i]);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Called 24 hours after `claimRewardsAndRemoveLiquidity`\r\n     */\r\n    function claimBalance() external onlyXbntContract {\r\n        getLiquidityProtectionContract().claimBalance(0, getDepositIds().length);\r\n        _retrieveBntBalance();\r\n    }\r\n\r\n    function _retrieveBntBalance() private {\r\n        bnt.transfer(xbnt, bnt.balanceOf(address(this)));\r\n    }\r\n\r\n    function _retrieveVbntBalance() private returns(uint256 vbntBal) {\r\n        vbntBal = vbnt.balanceOf(address(this));\r\n        vbnt.transfer(xbnt, vbntBal);\r\n    }\r\n\r\n    function pendingRewards() external view returns(uint){\r\n        return getStakingRewardsContract().pendingRewards(address(this));\r\n    }\r\n\r\n    function getStakingRewardsContract() private view returns(IStakingRewards){\r\n        return IStakingRewards(contractRegistry.addressOf('StakingRewards'));\r\n    }\r\n\r\n    function getLiquidityProtectionContract() private view returns(ILiquidityProtection){\r\n        return ILiquidityProtection(contractRegistry.addressOf('LiquidityProtection'));\r\n    }\r\n\r\n    function getDepositIds() private view returns(uint256[] memory){\r\n        return IxBNT(xbnt).getProxyAddressDepositIds(address(this));\r\n    }\r\n\r\n    modifier onlyXbntContract {\r\n        require(msg.sender == xbnt, 'Invalid caller');\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/xBNT.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IBancorNetwork {\r\n    function convertByPath(\r\n        address[] calldata _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _beneficiary,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    ) external payable returns (uint256);\r\n\r\n    function rateByPath(address[] calldata _path, uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function conversionPath(IERC20 _sourceToken, IERC20 _targetToken)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n\r\ncontract xBNT is ERC20UpgradeSafe, OwnableUpgradeSafe, PausableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private bnt;\r\n    IERC20 private vbnt;\r\n    IContractRegistry private contractRegistry;\r\n    IBancorGovernance internal bancorGovernance;\r\n    IMinimalProxyFactory private proxyFactory;\r\n\r\n    bytes32 private constant bancorNetworkName = 'BancorNetwork';\r\n    bytes32 private constant stakingRewardsName = 'StakingRewards';\r\n    bytes32 private constant liquidityProtectionName = 'LiquidityProtection';\r\n\r\n    uint32 private constant PPM = 1000000;\r\n    uint256 private constant DEC_18 = 1e18;\r\n    uint256 private constant BUFFER_TARGET = 20; // 5%\r\n    uint256 private constant MAX_UINT = 2**256 - 1;\r\n    uint256 private constant WAITING_PERIOD = 2 days;\r\n    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 10;\r\n    uint256 private constant LIQUIDATION_TIME_PERIOD = 4 weeks;\r\n\r\n    uint256 private lpImplementationChangedTimestamp;\r\n    uint256 private governanceAddressChangedTimestamp;\r\n\r\n    uint256 public adminActiveTimestamp;\r\n\r\n    uint256 public lowestActiveProxyIndex;\r\n    uint256 public nextProxyIndex;\r\n\r\n    uint256 public totalAllocatedNav;\r\n    uint256 public pendingRewardsContributionToNav;\r\n\r\n    uint256 public withdrawableBntFees;\r\n\r\n    address private manager;\r\n    address private manager2;\r\n    address private protocolMinter;\r\n    address internal liquidityProviderImplementation;\r\n\r\n    address private queuedLiquidityProviderImplementation;\r\n    address private queuedGovernanceAddress;\r\n\r\n    address private constant ZERO_ADDRESS = address(0);\r\n\r\n    struct FeeDivisors {\r\n        uint256 mintFee;\r\n        uint256 burnFee;\r\n        uint256 claimFee;\r\n    }\r\n\r\n    FeeDivisors public feeDivisors;\r\n\r\n    struct Deposit {\r\n        address proxyAddress;\r\n        uint256 depositId;\r\n        uint256 initialContribution;\r\n        uint256 latestContributionToNav;\r\n    }\r\n\r\n    mapping(uint256 => Deposit) public depositIdToDeposit;\r\n\r\n    struct ProxyData {\r\n        uint256[] depositIds;\r\n        uint256 pendingRewardsContributionToNav;\r\n        uint256 deployedBnt;\r\n        bool balanceClaimed;\r\n    }\r\n\r\n    mapping(address => ProxyData) private proxyAddressToData;\r\n    mapping(uint256 => address) public proxyIndexToAddress;\r\n\r\n    // addresses are locked from transfer after minting or burning\r\n    uint256 private constant BLOCK_LOCK_COUNT = 6;\r\n    // last block for which this address is blocklocked\r\n    mapping(address => uint256) public lastLockedBlock;\r\n\r\n    event AddLiquidity(\r\n        address poolToken,\r\n        uint256 amount,\r\n        uint256 depositId,\r\n        uint256 proxyIndex,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ClaimRestake(\r\n        uint256 proxyIndex,\r\n        uint256 amount,\r\n        uint256 depositId,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ClaimRemove(uint256 proxyIndex, uint256 rewardsClaimed);\r\n\r\n    event ClaimRewards(uint256 proxyIndex, uint256 rewardsClaimed);\r\n\r\n    event ClaimBalance(uint256 proxyIndex);\r\n\r\n    event RewardsNavUpdated(\r\n        uint256 previousRewardsNav,\r\n        uint256 newRewardsNav,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event KeyAddressChange();\r\n\r\n    function initialize(\r\n        IERC20 _bnt,\r\n        IERC20 _vbnt,\r\n        IContractRegistry _contractRegistry,\r\n        IBancorGovernance _bancorGovernance,\r\n        IMinimalProxyFactory _proxyFactory,\r\n        address _liquidityProviderImplementation,\r\n        address _protocolMinter,\r\n        uint256 _mintFeeDivisor,\r\n        uint256 _burnFeeDivisor,\r\n        uint256 _claimFeeDivisor,\r\n        uint256 _initialMint,\r\n        string memory _symbol\r\n    ) public initializer {\r\n        __ERC20_init('xBNT', _symbol);\r\n        __Ownable_init();\r\n        __Pausable_init();\r\n\r\n        bnt = _bnt;\r\n        vbnt = _vbnt;\r\n        contractRegistry = _contractRegistry;\r\n        bancorGovernance = _bancorGovernance;\r\n        proxyFactory = _proxyFactory;\r\n        liquidityProviderImplementation = _liquidityProviderImplementation;\r\n\r\n        protocolMinter = _protocolMinter;\r\n\r\n        _mint(msg.sender, _initialMint);\r\n        _setFeeDivisors(_mintFeeDivisor, _burnFeeDivisor, _claimFeeDivisor);\r\n        _updateAdminActiveTimestamp();\r\n        _pause();\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                          User-Facing                                      */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice Mint xBNT using ETH\r\n     * @param minReturn: BancorNetwork trade minReturn\r\n     */\r\n    function mint(uint256 minReturn)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        notLocked(msg.sender)\r\n    {\r\n        require(msg.value > 0, 'Must send ETH');\r\n        lock(msg.sender);\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        path[1] = 0xb1CD6e4153B2a390Cf00A6556b0fC1458C4A5533; // ETH_BNT_ANCHOR\r\n        path[2] = address(bnt);\r\n\r\n        uint256 incrementalBnt =\r\n            IBancorNetwork(contractRegistry.addressOf(bancorNetworkName))\r\n                .convertByPath{value: msg.value}(\r\n                path,\r\n                msg.value,\r\n                minReturn,\r\n                ZERO_ADDRESS,\r\n                ZERO_ADDRESS,\r\n                0\r\n            );\r\n\r\n        _mintInternal(incrementalBnt, false);\r\n    }\r\n\r\n    /*\r\n     * @notice Mint xBNT using BNT\r\n     * @notice Must run approval first\r\n     * @param bntAmount: BNT amount\r\n     */\r\n    function mintWithToken(uint256 bntAmount)\r\n        external\r\n        whenNotPaused\r\n        notLocked(msg.sender)\r\n    {\r\n        require(bntAmount > 0, 'Must send BNT');\r\n        lock(msg.sender);\r\n\r\n        bnt.transferFrom(msg.sender, address(this), bntAmount);\r\n\r\n        _mintInternal(bntAmount, msg.sender == protocolMinter);\r\n    }\r\n\r\n    function _mintInternal(uint256 _incrementalBnt, bool _isProtocolMinter)\r\n        private\r\n    {\r\n        uint256 fee;\r\n        if (!_isProtocolMinter) {\r\n            fee = _calculateAndIncrementFee(\r\n                _incrementalBnt,\r\n                feeDivisors.mintFee\r\n            );\r\n        }\r\n\r\n        uint256 mintAmount =\r\n            calculateMintAmount(_incrementalBnt.sub(fee), totalSupply());\r\n\r\n        super._mint(msg.sender, mintAmount);\r\n    }\r\n\r\n    function calculateMintAmount(uint256 incrementalBnt, uint256 totalSupply)\r\n        public\r\n        view\r\n        returns (uint256 mintAmount)\r\n    {\r\n        if (totalSupply == 0)\r\n            return incrementalBnt.mul(INITIAL_SUPPLY_MULTIPLIER);\r\n\r\n        mintAmount = (incrementalBnt).mul(totalSupply).div(\r\n            getNav().sub(incrementalBnt)\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @notice Burn xBNT\r\n     * @notice Will fail if pro rata BNT is more than buffer balance\r\n     * @param redeemAmount: xBNT to burn\r\n     * @param redeemForEth: Redeem for ETH or BNT\r\n     * @param minReturn: If redeem for ETH, BancorNetwork minReturn\r\n     */\r\n    function burn(\r\n        uint256 redeemAmount,\r\n        bool redeemForEth,\r\n        uint256 minReturn\r\n    ) public notLocked(msg.sender) {\r\n        require(redeemAmount > 0, 'Must send xBNT');\r\n        lock(msg.sender);\r\n\r\n        uint256 bufferBalance = getBufferBalance();\r\n        uint256 proRataBnt = getNav().mul(redeemAmount).div(totalSupply());\r\n        require(\r\n            proRataBnt <= bufferBalance,\r\n            'Burn exceeds available liquidity'\r\n        );\r\n\r\n        super._burn(msg.sender, redeemAmount);\r\n\r\n        uint256 fee;\r\n        if (msg.sender != protocolMinter) {\r\n            fee = _calculateAndIncrementFee(proRataBnt, feeDivisors.burnFee);\r\n        }\r\n\r\n        if (redeemForEth) {\r\n            address bancorNetworkAddress =\r\n                contractRegistry.addressOf(bancorNetworkName);\r\n            _approveIfNecessary(bnt, bancorNetworkAddress); // in case registry addr has changed\r\n\r\n            address[] memory path = new address[](3);\r\n            path[0] = address(bnt);\r\n            path[1] = 0xb1CD6e4153B2a390Cf00A6556b0fC1458C4A5533; // ETH_BNT_ANCHOR\r\n            path[2] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n            IBancorNetwork(bancorNetworkAddress).convertByPath(\r\n                path,\r\n                proRataBnt.sub(fee),\r\n                minReturn,\r\n                msg.sender,\r\n                ZERO_ADDRESS,\r\n                0\r\n            );\r\n        } else {\r\n            bnt.transfer(msg.sender, proRataBnt.sub(fee));\r\n        }\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                      Liquidity Provision                                  */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice Makes BNT deposit on Bancor\r\n     * @notice Deploys new proxy\r\n     * @notice Allocates buffer BNT to allocated NAV\r\n     * @param _poolAnchor: Address of liquidity pool\r\n     * @param _amount: BNT amount\r\n     */\r\n    function addLiquidity(IConverterAnchor _poolAnchor, uint256 _amount)\r\n        external\r\n        onlyOwnerOrManager\r\n    {\r\n        uint256 salt =\r\n            uint256(keccak256(abi.encodePacked(nextProxyIndex, _amount)));\r\n        address liquidityProviderProxy =\r\n            proxyFactory.deploy(salt, liquidityProviderImplementation);\r\n\r\n        bnt.transfer(liquidityProviderProxy, _amount);\r\n\r\n        uint256 depositId =\r\n            ILiquidityProvider(liquidityProviderProxy)\r\n                .initializeAndAddLiquidity(\r\n                contractRegistry,\r\n                address(this),\r\n                bnt,\r\n                vbnt,\r\n                address(_poolAnchor),\r\n                _amount\r\n            );\r\n\r\n        Deposit memory newDeposit =\r\n            Deposit({\r\n                proxyAddress: liquidityProviderProxy,\r\n                depositId: depositId,\r\n                initialContribution: _amount,\r\n                latestContributionToNav: _amount\r\n            });\r\n\r\n        emit AddLiquidity(\r\n            address(_poolAnchor),\r\n            _amount,\r\n            depositId,\r\n            nextProxyIndex,\r\n            block.timestamp\r\n        );\r\n\r\n        depositIdToDeposit[depositId] = newDeposit;\r\n\r\n        ProxyData storage proxyData =\r\n            proxyAddressToData[liquidityProviderProxy];\r\n        proxyData.depositIds.push(depositId);\r\n        proxyData.deployedBnt = _amount;\r\n\r\n        proxyIndexToAddress[nextProxyIndex] = liquidityProviderProxy;\r\n        nextProxyIndex++;\r\n\r\n        totalAllocatedNav = totalAllocatedNav.add(_amount);\r\n\r\n        _stake(_amount);\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    /*\r\n     * @notice Restakes rewards from current deposit into new deposit\r\n     * @notice Deploys capital to same proxy as current deposit\r\n     * @notice Allocates from rewards NAV to allocated NAV\r\n     * @param proxyIndex: Proxy index\r\n     * @param poolToken: Pool to restake rewards to\r\n     */\r\n    function claimAndRestake(uint256 proxyIndex, address poolToken)\r\n        external\r\n        onlyOwnerOrManager\r\n    {\r\n        address proxyAddress = proxyIndexToAddress[proxyIndex];\r\n        ProxyData storage proxyData = proxyAddressToData[proxyAddress];\r\n\r\n        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\r\n\r\n        (uint256 newDepositId, uint256 restakedBal) =\r\n            lpProxy.claimAndRestake(poolToken);\r\n\r\n        // fee effectively deducted from buffer balance\r\n        // because full rewards are restaked without cycling through xBNT\r\n        _calculateAndIncrementFee(restakedBal, feeDivisors.claimFee);\r\n\r\n        proxyData.depositIds.push(newDepositId);\r\n        proxyData.deployedBnt = proxyData.deployedBnt.add(restakedBal);\r\n\r\n        // zero out restaked rewards\r\n        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(\r\n            proxyData.pendingRewardsContributionToNav\r\n        );\r\n        proxyData.pendingRewardsContributionToNav = 0;\r\n\r\n        // add restaked rewards back to nav\r\n        totalAllocatedNav = totalAllocatedNav.add(restakedBal);\r\n\r\n        depositIdToDeposit[newDepositId] = Deposit({\r\n            proxyAddress: proxyAddress,\r\n            depositId: newDepositId,\r\n            initialContribution: restakedBal,\r\n            latestContributionToNav: restakedBal\r\n        });\r\n\r\n        emit ClaimRestake(\r\n            proxyIndex,\r\n            restakedBal,\r\n            newDepositId,\r\n            block.timestamp\r\n        );\r\n\r\n        _stake(restakedBal);\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    /*\r\n     * @notice Iterates through proxies to calculate current available rewards\r\n     * @notice Must be called daily or more to stay current with NAV\r\n     * @notice We specify begin/end indices in case num proxies approaches gas limit\r\n     * @param beginProxyIndexIterator: proxyIndex to begin iteration\r\n     * @param endProxyIndexIterator: proxyIndex to end iteration\r\n     */\r\n    function updatePendingRewardsContributionToNav(\r\n        uint256 beginProxyIndexIterator,\r\n        uint256 endProxyIndexIterator\r\n    ) external onlyOwnerOrManager {\r\n        require(\r\n            beginProxyIndexIterator >= lowestActiveProxyIndex,\r\n            'Invalid index'\r\n        );\r\n        require(endProxyIndexIterator <= nextProxyIndex, 'Invalid index');\r\n        require(\r\n            endProxyIndexIterator > beginProxyIndexIterator,\r\n            'Invalid order'\r\n        );\r\n\r\n        IStakingRewards stakingRewards = getStakingRewardsContract();\r\n\r\n        uint256 replacedPendingRewardsContributionToNav;\r\n        uint256 updatedPendingRewardsContributionToNav;\r\n\r\n        for (uint256 i = lowestActiveProxyIndex; i < nextProxyIndex; i++) {\r\n            address proxyAddress = proxyIndexToAddress[i];\r\n            replacedPendingRewardsContributionToNav = replacedPendingRewardsContributionToNav\r\n                .add(\r\n                proxyAddressToData[proxyAddress].pendingRewardsContributionToNav\r\n            );\r\n\r\n            uint256 newContributionToRewardsNav =\r\n                stakingRewards.pendingRewards(proxyAddress);\r\n\r\n            proxyAddressToData[proxyAddress]\r\n                .pendingRewardsContributionToNav = newContributionToRewardsNav;\r\n            updatedPendingRewardsContributionToNav = updatedPendingRewardsContributionToNav\r\n                .add(newContributionToRewardsNav);\r\n        }\r\n\r\n        emit RewardsNavUpdated(\r\n            pendingRewardsContributionToNav,\r\n            updatedPendingRewardsContributionToNav,\r\n            block.timestamp\r\n        );\r\n\r\n        pendingRewardsContributionToNav = pendingRewardsContributionToNav\r\n            .add(updatedPendingRewardsContributionToNav)\r\n            .sub(replacedPendingRewardsContributionToNav);\r\n    }\r\n\r\n    /*\r\n     * @notice Updates NAV for value of deposits\r\n     * @notice Needs to be called weekly at least\r\n     * @notice Due to IL protection, allocated NAV is assumed to be the greater of value\r\n     * of initial deposit or  removeLiquidityReturn\r\n     * @notice We specify begin/end indices in case num deposits approaches gas limit\r\n     * @param beginProxyIndexIterator: proxyIndex to begin iteration\r\n     * @param endProxyIndexIterator: proxyIndex to end iteration\r\n     */\r\n    function updateTotalAllocatedNav(\r\n        uint256 beginProxyIndexIterator,\r\n        uint256 endProxyIndexIterator\r\n    ) external onlyOwnerOrManager {\r\n        require(\r\n            beginProxyIndexIterator >= lowestActiveProxyIndex,\r\n            'Invalid index'\r\n        );\r\n        require(endProxyIndexIterator <= nextProxyIndex, 'Invalid index');\r\n\r\n        ILiquidityProtection lp = getLiquidityProtectionContract();\r\n\r\n        uint256[] memory depositIds;\r\n        uint256 newContributionToAllocatedNav;\r\n\r\n        for (\r\n            uint256 i = beginProxyIndexIterator;\r\n            i < endProxyIndexIterator;\r\n            i++\r\n        ) {\r\n            depositIds = proxyAddressToData[proxyIndexToAddress[i]].depositIds;\r\n\r\n            for (uint256 j = 0; j < depositIds.length; j++) {\r\n                (newContributionToAllocatedNav, , ) = lp.removeLiquidityReturn(\r\n                    depositIds[j],\r\n                    PPM,\r\n                    block.timestamp\r\n                );\r\n\r\n                Deposit storage deposit = depositIdToDeposit[depositIds[j]];\r\n\r\n                totalAllocatedNav = totalAllocatedNav\r\n                    .sub(deposit.latestContributionToNav)\r\n                    .add(newContributionToAllocatedNav);\r\n                deposit.latestContributionToNav = newContributionToAllocatedNav;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Removes all deposits from proxy at lowestActiveProxyIndex\r\n     */\r\n    function claimRewardsAndRemoveLiquidity() external onlyOwnerOrManager {\r\n        _claimRewardsAndRemoveLiquidity();\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    function emergencyClaimAndRemove() external liquidationTimeElapsed {\r\n        _claimRewardsAndRemoveLiquidity();\r\n    }\r\n\r\n    function _claimRewardsAndRemoveLiquidity() private {\r\n        address proxyAddress = proxyIndexToAddress[lowestActiveProxyIndex];\r\n        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\r\n        ProxyData storage proxyData = proxyAddressToData[proxyAddress];\r\n\r\n        // rewards nav reallocated implicitly to buffer balance\r\n        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(\r\n            proxyData.pendingRewardsContributionToNav\r\n        );\r\n        proxyData.pendingRewardsContributionToNav = 0;\r\n\r\n        _unstake(proxyData.deployedBnt);\r\n        vbnt.transfer(proxyAddress, proxyData.deployedBnt);\r\n\r\n        uint256 rewardsClaimed = lpProxy.claimRewardsAndRemoveLiquidity();\r\n        _calculateAndIncrementFee(rewardsClaimed, feeDivisors.claimFee);\r\n\r\n        emit ClaimRemove(lowestActiveProxyIndex, rewardsClaimed);\r\n\r\n        // we don't deduct totalAllocatedNav yet because we need to wait\r\n        // 24 hours to `claimBalance`. Only rewards are immediately retrieved\r\n\r\n        lowestActiveProxyIndex++;\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    /*\r\n     * @notice Second step in removal process\r\n     * @notice Claims deposits balance 24 hrs after `claimRewardsAndRemoveLiquidity` called\r\n     * @param proxyIndex: proxyIndex\r\n     */\r\n    function claimBalance(uint256 proxyIndex) external onlyOwnerOrManager {\r\n        _claimBalance(proxyIndex);\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    function emergencyClaimBalance(uint256 proxyIndex)\r\n        external\r\n        liquidationTimeElapsed\r\n    {\r\n        _claimBalance(proxyIndex);\r\n    }\r\n\r\n    function _claimBalance(uint256 _proxyIndex) private {\r\n        address proxyAddress = proxyIndexToAddress[_proxyIndex];\r\n        ProxyData memory proxyData = proxyAddressToData[proxyAddress];\r\n\r\n        require(!proxyData.balanceClaimed, 'Already claimed');\r\n        proxyAddressToData[proxyAddress].balanceClaimed = true;\r\n\r\n        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\r\n        lpProxy.claimBalance();\r\n\r\n        uint256 contributionToTotalAllocatedNav;\r\n\r\n        uint256[] memory depositIds = proxyData.depositIds;\r\n        for (uint256 i = 0; i < depositIds.length; i++) {\r\n            contributionToTotalAllocatedNav = contributionToTotalAllocatedNav\r\n                .add(depositIdToDeposit[depositIds[i]].latestContributionToNav);\r\n        }\r\n\r\n        emit ClaimBalance(_proxyIndex);\r\n\r\n        // allocatedNav now becomes bnt buffer balance\r\n        totalAllocatedNav = totalAllocatedNav.sub(\r\n            contributionToTotalAllocatedNav\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @notice Claims rewards from a proxy without restaking\r\n     * @notice Will reset rewards multiplier - use sparingly when buffer balance needed\r\n     */\r\n    function claimRewards(uint256 proxyIndex) external onlyOwnerOrManager {\r\n        address proxyAddress = proxyIndexToAddress[lowestActiveProxyIndex];\r\n        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\r\n\r\n        uint256 proxyContributionToRewardsNav =\r\n            getProxyAddressRewardsContributionToNav(proxyAddress);\r\n        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(\r\n            proxyContributionToRewardsNav\r\n        );\r\n        proxyAddressToData[proxyAddress].pendingRewardsContributionToNav = 0;\r\n\r\n        uint256 rewards = lpProxy.claimRewards();\r\n        _calculateAndIncrementFee(rewards, feeDivisors.claimFee);\r\n        _updateAdminActiveTimestamp();\r\n\r\n        emit ClaimRewards(proxyIndex, rewards);\r\n    }\r\n\r\n    function getLiquidityProtectionContract()\r\n        public\r\n        view\r\n        returns (ILiquidityProtection)\r\n    {\r\n        return\r\n            ILiquidityProtection(\r\n                contractRegistry.addressOf(liquidityProtectionName)\r\n            );\r\n    }\r\n\r\n    function getStakingRewardsContract() public view returns (IStakingRewards) {\r\n        return IStakingRewards(contractRegistry.addressOf(stakingRewardsName));\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                             Utils                                         */\r\n    /* ========================================================================================= */\r\n\r\n    function getProxyAddressDepositIds(address proxyAddress)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return proxyAddressToData[proxyAddress].depositIds;\r\n    }\r\n\r\n    function getProxyAddressRewardsContributionToNav(address proxyAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return proxyAddressToData[proxyAddress].pendingRewardsContributionToNav;\r\n    }\r\n\r\n    function changeLiquidityProviderImplementation(address newImplementation)\r\n        external\r\n        onlyOwner\r\n    {\r\n        queuedLiquidityProviderImplementation = newImplementation;\r\n        lpImplementationChangedTimestamp = block.timestamp;\r\n        emit KeyAddressChange();\r\n    }\r\n\r\n    function confirmLiquidityProviderImplementationChange() external onlyOwner {\r\n        require(\r\n            block.timestamp >\r\n                lpImplementationChangedTimestamp.add(WAITING_PERIOD),\r\n            'Too soon'\r\n        );\r\n        liquidityProviderImplementation = queuedLiquidityProviderImplementation;\r\n    }\r\n\r\n    function changeGovernanceAddress(address newAddress) external onlyOwner {\r\n        queuedGovernanceAddress = newAddress;\r\n        governanceAddressChangedTimestamp = block.timestamp;\r\n        emit KeyAddressChange();\r\n    }\r\n\r\n    function confirmGovernanceAddressChange() external onlyOwner {\r\n        require(\r\n            block.timestamp >\r\n                governanceAddressChangedTimestamp.add(WAITING_PERIOD),\r\n            'Too soon'\r\n        );\r\n        bancorGovernance = IBancorGovernance(queuedGovernanceAddress);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                           Governance                                      */\r\n    /* ========================================================================================= */\r\n\r\n    // we should probably have a setter in case bancor gov address changes\r\n    function _stake(uint256 _amount) private {\r\n        bancorGovernance.stake(_amount);\r\n    }\r\n\r\n    function _unstake(uint256 _amount) private {\r\n        bancorGovernance.unstake(_amount);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                               NAV                                         */\r\n    /* ========================================================================================= */\r\n\r\n    function getTargetBufferBalance() public view returns (uint256) {\r\n        return getNav().div(BUFFER_TARGET);\r\n    }\r\n\r\n    function getNav() public view returns (uint256) {\r\n        return\r\n            totalAllocatedNav.add(getRewardsContributionToNav()).add(\r\n                getBufferBalance()\r\n            );\r\n    }\r\n\r\n    function getRewardsContributionToNav() public view returns (uint256) {\r\n        uint256 unassessedFees =\r\n            pendingRewardsContributionToNav.div(feeDivisors.claimFee);\r\n        return pendingRewardsContributionToNav.sub(unassessedFees);\r\n    }\r\n\r\n    function getBufferBalance() public view returns (uint256) {\r\n        uint256 bntBal = bnt.balanceOf(address(this));\r\n        if (bntBal < withdrawableBntFees) return 0;\r\n        return bntBal.sub(withdrawableBntFees);\r\n    }\r\n\r\n    function _calculateFee(uint256 _value, uint256 _feeDivisor)\r\n        internal\r\n        pure\r\n        returns (uint256 fee)\r\n    {\r\n        if (_feeDivisor > 0 && _value > 0) {\r\n            fee = _value.div(_feeDivisor);\r\n        }\r\n    }\r\n\r\n    function _incrementWithdrawableBntFees(uint256 _feeAmount) private {\r\n        withdrawableBntFees = withdrawableBntFees.add(_feeAmount);\r\n    }\r\n\r\n    function _calculateAndIncrementFee(uint256 _value, uint256 _feeDivisor)\r\n        private\r\n        returns (uint256 fee)\r\n    {\r\n        fee = _calculateFee(_value, _feeDivisor);\r\n        _incrementWithdrawableBntFees(fee);\r\n    }\r\n\r\n    function setDelegate(\r\n        address delegateRegistry,\r\n        bytes32 id,\r\n        address delegate\r\n    ) external onlyOwnerOrManager {\r\n        IDelegateRegistry(delegateRegistry).setDelegate(id, delegate);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                              Utils                                        */\r\n    /* ========================================================================================= */\r\n\r\n    function _approveIfNecessary(IERC20 _token, address _toApprove) private {\r\n        if (_token.allowance(address(this), _toApprove) == 0) {\r\n            _token.safeApprove(_toApprove, MAX_UINT);\r\n        }\r\n    }\r\n\r\n    function getBancorNetworkContract() public view returns (IBancorNetwork) {\r\n        return IBancorNetwork(contractRegistry.addressOf(bancorNetworkName));\r\n    }\r\n\r\n    function approveVbnt() external onlyOwnerOrManager {\r\n        vbnt.approve(address(bancorGovernance), MAX_UINT);\r\n    }\r\n\r\n    function pauseContract() public onlyOwnerOrManager {\r\n        _pause();\r\n    }\r\n\r\n    function unpauseContract() external onlyOwnerOrManager {\r\n        _unpause();\r\n    }\r\n\r\n    modifier onlyOwnerOrManager {\r\n        require(\r\n            msg.sender == owner() ||\r\n                msg.sender == manager ||\r\n                msg.sender == manager2,\r\n            'Non-admin caller'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier liquidationTimeElapsed {\r\n        require(\r\n            adminActiveTimestamp.add(LIQUIDATION_TIME_PERIOD) < block.timestamp,\r\n            'Liquidation time not elapsed'\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @notice manager == alternative admin caller to owner\r\n     */\r\n    function setManager(address _manager) external onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    /*\r\n     * @notice manager2 == alternative admin caller to owner\r\n     */\r\n    function setManager2(address _manager2) external onlyOwner {\r\n        manager2 = _manager2;\r\n    }\r\n\r\n    function setProtocolMinter(address _protocolMinter) external onlyOwner {\r\n        protocolMinter = _protocolMinter;\r\n    }\r\n\r\n    /*\r\n     * @notice Inverse of fee i.e., a fee divisor of 100 == 1%\r\n     * @notice Three fee types\r\n     * @dev Mint fee 0 or <= 2%\r\n     * @dev Burn fee 0 or <= 1%\r\n     * @dev Claim fee 0 <= 4%\r\n     */\r\n    function setFeeDivisors(\r\n        uint256 mintFeeDivisor,\r\n        uint256 burnFeeDivisor,\r\n        uint256 claimFeeDivisor\r\n    ) external onlyOwner {\r\n        _setFeeDivisors(mintFeeDivisor, burnFeeDivisor, claimFeeDivisor);\r\n    }\r\n\r\n    function _setFeeDivisors(\r\n        uint256 _mintFeeDivisor,\r\n        uint256 _burnFeeDivisor,\r\n        uint256 _claimFeeDivisor\r\n    ) private {\r\n        require(_mintFeeDivisor == 0 || _mintFeeDivisor >= 50, 'Invalid fee');\r\n        require(_burnFeeDivisor == 0 || _burnFeeDivisor >= 100, 'Invalid fee');\r\n        require(_claimFeeDivisor >= 25, 'Invalid fee');\r\n        feeDivisors.mintFee = _mintFeeDivisor;\r\n        feeDivisors.burnFee = _burnFeeDivisor;\r\n        feeDivisors.claimFee = _claimFeeDivisor;\r\n    }\r\n\r\n    /*\r\n     * @notice Records admin activity\r\n     * @notice If not certified for a period exceeding LIQUIDATION_TIME_PERIOD,\r\n     * emergencyCooldown and emergencyRedeem become available to non-admin caller\r\n     */\r\n    function _updateAdminActiveTimestamp() private {\r\n        adminActiveTimestamp = block.timestamp;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender != tx.origin, 'Errant ETH deposit');\r\n    }\r\n\r\n    /**\r\n     *  BlockLock logic: Implements locking of mint, burn, transfer and transferFrom\r\n     *  functions via a notLocked modifier.\r\n     *  Functions are locked per address.\r\n     */\r\n    modifier notLocked(address lockedAddress) {\r\n        require(\r\n            lastLockedBlock[lockedAddress] <= block.number,\r\n            \"Function is temporarily locked for this address\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Lock mint, burn, transfer and transferFrom functions\r\n     *      for _address for BLOCK_LOCK_COUNT blocks\r\n     */\r\n    function lock(address _address) private {\r\n        lastLockedBlock[_address] = block.number + BLOCK_LOCK_COUNT;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        notLocked(msg.sender)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override notLocked(sender) returns (bool) {\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"}],\"name\":\"ClaimBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"name\":\"ClaimRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimRestake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeyAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRewardsNav\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardsNav\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardsNavUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_poolAnchor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminActiveTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveVbnt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemForEth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementalBnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"changeLiquidityProviderImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"claimAndRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsAndRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmGovernanceAddressChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmLiquidityProviderImplementationChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositIdToDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestContributionToNav\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyClaimAndRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proxyIndex\",\"type\":\"uint256\"}],\"name\":\"emergencyClaimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBancorNetworkContract\",\"outputs\":[{\"internalType\":\"contract IBancorNetwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityProtectionContract\",\"outputs\":[{\"internalType\":\"contract ILiquidityProtection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"getProxyAddressDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"getProxyAddressRewardsContributionToNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsContributionToNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRewardsContract\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_bnt\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_vbnt\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IBancorGovernance\",\"name\":\"_bancorGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IMinimalProxyFactory\",\"name\":\"_proxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityProviderImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastLockedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowestActiveProxyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bntAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProxyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardsContributionToNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyIndexToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager2\",\"type\":\"address\"}],\"name\":\"setManager2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolMinter\",\"type\":\"address\"}],\"name\":\"setProtocolMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocatedNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginProxyIndexIterator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endProxyIndexIterator\",\"type\":\"uint256\"}],\"name\":\"updatePendingRewardsContributionToNav\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginProxyIndexIterator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endProxyIndexIterator\",\"type\":\"uint256\"}],\"name\":\"updateTotalAllocatedNav\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableBntFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"xBNT","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://715bcc878bae8e118e43a4d0ca69612bc8f3ca49c3bcd797711e2ad48a281532"}]}