{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary LibBytes {\r\n      /***********************************|\r\n    |        Read Bytes Functions       |\r\n    |__________________________________*/\r\n\r\n    /**\r\n    * @dev Reads a bytes32 value from a position in a byte array.\r\n    * @param b Byte array containing a bytes32 value.\r\n    * @param index Index in byte array of bytes32 value.\r\n    * @return result bytes32 value from byte array.\r\n    */\r\n    function readBytes32(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32 result)\r\n    {\r\n        require(\r\n        b.length >= index + 32,\r\n        \"LibBytes#readBytes32 greater or equal to 32 length required\"\r\n        );\r\n\r\n        // Arrays are prefixed by a 256 bit length parameter\r\n        index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n        result := mload(add(b, index))\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract MultiSigLibEIP712 {\r\n    /***********************************|\r\n  |             Constants             |\r\n  |__________________________________*/\r\n\r\n    // EIP712Domain\r\n    string public constant EIP712_DOMAIN_NAME = \"MultiSig\";\r\n    string public constant EIP712_DOMAIN_VERSION = \"v1\";\r\n\r\n    // EIP712Domain Separator\r\n    bytes32 public EIP712_DOMAIN_SEPARATOR;\r\n\r\n    // SUBMIT_TRANSACTION_TYPE_HASH = keccak256(\"submitTransaction(uint256 transactionId,address destination,uint256 value,bytes data)\");\r\n    bytes32 public constant SUBMIT_TRANSACTION_TYPE_HASH = 0x2c78e27c3bb2592e67e8d37ad1a95bfccd188e77557c22593b1af0b920a08295;\r\n\r\n    // CONFIRM_TRANSACTION_TYPE_HASH = keccak256(\"confirmTransaction(uint256 transactionId)\");\r\n    bytes32 public constant CONFIRM_TRANSACTION_TYPE_HASH = 0x3e96bdc38d4133bc81813a187b2d41bc74332643ce7dbe82c7d94ead8366a65f;\r\n\r\n    constructor() public {\r\n        EIP712_DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n                keccak256(bytes(EIP712_DOMAIN_VERSION)),\r\n                getChainID(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Return `chainId`\r\n    */\r\n    function getChainID() internal pure returns (uint) {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}\r\n\r\n// File: MultiSig.sol\r\n\r\n/**\r\n * @title MultiSig\r\n *\r\n * Multi-Signature Wallet.\r\n * Allows multiple parties to agree on transactions before execution.\r\n * Adapted from Stefan George's MultiSigWallet contract.\r\n *\r\n * Logic Changes:\r\n *  - Removed the fallback function\r\n *  - Ensure newOwner is notNull\r\n *\r\n * Syntax Changes:\r\n *  - Update Solidity syntax for 0.5.X: use `emit` keyword (events), use `view` keyword (functions)\r\n *  - Add braces to all `if` and `for` statements\r\n *  - Remove named return variables\r\n *  - Add space before and after comparison operators\r\n *  - Add ADDRESS_ZERO as a constant\r\n *  - uint => uint256\r\n *  - external_call => externalCall\r\n */\r\ncontract MultiSig is MultiSigLibEIP712 {\r\n    using LibBytes for bytes;\r\n\r\n    // ============ Events ============\r\n\r\n    event Deposit(address indexed depositer, uint256 amount);\r\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\r\n    event Revocation(address indexed sender, uint256 indexed transactionId);\r\n    event Submission(uint256 indexed transactionId);\r\n    event Execution(uint256 indexed transactionId);\r\n    event ExecutionFailure(uint256 indexed transactionId);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint256 required);\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant public MAX_OWNER_COUNT = 50;\r\n    address constant ADDRESS_ZERO = address(0x0);\r\n\r\n    // ============ Storage ============\r\n\r\n    mapping (uint256 => Transaction) public transactions;\r\n    mapping (uint256 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyWallet() {\r\n        /* solium-disable-next-line error-reason */\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(\r\n        address owner\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(\r\n        address owner\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(\r\n        uint256 transactionId\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(transactions[transactionId].destination != ADDRESS_ZERO);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(\r\n        uint256 transactionId,\r\n        address owner\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(\r\n        uint256 transactionId,\r\n        address owner\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(\r\n        uint256 transactionId\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(\r\n        address _address\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(_address != ADDRESS_ZERO);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(\r\n        uint256 ownerCount,\r\n        uint256 _required\r\n    ) {\r\n        /* solium-disable-next-line error-reason */\r\n        require(\r\n            ownerCount <= MAX_OWNER_COUNT\r\n            && _required <= ownerCount\r\n            && _required != 0\r\n            && ownerCount != 0\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ========= Fallback function ==========\r\n    receive() external payable {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    /**\r\n     * Contract constructor sets initial owners and required number of confirmations.\r\n     *\r\n     * @param  _owners    List of initial owners.\r\n     * @param  _required  Number of required confirmations.\r\n     */\r\n    constructor(\r\n        address[] memory _owners,\r\n        uint256 _required\r\n    )\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n        MultiSigLibEIP712()\r\n    {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            /* solium-disable-next-line error-reason */\r\n            require(!isOwner[_owners[i]] && _owners[i] != ADDRESS_ZERO);\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    // ============ Wallet-Only Functions ============\r\n\r\n    /**\r\n     * Allows to add a new owner. Transaction has to be sent by wallet.\r\n     *\r\n     * @param  owner  Address of new owner.\r\n     */\r\n    function addOwner(\r\n        address owner\r\n    )\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /**\r\n     * Allows to remove an owner. Transaction has to be sent by wallet.\r\n     *\r\n     * @param  owner  Address of owner.\r\n     */\r\n    function removeOwner(\r\n        address owner\r\n    )\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint256 i = 0; i < owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        delete owners[owners.length - 1];\r\n        if (required > owners.length) {\r\n            changeRequirement(owners.length);\r\n        }\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /**\r\n     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n     *\r\n     * @param  owner     Address of owner to be replaced.\r\n     * @param  newOwner  Address of new owner.\r\n     */\r\n    function replaceOwner(\r\n        address owner,\r\n        address newOwner\r\n    )\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n        notNull(newOwner)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /**\r\n     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n     *\r\n     * @param  _required  Number of required confirmations.\r\n     */\r\n    function changeRequirement(\r\n        uint256 _required\r\n    )\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    // ============ Owner Functions ============\r\n\r\n    /**\r\n     * Allows an owner to submit and confirm a transaction.\r\n     *\r\n     * @param  destination  Transaction target address.\r\n     * @param  value        Transaction ether value.\r\n     * @param  data         Transaction data payload.\r\n     * @return              Transaction ID.\r\n     */\r\n    function submitTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    )\r\n        public\r\n        returns (uint256)\r\n    {\r\n        uint256 transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n        return transactionId;\r\n    }\r\n\r\n    /**\r\n     * Allows an owner to confirm a transaction.\r\n     *\r\n     * @param  transactionId  Transaction ID.\r\n     */\r\n    function confirmTransaction(\r\n        uint256 transactionId\r\n    )\r\n        public\r\n        virtual\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /**\r\n     * Allows an owner to revoke a confirmation for a transaction.\r\n     *\r\n     * @param  transactionId  Transaction ID.\r\n     */\r\n    function revokeConfirmation(\r\n        uint256 transactionId\r\n    )\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /**\r\n     * Allows an owner to execute a confirmed transaction.\r\n     *\r\n     * @param  transactionId  Transaction ID.\r\n     */\r\n    function executeTransaction(\r\n        uint256 transactionId\r\n    )\r\n        public\r\n        virtual\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            if (externalCall(\r\n                txn.destination,\r\n                txn.value,\r\n                txn.data.length,\r\n                txn.data)\r\n            ) {\r\n                emit Execution(transactionId);\r\n            } else {\r\n                emit ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============ Getter Functions ============\r\n\r\n    /**\r\n     * Returns the confirmation status of a transaction.\r\n     *\r\n     * @param  transactionId  Transaction ID.\r\n     * @return                Confirmation status.\r\n     */\r\n    function isConfirmed(\r\n        uint256 transactionId\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n            if (count == required) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns number of confirmations of a transaction.\r\n     *\r\n     * @param  transactionId  Transaction ID.\r\n     * @return                Number of confirmations.\r\n     */\r\n    function getConfirmationCount(\r\n        uint256 transactionId\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns total number of transactions after filers are applied.\r\n     *\r\n     * @param  pending   Include pending transactions.\r\n     * @param  executed  Include executed transactions.\r\n     * @return           Total number of transactions after filters are applied.\r\n     */\r\n    function getTransactionCount(\r\n        bool pending,\r\n        bool executed\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < transactionCount; i++) {\r\n            if (\r\n                pending && !transactions[i].executed\r\n                || executed && transactions[i].executed\r\n            ) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns array of owners.\r\n     *\r\n     * @return  Array of owner addresses.\r\n     */\r\n    function getOwners()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /**\r\n     * Returns array with owner addresses, which confirmed transaction.\r\n     *\r\n     * @param  transactionId  Transaction ID.\r\n     * @return                Array of owner addresses.\r\n     */\r\n    function getConfirmations(\r\n        uint256 transactionId\r\n    )\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n        address[] memory _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n        return _confirmations;\r\n    }\r\n\r\n    /**\r\n     * Returns list of transaction IDs in defined range.\r\n     *\r\n     * @param  from      Index start position of transaction array.\r\n     * @param  to        Index end position of transaction array.\r\n     * @param  pending   Include pending transactions.\r\n     * @param  executed  Include executed transactions.\r\n     * @return           Array of transaction IDs.\r\n     */\r\n    function getTransactionIds(\r\n        uint256 from,\r\n        uint256 to,\r\n        bool pending,\r\n        bool executed\r\n    )\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i = 0; i < transactionCount; i++) {\r\n            if (\r\n                pending && !transactions[i].executed\r\n                || executed && transactions[i].executed\r\n            ) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        }\r\n        uint256[] memory _transactionIds = new uint256[](to - from);\r\n        for (i = from; i < to; i++) {\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n        }\r\n        return _transactionIds;\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function externalCall(\r\n        address destination,\r\n        uint256 value,\r\n        uint256 dataLength,\r\n        bytes memory data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bool result;\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n     *\r\n     * @param  destination  Transaction target address.\r\n     * @param  value        Transaction ether value.\r\n     * @param  data         Transaction data payload.\r\n     * @return              Transaction ID.\r\n     */\r\n    function addTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    )\r\n        internal\r\n        notNull(destination)\r\n        returns (uint256)\r\n    {\r\n        uint256 transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n        return transactionId;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIRM_TRANSACTION_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBMIT_TRANSACTION_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSig","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000090786121e346cb6c016cb35c4e7bb9edd1d485c400000000000000000000000014a71c2d798064847074fe698f526333323e415800000000000000000000000011cd213b073f2b64aa11e55f5eb8c2f6597da5cc000000000000000000000000b11fd40028092a0f01ed8c7ca0c44cf679772aea","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e9c51c0110ee4f01e1b4ad29b044d3d99e1012d6c3d8c767724b054f188202d3"}]}