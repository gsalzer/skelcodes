{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NO-LICENSE\r\n\r\npragma solidity <=0.7.4;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory) {\r\n\tthis; \r\n\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n\t * a default value of 18.\r\n\t *\r\n\t * To select a different value for {decimals}, use {_setupDecimals}.\r\n\t *\r\n\t * All three of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tconstructor (\r\n\t\tstring memory tokenName, \r\n\t\tstring memory tokenSymbol\r\n\t\t) {\r\n\t\t_name = tokenName;\r\n\t\t_symbol = tokenSymbol;\r\n\t\t_decimals = 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n\t * called.\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20};\r\n\t *\r\n\t * Requirements:\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, \r\n\t\t\t\t_msgSender(), \r\n\t\t\t\t_allowances[sender][_msgSender()]\r\n\t\t\t\t.sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t_approve(\r\n\t\t_msgSender(), \r\n\t\tspender, \r\n\t\t_allowances[_msgSender()][spender].sub(subtractedValue, \r\n\t\t\"Allowance below zero\"));\r\n\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n\t *\r\n\t * This is internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\t\trequire(sender != address(0), \"Invalid Address\");\r\n\t\trequire(recipient != address(0), \"Invalid Address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"Invalid Address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\t_balances[account] = _balances[account].sub(amount, \"Insufficient Balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\t\trequire(owner != address(0), \"Invalid Address\");\r\n\t\trequire(spender != address(0), \"Invalid Address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets {decimals} to a value other than the default one of 18.\r\n\t *\r\n\t * WARNING: This function should only be called from the constructor. Most\r\n\t * applications that interact with token contracts will not expect\r\n\t * {decimals} to ever change, and may work incorrectly if it does.\r\n\t */\r\n\tfunction _setupDecimals(uint8 decimals_) internal {\r\n\t\t_decimals = decimals_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be to transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n\t/**\r\n\t * @dev Emitted when the pause is triggered by `account`.\r\n\t */\r\n\tevent Paused(address account);\r\n\r\n\t/**\r\n\t * @dev Emitted when the pause is lifted by `account`.\r\n\t */\r\n\tevent Unpaused(address account);\r\n\r\n\tbool private _paused;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract in unpaused state.\r\n\t */\r\n\tconstructor () {\r\n\t\t_paused = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the contract is paused, and false otherwise.\r\n\t */\r\n\tfunction paused() public view returns (bool) {\r\n\t\treturn _paused;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is not paused.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must not be paused.\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!_paused, \"Pausable: paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is paused.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must be paused.\r\n\t */\r\n\tmodifier whenPaused() {\r\n\t\trequire(_paused, \"Pausable: not paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers stopped state.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must not be paused.\r\n\t */\r\n\tfunction _pause() internal virtual whenNotPaused {\r\n\t\t_paused = true;\r\n\t\temit Paused(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns to normal state.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The contract must be paused.\r\n\t */\r\n\tfunction _unpause() internal virtual whenPaused {\r\n\t\t_paused = false;\r\n\t\temit Unpaused(_msgSender());\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies in extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { size := extcodesize(account) }\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/\r\n\t   security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Transaction Failed : Reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/\r\n\t \t   latest/units-and-global-variables.html?\r\n\t\t    highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t  return functionCall(target, data, \"Call Failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target, \r\n\t\tbytes memory data, \r\n\t\tuint256 value, \r\n\t\tstring memory errorMessage) \r\n\t\tinternal returns (bytes memory) \r\n\t{\r\n\t\trequire(address(this).balance >= value, \"Insufficient balance\");\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(\r\n\t\taddress target, \r\n\t\tbytes memory data, \r\n\t\tuint256 weiValue, \r\n\t\tstring memory errorMessage) \r\n\t\tprivate returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Set type with\r\n\t// bytes32 values.\r\n\t// The Set implementation uses private functions, and user-facing\r\n\t// implementations (such as AddressSet) are just wrappers around the\r\n\t// underlying Set.\r\n\t// This means that we can only create new EnumerableSets for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct Set {\r\n\t\t// Storage of set values\r\n\t\tbytes32[] _values;\r\n\r\n\t\t// Position of the value in the `values` array, plus 1 because index 0\r\n\t\t// means a value is not in the set.\r\n\t\tmapping (bytes32 => uint256) _indexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\r\n\t\tif (!_contains(set, value)) {\r\n\t\t\tset._values.push(value);\r\n\t\t\t// The value is stored at length-1, but we add 1 to all indexes\r\n\t\t\t// and use 0 as a sentinel value\r\n\t\t\tset._indexes[value] = set._values.length;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 valueIndex = set._indexes[value];\r\n\r\n\t\tif (valueIndex != 0) { // Equivalent to contains(set, value)\r\n\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\r\n\t\t\t// This modifies the order of the array, as noted in {at}.\r\n\r\n\t\t\tuint256 toDeleteIndex = valueIndex - 1;\r\n\t\t\tuint256 lastIndex = set._values.length - 1;\r\n\r\n\t\t\t// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n\t\t\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n\t\t\tbytes32 lastvalue = set._values[lastIndex];\r\n\r\n\t\t\t// Move the last value to the index where the value to delete is\r\n\t\t\tset._values[toDeleteIndex] = lastvalue;\r\n\t\t\t// Update the index for the moved value\r\n\t\t\tset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n\t\t\t// Delete the slot where the moved value was stored\r\n\t\t\tset._values.pop();\r\n\r\n\t\t\t// Delete the index for the deleted slot\r\n\t\t\tdelete set._indexes[value];\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n\t\treturn set._indexes[value] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction _length(Set storage set) private view returns (uint256) {\r\n\t\treturn set._values.length;\r\n\t}\r\n\r\n   /**\r\n\t* @dev Returns the value stored at position `index` in the set. O(1).\r\n\t*\r\n\t* Note that there are no guarantees on the ordering of values inside the\r\n\t* array, and it may change when more values are added or removed.\r\n\t*\r\n\t* Requirements:\r\n\t*\r\n\t* - `index` must be strictly less than {length}.\r\n\t*/\r\n\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n\t\trequire(set._values.length > index, \"Index out of bounds\");\r\n\t\treturn set._values[index];\r\n\t}\r\n\r\n\t// AddressSet\r\n\r\n\tstruct AddressSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(AddressSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n   /**\r\n\t* @dev Returns the value stored at position `index` in the set. O(1).\r\n\t*\r\n\t* Note that there are no guarantees on the ordering of values inside the\r\n\t* array, and it may change when more values are added or removed.\r\n\t*\r\n\t* Requirements:\r\n\t*\r\n\t* - `index` must be strictly less than {length}.\r\n\t*/\r\n\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n\t\treturn address(uint256(_at(set._inner, index)));\r\n\t}\r\n\r\n\r\n\t// UintSet\r\n\r\n\tstruct UintSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction length(UintSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n   /**\r\n\t* @dev Returns the value stored at position `index` in the set. O(1).\r\n\t*\r\n\t* Note that there are no guarantees on the ordering of values inside the\r\n\t* array, and it may change when more values are added or removed.\r\n\t*\r\n\t* Requirements:\r\n\t*\r\n\t* - `index` must be strictly less than {length}.\r\n\t*/\r\n\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n\t\treturn uint256(_at(set._inner, index));\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC20Pausable is ERC20, Pausable {\r\n\t/**\r\n\t * @dev See {ERC20-_beforeTokenTransfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the contract must not be paused.\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n\t\tsuper._beforeTokenTransfer(from, to, amount);\r\n\r\n\t\trequire(!paused(), \"Transfer Paused\");\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\tusing Address for address;\r\n\r\n\tstruct RoleData {\r\n\t\tEnumerableSet.AddressSet members;\r\n\t\tbytes32 adminRole;\r\n\t}\r\n\r\n\tmapping (bytes32 => RoleData) private _roles;\r\n\r\n\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n\t/**\r\n\t * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n\t *\r\n\t * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n\t * {RoleAdminChanged} not being emitted signaling this.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n\t/**\r\n\t * @dev Emitted when `account` is granted `role`.\r\n\t *\r\n\t * `sender` is the account that originated the contract call, an admin role\r\n\t * bearer except when using {_setupRole}.\r\n\t */\r\n\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\t/**\r\n\t * @dev Emitted when `account` is revoked `role`.\r\n\t *\r\n\t * `sender` is the account that originated the contract call:\r\n\t *   - if using `revokeRole`, it is the admin role bearer\r\n\t *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n\t */\r\n\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\t/**\r\n\t * @dev Returns `true` if `account` has been granted `role`.\r\n\t */\r\n\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\r\n\t\treturn _roles[role].members.contains(account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of accounts that have `role`. Can be used\r\n\t * together with {getRoleMember} to enumerate all bearers of a role.\r\n\t */\r\n\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n\t\treturn _roles[role].members.length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns one of the accounts that have `role`. `index` must be a\r\n\t * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n\t *\r\n\t * Role bearers are not sorted in any particular way, and their ordering may\r\n\t * change at any point.\r\n\t *\r\n\t * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n\t * you perform all queries on the same block. See the following\r\n\t * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n\t * for more information.\r\n\t */\r\n\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n\t\treturn _roles[role].members.at(index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n\t * {revokeRole}.\r\n\t *\r\n\t * To change a role's admin, use {_setRoleAdmin}.\r\n\t */\r\n\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n\t\treturn _roles[role].adminRole;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Grants `role` to `account`.\r\n\t *\r\n\t * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\t * event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have ``role``'s admin role.\r\n\t */\r\n\tfunction grantRole(bytes32 role, address account) public virtual {\r\n\t\trequire(hasRole(_roles[role].adminRole, _msgSender()), \"Not admin\");\r\n\r\n\t\t_grantRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revokes `role` from `account`.\r\n\t *\r\n\t * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have ``role``'s admin role.\r\n\t */\r\n\tfunction revokeRole(bytes32 role, address account) public virtual {\r\n\t\trequire(hasRole(_roles[role].adminRole, _msgSender()), \"Not Admin\");\r\n\r\n\t\t_revokeRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revokes `role` from the calling account.\r\n\t *\r\n\t * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n\t * purpose is to provide a mechanism for accounts to lose their privileges\r\n\t * if they are compromised (such as when a trusted device is misplaced).\r\n\t *\r\n\t * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n\t * event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must be `account`.\r\n\t */\r\n\tfunction renounceRole(bytes32 role, address account) public virtual {\r\n\t\trequire(account == _msgSender(), \"Not owner\");\r\n\r\n\t\t_revokeRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Grants `role` to `account`.\r\n\t *\r\n\t * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\t * event. Note that unlike {grantRole}, this function doesn't perform any\r\n\t * checks on the calling account.\r\n\t *\r\n\t * [WARNING]\r\n\t * ====\r\n\t * This function should only be called from the constructor when setting\r\n\t * up the initial roles for the system.\r\n\t *\r\n\t * Using this function in any other way is effectively circumventing the admin\r\n\t * system imposed by {AccessControl}.\r\n\t * ====\r\n\t */\r\n\tfunction _setupRole(bytes32 role, address account) internal virtual {\r\n\t\t_grantRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `adminRole` as ``role``'s admin role.\r\n\t *\r\n\t * Emits a {RoleAdminChanged} event.\r\n\t */\r\n\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n\t\temit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n\t\t_roles[role].adminRole = adminRole;\r\n\t}\r\n\r\n\tfunction _grantRole(bytes32 role, address account) private {\r\n\t\tif (_roles[role].members.add(account)) {\r\n\t\t\temit RoleGranted(role, account, _msgSender());\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _revokeRole(bytes32 role, address account) private {\r\n\t\tif(role == DEFAULT_ADMIN_ROLE){\r\n\t       require(_roles[DEFAULT_ADMIN_ROLE].members.length() > 1, \"Last Admin\");\r\n\t       _roles[role].members.remove(account);\r\n\t       emit RoleRevoked( role, account, _msgSender());\r\n\t    }\r\n\t\telse if(_roles[role].members.remove(account)){\r\n\t\t\temit RoleRevoked(role, account, _msgSender());\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC20 Token for EdgeX.\r\n * Is a Standard ERC20 token\r\n */\r\ncontract EdgeXToken is ERC20Pausable, AccessControl{\r\n\r\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n  constructor(\r\n\t  string memory _name, \r\n\t  string memory _symbol,\r\n\t  address _admin\r\n\t  ) \r\n\tERC20(_name, _symbol)\r\n  {\r\n\t_setupRole(DEFAULT_ADMIN_ROLE, _admin);\r\n  }\r\n\r\n  function mint(address to, uint256 amount) public {\r\n\trequire(hasRole(MINTER_ROLE, msg.sender), \"Caller is not a minter\");\r\n\t_mint(to, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) public {\r\n\t_burn(msg.sender, amount);\r\n  }\r\n\r\n  function pause() public {\r\n\trequire(hasRole(PAUSER_ROLE, msg.sender), \"Caller is not a pauser\");\r\n\t_pause();\r\n  }\r\n\r\n  function unpause() public {\r\n\trequire(hasRole(PAUSER_ROLE, msg.sender), \"Caller is not a pauser\");\r\n\t_unpause();\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EdgeXToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006f0500723ae3d466f6e34d59d5241c44fb9d6cd40000000000000000000000000000000000000000000000000000000000000006454447452d58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054544474558000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://32d8e0db4da1f973554564bf1613b9bb1b5df81ca5b5d2f288342ae0306044d0"}]}