{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/SwaplessConversionPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Fork of EthAnchor's ConversionPool.sol\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IConversionPool} from \\\"@orionterra/eth-anchor-contracts/contracts/extensions/ConversionPool.sol\\\";\\nimport {ExchangeRateFeeder} from \\\"@orionterra/eth-anchor-contracts/contracts/extensions/ExchangeRateFeeder.sol\\\";\\n\\nimport {IERC20Controlled, ERC20Controlled} from \\\"@orionterra/eth-anchor-contracts/contracts/utils/ERC20Controlled.sol\\\";\\nimport {IRouterV2} from \\\"@orionterra/eth-anchor-contracts/contracts/core/RouterV2.sol\\\";\\n\\ncontract SwaplessConversionPool is IConversionPool, OwnableUpgradeable {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Controlled;\\n\\n     // pool token settings\\n    IERC20 public inputToken;\\n    IERC20Controlled public outputToken;  // vaUST\\n\\n    // proxy settings\\n    IERC20 public proxyInputToken;   // For compatibility purposes. Equals to inputToken.\\n    IERC20 public proxyOutputToken;  // aUST\\n    uint256 public proxyReserve;     // aUST reserve\\n\\n    uint256 public inputToken10PowDecimals;  // 10^decimals for inputToken, i.e. amount equals to $1\\n\\n    address public optRouter;\\n\\n    // implementation of IExchangeRateFeeder required to access feeder.tokens[inputToken].weight\\n    ExchangeRateFeeder public feeder;\\n\\n    // flags\\n    bool public isDepositAllowed;\\n    bool public isRedemptionAllowed;\\n\\n    function initialize(\\n      // ===== tokens\\n      string memory _outputTokenName,\\n      string memory _outputTokenSymbol,\\n      address _inputToken,\\n      address _proxyOutputToken,\\n      // ===== others\\n      address _optRouter,\\n      address _exchangeRateFeeder,\\n      // =====\\n      uint32 _inputTokenDecimals\\n    ) public virtual initializer {\\n      require(_inputTokenDecimals <= 70);\\n\\n      OwnableUpgradeable.__Ownable_init();\\n\\n      inputToken = IERC20(_inputToken);\\n      outputToken = new ERC20Controlled(_outputTokenName, _outputTokenSymbol);\\n\\n      proxyInputToken = IERC20(_inputToken);          //\\n      proxyOutputToken = IERC20(_proxyOutputToken);\\n      proxyReserve = 0;\\n\\n      inputToken10PowDecimals = 10 ** _inputTokenDecimals;\\n\\n      setOperationRouter(_optRouter);\\n      setExchangeRateFeeder(_exchangeRateFeeder);\\n\\n      isDepositAllowed = true;\\n      isRedemptionAllowed = true;\\n    }\\n\\n    function setOperationRouter(address _optRouter) public onlyOwner {\\n      require(_optRouter != address(0), \\\"Invalid zero address\\\");\\n\\n      optRouter = _optRouter;\\n      proxyInputToken.safeApprove(optRouter, type(uint256).max);\\n      proxyOutputToken.safeApprove(optRouter, type(uint256).max);\\n    }\\n\\n    function setExchangeRateFeeder(address _exchangeRateFeeder) public onlyOwner {\\n      require(_exchangeRateFeeder != address(0), \\\"Invalid zero address\\\");\\n\\n      feeder = ExchangeRateFeeder(_exchangeRateFeeder);\\n    }\\n\\n    function setDepositAllowance(bool _allow) public onlyOwner {\\n      isDepositAllowed = _allow;\\n    }\\n\\n    function setRedemptionAllowance(bool _allow) public onlyOwner {\\n      isRedemptionAllowed = _allow;\\n    }\\n\\n    // migrate\\n    function migrate(address _to) public onlyOwner {\\n        require(\\n            !(isDepositAllowed && isRedemptionAllowed),\\n            \\\"ConversionPool: invalid status\\\"\\n        );\\n        require(_to != address(0), \\\"Invalid zero address\\\");\\n\\n        proxyOutputToken.transfer(\\n            _to,\\n            proxyOutputToken.balanceOf(address(this))\\n        );\\n    }\\n\\n    // reserve\\n\\n    function provideReserve(uint256 _amount) public {\\n      proxyReserve = proxyReserve.add(_amount);\\n      proxyOutputToken.safeTransferFrom(\\n          super._msgSender(),\\n          address(this),\\n          _amount\\n      );\\n    }\\n\\n    function removeReserve(uint256 _amount) public onlyOwner {\\n      proxyReserve = proxyReserve.sub(_amount);\\n      proxyOutputToken.safeTransfer(super._msgSender(), _amount);\\n    }\\n\\n    // operations\\n\\n    modifier _updateExchangeRate {\\n      feeder.update(address(inputToken));\\n\\n      _;\\n    }\\n\\n    function getShuttleFee(uint256 _amount) internal view returns(uint256) {\\n      // max($1, 0.1% * _amount)\\n      return _amount.div(1000).max(inputToken10PowDecimals);\\n    }\\n\\n    function getFeederRate() internal view returns(uint256) {\\n      (/* ExchangeRateFeeder.Status status */,\\n       /* uint256 exchangeRate */,\\n       /* uint256 period */,\\n       uint256 weight,\\n       /* uint256 lastUpdatedAt */) = feeder.tokens(address(inputToken));\\n\\n      require(weight > 1e18);  // rate > 1.0\\n\\n      return weight;\\n    }\\n\\n    function deposit(uint256 _amount) public override _updateExchangeRate {\\n      require(isDepositAllowed, \\\"ConversionPool: deposit not stopped\\\");\\n\\n      inputToken.safeTransferFrom(super._msgSender(), address(this), _amount);\\n\\n      IRouterV2(optRouter).depositStable(_amount);\\n\\n      uint256 pER = feeder.exchangeRateOf(address(inputToken), false);\\n      uint256 pERRecentEpoch = pER.mul(getFeederRate()).div(1e18);\\n\\n      uint256 amountWithoutFee = _amount.sub(getShuttleFee(_amount));\\n      outputToken.mint(super._msgSender(), amountWithoutFee.mul(1e18).div(pERRecentEpoch));\\n    }\\n\\n    function deposit(uint256 _amount, uint256 _minAmountOut) public override {\\n      deposit(_amount);\\n    }\\n\\n    function redeem(uint256 _amount) public override _updateExchangeRate {\\n      require(isRedemptionAllowed, \\\"ConversionPool: redemption not allowed\\\");\\n\\n      outputToken.burnFrom(super._msgSender(), _amount);\\n\\n      IRouterV2(optRouter).redeemStable(super._msgSender(), _amount);\\n    }\\n\\n    function redeem(uint256 _amount, uint256 _minAmountOut) public override {\\n      redeem(_amount);\\n    }\\n\\n    function profitAmount() public view returns (uint256) {\\n      uint256 proxyOutputTokenBalance = proxyOutputToken.balanceOf(address(this));\\n\\n      if (proxyReserve >= proxyOutputTokenBalance) return 0;\\n\\n      // total output token amount - proxy output token amount (this pool) - proxyReserve = earnable amount\\n      uint256 outputTokenTotal = outputToken.totalSupply();\\n      uint256 available = proxyOutputTokenBalance.sub(proxyReserve);\\n\\n      if (available < outputTokenTotal) return 0;\\n\\n      return available - outputTokenTotal;\\n    }\\n\\n    function takeProfit(address _receiver) public onlyOwner {\\n      require(_receiver != address(0), \\\"Invalid zero address\\\");\\n\\n      uint256 proxyOutputTokenBalance = proxyOutputToken.balanceOf(address(this));\\n\\n      require(proxyReserve < proxyOutputTokenBalance, \\\"ConversionPool: not enough balance\\\");\\n\\n      // total output token amount - proxy output token amount (this pool) - proxyReserve = earnable amount\\n      uint256 outputTokenTotal = outputToken.totalSupply();\\n      uint256 available = proxyOutputTokenBalance.sub(proxyReserve);\\n\\n      require(available > outputTokenTotal, \\\"ConversionPool: no funds available to take a profit\\\");\\n\\n      uint256 earnAmount = available.sub(outputTokenTotal);\\n      proxyOutputToken.safeTransfer(_receiver, earnAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/utils/Queue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary StdQueue {\\n    struct Queue {\\n        uint256 index;\\n        uint256 size;\\n        mapping(uint256 => bytes32) store;\\n    }\\n\\n    function _length(Queue storage q) internal view returns (uint256) {\\n        return q.size;\\n    }\\n\\n    function _isEmpty(Queue storage q) internal view returns (bool) {\\n        return q.size == 0;\\n    }\\n\\n    function _getItemAt(Queue storage q, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return q.store[q.index + index];\\n    }\\n\\n    function _produce(Queue storage q, bytes32 data) internal {\\n        q.store[q.index + q.size] = data;\\n        q.size += 1;\\n    }\\n\\n    function _consume(Queue storage q) internal returns (bytes32) {\\n        require(!_isEmpty(q), \\\"StdQueue: empty queue\\\");\\n        bytes32 data = _getItemAt(q, 0);\\n        q.index += 1;\\n        q.size -= 1;\\n        return data;\\n    }\\n\\n    // ====================== Bytes32 ====================== //\\n\\n    struct Bytes32Queue {\\n        Queue _inner;\\n    }\\n\\n    function length(Bytes32Queue storage queue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(queue._inner);\\n    }\\n\\n    function isEmpty(Bytes32Queue storage queue) internal view returns (bool) {\\n        return _isEmpty(queue._inner);\\n    }\\n\\n    function getItemAt(Bytes32Queue storage queue, uint256 _index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _getItemAt(queue._inner, _index);\\n    }\\n\\n    function produce(Bytes32Queue storage queue, bytes32 _value) internal {\\n        _produce(queue._inner, _value);\\n    }\\n\\n    function consume(Bytes32Queue storage queue) internal returns (bytes32) {\\n        return _consume(queue._inner);\\n    }\\n\\n    // ====================== Address ====================== //\\n\\n    struct AddressQueue {\\n        Queue _inner;\\n    }\\n\\n    function length(AddressQueue storage queue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(queue._inner);\\n    }\\n\\n    function isEmpty(AddressQueue storage queue) internal view returns (bool) {\\n        return _isEmpty(queue._inner);\\n    }\\n\\n    function getItemAt(AddressQueue storage queue, uint256 _index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_getItemAt(queue._inner, _index))));\\n    }\\n\\n    function produce(AddressQueue storage queue, address _value) internal {\\n        _produce(queue._inner, bytes32(uint256(uint160(_value))));\\n    }\\n\\n    function consume(AddressQueue storage queue) internal returns (address) {\\n        return address(uint256(bytes32(_consume(queue._inner))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable_ is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable_: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function setOwner(address _newOwner) internal virtual {\\n        _owner = _newOwner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable_: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/utils/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract Operator is Context {\\n    address public owner;\\n    address public operator;\\n\\n    constructor() {\\n        owner = _msgSender();\\n        operator = _msgSender();\\n    }\\n\\n    function setRole(address _owner, address _operator) internal virtual {\\n        owner = _owner;\\n        operator = _operator;\\n    }\\n\\n    modifier onlyOwner {\\n        require(checkOwner(), \\\"Operator: owner access denied\\\");\\n\\n        _;\\n    }\\n\\n    function checkOwner() public view returns (bool) {\\n        return _msgSender() == owner;\\n    }\\n\\n    modifier onlyOperator {\\n        require(checkOperator(), \\\"Operator: operator access denied\\\");\\n\\n        _;\\n    }\\n\\n    function checkOperator() public view returns (bool) {\\n        return _msgSender() == operator;\\n    }\\n\\n    modifier onlyGranted {\\n        require(checkGranted(), \\\"Operator: access denied\\\");\\n\\n        _;\\n    }\\n\\n    function checkGranted() public view returns (bool) {\\n        return checkOwner() || checkOperator();\\n    }\\n\\n    function transferOwnership(address _owner) public onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function transferOperator(address _operator) public onlyOwner {\\n        operator = _operator;\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/utils/ERC20Controlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IERC20Controlled is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(uint256 _amount) external;\\n\\n    function burnFrom(address _from, uint256 _amount) external;\\n}\\n\\ncontract ERC20Controlled is Context, Ownable, IERC20Controlled, ERC20 {\\n    using SafeMath for uint256;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        Ownable()\\n        ERC20(_name, _symbol)\\n    {}\\n\\n    function mint(address _to, uint256 _amount) public override onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(uint256 _amount) public override {\\n        _burn(_msgSender(), _amount);\\n    }\\n\\n    function burnFrom(address _from, uint256 _amount) public override {\\n        uint256 decreasedAllowance =\\n            allowance(_from, _msgSender()).sub(\\n                _amount,\\n                \\\"ERC20: burn amount exceeds allowance\\\"\\n            );\\n\\n        _approve(_from, _msgSender(), decreasedAllowance);\\n        _burn(_from, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/swapper/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface ISwapper {\\n    function swapToken(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _minAmountOut,\\n        address _beneficiary\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/operations/OperationStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {StdQueue} from \\\"../utils/Queue.sol\\\";\\nimport {IOperation} from \\\"./Operation.sol\\\";\\nimport {OperationACL} from \\\"./OperationACL.sol\\\";\\n\\ninterface IOperationStore {\\n    // Events\\n    event OperationAllocated(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationInitialized(\\n        address indexed controller,\\n        address indexed operation,\\n        bool autoFinish\\n    );\\n    event OperationFinished(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationStopped(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationRecovered(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationDeallocated(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationFlushed(\\n        address indexed controller,\\n        address indexed operation,\\n        Queue from,\\n        Queue to\\n    );\\n\\n    // Data Structure\\n    enum Status {\\n        IDLE,\\n        RUNNING_AUTO,\\n        RUNNING_MANUAL,\\n        FINISHED,\\n        STOPPED,\\n        RECOVERED,\\n        DEALLOCATED\\n    }\\n\\n    enum Queue {IDLE, RUNNING, STOPPED, NULL}\\n\\n    // getter\\n    function getAvailableOperation() external view returns (address);\\n\\n    function getQueuedOperationAt(Queue _queue, uint256 _index)\\n        external\\n        view\\n        returns (address);\\n\\n    function getQueueSizeOf(Queue _queue) external view returns (uint256);\\n\\n    function getStatusOf(address _opt) external view returns (Status);\\n\\n    // logics\\n    function allocate(address _opt) external;\\n\\n    function init(bool _autoFinish) external returns (address);\\n\\n    function finish(address _opt) external;\\n\\n    function halt(address _opt) external;\\n\\n    function recover(address _opt) external;\\n\\n    function deallocate(address _opt) external;\\n\\n    // queue\\n    function flush(Queue queue, uint256 _amount) external;\\n\\n    function flushAll(uint256 _amount) external; // running, failed\\n}\\n\\ncontract OperationStore is IOperationStore, OperationACL {\\n    using StdQueue for StdQueue.AddressQueue;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // queues\\n    mapping(address => Status) public optStat;\\n\\n    EnumerableSet.AddressSet internal optIdle;\\n    StdQueue.AddressQueue internal optStopped;\\n    StdQueue.AddressQueue internal optRunning;\\n\\n    function getAvailableOperation() public view override returns (address) {\\n        if (optIdle.length() == 0) {\\n            return address(0x0);\\n        }\\n        return optIdle.at(0);\\n    }\\n\\n    function getQueuedOperationAt(Queue _queue, uint256 _index)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (_queue == Queue.IDLE) {\\n            return optIdle.at(_index);\\n        } else if (_queue == Queue.RUNNING) {\\n            return optRunning.getItemAt(_index);\\n        } else if (_queue == Queue.STOPPED) {\\n            return optStopped.getItemAt(_index);\\n        } else {\\n            revert(\\\"OperationStore: invalid queue type\\\");\\n        }\\n    }\\n\\n    function getQueueSizeOf(Queue _queue)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_queue == Queue.IDLE) {\\n            return optIdle.length();\\n        } else if (_queue == Queue.RUNNING) {\\n            return optRunning.length();\\n        } else if (_queue == Queue.STOPPED) {\\n            return optStopped.length();\\n        } else {\\n            revert(\\\"OperationStore: invalid queue type\\\");\\n        }\\n    }\\n\\n    function getStatusOf(address _opt) public view override returns (Status) {\\n        return optStat[_opt];\\n    }\\n\\n    // lifecycle\\n\\n    // x -> init\\n    function allocate(address _opt) public override onlyGranted {\\n        optIdle.add(_opt);\\n        optStat[_opt] = Status.IDLE;\\n        emit OperationAllocated(msg.sender, _opt);\\n    }\\n\\n    // =========================== RUNNING QUEUE OPERATIONS =========================== //\\n\\n    // init -> finish -> idle\\n    //      -> fail -> ~\\n    //      -> x (if autoFinish disabled)\\n    function init(bool _autoFinish)\\n        public\\n        override\\n        onlyRouter\\n        returns (address)\\n    {\\n        // consume\\n        address opt = optIdle.at(0);\\n        optIdle.remove(opt);\\n\\n        if (_autoFinish) {\\n            optRunning.produce(opt); // idle -> running\\n            optStat[opt] = Status.RUNNING_AUTO;\\n        } else {\\n            optStat[opt] = Status.RUNNING_MANUAL;\\n        }\\n\\n        emit OperationInitialized(msg.sender, opt, _autoFinish);\\n        return opt;\\n    }\\n\\n    // =========================== RUNNING QUEUE OPERATIONS =========================== //\\n\\n    function finish(address _opt) public override onlyGranted {\\n        Status status = optStat[_opt];\\n\\n        if (status == Status.RUNNING_MANUAL) {\\n            allocate(_opt);\\n        } else if (status == Status.RUNNING_AUTO) {\\n            // wait for flush\\n            optStat[_opt] = Status.FINISHED;\\n        } else {\\n            revert(\\\"Router: invalid condition for finish operation\\\");\\n        }\\n\\n        emit OperationFinished(msg.sender, _opt);\\n    }\\n\\n    // fail -> recover -> idle\\n    //      -> deallocate -> x\\n    function halt(address _opt) public override onlyController {\\n        Status stat = optStat[_opt];\\n        if (stat == Status.IDLE) {\\n            // push to failed queue\\n            optIdle.remove(_opt);\\n            optStopped.produce(_opt);\\n        }\\n        optStat[_opt] = Status.STOPPED;\\n        emit OperationStopped(msg.sender, _opt);\\n    }\\n\\n    function flushRunningQueue(StdQueue.AddressQueue storage _queue)\\n        internal\\n        returns (bool)\\n    {\\n        address opt = _queue.getItemAt(0);\\n        Status stat = optStat[opt];\\n        if (stat == Status.FINISHED) {\\n            optIdle.add(_queue.consume());\\n            optStat[opt] = Status.IDLE;\\n            emit OperationFlushed(msg.sender, opt, Queue.RUNNING, Queue.IDLE);\\n        } else if (stat == Status.STOPPED) {\\n            optStopped.produce(_queue.consume());\\n            emit OperationFlushed(\\n                msg.sender,\\n                opt,\\n                Queue.RUNNING,\\n                Queue.STOPPED\\n            );\\n        } else {\\n            return false; // RUNNING\\n        }\\n        return true;\\n    }\\n\\n    // =========================== FAIL QUEUE OPERATIONS =========================== //\\n\\n    function recover(address _opt) public override onlyController {\\n        optStat[_opt] = Status.RECOVERED;\\n        emit OperationRecovered(msg.sender, _opt);\\n    }\\n\\n    function deallocate(address _opt) public override onlyController {\\n        optStat[_opt] = Status.DEALLOCATED;\\n        emit OperationDeallocated(msg.sender, _opt);\\n    }\\n\\n    function flushStoppedQueue(StdQueue.AddressQueue storage _queue)\\n        internal\\n        returns (bool)\\n    {\\n        address opt = _queue.getItemAt(0);\\n        Status stat = optStat[opt];\\n        if (stat == Status.RECOVERED) {\\n            optIdle.add(_queue.consume());\\n            optStat[opt] = Status.IDLE;\\n            emit OperationFlushed(msg.sender, opt, Queue.STOPPED, Queue.IDLE);\\n        } else if (stat == Status.DEALLOCATED) {\\n            _queue.consume();\\n            emit OperationFlushed(msg.sender, opt, Queue.STOPPED, Queue.NULL);\\n        } else {\\n            return false; // STOPPED\\n        }\\n\\n        return true;\\n    }\\n\\n    function _flush(\\n        StdQueue.AddressQueue storage _queue,\\n        uint256 _amount,\\n        function(StdQueue.AddressQueue storage) returns (bool) _handler\\n    ) internal {\\n        for (uint256 i = 0; i < _amount; i++) {\\n            if (_queue.isEmpty()) {\\n                return;\\n            }\\n\\n            if (!_handler(_queue)) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    function flush(Queue _queue, uint256 _amount)\\n        public\\n        override\\n        onlyController\\n    {\\n        if (_queue == Queue.RUNNING) {\\n            _flush(optRunning, _amount, flushRunningQueue);\\n        } else if (_queue == Queue.STOPPED) {\\n            _flush(optStopped, _amount, flushStoppedQueue);\\n        } else {\\n            revert(\\\"OperationStore: invalid queue type\\\");\\n        }\\n    }\\n\\n    function flushAll(uint256 _amount) public override onlyController {\\n        flush(Queue.RUNNING, _amount);\\n        flush(Queue.STOPPED, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/operations/OperationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {OperationACL} from \\\"./OperationACL.sol\\\";\\n\\ninterface OperationStandard {\\n    function initialize(bytes memory) external;\\n\\n    function initPayload(\\n        address,\\n        address,\\n        bytes32\\n    ) external view returns (bytes memory);\\n}\\n\\ninterface IOperationFactory {\\n    event ContractDeployed(\\n        address indexed instance,\\n        address indexed controller,\\n        bytes32 indexed terraAddress\\n    );\\n\\n    struct Standard {\\n        address router;\\n        address controller;\\n        address operation;\\n    }\\n\\n    function pushTerraAddresses(bytes32[] memory _addrs) external;\\n\\n    function fetchAddressBufferSize() external view returns (uint256);\\n\\n    function fetchNextTerraAddress() external view returns (bytes32);\\n\\n    function build(uint256 _optId) external returns (address);\\n}\\n\\ncontract OperationFactory is IOperationFactory, OperationACL {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // standard operations\\n    uint256 public standardIndex = 0;\\n    mapping(uint256 => Standard) public standards;\\n\\n    function pushStandardOperation(\\n        address _router,\\n        address _controller,\\n        address _operation\\n    ) public onlyOwner returns (uint256) {\\n        uint256 optStdId = standardIndex;\\n        standards[optStdId] = Standard({\\n            router: _router,\\n            controller: _controller,\\n            operation: _operation\\n        });\\n        standardIndex += 1;\\n        return optStdId;\\n    }\\n\\n    // terra address buffer\\n    EnumerableSet.Bytes32Set private terraAddresses;\\n\\n    function pushTerraAddresses(bytes32[] memory _addrs)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _addrs.length; i++) {\\n            terraAddresses.add(_addrs[i]);\\n        }\\n    }\\n\\n    function fetchAddressBufferSize() public view override returns (uint256) {\\n        return terraAddresses.length();\\n    }\\n\\n    function fetchNextTerraAddress() public view override returns (bytes32) {\\n        return terraAddresses.at(0);\\n    }\\n\\n    function fetchTerraAddress() private returns (bytes32) {\\n        bytes32 addr = terraAddresses.at(0);\\n        terraAddresses.remove(addr);\\n        return addr;\\n    }\\n\\n    function build(uint256 _optId)\\n        public\\n        override\\n        onlyGranted\\n        returns (address)\\n    {\\n        bytes32 terraAddr = fetchTerraAddress();\\n        Standard memory std = standards[_optId];\\n\\n        address instance = Clones.clone(std.operation);\\n        bytes memory payload =\\n            OperationStandard(std.operation).initPayload(\\n                std.router,\\n                std.controller,\\n                terraAddr\\n            );\\n        OperationStandard(instance).initialize(payload);\\n\\n        emit ContractDeployed(instance, std.controller, terraAddr);\\n\\n        return instance;\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/operations/OperationACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract OperationACL is Context {\\n    address public owner;\\n    address public router;\\n    address public controller;\\n\\n    constructor() {\\n        owner = _msgSender();\\n        router = _msgSender();\\n        controller = _msgSender();\\n    }\\n\\n    modifier onlyOwner {\\n        require(_msgSender() == owner, \\\"OperationACL: owner access denied\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyRouter {\\n        require(_msgSender() == router, \\\"OperationACL: router access denied\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyController {\\n        require(\\n            _msgSender() == controller,\\n            \\\"OperationACL: controller access denied\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier onlyGranted {\\n        address sender = _msgSender();\\n        require(\\n            sender == owner || sender == router || sender == controller,\\n            \\\"OperationACL: denied\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    function transferOwnership(address _owner) public onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function transferRouter(address _router) public onlyOwner {\\n        router = _router;\\n    }\\n\\n    function transferController(address _controller) public onlyOwner {\\n        controller = _controller;\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/operations/Operation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {WrappedAsset} from \\\"../assets/WrappedAsset.sol\\\";\\nimport {Operator} from \\\"../utils/Operator.sol\\\";\\nimport {OperationACL} from \\\"./OperationACL.sol\\\";\\nimport {ISwapper} from \\\"../swapper/ISwapper.sol\\\";\\n\\ninterface IOperation {\\n    // Events\\n    event AutoFinishEnabled(address indexed operation);\\n    event InitDeposit(address indexed operator, uint256 amount, bytes32 to);\\n    event FinishDeposit(address indexed operator, uint256 amount);\\n    event InitRedemption(address indexed operator, uint256 amount, bytes32 to);\\n    event FinishRedemption(address indexed operator, uint256 amount);\\n    event EmergencyWithdrawActivated(address token, uint256 amount);\\n\\n    // Data Structure\\n    enum Status {IDLE, RUNNING, STOPPED}\\n    enum Type {NEUTRAL, DEPOSIT, REDEEM}\\n\\n    struct Info {\\n        Status status;\\n        Type typ;\\n        address operator;\\n        uint256 amount;\\n        address input;\\n        address output;\\n        address swapper;\\n        address swapDest;\\n    }\\n\\n    // Interfaces\\n\\n    function terraAddress() external view returns (bytes32);\\n\\n    function getCurrentStatus() external view returns (Info memory);\\n\\n    function initDepositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) external;\\n\\n    function initRedeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) external;\\n\\n    function finish() external;\\n\\n    function finish(uint256 _minAmountOut) external;\\n\\n    function finishDepositStable() external;\\n\\n    function finishRedeemStable() external;\\n\\n    function halt() external;\\n\\n    function recover() external;\\n\\n    function emergencyWithdraw(address _token, address _to) external;\\n\\n    function emergencyWithdraw(address payable _to) external;\\n}\\n\\n// Operation.sol: subcontract generated per wallet, defining all relevant wrapping functions\\ncontract Operation is Context, OperationACL, IOperation, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for WrappedAsset;\\n\\n    Info public DEFAULT_STATUS =\\n        Info({\\n            status: Status.IDLE,\\n            typ: Type.NEUTRAL,\\n            operator: address(0x0),\\n            amount: 0,\\n            input: address(0x0),\\n            output: address(0x0),\\n            swapper: address(0x0),\\n            swapDest: address(0x0)\\n        });\\n    Info public currentStatus;\\n\\n    WrappedAsset public wUST;\\n    WrappedAsset public aUST;\\n\\n    bytes32 public override terraAddress;\\n\\n    function initialize(bytes memory args) public initializer {\\n        (\\n            address _router,\\n            address _controller,\\n            bytes32 _terraAddress,\\n            address _wUST,\\n            address _aUST\\n        ) = abi.decode(args, (address, address, bytes32, address, address));\\n\\n        currentStatus = DEFAULT_STATUS;\\n        terraAddress = _terraAddress;\\n        wUST = WrappedAsset(_wUST);\\n        aUST = WrappedAsset(_aUST);\\n\\n        router = _router;\\n        controller = _controller;\\n    }\\n\\n    function initPayload(\\n        address _router,\\n        address _controller,\\n        bytes32 _terraAddress\\n    ) public view returns (bytes memory) {\\n        return abi.encode(_router, _controller, _terraAddress, wUST, aUST);\\n    }\\n\\n    modifier checkStopped {\\n        require(currentStatus.status != Status.STOPPED, \\\"Operation: stopped\\\");\\n\\n        _;\\n    }\\n\\n    function getCurrentStatus() public view override returns (Info memory) {\\n        return currentStatus;\\n    }\\n\\n    function _init(\\n        Type _typ,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) private onlyRouter checkStopped {\\n        require(currentStatus.status == Status.IDLE, \\\"Operation: running\\\");\\n        require(_amount >= 10 ether, \\\"Operation: amount must be more than 10\\\");\\n\\n        currentStatus = Info({\\n            status: Status.RUNNING,\\n            typ: _typ,\\n            operator: _operator,\\n            amount: _amount,\\n            input: address(0x0),\\n            output: address(0x0),\\n            swapper: _swapper,\\n            swapDest: _swapDest\\n        });\\n\\n        if (_typ == Type.DEPOSIT) {\\n            currentStatus.input = address(wUST);\\n            currentStatus.output = address(aUST);\\n\\n            wUST.safeTransferFrom(_msgSender(), address(this), _amount);\\n            wUST.burn(_amount, terraAddress);\\n\\n            emit InitDeposit(_operator, _amount, terraAddress);\\n        } else if (_typ == Type.REDEEM) {\\n            currentStatus.input = address(aUST);\\n            currentStatus.output = address(wUST);\\n\\n            aUST.safeTransferFrom(_msgSender(), address(this), _amount);\\n            aUST.burn(_amount, terraAddress);\\n\\n            emit InitRedemption(_operator, _amount, terraAddress);\\n        } else {\\n            revert(\\\"Operation: invalid operation type\\\");\\n        }\\n\\n        if (_autoFinish) {\\n            emit AutoFinishEnabled(address(this));\\n        }\\n    }\\n\\n    function initDepositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) public override {\\n        _init(\\n            Type.DEPOSIT,\\n            _operator,\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            _autoFinish\\n        );\\n    }\\n\\n    function initRedeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) public override {\\n        _init(\\n            Type.REDEEM,\\n            _operator,\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            _autoFinish\\n        );\\n    }\\n\\n    function _finish(uint256 _minAmountOut)\\n        private\\n        onlyGranted\\n        checkStopped\\n        returns (address, uint256)\\n    {\\n        // check status\\n        require(currentStatus.status == Status.RUNNING, \\\"Operation: idle\\\");\\n\\n        WrappedAsset output = WrappedAsset(currentStatus.output);\\n        uint256 amount = output.balanceOf(address(this));\\n        address operator = currentStatus.operator;\\n        address swapper = currentStatus.swapper;\\n\\n        require(amount > 0, \\\"Operation: not enough token\\\");\\n\\n        if (swapper != address(0x0)) {\\n            output.safeIncreaseAllowance(swapper, amount);\\n\\n            try\\n                ISwapper(swapper).swapToken(\\n                    address(output),\\n                    currentStatus.swapDest,\\n                    amount,\\n                    _minAmountOut,\\n                    operator\\n                )\\n            {} catch {\\n                output.safeDecreaseAllowance(swapper, amount);\\n                output.safeTransfer(operator, amount);\\n            }\\n        } else {\\n            output.safeTransfer(operator, amount);\\n        }\\n\\n        // state reference gas optimization\\n        Type typ = currentStatus.typ;\\n\\n        if (typ == Type.DEPOSIT) {\\n            emit FinishDeposit(operator, amount);\\n        } else if (typ == Type.REDEEM) {\\n            emit FinishRedemption(operator, amount);\\n        }\\n\\n        // reset\\n        currentStatus = DEFAULT_STATUS;\\n\\n        return (address(output), amount);\\n    }\\n\\n    function finish() public override {\\n        _finish(0);\\n    }\\n\\n    function finish(uint256 _minAmountOut) public override {\\n        _finish(_minAmountOut);\\n    }\\n\\n    function finishDepositStable() public override {\\n        _finish(0);\\n    }\\n\\n    function finishRedeemStable() public override {\\n        _finish(0);\\n    }\\n\\n    function halt() public override onlyController {\\n        currentStatus.status = Status.STOPPED;\\n    }\\n\\n    function recover() public override onlyController {\\n        if (currentStatus.operator == address(0x0)) {\\n            currentStatus.status = Status.IDLE;\\n        } else {\\n            currentStatus.status = Status.RUNNING;\\n        }\\n    }\\n\\n    function emergencyWithdraw(address _token, address _to)\\n        public\\n        override\\n        onlyController\\n    {\\n        require(\\n            currentStatus.status == Status.STOPPED,\\n            \\\"Operation: not an emergency\\\"\\n        );\\n\\n        if (currentStatus.operator != address(0x0)) {\\n            require(\\n                currentStatus.output != _token,\\n                \\\"Operation: withdrawal rejected\\\"\\n            );\\n        }\\n\\n        IERC20(_token).safeTransfer(\\n            _to,\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    function emergencyWithdraw(address payable _to)\\n        public\\n        override\\n        onlyController\\n    {\\n        require(\\n            currentStatus.status == Status.STOPPED,\\n            \\\"Operation: not an emergency\\\"\\n        );\\n\\n        _to.transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/extensions/ExchangeRateFeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IExchangeRateFeeder {\\n    event RateUpdated(\\n        address indexed _operator,\\n        address indexed _token,\\n        uint256 _before,\\n        uint256 _after,\\n        uint256 _updateCount\\n    );\\n\\n    enum Status {NEUTRAL, RUNNING, STOPPED}\\n\\n    struct Token {\\n        Status status;\\n        uint256 exchangeRate;\\n        uint256 period;\\n        uint256 weight;\\n        uint256 lastUpdatedAt;\\n    }\\n\\n    function exchangeRateOf(address _token, bool _simulate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function update(address _token) external;\\n}\\n\\ninterface IExchangeRateFeederGov {\\n    function addToken(\\n        address _token,\\n        uint256 _baseRate,\\n        uint256 _period,\\n        uint256 _weight\\n    ) external;\\n\\n    function startUpdate(address[] memory _tokens) external;\\n\\n    function stopUpdate(address[] memory _tokens) external;\\n}\\n\\ncontract ExchangeRateFeeder is IExchangeRateFeeder, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => Token) public tokens;\\n\\n    function addToken(\\n        address _token,\\n        uint256 _baseRate,\\n        uint256 _period,\\n        uint256 _weight\\n    ) public onlyOwner {\\n        tokens[_token] = Token({\\n            status: Status.NEUTRAL,\\n            exchangeRate: _baseRate,\\n            period: _period,\\n            weight: _weight,\\n            lastUpdatedAt: block.timestamp\\n        });\\n    }\\n\\n    function startUpdate(address[] memory _tokens) public onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokens[_tokens[i]].status = Status.RUNNING;\\n            tokens[_tokens[i]].lastUpdatedAt = block.timestamp; // reset\\n        }\\n    }\\n\\n    function stopUpdate(address[] memory _tokens) public onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokens[_tokens[i]].status = Status.STOPPED;\\n        }\\n    }\\n\\n    function exchangeRateOf(address _token, bool _simulate)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 exchangeRate = tokens[_token].exchangeRate;\\n        if (_simulate) {\\n            Token memory token = tokens[_token];\\n\\n            uint256 elapsed = block.timestamp.sub(token.lastUpdatedAt);\\n            uint256 updateCount = elapsed.div(token.period);\\n            for (uint256 i = 0; i < updateCount; i++) {\\n                exchangeRate = exchangeRate.mul(token.weight).div(1e18);\\n            }\\n        }\\n        return exchangeRate;\\n    }\\n\\n    function update(address _token) public override {\\n        Token memory token = tokens[_token];\\n\\n        require(token.status == Status.RUNNING, \\\"Feeder: invalid status\\\");\\n\\n        uint256 elapsed = block.timestamp.sub(token.lastUpdatedAt);\\n        if (elapsed < token.period) {\\n            return;\\n        }\\n\\n        uint256 updateCount = elapsed.div(token.period);\\n        uint256 exchangeRateBefore = token.exchangeRate; // log\\n        for (uint256 i = 0; i < updateCount; i++) {\\n            token.exchangeRate = token.exchangeRate.mul(token.weight).div(1e18);\\n        }\\n        token.lastUpdatedAt = block.timestamp;\\n\\n        tokens[_token] = token;\\n\\n        emit RateUpdated(\\n            msg.sender,\\n            _token,\\n            exchangeRateBefore,\\n            token.exchangeRate,\\n            updateCount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/extensions/ConversionPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {\\n    IUniswapV2Pair\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport {IExchangeRateFeeder} from \\\"./ExchangeRateFeeder.sol\\\";\\nimport {IRouter, IConversionRouter} from \\\"../core/Router.sol\\\";\\nimport {Operator} from \\\"../utils/Operator.sol\\\";\\nimport {ISwapper} from \\\"../swapper/ISwapper.sol\\\";\\nimport {IERC20Controlled, ERC20Controlled} from \\\"../utils/ERC20Controlled.sol\\\";\\nimport {UniswapV2Library} from \\\"../libraries/UniswapV2Library.sol\\\";\\n\\ninterface IConversionPool {\\n    function deposit(uint256 _amount) external;\\n\\n    function deposit(uint256 _amount, uint256 _minAmountOut) external;\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minAmountOut) external;\\n}\\n\\ncontract ConversionPool is IConversionPool, Context, Operator, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Controlled;\\n\\n    // pool token settings\\n    IERC20 public inputToken; // DAI / USDC / USDT\\n    IERC20Controlled public outputToken; // aDAI / aUSDC / aUSDT\\n\\n    // swap settings\\n    ISwapper public swapper;\\n\\n    // proxy settings\\n    IERC20 public proxyInputToken; // UST\\n    IERC20 public proxyOutputToken; // aUST\\n    uint256 public proxyReserve = 0; // aUST reserve\\n\\n    address public optRouter;\\n    IExchangeRateFeeder public feeder;\\n\\n    // flags\\n    bool public isDepositAllowed = true;\\n    bool public isRedemptionAllowed = true;\\n\\n    function initialize(\\n        // ===== tokens\\n        string memory _outputTokenName,\\n        string memory _outputTokenSymbol,\\n        address _inputToken,\\n        address _proxyInputToken,\\n        address _proxyOutputToken,\\n        // ===== others\\n        address _optRouter,\\n        address _swapper,\\n        address _exchangeRateFeeder\\n    ) public initializer {\\n        inputToken = IERC20(_inputToken);\\n        outputToken = new ERC20Controlled(_outputTokenName, _outputTokenSymbol);\\n\\n        proxyInputToken = IERC20(_proxyInputToken);\\n        proxyOutputToken = IERC20(_proxyOutputToken);\\n\\n        setRole(msg.sender, msg.sender);\\n        setSwapper(_swapper);\\n        setOperationRouter(_optRouter);\\n        setExchangeRateFeeder(_exchangeRateFeeder);\\n    }\\n\\n    // governance\\n\\n    function setSwapper(address _swapper) public onlyOwner {\\n        swapper = ISwapper(_swapper);\\n        inputToken.safeApprove(address(swapper), type(uint256).max);\\n    }\\n\\n    function setOperationRouter(address _optRouter) public onlyOwner {\\n        optRouter = _optRouter;\\n        proxyInputToken.safeApprove(optRouter, type(uint256).max);\\n        proxyOutputToken.safeApprove(optRouter, type(uint256).max);\\n    }\\n\\n    function setExchangeRateFeeder(address _exchangeRateFeeder)\\n        public\\n        onlyOwner\\n    {\\n        feeder = IExchangeRateFeeder(_exchangeRateFeeder);\\n    }\\n\\n    function setDepositAllowance(bool _allow) public onlyOwner {\\n        isDepositAllowed = _allow;\\n    }\\n\\n    function setRedemptionAllowance(bool _allow) public onlyOwner {\\n        isRedemptionAllowed = _allow;\\n    }\\n\\n    // migrate\\n    function migrate(address _to) public onlyOwner {\\n        require(\\n            !(isDepositAllowed && isRedemptionAllowed),\\n            \\\"ConversionPool: invalid status\\\"\\n        );\\n\\n        proxyOutputToken.transfer(\\n            _to,\\n            proxyOutputToken.balanceOf(address(this))\\n        );\\n    }\\n\\n    // reserve\\n\\n    function provideReserve(uint256 _amount) public onlyGranted {\\n        proxyReserve = proxyReserve.add(_amount);\\n        proxyOutputToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n    }\\n\\n    function removeReserve(uint256 _amount) public onlyGranted {\\n        proxyReserve = proxyReserve.sub(_amount);\\n        proxyOutputToken.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    // operations\\n\\n    modifier _updateExchangeRate {\\n        feeder.update(address(inputToken));\\n        feeder.update(address(proxyInputToken));\\n\\n        _;\\n    }\\n\\n    function earn() public onlyOwner _updateExchangeRate {\\n        require(\\n            proxyReserve < proxyOutputToken.balanceOf(address(this)),\\n            \\\"ConversionPool: not enough balance\\\"\\n        );\\n\\n        // UST(aUST) - UST(aToken) = earnable amount\\n        uint256 pER = feeder.exchangeRateOf(address(inputToken), false);\\n        uint256 pv = outputToken.totalSupply().mul(pER).div(1e18);\\n\\n        uint256 aER = feeder.exchangeRateOf(address(proxyInputToken), false);\\n        uint256 av =\\n            proxyOutputToken\\n                .balanceOf(address(this))\\n                .sub(proxyReserve)\\n                .mul(aER)\\n                .div(1e18);\\n\\n        if (av < pv) {\\n            return;\\n        }\\n\\n        uint256 earnAmount = av.sub(pv);\\n        proxyOutputToken.safeTransfer(\\n            msg.sender,\\n            earnAmount.mul(1e18).div(aER)\\n        );\\n    }\\n\\n    function deposit(uint256 _amount) public override {\\n        deposit(_amount, 0);\\n    }\\n\\n    function deposit(uint256 _amount, uint256 _minAmountOut)\\n        public\\n        override\\n        _updateExchangeRate\\n    {\\n        require(isDepositAllowed, \\\"ConversionPool: deposit not stopped\\\");\\n\\n        inputToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n        // swap to UST\\n        swapper.swapToken(\\n            address(inputToken),\\n            address(proxyInputToken),\\n            _amount,\\n            _minAmountOut,\\n            address(this)\\n        );\\n\\n        // depositStable\\n        uint256 ust = proxyInputToken.balanceOf(address(this));\\n        IRouter(optRouter).depositStable(ust);\\n\\n        uint256 pER = feeder.exchangeRateOf(address(inputToken), false);\\n        outputToken.mint(_msgSender(), ust.mul(1e18).div(pER));\\n    }\\n\\n    function redeem(uint256 _amount) public override _updateExchangeRate {\\n        require(isRedemptionAllowed, \\\"ConversionPool: redemption not allowed\\\");\\n\\n        outputToken.burnFrom(_msgSender(), _amount);\\n\\n        uint256 pER = feeder.exchangeRateOf(address(inputToken), false);\\n        uint256 out = _amount.mul(pER).div(1e18);\\n\\n        uint256 aER = feeder.exchangeRateOf(address(proxyInputToken), false);\\n        IConversionRouter(optRouter).redeemStable(\\n            _msgSender(),\\n            out.mul(1e18).div(aER),\\n            address(swapper),\\n            address(inputToken)\\n        );\\n    }\\n\\n    function redeem(uint256 _amount, uint256 _minAmountOut) public override {\\n        redeem(_amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/core/RouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {Ownable_} from \\\"../utils/Ownable.sol\\\";\\nimport {StdQueue} from \\\"../utils/Queue.sol\\\";\\nimport {IOperation} from \\\"../operations/Operation.sol\\\";\\nimport {IOperationStore} from \\\"../operations/OperationStore.sol\\\";\\nimport {IOperationFactory} from \\\"../operations/OperationFactory.sol\\\";\\n\\ninterface IRouterV2 {\\n    // ======================= common ======================= //\\n\\n    function init(\\n        IOperation.Type _type,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) external returns (address);\\n\\n    function finish(address _operation) external;\\n\\n    // ======================= deposit stable ======================= //\\n\\n    function depositStable(uint256 _amount) external returns (address);\\n\\n    function depositStable(address _operator, uint256 _amount)\\n        external\\n        returns (address);\\n\\n    function initDepositStable(uint256 _amount) external returns (address);\\n\\n    function finishDepositStable(address _operation) external;\\n\\n    // ======================= redeem stable ======================= //\\n\\n    function redeemStable(uint256 _amount) external returns (address);\\n\\n    function redeemStable(address _operator, uint256 _amount)\\n        external\\n        returns (address);\\n\\n    function initRedeemStable(uint256 _amount) external returns (address);\\n\\n    function finishRedeemStable(address _operation) external;\\n}\\n\\ninterface IConversionRouterV2 is IRouterV2 {\\n    // ======================= deposit stable ======================= //\\n\\n    function depositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external returns (address);\\n\\n    function initDepositStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external returns (address);\\n\\n    // ======================= redeem stable ======================= //\\n\\n    function redeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external returns (address);\\n\\n    function initRedeemStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external returns (address);\\n}\\n\\ncontract RouterV2 is IConversionRouterV2, Context, Ownable_, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // operation\\n    address public optStore;\\n    uint256 public optStdId;\\n    address public optFactory;\\n\\n    // constant\\n    address public wUST;\\n    address public aUST;\\n\\n    // flags\\n    bool public isDepositAllowed;\\n    bool public isRedemptionAllowed;\\n\\n    function setOperationStore(address _store) public onlyOwner {\\n        optStore = _store;\\n    }\\n\\n    function setOperationId(uint256 _optStdId) public onlyOwner {\\n        optStdId = _optStdId;\\n    }\\n\\n    function setOperationFactory(address _factory) public onlyOwner {\\n        optFactory = _factory;\\n    }\\n\\n    function setDepositAllowance(bool _allow) public onlyOwner {\\n        isDepositAllowed = _allow;\\n    }\\n\\n    function setRedemptionAllowance(bool _allow) public onlyOwner {\\n        isRedemptionAllowed = _allow;\\n    }\\n\\n    function _init(\\n        IOperation.Type _typ,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) internal returns (address) {\\n        IOperationStore store = IOperationStore(optStore);\\n        if (store.getAvailableOperation() == address(0x0)) {\\n            address instance = IOperationFactory(optFactory).build(optStdId);\\n            store.allocate(instance);\\n        }\\n        IOperation operation = IOperation(store.init(_autoFinish));\\n\\n        // check allowance\\n        if (IERC20(wUST).allowance(address(this), address(operation)) == 0) {\\n            IERC20(wUST).safeApprove(address(operation), type(uint256).max);\\n            IERC20(aUST).safeApprove(address(operation), type(uint256).max);\\n        }\\n\\n        if (_typ == IOperation.Type.DEPOSIT) {\\n            IERC20(wUST).safeTransferFrom(_msgSender(), address(this), _amount);\\n            operation.initDepositStable(\\n                _operator,\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                _autoFinish\\n            );\\n            return address(operation);\\n        }\\n\\n        if (_typ == IOperation.Type.REDEEM) {\\n            IERC20(aUST).safeTransferFrom(_msgSender(), address(this), _amount);\\n            operation.initRedeemStable(\\n                _operator,\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                _autoFinish\\n            );\\n            return address(operation);\\n        }\\n\\n        revert(\\\"Router: invalid operation type\\\");\\n    }\\n\\n    function _finish(address _opt) internal {\\n        IOperationStore.Status status =\\n            IOperationStore(optStore).getStatusOf(_opt);\\n\\n        if (status == IOperationStore.Status.RUNNING_MANUAL) {\\n            // check sender\\n            require(\\n                IOperation(_opt).getCurrentStatus().operator == _msgSender(),\\n                \\\"Router: invalid sender\\\"\\n            );\\n        } else {\\n            revert(\\\"Router: invalid status for finish\\\");\\n        }\\n\\n        IOperation(_opt).finish();\\n        IOperationStore(optStore).finish(_opt);\\n    }\\n\\n    // =================================== COMMON =================================== //\\n\\n    function init(\\n        IOperation.Type _type,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) public override returns (address) {\\n        return\\n            _init(_type, _operator, _amount, _swapper, _swapDest, _autoFinish);\\n    }\\n\\n    function finish(address _operation) public override {\\n        return _finish(_operation);\\n    }\\n\\n    // =================================== DEPOSIT STABLE =================================== //\\n\\n    function depositStable(uint256 _amount) public override returns (address) {\\n        return\\n            _init(\\n                IOperation.Type.DEPOSIT,\\n                _msgSender(),\\n                _amount,\\n                address(0x0),\\n                address(0x0),\\n                true\\n            );\\n    }\\n\\n    function depositStable(address _operator, uint256 _amount)\\n        public\\n        override\\n        returns (address)\\n    {\\n        return\\n            _init(\\n                IOperation.Type.DEPOSIT,\\n                _operator,\\n                _amount,\\n                address(0x0),\\n                address(0x0),\\n                true\\n            );\\n    }\\n\\n    function depositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override returns (address) {\\n        return\\n            _init(\\n                IOperation.Type.DEPOSIT,\\n                _operator,\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                true\\n            );\\n    }\\n\\n    function initDepositStable(uint256 _amount)\\n        public\\n        override\\n        returns (address)\\n    {\\n        return\\n            _init(\\n                IOperation.Type.DEPOSIT,\\n                _msgSender(),\\n                _amount,\\n                address(0x0),\\n                address(0x0),\\n                false\\n            );\\n    }\\n\\n    function initDepositStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override returns (address) {\\n        return\\n            _init(\\n                IOperation.Type.DEPOSIT,\\n                _msgSender(),\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                false\\n            );\\n    }\\n\\n    function finishDepositStable(address _operation) public override {\\n        _finish(_operation);\\n    }\\n\\n    // =================================== REDEEM STABLE =================================== //\\n\\n    function redeemStable(uint256 _amount) public override returns (address) {\\n        return\\n            _init(\\n                IOperation.Type.REDEEM,\\n                _msgSender(),\\n                _amount,\\n                address(0x0),\\n                address(0x0),\\n                true\\n            );\\n    }\\n\\n    function redeemStable(address _operator, uint256 _amount)\\n        public\\n        override\\n        returns (address)\\n    {\\n        return\\n            _init(\\n                IOperation.Type.REDEEM,\\n                _operator,\\n                _amount,\\n                address(0x0),\\n                address(0x0),\\n                true\\n            );\\n    }\\n\\n    function redeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override returns (address) {\\n        return\\n            _init(\\n                IOperation.Type.REDEEM,\\n                _operator,\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                true\\n            );\\n    }\\n\\n    function initRedeemStable(uint256 _amount)\\n        public\\n        override\\n        returns (address)\\n    {\\n        return\\n            _init(\\n                IOperation.Type.REDEEM,\\n                _msgSender(),\\n                _amount,\\n                address(0x0),\\n                address(0x0),\\n                false\\n            );\\n    }\\n\\n    function initRedeemStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override returns (address) {\\n        return\\n            _init(\\n                IOperation.Type.REDEEM,\\n                _msgSender(),\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                false\\n            );\\n    }\\n\\n    function finishRedeemStable(address _operation) public override {\\n        _finish(_operation);\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/core/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {Ownable_} from \\\"../utils/Ownable.sol\\\";\\nimport {StdQueue} from \\\"../utils/Queue.sol\\\";\\nimport {IOperation} from \\\"../operations/Operation.sol\\\";\\nimport {IOperationStore} from \\\"../operations/OperationStore.sol\\\";\\nimport {IOperationFactory} from \\\"../operations/OperationFactory.sol\\\";\\n\\ninterface IRouter {\\n    // ======================= common ======================= //\\n\\n    function init(\\n        IOperation.Type _type,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) external;\\n\\n    function finish(address _operation) external;\\n\\n    // ======================= deposit stable ======================= //\\n\\n    function depositStable(uint256 _amount) external;\\n\\n    function depositStable(address _operator, uint256 _amount) external;\\n\\n    function initDepositStable(uint256 _amount) external;\\n\\n    function finishDepositStable(address _operation) external;\\n\\n    // ======================= redeem stable ======================= //\\n\\n    function redeemStable(uint256 _amount) external;\\n\\n    function redeemStable(address _operator, uint256 _amount) external;\\n\\n    function initRedeemStable(uint256 _amount) external;\\n\\n    function finishRedeemStable(address _operation) external;\\n}\\n\\ninterface IConversionRouter {\\n    // ======================= deposit stable ======================= //\\n\\n    function depositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external;\\n\\n    function initDepositStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external;\\n\\n    // ======================= redeem stable ======================= //\\n\\n    function redeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external;\\n\\n    function initRedeemStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) external;\\n}\\n\\ncontract Router is IRouter, IConversionRouter, Context, Ownable_, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // operation\\n    address public optStore;\\n    uint256 public optStdId;\\n    address public optFactory;\\n\\n    // constant\\n    address public wUST;\\n    address public aUST;\\n\\n    // flags\\n    bool public isDepositAllowed = true;\\n    bool public isRedemptionAllowed = true;\\n\\n    function initialize(\\n        address _optStore,\\n        uint256 _optStdId,\\n        address _optFactory,\\n        address _wUST,\\n        address _aUST\\n    ) public initializer {\\n        optStore = _optStore;\\n        optStdId = _optStdId;\\n        optFactory = _optFactory;\\n        wUST = _wUST;\\n        aUST = _aUST;\\n        setOwner(msg.sender);\\n    }\\n\\n    function setOperationStore(address _store) public onlyOwner {\\n        optStore = _store;\\n    }\\n\\n    function setOperationId(uint256 _optStdId) public onlyOwner {\\n        optStdId = _optStdId;\\n    }\\n\\n    function setOperationFactory(address _factory) public onlyOwner {\\n        optFactory = _factory;\\n    }\\n\\n    function setDepositAllowance(bool _allow) public onlyOwner {\\n        isDepositAllowed = _allow;\\n    }\\n\\n    function setRedemptionAllowance(bool _allow) public onlyOwner {\\n        isRedemptionAllowed = _allow;\\n    }\\n\\n    function _init(\\n        IOperation.Type _typ,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) internal {\\n        IOperationStore store = IOperationStore(optStore);\\n        if (store.getAvailableOperation() == address(0x0)) {\\n            address instance = IOperationFactory(optFactory).build(optStdId);\\n            store.allocate(instance);\\n        }\\n        IOperation operation = IOperation(store.init(_autoFinish));\\n\\n        // check allowance\\n        if (IERC20(wUST).allowance(address(this), address(operation)) == 0) {\\n            IERC20(wUST).safeApprove(address(operation), type(uint256).max);\\n            IERC20(aUST).safeApprove(address(operation), type(uint256).max);\\n        }\\n\\n        if (_typ == IOperation.Type.DEPOSIT) {\\n            IERC20(wUST).safeTransferFrom(_msgSender(), address(this), _amount);\\n            operation.initDepositStable(\\n                _operator,\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                _autoFinish\\n            );\\n            return;\\n        }\\n\\n        if (_typ == IOperation.Type.REDEEM) {\\n            IERC20(aUST).safeTransferFrom(_msgSender(), address(this), _amount);\\n            operation.initRedeemStable(\\n                _operator,\\n                _amount,\\n                _swapper,\\n                _swapDest,\\n                _autoFinish\\n            );\\n            return;\\n        }\\n\\n        revert(\\\"Router: invalid operation type\\\");\\n    }\\n\\n    function _finish(address _opt) internal {\\n        IOperationStore.Status status =\\n            IOperationStore(optStore).getStatusOf(_opt);\\n\\n        if (status == IOperationStore.Status.RUNNING_MANUAL) {\\n            // check sender\\n            require(\\n                IOperation(_opt).getCurrentStatus().operator == _msgSender(),\\n                \\\"Router: invalid sender\\\"\\n            );\\n        } else {\\n            revert(\\\"Router: invalid status for finish\\\");\\n        }\\n\\n        IOperation(_opt).finish();\\n        IOperationStore(optStore).finish(_opt);\\n    }\\n\\n    // =================================== COMMON =================================== //\\n\\n    function init(\\n        IOperation.Type _type,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) public override {\\n        _init(_type, _operator, _amount, _swapper, _swapDest, _autoFinish);\\n    }\\n\\n    function finish(address _operation) public override {\\n        _finish(_operation);\\n    }\\n\\n    // =================================== DEPOSIT STABLE =================================== //\\n\\n    function depositStable(uint256 _amount) public override {\\n        _init(\\n            IOperation.Type.DEPOSIT,\\n            _msgSender(),\\n            _amount,\\n            address(0x0),\\n            address(0x0),\\n            true\\n        );\\n    }\\n\\n    function depositStable(address _operator, uint256 _amount) public override {\\n        _init(\\n            IOperation.Type.DEPOSIT,\\n            _operator,\\n            _amount,\\n            address(0x0),\\n            address(0x0),\\n            true\\n        );\\n    }\\n\\n    function depositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override {\\n        _init(\\n            IOperation.Type.DEPOSIT,\\n            _operator,\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            true\\n        );\\n    }\\n\\n    function initDepositStable(uint256 _amount) public override {\\n        _init(\\n            IOperation.Type.DEPOSIT,\\n            _msgSender(),\\n            _amount,\\n            address(0x0),\\n            address(0x0),\\n            false\\n        );\\n    }\\n\\n    function initDepositStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override {\\n        _init(\\n            IOperation.Type.DEPOSIT,\\n            _msgSender(),\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            false\\n        );\\n    }\\n\\n    function finishDepositStable(address _operation) public override {\\n        _finish(_operation);\\n    }\\n\\n    // =================================== REDEEM STABLE =================================== //\\n\\n    function redeemStable(uint256 _amount) public override {\\n        _init(\\n            IOperation.Type.REDEEM,\\n            _msgSender(),\\n            _amount,\\n            address(0x0),\\n            address(0x0),\\n            true\\n        );\\n    }\\n\\n    function redeemStable(address _operator, uint256 _amount) public override {\\n        _init(\\n            IOperation.Type.REDEEM,\\n            _operator,\\n            _amount,\\n            address(0x0),\\n            address(0x0),\\n            true\\n        );\\n    }\\n\\n    function redeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override {\\n        _init(\\n            IOperation.Type.REDEEM,\\n            _operator,\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            true\\n        );\\n    }\\n\\n    function initRedeemStable(uint256 _amount) public override {\\n        _init(\\n            IOperation.Type.REDEEM,\\n            _msgSender(),\\n            _amount,\\n            address(0x0),\\n            address(0x0),\\n            false\\n        );\\n    }\\n\\n    function initRedeemStable(\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest\\n    ) public override {\\n        _init(\\n            IOperation.Type.REDEEM,\\n            _msgSender(),\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            false\\n        );\\n    }\\n\\n    function finishRedeemStable(address _operation) public override {\\n        _finish(_operation);\\n    }\\n}\\n\"\r\n    },\r\n    \"@orionterra/eth-anchor-contracts/contracts/assets/WrappedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface WrappedAsset is IERC20 {\\n    event Burn(address indexed _sender, bytes32 indexed _to, uint256 amount);\\n\\n    function burn(uint256 amount, bytes32 to) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeder\",\"outputs\":[{\"internalType\":\"contract ExchangeRateFeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_outputTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_outputTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyOutputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeRateFeeder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_inputTokenDecimals\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputToken10PowDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedemptionAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputToken\",\"outputs\":[{\"internalType\":\"contract IERC20Controlled\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyInputToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOutputToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setDepositAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRateFeeder\",\"type\":\"address\"}],\"name\":\"setExchangeRateFeeder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optRouter\",\"type\":\"address\"}],\"name\":\"setOperationRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setRedemptionAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"takeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwaplessConversionPool","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}