{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\multiSignature\\multiSignatureClient.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * Phoenix\r\n * Copyright (C) 2020 Phoenix Options Protocol\r\n */\r\ninterface IMultiSignature{\r\n    function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns(uint256);\r\n}\r\ncontract multiSignatureClient{\r\n    uint256 private constant multiSignaturePositon = uint256(keccak256(\"org.Phoenix.multiSignature.storage\"));\r\n    constructor(address multiSignature) public {\r\n        require(multiSignature != address(0),\"multiSignatureClient : Multiple signature contract address is zero!\");\r\n        saveValue(multiSignaturePositon,uint256(multiSignature));\r\n    }    \r\n    function getMultiSignatureAddress()public view returns (address){\r\n        return address(getValue(multiSignaturePositon));\r\n    }\r\n    modifier validCall(){\r\n        checkMultiSignature();\r\n        _;\r\n    }\r\n    function checkMultiSignature() internal {\r\n        uint256 value;\r\n        assembly {\r\n            value := callvalue()\r\n        }\r\n        bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, address(this),value,msg.data));\r\n        address multiSign = getMultiSignatureAddress();\r\n        uint256 index = getValue(uint256(msgHash));\r\n        uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);\r\n        require(newIndex > index, \"multiSignatureClient : This tx is not aprroved\");\r\n        saveValue(uint256(msgHash),newIndex);\r\n    }\r\n    function saveValue(uint256 position,uint256 value) internal \r\n    {\r\n        assembly {\r\n            sstore(position, value)\r\n        }\r\n    }\r\n    function getValue(uint256 position) internal view returns (uint256 value) {\r\n        assembly {\r\n            value := sload(position)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\multiSignature\\multiSignature.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * Phoenix\r\n * Copyright (C) 2020 Phoenix Options Protocol\r\n */\r\n/**\r\n * @title  multiple Signature Contract\r\n\r\n */\r\n\r\n library whiteListAddress{\r\n    // add whiteList\r\n    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\r\n        if (!isEligibleAddress(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\ncontract multiSignature  is multiSignatureClient {\r\n    using whiteListAddress for address[];\r\n    address[] public signatureOwners;\r\n    uint256 public threshold;\r\n    struct signatureInfo {\r\n        address applicant;\r\n        address[] signatures;\r\n    }\r\n    mapping(bytes32=>signatureInfo[]) public signatureMap;\r\n    event TransferOwner(address indexed sender,address indexed oldOwner,address indexed newOwner);\r\n    event CreateApplication(address indexed from,address indexed to,bytes32 indexed msgHash,uint256 index,uint256 value);\r\n    event SignApplication(address indexed from,bytes32 indexed msgHash,uint256 index);\r\n    event RevokeApplication(address indexed from,bytes32 indexed msgHash,uint256 index);\r\n    constructor(address[] memory owners,uint256 limitedSignNum) multiSignatureClient(address(this)) public {\r\n        require(owners.length>=limitedSignNum,\"Multiple Signature : Signature threshold is greater than owners' length!\");\r\n        signatureOwners = owners;\r\n        threshold = limitedSignNum;\r\n    }\r\n    function transferOwner(uint256 index,address newOwner) public onlyOwner validCall{\r\n        require(index<signatureOwners.length,\"Multiple Signature : Owner index is overflow!\");\r\n        emit TransferOwner(msg.sender,signatureOwners[index],newOwner);\r\n        signatureOwners[index] = newOwner;\r\n    }\r\n    function createApplication(address to,uint256 value,bytes calldata txData) external returns(uint256) {\r\n        bytes32 msghash = getApplicationHash(msg.sender,to,value,txData);\r\n        uint256 index = signatureMap[msghash].length;\r\n        signatureMap[msghash].push(signatureInfo(msg.sender,new address[](0)));\r\n        emit CreateApplication(msg.sender,to,msghash,index,value);\r\n        return index;\r\n    }\r\n    function signApplication(bytes32 msghash,uint256 index) external onlyOwner validIndex(msghash,index){\r\n        emit SignApplication(msg.sender,msghash,index);\r\n        signatureMap[msghash][index].signatures.addWhiteListAddress(msg.sender);\r\n    }\r\n    function revokeSignApplication(bytes32 msghash,uint256 index) external onlyOwner validIndex(msghash,index){\r\n        emit RevokeApplication(msg.sender,msghash,index);\r\n        signatureMap[msghash][index].signatures.removeWhiteListAddress(msg.sender);\r\n    }\r\n    function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns(uint256){\r\n        signatureInfo[] storage info = signatureMap[msghash];\r\n        for (uint256 i=lastIndex;i<info.length;i++){\r\n            if(info[i].signatures.length >= threshold){\r\n                return i+1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    function getApplicationInfo(bytes32 msghash,uint256 index) validIndex(msghash,index) public view returns (address,address[]memory) {\r\n        signatureInfo memory info = signatureMap[msghash][index];\r\n        return (info.applicant,info.signatures);\r\n    }\r\n    function getApplicationCount(bytes32 msghash) public view returns (uint256) {\r\n        return signatureMap[msghash].length;\r\n    }\r\n    function getApplicationHash(address from,address to,uint256 value,bytes memory txData) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(from, to,value,txData));\r\n    }\r\n    modifier onlyOwner{\r\n        require(signatureOwners.isEligibleAddress(msg.sender),\"Multiple Signature : caller is not in the ownerList!\");\r\n        _;\r\n    }\r\n    modifier validIndex(bytes32 msghash,uint256 index){\r\n        require(index<signatureMap[msghash].length,\"Multiple Signature : Message index is overflow!\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"limitedSignNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RevokeApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SignApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwner\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"name\":\"createApplication\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msghash\",\"type\":\"bytes32\"}],\"name\":\"getApplicationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"name\":\"getApplicationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msghash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getApplicationInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMultiSignatureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msghash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"name\":\"getValidSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msghash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeSignApplication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msghash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"signApplication\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatureMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatureOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"multiSignature","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000729be9a533eb1c7945d6a9b3e98d34796d07a4e50000000000000000000000005257d29e2acbeb7ad43da5610c093647e61c812f000000000000000000000000707a9d8b16e59bdd12d3cb7c91aad7c89a52871a00000000000000000000000097b048bc4bb9686fbfcdb844ea8aeae28b31a6270000000000000000000000005ea60b9dd908b96f7165a24c3d984ed625e7639a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cc57c33a45529a8bd130bb173864b746838f04b028dace72b9eb8d2374875e01"}]}