{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface ERCToken {\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\ncontract transferPool {\r\n    \r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    address private owner;\r\n    ERCToken private token;\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    function transferETH( address[] memory _tos) public payable returns(bool){\r\n        require(msg.value > 0, 'send ETH must > 0');\r\n        require(_tos.length > 0, '_tos.length must > 0');\r\n        require(msg.value > _tos.length, 'value must > _tos.length');\r\n        uint256 average = (msg.value / _tos.length);\r\n        for (uint32 i = 0; i < _tos.length; i++) {\r\n            payable(_tos[i]).transfer(average);\r\n        }\r\n        return true;\r\n    }\r\n\t//调用之前要先approve,合约才有权限转当前地址的币\r\n    function transferToken(address contract_address, address[] memory _tos, uint256 amount) public returns(bool){\r\n        require(amount > 0, 'send Token must > 0');\r\n        require(_tos.length>0,'_tos.length must > 0');\r\n        require(amount > _tos.length, 'amount must > _tos.length');\r\n        token = ERCToken(contract_address);\r\n        uint256 average = (amount / _tos.length);\r\n        for(uint32 i=0;i<_tos.length;i++){\r\n            bool success = token.transferFrom(msg.sender, _tos[i] ,average);\r\n            require(success==true,'transferFrom fail');\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function claimETH() public onlyOwner{\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    function claimToken(address contract_address) public onlyOwner {\r\n        token = ERCToken(contract_address);\r\n        bool success = token.transfer(owner,token.balanceOf(address(this)));\r\n        require(success==true,'transfer fail');\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"}],\"name\":\"transferETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"transferPool","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e80c91be50a26a868cd1f8087834b8808a201d1cdc5c3ee86348e3518c022da"}]}